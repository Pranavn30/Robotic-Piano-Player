
GPIO_Expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003254  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003450  08003450  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003450  08003450  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003450  08003450  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08003464  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003464  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099a0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000191a  00000000  00000000  00029a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002b340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000077b  00000000  00000000  0002bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281c2  00000000  00000000  0002c493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdff  00000000  00000000  00054655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5e76  00000000  00000000  00060454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002754  00000000  00000000  001562cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00158a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080033f8 	.word	0x080033f8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080033f8 	.word	0x080033f8

080001fc <ON1_PCF8574>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ON1_PCF8574()
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af02      	add	r7, sp, #8
	uint8_t data_write1[1] = {0x01};
 8000202:	2301      	movs	r3, #1
 8000204:	733b      	strb	r3, [r7, #12]
	uint8_t data_write2[1] = {0x00};
 8000206:	2300      	movs	r3, #0
 8000208:	723b      	strb	r3, [r7, #8]
	uint8_t data_write3[1] = {0x02};
 800020a:	2302      	movs	r3, #2
 800020c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &data_write1[0], 1, 1000);
 800020e:	f107 020c 	add.w	r2, r7, #12
 8000212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2301      	movs	r3, #1
 800021a:	2140      	movs	r1, #64	; 0x40
 800021c:	4812      	ldr	r0, [pc, #72]	; (8000268 <ON1_PCF8574+0x6c>)
 800021e:	f001 f8a9 	bl	8001374 <HAL_I2C_Master_Transmit>
	HAL_Delay(500);
 8000222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000226:	f000 fd79 	bl	8000d1c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &data_write2[0], 1, 1000);
 800022a:	f107 0208 	add.w	r2, r7, #8
 800022e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	480b      	ldr	r0, [pc, #44]	; (8000268 <ON1_PCF8574+0x6c>)
 800023a:	f001 f89b 	bl	8001374 <HAL_I2C_Master_Transmit>
	HAL_Delay(500);
 800023e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000242:	f000 fd6b 	bl	8000d1c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &data_write3[0], 1, 1000);
 8000246:	1d3a      	adds	r2, r7, #4
 8000248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2301      	movs	r3, #1
 8000250:	2140      	movs	r1, #64	; 0x40
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <ON1_PCF8574+0x6c>)
 8000254:	f001 f88e 	bl	8001374 <HAL_I2C_Master_Transmit>
	HAL_Delay(500);
 8000258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025c:	f000 fd5e 	bl	8000d1c <HAL_Delay>
}
 8000260:	bf00      	nop
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000028 	.word	0x20000028

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 fcdf 	bl	8000c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f80b 	bl	800028e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 f90a 	bl	8000490 <MX_GPIO_Init>
  MX_I2C1_Init();
 800027c:	f000 f84e 	bl	800031c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000280:	f000 f88a 	bl	8000398 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000284:	f000 f8c6 	bl	8000414 <MX_I2C3_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  ON1_PCF8574();
 8000288:	f7ff ffb8 	bl	80001fc <ON1_PCF8574>
 800028c:	e7fc      	b.n	8000288 <main+0x1c>

0800028e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	b096      	sub	sp, #88	; 0x58
 8000292:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	2244      	movs	r2, #68	; 0x44
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f003 f87f 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	463b      	mov	r3, r7
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b4:	f001 fc08 	bl	8001ac8 <HAL_PWREx_ControlVoltageScaling>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002be:	f000 fb1b 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c2:	2310      	movs	r3, #16
 80002c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ce:	2360      	movs	r3, #96	; 0x60
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fca8 	bl	8001c30 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002e6:	f000 fb07 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ee:	2300      	movs	r3, #0
 80002f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fe:	463b      	mov	r3, r7
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 f8ae 	bl	8002464 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800030e:	f000 faf3 	bl	80008f8 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3758      	adds	r7, #88	; 0x58
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <MX_I2C1_Init+0x74>)
 8000322:	4a1c      	ldr	r2, [pc, #112]	; (8000394 <MX_I2C1_Init+0x78>)
 8000324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000326:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <MX_I2C1_Init+0x74>)
 8000328:	f640 6214 	movw	r2, #3604	; 0xe14
 800032c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_I2C1_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000334:	4b16      	ldr	r3, [pc, #88]	; (8000390 <MX_I2C1_Init+0x74>)
 8000336:	2201      	movs	r2, #1
 8000338:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_I2C1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000346:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_I2C1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_I2C1_Init+0x74>)
 800035a:	f000 ff7b 	bl	8001254 <HAL_I2C_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000364:	f000 fac8 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000368:	2100      	movs	r1, #0
 800036a:	4809      	ldr	r0, [pc, #36]	; (8000390 <MX_I2C1_Init+0x74>)
 800036c:	f001 faf4 	bl	8001958 <HAL_I2CEx_ConfigAnalogFilter>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000376:	f000 fabf 	bl	80008f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800037a:	2100      	movs	r1, #0
 800037c:	4804      	ldr	r0, [pc, #16]	; (8000390 <MX_I2C1_Init+0x74>)
 800037e:	f001 fb36 	bl	80019ee <HAL_I2CEx_ConfigDigitalFilter>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000388:	f000 fab6 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000028 	.word	0x20000028
 8000394:	40005400 	.word	0x40005400

08000398 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_I2C2_Init+0x74>)
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <MX_I2C2_Init+0x78>)
 80003a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_I2C2_Init+0x74>)
 80003a4:	f640 6214 	movw	r2, #3604	; 0xe14
 80003a8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_I2C2_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <MX_I2C2_Init+0x74>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_I2C2_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_I2C2_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <MX_I2C2_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_I2C2_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_I2C2_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <MX_I2C2_Init+0x74>)
 80003d6:	f000 ff3d 	bl	8001254 <HAL_I2C_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003e0:	f000 fa8a 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e4:	2100      	movs	r1, #0
 80003e6:	4809      	ldr	r0, [pc, #36]	; (800040c <MX_I2C2_Init+0x74>)
 80003e8:	f001 fab6 	bl	8001958 <HAL_I2CEx_ConfigAnalogFilter>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80003f2:	f000 fa81 	bl	80008f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003f6:	2100      	movs	r1, #0
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <MX_I2C2_Init+0x74>)
 80003fa:	f001 faf8 	bl	80019ee <HAL_I2CEx_ConfigDigitalFilter>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000404:	f000 fa78 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000007c 	.word	0x2000007c
 8000410:	40005800 	.word	0x40005800

08000414 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_I2C3_Init+0x74>)
 800041a:	4a1c      	ldr	r2, [pc, #112]	; (800048c <MX_I2C3_Init+0x78>)
 800041c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <MX_I2C3_Init+0x74>)
 8000420:	f640 6214 	movw	r2, #3604	; 0xe14
 8000424:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_I2C3_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <MX_I2C3_Init+0x74>)
 800042e:	2201      	movs	r2, #1
 8000430:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_I2C3_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <MX_I2C3_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <MX_I2C3_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000444:	4b10      	ldr	r3, [pc, #64]	; (8000488 <MX_I2C3_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_I2C3_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_I2C3_Init+0x74>)
 8000452:	f000 feff 	bl	8001254 <HAL_I2C_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800045c:	f000 fa4c 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000460:	2100      	movs	r1, #0
 8000462:	4809      	ldr	r0, [pc, #36]	; (8000488 <MX_I2C3_Init+0x74>)
 8000464:	f001 fa78 	bl	8001958 <HAL_I2CEx_ConfigAnalogFilter>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800046e:	f000 fa43 	bl	80008f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000472:	2100      	movs	r1, #0
 8000474:	4804      	ldr	r0, [pc, #16]	; (8000488 <MX_I2C3_Init+0x74>)
 8000476:	f001 faba 	bl	80019ee <HAL_I2CEx_ConfigDigitalFilter>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000480:	f000 fa3a 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200000d0 	.word	0x200000d0
 800048c:	40005c00 	.word	0x40005c00

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08e      	sub	sp, #56	; 0x38
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004a6:	4bb2      	ldr	r3, [pc, #712]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4ab1      	ldr	r2, [pc, #708]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004ac:	f043 0310 	orr.w	r3, r3, #16
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4baf      	ldr	r3, [pc, #700]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0310 	and.w	r3, r3, #16
 80004ba:	623b      	str	r3, [r7, #32]
 80004bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4bac      	ldr	r3, [pc, #688]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4aab      	ldr	r2, [pc, #684]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4ba9      	ldr	r3, [pc, #676]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	61fb      	str	r3, [r7, #28]
 80004d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4ba6      	ldr	r3, [pc, #664]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4aa5      	ldr	r2, [pc, #660]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004dc:	f043 0320 	orr.w	r3, r3, #32
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4ba3      	ldr	r3, [pc, #652]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0320 	and.w	r3, r3, #32
 80004ea:	61bb      	str	r3, [r7, #24]
 80004ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	4ba0      	ldr	r3, [pc, #640]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a9f      	ldr	r2, [pc, #636]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b9d      	ldr	r3, [pc, #628]	; (8000770 <MX_GPIO_Init+0x2e0>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b9a      	ldr	r3, [pc, #616]	; (8000770 <MX_GPIO_Init+0x2e0>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a99      	ldr	r2, [pc, #612]	; (8000770 <MX_GPIO_Init+0x2e0>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b97      	ldr	r3, [pc, #604]	; (8000770 <MX_GPIO_Init+0x2e0>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b94      	ldr	r3, [pc, #592]	; (8000770 <MX_GPIO_Init+0x2e0>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a93      	ldr	r2, [pc, #588]	; (8000770 <MX_GPIO_Init+0x2e0>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b91      	ldr	r3, [pc, #580]	; (8000770 <MX_GPIO_Init+0x2e0>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000536:	4b8e      	ldr	r3, [pc, #568]	; (8000770 <MX_GPIO_Init+0x2e0>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a8d      	ldr	r2, [pc, #564]	; (8000770 <MX_GPIO_Init+0x2e0>)
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b8b      	ldr	r3, [pc, #556]	; (8000770 <MX_GPIO_Init+0x2e0>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0308 	and.w	r3, r3, #8
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800054e:	4b88      	ldr	r3, [pc, #544]	; (8000770 <MX_GPIO_Init+0x2e0>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a87      	ldr	r2, [pc, #540]	; (8000770 <MX_GPIO_Init+0x2e0>)
 8000554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b85      	ldr	r3, [pc, #532]	; (8000770 <MX_GPIO_Init+0x2e0>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000566:	f001 fb53 	bl	8001c10 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800056a:	230c      	movs	r3, #12
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056e:	2302      	movs	r3, #2
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800057a:	230d      	movs	r3, #13
 800057c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800057e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000582:	4619      	mov	r1, r3
 8000584:	487b      	ldr	r0, [pc, #492]	; (8000774 <MX_GPIO_Init+0x2e4>)
 8000586:	f000 fcd3 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800059a:	230d      	movs	r3, #13
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800059e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a2:	4619      	mov	r1, r3
 80005a4:	4874      	ldr	r0, [pc, #464]	; (8000778 <MX_GPIO_Init+0x2e8>)
 80005a6:	f000 fcc3 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80005aa:	233c      	movs	r3, #60	; 0x3c
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005ae:	230b      	movs	r3, #11
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ba:	4619      	mov	r1, r3
 80005bc:	486f      	ldr	r0, [pc, #444]	; (800077c <MX_GPIO_Init+0x2ec>)
 80005be:	f000 fcb7 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c2:	2301      	movs	r3, #1
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005d2:	2301      	movs	r3, #1
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f000 fca6 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80005e4:	230a      	movs	r3, #10
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005e8:	230b      	movs	r3, #11
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f4:	4619      	mov	r1, r3
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 fc99 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80005fe:	2370      	movs	r3, #112	; 0x70
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800060e:	2305      	movs	r3, #5
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	4619      	mov	r1, r3
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f000 fc88 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000620:	2301      	movs	r3, #1
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000638:	4619      	mov	r1, r3
 800063a:	4851      	ldr	r0, [pc, #324]	; (8000780 <MX_GPIO_Init+0x2f0>)
 800063c:	f000 fc78 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000640:	2302      	movs	r3, #2
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000644:	230b      	movs	r3, #11
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000650:	4619      	mov	r1, r3
 8000652:	484b      	ldr	r0, [pc, #300]	; (8000780 <MX_GPIO_Init+0x2f0>)
 8000654:	f000 fc6c 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000658:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800066a:	2301      	movs	r3, #1
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000672:	4619      	mov	r1, r3
 8000674:	483f      	ldr	r0, [pc, #252]	; (8000774 <MX_GPIO_Init+0x2e4>)
 8000676:	f000 fc5b 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800067a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800068c:	2303      	movs	r3, #3
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	4837      	ldr	r0, [pc, #220]	; (8000774 <MX_GPIO_Init+0x2e4>)
 8000698:	f000 fc4a 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006ae:	2301      	movs	r3, #1
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	4619      	mov	r1, r3
 80006b8:	4831      	ldr	r0, [pc, #196]	; (8000780 <MX_GPIO_Init+0x2f0>)
 80006ba:	f000 fc39 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80006be:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80006d0:	230d      	movs	r3, #13
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d8:	4619      	mov	r1, r3
 80006da:	4829      	ldr	r0, [pc, #164]	; (8000780 <MX_GPIO_Init+0x2f0>)
 80006dc:	f000 fc28 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80006f2:	230e      	movs	r3, #14
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4619      	mov	r1, r3
 80006fc:	4820      	ldr	r0, [pc, #128]	; (8000780 <MX_GPIO_Init+0x2f0>)
 80006fe:	f000 fc17 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000714:	2307      	movs	r3, #7
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071c:	4619      	mov	r1, r3
 800071e:	4819      	ldr	r0, [pc, #100]	; (8000784 <MX_GPIO_Init+0x2f4>)
 8000720:	f000 fc06 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000724:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000736:	2302      	movs	r3, #2
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	4619      	mov	r1, r3
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <MX_GPIO_Init+0x2f4>)
 8000742:	f000 fbf5 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000746:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000754:	2303      	movs	r3, #3
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000758:	2308      	movs	r3, #8
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	4619      	mov	r1, r3
 8000762:	4809      	ldr	r0, [pc, #36]	; (8000788 <MX_GPIO_Init+0x2f8>)
 8000764:	f000 fbe4 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000768:	2340      	movs	r3, #64	; 0x40
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	e00d      	b.n	800078c <MX_GPIO_Init+0x2fc>
 8000770:	40021000 	.word	0x40021000
 8000774:	48001000 	.word	0x48001000
 8000778:	48001400 	.word	0x48001400
 800077c:	48000800 	.word	0x48000800
 8000780:	48000400 	.word	0x48000400
 8000784:	48000c00 	.word	0x48000c00
 8000788:	48001800 	.word	0x48001800
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000796:	230d      	movs	r3, #13
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	4619      	mov	r1, r3
 80007a0:	4851      	ldr	r0, [pc, #324]	; (80008e8 <MX_GPIO_Init+0x458>)
 80007a2:	f000 fbc5 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007b6:	2302      	movs	r3, #2
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4619      	mov	r1, r3
 80007c0:	4849      	ldr	r0, [pc, #292]	; (80008e8 <MX_GPIO_Init+0x458>)
 80007c2:	f000 fbb5 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007c6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007d8:	230c      	movs	r3, #12
 80007da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e0:	4619      	mov	r1, r3
 80007e2:	4841      	ldr	r0, [pc, #260]	; (80008e8 <MX_GPIO_Init+0x458>)
 80007e4:	f000 fba4 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80007e8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007fa:	230a      	movs	r3, #10
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f000 fb92 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800080c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f000 fb84 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000828:	2301      	movs	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000838:	2309      	movs	r3, #9
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	482a      	ldr	r0, [pc, #168]	; (80008ec <MX_GPIO_Init+0x45c>)
 8000844:	f000 fb74 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000848:	2304      	movs	r3, #4
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000858:	230c      	movs	r3, #12
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	4822      	ldr	r0, [pc, #136]	; (80008ec <MX_GPIO_Init+0x45c>)
 8000864:	f000 fb64 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000868:	2378      	movs	r3, #120	; 0x78
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000878:	2307      	movs	r3, #7
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4619      	mov	r1, r3
 8000882:	481a      	ldr	r0, [pc, #104]	; (80008ec <MX_GPIO_Init+0x45c>)
 8000884:	f000 fb54 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000888:	2338      	movs	r3, #56	; 0x38
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000898:	2306      	movs	r3, #6
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a0:	4619      	mov	r1, r3
 80008a2:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_GPIO_Init+0x460>)
 80008a4:	f000 fb44 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_GPIO_Init+0x460>)
 80008bc:	f000 fb38 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c0:	2301      	movs	r3, #1
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80008d0:	2302      	movs	r3, #2
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_GPIO_Init+0x464>)
 80008dc:	f000 fb28 	bl	8000f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3738      	adds	r7, #56	; 0x38
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	48000800 	.word	0x48000800
 80008ec:	48000c00 	.word	0x48000c00
 80008f0:	48000400 	.word	0x48000400
 80008f4:	48001000 	.word	0x48001000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x44>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_MspInit+0x44>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6613      	str	r3, [r2, #96]	; 0x60
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x44>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x44>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6593      	str	r3, [r2, #88]	; 0x58
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0b4      	sub	sp, #208	; 0xd0
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000968:	2294      	movs	r2, #148	; 0x94
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fd17 	bl	80033a0 <memset>
  if(hi2c->Instance==I2C1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a75      	ldr	r2, [pc, #468]	; (8000b4c <HAL_I2C_MspInit+0x200>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d13c      	bne.n	80009f6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800097c:	2340      	movs	r3, #64	; 0x40
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000980:	2300      	movs	r3, #0
 8000982:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fff1 	bl	8002970 <HAL_RCCEx_PeriphCLKConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000994:	f7ff ffb0 	bl	80008f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	4b6d      	ldr	r3, [pc, #436]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	4a6c      	ldr	r2, [pc, #432]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 800099e:	f043 0302 	orr.w	r3, r3, #2
 80009a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a4:	4b6a      	ldr	r3, [pc, #424]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	2301      	movs	r3, #1
 80009c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ca:	2304      	movs	r3, #4
 80009cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80009d4:	4619      	mov	r1, r3
 80009d6:	485f      	ldr	r0, [pc, #380]	; (8000b54 <HAL_I2C_MspInit+0x208>)
 80009d8:	f000 faaa 	bl	8000f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009dc:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e0:	4a5b      	ldr	r2, [pc, #364]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 80009e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e6:	6593      	str	r3, [r2, #88]	; 0x58
 80009e8:	4b59      	ldr	r3, [pc, #356]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80009f4:	e0a5      	b.n	8000b42 <HAL_I2C_MspInit+0x1f6>
  else if(hi2c->Instance==I2C2)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a57      	ldr	r2, [pc, #348]	; (8000b58 <HAL_I2C_MspInit+0x20c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d13c      	bne.n	8000a7a <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 ffae 	bl	8002970 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8000a1a:	f7ff ff6d 	bl	80008f8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1e:	4b4c      	ldr	r3, [pc, #304]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a4b      	ldr	r2, [pc, #300]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b49      	ldr	r3, [pc, #292]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0320 	and.w	r3, r3, #32
 8000a32:	61fb      	str	r3, [r7, #28]
 8000a34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a36:	2307      	movs	r3, #7
 8000a38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3c:	2312      	movs	r3, #18
 8000a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4840      	ldr	r0, [pc, #256]	; (8000b5c <HAL_I2C_MspInit+0x210>)
 8000a5c:	f000 fa68 	bl	8000f30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a60:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a64:	4a3a      	ldr	r2, [pc, #232]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000a66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6c:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	69bb      	ldr	r3, [r7, #24]
}
 8000a78:	e063      	b.n	8000b42 <HAL_I2C_MspInit+0x1f6>
  else if(hi2c->Instance==I2C3)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a38      	ldr	r2, [pc, #224]	; (8000b60 <HAL_I2C_MspInit+0x214>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d15e      	bne.n	8000b42 <HAL_I2C_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 ff6b 	bl	8002970 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_I2C_MspInit+0x158>
      Error_Handler();
 8000aa0:	f7ff ff2a 	bl	80008f8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	4a29      	ldr	r2, [pc, #164]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000aec:	2304      	movs	r3, #4
 8000aee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000af6:	4619      	mov	r1, r3
 8000af8:	481a      	ldr	r0, [pc, #104]	; (8000b64 <HAL_I2C_MspInit+0x218>)
 8000afa:	f000 fa19 	bl	8000f30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b16:	2304      	movs	r3, #4
 8000b18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 fa03 	bl	8000f30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000b30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_I2C_MspInit+0x204>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
}
 8000b42:	bf00      	nop
 8000b44:	37d0      	adds	r7, #208	; 0xd0
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000400 	.word	0x48000400
 8000b58:	40005800 	.word	0x40005800
 8000b5c:	48001400 	.word	0x48001400
 8000b60:	40005c00 	.word	0x40005c00
 8000b64:	48000800 	.word	0x48000800

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f892 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be4:	f7ff ffea 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f002 fbcf 	bl	80033b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c12:	f7ff fb2b 	bl	800026c <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c24:	08003458 	.word	0x08003458
  ldr r2, =_sbss
 8000c28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c2c:	20000128 	.word	0x20000128

08000c30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_IRQHandler>

08000c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f943 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f80e 	bl	8000c64 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	e001      	b.n	8000c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c54:	f7ff fe56 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d023      	beq.n	8000cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_InitTick+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f941 	bl	8000f16 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d809      	bhi.n	8000cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f919 	bl	8000ede <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0x74>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e007      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e004      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e001      	b.n	8000cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000124 	.word	0x20000124

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000124 	.word	0x20000124

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff ff8e 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff47 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff5c 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff8e 	bl	8000e1c <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffb0 	bl	8000e84 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e166      	b.n	800120e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8158 	beq.w	8001208 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d005      	beq.n	8000f70 <HAL_GPIO_Init+0x40>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	f003 0201 	and.w	r2, r3, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d017      	beq.n	800100e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d123      	bne.n	8001062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	6939      	ldr	r1, [r7, #16]
 800105e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0203 	and.w	r2, r3, #3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 80b2 	beq.w	8001208 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a4:	4b61      	ldr	r3, [pc, #388]	; (800122c <HAL_GPIO_Init+0x2fc>)
 80010a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a8:	4a60      	ldr	r2, [pc, #384]	; (800122c <HAL_GPIO_Init+0x2fc>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6613      	str	r3, [r2, #96]	; 0x60
 80010b0:	4b5e      	ldr	r3, [pc, #376]	; (800122c <HAL_GPIO_Init+0x2fc>)
 80010b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010bc:	4a5c      	ldr	r2, [pc, #368]	; (8001230 <HAL_GPIO_Init+0x300>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010e6:	d02b      	beq.n	8001140 <HAL_GPIO_Init+0x210>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a52      	ldr	r2, [pc, #328]	; (8001234 <HAL_GPIO_Init+0x304>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d025      	beq.n	800113c <HAL_GPIO_Init+0x20c>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a51      	ldr	r2, [pc, #324]	; (8001238 <HAL_GPIO_Init+0x308>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d01f      	beq.n	8001138 <HAL_GPIO_Init+0x208>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a50      	ldr	r2, [pc, #320]	; (800123c <HAL_GPIO_Init+0x30c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d019      	beq.n	8001134 <HAL_GPIO_Init+0x204>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <HAL_GPIO_Init+0x310>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d013      	beq.n	8001130 <HAL_GPIO_Init+0x200>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4e      	ldr	r2, [pc, #312]	; (8001244 <HAL_GPIO_Init+0x314>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d00d      	beq.n	800112c <HAL_GPIO_Init+0x1fc>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <HAL_GPIO_Init+0x318>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d007      	beq.n	8001128 <HAL_GPIO_Init+0x1f8>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_GPIO_Init+0x31c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d101      	bne.n	8001124 <HAL_GPIO_Init+0x1f4>
 8001120:	2307      	movs	r3, #7
 8001122:	e00e      	b.n	8001142 <HAL_GPIO_Init+0x212>
 8001124:	2308      	movs	r3, #8
 8001126:	e00c      	b.n	8001142 <HAL_GPIO_Init+0x212>
 8001128:	2306      	movs	r3, #6
 800112a:	e00a      	b.n	8001142 <HAL_GPIO_Init+0x212>
 800112c:	2305      	movs	r3, #5
 800112e:	e008      	b.n	8001142 <HAL_GPIO_Init+0x212>
 8001130:	2304      	movs	r3, #4
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x212>
 8001134:	2303      	movs	r3, #3
 8001136:	e004      	b.n	8001142 <HAL_GPIO_Init+0x212>
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x212>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_GPIO_Init+0x212>
 8001140:	2300      	movs	r3, #0
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	f002 0203 	and.w	r2, r2, #3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4093      	lsls	r3, r2
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001152:	4937      	ldr	r1, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x300>)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001160:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <HAL_GPIO_Init+0x320>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001184:	4a32      	ldr	r2, [pc, #200]	; (8001250 <HAL_GPIO_Init+0x320>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <HAL_GPIO_Init+0x320>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ae:	4a28      	ldr	r2, [pc, #160]	; (8001250 <HAL_GPIO_Init+0x320>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_GPIO_Init+0x320>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_GPIO_Init+0x320>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_GPIO_Init+0x320>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <HAL_GPIO_Init+0x320>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	f47f ae91 	bne.w	8000f40 <HAL_GPIO_Init+0x10>
  }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800
 800123c:	48000c00 	.word	0x48000c00
 8001240:	48001000 	.word	0x48001000
 8001244:	48001400 	.word	0x48001400
 8001248:	48001800 	.word	0x48001800
 800124c:	48001c00 	.word	0x48001c00
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e081      	b.n	800136a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fb66 	bl	800094c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2224      	movs	r2, #36	; 0x24
 8001284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d107      	bne.n	80012ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	e006      	b.n	80012dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d104      	bne.n	80012ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001300:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001310:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69d9      	ldr	r1, [r3, #28]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1a      	ldr	r2, [r3, #32]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2220      	movs	r2, #32
 8001356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	461a      	mov	r2, r3
 8001380:	460b      	mov	r3, r1
 8001382:	817b      	strh	r3, [r7, #10]
 8001384:	4613      	mov	r3, r2
 8001386:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b20      	cmp	r3, #32
 8001392:	f040 80da 	bne.w	800154a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_I2C_Master_Transmit+0x30>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0d3      	b.n	800154c <HAL_I2C_Master_Transmit+0x1d8>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013ac:	f7ff fcaa 	bl	8000d04 <HAL_GetTick>
 80013b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2319      	movs	r3, #25
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 f8f0 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0be      	b.n	800154c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2221      	movs	r2, #33	; 0x21
 80013d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2210      	movs	r2, #16
 80013da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	893a      	ldrh	r2, [r7, #8]
 80013ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2bff      	cmp	r3, #255	; 0xff
 80013fe:	d90e      	bls.n	800141e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	22ff      	movs	r2, #255	; 0xff
 8001404:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140a:	b2da      	uxtb	r2, r3
 800140c:	8979      	ldrh	r1, [r7, #10]
 800140e:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_I2C_Master_Transmit+0x1e0>)
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 fa6c 	bl	80018f4 <I2C_TransferConfig>
 800141c:	e06c      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001422:	b29a      	uxth	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142c:	b2da      	uxtb	r2, r3
 800142e:	8979      	ldrh	r1, [r7, #10]
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_I2C_Master_Transmit+0x1e0>)
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 fa5b 	bl	80018f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800143e:	e05b      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	6a39      	ldr	r1, [r7, #32]
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 f8ed 	bl	8001624 <I2C_WaitOnTXISFlagUntilTimeout>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e07b      	b.n	800154c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800146e:	b29b      	uxth	r3, r3
 8001470:	3b01      	subs	r3, #1
 8001472:	b29a      	uxth	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29b      	uxth	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d034      	beq.n	80014f8 <HAL_I2C_Master_Transmit+0x184>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	2b00      	cmp	r3, #0
 8001494:	d130      	bne.n	80014f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	2200      	movs	r2, #0
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 f87f 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e04d      	b.n	800154c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2bff      	cmp	r3, #255	; 0xff
 80014b8:	d90e      	bls.n	80014d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	22ff      	movs	r2, #255	; 0xff
 80014be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	8979      	ldrh	r1, [r7, #10]
 80014c8:	2300      	movs	r3, #0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fa0f 	bl	80018f4 <I2C_TransferConfig>
 80014d6:	e00f      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014dc:	b29a      	uxth	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	8979      	ldrh	r1, [r7, #10]
 80014ea:	2300      	movs	r3, #0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 f9fe 	bl	80018f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d19e      	bne.n	8001440 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	6a39      	ldr	r1, [r7, #32]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f8cc 	bl	80016a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e01a      	b.n	800154c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2220      	movs	r2, #32
 800151c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_I2C_Master_Transmit+0x1e4>)
 800152a:	400b      	ands	r3, r1
 800152c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2220      	movs	r2, #32
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800154a:	2302      	movs	r3, #2
  }
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	80002000 	.word	0x80002000
 8001558:	fe00e800 	.word	0xfe00e800

0800155c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b02      	cmp	r3, #2
 8001570:	d103      	bne.n	800157a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d007      	beq.n	8001598 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	619a      	str	r2, [r3, #24]
  }
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015b4:	e022      	b.n	80015fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d01e      	beq.n	80015fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015be:	f7ff fba1 	bl	8000d04 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d302      	bcc.n	80015d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d113      	bne.n	80015fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	f043 0220 	orr.w	r2, r3, #32
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2220      	movs	r2, #32
 80015e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e00f      	b.n	800161c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699a      	ldr	r2, [r3, #24]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	4013      	ands	r3, r2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	429a      	cmp	r2, r3
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	429a      	cmp	r2, r3
 8001618:	d0cd      	beq.n	80015b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001630:	e02c      	b.n	800168c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f870 	bl	800171c <I2C_IsErrorOccurred>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e02a      	b.n	800169c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d01e      	beq.n	800168c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800164e:	f7ff fb59 	bl	8000d04 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	429a      	cmp	r2, r3
 800165c:	d302      	bcc.n	8001664 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d113      	bne.n	800168c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f043 0220 	orr.w	r2, r3, #32
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2220      	movs	r2, #32
 8001674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e007      	b.n	800169c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b02      	cmp	r3, #2
 8001698:	d1cb      	bne.n	8001632 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016b0:	e028      	b.n	8001704 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 f830 	bl	800171c <I2C_IsErrorOccurred>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e026      	b.n	8001714 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c6:	f7ff fb1d 	bl	8000d04 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d302      	bcc.n	80016dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d113      	bne.n	8001704 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	f043 0220 	orr.w	r2, r3, #32
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2220      	movs	r2, #32
 80016ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e007      	b.n	8001714 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	2b20      	cmp	r3, #32
 8001710:	d1cf      	bne.n	80016b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d075      	beq.n	8001834 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2210      	movs	r2, #16
 800174e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001750:	e056      	b.n	8001800 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d052      	beq.n	8001800 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800175a:	f7ff fad3 	bl	8000d04 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	429a      	cmp	r2, r3
 8001768:	d302      	bcc.n	8001770 <I2C_IsErrorOccurred+0x54>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d147      	bne.n	8001800 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001782:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800178e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001792:	d12e      	bne.n	80017f2 <I2C_IsErrorOccurred+0xd6>
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800179a:	d02a      	beq.n	80017f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800179c:	7cfb      	ldrb	r3, [r7, #19]
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d027      	beq.n	80017f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80017b2:	f7ff faa7 	bl	8000d04 <HAL_GetTick>
 80017b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017b8:	e01b      	b.n	80017f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80017ba:	f7ff faa3 	bl	8000d04 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b19      	cmp	r3, #25
 80017c6:	d914      	bls.n	80017f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	f043 0220 	orr.w	r2, r3, #32
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b20      	cmp	r3, #32
 80017fe:	d1dc      	bne.n	80017ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b20      	cmp	r3, #32
 800180c:	d003      	beq.n	8001816 <I2C_IsErrorOccurred+0xfa>
 800180e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001812:	2b00      	cmp	r3, #0
 8001814:	d09d      	beq.n	8001752 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2220      	movs	r2, #32
 8001824:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001856:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001878:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80018a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01c      	beq.n	80018e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff fe56 	bl	800155c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6859      	ldr	r1, [r3, #4]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <I2C_IsErrorOccurred+0x1d4>)
 80018bc:	400b      	ands	r3, r1
 80018be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2220      	movs	r2, #32
 80018d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80018e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	fe00e800 	.word	0xfe00e800

080018f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	817b      	strh	r3, [r7, #10]
 8001902:	4613      	mov	r3, r2
 8001904:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800190c:	7a7b      	ldrb	r3, [r7, #9]
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001914:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	4313      	orrs	r3, r2
 800191e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001922:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	0d5b      	lsrs	r3, r3, #21
 800192e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <I2C_TransferConfig+0x60>)
 8001934:	430b      	orrs	r3, r1
 8001936:	43db      	mvns	r3, r3
 8001938:	ea02 0103 	and.w	r1, r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	03ff63ff 	.word	0x03ff63ff

08001958 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b20      	cmp	r3, #32
 800196c:	d138      	bne.n	80019e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001978:	2302      	movs	r3, #2
 800197a:	e032      	b.n	80019e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2224      	movs	r2, #36	; 0x24
 8001988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6819      	ldr	r1, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d139      	bne.n	8001a78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e033      	b.n	8001a7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2224      	movs	r2, #36	; 0x24
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0201 	bic.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a98:	d102      	bne.n	8001aa0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9e:	e00b      	b.n	8001ab8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aae:	d102      	bne.n	8001ab6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab4:	e000      	b.n	8001ab8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ab6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d141      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ad6:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae2:	d131      	bne.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae4:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aea:	4a46      	ldr	r2, [pc, #280]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001afc:	4a41      	ldr	r2, [pc, #260]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2232      	movs	r2, #50	; 0x32
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	4a3f      	ldr	r2, [pc, #252]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	3301      	adds	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1a:	e002      	b.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d102      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f2      	bne.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b36:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b42:	d158      	bne.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e057      	b.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b48:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b4e:	4a2d      	ldr	r2, [pc, #180]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b58:	e04d      	b.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b60:	d141      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6e:	d131      	bne.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b76:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b88:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2232      	movs	r2, #50	; 0x32
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba6:	e002      	b.n	8001bae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d102      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f2      	bne.n	8001ba8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bce:	d112      	bne.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e011      	b.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be4:	e007      	b.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40007000 	.word	0x40007000
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	431bde83 	.word	0x431bde83

08001c10 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1e:	6053      	str	r3, [r2, #4]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40007000 	.word	0x40007000

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f000 bc08 	b.w	8002454 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c44:	4b96      	ldr	r3, [pc, #600]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c4e:	4b94      	ldr	r3, [pc, #592]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80e4 	beq.w	8001e2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_RCC_OscConfig+0x4c>
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	f040 808b 	bne.w	8001d8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	f040 8087 	bne.w	8001d8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c7c:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_OscConfig+0x64>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e3df      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1a      	ldr	r2, [r3, #32]
 8001c98:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_RCC_OscConfig+0x7e>
 8001ca4:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cac:	e005      	b.n	8001cba <HAL_RCC_OscConfig+0x8a>
 8001cae:	4b7c      	ldr	r3, [pc, #496]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d223      	bcs.n	8001d06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fd94 	bl	80027f0 <RCC_SetFlashLatencyFromMSIRange>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e3c0      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd2:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a72      	ldr	r2, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	496d      	ldr	r1, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf0:	4b6b      	ldr	r3, [pc, #428]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	4968      	ldr	r1, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	e025      	b.n	8001d52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d06:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a65      	ldr	r2, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4960      	ldr	r1, [pc, #384]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d24:	4b5e      	ldr	r3, [pc, #376]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	495b      	ldr	r1, [pc, #364]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fd54 	bl	80027f0 <RCC_SetFlashLatencyFromMSIRange>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e380      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d52:	f000 fcc1 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	4950      	ldr	r1, [pc, #320]	; (8001ea4 <HAL_RCC_OscConfig+0x274>)
 8001d64:	5ccb      	ldrb	r3, [r1, r3]
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <HAL_RCC_OscConfig+0x278>)
 8001d70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d72:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <HAL_RCC_OscConfig+0x27c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe ff74 	bl	8000c64 <HAL_InitTick>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d052      	beq.n	8001e2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	e364      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d032      	beq.n	8001df8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d92:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a42      	ldr	r2, [pc, #264]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ffb1 	bl	8000d04 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da6:	f7fe ffad 	bl	8000d04 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e34d      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db8:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc4:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a35      	ldr	r2, [pc, #212]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4930      	ldr	r1, [pc, #192]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	492b      	ldr	r1, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
 8001df6:	e01a      	b.n	8001e2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001df8:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a28      	ldr	r2, [pc, #160]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e04:	f7fe ff7e 	bl	8000d04 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e0c:	f7fe ff7a 	bl	8000d04 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e31a      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x1dc>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d073      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x21c>
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d10e      	bne.n	8001e64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d063      	beq.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d15f      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e2f7      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d106      	bne.n	8001e7c <HAL_RCC_OscConfig+0x24c>
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e025      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e84:	d114      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x280>
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a02      	ldr	r2, [pc, #8]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e013      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08003410 	.word	0x08003410
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	4ba0      	ldr	r3, [pc, #640]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a9f      	ldr	r2, [pc, #636]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b9d      	ldr	r3, [pc, #628]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a9c      	ldr	r2, [pc, #624]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ff18 	bl	8000d04 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7fe ff14 	bl	8000d04 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e2b4      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eea:	4b92      	ldr	r3, [pc, #584]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x2a8>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ff04 	bl	8000d04 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7fe ff00 	bl	8000d04 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e2a0      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f12:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2d0>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d060      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_OscConfig+0x310>
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d119      	bne.n	8001f6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d116      	bne.n	8001f6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f40:	4b7c      	ldr	r3, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_OscConfig+0x328>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e27d      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	061b      	lsls	r3, r3, #24
 8001f66:	4973      	ldr	r1, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f6c:	e040      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d023      	beq.n	8001fbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f76:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7fe febf 	bl	8000d04 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7fe febb 	bl	8000d04 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e25b      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9c:	4b65      	ldr	r3, [pc, #404]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	061b      	lsls	r3, r3, #24
 8001fb6:	495f      	ldr	r1, [pc, #380]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
 8001fbc:	e018      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a5c      	ldr	r2, [pc, #368]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7fe fe9b 	bl	8000d04 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7fe fe97 	bl	8000d04 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e237      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d03c      	beq.n	8002076 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01c      	beq.n	800203e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002004:	4b4b      	ldr	r3, [pc, #300]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200a:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7fe fe76 	bl	8000d04 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7fe fe72 	bl	8000d04 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e212      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ef      	beq.n	800201c <HAL_RCC_OscConfig+0x3ec>
 800203c:	e01b      	b.n	8002076 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7fe fe59 	bl	8000d04 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002056:	f7fe fe55 	bl	8000d04 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1f5      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002068:	4b32      	ldr	r3, [pc, #200]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ef      	bne.n	8002056 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80a6 	beq.w	80021d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10d      	bne.n	80020b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 800209a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209e:	6593      	str	r3, [r2, #88]	; 0x58
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCC_OscConfig+0x508>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d118      	bne.n	80020ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_RCC_OscConfig+0x508>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_RCC_OscConfig+0x508>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c8:	f7fe fe1c 	bl	8000d04 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d0:	f7fe fe18 	bl	8000d04 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1b8      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_RCC_OscConfig+0x508>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <HAL_RCC_OscConfig+0x4d8>
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002106:	e029      	b.n	800215c <HAL_RCC_OscConfig+0x52c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d115      	bne.n	800213c <HAL_RCC_OscConfig+0x50c>
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	4a03      	ldr	r2, [pc, #12]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002130:	e014      	b.n	800215c <HAL_RCC_OscConfig+0x52c>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	4b9d      	ldr	r3, [pc, #628]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	4a9c      	ldr	r2, [pc, #624]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800214c:	4b99      	ldr	r3, [pc, #612]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	4a98      	ldr	r2, [pc, #608]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d016      	beq.n	8002192 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7fe fdce 	bl	8000d04 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe fdca 	bl	8000d04 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e168      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002182:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ed      	beq.n	800216c <HAL_RCC_OscConfig+0x53c>
 8002190:	e015      	b.n	80021be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002192:	f7fe fdb7 	bl	8000d04 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe fdb3 	bl	8000d04 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e151      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b0:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ed      	bne.n	800219a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021be:	7ffb      	ldrb	r3, [r7, #31]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b7b      	ldr	r3, [pc, #492]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	4a7a      	ldr	r2, [pc, #488]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80021ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d03c      	beq.n	8002256 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01c      	beq.n	800221e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021e4:	4b73      	ldr	r3, [pc, #460]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80021e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ea:	4a72      	ldr	r2, [pc, #456]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7fe fd86 	bl	8000d04 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021fc:	f7fe fd82 	bl	8000d04 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e122      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800220e:	4b69      	ldr	r3, [pc, #420]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ef      	beq.n	80021fc <HAL_RCC_OscConfig+0x5cc>
 800221c:	e01b      	b.n	8002256 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800221e:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002224:	4a63      	ldr	r2, [pc, #396]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe fd69 	bl	8000d04 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002236:	f7fe fd65 	bl	8000d04 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e105      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002248:	4b5a      	ldr	r3, [pc, #360]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 800224a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ef      	bne.n	8002236 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 80f9 	beq.w	8002452 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	2b02      	cmp	r3, #2
 8002266:	f040 80cf 	bne.w	8002408 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800226a:	4b52      	ldr	r3, [pc, #328]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0203 	and.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	429a      	cmp	r2, r3
 800227c:	d12c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	3b01      	subs	r3, #1
 800228a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d123      	bne.n	80022d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d11b      	bne.n	80022d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d113      	bne.n	80022d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d109      	bne.n	80022d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d071      	beq.n	80023bc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d068      	beq.n	80023b0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022de:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022ea:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0ac      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022fa:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002300:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002304:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002306:	f7fe fcfd 	bl	8000d04 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7fe fcf9 	bl	8000d04 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e099      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002332:	4013      	ands	r3, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800233c:	3a01      	subs	r2, #1
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	4311      	orrs	r1, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002346:	0212      	lsls	r2, r2, #8
 8002348:	4311      	orrs	r1, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800234e:	0852      	lsrs	r2, r2, #1
 8002350:	3a01      	subs	r2, #1
 8002352:	0552      	lsls	r2, r2, #21
 8002354:	4311      	orrs	r1, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800235a:	0852      	lsrs	r2, r2, #1
 800235c:	3a01      	subs	r2, #1
 800235e:	0652      	lsls	r2, r2, #25
 8002360:	4311      	orrs	r1, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002366:	06d2      	lsls	r2, r2, #27
 8002368:	430a      	orrs	r2, r1
 800236a:	4912      	ldr	r1, [pc, #72]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 800236c:	4313      	orrs	r3, r2
 800236e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002370:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0f      	ldr	r2, [pc, #60]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002386:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002388:	f7fe fcbc 	bl	8000d04 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fcb8 	bl	8000d04 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e058      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ae:	e050      	b.n	8002452 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e04f      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d144      	bne.n	8002452 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a23      	ldr	r2, [pc, #140]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 80023ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e0:	f7fe fc90 	bl	8000d04 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fc8c 	bl	8000d04 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e02c      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x7b8>
 8002406:	e024      	b.n	8002452 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d01f      	beq.n	800244e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 8002414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fc73 	bl	8000d04 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe fc6f 	bl	8000d04 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e00f      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	4905      	ldr	r1, [pc, #20]	; (800245c <HAL_RCC_OscConfig+0x82c>)
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_OscConfig+0x830>)
 8002448:	4013      	ands	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
 800244c:	e001      	b.n	8002452 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	feeefffc 	.word	0xfeeefffc

08002464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e11d      	b.n	80026b8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b90      	ldr	r3, [pc, #576]	; (80026c0 <HAL_RCC_ClockConfig+0x25c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d910      	bls.n	80024ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b8d      	ldr	r3, [pc, #564]	; (80026c0 <HAL_RCC_ClockConfig+0x25c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 020f 	bic.w	r2, r3, #15
 8002492:	498b      	ldr	r1, [pc, #556]	; (80026c0 <HAL_RCC_ClockConfig+0x25c>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b89      	ldr	r3, [pc, #548]	; (80026c0 <HAL_RCC_ClockConfig+0x25c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e105      	b.n	80026b8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b81      	ldr	r3, [pc, #516]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d908      	bls.n	80024da <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b7e      	ldr	r3, [pc, #504]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	497b      	ldr	r1, [pc, #492]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d079      	beq.n	80025da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d11e      	bne.n	800252c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	4b75      	ldr	r3, [pc, #468]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0dc      	b.n	80026b8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80024fe:	f000 f9d1 	bl	80028a4 <RCC_GetSysClockFreqFromPLLSource>
 8002502:	4603      	mov	r3, r0
 8002504:	4a70      	ldr	r2, [pc, #448]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d946      	bls.n	8002598 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800250a:	4b6e      	ldr	r3, [pc, #440]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d140      	bne.n	8002598 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002516:	4b6b      	ldr	r3, [pc, #428]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251e:	4a69      	ldr	r2, [pc, #420]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	e035      	b.n	8002598 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d107      	bne.n	8002544 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002534:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d115      	bne.n	800256c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b9      	b.n	80026b8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254c:	4b5d      	ldr	r3, [pc, #372]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0ad      	b.n	80026b8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255c:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0a5      	b.n	80026b8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800256c:	f000 f8b4 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002570:	4603      	mov	r3, r0
 8002572:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d90f      	bls.n	8002598 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002578:	4b52      	ldr	r3, [pc, #328]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002584:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800258c:	4a4d      	ldr	r2, [pc, #308]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800258e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002592:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002598:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 0203 	bic.w	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4947      	ldr	r1, [pc, #284]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025aa:	f7fe fbab 	bl	8000d04 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b2:	f7fe fba7 	bl	8000d04 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e077      	b.n	80026b8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c8:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 020c 	and.w	r2, r3, #12
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d1eb      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b80      	cmp	r3, #128	; 0x80
 80025de:	d105      	bne.n	80025ec <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025e0:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a37      	ldr	r2, [pc, #220]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 80025e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ea:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d010      	beq.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002604:	429a      	cmp	r2, r3
 8002606:	d208      	bcs.n	800261a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	492b      	ldr	r1, [pc, #172]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_RCC_ClockConfig+0x25c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d210      	bcs.n	800264a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_RCC_ClockConfig+0x25c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 020f 	bic.w	r2, r3, #15
 8002630:	4923      	ldr	r1, [pc, #140]	; (80026c0 <HAL_RCC_ClockConfig+0x25c>)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_RCC_ClockConfig+0x25c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d001      	beq.n	800264a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e036      	b.n	80026b8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	4918      	ldr	r1, [pc, #96]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002664:	4313      	orrs	r3, r2
 8002666:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4910      	ldr	r1, [pc, #64]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002684:	4313      	orrs	r3, r2
 8002686:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002688:	f000 f826 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <HAL_RCC_ClockConfig+0x268>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x26c>)
 80026a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fad9 	bl	8000c64 <HAL_InitTick>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]

  return status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40022000 	.word	0x40022000
 80026c4:	40021000 	.word	0x40021000
 80026c8:	04c4b400 	.word	0x04c4b400
 80026cc:	08003410 	.word	0x08003410
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e6:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d121      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d11e      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e005      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002734:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d102      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	e004      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d101      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800275c:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_RCC_GetSysClockFreq+0x114>)
 800275e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d134      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0xa6>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d003      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0xac>
 800277c:	e005      	b.n	800278a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002780:	617b      	str	r3, [r7, #20]
      break;
 8002782:	e005      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002786:	617b      	str	r3, [r7, #20]
      break;
 8002788:	e002      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	617b      	str	r3, [r7, #20]
      break;
 800278e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3301      	adds	r3, #1
 800279c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	fb03 f202 	mul.w	r2, r3, r2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	0e5b      	lsrs	r3, r3, #25
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	3301      	adds	r3, #1
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027d0:	69bb      	ldr	r3, [r7, #24]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08003420 	.word	0x08003420
 80027e8:	00f42400 	.word	0x00f42400
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002808:	f7ff f93e 	bl	8001a88 <HAL_PWREx_GetVoltageRange>
 800280c:	6178      	str	r0, [r7, #20]
 800280e:	e014      	b.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	4a21      	ldr	r2, [pc, #132]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281a:	6593      	str	r3, [r2, #88]	; 0x58
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002828:	f7ff f92e 	bl	8001a88 <HAL_PWREx_GetVoltageRange>
 800282c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a1a      	ldr	r2, [pc, #104]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002840:	d10b      	bne.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d913      	bls.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2ba0      	cmp	r3, #160	; 0xa0
 800284c:	d902      	bls.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800284e:	2302      	movs	r3, #2
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	e00d      	b.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002854:	2301      	movs	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e00a      	b.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b7f      	cmp	r3, #127	; 0x7f
 800285e:	d902      	bls.n	8002866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002860:	2302      	movs	r3, #2
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e004      	b.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b70      	cmp	r3, #112	; 0x70
 800286a:	d101      	bne.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800286c:	2301      	movs	r3, #1
 800286e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 020f 	bic.w	r2, r3, #15
 8002878:	4909      	ldr	r1, [pc, #36]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	429a      	cmp	r2, r3
 800288c:	d001      	beq.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	40022000 	.word	0x40022000

080028a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028aa:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d00b      	beq.n	80028d2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d825      	bhi.n	800290c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d008      	beq.n	80028d8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d11f      	bne.n	800290c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028ce:	613b      	str	r3, [r7, #16]
    break;
 80028d0:	e01f      	b.n	8002912 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028d2:	4b25      	ldr	r3, [pc, #148]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028d4:	613b      	str	r3, [r7, #16]
    break;
 80028d6:	e01c      	b.n	8002912 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e005      	b.n	8002900 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002908:	613b      	str	r3, [r7, #16]
    break;
 800290a:	e002      	b.n	8002912 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
    break;
 8002910:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	3301      	adds	r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	fb03 f202 	mul.w	r2, r3, r2
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0e5b      	lsrs	r3, r3, #25
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002952:	683b      	ldr	r3, [r7, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40021000 	.word	0x40021000
 8002964:	00f42400 	.word	0x00f42400
 8002968:	007a1200 	.word	0x007a1200
 800296c:	08003420 	.word	0x08003420

08002970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002978:	2300      	movs	r3, #0
 800297a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800297c:	2300      	movs	r3, #0
 800297e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002988:	2b00      	cmp	r3, #0
 800298a:	d040      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002990:	2b80      	cmp	r3, #128	; 0x80
 8002992:	d02a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d825      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d026      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800299c:	2b60      	cmp	r3, #96	; 0x60
 800299e:	d821      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d006      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d81d      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d010      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80029b0:	e018      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029b2:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	4a88      	ldr	r2, [pc, #544]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029be:	e015      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fb02 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d0:	e00c      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3320      	adds	r3, #32
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fbed 	bl	80031b8 <RCCEx_PLLSAI2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e2:	e003      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	74fb      	strb	r3, [r7, #19]
      break;
 80029e8:	e000      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80029ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f2:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029f8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a00:	4975      	ldr	r1, [pc, #468]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a08:	e001      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d047      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a22:	d030      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a28:	d82a      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a2e:	d02a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a34:	d824      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a40:	d81e      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4a:	d010      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a4c:	e018      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a4e:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	4a61      	ldr	r2, [pc, #388]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a5a:	e015      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fab4 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a6c:	e00c      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3320      	adds	r3, #32
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fb9f 	bl	80031b8 <RCCEx_PLLSAI2_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a7e:	e003      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	74fb      	strb	r3, [r7, #19]
      break;
 8002a84:	e000      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a8e:	4b52      	ldr	r3, [pc, #328]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	494e      	ldr	r1, [pc, #312]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002aa4:	e001      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 809f 	beq.w	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002abc:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002acc:	2300      	movs	r3, #0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	4a40      	ldr	r2, [pc, #256]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ade:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aea:	2301      	movs	r3, #1
 8002aec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aee:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a3a      	ldr	r2, [pc, #232]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002afa:	f7fe f903 	bl	8000d04 <HAL_GetTick>
 8002afe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b00:	e009      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe f8ff 	bl	8000d04 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d902      	bls.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	74fb      	strb	r3, [r7, #19]
        break;
 8002b14:	e005      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0ef      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d15b      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b28:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01f      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d019      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b72:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d016      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe f8be 	bl	8000d04 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f8ba 	bl	8000d04 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d902      	bls.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ba2:	e006      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ec      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	4903      	ldr	r1, [pc, #12]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bd0:	e008      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	74bb      	strb	r3, [r7, #18]
 8002bd6:	e005      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002be4:	7c7b      	ldrb	r3, [r7, #17]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4ba0      	ldr	r3, [pc, #640]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	4a9f      	ldr	r2, [pc, #636]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c02:	4b9a      	ldr	r3, [pc, #616]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f023 0203 	bic.w	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	4996      	ldr	r1, [pc, #600]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c24:	4b91      	ldr	r3, [pc, #580]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f023 020c 	bic.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	498e      	ldr	r1, [pc, #568]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c46:	4b89      	ldr	r3, [pc, #548]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	4985      	ldr	r1, [pc, #532]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c68:	4b80      	ldr	r3, [pc, #512]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c76:	497d      	ldr	r1, [pc, #500]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c8a:	4b78      	ldr	r3, [pc, #480]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	4974      	ldr	r1, [pc, #464]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cba:	496c      	ldr	r1, [pc, #432]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cce:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cdc:	4963      	ldr	r1, [pc, #396]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cf0:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cfe:	495b      	ldr	r1, [pc, #364]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d12:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	4952      	ldr	r1, [pc, #328]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d34:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	494a      	ldr	r1, [pc, #296]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d56:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	4941      	ldr	r1, [pc, #260]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d78:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d7e:	f023 0203 	bic.w	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	4939      	ldr	r1, [pc, #228]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d028      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d9a:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	4930      	ldr	r1, [pc, #192]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dc4:	60d3      	str	r3, [r2, #12]
 8002dc6:	e011      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f8f9 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d04d      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e00:	d108      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e12:	e012      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e1a:	4a14      	ldr	r2, [pc, #80]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e32:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e42:	d106      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a08      	ldr	r2, [pc, #32]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4e:	60d3      	str	r3, [r2, #12]
 8002e50:	e020      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5a:	d109      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a02      	ldr	r2, [pc, #8]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e66:	60d3      	str	r3, [r2, #12]
 8002e68:	e014      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f8a5 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002e86:	4603      	mov	r3, r0
 8002e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d028      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eae:	4947      	ldr	r1, [pc, #284]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ebe:	d106      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec0:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a41      	ldr	r2, [pc, #260]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eca:	60d3      	str	r3, [r2, #12]
 8002ecc:	e011      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f876 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01e      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002efe:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f0e:	492f      	ldr	r1, [pc, #188]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2102      	movs	r1, #2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f851 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f48:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f4e:	f023 0204 	bic.w	r2, r3, #4
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f58:	491c      	ldr	r1, [pc, #112]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f72:	f023 0218 	bic.w	r2, r3, #24
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	4913      	ldr	r1, [pc, #76]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d017      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f90:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa0:	490a      	ldr	r1, [pc, #40]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fde:	4b72      	ldr	r3, [pc, #456]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00e      	beq.n	8003008 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fea:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0203 	and.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d103      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d142      	bne.n	8003088 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e03f      	b.n	8003088 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d018      	beq.n	8003042 <RCCEx_PLLSAI1_Config+0x72>
 8003010:	2b03      	cmp	r3, #3
 8003012:	d825      	bhi.n	8003060 <RCCEx_PLLSAI1_Config+0x90>
 8003014:	2b01      	cmp	r3, #1
 8003016:	d002      	beq.n	800301e <RCCEx_PLLSAI1_Config+0x4e>
 8003018:	2b02      	cmp	r3, #2
 800301a:	d009      	beq.n	8003030 <RCCEx_PLLSAI1_Config+0x60>
 800301c:	e020      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800301e:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d11d      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302e:	e01a      	b.n	8003066 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003030:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	2b00      	cmp	r3, #0
 800303a:	d116      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003040:	e013      	b.n	800306a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003042:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800304e:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800305e:	e006      	b.n	800306e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      break;
 8003064:	e004      	b.n	8003070 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003066:	bf00      	nop
 8003068:	e002      	b.n	8003070 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800306e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003076:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4949      	ldr	r1, [pc, #292]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003084:	4313      	orrs	r3, r2
 8003086:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 8086 	bne.w	800319c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003090:	4b45      	ldr	r3, [pc, #276]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a44      	ldr	r2, [pc, #272]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003096:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800309a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309c:	f7fd fe32 	bl	8000d04 <HAL_GetTick>
 80030a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a2:	e009      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030a4:	f7fd fe2e 	bl	8000d04 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d902      	bls.n	80030b8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	73fb      	strb	r3, [r7, #15]
        break;
 80030b6:	e005      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030b8:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ef      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d168      	bne.n	800319c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d113      	bne.n	80030f8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	4b35      	ldr	r3, [pc, #212]	; (80031ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6892      	ldr	r2, [r2, #8]
 80030dc:	0211      	lsls	r1, r2, #8
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68d2      	ldr	r2, [r2, #12]
 80030e2:	06d2      	lsls	r2, r2, #27
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6852      	ldr	r2, [r2, #4]
 80030ea:	3a01      	subs	r2, #1
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	430a      	orrs	r2, r1
 80030f0:	492d      	ldr	r1, [pc, #180]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	610b      	str	r3, [r1, #16]
 80030f6:	e02d      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d115      	bne.n	800312a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030fe:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003104:	4013      	ands	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	0211      	lsls	r1, r2, #8
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6912      	ldr	r2, [r2, #16]
 8003110:	0852      	lsrs	r2, r2, #1
 8003112:	3a01      	subs	r2, #1
 8003114:	0552      	lsls	r2, r2, #21
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6852      	ldr	r2, [r2, #4]
 800311c:	3a01      	subs	r2, #1
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	430a      	orrs	r2, r1
 8003122:	4921      	ldr	r1, [pc, #132]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003124:	4313      	orrs	r3, r2
 8003126:	610b      	str	r3, [r1, #16]
 8003128:	e014      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312a:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6892      	ldr	r2, [r2, #8]
 8003136:	0211      	lsls	r1, r2, #8
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6952      	ldr	r2, [r2, #20]
 800313c:	0852      	lsrs	r2, r2, #1
 800313e:	3a01      	subs	r2, #1
 8003140:	0652      	lsls	r2, r2, #25
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6852      	ldr	r2, [r2, #4]
 8003148:	3a01      	subs	r2, #1
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	430a      	orrs	r2, r1
 800314e:	4916      	ldr	r1, [pc, #88]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003150:	4313      	orrs	r3, r2
 8003152:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800315a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800315e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fd fdd0 	bl	8000d04 <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003166:	e009      	b.n	800317c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003168:	f7fd fdcc 	bl	8000d04 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d902      	bls.n	800317c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	73fb      	strb	r3, [r7, #15]
          break;
 800317a:	e005      	b.n	8003188 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ef      	beq.n	8003168 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	4904      	ldr	r1, [pc, #16]	; (80031a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003198:	4313      	orrs	r3, r2
 800319a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	07ff800f 	.word	0x07ff800f
 80031b0:	ff9f800f 	.word	0xff9f800f
 80031b4:	f9ff800f 	.word	0xf9ff800f

080031b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031c6:	4b72      	ldr	r3, [pc, #456]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00e      	beq.n	80031f0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031d2:	4b6f      	ldr	r3, [pc, #444]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0203 	and.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d103      	bne.n	80031ea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
       ||
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d142      	bne.n	8003270 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
 80031ee:	e03f      	b.n	8003270 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d018      	beq.n	800322a <RCCEx_PLLSAI2_Config+0x72>
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d825      	bhi.n	8003248 <RCCEx_PLLSAI2_Config+0x90>
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d002      	beq.n	8003206 <RCCEx_PLLSAI2_Config+0x4e>
 8003200:	2b02      	cmp	r3, #2
 8003202:	d009      	beq.n	8003218 <RCCEx_PLLSAI2_Config+0x60>
 8003204:	e020      	b.n	8003248 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003206:	4b62      	ldr	r3, [pc, #392]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11d      	bne.n	800324e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003216:	e01a      	b.n	800324e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003218:	4b5d      	ldr	r3, [pc, #372]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d116      	bne.n	8003252 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003228:	e013      	b.n	8003252 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800322a:	4b59      	ldr	r3, [pc, #356]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003236:	4b56      	ldr	r3, [pc, #344]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003246:	e006      	b.n	8003256 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      break;
 800324c:	e004      	b.n	8003258 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003256:	bf00      	nop
    }

    if(status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800325e:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f023 0203 	bic.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4949      	ldr	r1, [pc, #292]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 800326c:	4313      	orrs	r3, r2
 800326e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 8086 	bne.w	8003384 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003278:	4b45      	ldr	r3, [pc, #276]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a44      	ldr	r2, [pc, #272]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003284:	f7fd fd3e 	bl	8000d04 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800328a:	e009      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800328c:	f7fd fd3a 	bl	8000d04 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	73fb      	strb	r3, [r7, #15]
        break;
 800329e:	e005      	b.n	80032ac <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032a0:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ef      	bne.n	800328c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d168      	bne.n	8003384 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d113      	bne.n	80032e0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <RCCEx_PLLSAI2_Config+0x1dc>)
 80032be:	4013      	ands	r3, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	0211      	lsls	r1, r2, #8
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68d2      	ldr	r2, [r2, #12]
 80032ca:	06d2      	lsls	r2, r2, #27
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6852      	ldr	r2, [r2, #4]
 80032d2:	3a01      	subs	r2, #1
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	430a      	orrs	r2, r1
 80032d8:	492d      	ldr	r1, [pc, #180]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	614b      	str	r3, [r1, #20]
 80032de:	e02d      	b.n	800333c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d115      	bne.n	8003312 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <RCCEx_PLLSAI2_Config+0x1e0>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6892      	ldr	r2, [r2, #8]
 80032f2:	0211      	lsls	r1, r2, #8
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6912      	ldr	r2, [r2, #16]
 80032f8:	0852      	lsrs	r2, r2, #1
 80032fa:	3a01      	subs	r2, #1
 80032fc:	0552      	lsls	r2, r2, #21
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6852      	ldr	r2, [r2, #4]
 8003304:	3a01      	subs	r2, #1
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	430a      	orrs	r2, r1
 800330a:	4921      	ldr	r1, [pc, #132]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 800330c:	4313      	orrs	r3, r2
 800330e:	614b      	str	r3, [r1, #20]
 8003310:	e014      	b.n	800333c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	4b21      	ldr	r3, [pc, #132]	; (800339c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6892      	ldr	r2, [r2, #8]
 800331e:	0211      	lsls	r1, r2, #8
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6952      	ldr	r2, [r2, #20]
 8003324:	0852      	lsrs	r2, r2, #1
 8003326:	3a01      	subs	r2, #1
 8003328:	0652      	lsls	r2, r2, #25
 800332a:	4311      	orrs	r1, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6852      	ldr	r2, [r2, #4]
 8003330:	3a01      	subs	r2, #1
 8003332:	0112      	lsls	r2, r2, #4
 8003334:	430a      	orrs	r2, r1
 8003336:	4916      	ldr	r1, [pc, #88]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003338:	4313      	orrs	r3, r2
 800333a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003346:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fd fcdc 	bl	8000d04 <HAL_GetTick>
 800334c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800334e:	e009      	b.n	8003364 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003350:	f7fd fcd8 	bl	8000d04 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d902      	bls.n	8003364 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	73fb      	strb	r3, [r7, #15]
          break;
 8003362:	e005      	b.n	8003370 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ef      	beq.n	8003350 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	4904      	ldr	r1, [pc, #16]	; (8003390 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	07ff800f 	.word	0x07ff800f
 8003398:	ff9f800f 	.word	0xff9f800f
 800339c:	f9ff800f 	.word	0xf9ff800f

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <__libc_init_array>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4d0d      	ldr	r5, [pc, #52]	; (80033e8 <__libc_init_array+0x38>)
 80033b4:	4c0d      	ldr	r4, [pc, #52]	; (80033ec <__libc_init_array+0x3c>)
 80033b6:	1b64      	subs	r4, r4, r5
 80033b8:	10a4      	asrs	r4, r4, #2
 80033ba:	2600      	movs	r6, #0
 80033bc:	42a6      	cmp	r6, r4
 80033be:	d109      	bne.n	80033d4 <__libc_init_array+0x24>
 80033c0:	4d0b      	ldr	r5, [pc, #44]	; (80033f0 <__libc_init_array+0x40>)
 80033c2:	4c0c      	ldr	r4, [pc, #48]	; (80033f4 <__libc_init_array+0x44>)
 80033c4:	f000 f818 	bl	80033f8 <_init>
 80033c8:	1b64      	subs	r4, r4, r5
 80033ca:	10a4      	asrs	r4, r4, #2
 80033cc:	2600      	movs	r6, #0
 80033ce:	42a6      	cmp	r6, r4
 80033d0:	d105      	bne.n	80033de <__libc_init_array+0x2e>
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d8:	4798      	blx	r3
 80033da:	3601      	adds	r6, #1
 80033dc:	e7ee      	b.n	80033bc <__libc_init_array+0xc>
 80033de:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e2:	4798      	blx	r3
 80033e4:	3601      	adds	r6, #1
 80033e6:	e7f2      	b.n	80033ce <__libc_init_array+0x1e>
 80033e8:	08003450 	.word	0x08003450
 80033ec:	08003450 	.word	0x08003450
 80033f0:	08003450 	.word	0x08003450
 80033f4:	08003454 	.word	0x08003454

080033f8 <_init>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	bf00      	nop
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr

08003404 <_fini>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	bf00      	nop
 8003408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340a:	bc08      	pop	{r3}
 800340c:	469e      	mov	lr, r3
 800340e:	4770      	bx	lr
