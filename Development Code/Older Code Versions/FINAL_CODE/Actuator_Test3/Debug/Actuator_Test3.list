
Actuator_Test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000274f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025bc  080276b0  080276b0  000376b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000187e  08029c6c  08029c6c  00039c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000f4  0802b4ec  0802b4ec  0003b4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0002ef90  0802b5e0  0802b5e0  0003b5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000078  0805a570  0805a570  0006a570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0805a5e8  0805a5e8  00070384  2**0
                  CONTENTS
  8 .ARM          00000008  0805a5e8  0805a5e8  0006a5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0805a5f0  0805a5f0  00070384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  0805a5f0  0805a5f0  0006a5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   0000000c  0805a608  0805a608  0006a608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000384  20000000  0805a614  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00026104  20000388  0805a998  00070388  2**3
                  ALLOC
 14 ._user_heap_stack 00000604  2002648c  0805a998  0007648c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00070384  2**0
                  CONTENTS, READONLY
 16 .comment      000000c2  00000000  00000000  000703b4  2**0
                  CONTENTS, READONLY
 17 .debug_info   0007667c  00000000  00000000  00070476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000e49d  00000000  00000000  000e6af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002f30  00000000  00000000  000f4f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000234c  00000000  00000000  000f7ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003443b  00000000  00000000  000fa20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00038160  00000000  00000000  0012e647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00129276  00000000  00000000  001667a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000d180  00000000  00000000  0028fa20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000005d  00000000  00000000  0029cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000388 	.word	0x20000388
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08027698 	.word	0x08027698

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000038c 	.word	0x2000038c
 80001fc:	08027698 	.word	0x08027698

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b970 	b.w	8000e94 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14a      	bne.n	8000c72 <__udivmoddi4+0xa6>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0xe2>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c06:	0c22      	lsrs	r2, r4, #16
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c10:	fb01 f005 	mul.w	r0, r1, r5
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x62>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c20:	f080 811c 	bcs.w	8000e5c <__udivmoddi4+0x290>
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f240 8119 	bls.w	8000e5c <__udivmoddi4+0x290>
 8000c2a:	3902      	subs	r1, #2
 8000c2c:	4462      	add	r2, ip
 8000c2e:	1a12      	subs	r2, r2, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	fb00 f505 	mul.w	r5, r0, r5
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x90>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x294>
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x294>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11e      	cbz	r6, 8000c6e <__udivmoddi4+0xa2>
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0xbc>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f000 80ed 	beq.w	8000e56 <__udivmoddi4+0x28a>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d149      	bne.n	8000d24 <__udivmoddi4+0x158>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0xce>
 8000c94:	4282      	cmp	r2, r0
 8000c96:	f200 80f8 	bhi.w	8000e8a <__udivmoddi4+0x2be>
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0e2      	beq.n	8000c6e <__udivmoddi4+0xa2>
 8000ca8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cac:	e7df      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xe6>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f382 	clz	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x210>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ccc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd0:	0c22      	lsrs	r2, r4, #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb0e f005 	mul.w	r0, lr, r5
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cde:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x122>
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	f200 80cb 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d00:	fb0e fe00 	mul.w	lr, lr, r0
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f200 80bb 	bhi.w	8000e8e <__udivmoddi4+0x2c2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	eba4 040e 	sub.w	r4, r4, lr
 8000d1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d22:	e79f      	b.n	8000c64 <__udivmoddi4+0x98>
 8000d24:	f1c1 0720 	rsb	r7, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d32:	fa05 f401 	lsl.w	r4, r5, r1
 8000d36:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3a:	40fd      	lsrs	r5, r7
 8000d3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d54:	fb08 f50e 	mul.w	r5, r8, lr
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d62:	d90b      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d6c:	f080 8088 	bcs.w	8000e80 <__udivmoddi4+0x2b4>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f240 8085 	bls.w	8000e80 <__udivmoddi4+0x2b4>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	4464      	add	r4, ip
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1da>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d9c:	d26c      	bcs.n	8000e78 <__udivmoddi4+0x2ac>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	d96a      	bls.n	8000e78 <__udivmoddi4+0x2ac>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fba3 9502 	umull	r9, r5, r3, r2
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	46c8      	mov	r8, r9
 8000db6:	46ae      	mov	lr, r5
 8000db8:	d356      	bcc.n	8000e68 <__udivmoddi4+0x29c>
 8000dba:	d053      	beq.n	8000e64 <__udivmoddi4+0x298>
 8000dbc:	b156      	cbz	r6, 8000dd4 <__udivmoddi4+0x208>
 8000dbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dca:	40ca      	lsrs	r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	4317      	orrs	r7, r2
 8000dd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	f1c3 0120 	rsb	r1, r3, #32
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	fa20 f201 	lsr.w	r2, r0, r1
 8000de8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dec:	409d      	lsls	r5, r3
 8000dee:	432a      	orrs	r2, r5
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e06:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0a:	428d      	cmp	r5, r1
 8000e0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x258>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1a:	d22f      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	d92d      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1b49      	subs	r1, r1, r5
 8000e26:	b292      	uxth	r2, r2
 8000e28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	fb05 f10e 	mul.w	r1, r5, lr
 8000e38:	4291      	cmp	r1, r2
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x282>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e44:	d216      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000e46:	4291      	cmp	r1, r2
 8000e48:	d914      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000e4a:	3d02      	subs	r5, #2
 8000e4c:	4462      	add	r2, ip
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e54:	e738      	b.n	8000cc8 <__udivmoddi4+0xfc>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e6e6      	b.n	8000c2e <__udivmoddi4+0x62>
 8000e60:	4610      	mov	r0, r2
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x90>
 8000e64:	4548      	cmp	r0, r9
 8000e66:	d2a9      	bcs.n	8000dbc <__udivmoddi4+0x1f0>
 8000e68:	ebb9 0802 	subs.w	r8, r9, r2
 8000e6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7a3      	b.n	8000dbc <__udivmoddi4+0x1f0>
 8000e74:	4645      	mov	r5, r8
 8000e76:	e7ea      	b.n	8000e4e <__udivmoddi4+0x282>
 8000e78:	462b      	mov	r3, r5
 8000e7a:	e794      	b.n	8000da6 <__udivmoddi4+0x1da>
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	e7d1      	b.n	8000e24 <__udivmoddi4+0x258>
 8000e80:	46d0      	mov	r8, sl
 8000e82:	e77b      	b.n	8000d7c <__udivmoddi4+0x1b0>
 8000e84:	3d02      	subs	r5, #2
 8000e86:	4462      	add	r2, ip
 8000e88:	e732      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e70a      	b.n	8000ca4 <__udivmoddi4+0xd8>
 8000e8e:	4464      	add	r4, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e742      	b.n	8000d1a <__udivmoddi4+0x14e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <formGroups>:
void GPIO_Deactivation_Left(int note);
int setDCStart(int current_time);
int setDCStop(int current_time);
void setNextAction(int current_time);

int formGroups(int noteArr[][noteColNum], int len){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	movementOps(noteArr, len);
 8000ea2:	6839      	ldr	r1, [r7, #0]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f97f 	bl	80011a8 <movementOps>
	int num_groups = noteArr[len - 1][3];
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	3b14      	subs	r3, #20
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < num_groups; i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	e01d      	b.n	8000f00 <formGroups+0x68>
		if(groupRange(noteArr, len, i, i + 1) <= 11){
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	6839      	ldr	r1, [r7, #0]
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 f820 	bl	8000f12 <groupRange>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b0b      	cmp	r3, #11
 8000ed6:	dc10      	bgt.n	8000efa <formGroups+0x62>
			groupMerge(noteArr, len, i, i + 1);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3301      	adds	r3, #1
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f8cb 	bl	800107c <groupMerge>
			num_groups--;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
			groupContinuity(noteArr, len);
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f8f2 	bl	80010d8 <groupContinuity>
			i--;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < num_groups; i++){
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbdd      	blt.n	8000ec4 <formGroups+0x2c>
		}
	}
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <groupRange>:

// Given two group numbers, return the collective range
int groupRange(int noteArr[][noteColNum], int len, int group1, int group2){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b08a      	sub	sp, #40	; 0x28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	603b      	str	r3, [r7, #0]
	int minNote = 100;
 8000f20:	2364      	movs	r3, #100	; 0x64
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
	int maxNote = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < len; i++){
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	e04b      	b.n	8000fc6 <groupRange+0xb4>
		if(noteArr[i][3] == group1 || noteArr[i][3] == group2){
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d00b      	beq.n	8000f5e <groupRange+0x4c>
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	461a      	mov	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4413      	add	r3, r2
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d130      	bne.n	8000fc0 <groupRange+0xae>
			if(noteArr[i][4] == 0){
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d125      	bne.n	8000fc0 <groupRange+0xae>
				int min = nearestMinWhite(noteArr[i][0]);
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f828 	bl	8000fdc <nearestMinWhite>
 8000f8c:	61b8      	str	r0, [r7, #24]
				int max = nearestMaxWhite(noteArr[i][0]);
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f82d 	bl	8001000 <nearestMaxWhite>
 8000fa6:	6178      	str	r0, [r7, #20]
				if(min < minNote){
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	429a      	cmp	r2, r3
 8000fae:	da01      	bge.n	8000fb4 <groupRange+0xa2>
					minNote = min;
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if(max > maxNote){
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dd01      	ble.n	8000fc0 <groupRange+0xae>
					maxNote = max;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < len; i++){
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbaf      	blt.n	8000f2e <groupRange+0x1c>
				}
			}
		}
	}
	return maxNote - minNote;
 8000fce:	6a3a      	ldr	r2, [r7, #32]
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	1ad3      	subs	r3, r2, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <nearestMinWhite>:

// Identify the nearest white note under the argument note number
int nearestMinWhite(int noteNum){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if(isBlackKey(noteNum)){
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f81d 	bl	8001024 <isBlackKey>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <nearestMinWhite+0x1a>
		return noteNum - 1;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <nearestMinWhite+0x1c>
	}
	return noteNum;
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <nearestMaxWhite>:

// Identify the nearest white note above the argument note number
int nearestMaxWhite(int noteNum){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if(isBlackKey(noteNum)){
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f80b 	bl	8001024 <isBlackKey>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <nearestMaxWhite+0x1a>
			return noteNum + 1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3301      	adds	r3, #1
 8001018:	e000      	b.n	800101c <nearestMaxWhite+0x1c>
		}
		return noteNum;
 800101a:	687b      	ldr	r3, [r7, #4]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <isBlackKey>:


// Identify if a note is a black key
int isBlackKey(int noteNum){
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	int isBlack = noteNum % 12;
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <isBlackKey+0x54>)
 8001030:	fb83 1302 	smull	r1, r3, r3, r2
 8001034:	1059      	asrs	r1, r3, #1
 8001036:	17d3      	asrs	r3, r2, #31
 8001038:	1ac9      	subs	r1, r1, r3
 800103a:	460b      	mov	r3, r1
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	440b      	add	r3, r1
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	60fb      	str	r3, [r7, #12]
	if(isBlack == 1 || isBlack == 3 || isBlack == 6 || isBlack == 8 || isBlack == 10){
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d00b      	beq.n	8001064 <isBlackKey+0x40>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d008      	beq.n	8001064 <isBlackKey+0x40>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b06      	cmp	r3, #6
 8001056:	d005      	beq.n	8001064 <isBlackKey+0x40>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b08      	cmp	r3, #8
 800105c:	d002      	beq.n	8001064 <isBlackKey+0x40>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b0a      	cmp	r3, #10
 8001062:	d101      	bne.n	8001068 <isBlackKey+0x44>
		return 1;
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <isBlackKey+0x46>
	}
	return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2aaaaaab 	.word	0x2aaaaaab

0800107c <groupMerge>:
// Given two consecutive groups, combine them into one group using the lower group number; assumes group1 < group2
void groupMerge(int noteArr[][noteColNum], int len, int group1, int group2){
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len; i++){
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e018      	b.n	80010c2 <groupMerge+0x46>
		if(noteArr[i][3] == group2){
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d109      	bne.n	80010bc <groupMerge+0x40>
			noteArr[i][3] = group1;
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	60da      	str	r2, [r3, #12]
	for(int i = 0; i < len; i++){
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbe2      	blt.n	8001090 <groupMerge+0x14>
		}
	}
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <groupContinuity>:

// Reassign group numbers so they are sequential in value
void groupContinuity(int noteArr[][noteColNum], int len){
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	int prevGroupNum = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
	int replaceGroup = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
	int newGroupNum = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
	int diff = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < len; i++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	e04c      	b.n	8001192 <groupContinuity+0xba>
		diff = noteArr[i][3] - prevGroupNum;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	60fb      	str	r3, [r7, #12]
		if(diff > 1 || diff < 0){
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b01      	cmp	r3, #1
 8001114:	dc02      	bgt.n	800111c <groupContinuity+0x44>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	da2d      	bge.n	8001178 <groupContinuity+0xa0>
			replaceGroup = noteArr[i][3];
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	461a      	mov	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	617b      	str	r3, [r7, #20]
			newGroupNum = prevGroupNum + 1;
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	3301      	adds	r3, #1
 8001134:	613b      	str	r3, [r7, #16]
			while(noteArr[i][3] == replaceGroup && (i < len)){
 8001136:	e00c      	b.n	8001152 <groupContinuity+0x7a>
				noteArr[i][3] = newGroupNum;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	461a      	mov	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	60da      	str	r2, [r3, #12]
				i++;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	3301      	adds	r3, #1
 8001150:	61bb      	str	r3, [r7, #24]
			while(noteArr[i][3] == replaceGroup && (i < len)){
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	429a      	cmp	r2, r3
 8001168:	d103      	bne.n	8001172 <groupContinuity+0x9a>
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	dbe2      	blt.n	8001138 <groupContinuity+0x60>
			}
			i--;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	3b01      	subs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
		}
		prevGroupNum = noteArr[i][3];
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < len; i++){
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	3301      	adds	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	dbae      	blt.n	80010f8 <groupContinuity+0x20>
	}
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <movementOps>:

// Search for all movement opportunities and use them as divisions between groups
void movementOps(int noteArr[][noteColNum], int len){
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	int current_group = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
	int time_max = noteArr[0][2];
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	613b      	str	r3, [r7, #16]
	noteArr[0][3] = 0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
	for(int i = 1; i < len; i++){
 80011c2:	2301      	movs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e051      	b.n	800126c <movementOps+0xc4>
		if(noteArr[i][1] > time_max){
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	da17      	bge.n	8001210 <movementOps+0x68>
			current_group++;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
			noteArr[i][3] = current_group;
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	60da      	str	r2, [r3, #12]
			time_max = noteArr[i][2];
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	e02a      	b.n	8001266 <movementOps+0xbe>
		}
		else if(noteArr[i][2] > time_max){
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	da14      	bge.n	8001252 <movementOps+0xaa>
			time_max = noteArr[i][2];
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	613b      	str	r3, [r7, #16]
			noteArr[i][3] = current_group;
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	e009      	b.n	8001266 <movementOps+0xbe>
		}
		else{
			noteArr[i][3] = current_group;
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	461a      	mov	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	60da      	str	r2, [r3, #12]
	for(int i = 1; i < len; i++){
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	dba9      	blt.n	80011c8 <movementOps+0x20>
		}
	}
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <assignActuatorPos>:

// Assign actuator positions using a note data array
int assignActuatorPos(int actuatorPos[][2], int noteArr[][noteColNum], int note_len, int hand){
 8001282:	b580      	push	{r7, lr}
 8001284:	b088      	sub	sp, #32
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	603b      	str	r3, [r7, #0]
	if(note_len < 1){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	dc01      	bgt.n	800129a <assignActuatorPos+0x18>
		return 0;
 8001296:	2300      	movs	r3, #0
 8001298:	e0d5      	b.n	8001446 <assignActuatorPos+0x1c4>
	}
	int current_group = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
	int group_min_note = nearestMinWhite(noteArr[0][0]);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe9a 	bl	8000fdc <nearestMinWhite>
 80012a8:	61b8      	str	r0, [r7, #24]
	int group_min_time = noteArr[0][1];
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < note_len; i++){
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	e091      	b.n	80013da <assignActuatorPos+0x158>
		if(noteArr[i][3] != current_group){
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	461a      	mov	r2, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4413      	add	r3, r2
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d05e      	beq.n	800138c <assignActuatorPos+0x10a>
			if(group_min_note > highestNote || group_min_note < lowestNote || (hand && group_min_note > defaultLeft) || (!hand && group_min_note < defaultRight)){
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2b60      	cmp	r3, #96	; 0x60
 80012d2:	dc0e      	bgt.n	80012f2 <assignActuatorPos+0x70>
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b23      	cmp	r3, #35	; 0x23
 80012d8:	dd0b      	ble.n	80012f2 <assignActuatorPos+0x70>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <assignActuatorPos+0x64>
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b2b      	cmp	r3, #43	; 0x2b
 80012e4:	dc05      	bgt.n	80012f2 <assignActuatorPos+0x70>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d113      	bne.n	8001314 <assignActuatorPos+0x92>
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b3b      	cmp	r3, #59	; 0x3b
 80012f0:	dc10      	bgt.n	8001314 <assignActuatorPos+0x92>
				if(hand){
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <assignActuatorPos+0x84>
					actuatorPos[current_group][0] = defaultLeft;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	222b      	movs	r2, #43	; 0x2b
 8001302:	601a      	str	r2, [r3, #0]
				if(hand){
 8001304:	e00c      	b.n	8001320 <assignActuatorPos+0x9e>
				}
				else{
					actuatorPos[current_group][0] = defaultRight;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	223c      	movs	r2, #60	; 0x3c
 8001310:	601a      	str	r2, [r3, #0]
				if(hand){
 8001312:	e005      	b.n	8001320 <assignActuatorPos+0x9e>
				}
			}
			else{
				actuatorPos[current_group][0] = group_min_note;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	601a      	str	r2, [r3, #0]
			}
			actuatorPos[current_group][1] = group_min_time;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	605a      	str	r2, [r3, #4]
			if(!noteArr[i][4]){
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	461a      	mov	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <assignActuatorPos+0xdc>
				group_min_note = nearestMinWhite(noteArr[i][0]);
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe41 	bl	8000fdc <nearestMinWhite>
 800135a:	61b8      	str	r0, [r7, #24]
 800135c:	e001      	b.n	8001362 <assignActuatorPos+0xe0>
			}
			else{
				group_min_note = 100;
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	61bb      	str	r3, [r7, #24]
			}
			group_min_time = noteArr[i][1];
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	617b      	str	r3, [r7, #20]
			current_group = noteArr[i][3];
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	461a      	mov	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	4413      	add	r3, r2
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e023      	b.n	80013d4 <assignActuatorPos+0x152>
		}
		else if(noteArr[i][0] < group_min_note && !noteArr[i][4]){
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dd17      	ble.n	80013d4 <assignActuatorPos+0x152>
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	461a      	mov	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4413      	add	r3, r2
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10c      	bne.n	80013d4 <assignActuatorPos+0x152>
				group_min_note = nearestMinWhite(noteArr[i][0]);
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	461a      	mov	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	4413      	add	r3, r2
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fe05 	bl	8000fdc <nearestMinWhite>
 80013d2:	61b8      	str	r0, [r7, #24]
	for(int i = 0; i < note_len; i++){
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	3301      	adds	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	f6ff af69 	blt.w	80012b6 <assignActuatorPos+0x34>
		}
	}
	if(group_min_note > highestNote || group_min_note < lowestNote || (hand && group_min_note > defaultLeft) || (!hand && group_min_note < defaultRight)){
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b60      	cmp	r3, #96	; 0x60
 80013e8:	dc0e      	bgt.n	8001408 <assignActuatorPos+0x186>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b23      	cmp	r3, #35	; 0x23
 80013ee:	dd0b      	ble.n	8001408 <assignActuatorPos+0x186>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <assignActuatorPos+0x17a>
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b2b      	cmp	r3, #43	; 0x2b
 80013fa:	dc05      	bgt.n	8001408 <assignActuatorPos+0x186>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d113      	bne.n	800142a <assignActuatorPos+0x1a8>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b3b      	cmp	r3, #59	; 0x3b
 8001406:	dc10      	bgt.n	800142a <assignActuatorPos+0x1a8>
		if(hand){
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <assignActuatorPos+0x19a>
			actuatorPos[current_group][0] = defaultLeft;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4413      	add	r3, r2
 8001416:	222b      	movs	r2, #43	; 0x2b
 8001418:	601a      	str	r2, [r3, #0]
		if(hand){
 800141a:	e00c      	b.n	8001436 <assignActuatorPos+0x1b4>
		}
		else{
			actuatorPos[current_group][0] = defaultRight;
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	223c      	movs	r2, #60	; 0x3c
 8001426:	601a      	str	r2, [r3, #0]
		if(hand){
 8001428:	e005      	b.n	8001436 <assignActuatorPos+0x1b4>
		}
	}
	else{
		actuatorPos[current_group][0] = group_min_note;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	601a      	str	r2, [r3, #0]
	}
	actuatorPos[current_group][1] = group_min_time;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	605a      	str	r2, [r3, #4]

	return current_group + 1;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
}
 8001446:	4618      	mov	r0, r3
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <splitStartStop>:

// Split start and stop times for notes
void splitStartStop(int noteArr[][noteColNum], int note_len, int noteArrStop[][2]){
 800144e:	b480      	push	{r7}
 8001450:	b087      	sub	sp, #28
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < note_len; i++){
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e01e      	b.n	800149e <splitStartStop+0x50>
		noteArrStop[i][0] = noteArr[i][0];
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	441a      	add	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	440b      	add	r3, r1
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	601a      	str	r2, [r3, #0]
		noteArrStop[i][1] = noteArr[i][2];
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	441a      	add	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	440b      	add	r3, r1
 8001494:	6892      	ldr	r2, [r2, #8]
 8001496:	605a      	str	r2, [r3, #4]
	for(int i = 0; i < note_len; i++){
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbdc      	blt.n	8001460 <splitStartStop+0x12>
	}
}
 80014a6:	bf00      	nop
 80014a8:	bf00      	nop
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <sortStop>:

// Sort stop array
void sortStop(int noteArr[][2], int note_len){
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
	int key_note, key_time, j;
	for(int i = 1; i < note_len; i++){
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	e044      	b.n	800154e <sortStop+0x9a>
		key_note = noteArr[i][0];
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]
		key_time = noteArr[i][1];
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	60bb      	str	r3, [r7, #8]
		j = i - 1;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	3b01      	subs	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]

		while(j >= 0 && noteArr[j][1] > key_time){
 80014e2:	e018      	b.n	8001516 <sortStop+0x62>
			noteArr[j + 1][0] = noteArr[j][0];
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	441a      	add	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	440b      	add	r3, r1
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	601a      	str	r2, [r3, #0]
			noteArr[j + 1][1] = noteArr[j][1];
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	441a      	add	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	440b      	add	r3, r1
 800150c:	6852      	ldr	r2, [r2, #4]
 800150e:	605a      	str	r2, [r3, #4]
			j--;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3b01      	subs	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
		while(j >= 0 && noteArr[j][1] > key_time){
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db07      	blt.n	800152c <sortStop+0x78>
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbdb      	blt.n	80014e4 <sortStop+0x30>
		}
		noteArr[j + 1][0] = key_note;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	601a      	str	r2, [r3, #0]
		noteArr[j + 1][1] = key_time;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	605a      	str	r2, [r3, #4]
	for(int i = 1; i < note_len; i++){
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	3301      	adds	r3, #1
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	dbb6      	blt.n	80014c4 <sortStop+0x10>
	}
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <assignDCAct>:
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{2, 3, 4, 12, 5, 7, 8, 9, 10, 11, 12, 0},
};

// Assign DC actuator activations
void assignDCAct(int actuatorPos[][2], int actuator_len, int noteArr[][noteColNum], int note_len){
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
	int DCNum = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < note_len; i++){
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e04f      	b.n	800161c <assignDCAct+0xb8>
		if(!noteArr[i][4]){
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d141      	bne.n	8001616 <assignDCAct+0xb2>
			DCNum = DCLookup[actuatorPos[(noteArr[i][3])][0] % 12][noteArr[i][0] % 12];
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <assignDCAct+0xd0>)
 80015ae:	fb83 2301 	smull	r2, r3, r3, r1
 80015b2:	105a      	asrs	r2, r3, #1
 80015b4:	17cb      	asrs	r3, r1, #31
 80015b6:	1ad2      	subs	r2, r2, r3
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	1aca      	subs	r2, r1, r3
 80015c2:	6979      	ldr	r1, [r7, #20]
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4619      	mov	r1, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	440b      	add	r3, r1
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <assignDCAct+0xd0>)
 80015d6:	fb83 1300 	smull	r1, r3, r3, r0
 80015da:	1059      	asrs	r1, r3, #1
 80015dc:	17c3      	asrs	r3, r0, #31
 80015de:	1ac9      	subs	r1, r1, r3
 80015e0:	460b      	mov	r3, r1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	440b      	add	r3, r1
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	1ac1      	subs	r1, r0, r3
 80015ea:	4813      	ldr	r0, [pc, #76]	; (8001638 <assignDCAct+0xd4>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80015fa:	613b      	str	r3, [r7, #16]
			if(DCNum < 12){
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b0b      	cmp	r3, #11
 8001600:	dc09      	bgt.n	8001616 <assignDCAct+0xb2>
				noteArr[i][0] = DCNum;
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < note_len; i++){
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbab      	blt.n	800157c <assignDCAct+0x18>
			}
		}

	}
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2aaaaaab 	.word	0x2aaaaaab
 8001638:	20000048 	.word	0x20000048

0800163c <setNextLinActuatorTime>:

int nextMove = 0;

// Sets TIM2 ARR so that it triggers for the next linear actuator movement
// Returns 0 if there is no next linear actuator movement
int setNextLinActuatorTime(int current_time){
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if(actuatorL >= actuatorPosL_len){
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <setNextLinActuatorTime+0xb0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <setNextLinActuatorTime+0xb4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	db11      	blt.n	8001674 <setNextLinActuatorTime+0x38>
		if(actuatorR >= actuatorPosR_len){
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <setNextLinActuatorTime+0xbc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	db02      	blt.n	8001662 <setNextLinActuatorTime+0x26>
			//HAL_TIM_Base_Stop_IT(&htim2);
			//return 0;
			return INT_MAX;
 800165c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001660:	e03e      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
		}
		else{
			//TIM2->ARR = actuatorPosR[actuatorR][1] - current_time - 1;
			return actuatorPosR[actuatorR][1] - current_time;
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a25      	ldr	r2, [pc, #148]	; (80016fc <setNextLinActuatorTime+0xc0>)
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	e035      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
		}
	}
	else if(actuatorR >= actuatorPosR_len){
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <setNextLinActuatorTime+0xbc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	db0e      	blt.n	800169e <setNextLinActuatorTime+0x62>
		if(actuatorL >= actuatorPosL_len){
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <setNextLinActuatorTime+0xb0>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <setNextLinActuatorTime+0xb4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	da28      	bge.n	80016de <setNextLinActuatorTime+0xa2>
			//HAL_TIM_Base_Stop_IT(&htim2);
			//return 0;
		}
		else{
			//TIM2->ARR = actuatorPosL[actuatorL][1] - current_time - 1;
			return actuatorPosL[actuatorL][1] - current_time;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <setNextLinActuatorTime+0xb0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <setNextLinActuatorTime+0xc4>)
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	e020      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
		}
	}
	else if(actuatorPosL[actuatorL][1] < actuatorPosR[actuatorR][1]){
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <setNextLinActuatorTime+0xb0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <setNextLinActuatorTime+0xc4>)
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4913      	ldr	r1, [pc, #76]	; (80016fc <setNextLinActuatorTime+0xc0>)
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	da08      	bge.n	80016cc <setNextLinActuatorTime+0x90>
		//TIM2->ARR = actuatorPosL[actuatorL][1] - current_time - 1;
		return actuatorPosL[actuatorL][1] - current_time;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <setNextLinActuatorTime+0xb0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <setNextLinActuatorTime+0xc4>)
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	e009      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
	}
	else{
		//TIM2->ARR = actuatorPosR[actuatorR][1] - current_time - 1;
		return actuatorPosR[actuatorR][1] - current_time;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <setNextLinActuatorTime+0xc0>)
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	e000      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
	}

	return 1;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20008618 	.word	0x20008618
 80016f0:	20004780 	.word	0x20004780
 80016f4:	2000861c 	.word	0x2000861c
 80016f8:	20008604 	.word	0x20008604
 80016fc:	20004784 	.word	0x20004784
 8001700:	20000900 	.word	0x20000900

08001704 <setDCStart>:


// Sets TIM3 ARR so that it triggers for the next DC actuator push
// Returns 0 if there is no next DC actuator push
int setDCStart(int current_time){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	if(DCLeftStart >= note_dataL_len){
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <setDCStart+0xec>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <setDCStart+0xf0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	db18      	blt.n	800174a <setDCStart+0x46>
		if(DCRightStart >= note_dataR_len){
 8001718:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <setDCStart+0xf4>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b37      	ldr	r3, [pc, #220]	; (80017fc <setDCStart+0xf8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	db05      	blt.n	8001730 <setDCStart+0x2c>
			HAL_TIM_Base_Stop_IT(&htim3);
 8001724:	4836      	ldr	r0, [pc, #216]	; (8001800 <setDCStart+0xfc>)
 8001726:	f008 fb71 	bl	8009e0c <HAL_TIM_Base_Stop_IT>
			//return 0;
			return INT_MAX;
 800172a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800172e:	e05a      	b.n	80017e6 <setDCStart+0xe2>
		}
		else{
			//TIM3->ARR = note_dataR[DCRightStart][1] - current_time - 1;
			return note_dataR[DCRightStart][1] - current_time;
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <setDCStart+0xf4>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4933      	ldr	r1, [pc, #204]	; (8001804 <setDCStart+0x100>)
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3304      	adds	r3, #4
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	e04d      	b.n	80017e6 <setDCStart+0xe2>
		}
	}
	else if(DCRightStart >= note_dataR_len){
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <setDCStart+0xf4>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <setDCStart+0xf8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	db18      	blt.n	8001788 <setDCStart+0x84>
		if(DCLeftStart >= note_dataL_len){
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <setDCStart+0xec>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <setDCStart+0xf0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	db05      	blt.n	800176e <setDCStart+0x6a>
			HAL_TIM_Base_Stop_IT(&htim3);
 8001762:	4827      	ldr	r0, [pc, #156]	; (8001800 <setDCStart+0xfc>)
 8001764:	f008 fb52 	bl	8009e0c <HAL_TIM_Base_Stop_IT>
			//return 0;
			return INT_MAX;
 8001768:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800176c:	e03b      	b.n	80017e6 <setDCStart+0xe2>
		}
		else{
			//TIM3->ARR = note_dataL[DCLeftStart][1] - current_time - 1;
			return note_dataL[DCLeftStart][1] - current_time;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <setDCStart+0xec>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4925      	ldr	r1, [pc, #148]	; (8001808 <setDCStart+0x104>)
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3304      	adds	r3, #4
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	e02e      	b.n	80017e6 <setDCStart+0xe2>
		}
	}
	else if(note_dataL[DCLeftStart][1] < note_dataR[DCRightStart][1]){
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <setDCStart+0xec>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	491e      	ldr	r1, [pc, #120]	; (8001808 <setDCStart+0x104>)
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	3304      	adds	r3, #4
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <setDCStart+0xf4>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4818      	ldr	r0, [pc, #96]	; (8001804 <setDCStart+0x100>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4403      	add	r3, r0
 80017ac:	3304      	adds	r3, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4299      	cmp	r1, r3
 80017b2:	da0c      	bge.n	80017ce <setDCStart+0xca>
		//TIM3->ARR = note_dataL[DCLeftStart][1] - current_time - 1;
		return note_dataL[DCLeftStart][1] - current_time;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <setDCStart+0xec>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4913      	ldr	r1, [pc, #76]	; (8001808 <setDCStart+0x104>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	3304      	adds	r3, #4
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	e00b      	b.n	80017e6 <setDCStart+0xe2>
	}
	else{
		//TIM3->ARR = note_dataR[DCRightStart][1] - current_time - 1;
		return note_dataR[DCRightStart][1] - current_time;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <setDCStart+0xf4>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	490c      	ldr	r1, [pc, #48]	; (8001804 <setDCStart+0x100>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	3304      	adds	r3, #4
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	1ad3      	subs	r3, r2, r3
	}
	return 1;
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20008620 	.word	0x20008620
 80017f4:	20012270 	.word	0x20012270
 80017f8:	20008628 	.word	0x20008628
 80017fc:	2001beb4 	.word	0x2001beb4
 8001800:	200006ec 	.word	0x200006ec
 8001804:	20012274 	.word	0x20012274
 8001808:	20008630 	.word	0x20008630

0800180c <setDCStop>:

// Sets TIM4 ARR so that it triggers for the next DC actuator pull
// Returns 0 if there is no next DC actuator pull
int setDCStop(int current_time){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	if(DCLeftStop >= note_dataL_len){
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <setDCStop+0xbc>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <setDCStop+0xc0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	db14      	blt.n	800184a <setDCStop+0x3e>
		if(DCRightStop >= note_dataR_len){
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <setDCStop+0xc4>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <setDCStop+0xc8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	db05      	blt.n	8001838 <setDCStop+0x2c>
			HAL_TIM_Base_Stop_IT(&htim4);
 800182c:	482a      	ldr	r0, [pc, #168]	; (80018d8 <setDCStop+0xcc>)
 800182e:	f008 faed 	bl	8009e0c <HAL_TIM_Base_Stop_IT>
			// return 0;
			return INT_MAX;
 8001832:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001836:	e042      	b.n	80018be <setDCStop+0xb2>
		}
		else{
			//TIM4->ARR = note_dataR_stop[DCRightStop][1] - current_time - 1;
			return note_dataR_stop[DCRightStop][1] - current_time ;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <setDCStop+0xc4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <setDCStop+0xd0>)
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	e039      	b.n	80018be <setDCStop+0xb2>
		}
	}
	else if(DCRightStop >= note_dataR_len){
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <setDCStop+0xc4>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <setDCStop+0xc8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	db14      	blt.n	8001880 <setDCStop+0x74>
		if(DCLeftStop >= note_dataL_len){
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <setDCStop+0xbc>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <setDCStop+0xc0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	db05      	blt.n	800186e <setDCStop+0x62>
			HAL_TIM_Base_Stop_IT(&htim4);
 8001862:	481d      	ldr	r0, [pc, #116]	; (80018d8 <setDCStop+0xcc>)
 8001864:	f008 fad2 	bl	8009e0c <HAL_TIM_Base_Stop_IT>
			//return 0;
			return INT_MAX;
 8001868:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800186c:	e027      	b.n	80018be <setDCStop+0xb2>
		}
		else{
			//TIM4->ARR = note_dataL_stop[DCLeftStop][1] - current_time - 1;
			return note_dataL_stop[DCLeftStop][1] - current_time;
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <setDCStop+0xbc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <setDCStop+0xd4>)
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	e01e      	b.n	80018be <setDCStop+0xb2>
		}
	}
	else if(note_dataL_stop[DCLeftStop][1] < note_dataR_stop[DCRightStop][1]){
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <setDCStop+0xbc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <setDCStop+0xd4>)
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <setDCStop+0xc4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4912      	ldr	r1, [pc, #72]	; (80018dc <setDCStop+0xd0>)
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	da08      	bge.n	80018ae <setDCStop+0xa2>
		//TIM4->ARR = note_dataL_stop[DCLeftStop][1] - current_time - 1;
		return note_dataL_stop[DCLeftStop][1] - current_time;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <setDCStop+0xbc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <setDCStop+0xd4>)
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4413      	add	r3, r2
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	e007      	b.n	80018be <setDCStop+0xb2>
	}
	else{
		//TIM4->ARR = note_dataR_stop[DCRightStop][1] - current_time - 1;
		return note_dataR_stop[DCRightStop][1] - current_time;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <setDCStop+0xc4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <setDCStop+0xd0>)
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	1ad3      	subs	r3, r2, r3
	}
	return 1;
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20008624 	.word	0x20008624
 80018cc:	20012270 	.word	0x20012270
 80018d0:	2000862c 	.word	0x2000862c
 80018d4:	2001beb4 	.word	0x2001beb4
 80018d8:	20000738 	.word	0x20000738
 80018dc:	2001beb8 	.word	0x2001beb8
 80018e0:	2001fd38 	.word	0x2001fd38

080018e4 <setNextAction>:

void setNextAction(int current_time){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	int nextLinAct = setNextLinActuatorTime(current_time);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fea5 	bl	800163c <setNextLinActuatorTime>
 80018f2:	6178      	str	r0, [r7, #20]
	int nextDCPush = setDCStart(current_time);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff05 	bl	8001704 <setDCStart>
 80018fa:	6138      	str	r0, [r7, #16]
	int nextDCPull = setDCStop(current_time);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff85 	bl	800180c <setDCStop>
 8001902:	60f8      	str	r0, [r7, #12]
	if(nextDCPull == INT_MAX){
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800190a:	4293      	cmp	r3, r2
 800190c:	d102      	bne.n	8001914 <setNextAction+0x30>
		HAL_TIM_Base_Stop_IT(&htim2);
 800190e:	483a      	ldr	r0, [pc, #232]	; (80019f8 <setNextAction+0x114>)
 8001910:	f008 fa7c 	bl	8009e0c <HAL_TIM_Base_Stop_IT>
	}
	if(nextDCPull == nextLinAct && nextDCPull <= nextDCPush){
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	d111      	bne.n	8001940 <setNextAction+0x5c>
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	dc0d      	bgt.n	8001940 <setNextAction+0x5c>
		nextMove = 2;
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <setNextAction+0x118>)
 8001926:	2202      	movs	r2, #2
 8001928:	601a      	str	r2, [r3, #0]
		if(nextDCPull == 0){
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <setNextAction+0x52>
			nextDCPull++;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3301      	adds	r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
		}
		TIM2->ARR = nextDCPull;
 8001936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800193e:	e057      	b.n	80019f0 <setNextAction+0x10c>
	}
	else if(nextLinAct <= nextDCPush && nextDCPull > nextLinAct){
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	dc11      	bgt.n	800196c <setNextAction+0x88>
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	dd0d      	ble.n	800196c <setNextAction+0x88>
		nextMove = 0;
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <setNextAction+0x118>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
		if(nextLinAct == 0){
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <setNextAction+0x7e>
			nextLinAct++;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
		}
		TIM2->ARR = nextLinAct;
 8001962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	62d3      	str	r3, [r2, #44]	; 0x2c
 800196a:	e041      	b.n	80019f0 <setNextAction+0x10c>
	}
	else{
		if(nextDCPull < nextDCPush && nextDCPull < nextLinAct){
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	da11      	bge.n	8001998 <setNextAction+0xb4>
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	429a      	cmp	r2, r3
 800197a:	da0d      	bge.n	8001998 <setNextAction+0xb4>
			nextMove = 2;
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <setNextAction+0x118>)
 800197e:	2202      	movs	r2, #2
 8001980:	601a      	str	r2, [r3, #0]
			if(nextDCPull == 0){
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <setNextAction+0xaa>
				nextDCPull++;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3301      	adds	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
			}
			TIM2->ARR = nextDCPull;
 800198e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001996:	e02b      	b.n	80019f0 <setNextAction+0x10c>
		}
		else if(nextLinAct < nextDCPush && nextLinAct < nextDCPull){
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	da11      	bge.n	80019c4 <setNextAction+0xe0>
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	da0d      	bge.n	80019c4 <setNextAction+0xe0>
			nextMove = 0;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <setNextAction+0x118>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
			if(nextLinAct == 0){
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <setNextAction+0xd6>
				nextLinAct++;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
			}
			TIM2->ARR = nextLinAct;
 80019ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019c2:	e015      	b.n	80019f0 <setNextAction+0x10c>
		}
		else if(nextDCPush < nextLinAct && nextDCPush < nextDCPull){
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	da11      	bge.n	80019f0 <setNextAction+0x10c>
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	da0d      	bge.n	80019f0 <setNextAction+0x10c>
			nextMove = 1;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <setNextAction+0x118>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
			if(nextDCPush == 0){
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <setNextAction+0x102>
				nextDCPush++;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	3301      	adds	r3, #1
 80019e4:	613b      	str	r3, [r7, #16]
			}
			TIM2->ARR = nextDCPush;
 80019e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
}
 80019ee:	e7ff      	b.n	80019f0 <setNextAction+0x10c>
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200006a0 	.word	0x200006a0
 80019fc:	20023bcc 	.word	0x20023bcc

08001a00 <HAL_TIM_PeriodElapsedCallback>:

int movements = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

	if (htim==&TGFX_T){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a94      	ldr	r2, [pc, #592]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d102      	bne.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x16>
	touchgfxSignalVSync();
 8001a10:	f010 f996 	bl	8011d40 <touchgfxSignalVSync>
	HAL_TIM_Base_Start_IT(&htim4);*/
	TIM2->CR1 |= TIM_CR1_CEN;
	//TIM3->CR1 |= TIM_CR1_CEN;
	//TIM4->CR1 |= TIM_CR1_CEN;
	}
}
 8001a14:	e34a      	b.n	80020ac <HAL_TIM_PeriodElapsedCallback+0x6ac>
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8001a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6013      	str	r3, [r2, #0]
	int current_time = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
	if(nextMove == 0){
 8001a2a:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 809e 	bne.w	8001b70 <HAL_TIM_PeriodElapsedCallback+0x170>
			if(actuatorL >= actuatorPosL_len){
 8001a34:	4b8b      	ldr	r3, [pc, #556]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	db14      	blt.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0x6a>
				moveActuatorRight(actuatorPosR[actuatorR][0]);
 8001a40:	4b8a      	ldr	r3, [pc, #552]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a8a      	ldr	r2, [pc, #552]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fb82 	bl	8002154 <moveActuatorRight>
				current_time = actuatorPosR[actuatorR][1];
 8001a50:	4b86      	ldr	r3, [pc, #536]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a86      	ldr	r2, [pc, #536]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
				actuatorR++;
 8001a5e:	4b83      	ldr	r3, [pc, #524]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a81      	ldr	r2, [pc, #516]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e315      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			else if(actuatorR >= actuatorPosR_len){
 8001a6a:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	db14      	blt.n	8001aa0 <HAL_TIM_PeriodElapsedCallback+0xa0>
				moveActuatorLeft(actuatorPosL[actuatorL][0]);
 8001a76:	4b7b      	ldr	r3, [pc, #492]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7f      	ldr	r2, [pc, #508]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fb23 	bl	80020cc <moveActuatorLeft>
				current_time = actuatorPosL[actuatorL][1];
 8001a86:	4b77      	ldr	r3, [pc, #476]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7b      	ldr	r2, [pc, #492]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	60fb      	str	r3, [r7, #12]
				actuatorL++;
 8001a94:	4b73      	ldr	r3, [pc, #460]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a72      	ldr	r2, [pc, #456]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e2fa      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			else if(actuatorPosL[actuatorL][1] == actuatorPosR[actuatorR][1]){
 8001aa0:	4b70      	ldr	r3, [pc, #448]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a74      	ldr	r2, [pc, #464]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	496f      	ldr	r1, [pc, #444]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d121      	bne.n	8001b00 <HAL_TIM_PeriodElapsedCallback+0x100>
				moveActuatorRight(actuatorPosR[actuatorR][0]);
 8001abc:	4b6b      	ldr	r3, [pc, #428]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6b      	ldr	r2, [pc, #428]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ac2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fb44 	bl	8002154 <moveActuatorRight>
				moveActuatorLeft(actuatorPosL[actuatorL][0]);
 8001acc:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a69      	ldr	r2, [pc, #420]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ad2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 faf8 	bl	80020cc <moveActuatorLeft>
				current_time = actuatorPosR[actuatorR][1];
 8001adc:	4b63      	ldr	r3, [pc, #396]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
				actuatorR++;
 8001aea:	4b60      	ldr	r3, [pc, #384]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4a5e      	ldr	r2, [pc, #376]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001af2:	6013      	str	r3, [r2, #0]
				actuatorL++;
 8001af4:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	4a5a      	ldr	r2, [pc, #360]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e2ca      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			else if(actuatorPosL[actuatorL][1] < actuatorPosR[actuatorR][1]){
 8001b00:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a5c      	ldr	r2, [pc, #368]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4b57      	ldr	r3, [pc, #348]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4957      	ldr	r1, [pc, #348]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	da14      	bge.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x146>
				moveActuatorLeft(actuatorPosL[actuatorL][0]);
 8001b1c:	4b51      	ldr	r3, [pc, #324]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a55      	ldr	r2, [pc, #340]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fad0 	bl	80020cc <moveActuatorLeft>
				current_time = actuatorPosL[actuatorL][1];
 8001b2c:	4b4d      	ldr	r3, [pc, #308]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a51      	ldr	r2, [pc, #324]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	60fb      	str	r3, [r7, #12]
				actuatorL++;
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a48      	ldr	r2, [pc, #288]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e2a7      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
				moveActuatorRight(actuatorPosR[actuatorR][0]);
 8001b46:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a49      	ldr	r2, [pc, #292]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 faff 	bl	8002154 <moveActuatorRight>
				current_time = actuatorPosR[actuatorR][1];
 8001b56:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a45      	ldr	r2, [pc, #276]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	60fb      	str	r3, [r7, #12]
				actuatorR++;
 8001b64:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a40      	ldr	r2, [pc, #256]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e292      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
	else if(nextMove == 1){
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	f040 8174 	bne.w	8001e62 <HAL_TIM_PeriodElapsedCallback+0x462>
		if(DCRightStart >= note_dataR_len){
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	db31      	blt.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x1ea>
			current_time = note_dataL[DCLeftStart][1];
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	493f      	ldr	r1, [pc, #252]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3304      	adds	r3, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60fb      	str	r3, [r7, #12]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001b9c:	e010      	b.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
				GPIO_Activation_Left(note_dataL[DCLeftStart][0]);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4939      	ldr	r1, [pc, #228]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fd4b 	bl	800264c <GPIO_Activation_Left>
				DCLeftStart++;
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bbe:	6013      	str	r3, [r2, #0]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4930      	ldr	r1, [pc, #192]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	f040 825d 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbda      	blt.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0x19e>
 8001be8:	e255      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(DCLeftStart >= note_dataL_len){
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	db4e      	blt.n	8001c94 <HAL_TIM_PeriodElapsedCallback+0x294>
			current_time = note_dataR[DCRightStart][1];
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4925      	ldr	r1, [pc, #148]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60fb      	str	r3, [r7, #12]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001c0c:	e010      	b.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x230>
				GPIO_Activation_Right(note_dataR[DCRightStart][0]);
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	491f      	ldr	r1, [pc, #124]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fbb5 	bl	8002390 <GPIO_Activation_Right>
				DCRightStart++;
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c2e:	6013      	str	r3, [r2, #0]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4916      	ldr	r1, [pc, #88]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3304      	adds	r3, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	f040 8225 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbda      	blt.n	8001c0e <HAL_TIM_PeriodElapsedCallback+0x20e>
 8001c58:	e21d      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001c5a:	bf00      	nop
 8001c5c:	20000738 	.word	0x20000738
 8001c60:	20023bcc 	.word	0x20023bcc
 8001c64:	20008618 	.word	0x20008618
 8001c68:	20004780 	.word	0x20004780
 8001c6c:	2000861c 	.word	0x2000861c
 8001c70:	20004784 	.word	0x20004784
 8001c74:	20008604 	.word	0x20008604
 8001c78:	20000900 	.word	0x20000900
 8001c7c:	20008628 	.word	0x20008628
 8001c80:	2001beb4 	.word	0x2001beb4
 8001c84:	20008620 	.word	0x20008620
 8001c88:	20008630 	.word	0x20008630
 8001c8c:	20012270 	.word	0x20012270
 8001c90:	20012274 	.word	0x20012274
		else if(note_dataR[DCRightStart][1] == note_dataL[DCLeftStart][1]){
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4992      	ldr	r1, [pc, #584]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	488f      	ldr	r0, [pc, #572]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4403      	add	r3, r0
 8001cb8:	3304      	adds	r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4299      	cmp	r1, r3
 8001cbe:	d156      	bne.n	8001d6e <HAL_TIM_PeriodElapsedCallback+0x36e>
			current_time = note_dataR[DCRightStart][1];
 8001cc0:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4987      	ldr	r1, [pc, #540]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001cd6:	e010      	b.n	8001cfa <HAL_TIM_PeriodElapsedCallback+0x2fa>
				GPIO_Activation_Right(note_dataR[DCRightStart][0]);
 8001cd8:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4981      	ldr	r1, [pc, #516]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fb50 	bl	8002390 <GPIO_Activation_Right>
				DCRightStart++;
 8001cf0:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	4a7a      	ldr	r2, [pc, #488]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cf8:	6013      	str	r3, [r2, #0]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001cfa:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4979      	ldr	r1, [pc, #484]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d117      	bne.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x344>
 8001d14:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b75      	ldr	r3, [pc, #468]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbdb      	blt.n	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x2d8>
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001d20:	e010      	b.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x344>
				GPIO_Activation_Left(note_dataL[DCLeftStart][0]);
 8001d22:	4b71      	ldr	r3, [pc, #452]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4971      	ldr	r1, [pc, #452]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fc89 	bl	800264c <GPIO_Activation_Left>
				DCLeftStart++;
 8001d3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	4a69      	ldr	r2, [pc, #420]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d42:	6013      	str	r3, [r2, #0]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001d44:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4968      	ldr	r1, [pc, #416]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3304      	adds	r3, #4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	f040 819b 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbda      	blt.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x322>
 8001d6c:	e193      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(note_dataR[DCRightStart][1] > note_dataL[DCLeftStart][1]){
 8001d6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	495c      	ldr	r1, [pc, #368]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3304      	adds	r3, #4
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4859      	ldr	r0, [pc, #356]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4403      	add	r3, r0
 8001d92:	3304      	adds	r3, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4299      	cmp	r1, r3
 8001d98:	dd31      	ble.n	8001dfe <HAL_TIM_PeriodElapsedCallback+0x3fe>
			current_time = note_dataL[DCLeftStart][1];
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4953      	ldr	r1, [pc, #332]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3304      	adds	r3, #4
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	60fb      	str	r3, [r7, #12]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001db0:	e010      	b.n	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x3d4>
				GPIO_Activation_Left(note_dataL[DCLeftStart][0]);
 8001db2:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	494d      	ldr	r1, [pc, #308]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fc41 	bl	800264c <GPIO_Activation_Left>
				DCLeftStart++;
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	4a45      	ldr	r2, [pc, #276]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001dd2:	6013      	str	r3, [r2, #0]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4944      	ldr	r1, [pc, #272]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3304      	adds	r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	f040 8153 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001df0:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbda      	blt.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x3b2>
 8001dfc:	e14b      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			current_time = note_dataR[DCRightStart][1];
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4938      	ldr	r1, [pc, #224]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3304      	adds	r3, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60fb      	str	r3, [r7, #12]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001e14:	e010      	b.n	8001e38 <HAL_TIM_PeriodElapsedCallback+0x438>
				GPIO_Activation_Right(note_dataR[DCRightStart][0]);
 8001e16:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4932      	ldr	r1, [pc, #200]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fab1 	bl	8002390 <GPIO_Activation_Right>
				DCRightStart++;
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e36:	6013      	str	r3, [r2, #0]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4929      	ldr	r1, [pc, #164]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3304      	adds	r3, #4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	f040 8121 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbda      	blt.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x416>
 8001e60:	e119      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
	else if(nextMove == 2){
 8001e62:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	f040 8115 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		if(DCRightStop >= note_dataR_len){
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	db25      	blt.n	8001ec4 <HAL_TIM_PeriodElapsedCallback+0x4c4>
			current_time = note_dataL_stop[DCLeftStop][1];
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8001e86:	e00c      	b.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x4a2>
				GPIO_Deactivation_Left(note_dataL_stop[DCLeftStop][0]);
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001e8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fe96 	bl	8002bc4 <GPIO_Deactivation_Left>
				DCLeftStop++;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ea0:	6013      	str	r3, [r2, #0]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 80f0 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dbe2      	blt.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0x488>
 8001ec2:	e0e8      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(DCLeftStop >= note_dataL_len){
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	db3b      	blt.n	8001f48 <HAL_TIM_PeriodElapsedCallback+0x548>
			current_time = note_dataR_stop[DCRightStop][1];
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8001ede:	e022      	b.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x526>
 8001ee0:	20008628 	.word	0x20008628
 8001ee4:	20012274 	.word	0x20012274
 8001ee8:	20008620 	.word	0x20008620
 8001eec:	20008630 	.word	0x20008630
 8001ef0:	2001beb4 	.word	0x2001beb4
 8001ef4:	20012270 	.word	0x20012270
 8001ef8:	20023bcc 	.word	0x20023bcc
 8001efc:	2000862c 	.word	0x2000862c
 8001f00:	20008624 	.word	0x20008624
 8001f04:	2001fd38 	.word	0x2001fd38
 8001f08:	2001beb8 	.word	0x2001beb8
				GPIO_Deactivation_Right(note_dataR_stop[DCRightStop][0]);
 8001f0c:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fcf6 	bl	8002908 <GPIO_Deactivation_Right>
				DCRightStop++;
 8001f1c:	4b65      	ldr	r3, [pc, #404]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3301      	adds	r3, #1
 8001f22:	4a64      	ldr	r2, [pc, #400]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f24:	6013      	str	r3, [r2, #0]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a63      	ldr	r2, [pc, #396]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 80ae 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001f3a:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dbe2      	blt.n	8001f0c <HAL_TIM_PeriodElapsedCallback+0x50c>
 8001f46:	e0a6      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(note_dataR_stop[DCRightStop][1] == note_dataL_stop[DCLeftStop][1]){
 8001f48:	4b5a      	ldr	r3, [pc, #360]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	495a      	ldr	r1, [pc, #360]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d141      	bne.n	8001fe8 <HAL_TIM_PeriodElapsedCallback+0x5e8>
			current_time = note_dataR_stop[DCRightStop][1];
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8001f72:	e00c      	b.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0x58e>
				GPIO_Deactivation_Right(note_dataR_stop[DCRightStop][0]);
 8001f74:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4f      	ldr	r2, [pc, #316]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fcc2 	bl	8002908 <GPIO_Deactivation_Right>
				DCRightStop++;
 8001f84:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f8c:	6013      	str	r3, [r2, #0]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a49      	ldr	r2, [pc, #292]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d113      	bne.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x5c8>
 8001fa0:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbe3      	blt.n	8001f74 <HAL_TIM_PeriodElapsedCallback+0x574>
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8001fac:	e00c      	b.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x5c8>
				GPIO_Deactivation_Left(note_dataL_stop[DCLeftStop][0]);
 8001fae:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a44      	ldr	r2, [pc, #272]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001fb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fe03 	bl	8002bc4 <GPIO_Deactivation_Left>
				DCLeftStop++;
 8001fbe:	4b40      	ldr	r3, [pc, #256]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4a3e      	ldr	r2, [pc, #248]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fc6:	6013      	str	r3, [r2, #0]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3d      	ldr	r2, [pc, #244]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d15d      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	dbe3      	blt.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x5ae>
 8001fe6:	e056      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(note_dataR_stop[DCRightStop][1] > note_dataL_stop[DCLeftStop][1]){
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a32      	ldr	r2, [pc, #200]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4b32      	ldr	r3, [pc, #200]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4932      	ldr	r1, [pc, #200]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	dd24      	ble.n	800204e <HAL_TIM_PeriodElapsedCallback+0x64e>
			current_time = note_dataL_stop[DCLeftStop][1];
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2e      	ldr	r2, [pc, #184]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8002012:	e00c      	b.n	800202e <HAL_TIM_PeriodElapsedCallback+0x62e>
				GPIO_Deactivation_Left(note_dataL_stop[DCLeftStop][0]);
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2a      	ldr	r2, [pc, #168]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 800201a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fdd0 	bl	8002bc4 <GPIO_Deactivation_Left>
				DCLeftStop++;
 8002024:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800202c:	6013      	str	r3, [r2, #0]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d12a      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbe3      	blt.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x614>
 800204c:	e023      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			current_time = note_dataR_stop[DCRightStop][1];
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a19      	ldr	r2, [pc, #100]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 800205c:	e00c      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x678>
				GPIO_Deactivation_Right(note_dataR_stop[DCRightStop][0]);
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8002064:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fc4d 	bl	8002908 <GPIO_Deactivation_Right>
				DCRightStop++;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8002076:	6013      	str	r3, [r2, #0]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	429a      	cmp	r2, r3
 8002088:	d105      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	dbe3      	blt.n	800205e <HAL_TIM_PeriodElapsedCallback+0x65e>
	setNextAction(current_time);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7ff fc24 	bl	80018e4 <setNextAction>
	TIM2->CR1 |= TIM_CR1_CEN;
 800209c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	2000862c 	.word	0x2000862c
 80020b8:	2001beb8 	.word	0x2001beb8
 80020bc:	2001beb4 	.word	0x2001beb4
 80020c0:	20008624 	.word	0x20008624
 80020c4:	2001fd38 	.word	0x2001fd38
 80020c8:	20012270 	.word	0x20012270

080020cc <moveActuatorLeft>:

    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
}*/

// Move the left linear actuator to the correct position for the current note number
void moveActuatorLeft(int note_num){
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	double d = numToDistLeft[abs((note_num - defaultLeft))];
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b2b      	subs	r3, #43	; 0x2b
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bfb8      	it	lt
 80020dc:	425b      	neglt	r3, r3
 80020de:	4a1b      	ldr	r2, [pc, #108]	; (800214c <moveActuatorLeft+0x80>)
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double delta_x = d - current_pos_left;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <moveActuatorLeft+0x84>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f6:	f7fe f8d7 	bl	80002a8 <__aeabi_dsub>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(delta_x > 0){
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800210e:	f7fe fd13 	bl	8000b38 <__aeabi_dcmpgt>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <moveActuatorLeft+0x5a>
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x, 1, 0);
 8002118:	2100      	movs	r1, #0
 800211a:	2001      	movs	r0, #1
 800211c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002120:	f000 f8c2 	bl	80022a8 <actuatorMoveDistLoop>
 8002124:	e009      	b.n	800213a <moveActuatorLeft+0x6e>
	}
	else{
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x * -1, 0, 0);
 8002126:	68bc      	ldr	r4, [r7, #8]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800212e:	2100      	movs	r1, #0
 8002130:	2000      	movs	r0, #0
 8002132:	ec45 4b10 	vmov	d0, r4, r5
 8002136:	f000 f8b7 	bl	80022a8 <actuatorMoveDistLoop>
	}

	current_pos_left = d;
 800213a:	4905      	ldr	r1, [pc, #20]	; (8002150 <moveActuatorLeft+0x84>)
 800213c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002140:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002144:	bf00      	nop
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	08028768 	.word	0x08028768
 8002150:	20023bb8 	.word	0x20023bb8

08002154 <moveActuatorRight>:

// Move the right linear actuator to the correct position for the current note number
void moveActuatorRight(int note_num){
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	double d = numToDistRight[note_num - defaultRight];
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b3c      	subs	r3, #60	; 0x3c
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <moveActuatorRight+0x7c>)
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double delta_x = d - current_pos_right;
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <moveActuatorRight+0x80>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002178:	f7fe f896 	bl	80002a8 <__aeabi_dsub>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(delta_x > 0){
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002190:	f7fe fcd2 	bl	8000b38 <__aeabi_dcmpgt>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <moveActuatorRight+0x54>
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x, 1, 1);
 800219a:	2101      	movs	r1, #1
 800219c:	2001      	movs	r0, #1
 800219e:	ed97 0b02 	vldr	d0, [r7, #8]
 80021a2:	f000 f881 	bl	80022a8 <actuatorMoveDistLoop>
 80021a6:	e009      	b.n	80021bc <moveActuatorRight+0x68>
		//moveActuatorDistRight(delta_x, 1);
	}
	else{
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x * -1, 0, 1);
 80021a8:	68bc      	ldr	r4, [r7, #8]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021b0:	2101      	movs	r1, #1
 80021b2:	2000      	movs	r0, #0
 80021b4:	ec45 4b10 	vmov	d0, r4, r5
 80021b8:	f000 f876 	bl	80022a8 <actuatorMoveDistLoop>
		//moveActuatorDistRight(delta_x * -1, 0);
	}

	current_pos_right = d;
 80021bc:	4905      	ldr	r1, [pc, #20]	; (80021d4 <moveActuatorRight+0x80>)
 80021be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021c2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bdb0      	pop	{r4, r5, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	080287a8 	.word	0x080287a8
 80021d4:	20023bc0 	.word	0x20023bc0

080021d8 <play_notes>:

void play_notes() {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	formGroups(note_dataR, note_dataR_len);
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <play_notes+0xa4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4827      	ldr	r0, [pc, #156]	; (8002280 <play_notes+0xa8>)
 80021e4:	f7fe fe58 	bl	8000e98 <formGroups>
	formGroups(note_dataL, note_dataL_len);
 80021e8:	4b26      	ldr	r3, [pc, #152]	; (8002284 <play_notes+0xac>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	4826      	ldr	r0, [pc, #152]	; (8002288 <play_notes+0xb0>)
 80021f0:	f7fe fe52 	bl	8000e98 <formGroups>

	actuatorPosR_len = assignActuatorPos(actuatorPosR, note_dataR, note_dataR_len, 0);
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <play_notes+0xa4>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	4921      	ldr	r1, [pc, #132]	; (8002280 <play_notes+0xa8>)
 80021fc:	4823      	ldr	r0, [pc, #140]	; (800228c <play_notes+0xb4>)
 80021fe:	f7ff f840 	bl	8001282 <assignActuatorPos>
 8002202:	4603      	mov	r3, r0
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <play_notes+0xb8>)
 8002206:	6013      	str	r3, [r2, #0]
	actuatorPosL_len = assignActuatorPos(actuatorPosL, note_dataL, note_dataL_len, 1);
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <play_notes+0xac>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	491e      	ldr	r1, [pc, #120]	; (8002288 <play_notes+0xb0>)
 8002210:	4820      	ldr	r0, [pc, #128]	; (8002294 <play_notes+0xbc>)
 8002212:	f7ff f836 	bl	8001282 <assignActuatorPos>
 8002216:	4603      	mov	r3, r0
 8002218:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <play_notes+0xc0>)
 800221a:	6013      	str	r3, [r2, #0]

	assignDCAct(actuatorPosR, actuatorPosR_len, note_dataR, note_dataR_len);
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <play_notes+0xb8>)
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <play_notes+0xa4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a16      	ldr	r2, [pc, #88]	; (8002280 <play_notes+0xa8>)
 8002226:	4819      	ldr	r0, [pc, #100]	; (800228c <play_notes+0xb4>)
 8002228:	f7ff f99c 	bl	8001564 <assignDCAct>
	assignDCAct(actuatorPosL, actuatorPosL_len, note_dataL, note_dataL_len);
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <play_notes+0xc0>)
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <play_notes+0xac>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <play_notes+0xb0>)
 8002236:	4817      	ldr	r0, [pc, #92]	; (8002294 <play_notes+0xbc>)
 8002238:	f7ff f994 	bl	8001564 <assignDCAct>
	splitStartStop(note_dataR, note_dataR_len, note_dataR_stop);
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <play_notes+0xa4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a16      	ldr	r2, [pc, #88]	; (800229c <play_notes+0xc4>)
 8002242:	4619      	mov	r1, r3
 8002244:	480e      	ldr	r0, [pc, #56]	; (8002280 <play_notes+0xa8>)
 8002246:	f7ff f902 	bl	800144e <splitStartStop>
	splitStartStop(note_dataL, note_dataL_len, note_dataL_stop);
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <play_notes+0xac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <play_notes+0xc8>)
 8002250:	4619      	mov	r1, r3
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <play_notes+0xb0>)
 8002254:	f7ff f8fb 	bl	800144e <splitStartStop>
	sortStop(note_dataR_stop, note_dataR_len);
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <play_notes+0xa4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	480f      	ldr	r0, [pc, #60]	; (800229c <play_notes+0xc4>)
 8002260:	f7ff f928 	bl	80014b4 <sortStop>
	sortStop(note_dataL_stop, note_dataL_len);
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <play_notes+0xac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <play_notes+0xc8>)
 800226c:	f7ff f922 	bl	80014b4 <sortStop>

	// *************************
	// THIS IS THE START SEQUENCE
	// *************************

	readyToPlay = 1;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <play_notes+0xcc>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2001beb4 	.word	0x2001beb4
 8002280:	20012274 	.word	0x20012274
 8002284:	20012270 	.word	0x20012270
 8002288:	20008630 	.word	0x20008630
 800228c:	20004784 	.word	0x20004784
 8002290:	20008604 	.word	0x20008604
 8002294:	20000900 	.word	0x20000900
 8002298:	20004780 	.word	0x20004780
 800229c:	2001beb8 	.word	0x2001beb8
 80022a0:	2001fd38 	.word	0x2001fd38
 80022a4:	20023bc8 	.word	0x20023bc8

080022a8 <actuatorMoveDistLoop>:

// hand = 0 is left, hand = 1 is right
void actuatorMoveDistLoop(double dist, int dir, int hand){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	ed87 0b02 	vstr	d0, [r7, #8]
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	int steps = (int) ((dist / inPerRot) * stepPerRot);
 80022b6:	a334      	add	r3, pc, #208	; (adr r3, 8002388 <actuatorMoveDistLoop+0xe0>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022c0:	f7fe fad4 	bl	800086c <__aeabi_ddiv>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	4b29      	ldr	r3, [pc, #164]	; (8002378 <actuatorMoveDistLoop+0xd0>)
 80022d2:	f7fe f9a1 	bl	8000618 <__aeabi_dmul>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fc35 	bl	8000b4c <__aeabi_d2iz>
 80022e2:	4603      	mov	r3, r0
 80022e4:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, dir);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	4823      	ldr	r0, [pc, #140]	; (800237c <actuatorMoveDistLoop+0xd4>)
 80022f0:	f004 f9c2 	bl	8006678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2101      	movs	r1, #1
 80022f8:	4821      	ldr	r0, [pc, #132]	; (8002380 <actuatorMoveDistLoop+0xd8>)
 80022fa:	f004 f9bd 	bl	8006678 <HAL_GPIO_WritePin>

	if(hand){
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <actuatorMoveDistLoop+0x6a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230a:	481c      	ldr	r0, [pc, #112]	; (800237c <actuatorMoveDistLoop+0xd4>)
 800230c:	f004 f9b4 	bl	8006678 <HAL_GPIO_WritePin>
 8002310:	e005      	b.n	800231e <actuatorMoveDistLoop+0x76>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002318:	481a      	ldr	r0, [pc, #104]	; (8002384 <actuatorMoveDistLoop+0xdc>)
 800231a:	f004 f9ad 	bl	8006678 <HAL_GPIO_WritePin>
	}

	if(steps){
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d019      	beq.n	8002358 <actuatorMoveDistLoop+0xb0>
		for(int i = 0; i < steps; i++){
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	e012      	b.n	8002350 <actuatorMoveDistLoop+0xa8>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 800232a:	2201      	movs	r2, #1
 800232c:	2101      	movs	r1, #1
 800232e:	4814      	ldr	r0, [pc, #80]	; (8002380 <actuatorMoveDistLoop+0xd8>)
 8002330:	f004 f9a2 	bl	8006678 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8002334:	2001      	movs	r0, #1
 8002336:	f003 fa59 	bl	80057ec <HAL_Delay>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2101      	movs	r1, #1
 800233e:	4810      	ldr	r0, [pc, #64]	; (8002380 <actuatorMoveDistLoop+0xd8>)
 8002340:	f004 f99a 	bl	8006678 <HAL_GPIO_WritePin>
			//********************************************
			// CHANGE SPEED BY CHANGING HAL_Delay BELOW
			//********************************************
			HAL_Delay(2);
 8002344:	2002      	movs	r0, #2
 8002346:	f003 fa51 	bl	80057ec <HAL_Delay>
		for(int i = 0; i < steps; i++){
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbe8      	blt.n	800232a <actuatorMoveDistLoop+0x82>
		}
	}

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235e:	4807      	ldr	r0, [pc, #28]	; (800237c <actuatorMoveDistLoop+0xd4>)
 8002360:	f004 f98a 	bl	8006678 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8002364:	2201      	movs	r2, #1
 8002366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <actuatorMoveDistLoop+0xdc>)
 800236c:	f004 f984 	bl	8006678 <HAL_GPIO_WritePin>
}
 8002370:	bf00      	nop
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40690000 	.word	0x40690000
 800237c:	48001400 	.word	0x48001400
 8002380:	48001800 	.word	0x48001800
 8002384:	48000800 	.word	0x48000800
 8002388:	0a3d70a4 	.word	0x0a3d70a4
 800238c:	4006a3d7 	.word	0x4006a3d7

08002390 <GPIO_Activation_Right>:
	HAL_Delay(200);
	HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &data_write3[0], 1, 1000);
	HAL_Delay(200);
}

void GPIO_Activation_Right(int note){
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af02      	add	r7, sp, #8
 8002396:	6078      	str	r0, [r7, #4]
     int note_num = note;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	627b      	str	r3, [r7, #36]	; 0x24

     uint8_t P01_ON[1] = {0x01};
 800239c:	2301      	movs	r3, #1
 800239e:	f887 3020 	strb.w	r3, [r7, #32]
     uint8_t P01_STOP[1] = {0x00};
 80023a2:	2300      	movs	r3, #0
 80023a4:	773b      	strb	r3, [r7, #28]

     uint8_t P23_ON[1] = {0x04};
 80023a6:	2304      	movs	r3, #4
 80023a8:	763b      	strb	r3, [r7, #24]
     uint8_t P23_STOP[1] = {0x00};
 80023aa:	2300      	movs	r3, #0
 80023ac:	753b      	strb	r3, [r7, #20]

     uint8_t P45_ON[1] = {0x10};
 80023ae:	2310      	movs	r3, #16
 80023b0:	743b      	strb	r3, [r7, #16]
     uint8_t P45_STOP[1] = {0x00};
 80023b2:	2300      	movs	r3, #0
 80023b4:	733b      	strb	r3, [r7, #12]

     if (note_num == 0){
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d117      	bne.n	80023ec <GPIO_Activation_Right+0x5c>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P01_ON[0], 1, 1000);
 80023bc:	f107 0220 	add.w	r2, r7, #32
 80023c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	2140      	movs	r1, #64	; 0x40
 80023ca:	489e      	ldr	r0, [pc, #632]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 80023cc:	f004 fa20 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80023d0:	20fa      	movs	r0, #250	; 0xfa
 80023d2:	f003 fa0b 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P01_STOP[0], 1, 1000);
 80023d6:	f107 021c 	add.w	r2, r7, #28
 80023da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2301      	movs	r3, #1
 80023e2:	2140      	movs	r1, #64	; 0x40
 80023e4:	4897      	ldr	r0, [pc, #604]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 80023e6:	f004 fa13 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_ON[0], 1, 1000);
         HAL_Delay(DCDelay);
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_STOP[0], 1, 1000);
     }

}
 80023ea:	e127      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 1){
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d117      	bne.n	8002422 <GPIO_Activation_Right+0x92>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P23_ON[0], 1, 1000);
 80023f2:	f107 0218 	add.w	r2, r7, #24
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2301      	movs	r3, #1
 80023fe:	2140      	movs	r1, #64	; 0x40
 8002400:	4890      	ldr	r0, [pc, #576]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 8002402:	f004 fa05 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002406:	20fa      	movs	r0, #250	; 0xfa
 8002408:	f003 f9f0 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P23_STOP[0], 1, 1000);
 800240c:	f107 0214 	add.w	r2, r7, #20
 8002410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	2140      	movs	r1, #64	; 0x40
 800241a:	488a      	ldr	r0, [pc, #552]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 800241c:	f004 f9f8 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002420:	e10c      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 2){
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2b02      	cmp	r3, #2
 8002426:	d117      	bne.n	8002458 <GPIO_Activation_Right+0xc8>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P45_ON[0], 1, 1000);
 8002428:	f107 0210 	add.w	r2, r7, #16
 800242c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2301      	movs	r3, #1
 8002434:	2140      	movs	r1, #64	; 0x40
 8002436:	4883      	ldr	r0, [pc, #524]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 8002438:	f004 f9ea 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800243c:	20fa      	movs	r0, #250	; 0xfa
 800243e:	f003 f9d5 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P45_STOP[0], 1, 1000);
 8002442:	f107 020c 	add.w	r2, r7, #12
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2301      	movs	r3, #1
 800244e:	2140      	movs	r1, #64	; 0x40
 8002450:	487c      	ldr	r0, [pc, #496]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 8002452:	f004 f9dd 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002456:	e0f1      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 3){
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	2b03      	cmp	r3, #3
 800245c:	d117      	bne.n	800248e <GPIO_Activation_Right+0xfe>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P01_ON[0], 1, 1000);
 800245e:	f107 0220 	add.w	r2, r7, #32
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	2142      	movs	r1, #66	; 0x42
 800246c:	4875      	ldr	r0, [pc, #468]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 800246e:	f004 f9cf 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002472:	20fa      	movs	r0, #250	; 0xfa
 8002474:	f003 f9ba 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002478:	f107 021c 	add.w	r2, r7, #28
 800247c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	2142      	movs	r1, #66	; 0x42
 8002486:	486f      	ldr	r0, [pc, #444]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 8002488:	f004 f9c2 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 800248c:	e0d6      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 4){
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	2b04      	cmp	r3, #4
 8002492:	d117      	bne.n	80024c4 <GPIO_Activation_Right+0x134>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P23_ON[0], 1, 1000);
 8002494:	f107 0218 	add.w	r2, r7, #24
 8002498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	2142      	movs	r1, #66	; 0x42
 80024a2:	4868      	ldr	r0, [pc, #416]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 80024a4:	f004 f9b4 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80024a8:	20fa      	movs	r0, #250	; 0xfa
 80024aa:	f003 f99f 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P23_STOP[0], 1, 1000);
 80024ae:	f107 0214 	add.w	r2, r7, #20
 80024b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2301      	movs	r3, #1
 80024ba:	2142      	movs	r1, #66	; 0x42
 80024bc:	4861      	ldr	r0, [pc, #388]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 80024be:	f004 f9a7 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 80024c2:	e0bb      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 5){
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d117      	bne.n	80024fa <GPIO_Activation_Right+0x16a>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P45_ON[0], 1, 1000);
 80024ca:	f107 0210 	add.w	r2, r7, #16
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2301      	movs	r3, #1
 80024d6:	2142      	movs	r1, #66	; 0x42
 80024d8:	485a      	ldr	r0, [pc, #360]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 80024da:	f004 f999 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80024de:	20fa      	movs	r0, #250	; 0xfa
 80024e0:	f003 f984 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P45_STOP[0], 1, 1000);
 80024e4:	f107 020c 	add.w	r2, r7, #12
 80024e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2301      	movs	r3, #1
 80024f0:	2142      	movs	r1, #66	; 0x42
 80024f2:	4854      	ldr	r0, [pc, #336]	; (8002644 <GPIO_Activation_Right+0x2b4>)
 80024f4:	f004 f98c 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 80024f8:	e0a0      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 6){
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	2b06      	cmp	r3, #6
 80024fe:	d117      	bne.n	8002530 <GPIO_Activation_Right+0x1a0>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P01_ON[0], 1, 1000);
 8002500:	f107 0220 	add.w	r2, r7, #32
 8002504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2301      	movs	r3, #1
 800250c:	2140      	movs	r1, #64	; 0x40
 800250e:	484e      	ldr	r0, [pc, #312]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 8002510:	f004 f97e 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002514:	20fa      	movs	r0, #250	; 0xfa
 8002516:	f003 f969 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P01_STOP[0], 1, 1000);
 800251a:	f107 021c 	add.w	r2, r7, #28
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2301      	movs	r3, #1
 8002526:	2140      	movs	r1, #64	; 0x40
 8002528:	4847      	ldr	r0, [pc, #284]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 800252a:	f004 f971 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 800252e:	e085      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 7){
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	2b07      	cmp	r3, #7
 8002534:	d117      	bne.n	8002566 <GPIO_Activation_Right+0x1d6>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P23_ON[0], 1, 1000);
 8002536:	f107 0218 	add.w	r2, r7, #24
 800253a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2301      	movs	r3, #1
 8002542:	2140      	movs	r1, #64	; 0x40
 8002544:	4840      	ldr	r0, [pc, #256]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 8002546:	f004 f963 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800254a:	20fa      	movs	r0, #250	; 0xfa
 800254c:	f003 f94e 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002550:	f107 0214 	add.w	r2, r7, #20
 8002554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2301      	movs	r3, #1
 800255c:	2140      	movs	r1, #64	; 0x40
 800255e:	483a      	ldr	r0, [pc, #232]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 8002560:	f004 f956 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002564:	e06a      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 8){
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	2b08      	cmp	r3, #8
 800256a:	d117      	bne.n	800259c <GPIO_Activation_Right+0x20c>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P45_ON[0], 1, 1000);
 800256c:	f107 0210 	add.w	r2, r7, #16
 8002570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2301      	movs	r3, #1
 8002578:	2140      	movs	r1, #64	; 0x40
 800257a:	4833      	ldr	r0, [pc, #204]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 800257c:	f004 f948 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002580:	20fa      	movs	r0, #250	; 0xfa
 8002582:	f003 f933 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P45_STOP[0], 1, 1000);
 8002586:	f107 020c 	add.w	r2, r7, #12
 800258a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2301      	movs	r3, #1
 8002592:	2140      	movs	r1, #64	; 0x40
 8002594:	482c      	ldr	r0, [pc, #176]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 8002596:	f004 f93b 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 800259a:	e04f      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 9){
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	2b09      	cmp	r3, #9
 80025a0:	d117      	bne.n	80025d2 <GPIO_Activation_Right+0x242>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P01_ON[0], 1, 1000);
 80025a2:	f107 0220 	add.w	r2, r7, #32
 80025a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2301      	movs	r3, #1
 80025ae:	2142      	movs	r1, #66	; 0x42
 80025b0:	4825      	ldr	r0, [pc, #148]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 80025b2:	f004 f92d 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80025b6:	20fa      	movs	r0, #250	; 0xfa
 80025b8:	f003 f918 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P01_STOP[0], 1, 1000);
 80025bc:	f107 021c 	add.w	r2, r7, #28
 80025c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	2142      	movs	r1, #66	; 0x42
 80025ca:	481f      	ldr	r0, [pc, #124]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 80025cc:	f004 f920 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 80025d0:	e034      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 10){
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	2b0a      	cmp	r3, #10
 80025d6:	d117      	bne.n	8002608 <GPIO_Activation_Right+0x278>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P23_ON[0], 1, 1000);
 80025d8:	f107 0218 	add.w	r2, r7, #24
 80025dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2301      	movs	r3, #1
 80025e4:	2142      	movs	r1, #66	; 0x42
 80025e6:	4818      	ldr	r0, [pc, #96]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 80025e8:	f004 f912 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80025ec:	20fa      	movs	r0, #250	; 0xfa
 80025ee:	f003 f8fd 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P23_STOP[0], 1, 1000);
 80025f2:	f107 0214 	add.w	r2, r7, #20
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	2142      	movs	r1, #66	; 0x42
 8002600:	4811      	ldr	r0, [pc, #68]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 8002602:	f004 f905 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002606:	e019      	b.n	800263c <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 11){
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	2b0b      	cmp	r3, #11
 800260c:	d116      	bne.n	800263c <GPIO_Activation_Right+0x2ac>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_ON[0], 1, 1000);
 800260e:	f107 0210 	add.w	r2, r7, #16
 8002612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2301      	movs	r3, #1
 800261a:	2142      	movs	r1, #66	; 0x42
 800261c:	480a      	ldr	r0, [pc, #40]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 800261e:	f004 f8f7 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002622:	20fa      	movs	r0, #250	; 0xfa
 8002624:	f003 f8e2 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002628:	f107 020c 	add.w	r2, r7, #12
 800262c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	2142      	movs	r1, #66	; 0x42
 8002636:	4804      	ldr	r0, [pc, #16]	; (8002648 <GPIO_Activation_Right+0x2b8>)
 8002638:	f004 f8ea 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 800263c:	bf00      	nop
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200003c8 	.word	0x200003c8
 8002648:	2000041c 	.word	0x2000041c

0800264c <GPIO_Activation_Left>:

void GPIO_Activation_Left(int note){
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af02      	add	r7, sp, #8
 8002652:	6078      	str	r0, [r7, #4]
     int note_num = note;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	627b      	str	r3, [r7, #36]	; 0x24

     uint8_t P01_ON[1] = {0x01};
 8002658:	2301      	movs	r3, #1
 800265a:	f887 3020 	strb.w	r3, [r7, #32]
     uint8_t P01_STOP[1] = {0x00};
 800265e:	2300      	movs	r3, #0
 8002660:	773b      	strb	r3, [r7, #28]

     uint8_t P23_ON[1] = {0x04};
 8002662:	2304      	movs	r3, #4
 8002664:	763b      	strb	r3, [r7, #24]
     uint8_t P23_STOP[1] = {0x00};
 8002666:	2300      	movs	r3, #0
 8002668:	753b      	strb	r3, [r7, #20]

     uint8_t P45_ON[1] = {0x10};
 800266a:	2310      	movs	r3, #16
 800266c:	743b      	strb	r3, [r7, #16]
     uint8_t P45_STOP[1] = {0x00};
 800266e:	2300      	movs	r3, #0
 8002670:	733b      	strb	r3, [r7, #12]

     if (note_num == 0){
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d117      	bne.n	80026a8 <GPIO_Activation_Left+0x5c>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P01_ON[0], 1, 1000);
 8002678:	f107 0220 	add.w	r2, r7, #32
 800267c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2301      	movs	r3, #1
 8002684:	2140      	movs	r1, #64	; 0x40
 8002686:	489e      	ldr	r0, [pc, #632]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 8002688:	f004 f8c2 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800268c:	20fa      	movs	r0, #250	; 0xfa
 800268e:	f003 f8ad 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P01_STOP[0], 1, 1000);
 8002692:	f107 021c 	add.w	r2, r7, #28
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	2140      	movs	r1, #64	; 0x40
 80026a0:	4897      	ldr	r0, [pc, #604]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 80026a2:	f004 f8b5 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_ON[0], 1, 1000);
         HAL_Delay(DCDelay);
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_STOP[0], 1, 1000);
     }

}
 80026a6:	e127      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 1){
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d117      	bne.n	80026de <GPIO_Activation_Left+0x92>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P23_ON[0], 1, 1000);
 80026ae:	f107 0218 	add.w	r2, r7, #24
 80026b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2301      	movs	r3, #1
 80026ba:	2140      	movs	r1, #64	; 0x40
 80026bc:	4890      	ldr	r0, [pc, #576]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 80026be:	f004 f8a7 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80026c2:	20fa      	movs	r0, #250	; 0xfa
 80026c4:	f003 f892 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P23_STOP[0], 1, 1000);
 80026c8:	f107 0214 	add.w	r2, r7, #20
 80026cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2301      	movs	r3, #1
 80026d4:	2140      	movs	r1, #64	; 0x40
 80026d6:	488a      	ldr	r0, [pc, #552]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 80026d8:	f004 f89a 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 80026dc:	e10c      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 2){
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d117      	bne.n	8002714 <GPIO_Activation_Left+0xc8>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P45_ON[0], 1, 1000);
 80026e4:	f107 0210 	add.w	r2, r7, #16
 80026e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2301      	movs	r3, #1
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	4883      	ldr	r0, [pc, #524]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 80026f4:	f004 f88c 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80026f8:	20fa      	movs	r0, #250	; 0xfa
 80026fa:	f003 f877 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P45_STOP[0], 1, 1000);
 80026fe:	f107 020c 	add.w	r2, r7, #12
 8002702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2301      	movs	r3, #1
 800270a:	2140      	movs	r1, #64	; 0x40
 800270c:	487c      	ldr	r0, [pc, #496]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 800270e:	f004 f87f 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002712:	e0f1      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 3){
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	2b03      	cmp	r3, #3
 8002718:	d117      	bne.n	800274a <GPIO_Activation_Left+0xfe>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P01_ON[0], 1, 1000);
 800271a:	f107 0220 	add.w	r2, r7, #32
 800271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	2142      	movs	r1, #66	; 0x42
 8002728:	4875      	ldr	r0, [pc, #468]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 800272a:	f004 f871 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800272e:	20fa      	movs	r0, #250	; 0xfa
 8002730:	f003 f85c 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002734:	f107 021c 	add.w	r2, r7, #28
 8002738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2301      	movs	r3, #1
 8002740:	2142      	movs	r1, #66	; 0x42
 8002742:	486f      	ldr	r0, [pc, #444]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 8002744:	f004 f864 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002748:	e0d6      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 4){
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	2b04      	cmp	r3, #4
 800274e:	d117      	bne.n	8002780 <GPIO_Activation_Left+0x134>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P23_ON[0], 1, 1000);
 8002750:	f107 0218 	add.w	r2, r7, #24
 8002754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2301      	movs	r3, #1
 800275c:	2142      	movs	r1, #66	; 0x42
 800275e:	4868      	ldr	r0, [pc, #416]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 8002760:	f004 f856 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002764:	20fa      	movs	r0, #250	; 0xfa
 8002766:	f003 f841 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P23_STOP[0], 1, 1000);
 800276a:	f107 0214 	add.w	r2, r7, #20
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2301      	movs	r3, #1
 8002776:	2142      	movs	r1, #66	; 0x42
 8002778:	4861      	ldr	r0, [pc, #388]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 800277a:	f004 f849 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 800277e:	e0bb      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 5){
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	2b05      	cmp	r3, #5
 8002784:	d117      	bne.n	80027b6 <GPIO_Activation_Left+0x16a>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P45_ON[0], 1, 1000);
 8002786:	f107 0210 	add.w	r2, r7, #16
 800278a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2301      	movs	r3, #1
 8002792:	2142      	movs	r1, #66	; 0x42
 8002794:	485a      	ldr	r0, [pc, #360]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 8002796:	f004 f83b 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800279a:	20fa      	movs	r0, #250	; 0xfa
 800279c:	f003 f826 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P45_STOP[0], 1, 1000);
 80027a0:	f107 020c 	add.w	r2, r7, #12
 80027a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2301      	movs	r3, #1
 80027ac:	2142      	movs	r1, #66	; 0x42
 80027ae:	4854      	ldr	r0, [pc, #336]	; (8002900 <GPIO_Activation_Left+0x2b4>)
 80027b0:	f004 f82e 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 80027b4:	e0a0      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 6){
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d117      	bne.n	80027ec <GPIO_Activation_Left+0x1a0>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P01_ON[0], 1, 1000);
 80027bc:	f107 0220 	add.w	r2, r7, #32
 80027c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	2140      	movs	r1, #64	; 0x40
 80027ca:	484e      	ldr	r0, [pc, #312]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 80027cc:	f004 f820 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80027d0:	20fa      	movs	r0, #250	; 0xfa
 80027d2:	f003 f80b 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P01_STOP[0], 1, 1000);
 80027d6:	f107 021c 	add.w	r2, r7, #28
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	2140      	movs	r1, #64	; 0x40
 80027e4:	4847      	ldr	r0, [pc, #284]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 80027e6:	f004 f813 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 80027ea:	e085      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 7){
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	2b07      	cmp	r3, #7
 80027f0:	d117      	bne.n	8002822 <GPIO_Activation_Left+0x1d6>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P23_ON[0], 1, 1000);
 80027f2:	f107 0218 	add.w	r2, r7, #24
 80027f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2301      	movs	r3, #1
 80027fe:	2140      	movs	r1, #64	; 0x40
 8002800:	4840      	ldr	r0, [pc, #256]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 8002802:	f004 f805 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002806:	20fa      	movs	r0, #250	; 0xfa
 8002808:	f002 fff0 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P23_STOP[0], 1, 1000);
 800280c:	f107 0214 	add.w	r2, r7, #20
 8002810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2301      	movs	r3, #1
 8002818:	2140      	movs	r1, #64	; 0x40
 800281a:	483a      	ldr	r0, [pc, #232]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 800281c:	f003 fff8 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002820:	e06a      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 8){
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	2b08      	cmp	r3, #8
 8002826:	d117      	bne.n	8002858 <GPIO_Activation_Left+0x20c>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P45_ON[0], 1, 1000);
 8002828:	f107 0210 	add.w	r2, r7, #16
 800282c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	2301      	movs	r3, #1
 8002834:	2140      	movs	r1, #64	; 0x40
 8002836:	4833      	ldr	r0, [pc, #204]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 8002838:	f003 ffea 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800283c:	20fa      	movs	r0, #250	; 0xfa
 800283e:	f002 ffd5 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P45_STOP[0], 1, 1000);
 8002842:	f107 020c 	add.w	r2, r7, #12
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2301      	movs	r3, #1
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	482c      	ldr	r0, [pc, #176]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 8002852:	f003 ffdd 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002856:	e04f      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 9){
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	2b09      	cmp	r3, #9
 800285c:	d117      	bne.n	800288e <GPIO_Activation_Left+0x242>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P01_ON[0], 1, 1000);
 800285e:	f107 0220 	add.w	r2, r7, #32
 8002862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2301      	movs	r3, #1
 800286a:	2142      	movs	r1, #66	; 0x42
 800286c:	4825      	ldr	r0, [pc, #148]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 800286e:	f003 ffcf 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002872:	20fa      	movs	r0, #250	; 0xfa
 8002874:	f002 ffba 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002878:	f107 021c 	add.w	r2, r7, #28
 800287c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2301      	movs	r3, #1
 8002884:	2142      	movs	r1, #66	; 0x42
 8002886:	481f      	ldr	r0, [pc, #124]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 8002888:	f003 ffc2 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 800288c:	e034      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 10){
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	2b0a      	cmp	r3, #10
 8002892:	d117      	bne.n	80028c4 <GPIO_Activation_Left+0x278>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P23_ON[0], 1, 1000);
 8002894:	f107 0218 	add.w	r2, r7, #24
 8002898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	2301      	movs	r3, #1
 80028a0:	2142      	movs	r1, #66	; 0x42
 80028a2:	4818      	ldr	r0, [pc, #96]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 80028a4:	f003 ffb4 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80028a8:	20fa      	movs	r0, #250	; 0xfa
 80028aa:	f002 ff9f 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P23_STOP[0], 1, 1000);
 80028ae:	f107 0214 	add.w	r2, r7, #20
 80028b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	2142      	movs	r1, #66	; 0x42
 80028bc:	4811      	ldr	r0, [pc, #68]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 80028be:	f003 ffa7 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 80028c2:	e019      	b.n	80028f8 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 11){
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	2b0b      	cmp	r3, #11
 80028c8:	d116      	bne.n	80028f8 <GPIO_Activation_Left+0x2ac>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_ON[0], 1, 1000);
 80028ca:	f107 0210 	add.w	r2, r7, #16
 80028ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2301      	movs	r3, #1
 80028d6:	2142      	movs	r1, #66	; 0x42
 80028d8:	480a      	ldr	r0, [pc, #40]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 80028da:	f003 ff99 	bl	8006810 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80028de:	20fa      	movs	r0, #250	; 0xfa
 80028e0:	f002 ff84 	bl	80057ec <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_STOP[0], 1, 1000);
 80028e4:	f107 020c 	add.w	r2, r7, #12
 80028e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2301      	movs	r3, #1
 80028f0:	2142      	movs	r1, #66	; 0x42
 80028f2:	4804      	ldr	r0, [pc, #16]	; (8002904 <GPIO_Activation_Left+0x2b8>)
 80028f4:	f003 ff8c 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000470 	.word	0x20000470
 8002904:	200004c4 	.word	0x200004c4

08002908 <GPIO_Deactivation_Right>:

void GPIO_Deactivation_Right(int note){
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af02      	add	r7, sp, #8
 800290e:	6078      	str	r0, [r7, #4]
     int note_num = note;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	627b      	str	r3, [r7, #36]	; 0x24

     uint8_t P01_OFF[1] = {0x02};
 8002914:	2302      	movs	r3, #2
 8002916:	f887 3020 	strb.w	r3, [r7, #32]
     uint8_t P01_STOP[1] = {0x00};
 800291a:	2300      	movs	r3, #0
 800291c:	773b      	strb	r3, [r7, #28]

     uint8_t P23_OFF[1] = {0x08};
 800291e:	2308      	movs	r3, #8
 8002920:	763b      	strb	r3, [r7, #24]
     uint8_t P23_STOP[1] = {0x00};
 8002922:	2300      	movs	r3, #0
 8002924:	753b      	strb	r3, [r7, #20]

     uint8_t P45_OFF[1] = {0x20};
 8002926:	2320      	movs	r3, #32
 8002928:	743b      	strb	r3, [r7, #16]
     uint8_t P45_STOP[1] = {0x00};
 800292a:	2300      	movs	r3, #0
 800292c:	733b      	strb	r3, [r7, #12]

     if (note_num == 0){
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	2b00      	cmp	r3, #0
 8002932:	d117      	bne.n	8002964 <GPIO_Deactivation_Right+0x5c>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P01_OFF[0], 1, 1000);
 8002934:	f107 0220 	add.w	r2, r7, #32
 8002938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2301      	movs	r3, #1
 8002940:	2140      	movs	r1, #64	; 0x40
 8002942:	489e      	ldr	r0, [pc, #632]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 8002944:	f003 ff64 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002948:	20fa      	movs	r0, #250	; 0xfa
 800294a:	f002 ff4f 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P01_STOP[0], 1, 1000);
 800294e:	f107 021c 	add.w	r2, r7, #28
 8002952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	4897      	ldr	r0, [pc, #604]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 800295e:	f003 ff57 	bl	8006810 <HAL_I2C_Master_Transmit>
          } else if (note_num == 11){
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_OFF[0], 1, 1000);
              HAL_Delay(DCDelay);
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_STOP[0], 1, 1000);
          }
}
 8002962:	e127      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 1){
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	2b01      	cmp	r3, #1
 8002968:	d117      	bne.n	800299a <GPIO_Deactivation_Right+0x92>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P23_OFF[0], 1, 1000);
 800296a:	f107 0218 	add.w	r2, r7, #24
 800296e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2301      	movs	r3, #1
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	4890      	ldr	r0, [pc, #576]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 800297a:	f003 ff49 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 800297e:	20fa      	movs	r0, #250	; 0xfa
 8002980:	f002 ff34 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002984:	f107 0214 	add.w	r2, r7, #20
 8002988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2301      	movs	r3, #1
 8002990:	2140      	movs	r1, #64	; 0x40
 8002992:	488a      	ldr	r0, [pc, #552]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 8002994:	f003 ff3c 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002998:	e10c      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 2){
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	2b02      	cmp	r3, #2
 800299e:	d117      	bne.n	80029d0 <GPIO_Deactivation_Right+0xc8>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P45_OFF[0], 1, 1000);
 80029a0:	f107 0210 	add.w	r2, r7, #16
 80029a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2301      	movs	r3, #1
 80029ac:	2140      	movs	r1, #64	; 0x40
 80029ae:	4883      	ldr	r0, [pc, #524]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 80029b0:	f003 ff2e 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 80029b4:	20fa      	movs	r0, #250	; 0xfa
 80029b6:	f002 ff19 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P45_STOP[0], 1, 1000);
 80029ba:	f107 020c 	add.w	r2, r7, #12
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	2140      	movs	r1, #64	; 0x40
 80029c8:	487c      	ldr	r0, [pc, #496]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 80029ca:	f003 ff21 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 80029ce:	e0f1      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 3){
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d117      	bne.n	8002a06 <GPIO_Deactivation_Right+0xfe>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P01_OFF[0], 1, 1000);
 80029d6:	f107 0220 	add.w	r2, r7, #32
 80029da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2301      	movs	r3, #1
 80029e2:	2142      	movs	r1, #66	; 0x42
 80029e4:	4875      	ldr	r0, [pc, #468]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 80029e6:	f003 ff13 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 80029ea:	20fa      	movs	r0, #250	; 0xfa
 80029ec:	f002 fefe 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P01_STOP[0], 1, 1000);
 80029f0:	f107 021c 	add.w	r2, r7, #28
 80029f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	2142      	movs	r1, #66	; 0x42
 80029fe:	486f      	ldr	r0, [pc, #444]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 8002a00:	f003 ff06 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002a04:	e0d6      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 4){
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d117      	bne.n	8002a3c <GPIO_Deactivation_Right+0x134>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P23_OFF[0], 1, 1000);
 8002a0c:	f107 0218 	add.w	r2, r7, #24
 8002a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2301      	movs	r3, #1
 8002a18:	2142      	movs	r1, #66	; 0x42
 8002a1a:	4868      	ldr	r0, [pc, #416]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 8002a1c:	f003 fef8 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002a20:	20fa      	movs	r0, #250	; 0xfa
 8002a22:	f002 fee3 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P23_STOP[0], 1, 1000);
 8002a26:	f107 0214 	add.w	r2, r7, #20
 8002a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	2142      	movs	r1, #66	; 0x42
 8002a34:	4861      	ldr	r0, [pc, #388]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 8002a36:	f003 feeb 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002a3a:	e0bb      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 5){
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d117      	bne.n	8002a72 <GPIO_Deactivation_Right+0x16a>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P45_OFF[0], 1, 1000);
 8002a42:	f107 0210 	add.w	r2, r7, #16
 8002a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	2142      	movs	r1, #66	; 0x42
 8002a50:	485a      	ldr	r0, [pc, #360]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 8002a52:	f003 fedd 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002a56:	20fa      	movs	r0, #250	; 0xfa
 8002a58:	f002 fec8 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002a5c:	f107 020c 	add.w	r2, r7, #12
 8002a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2301      	movs	r3, #1
 8002a68:	2142      	movs	r1, #66	; 0x42
 8002a6a:	4854      	ldr	r0, [pc, #336]	; (8002bbc <GPIO_Deactivation_Right+0x2b4>)
 8002a6c:	f003 fed0 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002a70:	e0a0      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 6){
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d117      	bne.n	8002aa8 <GPIO_Deactivation_Right+0x1a0>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P01_OFF[0], 1, 1000);
 8002a78:	f107 0220 	add.w	r2, r7, #32
 8002a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2301      	movs	r3, #1
 8002a84:	2140      	movs	r1, #64	; 0x40
 8002a86:	484e      	ldr	r0, [pc, #312]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002a88:	f003 fec2 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002a8c:	20fa      	movs	r0, #250	; 0xfa
 8002a8e:	f002 fead 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P01_STOP[0], 1, 1000);
 8002a92:	f107 021c 	add.w	r2, r7, #28
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	2140      	movs	r1, #64	; 0x40
 8002aa0:	4847      	ldr	r0, [pc, #284]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002aa2:	f003 feb5 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002aa6:	e085      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 7){
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	2b07      	cmp	r3, #7
 8002aac:	d117      	bne.n	8002ade <GPIO_Deactivation_Right+0x1d6>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P23_OFF[0], 1, 1000);
 8002aae:	f107 0218 	add.w	r2, r7, #24
 8002ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2140      	movs	r1, #64	; 0x40
 8002abc:	4840      	ldr	r0, [pc, #256]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002abe:	f003 fea7 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002ac2:	20fa      	movs	r0, #250	; 0xfa
 8002ac4:	f002 fe92 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002ac8:	f107 0214 	add.w	r2, r7, #20
 8002acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	2140      	movs	r1, #64	; 0x40
 8002ad6:	483a      	ldr	r0, [pc, #232]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002ad8:	f003 fe9a 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002adc:	e06a      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 8){
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d117      	bne.n	8002b14 <GPIO_Deactivation_Right+0x20c>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P45_OFF[0], 1, 1000);
 8002ae4:	f107 0210 	add.w	r2, r7, #16
 8002ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2301      	movs	r3, #1
 8002af0:	2140      	movs	r1, #64	; 0x40
 8002af2:	4833      	ldr	r0, [pc, #204]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002af4:	f003 fe8c 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002af8:	20fa      	movs	r0, #250	; 0xfa
 8002afa:	f002 fe77 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P45_STOP[0], 1, 1000);
 8002afe:	f107 020c 	add.w	r2, r7, #12
 8002b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	2140      	movs	r1, #64	; 0x40
 8002b0c:	482c      	ldr	r0, [pc, #176]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002b0e:	f003 fe7f 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002b12:	e04f      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 9){
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d117      	bne.n	8002b4a <GPIO_Deactivation_Right+0x242>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P01_OFF[0], 1, 1000);
 8002b1a:	f107 0220 	add.w	r2, r7, #32
 8002b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2301      	movs	r3, #1
 8002b26:	2142      	movs	r1, #66	; 0x42
 8002b28:	4825      	ldr	r0, [pc, #148]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002b2a:	f003 fe71 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002b2e:	20fa      	movs	r0, #250	; 0xfa
 8002b30:	f002 fe5c 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002b34:	f107 021c 	add.w	r2, r7, #28
 8002b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	2142      	movs	r1, #66	; 0x42
 8002b42:	481f      	ldr	r0, [pc, #124]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002b44:	f003 fe64 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002b48:	e034      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 10){
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	2b0a      	cmp	r3, #10
 8002b4e:	d117      	bne.n	8002b80 <GPIO_Deactivation_Right+0x278>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P23_OFF[0], 1, 1000);
 8002b50:	f107 0218 	add.w	r2, r7, #24
 8002b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	2142      	movs	r1, #66	; 0x42
 8002b5e:	4818      	ldr	r0, [pc, #96]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002b60:	f003 fe56 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002b64:	20fa      	movs	r0, #250	; 0xfa
 8002b66:	f002 fe41 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P23_STOP[0], 1, 1000);
 8002b6a:	f107 0214 	add.w	r2, r7, #20
 8002b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2301      	movs	r3, #1
 8002b76:	2142      	movs	r1, #66	; 0x42
 8002b78:	4811      	ldr	r0, [pc, #68]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002b7a:	f003 fe49 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002b7e:	e019      	b.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 11){
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	2b0b      	cmp	r3, #11
 8002b84:	d116      	bne.n	8002bb4 <GPIO_Deactivation_Right+0x2ac>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_OFF[0], 1, 1000);
 8002b86:	f107 0210 	add.w	r2, r7, #16
 8002b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2301      	movs	r3, #1
 8002b92:	2142      	movs	r1, #66	; 0x42
 8002b94:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002b96:	f003 fe3b 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002b9a:	20fa      	movs	r0, #250	; 0xfa
 8002b9c:	f002 fe26 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002ba0:	f107 020c 	add.w	r2, r7, #12
 8002ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2301      	movs	r3, #1
 8002bac:	2142      	movs	r1, #66	; 0x42
 8002bae:	4804      	ldr	r0, [pc, #16]	; (8002bc0 <GPIO_Deactivation_Right+0x2b8>)
 8002bb0:	f003 fe2e 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002bb4:	bf00      	nop
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200003c8 	.word	0x200003c8
 8002bc0:	2000041c 	.word	0x2000041c

08002bc4 <GPIO_Deactivation_Left>:

void GPIO_Deactivation_Left(int note){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08c      	sub	sp, #48	; 0x30
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	6078      	str	r0, [r7, #4]
     int note_num = note;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24

     uint8_t P01_OFF[1] = {0x02};
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f887 3020 	strb.w	r3, [r7, #32]
     uint8_t P01_STOP[1] = {0x00};
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	773b      	strb	r3, [r7, #28]

     uint8_t P23_OFF[1] = {0x08};
 8002bda:	2308      	movs	r3, #8
 8002bdc:	763b      	strb	r3, [r7, #24]
     uint8_t P23_STOP[1] = {0x00};
 8002bde:	2300      	movs	r3, #0
 8002be0:	753b      	strb	r3, [r7, #20]

     uint8_t P45_OFF[1] = {0x20};
 8002be2:	2320      	movs	r3, #32
 8002be4:	743b      	strb	r3, [r7, #16]
     uint8_t P45_STOP[1] = {0x00};
 8002be6:	2300      	movs	r3, #0
 8002be8:	733b      	strb	r3, [r7, #12]

     if (note_num == 0){
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d117      	bne.n	8002c20 <GPIO_Deactivation_Left+0x5c>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P01_OFF[0], 1, 1000);
 8002bf0:	f107 0220 	add.w	r2, r7, #32
 8002bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	2140      	movs	r1, #64	; 0x40
 8002bfe:	489e      	ldr	r0, [pc, #632]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002c00:	f003 fe06 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002c04:	20fa      	movs	r0, #250	; 0xfa
 8002c06:	f002 fdf1 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P01_STOP[0], 1, 1000);
 8002c0a:	f107 021c 	add.w	r2, r7, #28
 8002c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2301      	movs	r3, #1
 8002c16:	2140      	movs	r1, #64	; 0x40
 8002c18:	4897      	ldr	r0, [pc, #604]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002c1a:	f003 fdf9 	bl	8006810 <HAL_I2C_Master_Transmit>
          } else if (note_num == 11){
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_OFF[0], 1, 1000);
              HAL_Delay(DCDelay);
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_STOP[0], 1, 1000);
          }
}
 8002c1e:	e127      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 1){
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d117      	bne.n	8002c56 <GPIO_Deactivation_Left+0x92>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P23_OFF[0], 1, 1000);
 8002c26:	f107 0218 	add.w	r2, r7, #24
 8002c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	2140      	movs	r1, #64	; 0x40
 8002c34:	4890      	ldr	r0, [pc, #576]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002c36:	f003 fdeb 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002c3a:	20fa      	movs	r0, #250	; 0xfa
 8002c3c:	f002 fdd6 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002c40:	f107 0214 	add.w	r2, r7, #20
 8002c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	2140      	movs	r1, #64	; 0x40
 8002c4e:	488a      	ldr	r0, [pc, #552]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002c50:	f003 fdde 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002c54:	e10c      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 2){
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d117      	bne.n	8002c8c <GPIO_Deactivation_Left+0xc8>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P45_OFF[0], 1, 1000);
 8002c5c:	f107 0210 	add.w	r2, r7, #16
 8002c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2301      	movs	r3, #1
 8002c68:	2140      	movs	r1, #64	; 0x40
 8002c6a:	4883      	ldr	r0, [pc, #524]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002c6c:	f003 fdd0 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002c70:	20fa      	movs	r0, #250	; 0xfa
 8002c72:	f002 fdbb 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P45_STOP[0], 1, 1000);
 8002c76:	f107 020c 	add.w	r2, r7, #12
 8002c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2301      	movs	r3, #1
 8002c82:	2140      	movs	r1, #64	; 0x40
 8002c84:	487c      	ldr	r0, [pc, #496]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002c86:	f003 fdc3 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002c8a:	e0f1      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 3){
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d117      	bne.n	8002cc2 <GPIO_Deactivation_Left+0xfe>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P01_OFF[0], 1, 1000);
 8002c92:	f107 0220 	add.w	r2, r7, #32
 8002c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	2142      	movs	r1, #66	; 0x42
 8002ca0:	4875      	ldr	r0, [pc, #468]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002ca2:	f003 fdb5 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002ca6:	20fa      	movs	r0, #250	; 0xfa
 8002ca8:	f002 fda0 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002cac:	f107 021c 	add.w	r2, r7, #28
 8002cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	2142      	movs	r1, #66	; 0x42
 8002cba:	486f      	ldr	r0, [pc, #444]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002cbc:	f003 fda8 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002cc0:	e0d6      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 4){
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d117      	bne.n	8002cf8 <GPIO_Deactivation_Left+0x134>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P23_OFF[0], 1, 1000);
 8002cc8:	f107 0218 	add.w	r2, r7, #24
 8002ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	2142      	movs	r1, #66	; 0x42
 8002cd6:	4868      	ldr	r0, [pc, #416]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002cd8:	f003 fd9a 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002cdc:	20fa      	movs	r0, #250	; 0xfa
 8002cde:	f002 fd85 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P23_STOP[0], 1, 1000);
 8002ce2:	f107 0214 	add.w	r2, r7, #20
 8002ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2301      	movs	r3, #1
 8002cee:	2142      	movs	r1, #66	; 0x42
 8002cf0:	4861      	ldr	r0, [pc, #388]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002cf2:	f003 fd8d 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002cf6:	e0bb      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 5){
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d117      	bne.n	8002d2e <GPIO_Deactivation_Left+0x16a>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P45_OFF[0], 1, 1000);
 8002cfe:	f107 0210 	add.w	r2, r7, #16
 8002d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2301      	movs	r3, #1
 8002d0a:	2142      	movs	r1, #66	; 0x42
 8002d0c:	485a      	ldr	r0, [pc, #360]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002d0e:	f003 fd7f 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002d12:	20fa      	movs	r0, #250	; 0xfa
 8002d14:	f002 fd6a 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002d18:	f107 020c 	add.w	r2, r7, #12
 8002d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2301      	movs	r3, #1
 8002d24:	2142      	movs	r1, #66	; 0x42
 8002d26:	4854      	ldr	r0, [pc, #336]	; (8002e78 <GPIO_Deactivation_Left+0x2b4>)
 8002d28:	f003 fd72 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002d2c:	e0a0      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 6){
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	2b06      	cmp	r3, #6
 8002d32:	d117      	bne.n	8002d64 <GPIO_Deactivation_Left+0x1a0>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P01_OFF[0], 1, 1000);
 8002d34:	f107 0220 	add.w	r2, r7, #32
 8002d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2301      	movs	r3, #1
 8002d40:	2140      	movs	r1, #64	; 0x40
 8002d42:	484e      	ldr	r0, [pc, #312]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002d44:	f003 fd64 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002d48:	20fa      	movs	r0, #250	; 0xfa
 8002d4a:	f002 fd4f 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P01_STOP[0], 1, 1000);
 8002d4e:	f107 021c 	add.w	r2, r7, #28
 8002d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2301      	movs	r3, #1
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	4847      	ldr	r0, [pc, #284]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002d5e:	f003 fd57 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002d62:	e085      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 7){
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	2b07      	cmp	r3, #7
 8002d68:	d117      	bne.n	8002d9a <GPIO_Deactivation_Left+0x1d6>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P23_OFF[0], 1, 1000);
 8002d6a:	f107 0218 	add.w	r2, r7, #24
 8002d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2301      	movs	r3, #1
 8002d76:	2140      	movs	r1, #64	; 0x40
 8002d78:	4840      	ldr	r0, [pc, #256]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002d7a:	f003 fd49 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002d7e:	20fa      	movs	r0, #250	; 0xfa
 8002d80:	f002 fd34 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002d84:	f107 0214 	add.w	r2, r7, #20
 8002d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	2301      	movs	r3, #1
 8002d90:	2140      	movs	r1, #64	; 0x40
 8002d92:	483a      	ldr	r0, [pc, #232]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002d94:	f003 fd3c 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002d98:	e06a      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 8){
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d117      	bne.n	8002dd0 <GPIO_Deactivation_Left+0x20c>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P45_OFF[0], 1, 1000);
 8002da0:	f107 0210 	add.w	r2, r7, #16
 8002da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2301      	movs	r3, #1
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	4833      	ldr	r0, [pc, #204]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002db0:	f003 fd2e 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002db4:	20fa      	movs	r0, #250	; 0xfa
 8002db6:	f002 fd19 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P45_STOP[0], 1, 1000);
 8002dba:	f107 020c 	add.w	r2, r7, #12
 8002dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	2140      	movs	r1, #64	; 0x40
 8002dc8:	482c      	ldr	r0, [pc, #176]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002dca:	f003 fd21 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002dce:	e04f      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 9){
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	2b09      	cmp	r3, #9
 8002dd4:	d117      	bne.n	8002e06 <GPIO_Deactivation_Left+0x242>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P01_OFF[0], 1, 1000);
 8002dd6:	f107 0220 	add.w	r2, r7, #32
 8002dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2301      	movs	r3, #1
 8002de2:	2142      	movs	r1, #66	; 0x42
 8002de4:	4825      	ldr	r0, [pc, #148]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002de6:	f003 fd13 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002dea:	20fa      	movs	r0, #250	; 0xfa
 8002dec:	f002 fcfe 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002df0:	f107 021c 	add.w	r2, r7, #28
 8002df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	2142      	movs	r1, #66	; 0x42
 8002dfe:	481f      	ldr	r0, [pc, #124]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002e00:	f003 fd06 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002e04:	e034      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 10){
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	2b0a      	cmp	r3, #10
 8002e0a:	d117      	bne.n	8002e3c <GPIO_Deactivation_Left+0x278>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P23_OFF[0], 1, 1000);
 8002e0c:	f107 0218 	add.w	r2, r7, #24
 8002e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2301      	movs	r3, #1
 8002e18:	2142      	movs	r1, #66	; 0x42
 8002e1a:	4818      	ldr	r0, [pc, #96]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002e1c:	f003 fcf8 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002e20:	20fa      	movs	r0, #250	; 0xfa
 8002e22:	f002 fce3 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P23_STOP[0], 1, 1000);
 8002e26:	f107 0214 	add.w	r2, r7, #20
 8002e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2301      	movs	r3, #1
 8002e32:	2142      	movs	r1, #66	; 0x42
 8002e34:	4811      	ldr	r0, [pc, #68]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002e36:	f003 fceb 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002e3a:	e019      	b.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 11){
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	2b0b      	cmp	r3, #11
 8002e40:	d116      	bne.n	8002e70 <GPIO_Deactivation_Left+0x2ac>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_OFF[0], 1, 1000);
 8002e42:	f107 0210 	add.w	r2, r7, #16
 8002e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	2142      	movs	r1, #66	; 0x42
 8002e50:	480a      	ldr	r0, [pc, #40]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002e52:	f003 fcdd 	bl	8006810 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002e56:	20fa      	movs	r0, #250	; 0xfa
 8002e58:	f002 fcc8 	bl	80057ec <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002e5c:	f107 020c 	add.w	r2, r7, #12
 8002e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2301      	movs	r3, #1
 8002e68:	2142      	movs	r1, #66	; 0x42
 8002e6a:	4804      	ldr	r0, [pc, #16]	; (8002e7c <GPIO_Deactivation_Left+0x2b8>)
 8002e6c:	f003 fcd0 	bl	8006810 <HAL_I2C_Master_Transmit>
}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000470 	.word	0x20000470
 8002e7c:	200004c4 	.word	0x200004c4

08002e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e86:	f002 fc3c 	bl	8005702 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e8a:	f000 f955 	bl	8003138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e8e:	f000 fd5f 	bl	8003950 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e92:	f000 fd2b 	bl	80038ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002e96:	f000 fc91 	bl	80037bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002e9a:	f000 fcdb 	bl	8003854 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002e9e:	f000 fc33 	bl	8003708 <MX_TIM5_Init>
  MX_TIM2_Init();
 8002ea2:	f000 fb39 	bl	8003518 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ea6:	f000 fb85 	bl	80035b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002eaa:	f000 fbdd 	bl	8003668 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002eae:	f000 f9b7 	bl	8003220 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002eb2:	f000 f9f5 	bl	80032a0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002eb6:	f000 fa33 	bl	8003320 <MX_I2C3_Init>
  MX_I2C4_Init();
 8002eba:	f000 fa71 	bl	80033a0 <MX_I2C4_Init>
  MX_SPI1_Init();
 8002ebe:	f000 faaf 	bl	8003420 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002ec2:	f000 faeb 	bl	800349c <MX_SPI2_Init>
  MX_CRC_Init();
 8002ec6:	f000 f989 	bl	80031dc <MX_CRC_Init>
  MX_TouchGFX_Init();
 8002eca:	f00a fc1b 	bl	800d704 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  Displ_Init(Displ_Orientat_270);		// initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002ece:	2003      	movs	r0, #3
 8002ed0:	f001 fff0 	bl	8004eb4 <Displ_Init>
   touchgfxSignalVSync();		// asks TouchGFX to start initial display drawing
 8002ed4:	f00e ff34 	bl	8011d40 <touchgfxSignalVSync>
   Displ_BackLight('I');  			// initialize backlight and turn it on at init level
 8002ed8:	2049      	movs	r0, #73	; 0x49
 8002eda:	f002 f8ad 	bl	8005038 <Displ_BackLight>

  //********************************************************
  // Might need to move this to where ever we start the song
  //********************************************************

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002ede:	210c      	movs	r1, #12
 8002ee0:	487e      	ldr	r0, [pc, #504]	; (80030dc <main+0x25c>)
 8002ee2:	f007 f819 	bl	8009f18 <HAL_TIM_PWM_Start>
  TIM5->CCR4 = 25;
 8002ee6:	4b7e      	ldr	r3, [pc, #504]	; (80030e0 <main+0x260>)
 8002ee8:	2219      	movs	r2, #25
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_UART_Receive_IT(&huart3, RX_Buffer, sizeof(RX_Buffer));
 8002eec:	2205      	movs	r2, #5
 8002eee:	497d      	ldr	r1, [pc, #500]	; (80030e4 <main+0x264>)
 8002ef0:	487d      	ldr	r0, [pc, #500]	; (80030e8 <main+0x268>)
 8002ef2:	f008 f9d9 	bl	800b2a8 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart3, TX_Buffer, sizeof(TX_Buffer));
 8002ef6:	220e      	movs	r2, #14
 8002ef8:	497c      	ldr	r1, [pc, #496]	; (80030ec <main+0x26c>)
 8002efa:	487b      	ldr	r0, [pc, #492]	; (80030e8 <main+0x268>)
 8002efc:	f008 f940 	bl	800b180 <HAL_UART_Transmit_IT>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8002f00:	2201      	movs	r2, #1
 8002f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f06:	487a      	ldr	r0, [pc, #488]	; (80030f0 <main+0x270>)
 8002f08:	f003 fbb6 	bl	8006678 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   int pressed = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
   int start = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
   int playingSong = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
   int prevTouch = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
   int currentTouch = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	607b      	str	r3, [r7, #4]


  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8002f20:	2201      	movs	r2, #1
 8002f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f26:	4872      	ldr	r0, [pc, #456]	; (80030f0 <main+0x270>)
 8002f28:	f003 fba6 	bl	8006678 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f32:	4870      	ldr	r0, [pc, #448]	; (80030f4 <main+0x274>)
 8002f34:	f003 fba0 	bl	8006678 <HAL_GPIO_WritePin>
  while (1)
  {
	  if(start){
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <main+0xc2>
			  touchgfxSignalVSync();
 8002f3e:	f00e feff 	bl	8011d40 <touchgfxSignalVSync>
		  }
	  	  currentTouch = Touch_In_XY_area(120,  140,138,50);
 8002f42:	2332      	movs	r3, #50	; 0x32
 8002f44:	228a      	movs	r2, #138	; 0x8a
 8002f46:	218c      	movs	r1, #140	; 0x8c
 8002f48:	2078      	movs	r0, #120	; 0x78
 8002f4a:	f002 fabb 	bl	80054c4 <Touch_In_XY_area>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	607b      	str	r3, [r7, #4]
		  if(currentTouch && !prevTouch){
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80bc 	beq.w	80030d2 <main+0x252>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f040 80b8 	bne.w	80030d2 <main+0x252>
			  pressed = !pressed;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	617b      	str	r3, [r7, #20]
			  if(start == 1){
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	f040 80ab 	bne.w	80030ce <main+0x24e>
		  	  touchgfxSignalVSync();		// asks TouchGFX to handle touch and redraw screen
 8002f78:	f00e fee2 	bl	8011d40 <touchgfxSignalVSync>
		  	  if(playingSong == 0 && readyToPlay){
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d11c      	bne.n	8002fbc <main+0x13c>
 8002f82:	4b5d      	ldr	r3, [pc, #372]	; (80030f8 <main+0x278>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d018      	beq.n	8002fbc <main+0x13c>
		  	    setNextAction(0);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fe fcaa 	bl	80018e4 <setNextAction>
		  		TIM2->DIER = 0;
 8002f90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f94:	2200      	movs	r2, #0
 8002f96:	60da      	str	r2, [r3, #12]
		  		TIM2->SR = 0;
 8002f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	611a      	str	r2, [r3, #16]
		  		TIM2->EGR = 0;
 8002fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	615a      	str	r2, [r3, #20]
		  		TIM2->CNT = 0;
 8002fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fac:	2200      	movs	r2, #0
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24
		  		HAL_TIM_Base_Start_IT(&htim2);
 8002fb0:	4852      	ldr	r0, [pc, #328]	; (80030fc <main+0x27c>)
 8002fb2:	f006 febb 	bl	8009d2c <HAL_TIM_Base_Start_IT>
		  		playingSong = 1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e088      	b.n	80030ce <main+0x24e>
		  	  }
		  	  else if(playingSong == 1){
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	f040 8085 	bne.w	80030ce <main+0x24e>
		  		  HAL_TIM_Base_Stop_IT(&htim2);
 8002fc4:	484d      	ldr	r0, [pc, #308]	; (80030fc <main+0x27c>)
 8002fc6:	f006 ff21 	bl	8009e0c <HAL_TIM_Base_Stop_IT>
		  		GPIO_Deactivation_Right(0);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7ff fc9c 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(1);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7ff fc99 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(2);
 8002fd6:	2002      	movs	r0, #2
 8002fd8:	f7ff fc96 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(3);
 8002fdc:	2003      	movs	r0, #3
 8002fde:	f7ff fc93 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(4);
 8002fe2:	2004      	movs	r0, #4
 8002fe4:	f7ff fc90 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(5);
 8002fe8:	2005      	movs	r0, #5
 8002fea:	f7ff fc8d 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(6);
 8002fee:	2006      	movs	r0, #6
 8002ff0:	f7ff fc8a 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(7);
 8002ff4:	2007      	movs	r0, #7
 8002ff6:	f7ff fc87 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(8);
 8002ffa:	2008      	movs	r0, #8
 8002ffc:	f7ff fc84 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(9);
 8003000:	2009      	movs	r0, #9
 8003002:	f7ff fc81 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(10);
 8003006:	200a      	movs	r0, #10
 8003008:	f7ff fc7e 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Right(11);
 800300c:	200b      	movs	r0, #11
 800300e:	f7ff fc7b 	bl	8002908 <GPIO_Deactivation_Right>
		  		GPIO_Deactivation_Left(0);
 8003012:	2000      	movs	r0, #0
 8003014:	f7ff fdd6 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(1);
 8003018:	2001      	movs	r0, #1
 800301a:	f7ff fdd3 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(2);
 800301e:	2002      	movs	r0, #2
 8003020:	f7ff fdd0 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(3);
 8003024:	2003      	movs	r0, #3
 8003026:	f7ff fdcd 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(4);
 800302a:	2004      	movs	r0, #4
 800302c:	f7ff fdca 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(5);
 8003030:	2005      	movs	r0, #5
 8003032:	f7ff fdc7 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(6);
 8003036:	2006      	movs	r0, #6
 8003038:	f7ff fdc4 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(7);
 800303c:	2007      	movs	r0, #7
 800303e:	f7ff fdc1 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(8);
 8003042:	2008      	movs	r0, #8
 8003044:	f7ff fdbe 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(9);
 8003048:	2009      	movs	r0, #9
 800304a:	f7ff fdbb 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(10);
 800304e:	200a      	movs	r0, #10
 8003050:	f7ff fdb8 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		GPIO_Deactivation_Left(11);
 8003054:	200b      	movs	r0, #11
 8003056:	f7ff fdb5 	bl	8002bc4 <GPIO_Deactivation_Left>
		  		  moveActuatorRight(defaultRight);
 800305a:	203c      	movs	r0, #60	; 0x3c
 800305c:	f7ff f87a 	bl	8002154 <moveActuatorRight>
		  		  moveActuatorLeft(defaultLeft);
 8003060:	202b      	movs	r0, #43	; 0x2b
 8003062:	f7ff f833 	bl	80020cc <moveActuatorLeft>
		  		  actuatorPosL_len = 0;
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <main+0x280>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
		  		  actuatorPosR_len = 0;
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <main+0x284>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

		  		song_length = 0;
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <main+0x288>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
		  		read_notes = 0;
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <main+0x28c>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

		  		reading_title = 0;
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <main+0x290>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
		  		title_index = 0;
 8003084:	4b23      	ldr	r3, [pc, #140]	; (8003114 <main+0x294>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

		  		actuatorL = 0;
 800308a:	4b23      	ldr	r3, [pc, #140]	; (8003118 <main+0x298>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
		  		actuatorR = 0;
 8003090:	4b22      	ldr	r3, [pc, #136]	; (800311c <main+0x29c>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

		  		DCLeftStart = 0;
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <main+0x2a0>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
		  		DCLeftStop = 0;
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <main+0x2a4>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
		  		DCRightStart = 0;
 80030a2:	4b21      	ldr	r3, [pc, #132]	; (8003128 <main+0x2a8>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
		  		DCRightStop = 0;
 80030a8:	4b20      	ldr	r3, [pc, #128]	; (800312c <main+0x2ac>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

		  		note_dataL_len = 0;
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <main+0x2b0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
		  		note_dataR_len = 0;
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <main+0x2b4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]

		  		playingSong = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
		  		HAL_UART_Receive_IT(&huart3, RX_Buffer, sizeof(RX_Buffer));
 80030be:	2205      	movs	r2, #5
 80030c0:	4908      	ldr	r1, [pc, #32]	; (80030e4 <main+0x264>)
 80030c2:	4809      	ldr	r0, [pc, #36]	; (80030e8 <main+0x268>)
 80030c4:	f008 f8f0 	bl	800b2a8 <HAL_UART_Receive_IT>
		  		readyToPlay = 0;
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <main+0x278>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
		  	  }
			  }
			  start = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	613b      	str	r3, [r7, #16]
		  }
		  prevTouch = currentTouch;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	60bb      	str	r3, [r7, #8]


    /* USER CODE END WHILE */

  MX_TouchGFX_Process();
 80030d6:	f00a fb1d 	bl	800d714 <MX_TouchGFX_Process>
	  if(start){
 80030da:	e72d      	b.n	8002f38 <main+0xb8>
 80030dc:	20000784 	.word	0x20000784
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	200008f8 	.word	0x200008f8
 80030e8:	20000864 	.word	0x20000864
 80030ec:	20000004 	.word	0x20000004
 80030f0:	48001400 	.word	0x48001400
 80030f4:	48000800 	.word	0x48000800
 80030f8:	20023bc8 	.word	0x20023bc8
 80030fc:	200006a0 	.word	0x200006a0
 8003100:	20004780 	.word	0x20004780
 8003104:	20008604 	.word	0x20008604
 8003108:	20008608 	.word	0x20008608
 800310c:	2000860c 	.word	0x2000860c
 8003110:	20008610 	.word	0x20008610
 8003114:	20008614 	.word	0x20008614
 8003118:	20008618 	.word	0x20008618
 800311c:	2000861c 	.word	0x2000861c
 8003120:	20008620 	.word	0x20008620
 8003124:	20008624 	.word	0x20008624
 8003128:	20008628 	.word	0x20008628
 800312c:	2000862c 	.word	0x2000862c
 8003130:	20012270 	.word	0x20012270
 8003134:	2001beb4 	.word	0x2001beb4

08003138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b096      	sub	sp, #88	; 0x58
 800313c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	2244      	movs	r2, #68	; 0x44
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f023 fc81 	bl	8026a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800314c:	463b      	mov	r3, r7
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	60da      	str	r2, [r3, #12]
 8003158:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800315a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800315e:	f003 ff37 	bl	8006fd0 <HAL_PWREx_ControlVoltageScaling>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003168:	f000 ff86 	bl	8004078 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800316c:	2310      	movs	r3, #16
 800316e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003170:	2301      	movs	r3, #1
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003178:	2360      	movs	r3, #96	; 0x60
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800317c:	2302      	movs	r3, #2
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003180:	2301      	movs	r3, #1
 8003182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003184:	2301      	movs	r3, #1
 8003186:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 8003188:	2319      	movs	r3, #25
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800318c:	2302      	movs	r3, #2
 800318e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003190:	2302      	movs	r3, #2
 8003192:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003194:	2302      	movs	r3, #2
 8003196:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4618      	mov	r0, r3
 800319e:	f003 ffcb 	bl	8007138 <HAL_RCC_OscConfig>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80031a8:	f000 ff66 	bl	8004078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031ac:	230f      	movs	r3, #15
 80031ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031b0:	2303      	movs	r3, #3
 80031b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031c0:	463b      	mov	r3, r7
 80031c2:	2102      	movs	r1, #2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 fbd1 	bl	800796c <HAL_RCC_ClockConfig>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80031d0:	f000 ff52 	bl	8004078 <Error_Handler>
  }
}
 80031d4:	bf00      	nop
 80031d6:	3758      	adds	r7, #88	; 0x58
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <MX_CRC_Init+0x3c>)
 80031e2:	4a0e      	ldr	r2, [pc, #56]	; (800321c <MX_CRC_Init+0x40>)
 80031e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <MX_CRC_Init+0x3c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <MX_CRC_Init+0x3c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <MX_CRC_Init+0x3c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <MX_CRC_Init+0x3c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <MX_CRC_Init+0x3c>)
 8003200:	2201      	movs	r2, #1
 8003202:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003204:	4804      	ldr	r0, [pc, #16]	; (8003218 <MX_CRC_Init+0x3c>)
 8003206:	f002 fc85 	bl	8005b14 <HAL_CRC_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003210:	f000 ff32 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}
 8003218:	200003a4 	.word	0x200003a4
 800321c:	40023000 	.word	0x40023000

08003220 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <MX_I2C1_Init+0x74>)
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <MX_I2C1_Init+0x78>)
 8003228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <MX_I2C1_Init+0x74>)
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <MX_I2C1_Init+0x7c>)
 800322e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003230:	4b18      	ldr	r3, [pc, #96]	; (8003294 <MX_I2C1_Init+0x74>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <MX_I2C1_Init+0x74>)
 8003238:	2201      	movs	r2, #1
 800323a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <MX_I2C1_Init+0x74>)
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <MX_I2C1_Init+0x74>)
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <MX_I2C1_Init+0x74>)
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <MX_I2C1_Init+0x74>)
 8003250:	2200      	movs	r2, #0
 8003252:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <MX_I2C1_Init+0x74>)
 8003256:	2200      	movs	r2, #0
 8003258:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800325a:	480e      	ldr	r0, [pc, #56]	; (8003294 <MX_I2C1_Init+0x74>)
 800325c:	f003 fa3c 	bl	80066d8 <HAL_I2C_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003266:	f000 ff07 	bl	8004078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800326a:	2100      	movs	r1, #0
 800326c:	4809      	ldr	r0, [pc, #36]	; (8003294 <MX_I2C1_Init+0x74>)
 800326e:	f003 fdf7 	bl	8006e60 <HAL_I2CEx_ConfigAnalogFilter>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003278:	f000 fefe 	bl	8004078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800327c:	2100      	movs	r1, #0
 800327e:	4805      	ldr	r0, [pc, #20]	; (8003294 <MX_I2C1_Init+0x74>)
 8003280:	f003 fe39 	bl	8006ef6 <HAL_I2CEx_ConfigDigitalFilter>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800328a:	f000 fef5 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200003c8 	.word	0x200003c8
 8003298:	40005400 	.word	0x40005400
 800329c:	00c0eaff 	.word	0x00c0eaff

080032a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <MX_I2C2_Init+0x74>)
 80032a6:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <MX_I2C2_Init+0x78>)
 80032a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <MX_I2C2_Init+0x74>)
 80032ac:	4a1b      	ldr	r2, [pc, #108]	; (800331c <MX_I2C2_Init+0x7c>)
 80032ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <MX_I2C2_Init+0x74>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <MX_I2C2_Init+0x74>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <MX_I2C2_Init+0x74>)
 80032be:	2200      	movs	r2, #0
 80032c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <MX_I2C2_Init+0x74>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <MX_I2C2_Init+0x74>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <MX_I2C2_Init+0x74>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <MX_I2C2_Init+0x74>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80032da:	480e      	ldr	r0, [pc, #56]	; (8003314 <MX_I2C2_Init+0x74>)
 80032dc:	f003 f9fc 	bl	80066d8 <HAL_I2C_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80032e6:	f000 fec7 	bl	8004078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ea:	2100      	movs	r1, #0
 80032ec:	4809      	ldr	r0, [pc, #36]	; (8003314 <MX_I2C2_Init+0x74>)
 80032ee:	f003 fdb7 	bl	8006e60 <HAL_I2CEx_ConfigAnalogFilter>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80032f8:	f000 febe 	bl	8004078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80032fc:	2100      	movs	r1, #0
 80032fe:	4805      	ldr	r0, [pc, #20]	; (8003314 <MX_I2C2_Init+0x74>)
 8003300:	f003 fdf9 	bl	8006ef6 <HAL_I2CEx_ConfigDigitalFilter>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800330a:	f000 feb5 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000041c 	.word	0x2000041c
 8003318:	40005800 	.word	0x40005800
 800331c:	00c0eaff 	.word	0x00c0eaff

08003320 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <MX_I2C3_Init+0x74>)
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <MX_I2C3_Init+0x78>)
 8003328:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <MX_I2C3_Init+0x74>)
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <MX_I2C3_Init+0x7c>)
 800332e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <MX_I2C3_Init+0x74>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <MX_I2C3_Init+0x74>)
 8003338:	2201      	movs	r2, #1
 800333a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <MX_I2C3_Init+0x74>)
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <MX_I2C3_Init+0x74>)
 8003344:	2200      	movs	r2, #0
 8003346:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <MX_I2C3_Init+0x74>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <MX_I2C3_Init+0x74>)
 8003350:	2200      	movs	r2, #0
 8003352:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <MX_I2C3_Init+0x74>)
 8003356:	2200      	movs	r2, #0
 8003358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800335a:	480e      	ldr	r0, [pc, #56]	; (8003394 <MX_I2C3_Init+0x74>)
 800335c:	f003 f9bc 	bl	80066d8 <HAL_I2C_Init>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003366:	f000 fe87 	bl	8004078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800336a:	2100      	movs	r1, #0
 800336c:	4809      	ldr	r0, [pc, #36]	; (8003394 <MX_I2C3_Init+0x74>)
 800336e:	f003 fd77 	bl	8006e60 <HAL_I2CEx_ConfigAnalogFilter>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003378:	f000 fe7e 	bl	8004078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800337c:	2100      	movs	r1, #0
 800337e:	4805      	ldr	r0, [pc, #20]	; (8003394 <MX_I2C3_Init+0x74>)
 8003380:	f003 fdb9 	bl	8006ef6 <HAL_I2CEx_ConfigDigitalFilter>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800338a:	f000 fe75 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000470 	.word	0x20000470
 8003398:	40005c00 	.word	0x40005c00
 800339c:	00c0eaff 	.word	0x00c0eaff

080033a0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <MX_I2C4_Init+0x74>)
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <MX_I2C4_Init+0x78>)
 80033a8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <MX_I2C4_Init+0x74>)
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <MX_I2C4_Init+0x7c>)
 80033ae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80033b0:	4b18      	ldr	r3, [pc, #96]	; (8003414 <MX_I2C4_Init+0x74>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033b6:	4b17      	ldr	r3, [pc, #92]	; (8003414 <MX_I2C4_Init+0x74>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033bc:	4b15      	ldr	r3, [pc, #84]	; (8003414 <MX_I2C4_Init+0x74>)
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <MX_I2C4_Init+0x74>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033c8:	4b12      	ldr	r3, [pc, #72]	; (8003414 <MX_I2C4_Init+0x74>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <MX_I2C4_Init+0x74>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <MX_I2C4_Init+0x74>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80033da:	480e      	ldr	r0, [pc, #56]	; (8003414 <MX_I2C4_Init+0x74>)
 80033dc:	f003 f97c 	bl	80066d8 <HAL_I2C_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80033e6:	f000 fe47 	bl	8004078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033ea:	2100      	movs	r1, #0
 80033ec:	4809      	ldr	r0, [pc, #36]	; (8003414 <MX_I2C4_Init+0x74>)
 80033ee:	f003 fd37 	bl	8006e60 <HAL_I2CEx_ConfigAnalogFilter>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80033f8:	f000 fe3e 	bl	8004078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80033fc:	2100      	movs	r1, #0
 80033fe:	4805      	ldr	r0, [pc, #20]	; (8003414 <MX_I2C4_Init+0x74>)
 8003400:	f003 fd79 	bl	8006ef6 <HAL_I2CEx_ConfigDigitalFilter>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800340a:	f000 fe35 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200004c4 	.word	0x200004c4
 8003418:	40008400 	.word	0x40008400
 800341c:	00c0eaff 	.word	0x00c0eaff

08003420 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <MX_SPI1_Init+0x74>)
 8003426:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <MX_SPI1_Init+0x78>)
 8003428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <MX_SPI1_Init+0x74>)
 800342c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <MX_SPI1_Init+0x74>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <MX_SPI1_Init+0x74>)
 800343a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800343e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <MX_SPI1_Init+0x74>)
 8003442:	2200      	movs	r2, #0
 8003444:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <MX_SPI1_Init+0x74>)
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <MX_SPI1_Init+0x74>)
 800344e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003452:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <MX_SPI1_Init+0x74>)
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <MX_SPI1_Init+0x74>)
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <MX_SPI1_Init+0x74>)
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <MX_SPI1_Init+0x74>)
 8003468:	2200      	movs	r2, #0
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <MX_SPI1_Init+0x74>)
 800346e:	2207      	movs	r2, #7
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <MX_SPI1_Init+0x74>)
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <MX_SPI1_Init+0x74>)
 800347a:	2208      	movs	r2, #8
 800347c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_SPI1_Init+0x74>)
 8003480:	f005 fa4a 	bl	8008918 <HAL_SPI_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800348a:	f000 fdf5 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000518 	.word	0x20000518
 8003498:	40013000 	.word	0x40013000

0800349c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <MX_SPI2_Init+0x74>)
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <MX_SPI2_Init+0x78>)
 80034a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <MX_SPI2_Init+0x74>)
 80034a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <MX_SPI2_Init+0x74>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <MX_SPI2_Init+0x74>)
 80034b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034bc:	4b14      	ldr	r3, [pc, #80]	; (8003510 <MX_SPI2_Init+0x74>)
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <MX_SPI2_Init+0x74>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <MX_SPI2_Init+0x74>)
 80034ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <MX_SPI2_Init+0x74>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <MX_SPI2_Init+0x74>)
 80034d8:	2200      	movs	r2, #0
 80034da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <MX_SPI2_Init+0x74>)
 80034de:	2200      	movs	r2, #0
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <MX_SPI2_Init+0x74>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <MX_SPI2_Init+0x74>)
 80034ea:	2207      	movs	r2, #7
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <MX_SPI2_Init+0x74>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <MX_SPI2_Init+0x74>)
 80034f6:	2208      	movs	r2, #8
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034fa:	4805      	ldr	r0, [pc, #20]	; (8003510 <MX_SPI2_Init+0x74>)
 80034fc:	f005 fa0c 	bl	8008918 <HAL_SPI_Init>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003506:	f000 fdb7 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	2000057c 	.word	0x2000057c
 8003514:	40003800 	.word	0x40003800

08003518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800351e:	f107 0310 	add.w	r3, r7, #16
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003536:	4b1e      	ldr	r3, [pc, #120]	; (80035b0 <MX_TIM2_Init+0x98>)
 8003538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800353c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <MX_TIM2_Init+0x98>)
 8003540:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <MX_TIM2_Init+0x98>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <MX_TIM2_Init+0x98>)
 800354e:	f04f 32ff 	mov.w	r2, #4294967295
 8003552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003554:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <MX_TIM2_Init+0x98>)
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <MX_TIM2_Init+0x98>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003560:	4813      	ldr	r0, [pc, #76]	; (80035b0 <MX_TIM2_Init+0x98>)
 8003562:	f006 fb8b 	bl	8009c7c <HAL_TIM_Base_Init>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800356c:	f000 fd84 	bl	8004078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	4619      	mov	r1, r3
 800357c:	480c      	ldr	r0, [pc, #48]	; (80035b0 <MX_TIM2_Init+0x98>)
 800357e:	f006 ffe7 	bl	800a550 <HAL_TIM_ConfigClockSource>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003588:	f000 fd76 	bl	8004078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800358c:	2300      	movs	r3, #0
 800358e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4805      	ldr	r0, [pc, #20]	; (80035b0 <MX_TIM2_Init+0x98>)
 800359a:	f007 fcfb 	bl	800af94 <HAL_TIMEx_MasterConfigSynchronization>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80035a4:	f000 fd68 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80035a8:	bf00      	nop
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	200006a0 	.word	0x200006a0

080035b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ba:	f107 031c 	add.w	r3, r7, #28
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035c6:	463b      	mov	r3, r7
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
 80035d4:	615a      	str	r2, [r3, #20]
 80035d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <MX_TIM3_Init+0xac>)
 80035da:	4a22      	ldr	r2, [pc, #136]	; (8003664 <MX_TIM3_Init+0xb0>)
 80035dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <MX_TIM3_Init+0xac>)
 80035e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80035e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <MX_TIM3_Init+0xac>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <MX_TIM3_Init+0xac>)
 80035ee:	2264      	movs	r2, #100	; 0x64
 80035f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f2:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <MX_TIM3_Init+0xac>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <MX_TIM3_Init+0xac>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035fe:	4818      	ldr	r0, [pc, #96]	; (8003660 <MX_TIM3_Init+0xac>)
 8003600:	f006 fc33 	bl	8009e6a <HAL_TIM_PWM_Init>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800360a:	f000 fd35 	bl	8004078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003616:	f107 031c 	add.w	r3, r7, #28
 800361a:	4619      	mov	r1, r3
 800361c:	4810      	ldr	r0, [pc, #64]	; (8003660 <MX_TIM3_Init+0xac>)
 800361e:	f007 fcb9 	bl	800af94 <HAL_TIMEx_MasterConfigSynchronization>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003628:	f000 fd26 	bl	8004078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800362c:	2360      	movs	r3, #96	; 0x60
 800362e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800363c:	463b      	mov	r3, r7
 800363e:	2204      	movs	r2, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4807      	ldr	r0, [pc, #28]	; (8003660 <MX_TIM3_Init+0xac>)
 8003644:	f006 fe70 	bl	800a328 <HAL_TIM_PWM_ConfigChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800364e:	f000 fd13 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003652:	4803      	ldr	r0, [pc, #12]	; (8003660 <MX_TIM3_Init+0xac>)
 8003654:	f001 f8b6 	bl	80047c4 <HAL_TIM_MspPostInit>

}
 8003658:	bf00      	nop
 800365a:	3728      	adds	r7, #40	; 0x28
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200006ec 	.word	0x200006ec
 8003664:	40000400 	.word	0x40000400

08003668 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800366e:	f107 0310 	add.w	r3, r7, #16
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <MX_TIM4_Init+0x98>)
 8003688:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <MX_TIM4_Init+0x9c>)
 800368a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39999;
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <MX_TIM4_Init+0x98>)
 800368e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003692:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003694:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <MX_TIM4_Init+0x98>)
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800369a:	4b19      	ldr	r3, [pc, #100]	; (8003700 <MX_TIM4_Init+0x98>)
 800369c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <MX_TIM4_Init+0x98>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a8:	4b15      	ldr	r3, [pc, #84]	; (8003700 <MX_TIM4_Init+0x98>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80036ae:	4814      	ldr	r0, [pc, #80]	; (8003700 <MX_TIM4_Init+0x98>)
 80036b0:	f006 fae4 	bl	8009c7c <HAL_TIM_Base_Init>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80036ba:	f000 fcdd 	bl	8004078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80036c4:	f107 0310 	add.w	r3, r7, #16
 80036c8:	4619      	mov	r1, r3
 80036ca:	480d      	ldr	r0, [pc, #52]	; (8003700 <MX_TIM4_Init+0x98>)
 80036cc:	f006 ff40 	bl	800a550 <HAL_TIM_ConfigClockSource>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80036d6:	f000 fccf 	bl	8004078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4806      	ldr	r0, [pc, #24]	; (8003700 <MX_TIM4_Init+0x98>)
 80036e8:	f007 fc54 	bl	800af94 <HAL_TIMEx_MasterConfigSynchronization>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80036f2:	f000 fcc1 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80036f6:	bf00      	nop
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000738 	.word	0x20000738
 8003704:	40000800 	.word	0x40000800

08003708 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800371a:	463b      	mov	r3, r7
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
 8003728:	615a      	str	r2, [r3, #20]
 800372a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800372c:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <MX_TIM5_Init+0xac>)
 800372e:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <MX_TIM5_Init+0xb0>)
 8003730:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <MX_TIM5_Init+0xac>)
 8003734:	2227      	movs	r2, #39	; 0x27
 8003736:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003738:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <MX_TIM5_Init+0xac>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <MX_TIM5_Init+0xac>)
 8003740:	2231      	movs	r2, #49	; 0x31
 8003742:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <MX_TIM5_Init+0xac>)
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374a:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <MX_TIM5_Init+0xac>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003750:	4818      	ldr	r0, [pc, #96]	; (80037b4 <MX_TIM5_Init+0xac>)
 8003752:	f006 fb8a 	bl	8009e6a <HAL_TIM_PWM_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800375c:	f000 fc8c 	bl	8004078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003768:	f107 031c 	add.w	r3, r7, #28
 800376c:	4619      	mov	r1, r3
 800376e:	4811      	ldr	r0, [pc, #68]	; (80037b4 <MX_TIM5_Init+0xac>)
 8003770:	f007 fc10 	bl	800af94 <HAL_TIMEx_MasterConfigSynchronization>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800377a:	f000 fc7d 	bl	8004078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800377e:	2360      	movs	r3, #96	; 0x60
 8003780:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800378e:	463b      	mov	r3, r7
 8003790:	220c      	movs	r2, #12
 8003792:	4619      	mov	r1, r3
 8003794:	4807      	ldr	r0, [pc, #28]	; (80037b4 <MX_TIM5_Init+0xac>)
 8003796:	f006 fdc7 	bl	800a328 <HAL_TIM_PWM_ConfigChannel>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80037a0:	f000 fc6a 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80037a4:	4803      	ldr	r0, [pc, #12]	; (80037b4 <MX_TIM5_Init+0xac>)
 80037a6:	f001 f80d 	bl	80047c4 <HAL_TIM_MspPostInit>

}
 80037aa:	bf00      	nop
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000784 	.word	0x20000784
 80037b8:	40000c00 	.word	0x40000c00

080037bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037c0:	4b22      	ldr	r3, [pc, #136]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037c2:	4a23      	ldr	r2, [pc, #140]	; (8003850 <MX_USART2_UART_Init+0x94>)
 80037c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037ce:	4b1f      	ldr	r3, [pc, #124]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037dc:	2200      	movs	r2, #0
 80037de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037e0:	4b1a      	ldr	r3, [pc, #104]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037e2:	220c      	movs	r2, #12
 80037e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037e6:	4b19      	ldr	r3, [pc, #100]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037ec:	4b17      	ldr	r3, [pc, #92]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037f2:	4b16      	ldr	r3, [pc, #88]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <MX_USART2_UART_Init+0x90>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <MX_USART2_UART_Init+0x90>)
 8003800:	2200      	movs	r2, #0
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003804:	4811      	ldr	r0, [pc, #68]	; (800384c <MX_USART2_UART_Init+0x90>)
 8003806:	f007 fc6b 	bl	800b0e0 <HAL_UART_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003810:	f000 fc32 	bl	8004078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003814:	2100      	movs	r1, #0
 8003816:	480d      	ldr	r0, [pc, #52]	; (800384c <MX_USART2_UART_Init+0x90>)
 8003818:	f009 feaa 	bl	800d570 <HAL_UARTEx_SetTxFifoThreshold>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003822:	f000 fc29 	bl	8004078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003826:	2100      	movs	r1, #0
 8003828:	4808      	ldr	r0, [pc, #32]	; (800384c <MX_USART2_UART_Init+0x90>)
 800382a:	f009 fedf 	bl	800d5ec <HAL_UARTEx_SetRxFifoThreshold>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003834:	f000 fc20 	bl	8004078 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8003838:	4804      	ldr	r0, [pc, #16]	; (800384c <MX_USART2_UART_Init+0x90>)
 800383a:	f009 fe25 	bl	800d488 <HAL_UARTEx_EnableFifoMode>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003844:	f000 fc18 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003848:	bf00      	nop
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200007d0 	.word	0x200007d0
 8003850:	40004400 	.word	0x40004400

08003854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003858:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 800385a:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <MX_USART3_UART_Init+0x94>)
 800385c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800385e:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 8003860:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003866:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 800386e:	2200      	movs	r2, #0
 8003870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003872:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 8003874:	2200      	movs	r2, #0
 8003876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 800387a:	220c      	movs	r2, #12
 800387c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 8003880:	2200      	movs	r2, #0
 8003882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 800388c:	2200      	movs	r2, #0
 800388e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 8003892:	2200      	movs	r2, #0
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003896:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 8003898:	2200      	movs	r2, #0
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800389c:	4811      	ldr	r0, [pc, #68]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 800389e:	f007 fc1f 	bl	800b0e0 <HAL_UART_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80038a8:	f000 fbe6 	bl	8004078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038ac:	2100      	movs	r1, #0
 80038ae:	480d      	ldr	r0, [pc, #52]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 80038b0:	f009 fe5e 	bl	800d570 <HAL_UARTEx_SetTxFifoThreshold>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80038ba:	f000 fbdd 	bl	8004078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038be:	2100      	movs	r1, #0
 80038c0:	4808      	ldr	r0, [pc, #32]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 80038c2:	f009 fe93 	bl	800d5ec <HAL_UARTEx_SetRxFifoThreshold>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80038cc:	f000 fbd4 	bl	8004078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80038d0:	4804      	ldr	r0, [pc, #16]	; (80038e4 <MX_USART3_UART_Init+0x90>)
 80038d2:	f009 fe14 	bl	800d4fe <HAL_UARTEx_DisableFifoMode>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80038dc:	f000 fbcc 	bl	8004078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000864 	.word	0x20000864
 80038e8:	40004800 	.word	0x40004800

080038ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <MX_DMA_Init+0x60>)
 80038f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <MX_DMA_Init+0x60>)
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	6493      	str	r3, [r2, #72]	; 0x48
 80038fe:	4b13      	ldr	r3, [pc, #76]	; (800394c <MX_DMA_Init+0x60>)
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <MX_DMA_Init+0x60>)
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	4a0f      	ldr	r2, [pc, #60]	; (800394c <MX_DMA_Init+0x60>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6493      	str	r3, [r2, #72]	; 0x48
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <MX_DMA_Init+0x60>)
 8003918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2100      	movs	r1, #0
 8003926:	200b      	movs	r0, #11
 8003928:	f002 f8a1 	bl	8005a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800392c:	200b      	movs	r0, #11
 800392e:	f002 f8ba 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2100      	movs	r1, #0
 8003936:	200c      	movs	r0, #12
 8003938:	f002 f899 	bl	8005a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800393c:	200c      	movs	r0, #12
 800393e:	f002 f8b2 	bl	8005aa6 <HAL_NVIC_EnableIRQ>

}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000

08003950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08e      	sub	sp, #56	; 0x38
 8003954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	609a      	str	r2, [r3, #8]
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003966:	4bb5      	ldr	r3, [pc, #724]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	4ab4      	ldr	r2, [pc, #720]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 800396c:	f043 0310 	orr.w	r3, r3, #16
 8003970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003972:	4bb2      	ldr	r3, [pc, #712]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800397e:	4baf      	ldr	r3, [pc, #700]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	4aae      	ldr	r2, [pc, #696]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800398a:	4bac      	ldr	r3, [pc, #688]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003996:	4ba9      	ldr	r3, [pc, #676]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	4aa8      	ldr	r2, [pc, #672]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 800399c:	f043 0320 	orr.w	r3, r3, #32
 80039a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039a2:	4ba6      	ldr	r3, [pc, #664]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039ae:	4ba3      	ldr	r3, [pc, #652]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	4aa2      	ldr	r2, [pc, #648]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ba:	4ba0      	ldr	r3, [pc, #640]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c6:	4b9d      	ldr	r3, [pc, #628]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	4a9c      	ldr	r2, [pc, #624]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039d2:	4b9a      	ldr	r3, [pc, #616]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039de:	4b97      	ldr	r3, [pc, #604]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	4a96      	ldr	r2, [pc, #600]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ea:	4b94      	ldr	r3, [pc, #592]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039f6:	4b91      	ldr	r3, [pc, #580]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	4a90      	ldr	r2, [pc, #576]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 80039fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a02:	4b8e      	ldr	r3, [pc, #568]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a0e:	4b8b      	ldr	r3, [pc, #556]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	4a8a      	ldr	r2, [pc, #552]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 8003a14:	f043 0308 	orr.w	r3, r3, #8
 8003a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a1a:	4b88      	ldr	r3, [pc, #544]	; (8003c3c <MX_GPIO_Init+0x2ec>)
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003a26:	f003 fb77 	bl	8007118 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f44f 41a3 	mov.w	r1, #20864	; 0x5180
 8003a30:	4883      	ldr	r0, [pc, #524]	; (8003c40 <MX_GPIO_Init+0x2f0>)
 8003a32:	f002 fe21 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003a36:	2200      	movs	r2, #0
 8003a38:	210f      	movs	r1, #15
 8003a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a3e:	f002 fe1b 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10
 8003a42:	2200      	movs	r2, #0
 8003a44:	f44f 6153 	mov.w	r1, #3376	; 0xd30
 8003a48:	487e      	ldr	r0, [pc, #504]	; (8003c44 <MX_GPIO_Init+0x2f4>)
 8003a4a:	f002 fe15 	bl	8006678 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a54:	487a      	ldr	r0, [pc, #488]	; (8003c40 <MX_GPIO_Init+0x2f0>)
 8003a56:	f002 fe0f 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2141      	movs	r1, #65	; 0x41
 8003a5e:	487a      	ldr	r0, [pc, #488]	; (8003c48 <MX_GPIO_Init+0x2f8>)
 8003a60:	f002 fe0a 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8003a64:	2201      	movs	r2, #1
 8003a66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a6a:	4878      	ldr	r0, [pc, #480]	; (8003c4c <MX_GPIO_Init+0x2fc>)
 8003a6c:	f002 fe04 	bl	8006678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a70:	230c      	movs	r3, #12
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003a80:	230d      	movs	r3, #13
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4870      	ldr	r0, [pc, #448]	; (8003c4c <MX_GPIO_Init+0x2fc>)
 8003a8c:	f002 fc62 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 DISPL_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|DISPL_RST_Pin;
 8003a90:	f44f 538c 	mov.w	r3, #4480	; 0x1180
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a96:	2301      	movs	r3, #1
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4865      	ldr	r0, [pc, #404]	; (8003c40 <MX_GPIO_Init+0x2f0>)
 8003aaa:	f002 fc53 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ab2:	230b      	movs	r3, #11
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4860      	ldr	r0, [pc, #384]	; (8003c44 <MX_GPIO_Init+0x2f4>)
 8003ac2:	f002 fc47 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003ac6:	230f      	movs	r3, #15
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aca:	2301      	movs	r3, #1
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ada:	4619      	mov	r1, r3
 8003adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae0:	f002 fc38 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC8 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10
 8003ae4:	f44f 6353 	mov.w	r3, #3376	; 0xd30
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aea:	2301      	movs	r3, #1
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af2:	2300      	movs	r3, #0
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afa:	4619      	mov	r1, r3
 8003afc:	4851      	ldr	r0, [pc, #324]	; (8003c44 <MX_GPIO_Init+0x2f4>)
 8003afe:	f002 fc29 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b02:	2302      	movs	r3, #2
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b06:	230b      	movs	r3, #11
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b12:	4619      	mov	r1, r3
 8003b14:	484e      	ldr	r0, [pc, #312]	; (8003c50 <MX_GPIO_Init+0x300>)
 8003b16:	f002 fc1d 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4848      	ldr	r0, [pc, #288]	; (8003c50 <MX_GPIO_Init+0x300>)
 8003b2e:	f002 fc11 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_DC_Pin;
 8003b32:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b40:	2302      	movs	r3, #2
 8003b42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b48:	4619      	mov	r1, r3
 8003b4a:	483d      	ldr	r0, [pc, #244]	; (8003c40 <MX_GPIO_Init+0x2f0>)
 8003b4c:	f002 fc02 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8003b50:	2341      	movs	r3, #65	; 0x41
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b54:	2301      	movs	r3, #1
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b64:	4619      	mov	r1, r3
 8003b66:	4838      	ldr	r0, [pc, #224]	; (8003c48 <MX_GPIO_Init+0x2f8>)
 8003b68:	f002 fbf4 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b76:	2301      	movs	r3, #1
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8003b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4831      	ldr	r0, [pc, #196]	; (8003c48 <MX_GPIO_Init+0x2f8>)
 8003b82:	f002 fbe7 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003b86:	f44f 535e 	mov.w	r3, #14208	; 0x3780
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b94:	2300      	movs	r3, #0
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	482a      	ldr	r0, [pc, #168]	; (8003c4c <MX_GPIO_Init+0x2fc>)
 8003ba4:	f002 fbd6 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8003bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4822      	ldr	r0, [pc, #136]	; (8003c4c <MX_GPIO_Init+0x2fc>)
 8003bc2:	f002 fbc7 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003bc6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be0:	4619      	mov	r1, r3
 8003be2:	481a      	ldr	r0, [pc, #104]	; (8003c4c <MX_GPIO_Init+0x2fc>)
 8003be4:	f002 fbb6 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003be8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003bfa:	230d      	movs	r3, #13
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c02:	4619      	mov	r1, r3
 8003c04:	4812      	ldr	r0, [pc, #72]	; (8003c50 <MX_GPIO_Init+0x300>)
 8003c06:	f002 fba5 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c10:	2302      	movs	r3, #2
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003c1c:	230e      	movs	r3, #14
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c24:	4619      	mov	r1, r3
 8003c26:	480a      	ldr	r0, [pc, #40]	; (8003c50 <MX_GPIO_Init+0x300>)
 8003c28:	f002 fb94 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003c2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c32:	2302      	movs	r3, #2
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e00c      	b.n	8003c54 <MX_GPIO_Init+0x304>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	48001400 	.word	0x48001400
 8003c44:	48000800 	.word	0x48000800
 8003c48:	48001800 	.word	0x48001800
 8003c4c:	48001000 	.word	0x48001000
 8003c50:	48000400 	.word	0x48000400
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c56:	2303      	movs	r3, #3
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c62:	4619      	mov	r1, r3
 8003c64:	4848      	ldr	r0, [pc, #288]	; (8003d88 <MX_GPIO_Init+0x438>)
 8003c66:	f002 fb75 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c6a:	2340      	movs	r3, #64	; 0x40
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c76:	2300      	movs	r3, #0
 8003c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003c7a:	230d      	movs	r3, #13
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c82:	4619      	mov	r1, r3
 8003c84:	4841      	ldr	r0, [pc, #260]	; (8003d8c <MX_GPIO_Init+0x43c>)
 8003c86:	f002 fb65 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8003c8a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c9c:	230c      	movs	r3, #12
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4839      	ldr	r0, [pc, #228]	; (8003d8c <MX_GPIO_Init+0x43c>)
 8003ca8:	f002 fb54 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8003cac:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003cbe:	230a      	movs	r3, #10
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ccc:	f002 fb42 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce8:	f002 fb34 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003cec:	2301      	movs	r3, #1
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003cfc:	2309      	movs	r3, #9
 8003cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d04:	4619      	mov	r1, r3
 8003d06:	4822      	ldr	r0, [pc, #136]	; (8003d90 <MX_GPIO_Init+0x440>)
 8003d08:	f002 fb24 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d10:	2302      	movs	r3, #2
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003d1c:	230c      	movs	r3, #12
 8003d1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d24:	4619      	mov	r1, r3
 8003d26:	481a      	ldr	r0, [pc, #104]	; (8003d90 <MX_GPIO_Init+0x440>)
 8003d28:	f002 fb14 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d32:	2302      	movs	r3, #2
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d3e:	2307      	movs	r3, #7
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d46:	4619      	mov	r1, r3
 8003d48:	480f      	ldr	r0, [pc, #60]	; (8003d88 <MX_GPIO_Init+0x438>)
 8003d4a:	f002 fb03 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d4e:	2308      	movs	r3, #8
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d52:	2302      	movs	r3, #2
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003d5e:	2306      	movs	r3, #6
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d66:	4619      	mov	r1, r3
 8003d68:	480a      	ldr	r0, [pc, #40]	; (8003d94 <MX_GPIO_Init+0x444>)
 8003d6a:	f002 faf3 	bl	8006354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2100      	movs	r1, #0
 8003d72:	2007      	movs	r0, #7
 8003d74:	f001 fe7b 	bl	8005a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003d78:	2007      	movs	r0, #7
 8003d7a:	f001 fe94 	bl	8005aa6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d7e:	bf00      	nop
 8003d80:	3738      	adds	r7, #56	; 0x38
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	48001800 	.word	0x48001800
 8003d8c:	48000800 	.word	0x48000800
 8003d90:	48000c00 	.word	0x48000c00
 8003d94:	48000400 	.word	0x48000400

08003d98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	//__NOP(); // for debugging
	//Commented out ->Instance
		if (huart->Instance == USART3)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a97      	ldr	r2, [pc, #604]	; (8004004 <HAL_UART_RxCpltCallback+0x26c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	f040 8157 	bne.w	800405a <HAL_UART_RxCpltCallback+0x2c2>
	    {

	        // RX_Buffer[0] = note number
	        // RX_Buffer[1] = start time upper half, RX_Buffer[2] = start time lower half
	        // RX_Buffer[3] = end time upper half, RX_Buffer[4] = end time lower half
	        int noteNum = RX_Buffer[0];
 8003dac:	4b96      	ldr	r3, [pc, #600]	; (8004008 <HAL_UART_RxCpltCallback+0x270>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	613b      	str	r3, [r7, #16]
	        int start_Time = (RX_Buffer[1] << 8) + RX_Buffer[2];
 8003db2:	4b95      	ldr	r3, [pc, #596]	; (8004008 <HAL_UART_RxCpltCallback+0x270>)
 8003db4:	785b      	ldrb	r3, [r3, #1]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	4a93      	ldr	r2, [pc, #588]	; (8004008 <HAL_UART_RxCpltCallback+0x270>)
 8003dba:	7892      	ldrb	r2, [r2, #2]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
	        int end_Time = (RX_Buffer[3] << 8) + RX_Buffer[4];
 8003dc0:	4b91      	ldr	r3, [pc, #580]	; (8004008 <HAL_UART_RxCpltCallback+0x270>)
 8003dc2:	78db      	ldrb	r3, [r3, #3]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	4a90      	ldr	r2, [pc, #576]	; (8004008 <HAL_UART_RxCpltCallback+0x270>)
 8003dc8:	7912      	ldrb	r2, [r2, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	60bb      	str	r3, [r7, #8]
	        if(noteNum == 1 && start_Time == end_Time){
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d10a      	bne.n	8003dea <HAL_UART_RxCpltCallback+0x52>
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d106      	bne.n	8003dea <HAL_UART_RxCpltCallback+0x52>
	        	// Starting to send title
	        	reading_title = 1;
 8003ddc:	4b8b      	ldr	r3, [pc, #556]	; (800400c <HAL_UART_RxCpltCallback+0x274>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
	        	title_index = 0;
 8003de2:	4b8b      	ldr	r3, [pc, #556]	; (8004010 <HAL_UART_RxCpltCallback+0x278>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e026      	b.n	8003e38 <HAL_UART_RxCpltCallback+0xa0>
	        }
	        else if(noteNum == 2 && start_Time == end_Time){
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d107      	bne.n	8003e00 <HAL_UART_RxCpltCallback+0x68>
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d103      	bne.n	8003e00 <HAL_UART_RxCpltCallback+0x68>
	        	// Title done, do other stuff
	        	reading_title = 0;
 8003df8:	4b84      	ldr	r3, [pc, #528]	; (800400c <HAL_UART_RxCpltCallback+0x274>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e01b      	b.n	8003e38 <HAL_UART_RxCpltCallback+0xa0>
	        }
	        else if(reading_title){
 8003e00:	4b82      	ldr	r3, [pc, #520]	; (800400c <HAL_UART_RxCpltCallback+0x274>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d017      	beq.n	8003e38 <HAL_UART_RxCpltCallback+0xa0>
	        	for(int i = 0; i < 5; i++){
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e00c      	b.n	8003e28 <HAL_UART_RxCpltCallback+0x90>
	        		midi_titleBuffer[title_index + i] = RX_Buffer[i];
 8003e0e:	4b80      	ldr	r3, [pc, #512]	; (8004010 <HAL_UART_RxCpltCallback+0x278>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	4413      	add	r3, r2
 8003e16:	497c      	ldr	r1, [pc, #496]	; (8004008 <HAL_UART_RxCpltCallback+0x270>)
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	7811      	ldrb	r1, [r2, #0]
 8003e1e:	4a7d      	ldr	r2, [pc, #500]	; (8004014 <HAL_UART_RxCpltCallback+0x27c>)
 8003e20:	54d1      	strb	r1, [r2, r3]
	        	for(int i = 0; i < 5; i++){
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	3301      	adds	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	ddef      	ble.n	8003e0e <HAL_UART_RxCpltCallback+0x76>
	        	}
	        	title_index += 5;
 8003e2e:	4b78      	ldr	r3, [pc, #480]	; (8004010 <HAL_UART_RxCpltCallback+0x278>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3305      	adds	r3, #5
 8003e34:	4a76      	ldr	r2, [pc, #472]	; (8004010 <HAL_UART_RxCpltCallback+0x278>)
 8003e36:	6013      	str	r3, [r2, #0]
	        }
	        // noteNum = 0 and start_Time = end_Time indicates the beginning of a song
	        // noteNum = 255 and start_time = end_Time indicates the end of a song
	        if(noteNum == 3 && start_Time == end_Time){
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d110      	bne.n	8003e60 <HAL_UART_RxCpltCallback+0xc8>
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d10c      	bne.n	8003e60 <HAL_UART_RxCpltCallback+0xc8>
	        	song_length = 0;
 8003e46:	4b74      	ldr	r3, [pc, #464]	; (8004018 <HAL_UART_RxCpltCallback+0x280>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
	        	note_dataR_len = 0;
 8003e4c:	4b73      	ldr	r3, [pc, #460]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
	        	note_dataL_len = 0;
 8003e52:	4b73      	ldr	r3, [pc, #460]	; (8004020 <HAL_UART_RxCpltCallback+0x288>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
	        	read_notes = 1;
 8003e58:	4b72      	ldr	r3, [pc, #456]	; (8004024 <HAL_UART_RxCpltCallback+0x28c>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	e0f7      	b.n	8004050 <HAL_UART_RxCpltCallback+0x2b8>
	        }
	        else if (noteNum == 4 && start_Time == end_Time){
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d150      	bne.n	8003f08 <HAL_UART_RxCpltCallback+0x170>
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d14c      	bne.n	8003f08 <HAL_UART_RxCpltCallback+0x170>
	        	note_dataR[note_dataR_len][0] = 0;
 8003e6e:	4b6b      	ldr	r3, [pc, #428]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	496d      	ldr	r1, [pc, #436]	; (8004028 <HAL_UART_RxCpltCallback+0x290>)
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
	            note_dataR[note_dataR_len][1] = 0;
 8003e82:	4b66      	ldr	r3, [pc, #408]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4968      	ldr	r1, [pc, #416]	; (8004028 <HAL_UART_RxCpltCallback+0x290>)
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	3304      	adds	r3, #4
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
	            note_dataR[note_dataR_len][2] = 0;
 8003e98:	4b60      	ldr	r3, [pc, #384]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4962      	ldr	r1, [pc, #392]	; (8004028 <HAL_UART_RxCpltCallback+0x290>)
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
	            note_dataL[note_dataL_len][0] = 0;
 8003eae:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <HAL_UART_RxCpltCallback+0x288>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	495e      	ldr	r1, [pc, #376]	; (800402c <HAL_UART_RxCpltCallback+0x294>)
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
	            note_dataL[note_dataL_len][1] = 0;
 8003ec2:	4b57      	ldr	r3, [pc, #348]	; (8004020 <HAL_UART_RxCpltCallback+0x288>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4959      	ldr	r1, [pc, #356]	; (800402c <HAL_UART_RxCpltCallback+0x294>)
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
	            note_dataL[note_dataL_len][2] = 0;
 8003ed8:	4b51      	ldr	r3, [pc, #324]	; (8004020 <HAL_UART_RxCpltCallback+0x288>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4953      	ldr	r1, [pc, #332]	; (800402c <HAL_UART_RxCpltCallback+0x294>)
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3308      	adds	r3, #8
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
	        	song_length = note_dataR_len + note_dataL_len;
 8003eee:	4b4b      	ldr	r3, [pc, #300]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b4b      	ldr	r3, [pc, #300]	; (8004020 <HAL_UART_RxCpltCallback+0x288>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4a47      	ldr	r2, [pc, #284]	; (8004018 <HAL_UART_RxCpltCallback+0x280>)
 8003efa:	6013      	str	r3, [r2, #0]
	            read_notes = 0;
 8003efc:	4b49      	ldr	r3, [pc, #292]	; (8004024 <HAL_UART_RxCpltCallback+0x28c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
	            play_notes();
 8003f02:	f7fe f969 	bl	80021d8 <play_notes>
 8003f06:	e0a3      	b.n	8004050 <HAL_UART_RxCpltCallback+0x2b8>
	        }
	        else if(read_notes){
 8003f08:	4b46      	ldr	r3, [pc, #280]	; (8004024 <HAL_UART_RxCpltCallback+0x28c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 809f 	beq.w	8004050 <HAL_UART_RxCpltCallback+0x2b8>
	        	if(noteNum >= 60){
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b3b      	cmp	r3, #59	; 0x3b
 8003f16:	dd41      	ble.n	8003f9c <HAL_UART_RxCpltCallback+0x204>
	        		note_dataR[note_dataR_len][0] = noteNum;
 8003f18:	4b40      	ldr	r3, [pc, #256]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4942      	ldr	r1, [pc, #264]	; (8004028 <HAL_UART_RxCpltCallback+0x290>)
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	601a      	str	r2, [r3, #0]
	        		note_dataR[note_dataR_len][1] = start_Time + 2;
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1c99      	adds	r1, r3, #2
 8003f34:	483c      	ldr	r0, [pc, #240]	; (8004028 <HAL_UART_RxCpltCallback+0x290>)
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4403      	add	r3, r0
 8003f40:	3304      	adds	r3, #4
 8003f42:	6019      	str	r1, [r3, #0]
	        		note_dataR[note_dataR_len][2] = end_Time + 2;
 8003f44:	4b35      	ldr	r3, [pc, #212]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	1c99      	adds	r1, r3, #2
 8003f4c:	4836      	ldr	r0, [pc, #216]	; (8004028 <HAL_UART_RxCpltCallback+0x290>)
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4403      	add	r3, r0
 8003f58:	3308      	adds	r3, #8
 8003f5a:	6019      	str	r1, [r3, #0]
	        		if(noteNum > highestNote){
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b60      	cmp	r3, #96	; 0x60
 8003f60:	dd0b      	ble.n	8003f7a <HAL_UART_RxCpltCallback+0x1e2>
	        			note_dataR[note_dataR_len][4] = 1;
 8003f62:	4b2e      	ldr	r3, [pc, #184]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4930      	ldr	r1, [pc, #192]	; (8004028 <HAL_UART_RxCpltCallback+0x290>)
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	3310      	adds	r3, #16
 8003f74:	2201      	movs	r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e00a      	b.n	8003f90 <HAL_UART_RxCpltCallback+0x1f8>
	        		}
	        		else{
	        			note_dataR[note_dataR_len][4] = 0;
 8003f7a:	4b28      	ldr	r3, [pc, #160]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	492a      	ldr	r1, [pc, #168]	; (8004028 <HAL_UART_RxCpltCallback+0x290>)
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
	        		}
	        		note_dataR_len++;
 8003f90:	4b22      	ldr	r3, [pc, #136]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4a21      	ldr	r2, [pc, #132]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e059      	b.n	8004050 <HAL_UART_RxCpltCallback+0x2b8>
	        	}
	        	else{
	        		note_dataL[note_dataL_len][0] = noteNum;
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_UART_RxCpltCallback+0x288>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4922      	ldr	r1, [pc, #136]	; (800402c <HAL_UART_RxCpltCallback+0x294>)
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	601a      	str	r2, [r3, #0]
	        		note_dataL[note_dataL_len][1] = start_Time + 2;
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_UART_RxCpltCallback+0x288>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	1c99      	adds	r1, r3, #2
 8003fb8:	481c      	ldr	r0, [pc, #112]	; (800402c <HAL_UART_RxCpltCallback+0x294>)
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4403      	add	r3, r0
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	6019      	str	r1, [r3, #0]
	        		note_dataL[note_dataL_len][2] = end_Time + 2;
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <HAL_UART_RxCpltCallback+0x288>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	1c99      	adds	r1, r3, #2
 8003fd0:	4816      	ldr	r0, [pc, #88]	; (800402c <HAL_UART_RxCpltCallback+0x294>)
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4403      	add	r3, r0
 8003fdc:	3308      	adds	r3, #8
 8003fde:	6019      	str	r1, [r3, #0]
	        		if(noteNum < lowestNote || noteNum > 54){
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b23      	cmp	r3, #35	; 0x23
 8003fe4:	dd02      	ble.n	8003fec <HAL_UART_RxCpltCallback+0x254>
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b36      	cmp	r3, #54	; 0x36
 8003fea:	dd21      	ble.n	8004030 <HAL_UART_RxCpltCallback+0x298>
	        			note_dataR[note_dataR_len][4] = 1;
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_UART_RxCpltCallback+0x284>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	490d      	ldr	r1, [pc, #52]	; (8004028 <HAL_UART_RxCpltCallback+0x290>)
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3310      	adds	r3, #16
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e020      	b.n	8004046 <HAL_UART_RxCpltCallback+0x2ae>
 8004004:	40004800 	.word	0x40004800
 8004008:	200008f8 	.word	0x200008f8
 800400c:	20008610 	.word	0x20008610
 8004010:	20008614 	.word	0x20008614
 8004014:	20000014 	.word	0x20000014
 8004018:	20008608 	.word	0x20008608
 800401c:	2001beb4 	.word	0x2001beb4
 8004020:	20012270 	.word	0x20012270
 8004024:	2000860c 	.word	0x2000860c
 8004028:	20012274 	.word	0x20012274
 800402c:	20008630 	.word	0x20008630
	        		}
	        		else{
	        			note_dataR[note_dataR_len][4] = 0;
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_UART_RxCpltCallback+0x2cc>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	490c      	ldr	r1, [pc, #48]	; (8004068 <HAL_UART_RxCpltCallback+0x2d0>)
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3310      	adds	r3, #16
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
	        		}
	        		note_dataL_len++;
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_UART_RxCpltCallback+0x2d4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_UART_RxCpltCallback+0x2d4>)
 800404e:	6013      	str	r3, [r2, #0]



	         // Similar logic for the last 2 motors using ReceivedData[2] and ReceivedData[3]
	        //memset(RX_Buffer, 0, sizeof(RX_Buffer));
	        HAL_UART_Receive_IT(&huart3, RX_Buffer, sizeof(RX_Buffer));
 8004050:	2205      	movs	r2, #5
 8004052:	4907      	ldr	r1, [pc, #28]	; (8004070 <HAL_UART_RxCpltCallback+0x2d8>)
 8004054:	4807      	ldr	r0, [pc, #28]	; (8004074 <HAL_UART_RxCpltCallback+0x2dc>)
 8004056:	f007 f927 	bl	800b2a8 <HAL_UART_Receive_IT>
	    }

}
 800405a:	bf00      	nop
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	2001beb4 	.word	0x2001beb4
 8004068:	20012274 	.word	0x20012274
 800406c:	20012270 	.word	0x20012270
 8004070:	200008f8 	.word	0x200008f8
 8004074:	20000864 	.word	0x20000864

08004078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800407c:	b672      	cpsid	i
}
 800407e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004080:	e7fe      	b.n	8004080 <Error_Handler+0x8>
	...

08004084 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <HAL_MspInit+0x44>)
 800408c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408e:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <HAL_MspInit+0x44>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6613      	str	r3, [r2, #96]	; 0x60
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <HAL_MspInit+0x44>)
 8004098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_MspInit+0x44>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <HAL_MspInit+0x44>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6593      	str	r3, [r2, #88]	; 0x58
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_MspInit+0x44>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80040ba:	2005      	movs	r0, #5
 80040bc:	f001 fccc 	bl	8005a58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000

080040cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <HAL_CRC_MspInit+0x38>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10b      	bne.n	80040f6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_CRC_MspInit+0x3c>)
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	4a09      	ldr	r2, [pc, #36]	; (8004108 <HAL_CRC_MspInit+0x3c>)
 80040e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040e8:	6493      	str	r3, [r2, #72]	; 0x48
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <HAL_CRC_MspInit+0x3c>)
 80040ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40023000 	.word	0x40023000
 8004108:	40021000 	.word	0x40021000

0800410c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b0b6      	sub	sp, #216	; 0xd8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004114:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004128:	2294      	movs	r2, #148	; 0x94
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f022 fc8e 	bl	8026a4e <memset>
  if(hi2c->Instance==I2C1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4ab2      	ldr	r2, [pc, #712]	; (8004400 <HAL_I2C_MspInit+0x2f4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d13d      	bne.n	80041b8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004140:	2300      	movs	r3, #0
 8004142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fecc 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004156:	f7ff ff8f 	bl	8004078 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800415a:	4baa      	ldr	r3, [pc, #680]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	4aa9      	ldr	r2, [pc, #676]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004166:	4ba7      	ldr	r3, [pc, #668]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004176:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800417a:	2312      	movs	r3, #18
 800417c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004180:	2301      	movs	r3, #1
 8004182:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004186:	2303      	movs	r3, #3
 8004188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800418c:	2304      	movs	r3, #4
 800418e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004192:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004196:	4619      	mov	r1, r3
 8004198:	489b      	ldr	r0, [pc, #620]	; (8004408 <HAL_I2C_MspInit+0x2fc>)
 800419a:	f002 f8db 	bl	8006354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800419e:	4b99      	ldr	r3, [pc, #612]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	4a98      	ldr	r2, [pc, #608]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80041a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041a8:	6593      	str	r3, [r2, #88]	; 0x58
 80041aa:	4b96      	ldr	r3, [pc, #600]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80041b6:	e11e      	b.n	80043f6 <HAL_I2C_MspInit+0x2ea>
  else if(hi2c->Instance==I2C2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a93      	ldr	r2, [pc, #588]	; (800440c <HAL_I2C_MspInit+0x300>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d151      	bne.n	8004266 <HAL_I2C_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 fe89 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 80041dc:	f7ff ff4c 	bl	8004078 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041e0:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80041e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e4:	4a87      	ldr	r2, [pc, #540]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80041e6:	f043 0320 	orr.w	r3, r3, #32
 80041ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ec:	4b85      	ldr	r3, [pc, #532]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041f8:	2303      	movs	r3, #3
 80041fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041fe:	2312      	movs	r3, #18
 8004200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004204:	2301      	movs	r3, #1
 8004206:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420a:	2303      	movs	r3, #3
 800420c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004210:	2304      	movs	r3, #4
 8004212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004216:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800421a:	4619      	mov	r1, r3
 800421c:	487c      	ldr	r0, [pc, #496]	; (8004410 <HAL_I2C_MspInit+0x304>)
 800421e:	f002 f899 	bl	8006354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004222:	2304      	movs	r3, #4
 8004224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004228:	2312      	movs	r3, #18
 800422a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004234:	2303      	movs	r3, #3
 8004236:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800423a:	2304      	movs	r3, #4
 800423c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004240:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004244:	4619      	mov	r1, r3
 8004246:	4872      	ldr	r0, [pc, #456]	; (8004410 <HAL_I2C_MspInit+0x304>)
 8004248:	f002 f884 	bl	8006354 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800424c:	4b6d      	ldr	r3, [pc, #436]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	4a6c      	ldr	r2, [pc, #432]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004256:	6593      	str	r3, [r2, #88]	; 0x58
 8004258:	4b6a      	ldr	r3, [pc, #424]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004260:	623b      	str	r3, [r7, #32]
 8004262:	6a3b      	ldr	r3, [r7, #32]
}
 8004264:	e0c7      	b.n	80043f6 <HAL_I2C_MspInit+0x2ea>
  else if(hi2c->Instance==I2C3)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6a      	ldr	r2, [pc, #424]	; (8004414 <HAL_I2C_MspInit+0x308>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d15e      	bne.n	800432e <HAL_I2C_MspInit+0x222>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004274:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004276:	2300      	movs	r3, #0
 8004278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800427c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004280:	4618      	mov	r0, r3
 8004282:	f003 fe31 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_I2C_MspInit+0x184>
      Error_Handler();
 800428c:	f7ff fef4 	bl	8004078 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004290:	4b5c      	ldr	r3, [pc, #368]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	4a5b      	ldr	r2, [pc, #364]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800429c:	4b59      	ldr	r3, [pc, #356]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042a8:	4b56      	ldr	r3, [pc, #344]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80042aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ac:	4a55      	ldr	r2, [pc, #340]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80042ae:	f043 0302 	orr.w	r3, r3, #2
 80042b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042b4:	4b53      	ldr	r3, [pc, #332]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80042b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042c6:	2312      	movs	r3, #18
 80042c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80042d8:	2304      	movs	r3, #4
 80042da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80042e2:	4619      	mov	r1, r3
 80042e4:	484c      	ldr	r0, [pc, #304]	; (8004418 <HAL_I2C_MspInit+0x30c>)
 80042e6:	f002 f835 	bl	8006354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80042ea:	2310      	movs	r3, #16
 80042ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f0:	2312      	movs	r3, #18
 80042f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004302:	2304      	movs	r3, #4
 8004304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004308:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800430c:	4619      	mov	r1, r3
 800430e:	483e      	ldr	r0, [pc, #248]	; (8004408 <HAL_I2C_MspInit+0x2fc>)
 8004310:	f002 f820 	bl	8006354 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004314:	4b3b      	ldr	r3, [pc, #236]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004318:	4a3a      	ldr	r2, [pc, #232]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 800431a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800431e:	6593      	str	r3, [r2, #88]	; 0x58
 8004320:	4b38      	ldr	r3, [pc, #224]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	697b      	ldr	r3, [r7, #20]
}
 800432c:	e063      	b.n	80043f6 <HAL_I2C_MspInit+0x2ea>
  else if(hi2c->Instance==I2C4)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a3a      	ldr	r2, [pc, #232]	; (800441c <HAL_I2C_MspInit+0x310>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d15e      	bne.n	80043f6 <HAL_I2C_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004338:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800433c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004348:	4618      	mov	r0, r3
 800434a:	f003 fdcd 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_I2C_MspInit+0x24c>
      Error_Handler();
 8004354:	f7ff fe90 	bl	8004078 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 800435e:	f043 0320 	orr.w	r3, r3, #32
 8004362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004374:	4a23      	ldr	r2, [pc, #140]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 8004376:	f043 0302 	orr.w	r3, r3, #2
 800437a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 800437e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004390:	2312      	movs	r3, #18
 8004392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004396:	2301      	movs	r3, #1
 8004398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439c:	2303      	movs	r3, #3
 800439e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80043a2:	2304      	movs	r3, #4
 80043a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4818      	ldr	r0, [pc, #96]	; (8004410 <HAL_I2C_MspInit+0x304>)
 80043b0:	f001 ffd0 	bl	8006354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043b4:	2340      	movs	r3, #64	; 0x40
 80043b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043ba:	2312      	movs	r3, #18
 80043bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c6:	2303      	movs	r3, #3
 80043c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C4;
 80043cc:	2305      	movs	r3, #5
 80043ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80043d6:	4619      	mov	r1, r3
 80043d8:	480b      	ldr	r0, [pc, #44]	; (8004408 <HAL_I2C_MspInit+0x2fc>)
 80043da:	f001 ffbb 	bl	8006354 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80043e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e2:	4a08      	ldr	r2, [pc, #32]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_I2C_MspInit+0x2f8>)
 80043ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
}
 80043f6:	bf00      	nop
 80043f8:	37d8      	adds	r7, #216	; 0xd8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40005400 	.word	0x40005400
 8004404:	40021000 	.word	0x40021000
 8004408:	48000400 	.word	0x48000400
 800440c:	40005800 	.word	0x40005800
 8004410:	48001400 	.word	0x48001400
 8004414:	40005c00 	.word	0x40005c00
 8004418:	48000800 	.word	0x48000800
 800441c:	40008400 	.word	0x40008400

08004420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	; 0x30
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004428:	f107 031c 	add.w	r3, r7, #28
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a6e      	ldr	r2, [pc, #440]	; (80045f8 <HAL_SPI_MspInit+0x1d8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d15a      	bne.n	80044f8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004442:	4b6e      	ldr	r3, [pc, #440]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	4a6d      	ldr	r2, [pc, #436]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800444c:	6613      	str	r3, [r2, #96]	; 0x60
 800444e:	4b6b      	ldr	r3, [pc, #428]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445a:	4b68      	ldr	r3, [pc, #416]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	4a67      	ldr	r2, [pc, #412]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004466:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|DISPL_MISO_Pin|DISPL_MOSI_Pin;
 8004472:	23e0      	movs	r3, #224	; 0xe0
 8004474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004476:	2302      	movs	r3, #2
 8004478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	2300      	movs	r3, #0
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447e:	2303      	movs	r3, #3
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004482:	2305      	movs	r3, #5
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004486:	f107 031c 	add.w	r3, r7, #28
 800448a:	4619      	mov	r1, r3
 800448c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004490:	f001 ff60 	bl	8006354 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8004494:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 8004496:	4a5b      	ldr	r2, [pc, #364]	; (8004604 <HAL_SPI_MspInit+0x1e4>)
 8004498:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800449a:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 800449c:	220b      	movs	r2, #11
 800449e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044a0:	4b57      	ldr	r3, [pc, #348]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044a2:	2210      	movs	r2, #16
 80044a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044a6:	4b56      	ldr	r3, [pc, #344]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044ac:	4b54      	ldr	r3, [pc, #336]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044ae:	2280      	movs	r2, #128	; 0x80
 80044b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044b2:	4b53      	ldr	r3, [pc, #332]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044b8:	4b51      	ldr	r3, [pc, #324]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80044be:	4b50      	ldr	r3, [pc, #320]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044c4:	4b4e      	ldr	r3, [pc, #312]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80044ca:	484d      	ldr	r0, [pc, #308]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044cc:	f001 fc14 	bl	8005cf8 <HAL_DMA_Init>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80044d6:	f7ff fdcf 	bl	8004078 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a48      	ldr	r2, [pc, #288]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044de:	655a      	str	r2, [r3, #84]	; 0x54
 80044e0:	4a47      	ldr	r2, [pc, #284]	; (8004600 <HAL_SPI_MspInit+0x1e0>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80044e6:	2200      	movs	r2, #0
 80044e8:	2103      	movs	r1, #3
 80044ea:	2023      	movs	r0, #35	; 0x23
 80044ec:	f001 fabf 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80044f0:	2023      	movs	r0, #35	; 0x23
 80044f2:	f001 fad8 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80044f6:	e07a      	b.n	80045ee <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a42      	ldr	r2, [pc, #264]	; (8004608 <HAL_SPI_MspInit+0x1e8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d175      	bne.n	80045ee <HAL_SPI_MspInit+0x1ce>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004502:	4b3e      	ldr	r3, [pc, #248]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004506:	4a3d      	ldr	r2, [pc, #244]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800450c:	6593      	str	r3, [r2, #88]	; 0x58
 800450e:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800451a:	4b38      	ldr	r3, [pc, #224]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	4a37      	ldr	r2, [pc, #220]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004526:	4b35      	ldr	r3, [pc, #212]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004532:	4b32      	ldr	r3, [pc, #200]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	4a31      	ldr	r2, [pc, #196]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004538:	f043 0302 	orr.w	r3, r3, #2
 800453c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_SPI_MspInit+0x1dc>)
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|TOUCH_MOSI_Pin;
 800454a:	230c      	movs	r3, #12
 800454c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454e:	2302      	movs	r3, #2
 8004550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004556:	2303      	movs	r3, #3
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800455a:	2305      	movs	r3, #5
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800455e:	f107 031c 	add.w	r3, r7, #28
 8004562:	4619      	mov	r1, r3
 8004564:	4829      	ldr	r0, [pc, #164]	; (800460c <HAL_SPI_MspInit+0x1ec>)
 8004566:	f001 fef5 	bl	8006354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOUCH_SCK_Pin;
 800456a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800456e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004578:	2303      	movs	r3, #3
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800457c:	2305      	movs	r3, #5
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOUCH_SCK_GPIO_Port, &GPIO_InitStruct);
 8004580:	f107 031c 	add.w	r3, r7, #28
 8004584:	4619      	mov	r1, r3
 8004586:	4822      	ldr	r0, [pc, #136]	; (8004610 <HAL_SPI_MspInit+0x1f0>)
 8004588:	f001 fee4 	bl	8006354 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 800458e:	4a22      	ldr	r2, [pc, #136]	; (8004618 <HAL_SPI_MspInit+0x1f8>)
 8004590:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 8004594:	220d      	movs	r2, #13
 8004596:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 800459a:	2210      	movs	r2, #16
 800459c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800459e:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045a4:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045aa:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045b0:	4b18      	ldr	r3, [pc, #96]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80045b6:	4b17      	ldr	r3, [pc, #92]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045bc:	4b15      	ldr	r3, [pc, #84]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 80045be:	2200      	movs	r2, #0
 80045c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80045c2:	4814      	ldr	r0, [pc, #80]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 80045c4:	f001 fb98 	bl	8005cf8 <HAL_DMA_Init>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_SPI_MspInit+0x1b2>
      Error_Handler();
 80045ce:	f7ff fd53 	bl	8004078 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a0f      	ldr	r2, [pc, #60]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54
 80045d8:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <HAL_SPI_MspInit+0x1f4>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 80045de:	2200      	movs	r2, #0
 80045e0:	2103      	movs	r1, #3
 80045e2:	2024      	movs	r0, #36	; 0x24
 80045e4:	f001 fa43 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80045e8:	2024      	movs	r0, #36	; 0x24
 80045ea:	f001 fa5c 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 80045ee:	bf00      	nop
 80045f0:	3730      	adds	r7, #48	; 0x30
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40013000 	.word	0x40013000
 80045fc:	40021000 	.word	0x40021000
 8004600:	200005e0 	.word	0x200005e0
 8004604:	4002001c 	.word	0x4002001c
 8004608:	40003800 	.word	0x40003800
 800460c:	48000800 	.word	0x48000800
 8004610:	48000400 	.word	0x48000400
 8004614:	20000640 	.word	0x20000640
 8004618:	40020008 	.word	0x40020008

0800461c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004624:	f107 031c 	add.w	r3, r7, #28
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463c:	d114      	bne.n	8004668 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800463e:	4b31      	ldr	r3, [pc, #196]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	4a30      	ldr	r2, [pc, #192]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6593      	str	r3, [r2, #88]	; 0x58
 800464a:	4b2e      	ldr	r3, [pc, #184]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8004656:	2200      	movs	r2, #0
 8004658:	2102      	movs	r1, #2
 800465a:	201c      	movs	r0, #28
 800465c:	f001 fa07 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004660:	201c      	movs	r0, #28
 8004662:	f001 fa20 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004666:	e049      	b.n	80046fc <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM4)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a26      	ldr	r2, [pc, #152]	; (8004708 <HAL_TIM_Base_MspInit+0xec>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d144      	bne.n	80046fc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	4a23      	ldr	r2, [pc, #140]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	6593      	str	r3, [r2, #88]	; 0x58
 800467e:	4b21      	ldr	r3, [pc, #132]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800468a:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004696:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80046a2:	4b18      	ldr	r3, [pc, #96]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	4a17      	ldr	r2, [pc, #92]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 80046a8:	f043 0310 	orr.w	r3, r3, #16
 80046ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <HAL_TIM_Base_MspInit+0xe8>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80046ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80046be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	2302      	movs	r3, #2
 80046c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	2300      	movs	r3, #0
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046cc:	2302      	movs	r3, #2
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046d0:	f107 031c 	add.w	r3, r7, #28
 80046d4:	4619      	mov	r1, r3
 80046d6:	480d      	ldr	r0, [pc, #52]	; (800470c <HAL_TIM_Base_MspInit+0xf0>)
 80046d8:	f001 fe3c 	bl	8006354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046dc:	2301      	movs	r3, #1
 80046de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e0:	2302      	movs	r3, #2
 80046e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046ec:	2302      	movs	r3, #2
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046f0:	f107 031c 	add.w	r3, r7, #28
 80046f4:	4619      	mov	r1, r3
 80046f6:	4806      	ldr	r0, [pc, #24]	; (8004710 <HAL_TIM_Base_MspInit+0xf4>)
 80046f8:	f001 fe2c 	bl	8006354 <HAL_GPIO_Init>
}
 80046fc:	bf00      	nop
 80046fe:	3730      	adds	r7, #48	; 0x30
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	40000800 	.word	0x40000800
 800470c:	48000c00 	.word	0x48000c00
 8004710:	48001000 	.word	0x48001000

08004714 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a20      	ldr	r2, [pc, #128]	; (80047b4 <HAL_TIM_PWM_MspInit+0xa0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d128      	bne.n	8004788 <HAL_TIM_PWM_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004736:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <HAL_TIM_PWM_MspInit+0xa4>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <HAL_TIM_PWM_MspInit+0xa4>)
 800473c:	f043 0302 	orr.w	r3, r3, #2
 8004740:	6593      	str	r3, [r2, #88]	; 0x58
 8004742:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_TIM_PWM_MspInit+0xa4>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800474e:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <HAL_TIM_PWM_MspInit+0xa4>)
 8004750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004752:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <HAL_TIM_PWM_MspInit+0xa4>)
 8004754:	f043 0302 	orr.w	r3, r3, #2
 8004758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800475a:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <HAL_TIM_PWM_MspInit+0xa4>)
 800475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004766:	2301      	movs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476a:	2302      	movs	r3, #2
 800476c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004772:	2300      	movs	r3, #0
 8004774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004776:	2302      	movs	r3, #2
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477a:	f107 0314 	add.w	r3, r7, #20
 800477e:	4619      	mov	r1, r3
 8004780:	480e      	ldr	r0, [pc, #56]	; (80047bc <HAL_TIM_PWM_MspInit+0xa8>)
 8004782:	f001 fde7 	bl	8006354 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004786:	e010      	b.n	80047aa <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM5)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <HAL_TIM_PWM_MspInit+0xac>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d10b      	bne.n	80047aa <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <HAL_TIM_PWM_MspInit+0xa4>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	4a08      	ldr	r2, [pc, #32]	; (80047b8 <HAL_TIM_PWM_MspInit+0xa4>)
 8004798:	f043 0308 	orr.w	r3, r3, #8
 800479c:	6593      	str	r3, [r2, #88]	; 0x58
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <HAL_TIM_PWM_MspInit+0xa4>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
}
 80047aa:	bf00      	nop
 80047ac:	3728      	adds	r7, #40	; 0x28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40021000 	.word	0x40021000
 80047bc:	48000400 	.word	0x48000400
 80047c0:	40000c00 	.word	0x40000c00

080047c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a22      	ldr	r2, [pc, #136]	; (800486c <HAL_TIM_MspPostInit+0xa8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d11c      	bne.n	8004820 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e6:	4b22      	ldr	r3, [pc, #136]	; (8004870 <HAL_TIM_MspPostInit+0xac>)
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	4a21      	ldr	r2, [pc, #132]	; (8004870 <HAL_TIM_MspPostInit+0xac>)
 80047ec:	f043 0302 	orr.w	r3, r3, #2
 80047f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047f2:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <HAL_TIM_MspPostInit+0xac>)
 80047f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DISPL_LED_Pin;
 80047fe:	2320      	movs	r3, #32
 8004800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004802:	2302      	movs	r3, #2
 8004804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480a:	2300      	movs	r3, #0
 800480c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800480e:	2302      	movs	r3, #2
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_LED_GPIO_Port, &GPIO_InitStruct);
 8004812:	f107 0314 	add.w	r3, r7, #20
 8004816:	4619      	mov	r1, r3
 8004818:	4816      	ldr	r0, [pc, #88]	; (8004874 <HAL_TIM_MspPostInit+0xb0>)
 800481a:	f001 fd9b 	bl	8006354 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800481e:	e021      	b.n	8004864 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a14      	ldr	r2, [pc, #80]	; (8004878 <HAL_TIM_MspPostInit+0xb4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d11c      	bne.n	8004864 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <HAL_TIM_MspPostInit+0xac>)
 800482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482e:	4a10      	ldr	r2, [pc, #64]	; (8004870 <HAL_TIM_MspPostInit+0xac>)
 8004830:	f043 0320 	orr.w	r3, r3, #32
 8004834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004836:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <HAL_TIM_MspPostInit+0xac>)
 8004838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004848:	2302      	movs	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004850:	2300      	movs	r3, #0
 8004852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004854:	2302      	movs	r3, #2
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004858:	f107 0314 	add.w	r3, r7, #20
 800485c:	4619      	mov	r1, r3
 800485e:	4807      	ldr	r0, [pc, #28]	; (800487c <HAL_TIM_MspPostInit+0xb8>)
 8004860:	f001 fd78 	bl	8006354 <HAL_GPIO_Init>
}
 8004864:	bf00      	nop
 8004866:	3728      	adds	r7, #40	; 0x28
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40000400 	.word	0x40000400
 8004870:	40021000 	.word	0x40021000
 8004874:	48000400 	.word	0x48000400
 8004878:	40000c00 	.word	0x40000c00
 800487c:	48001400 	.word	0x48001400

08004880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b0b0      	sub	sp, #192	; 0xc0
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004888:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004898:	f107 0318 	add.w	r3, r7, #24
 800489c:	2294      	movs	r2, #148	; 0x94
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f022 f8d4 	bl	8026a4e <memset>
  if(huart->Instance==USART2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a4a      	ldr	r2, [pc, #296]	; (80049d4 <HAL_UART_MspInit+0x154>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d143      	bne.n	8004938 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80048b0:	2302      	movs	r3, #2
 80048b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80048b4:	2300      	movs	r3, #0
 80048b6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048b8:	f107 0318 	add.w	r3, r7, #24
 80048bc:	4618      	mov	r0, r3
 80048be:	f003 fb13 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80048c8:	f7ff fbd6 	bl	8004078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048cc:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <HAL_UART_MspInit+0x158>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	4a41      	ldr	r2, [pc, #260]	; (80049d8 <HAL_UART_MspInit+0x158>)
 80048d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d6:	6593      	str	r3, [r2, #88]	; 0x58
 80048d8:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <HAL_UART_MspInit+0x158>)
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048e4:	4b3c      	ldr	r3, [pc, #240]	; (80049d8 <HAL_UART_MspInit+0x158>)
 80048e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e8:	4a3b      	ldr	r2, [pc, #236]	; (80049d8 <HAL_UART_MspInit+0x158>)
 80048ea:	f043 0308 	orr.w	r3, r3, #8
 80048ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048f0:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <HAL_UART_MspInit+0x158>)
 80048f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80048fc:	2360      	movs	r3, #96	; 0x60
 80048fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004902:	2302      	movs	r3, #2
 8004904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490e:	2303      	movs	r3, #3
 8004910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004914:	2307      	movs	r3, #7
 8004916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800491a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800491e:	4619      	mov	r1, r3
 8004920:	482e      	ldr	r0, [pc, #184]	; (80049dc <HAL_UART_MspInit+0x15c>)
 8004922:	f001 fd17 	bl	8006354 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004926:	2200      	movs	r2, #0
 8004928:	2100      	movs	r1, #0
 800492a:	2026      	movs	r0, #38	; 0x26
 800492c:	f001 f89f 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004930:	2026      	movs	r0, #38	; 0x26
 8004932:	f001 f8b8 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004936:	e048      	b.n	80049ca <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <HAL_UART_MspInit+0x160>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d143      	bne.n	80049ca <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004942:	2304      	movs	r3, #4
 8004944:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004946:	2300      	movs	r3, #0
 8004948:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800494a:	f107 0318 	add.w	r3, r7, #24
 800494e:	4618      	mov	r0, r3
 8004950:	f003 faca 	bl	8007ee8 <HAL_RCCEx_PeriphCLKConfig>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800495a:	f7ff fb8d 	bl	8004078 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800495e:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <HAL_UART_MspInit+0x158>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	4a1d      	ldr	r2, [pc, #116]	; (80049d8 <HAL_UART_MspInit+0x158>)
 8004964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004968:	6593      	str	r3, [r2, #88]	; 0x58
 800496a:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_UART_MspInit+0x158>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004976:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <HAL_UART_MspInit+0x158>)
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_UART_MspInit+0x158>)
 800497c:	f043 0308 	orr.w	r3, r3, #8
 8004980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_UART_MspInit+0x158>)
 8004984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800498e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004996:	2302      	movs	r3, #2
 8004998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a2:	2303      	movs	r3, #3
 80049a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049a8:	2307      	movs	r3, #7
 80049aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80049b2:	4619      	mov	r1, r3
 80049b4:	4809      	ldr	r0, [pc, #36]	; (80049dc <HAL_UART_MspInit+0x15c>)
 80049b6:	f001 fccd 	bl	8006354 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80049ba:	2200      	movs	r2, #0
 80049bc:	2100      	movs	r1, #0
 80049be:	2027      	movs	r0, #39	; 0x27
 80049c0:	f001 f855 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80049c4:	2027      	movs	r0, #39	; 0x27
 80049c6:	f001 f86e 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 80049ca:	bf00      	nop
 80049cc:	37c0      	adds	r7, #192	; 0xc0
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40004400 	.word	0x40004400
 80049d8:	40021000 	.word	0x40021000
 80049dc:	48000c00 	.word	0x48000c00
 80049e0:	40004800 	.word	0x40004800

080049e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049e8:	e7fe      	b.n	80049e8 <NMI_Handler+0x4>

080049ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ea:	b480      	push	{r7}
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ee:	e7fe      	b.n	80049ee <HardFault_Handler+0x4>

080049f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049f4:	e7fe      	b.n	80049f4 <MemManage_Handler+0x4>

080049f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049fa:	e7fe      	b.n	80049fa <BusFault_Handler+0x4>

080049fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a00:	e7fe      	b.n	8004a00 <UsageFault_Handler+0x4>

08004a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a30:	f000 febc 	bl	80057ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a34:	bf00      	nop
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 8004a3c:	2002      	movs	r0, #2
 8004a3e:	f001 fe33 	bl	80066a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004a4c:	4802      	ldr	r0, [pc, #8]	; (8004a58 <DMA1_Channel1_IRQHandler+0x10>)
 8004a4e:	f001 fb31 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000640 	.word	0x20000640

08004a5c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <DMA1_Channel2_IRQHandler+0x10>)
 8004a62:	f001 fb27 	bl	80060b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200005e0 	.word	0x200005e0

08004a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a74:	4802      	ldr	r0, [pc, #8]	; (8004a80 <TIM2_IRQHandler+0x10>)
 8004a76:	f005 fb55 	bl	800a124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200006a0 	.word	0x200006a0

08004a84 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <SPI1_IRQHandler+0x10>)
 8004a8a:	f004 fda7 	bl	80095dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000518 	.word	0x20000518

08004a98 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <SPI2_IRQHandler+0x10>)
 8004a9e:	f004 fd9d 	bl	80095dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000057c 	.word	0x2000057c

08004aac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <USART2_IRQHandler+0x10>)
 8004ab2:	f006 fc45 	bl	800b340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200007d0 	.word	0x200007d0

08004ac0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ac4:	4802      	ldr	r0, [pc, #8]	; (8004ad0 <USART3_IRQHandler+0x10>)
 8004ac6:	f006 fc3b 	bl	800b340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000864 	.word	0x20000864

08004ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return 1;
 8004ad8:	2301      	movs	r3, #1
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <_kill>:

int _kill(int pid, int sig)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004aee:	f022 f851 	bl	8026b94 <__errno>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2216      	movs	r2, #22
 8004af6:	601a      	str	r2, [r3, #0]
  return -1;
 8004af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <_exit>:

void _exit (int status)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ffe7 	bl	8004ae4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b16:	e7fe      	b.n	8004b16 <_exit+0x12>

08004b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e00a      	b.n	8004b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b2a:	f3af 8000 	nop.w
 8004b2e:	4601      	mov	r1, r0
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	60ba      	str	r2, [r7, #8]
 8004b36:	b2ca      	uxtb	r2, r1
 8004b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	dbf0      	blt.n	8004b2a <_read+0x12>
  }

  return len;
 8004b48:	687b      	ldr	r3, [r7, #4]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e009      	b.n	8004b78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	60ba      	str	r2, [r7, #8]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	3301      	adds	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	dbf1      	blt.n	8004b64 <_write+0x12>
  }
  return len;
 8004b80:	687b      	ldr	r3, [r7, #4]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <_close>:

int _close(int file)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bb2:	605a      	str	r2, [r3, #4]
  return 0;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <_isatty>:

int _isatty(int file)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bca:	2301      	movs	r3, #1
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bfc:	4a14      	ldr	r2, [pc, #80]	; (8004c50 <_sbrk+0x5c>)
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <_sbrk+0x60>)
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c08:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <_sbrk+0x64>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c10:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <_sbrk+0x64>)
 8004c12:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <_sbrk+0x68>)
 8004c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c16:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <_sbrk+0x64>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d207      	bcs.n	8004c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c24:	f021 ffb6 	bl	8026b94 <__errno>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	220c      	movs	r2, #12
 8004c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c32:	e009      	b.n	8004c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <_sbrk+0x64>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <_sbrk+0x64>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	4a05      	ldr	r2, [pc, #20]	; (8004c58 <_sbrk+0x64>)
 8004c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c46:	68fb      	ldr	r3, [r7, #12]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200a0000 	.word	0x200a0000
 8004c54:	00000400 	.word	0x00000400
 8004c58:	20023bd0 	.word	0x20023bd0
 8004c5c:	20026490 	.word	0x20026490

08004c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <SystemInit+0x20>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	4a05      	ldr	r2, [pc, #20]	; (8004c80 <SystemInit+0x20>)
 8004c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004c74:	bf00      	nop
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
		}
	}
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6039      	str	r1, [r7, #0]
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	71fb      	strb	r3, [r7, #7]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	80bb      	strh	r3, [r7, #4]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004cac:	bf00      	nop
 8004cae:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <Displ_Transmit+0xb0>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0fa      	beq.n	8004cae <Displ_Transmit+0x1a>

	Displ_Select();
 8004cb8:	f7ff ffe4 	bl	8004c84 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cc4:	4820      	ldr	r0, [pc, #128]	; (8004d48 <Displ_Transmit+0xb4>)
 8004cc6:	f001 fcd7 	bl	8006678 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8004cca:	79bb      	ldrb	r3, [r7, #6]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d016      	beq.n	8004cfe <Displ_Transmit+0x6a>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8004cd0:	88bb      	ldrh	r3, [r7, #4]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e00b      	b.n	8004cf6 <Displ_Transmit+0x62>
			*data32=__REV16(*data32);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	ba5b      	rev16	r3, r3
 8004ce8:	60bb      	str	r3, [r7, #8]
  return result;
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3ef      	bcc.n	8004cde <Displ_Transmit+0x4a>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8004cfe:	88bb      	ldrh	r3, [r7, #4]
 8004d00:	2b13      	cmp	r3, #19
 8004d02:	d812      	bhi.n	8004d2a <Displ_Transmit+0x96>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <Displ_Transmit+0xb0>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004d0a:	88ba      	ldrh	r2, [r7, #4]
 8004d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	480e      	ldr	r0, [pc, #56]	; (8004d4c <Displ_Transmit+0xb8>)
 8004d14:	f003 fea3 	bl	8008a5e <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <Displ_Transmit+0xb0>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
#ifdef DISPLAY_USING_TOUCHGFX
			if (isTouchGFXBuffer){
 8004d1e:	79bb      	ldrb	r3, [r7, #6]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00b      	beq.n	8004d3c <Displ_Transmit+0xa8>
				DisplayDriver_TransferCompleteCallback();
 8004d24:	f00d f806 	bl	8011d34 <DisplayDriver_TransferCompleteCallback>
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8004d28:	e008      	b.n	8004d3c <Displ_Transmit+0xa8>
			Displ_SpiAvailable=0;
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <Displ_Transmit+0xb0>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004d30:	88bb      	ldrh	r3, [r7, #4]
 8004d32:	461a      	mov	r2, r3
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	4805      	ldr	r0, [pc, #20]	; (8004d4c <Displ_Transmit+0xb8>)
 8004d38:	f004 fb60 	bl	80093fc <HAL_SPI_Transmit_DMA>
	}
 8004d3c:	bf00      	nop
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	2000028c 	.word	0x2000028c
 8004d48:	48001400 	.word	0x48001400
 8004d4c:	20000518 	.word	0x20000518

08004d50 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8004d5a:	1df9      	adds	r1, r7, #7
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2000      	movs	r0, #0
 8004d62:	f7ff ff97 	bl	8004c94 <Displ_Transmit>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	68f9      	ldr	r1, [r7, #12]
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	f7ff ff82 	bl	8004c94 <Displ_Transmit>
 8004d90:	e000      	b.n	8004d94 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8004d92:	bf00      	nop
}
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
	Displ_Select();
 8004da0:	f7ff ff70 	bl	8004c84 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004da4:	2200      	movs	r2, #0
 8004da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004daa:	481a      	ldr	r0, [pc, #104]	; (8004e14 <ILI9XXX_Init+0x78>)
 8004dac:	f001 fc64 	bl	8006678 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004db0:	2001      	movs	r0, #1
 8004db2:	f000 fd1b 	bl	80057ec <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004db6:	2201      	movs	r2, #1
 8004db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dbc:	4815      	ldr	r0, [pc, #84]	; (8004e14 <ILI9XXX_Init+0x78>)
 8004dbe:	f001 fc5b 	bl	8006678 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8004dc2:	2096      	movs	r0, #150	; 0x96
 8004dc4:	f000 fd12 	bl	80057ec <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004dc8:	203a      	movs	r0, #58	; 0x3a
 8004dca:	f7ff ffc1 	bl	8004d50 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	4811      	ldr	r0, [pc, #68]	; (8004e18 <ILI9XXX_Init+0x7c>)
 8004dd4:	f7ff ffcb 	bl	8004d6e <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004dd8:	20b0      	movs	r0, #176	; 0xb0
 8004dda:	f7ff ffb9 	bl	8004d50 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004dde:	2200      	movs	r2, #0
 8004de0:	2101      	movs	r1, #1
 8004de2:	480e      	ldr	r0, [pc, #56]	; (8004e1c <ILI9XXX_Init+0x80>)
 8004de4:	f7ff ffc3 	bl	8004d6e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004de8:	20b0      	movs	r0, #176	; 0xb0
 8004dea:	f7ff ffb1 	bl	8004d50 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004dee:	2200      	movs	r2, #0
 8004df0:	2101      	movs	r1, #1
 8004df2:	480a      	ldr	r0, [pc, #40]	; (8004e1c <ILI9XXX_Init+0x80>)
 8004df4:	f7ff ffbb 	bl	8004d6e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004df8:	2011      	movs	r0, #17
 8004dfa:	f7ff ffa9 	bl	8004d50 <Displ_WriteCommand>
	HAL_Delay(120);
 8004dfe:	2078      	movs	r0, #120	; 0x78
 8004e00:	f000 fcf4 	bl	80057ec <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004e04:	2029      	movs	r0, #41	; 0x29
 8004e06:	f7ff ffa3 	bl	8004d50 <Displ_WriteCommand>
	HAL_Delay(5);
 8004e0a:	2005      	movs	r0, #5
 8004e0c:	f000 fcee 	bl	80057ec <HAL_Delay>

}
 8004e10:	bf00      	nop
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	48001400 	.word	0x48001400
 8004e18:	080276b0 	.word	0x080276b0
 8004e1c:	080276b4 	.word	0x080276b4

08004e20 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4604      	mov	r4, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	80fb      	strh	r3, [r7, #6]
 8004e32:	4603      	mov	r3, r0
 8004e34:	80bb      	strh	r3, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	807b      	strh	r3, [r7, #2]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004e3e:	887b      	ldrh	r3, [r7, #2]
 8004e40:	061a      	lsls	r2, r3, #24
 8004e42:	887b      	ldrh	r3, [r7, #2]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4313      	orrs	r3, r2
 8004e54:	88fa      	ldrh	r2, [r7, #6]
 8004e56:	0a12      	lsrs	r2, r2, #8
 8004e58:	b292      	uxth	r2, r2
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <Displ_SetAddressWindow+0x90>)
 8004e5e:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004e60:	202a      	movs	r0, #42	; 0x2a
 8004e62:	f7ff ff75 	bl	8004d50 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8004e66:	2200      	movs	r2, #0
 8004e68:	2104      	movs	r1, #4
 8004e6a:	4811      	ldr	r0, [pc, #68]	; (8004eb0 <Displ_SetAddressWindow+0x90>)
 8004e6c:	f7ff ff7f 	bl	8004d6e <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004e70:	883b      	ldrh	r3, [r7, #0]
 8004e72:	061a      	lsls	r2, r3, #24
 8004e74:	883b      	ldrh	r3, [r7, #0]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	88bb      	ldrh	r3, [r7, #4]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4313      	orrs	r3, r2
 8004e86:	88ba      	ldrh	r2, [r7, #4]
 8004e88:	0a12      	lsrs	r2, r2, #8
 8004e8a:	b292      	uxth	r2, r2
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <Displ_SetAddressWindow+0x90>)
 8004e90:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004e92:	202b      	movs	r0, #43	; 0x2b
 8004e94:	f7ff ff5c 	bl	8004d50 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2104      	movs	r1, #4
 8004e9c:	4804      	ldr	r0, [pc, #16]	; (8004eb0 <Displ_SetAddressWindow+0x90>)
 8004e9e:	f7ff ff66 	bl	8004d6e <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8004ea2:	202c      	movs	r0, #44	; 0x2c
 8004ea4:	f7ff ff54 	bl	8004d50 <Displ_WriteCommand>
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd90      	pop	{r4, r7, pc}
 8004eb0:	20023bdc 	.word	0x20023bdc

08004eb4 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
	} else {																	// otherwise leave both port permanently selected
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ec4:	4816      	ldr	r0, [pc, #88]	; (8004f20 <Displ_Init+0x6c>)
 8004ec6:	f001 fbd7 	bl	8006678 <HAL_GPIO_WritePin>
		SET_DISPL_SPI_BAUDRATE;
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <Displ_Init+0x70>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4915      	ldr	r1, [pc, #84]	; (8004f24 <Displ_Init+0x70>)
 8004ed0:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	600b      	str	r3, [r1, #0]
 8004ed8:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <Displ_Init+0x70>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <Displ_Init+0x70>)
 8004ede:	f043 0308 	orr.w	r3, r3, #8
 8004ee2:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eea:	480f      	ldr	r0, [pc, #60]	; (8004f28 <Displ_Init+0x74>)
 8004eec:	f001 fbc4 	bl	8006678 <HAL_GPIO_WritePin>
		SET_TOUCH_SPI_BAUDRATE;
 8004ef0:	4b0e      	ldr	r3, [pc, #56]	; (8004f2c <Displ_Init+0x78>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	490d      	ldr	r1, [pc, #52]	; (8004f2c <Displ_Init+0x78>)
 8004ef6:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004efa:	4013      	ands	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
 8004efe:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <Displ_Init+0x78>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <Displ_Init+0x78>)
 8004f04:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004f08:	6013      	str	r3, [r2, #0]
	}
	ILI9XXX_Init();
 8004f0a:	f7ff ff47 	bl	8004d9c <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f80d 	bl	8004f30 <Displ_Orientation>
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	48001400 	.word	0x48001400
 8004f24:	40013000 	.word	0x40013000
 8004f28:	48001000 	.word	0x48001000
 8004f2c:	40003800 	.word	0x40003800

08004f30 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d837      	bhi.n	8004fb0 <Displ_Orientation+0x80>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <Displ_Orientation+0x18>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f6f 	.word	0x08004f6f
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004f9b 	.word	0x08004f9b
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <Displ_Orientation+0xa0>)
 8004f5a:	2288      	movs	r2, #136	; 0x88
 8004f5c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8004f5e:	4b1d      	ldr	r3, [pc, #116]	; (8004fd4 <Displ_Orientation+0xa4>)
 8004f60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f64:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8004f66:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <Displ_Orientation+0xa8>)
 8004f68:	22f0      	movs	r2, #240	; 0xf0
 8004f6a:	801a      	strh	r2, [r3, #0]
			break;
 8004f6c:	e020      	b.n	8004fb0 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8004f6e:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <Displ_Orientation+0xa0>)
 8004f70:	22e8      	movs	r2, #232	; 0xe8
 8004f72:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8004f74:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <Displ_Orientation+0xa4>)
 8004f76:	22f0      	movs	r2, #240	; 0xf0
 8004f78:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004f7a:	4b17      	ldr	r3, [pc, #92]	; (8004fd8 <Displ_Orientation+0xa8>)
 8004f7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f80:	801a      	strh	r2, [r3, #0]
			break;
 8004f82:	e015      	b.n	8004fb0 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8004f84:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <Displ_Orientation+0xa0>)
 8004f86:	2248      	movs	r2, #72	; 0x48
 8004f88:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <Displ_Orientation+0xa4>)
 8004f8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f90:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8004f92:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <Displ_Orientation+0xa8>)
 8004f94:	22f0      	movs	r2, #240	; 0xf0
 8004f96:	801a      	strh	r2, [r3, #0]
			break;
 8004f98:	e00a      	b.n	8004fb0 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <Displ_Orientation+0xa0>)
 8004f9c:	2228      	movs	r2, #40	; 0x28
 8004f9e:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <Displ_Orientation+0xa4>)
 8004fa2:	22f0      	movs	r2, #240	; 0xf0
 8004fa4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <Displ_Orientation+0xa8>)
 8004fa8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fac:	801a      	strh	r2, [r3, #0]
			break;
 8004fae:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8004fb0:	2036      	movs	r0, #54	; 0x36
 8004fb2:	f7ff fecd 	bl	8004d50 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4805      	ldr	r0, [pc, #20]	; (8004fd0 <Displ_Orientation+0xa0>)
 8004fbc:	f7ff fed7 	bl	8004d6e <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004fc0:	4a06      	ldr	r2, [pc, #24]	; (8004fdc <Displ_Orientation+0xac>)
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	7013      	strb	r3, [r2, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20023be0 	.word	0x20023be0
 8004fd4:	20023bd8 	.word	0x20023bd8
 8004fd8:	20023bd6 	.word	0x20023bd6
 8004fdc:	20023bd4 	.word	0x20023bd4

08004fe0 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a05      	ldr	r2, [pc, #20]	; (8005004 <HAL_SPI_ErrorCallback+0x24>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d102      	bne.n	8004ff8 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_SPI_ErrorCallback+0x28>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
	}
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40013000 	.word	0x40013000
 8005008:	2000028c 	.word	0x2000028c

0800500c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <HAL_SPI_TxCpltCallback+0x24>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d104      	bne.n	8005028 <HAL_SPI_TxCpltCallback+0x1c>
		Displ_SpiAvailable=1;
 800501e:	4b05      	ldr	r3, [pc, #20]	; (8005034 <HAL_SPI_TxCpltCallback+0x28>)
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]

	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
 8005024:	f00c fe86 	bl	8011d34 <DisplayDriver_TransferCompleteCallback>
	#endif

	}
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40013000 	.word	0x40013000
 8005034:	2000028c 	.word	0x2000028c

08005038 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	3b2b      	subs	r3, #43	; 0x2b
 8005046:	2b2c      	cmp	r3, #44	; 0x2c
 8005048:	f200 80a0 	bhi.w	800518c <Displ_BackLight+0x154>
 800504c:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <Displ_BackLight+0x1c>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005143 	.word	0x08005143
 8005058:	0800518d 	.word	0x0800518d
 800505c:	08005163 	.word	0x08005163
 8005060:	0800518d 	.word	0x0800518d
 8005064:	0800518d 	.word	0x0800518d
 8005068:	08005117 	.word	0x08005117
 800506c:	0800510d 	.word	0x0800510d
 8005070:	0800518d 	.word	0x0800518d
 8005074:	0800518d 	.word	0x0800518d
 8005078:	0800518d 	.word	0x0800518d
 800507c:	0800518d 	.word	0x0800518d
 8005080:	0800518d 	.word	0x0800518d
 8005084:	0800518d 	.word	0x0800518d
 8005088:	0800518d 	.word	0x0800518d
 800508c:	0800518d 	.word	0x0800518d
 8005090:	0800518d 	.word	0x0800518d
 8005094:	0800518d 	.word	0x0800518d
 8005098:	0800518d 	.word	0x0800518d
 800509c:	0800518d 	.word	0x0800518d
 80050a0:	0800518d 	.word	0x0800518d
 80050a4:	0800518d 	.word	0x0800518d
 80050a8:	0800518d 	.word	0x0800518d
 80050ac:	0800518d 	.word	0x0800518d
 80050b0:	0800518d 	.word	0x0800518d
 80050b4:	0800518d 	.word	0x0800518d
 80050b8:	0800518d 	.word	0x0800518d
 80050bc:	0800518d 	.word	0x0800518d
 80050c0:	0800510d 	.word	0x0800510d
 80050c4:	0800518d 	.word	0x0800518d
 80050c8:	0800518d 	.word	0x0800518d
 80050cc:	0800517d 	.word	0x0800517d
 80050d0:	0800518d 	.word	0x0800518d
 80050d4:	0800518d 	.word	0x0800518d
 80050d8:	0800518d 	.word	0x0800518d
 80050dc:	0800518d 	.word	0x0800518d
 80050e0:	0800518d 	.word	0x0800518d
 80050e4:	0800518d 	.word	0x0800518d
 80050e8:	0800518d 	.word	0x0800518d
 80050ec:	08005109 	.word	0x08005109
 80050f0:	0800518d 	.word	0x0800518d
 80050f4:	08005129 	.word	0x08005129
 80050f8:	0800518d 	.word	0x0800518d
 80050fc:	0800518d 	.word	0x0800518d
 8005100:	0800518d 	.word	0x0800518d
 8005104:	0800511f 	.word	0x0800511f
	case 'Q':
		__NOP();
 8005108:	bf00      	nop
		break;
 800510a:	e042      	b.n	8005192 <Displ_BackLight+0x15a>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
		break;
#else
	case 'F':
	case '1':
		BKLIT_TIMER->BKLIT_CCR=BKLIT_TIMER->ARR;
 800510c:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <Displ_BackLight+0x168>)
 800510e:	4a24      	ldr	r2, [pc, #144]	; (80051a0 <Displ_BackLight+0x168>)
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8005114:	e03d      	b.n	8005192 <Displ_BackLight+0x15a>
	case '0':
		BKLIT_TIMER->BKLIT_CCR=0;
 8005116:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <Displ_BackLight+0x168>)
 8005118:	2200      	movs	r2, #0
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800511c:	e039      	b.n	8005192 <Displ_BackLight+0x15a>
	case 'W':
		BKLIT_TIMER->BKLIT_CCR=memCCR1;					//restore previous level
 800511e:	4b21      	ldr	r3, [pc, #132]	; (80051a4 <Displ_BackLight+0x16c>)
 8005120:	881a      	ldrh	r2, [r3, #0]
 8005122:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <Displ_BackLight+0x168>)
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8005126:	e034      	b.n	8005192 <Displ_BackLight+0x15a>
	case 'S':
		memCCR1=BKLIT_TIMER->BKLIT_CCR;
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <Displ_BackLight+0x168>)
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	b29a      	uxth	r2, r3
 800512e:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <Displ_BackLight+0x16c>)
 8005130:	801a      	strh	r2, [r3, #0]
		if (BKLIT_TIMER->BKLIT_CCR>=(BKLIT_STBY_LEVEL))	//set stby level only if current level is higher
 8005132:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <Displ_BackLight+0x168>)
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	2b31      	cmp	r3, #49	; 0x31
 8005138:	d92a      	bls.n	8005190 <Displ_BackLight+0x158>
			BKLIT_TIMER->BKLIT_CCR=(BKLIT_STBY_LEVEL);
 800513a:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <Displ_BackLight+0x168>)
 800513c:	2232      	movs	r2, #50	; 0x32
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8005140:	e026      	b.n	8005190 <Displ_BackLight+0x158>
	case '+':
		if (BKLIT_TIMER->ARR>BKLIT_TIMER->BKLIT_CCR)		// if CCR1 has not yet the highest value (ARR)
 8005142:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <Displ_BackLight+0x168>)
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <Displ_BackLight+0x168>)
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	429a      	cmp	r2, r3
 800514c:	d904      	bls.n	8005158 <Displ_BackLight+0x120>
			++BKLIT_TIMER->BKLIT_CCR;
 800514e:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <Displ_BackLight+0x168>)
 8005150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005152:	3201      	adds	r2, #1
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
		else
			BKLIT_TIMER->BKLIT_CCR=BKLIT_TIMER->ARR;
		break;
 8005156:	e01c      	b.n	8005192 <Displ_BackLight+0x15a>
			BKLIT_TIMER->BKLIT_CCR=BKLIT_TIMER->ARR;
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <Displ_BackLight+0x168>)
 800515a:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <Displ_BackLight+0x168>)
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8005160:	e017      	b.n	8005192 <Displ_BackLight+0x15a>
	case '-':
		if (BKLIT_TIMER->BKLIT_CCR>0)					// if CCR1 has not yet the lowest value (0)
 8005162:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <Displ_BackLight+0x168>)
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <Displ_BackLight+0x13c>
			--BKLIT_TIMER->BKLIT_CCR;
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <Displ_BackLight+0x168>)
 800516c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516e:	3a01      	subs	r2, #1
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
		else
			BKLIT_TIMER->BKLIT_CCR=0;
		break;
 8005172:	e00e      	b.n	8005192 <Displ_BackLight+0x15a>
			BKLIT_TIMER->BKLIT_CCR=0;
 8005174:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <Displ_BackLight+0x168>)
 8005176:	2200      	movs	r2, #0
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800517a:	e00a      	b.n	8005192 <Displ_BackLight+0x15a>
	case 'I':
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
 800517c:	2104      	movs	r1, #4
 800517e:	480a      	ldr	r0, [pc, #40]	; (80051a8 <Displ_BackLight+0x170>)
 8005180:	f004 feca 	bl	8009f18 <HAL_TIM_PWM_Start>
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <Displ_BackLight+0x168>)
 8005186:	2264      	movs	r2, #100	; 0x64
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800518a:	e002      	b.n	8005192 <Displ_BackLight+0x15a>
#endif
	default:
		break;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <Displ_BackLight+0x15a>
		break;
 8005190:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
#else
	return (BKLIT_TIMER->BKLIT_CCR);
 8005192:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <Displ_BackLight+0x168>)
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
#endif
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40000400 	.word	0x40000400
 80051a4:	20023be2 	.word	0x20023be2
 80051a8:	200006ec 	.word	0x200006ec

080051ac <touchgfxDisplayDriverTransmitActive>:
 * @brief	TouchGFX integration: returns status of
 * 			communication to the display
 * @return	1 = there is a transmission running
 * 			0 = no transmission
 *********************************************************/
int touchgfxDisplayDriverTransmitActive(){
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	// using the flag indicating SPI port availability
	// already used to drive communication via DMA
	return (!Displ_SpiAvailable);
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <touchgfxDisplayDriverTransmitActive+0x20>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	2000028c 	.word	0x2000028c

080051d0 <touchgfxDisplayDriverTransmitBlock>:

/*********************************************************
 * @brief	TouchGFX integration: write to display the
 * 			block indicated by parameters
 *********************************************************/
void touchgfxDisplayDriverTransmitBlock(const uint8_t* pixels, uint16_t x, uint16_t y, uint16_t w, uint16_t h){
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	4608      	mov	r0, r1
 80051da:	4611      	mov	r1, r2
 80051dc:	461a      	mov	r2, r3
 80051de:	4603      	mov	r3, r0
 80051e0:	817b      	strh	r3, [r7, #10]
 80051e2:	460b      	mov	r3, r1
 80051e4:	813b      	strh	r3, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
	//START WRITING TO DISPLAY
		Displ_SetAddressWindow(x, y, x+w-1, y+h-1);
 80051ea:	897a      	ldrh	r2, [r7, #10]
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	4413      	add	r3, r2
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29c      	uxth	r4, r3
 80051f6:	893a      	ldrh	r2, [r7, #8]
 80051f8:	8c3b      	ldrh	r3, [r7, #32]
 80051fa:	4413      	add	r3, r2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29b      	uxth	r3, r3
 8005202:	8939      	ldrh	r1, [r7, #8]
 8005204:	8978      	ldrh	r0, [r7, #10]
 8005206:	4622      	mov	r2, r4
 8005208:	f7ff fe0a 	bl	8004e20 <Displ_SetAddressWindow>
		Displ_WriteData((uint8_t* )pixels,((w*h)<<1),1);
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	8c3a      	ldrh	r2, [r7, #32]
 8005210:	fb02 f303 	mul.w	r3, r2, r3
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	2201      	movs	r2, #1
 8005218:	4619      	mov	r1, r3
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff fda7 	bl	8004d6e <Displ_WriteData>
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	bd90      	pop	{r4, r7, pc}

08005228 <Touch_HandlePenDownInterrupt>:
volatile uint8_t Touch_PenDown=0;						// set to 1 by pendown interrupt callback, reset to 0 by sw
volatile uint8_t Touch_Int_Enabled=1;					// while reading touch sensor touch interrupt handling is disabled through this flag



void Touch_HandlePenDownInterrupt (){
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
	if (Touch_Int_Enabled) {
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <Touch_HandlePenDownInterrupt+0x20>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <Touch_HandlePenDownInterrupt+0x14>
		Touch_PenDown=1;
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <Touch_HandlePenDownInterrupt+0x24>)
 8005238:	2201      	movs	r2, #1
 800523a:	701a      	strb	r2, [r3, #0]
	}
}
 800523c:	bf00      	nop
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	2000028d 	.word	0x2000028d
 800524c:	20023be4 	.word	0x20023be4

08005250 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==TOUCH_INT_Pin){
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d101      	bne.n	8005264 <HAL_GPIO_EXTI_Callback+0x14>
		Touch_HandlePenDownInterrupt();
 8005260:	f7ff ffe2 	bl	8005228 <Touch_HandlePenDownInterrupt>
	}
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <Touch_PollAxis>:
 * @params	axis	use only one of the three options X_AXIS, Y_AXIS or Z_AXIS
 * @return			the level measured on the "axis" axis
 * 					PLEASE NOTE this function should be only for internal usage
 * 								Use Touch_GetXYTouch() instead
 *******************************************************************************/
uint16_t Touch_PollAxis(uint8_t axis) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	71fb      	strb	r3, [r7, #7]
	uint8_t poll[2] = {0,0};
 8005276:	2300      	movs	r3, #0
 8005278:	813b      	strh	r3, [r7, #8]
	
	if (TOUCH_SPI==DISPL_SPI){				// if touch and display share the same SPI port
		Touch_Select();						// enable CS on touch device
	}

	Touch_Int_Enabled=0;	//disable interrupt handling: sensor reading triggers interrupt
 800527a:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <Touch_PollAxis+0x68>)
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
	// disable interrupt while enquiring the touch sensor because it triggers the interrupt pin
	HAL_NVIC_DisableIRQ(TOUCH_INT_EXTI_IRQn);
 8005280:	2007      	movs	r0, #7
 8005282:	f000 fc1e 	bl	8005ac2 <HAL_NVIC_DisableIRQ>

	HAL_SPI_Transmit(&TOUCH_SPI_PORT, &axis, 1, 10);
 8005286:	1df9      	adds	r1, r7, #7
 8005288:	230a      	movs	r3, #10
 800528a:	2201      	movs	r2, #1
 800528c:	4812      	ldr	r0, [pc, #72]	; (80052d8 <Touch_PollAxis+0x6c>)
 800528e:	f003 fbe6 	bl	8008a5e <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&TOUCH_SPI_PORT, poll, 2, 10) == HAL_OK) {
 8005292:	f107 0108 	add.w	r1, r7, #8
 8005296:	230a      	movs	r3, #10
 8005298:	2202      	movs	r2, #2
 800529a:	480f      	ldr	r0, [pc, #60]	; (80052d8 <Touch_PollAxis+0x6c>)
 800529c:	f003 fd54 	bl	8008d48 <HAL_SPI_Receive>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d105      	bne.n	80052b2 <Touch_PollAxis+0x46>
		poll16 = (poll[0]<<8) + poll[1];
 80052a6:	7a3b      	ldrb	r3, [r7, #8]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	7a7a      	ldrb	r2, [r7, #9]
 80052ac:	4413      	add	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e001      	b.n	80052b6 <Touch_PollAxis+0x4a>
	}
	else {
		poll16 = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
	}

//enable back interrupt after reading the sensor
	HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 80052b6:	2007      	movs	r0, #7
 80052b8:	f000 fc1d 	bl	8005af6 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(TOUCH_INT_EXTI_IRQn);
 80052bc:	2007      	movs	r0, #7
 80052be:	f000 fbf2 	bl	8005aa6 <HAL_NVIC_EnableIRQ>

	Touch_Int_Enabled=1;
 80052c2:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <Touch_PollAxis+0x68>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	701a      	strb	r2, [r3, #0]

	if (TOUCH_SPI==DISPL_SPI){	// if touch and display share the same SPI port
		Touch_UnSelect();
	}

	return poll16;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	b29b      	uxth	r3, r3
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	2000028d 	.word	0x2000028d
 80052d8:	2000057c 	.word	0x2000057c

080052dc <Touch_GetXYtouch>:
 * @brief			polls touch screen and returning its XY screen position
 * 					that's regardless touch recording flag (interrupt received)
 * @return	x,y		in case isTouch=1 contain touch coordinates
 * 			isTouch is 1 if detected a touch, otherwise 0;
 *********************************************************************************/
void Touch_GetXYtouch(uint16_t *x, uint16_t *y, uint8_t *isTouch){
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	; 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]

const uint8_t pollingLevel=4;
 80052e8:	2304      	movs	r3, #4
 80052ea:	77fb      	strb	r3, [r7, #31]


// get the average value (over "1<<pollingLevel" attempts of X, Y and Z axes readings)

	// reading Z
	touch=0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052f6:	e00c      	b.n	8005312 <Touch_GetXYtouch+0x36>
		touch += Touch_PollAxis(Z_AXIS);
 80052f8:	20b0      	movs	r0, #176	; 0xb0
 80052fa:	f7ff ffb7 	bl	800526c <Touch_PollAxis>
 80052fe:	4603      	mov	r3, r0
 8005300:	461a      	mov	r2, r3
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	4413      	add	r3, r2
 8005306:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8005308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800530c:	3301      	adds	r3, #1
 800530e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005312:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005316:	7ffb      	ldrb	r3, [r7, #31]
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	429a      	cmp	r2, r3
 8005320:	dbea      	blt.n	80052f8 <Touch_GetXYtouch+0x1c>
	touch >>= pollingLevel;  //get the average value
 8005322:	7ffb      	ldrb	r3, [r7, #31]
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	fa22 f303 	lsr.w	r3, r2, r3
 800532a:	623b      	str	r3, [r7, #32]
	if (touch<=Z_THRESHOLD) {
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005332:	d806      	bhi.n	8005342 <Touch_GetXYtouch+0x66>
		*isTouch=0;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 800533a:	2007      	movs	r0, #7
 800533c:	f000 fbdb 	bl	8005af6 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 8005340:	e0b2      	b.n	80054a8 <Touch_GetXYtouch+0x1cc>
	}

	// reading X
	touch=0;
 8005342:	2300      	movs	r3, #0
 8005344:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8005346:	2300      	movs	r3, #0
 8005348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800534c:	e00c      	b.n	8005368 <Touch_GetXYtouch+0x8c>
		touch += Touch_PollAxis(X_AXIS);
 800534e:	20d0      	movs	r0, #208	; 0xd0
 8005350:	f7ff ff8c 	bl	800526c <Touch_PollAxis>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	4413      	add	r3, r2
 800535c:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 800535e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005362:	3301      	adds	r3, #1
 8005364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005368:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800536c:	7ffb      	ldrb	r3, [r7, #31]
 800536e:	2101      	movs	r1, #1
 8005370:	fa01 f303 	lsl.w	r3, r1, r3
 8005374:	429a      	cmp	r2, r3
 8005376:	dbea      	blt.n	800534e <Touch_GetXYtouch+0x72>
	touch >>= pollingLevel;  //get the average value
 8005378:	7ffb      	ldrb	r3, [r7, #31]
 800537a:	6a3a      	ldr	r2, [r7, #32]
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
 8005380:	623b      	str	r3, [r7, #32]
	if (touch<=X_THRESHOLD) {
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005388:	d806      	bhi.n	8005398 <Touch_GetXYtouch+0xbc>
		*isTouch=0;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8005390:	2007      	movs	r0, #7
 8005392:	f000 fbb0 	bl	8005af6 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 8005396:	e087      	b.n	80054a8 <Touch_GetXYtouch+0x1cc>
	}
	touchx=(AX*touch+BX);
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80054b0 <Touch_GetXYtouch+0x1d4>
 80053a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053aa:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80054b4 <Touch_GetXYtouch+0x1d8>
 80053ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b6:	ee17 3a90 	vmov	r3, s15
 80053ba:	61bb      	str	r3, [r7, #24]

	// reading Y - there is no a threshold for Y
	touch=0;
 80053bc:	2300      	movs	r3, #0
 80053be:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053c6:	e00c      	b.n	80053e2 <Touch_GetXYtouch+0x106>
		touch += Touch_PollAxis(Y_AXIS);
 80053c8:	2090      	movs	r0, #144	; 0x90
 80053ca:	f7ff ff4f 	bl	800526c <Touch_PollAxis>
 80053ce:	4603      	mov	r3, r0
 80053d0:	461a      	mov	r2, r3
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	4413      	add	r3, r2
 80053d6:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80053d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053dc:	3301      	adds	r3, #1
 80053de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80053e6:	7ffb      	ldrb	r3, [r7, #31]
 80053e8:	2101      	movs	r1, #1
 80053ea:	fa01 f303 	lsl.w	r3, r1, r3
 80053ee:	429a      	cmp	r2, r3
 80053f0:	dbea      	blt.n	80053c8 <Touch_GetXYtouch+0xec>
	touch >>= pollingLevel; //get the average value
 80053f2:	7ffb      	ldrb	r3, [r7, #31]
 80053f4:	6a3a      	ldr	r2, [r7, #32]
 80053f6:	fa22 f303 	lsr.w	r3, r2, r3
 80053fa:	623b      	str	r3, [r7, #32]

	touchy=(AY*touch+BY);
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80054b8 <Touch_GetXYtouch+0x1dc>
 800540a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800540e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80054bc <Touch_GetXYtouch+0x1e0>
 8005412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800541a:	ee17 3a90 	vmov	r3, s15
 800541e:	617b      	str	r3, [r7, #20]


//having X and Y axis average values
// calculating coordinates as per screen orientation
	switch (current_orientation)
 8005420:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <Touch_GetXYtouch+0x1e4>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d83b      	bhi.n	80054a0 <Touch_GetXYtouch+0x1c4>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <Touch_GetXYtouch+0x154>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005441 	.word	0x08005441
 8005434:	08005453 	.word	0x08005453
 8005438:	0800546b 	.word	0x0800546b
 800543c:	08005489 	.word	0x08005489
	{
	case TOUCH0:
		*x=touchx;
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	801a      	strh	r2, [r3, #0]
		*y=touchy;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	b29a      	uxth	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	801a      	strh	r2, [r3, #0]
		break;
 8005450:	e026      	b.n	80054a0 <Touch_GetXYtouch+0x1c4>
	case TOUCH90:
		*x=touchy;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_WIDTH-touchx);
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8005462:	b29a      	uxth	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	801a      	strh	r2, [r3, #0]
		break;
 8005468:	e01a      	b.n	80054a0 <Touch_GetXYtouch+0x1c4>
	case TOUCH180:
		*x=(TOUCH_0_WIDTH-touchx);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_HEIGHT - touchy);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005480:	b29a      	uxth	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	801a      	strh	r2, [r3, #0]
		break;
 8005486:	e00b      	b.n	80054a0 <Touch_GetXYtouch+0x1c4>
	case TOUCH270:
		*x=touchy;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_WIDTH-touchx);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8005498:	b29a      	uxth	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	801a      	strh	r2, [r3, #0]
		break;
 800549e:	bf00      	nop
	}

// set flag indicating there was a touch
	*isTouch=1;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
	return;
 80054a6:	bf00      	nop
}
 80054a8:	3728      	adds	r7, #40	; 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	3c033c60 	.word	0x3c033c60
 80054b4:	413ff7cf 	.word	0x413ff7cf
 80054b8:	3c375643 	.word	0x3c375643
 80054bc:	421c3a5e 	.word	0x421c3a5e
 80054c0:	20023bd4 	.word	0x20023bd4

080054c4 <Touch_In_XY_area>:
 * 			width,
 * 			height	display area to be polled for a touch
 * @return	1		if there is a touch inside area
 * 			0		if no touch or touch outside area defined
 ***********************************************************/
uint8_t Touch_In_XY_area(uint16_t xpos,uint16_t ypos,uint16_t width,uint16_t height) {
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4604      	mov	r4, r0
 80054cc:	4608      	mov	r0, r1
 80054ce:	4611      	mov	r1, r2
 80054d0:	461a      	mov	r2, r3
 80054d2:	4623      	mov	r3, r4
 80054d4:	80fb      	strh	r3, [r7, #6]
 80054d6:	4603      	mov	r3, r0
 80054d8:	80bb      	strh	r3, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	807b      	strh	r3, [r7, #2]
 80054de:	4613      	mov	r3, r2
 80054e0:	803b      	strh	r3, [r7, #0]
//sTouchData posXY;
uint16_t x,y;
uint8_t isTouch;
	Touch_GetXYtouch(&x, &y, &isTouch);
 80054e2:	f107 020b 	add.w	r2, r7, #11
 80054e6:	f107 010c 	add.w	r1, r7, #12
 80054ea:	f107 030e 	add.w	r3, r7, #14
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fef4 	bl	80052dc <Touch_GetXYtouch>
	if (!isTouch)
 80054f4:	7afb      	ldrb	r3, [r7, #11]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <Touch_In_XY_area+0x3a>
		return 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e018      	b.n	8005530 <Touch_In_XY_area+0x6c>
	if (x>=xpos)
 80054fe:	89fb      	ldrh	r3, [r7, #14]
 8005500:	88fa      	ldrh	r2, [r7, #6]
 8005502:	429a      	cmp	r2, r3
 8005504:	d813      	bhi.n	800552e <Touch_In_XY_area+0x6a>
		if (x<xpos+width)
 8005506:	89fb      	ldrh	r3, [r7, #14]
 8005508:	4619      	mov	r1, r3
 800550a:	88fa      	ldrh	r2, [r7, #6]
 800550c:	887b      	ldrh	r3, [r7, #2]
 800550e:	4413      	add	r3, r2
 8005510:	4299      	cmp	r1, r3
 8005512:	da0c      	bge.n	800552e <Touch_In_XY_area+0x6a>
			if (y>=ypos)
 8005514:	89bb      	ldrh	r3, [r7, #12]
 8005516:	88ba      	ldrh	r2, [r7, #4]
 8005518:	429a      	cmp	r2, r3
 800551a:	d808      	bhi.n	800552e <Touch_In_XY_area+0x6a>
				if (y<ypos+height)
 800551c:	89bb      	ldrh	r3, [r7, #12]
 800551e:	4619      	mov	r1, r3
 8005520:	88ba      	ldrh	r2, [r7, #4]
 8005522:	883b      	ldrh	r3, [r7, #0]
 8005524:	4413      	add	r3, r2
 8005526:	4299      	cmp	r1, r3
 8005528:	da01      	bge.n	800552e <Touch_In_XY_area+0x6a>
					return 1;
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <Touch_In_XY_area+0x6c>
	return 0;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bd90      	pop	{r4, r7, pc}

08005538 <Touch_GotATouch>:
 * 						(use "2" in main loop activating touchgfxSignalVSync()
 * @returns		1	if recorded a touch
 * 				0	if no touch recorded
 ***********************************************************/

uint8_t Touch_GotATouch(uint8_t reset) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	71fb      	strb	r3, [r7, #7]
static uint32_t touchTime=0;
uint8_t result = Touch_PenDown;
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <Touch_GotATouch+0x4c>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	73fb      	strb	r3, [r7, #15]

//	if (result)
//		result=Touch_PollTouch();

	if (reset==2){
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d10f      	bne.n	800556e <Touch_GotATouch+0x36>
		if ((HAL_GetTick()-touchTime) >= TOUCHGFX_TIMING)
 800554e:	f000 f941 	bl	80057d4 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <Touch_GotATouch+0x50>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b3b      	cmp	r3, #59	; 0x3b
 800555c:	d905      	bls.n	800556a <Touch_GotATouch+0x32>
			touchTime=HAL_GetTick();
 800555e:	f000 f939 	bl	80057d4 <HAL_GetTick>
 8005562:	4603      	mov	r3, r0
 8005564:	4a08      	ldr	r2, [pc, #32]	; (8005588 <Touch_GotATouch+0x50>)
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	e001      	b.n	800556e <Touch_GotATouch+0x36>
		else
			result=0;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
	}
	if (reset==1)
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d102      	bne.n	800557a <Touch_GotATouch+0x42>
		Touch_PenDown=0;
 8005574:	4b03      	ldr	r3, [pc, #12]	; (8005584 <Touch_GotATouch+0x4c>)
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
	return result;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20023be4 	.word	0x20023be4
 8005588:	20023be8 	.word	0x20023be8

0800558c <Touch_TouchGFXSampleTouch>:
 *			then, into STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
 *			change "return false;"
 *			into:  "return ((bool) Touch_TouchGFXSampleTouch(&x, &y));"
 * 			that's enough for touch integration in TouchGFX
***********************************************************/
uint8_t Touch_TouchGFXSampleTouch(int32_t *x, int32_t *y){
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	//	sTouchData result;
	uint8_t isTouch=0;				// preset to no touch
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
	uint16_t xx=0,yy=0;  			// need to convert library coordinates type (uint16_t) to TouchGFX ones (int32_t)
 800559a:	2300      	movs	r3, #0
 800559c:	81bb      	strh	r3, [r7, #12]
 800559e:	2300      	movs	r3, #0
 80055a0:	817b      	strh	r3, [r7, #10]
	static uint8_t flipTouch=0;		// switches 0/1, on every function call, until sensor is touched allowing to return key repeat
	static uint32_t touchTime=1; 	// tick value get on the first touch. 0 means display untouched.
	static uint16_t avgXX=0, avgYY=0;  			// need to convert library coordinates type (uint16_t) to TouchGFX one (int32_t)
	static uint8_t repetition=TOUCHGFX_REPEAT_IT+TOUCHGFX_REPEAT_NO;

	if (Touch_GotATouch(0)){				// polls interrupt flag not resetting it
 80055a2:	2000      	movs	r0, #0
 80055a4:	f7ff ffc8 	bl	8005538 <Touch_GotATouch>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d071      	beq.n	8005692 <Touch_TouchGFXSampleTouch+0x106>
		Touch_GetXYtouch(&xx,&yy,&isTouch);	// get touch sensor position
 80055ae:	f107 020f 	add.w	r2, r7, #15
 80055b2:	f107 010a 	add.w	r1, r7, #10
 80055b6:	f107 030c 	add.w	r3, r7, #12
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff fe8e 	bl	80052dc <Touch_GetXYtouch>
		if (!isTouch){						// received a "no touch"
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d126      	bne.n	8005614 <Touch_TouchGFXSampleTouch+0x88>
			if (touchTime != 0){			// if previously touched
 80055c6:	4b35      	ldr	r3, [pc, #212]	; (800569c <Touch_TouchGFXSampleTouch+0x110>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d061      	beq.n	8005692 <Touch_TouchGFXSampleTouch+0x106>
				if ((repetition--)>TOUCHGFX_REPEAT_NO+1){		// n-repetition of last touch sending
 80055ce:	4b34      	ldr	r3, [pc, #208]	; (80056a0 <Touch_TouchGFXSampleTouch+0x114>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	1e5a      	subs	r2, r3, #1
 80055d4:	b2d1      	uxtb	r1, r2
 80055d6:	4a32      	ldr	r2, [pc, #200]	; (80056a0 <Touch_TouchGFXSampleTouch+0x114>)
 80055d8:	7011      	strb	r1, [r2, #0]
 80055da:	2b06      	cmp	r3, #6
 80055dc:	d90c      	bls.n	80055f8 <Touch_TouchGFXSampleTouch+0x6c>
					*x = avgXX;
 80055de:	4b31      	ldr	r3, [pc, #196]	; (80056a4 <Touch_TouchGFXSampleTouch+0x118>)
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	601a      	str	r2, [r3, #0]
					*y = avgYY;
 80055e8:	4b2f      	ldr	r3, [pc, #188]	; (80056a8 <Touch_TouchGFXSampleTouch+0x11c>)
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	601a      	str	r2, [r3, #0]
					isTouch=1;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	e04c      	b.n	8005692 <Touch_TouchGFXSampleTouch+0x106>
				} else if ((repetition==255)) {  // that's -1
 80055f8:	4b29      	ldr	r3, [pc, #164]	; (80056a0 <Touch_TouchGFXSampleTouch+0x114>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2bff      	cmp	r3, #255	; 0xff
 80055fe:	d148      	bne.n	8005692 <Touch_TouchGFXSampleTouch+0x106>
					touchTime=0;					// set display as untouched
 8005600:	4b26      	ldr	r3, [pc, #152]	; (800569c <Touch_TouchGFXSampleTouch+0x110>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
					Touch_GotATouch(1);				// reset interrupt touch flag
 8005606:	2001      	movs	r0, #1
 8005608:	f7ff ff96 	bl	8005538 <Touch_GotATouch>
					repetition=TOUCHGFX_REPEAT_IT+TOUCHGFX_REPEAT_NO;  //reset repetition counter
 800560c:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <Touch_TouchGFXSampleTouch+0x114>)
 800560e:	2205      	movs	r2, #5
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	e03e      	b.n	8005692 <Touch_TouchGFXSampleTouch+0x106>
				}
			}
		} else {					// display touched

			if (touchTime==0) {				// if previously untouched
 8005614:	4b21      	ldr	r3, [pc, #132]	; (800569c <Touch_TouchGFXSampleTouch+0x110>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10e      	bne.n	800563a <Touch_TouchGFXSampleTouch+0xae>
				avgXX =(xx/TOUCHGFX_SENSITIVITY)*TOUCHGFX_SENSITIVITY;
 800561c:	89ba      	ldrh	r2, [r7, #12]
 800561e:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <Touch_TouchGFXSampleTouch+0x118>)
 8005620:	801a      	strh	r2, [r3, #0]
				avgYY =(yy/TOUCHGFX_SENSITIVITY)*TOUCHGFX_SENSITIVITY;
 8005622:	897a      	ldrh	r2, [r7, #10]
 8005624:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <Touch_TouchGFXSampleTouch+0x11c>)
 8005626:	801a      	strh	r2, [r3, #0]
				touchTime=HAL_GetTick();	// store tick value at touch time
 8005628:	f000 f8d4 	bl	80057d4 <HAL_GetTick>
 800562c:	4603      	mov	r3, r0
 800562e:	4a1b      	ldr	r2, [pc, #108]	; (800569c <Touch_TouchGFXSampleTouch+0x110>)
 8005630:	6013      	str	r3, [r2, #0]
				flipTouch=1;				// set switch to send touch now
 8005632:	4b1e      	ldr	r3, [pc, #120]	; (80056ac <Touch_TouchGFXSampleTouch+0x120>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e012      	b.n	8005660 <Touch_TouchGFXSampleTouch+0xd4>
			} else {						// not a new touch
				if (((HAL_GetTick()-touchTime)>DELAY_TO_KEY_REPEAT) && (DELAY_TO_KEY_REPEAT > 0)){	// if timeout to key repeat is over (0 means no key repeat)
 800563a:	f000 f8cb 	bl	80057d4 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	4b16      	ldr	r3, [pc, #88]	; (800569c <Touch_TouchGFXSampleTouch+0x110>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800564a:	d909      	bls.n	8005660 <Touch_TouchGFXSampleTouch+0xd4>
					flipTouch=!flipTouch;	// alternate every time function is called
 800564c:	4b17      	ldr	r3, [pc, #92]	; (80056ac <Touch_TouchGFXSampleTouch+0x120>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	4b13      	ldr	r3, [pc, #76]	; (80056ac <Touch_TouchGFXSampleTouch+0x120>)
 800565e:	701a      	strb	r2, [r3, #0]
				} else
					if (DELAY_TO_KEY_REPEAT == 0)
						flipTouch=0;		// (DELAY_TO_KEY_REPEAT == 0) means a single pulse, "-1" keep pulse as long as touch
			}
			if (flipTouch) { 	// return position only if the switching flag is on
 8005660:	4b12      	ldr	r3, [pc, #72]	; (80056ac <Touch_TouchGFXSampleTouch+0x120>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d012      	beq.n	800568e <Touch_TouchGFXSampleTouch+0x102>
				*x=(((avgXX*(TOUCHGFX_MOVAVG-1)+((xx/TOUCHGFX_SENSITIVITY)*TOUCHGFX_SENSITIVITY)))/TOUCHGFX_MOVAVG);
 8005668:	89bb      	ldrh	r3, [r7, #12]
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	601a      	str	r2, [r3, #0]
				*y=(((avgYY*(TOUCHGFX_MOVAVG-1)+((yy/TOUCHGFX_SENSITIVITY)*TOUCHGFX_SENSITIVITY)))/TOUCHGFX_MOVAVG);
 8005670:	897b      	ldrh	r3, [r7, #10]
 8005672:	461a      	mov	r2, r3
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	601a      	str	r2, [r3, #0]
				avgXX = *x;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	b29a      	uxth	r2, r3
 800567e:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <Touch_TouchGFXSampleTouch+0x118>)
 8005680:	801a      	strh	r2, [r3, #0]
				avgYY = *y;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	b29a      	uxth	r2, r3
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <Touch_TouchGFXSampleTouch+0x11c>)
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e001      	b.n	8005692 <Touch_TouchGFXSampleTouch+0x106>
			} else {			// otherwise return "no touch" from display
				isTouch = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return isTouch;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000290 	.word	0x20000290
 80056a0:	20000294 	.word	0x20000294
 80056a4:	20023bec 	.word	0x20023bec
 80056a8:	20023bee 	.word	0x20023bee
 80056ac:	20023bf0 	.word	0x20023bf0

080056b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80056b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80056b4:	f7ff fad4 	bl	8004c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056b8:	480c      	ldr	r0, [pc, #48]	; (80056ec <LoopForever+0x6>)
  ldr r1, =_edata
 80056ba:	490d      	ldr	r1, [pc, #52]	; (80056f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056bc:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <LoopForever+0xe>)
  movs r3, #0
 80056be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056c0:	e002      	b.n	80056c8 <LoopCopyDataInit>

080056c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056c6:	3304      	adds	r3, #4

080056c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056cc:	d3f9      	bcc.n	80056c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056ce:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80056d0:	4c0a      	ldr	r4, [pc, #40]	; (80056fc <LoopForever+0x16>)
  movs r3, #0
 80056d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056d4:	e001      	b.n	80056da <LoopFillZerobss>

080056d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056d8:	3204      	adds	r2, #4

080056da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056dc:	d3fb      	bcc.n	80056d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056de:	f021 fa5f 	bl	8026ba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80056e2:	f7fd fbcd 	bl	8002e80 <main>

080056e6 <LoopForever>:

LoopForever:
    b LoopForever
 80056e6:	e7fe      	b.n	80056e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80056e8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80056ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056f0:	20000384 	.word	0x20000384
  ldr r2, =_sidata
 80056f4:	0805a614 	.word	0x0805a614
  ldr r2, =_sbss
 80056f8:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 80056fc:	2002648c 	.word	0x2002648c

08005700 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005700:	e7fe      	b.n	8005700 <ADC1_IRQHandler>

08005702 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800570c:	2003      	movs	r0, #3
 800570e:	f000 f9a3 	bl	8005a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005712:	2000      	movs	r0, #0
 8005714:	f000 f80e 	bl	8005734 <HAL_InitTick>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	71fb      	strb	r3, [r7, #7]
 8005722:	e001      	b.n	8005728 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005724:	f7fe fcae 	bl	8004084 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005728:	79fb      	ldrb	r3, [r7, #7]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005740:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <HAL_InitTick+0x6c>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d023      	beq.n	8005790 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005748:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <HAL_InitTick+0x70>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <HAL_InitTick+0x6c>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	4619      	mov	r1, r3
 8005752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005756:	fbb3 f3f1 	udiv	r3, r3, r1
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f9bd 	bl	8005ade <HAL_SYSTICK_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b0f      	cmp	r3, #15
 800576e:	d809      	bhi.n	8005784 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005770:	2200      	movs	r2, #0
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	f000 f979 	bl	8005a6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800577c:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <HAL_InitTick+0x74>)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e007      	b.n	8005794 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
 8005788:	e004      	b.n	8005794 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
 800578e:	e001      	b.n	8005794 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	2000029c 	.word	0x2000029c
 80057a4:	20000288 	.word	0x20000288
 80057a8:	20000298 	.word	0x20000298

080057ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057b0:	4b06      	ldr	r3, [pc, #24]	; (80057cc <HAL_IncTick+0x20>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <HAL_IncTick+0x24>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4413      	add	r3, r2
 80057bc:	4a04      	ldr	r2, [pc, #16]	; (80057d0 <HAL_IncTick+0x24>)
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	2000029c 	.word	0x2000029c
 80057d0:	20023bf4 	.word	0x20023bf4

080057d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return uwTick;
 80057d8:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <HAL_GetTick+0x14>)
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20023bf4 	.word	0x20023bf4

080057ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057f4:	f7ff ffee 	bl	80057d4 <HAL_GetTick>
 80057f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d005      	beq.n	8005812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005806:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <HAL_Delay+0x44>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005812:	bf00      	nop
 8005814:	f7ff ffde 	bl	80057d4 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	429a      	cmp	r2, r3
 8005822:	d8f7      	bhi.n	8005814 <HAL_Delay+0x28>
  {
  }
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	2000029c 	.word	0x2000029c

08005834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <__NVIC_SetPriorityGrouping+0x44>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005850:	4013      	ands	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800585c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005866:	4a04      	ldr	r2, [pc, #16]	; (8005878 <__NVIC_SetPriorityGrouping+0x44>)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	60d3      	str	r3, [r2, #12]
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <__NVIC_GetPriorityGrouping+0x18>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	0a1b      	lsrs	r3, r3, #8
 8005886:	f003 0307 	and.w	r3, r3, #7
}
 800588a:	4618      	mov	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	e000ed00 	.word	0xe000ed00

08005898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	db0b      	blt.n	80058c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	f003 021f 	and.w	r2, r3, #31
 80058b0:	4907      	ldr	r1, [pc, #28]	; (80058d0 <__NVIC_EnableIRQ+0x38>)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	2001      	movs	r0, #1
 80058ba:	fa00 f202 	lsl.w	r2, r0, r2
 80058be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000e100 	.word	0xe000e100

080058d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	db12      	blt.n	800590c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	f003 021f 	and.w	r2, r3, #31
 80058ec:	490a      	ldr	r1, [pc, #40]	; (8005918 <__NVIC_DisableIRQ+0x44>)
 80058ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	2001      	movs	r0, #1
 80058f6:	fa00 f202 	lsl.w	r2, r0, r2
 80058fa:	3320      	adds	r3, #32
 80058fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005900:	f3bf 8f4f 	dsb	sy
}
 8005904:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005906:	f3bf 8f6f 	isb	sy
}
 800590a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	e000e100 	.word	0xe000e100

0800591c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592a:	2b00      	cmp	r3, #0
 800592c:	db0c      	blt.n	8005948 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	f003 021f 	and.w	r2, r3, #31
 8005934:	4907      	ldr	r1, [pc, #28]	; (8005954 <__NVIC_ClearPendingIRQ+0x38>)
 8005936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	2001      	movs	r0, #1
 800593e:	fa00 f202 	lsl.w	r2, r0, r2
 8005942:	3360      	adds	r3, #96	; 0x60
 8005944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	e000e100 	.word	0xe000e100

08005958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005968:	2b00      	cmp	r3, #0
 800596a:	db0a      	blt.n	8005982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	b2da      	uxtb	r2, r3
 8005970:	490c      	ldr	r1, [pc, #48]	; (80059a4 <__NVIC_SetPriority+0x4c>)
 8005972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005976:	0112      	lsls	r2, r2, #4
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	440b      	add	r3, r1
 800597c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005980:	e00a      	b.n	8005998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	b2da      	uxtb	r2, r3
 8005986:	4908      	ldr	r1, [pc, #32]	; (80059a8 <__NVIC_SetPriority+0x50>)
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	3b04      	subs	r3, #4
 8005990:	0112      	lsls	r2, r2, #4
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	440b      	add	r3, r1
 8005996:	761a      	strb	r2, [r3, #24]
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	e000e100 	.word	0xe000e100
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b089      	sub	sp, #36	; 0x24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f1c3 0307 	rsb	r3, r3, #7
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	bf28      	it	cs
 80059ca:	2304      	movcs	r3, #4
 80059cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3304      	adds	r3, #4
 80059d2:	2b06      	cmp	r3, #6
 80059d4:	d902      	bls.n	80059dc <NVIC_EncodePriority+0x30>
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3b03      	subs	r3, #3
 80059da:	e000      	b.n	80059de <NVIC_EncodePriority+0x32>
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43da      	mvns	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	401a      	ands	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059f4:	f04f 31ff 	mov.w	r1, #4294967295
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	43d9      	mvns	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a04:	4313      	orrs	r3, r2
         );
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3724      	adds	r7, #36	; 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a24:	d301      	bcc.n	8005a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a26:	2301      	movs	r3, #1
 8005a28:	e00f      	b.n	8005a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <SysTick_Config+0x40>)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a32:	210f      	movs	r1, #15
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	f7ff ff8e 	bl	8005958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <SysTick_Config+0x40>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a42:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <SysTick_Config+0x40>)
 8005a44:	2207      	movs	r2, #7
 8005a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	e000e010 	.word	0xe000e010

08005a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fee7 	bl	8005834 <__NVIC_SetPriorityGrouping>
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	4603      	mov	r3, r0
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a80:	f7ff fefc 	bl	800587c <__NVIC_GetPriorityGrouping>
 8005a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	6978      	ldr	r0, [r7, #20]
 8005a8c:	f7ff ff8e 	bl	80059ac <NVIC_EncodePriority>
 8005a90:	4602      	mov	r2, r0
 8005a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff ff5d 	bl	8005958 <__NVIC_SetPriority>
}
 8005a9e:	bf00      	nop
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	4603      	mov	r3, r0
 8005aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff feef 	bl	8005898 <__NVIC_EnableIRQ>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	4603      	mov	r3, r0
 8005aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff feff 	bl	80058d4 <__NVIC_DisableIRQ>
}
 8005ad6:	bf00      	nop
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff94 	bl	8005a14 <SysTick_Config>
 8005aec:	4603      	mov	r3, r0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	4603      	mov	r3, r0
 8005afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff ff09 	bl	800591c <__NVIC_ClearPendingIRQ>
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e054      	b.n	8005bd0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	7f5b      	ldrb	r3, [r3, #29]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fe fac8 	bl	80040cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	791b      	ldrb	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10c      	bne.n	8005b64 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a22      	ldr	r2, [pc, #136]	; (8005bd8 <HAL_CRC_Init+0xc4>)
 8005b50:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0218 	bic.w	r2, r2, #24
 8005b60:	609a      	str	r2, [r3, #8]
 8005b62:	e00c      	b.n	8005b7e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6899      	ldr	r1, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f834 	bl	8005bdc <HAL_CRCEx_Polynomial_Set>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e028      	b.n	8005bd0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	795b      	ldrb	r3, [r3, #5]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d105      	bne.n	8005b92 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	611a      	str	r2, [r3, #16]
 8005b90:	e004      	b.n	8005b9c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6912      	ldr	r2, [r2, #16]
 8005b9a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	04c11db7 	.word	0x04c11db7

08005bdc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005bec:	231f      	movs	r3, #31
 8005bee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	75fb      	strb	r3, [r7, #23]
 8005bfe:	e063      	b.n	8005cc8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005c00:	bf00      	nop
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1e5a      	subs	r2, r3, #1
 8005c06:	613a      	str	r2, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <HAL_CRCEx_Polynomial_Set+0x44>
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b18      	cmp	r3, #24
 8005c24:	d846      	bhi.n	8005cb4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005cbb 	.word	0x08005cbb
 8005c30:	08005cb5 	.word	0x08005cb5
 8005c34:	08005cb5 	.word	0x08005cb5
 8005c38:	08005cb5 	.word	0x08005cb5
 8005c3c:	08005cb5 	.word	0x08005cb5
 8005c40:	08005cb5 	.word	0x08005cb5
 8005c44:	08005cb5 	.word	0x08005cb5
 8005c48:	08005cb5 	.word	0x08005cb5
 8005c4c:	08005ca9 	.word	0x08005ca9
 8005c50:	08005cb5 	.word	0x08005cb5
 8005c54:	08005cb5 	.word	0x08005cb5
 8005c58:	08005cb5 	.word	0x08005cb5
 8005c5c:	08005cb5 	.word	0x08005cb5
 8005c60:	08005cb5 	.word	0x08005cb5
 8005c64:	08005cb5 	.word	0x08005cb5
 8005c68:	08005cb5 	.word	0x08005cb5
 8005c6c:	08005c9d 	.word	0x08005c9d
 8005c70:	08005cb5 	.word	0x08005cb5
 8005c74:	08005cb5 	.word	0x08005cb5
 8005c78:	08005cb5 	.word	0x08005cb5
 8005c7c:	08005cb5 	.word	0x08005cb5
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005cb5 	.word	0x08005cb5
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	08005c91 	.word	0x08005c91
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b06      	cmp	r3, #6
 8005c94:	d913      	bls.n	8005cbe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005c9a:	e010      	b.n	8005cbe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b07      	cmp	r3, #7
 8005ca0:	d90f      	bls.n	8005cc2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005ca6:	e00c      	b.n	8005cc2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b0f      	cmp	r3, #15
 8005cac:	d90b      	bls.n	8005cc6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005cb2:	e008      	b.n	8005cc6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]
        break;
 8005cb8:	e006      	b.n	8005cc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005cba:	bf00      	nop
 8005cbc:	e004      	b.n	8005cc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005cbe:	bf00      	nop
 8005cc0:	e002      	b.n	8005cc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005cc6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10d      	bne.n	8005cea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f023 0118 	bic.w	r1, r3, #24
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e08d      	b.n	8005e26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	4b47      	ldr	r3, [pc, #284]	; (8005e30 <HAL_DMA_Init+0x138>)
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d80f      	bhi.n	8005d36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4b45      	ldr	r3, [pc, #276]	; (8005e34 <HAL_DMA_Init+0x13c>)
 8005d1e:	4413      	add	r3, r2
 8005d20:	4a45      	ldr	r2, [pc, #276]	; (8005e38 <HAL_DMA_Init+0x140>)
 8005d22:	fba2 2303 	umull	r2, r3, r2, r3
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	009a      	lsls	r2, r3, #2
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a42      	ldr	r2, [pc, #264]	; (8005e3c <HAL_DMA_Init+0x144>)
 8005d32:	641a      	str	r2, [r3, #64]	; 0x40
 8005d34:	e00e      	b.n	8005d54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4b40      	ldr	r3, [pc, #256]	; (8005e40 <HAL_DMA_Init+0x148>)
 8005d3e:	4413      	add	r3, r2
 8005d40:	4a3d      	ldr	r2, [pc, #244]	; (8005e38 <HAL_DMA_Init+0x140>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	009a      	lsls	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a3c      	ldr	r2, [pc, #240]	; (8005e44 <HAL_DMA_Init+0x14c>)
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa72 	bl	8006290 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005db4:	d102      	bne.n	8005dbc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005dd0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <HAL_DMA_Init+0x104>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d80c      	bhi.n	8005dfc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa92 	bl	800630c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	e008      	b.n	8005e0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40020407 	.word	0x40020407
 8005e34:	bffdfff8 	.word	0xbffdfff8
 8005e38:	cccccccd 	.word	0xcccccccd
 8005e3c:	40020000 	.word	0x40020000
 8005e40:	bffdfbf8 	.word	0xbffdfbf8
 8005e44:	40020400 	.word	0x40020400

08005e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_DMA_Start_IT+0x20>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e066      	b.n	8005f36 <HAL_DMA_Start_IT+0xee>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d155      	bne.n	8005f28 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0201 	bic.w	r2, r2, #1
 8005e98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f9b6 	bl	8006212 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 020e 	orr.w	r2, r2, #14
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e00f      	b.n	8005ee0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0204 	bic.w	r2, r2, #4
 8005ece:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 020a 	orr.w	r2, r2, #10
 8005ede:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005efc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f14:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e005      	b.n	8005f34 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
 8005f32:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d008      	beq.n	8005f68 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2204      	movs	r2, #4
 8005f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e040      	b.n	8005fea <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 020e 	bic.w	r2, r2, #14
 8005f76:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f86:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	f003 021c 	and.w	r2, r3, #28
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8005faa:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005fb4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00c      	beq.n	8005fd8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fcc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005fd6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d005      	beq.n	800601a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2204      	movs	r2, #4
 8006012:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	e047      	b.n	80060aa <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 020e 	bic.w	r2, r2, #14
 8006028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0201 	bic.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006048:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	f003 021c 	and.w	r2, r3, #28
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	2101      	movs	r1, #1
 8006058:	fa01 f202 	lsl.w	r2, r1, r2
 800605c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006066:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800607e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006088:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
    }
  }
  return status;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d0:	f003 031c 	and.w	r3, r3, #28
 80060d4:	2204      	movs	r2, #4
 80060d6:	409a      	lsls	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d026      	beq.n	800612e <HAL_DMA_IRQHandler+0x7a>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d021      	beq.n	800612e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0320 	and.w	r3, r3, #32
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d107      	bne.n	8006108 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0204 	bic.w	r2, r2, #4
 8006106:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610c:	f003 021c 	and.w	r2, r3, #28
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	2104      	movs	r1, #4
 8006116:	fa01 f202 	lsl.w	r2, r1, r2
 800611a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	2b00      	cmp	r3, #0
 8006122:	d071      	beq.n	8006208 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800612c:	e06c      	b.n	8006208 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	f003 031c 	and.w	r3, r3, #28
 8006136:	2202      	movs	r2, #2
 8006138:	409a      	lsls	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4013      	ands	r3, r2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d02e      	beq.n	80061a0 <HAL_DMA_IRQHandler+0xec>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d029      	beq.n	80061a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 020a 	bic.w	r2, r2, #10
 8006168:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006176:	f003 021c 	and.w	r2, r3, #28
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	2102      	movs	r1, #2
 8006180:	fa01 f202 	lsl.w	r2, r1, r2
 8006184:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d038      	beq.n	8006208 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800619e:	e033      	b.n	8006208 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a4:	f003 031c 	and.w	r3, r3, #28
 80061a8:	2208      	movs	r2, #8
 80061aa:	409a      	lsls	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d02a      	beq.n	800620a <HAL_DMA_IRQHandler+0x156>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d025      	beq.n	800620a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 020e 	bic.w	r2, r2, #14
 80061cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	f003 021c 	and.w	r2, r3, #28
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2101      	movs	r1, #1
 80061dc:	fa01 f202 	lsl.w	r2, r1, r2
 80061e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006208:	bf00      	nop
 800620a:	bf00      	nop
}
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
 800621e:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006228:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	2b00      	cmp	r3, #0
 8006230:	d004      	beq.n	800623c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800623a:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006240:	f003 021c 	and.w	r2, r3, #28
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	2101      	movs	r1, #1
 800624a:	fa01 f202 	lsl.w	r2, r1, r2
 800624e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b10      	cmp	r3, #16
 800625e:	d108      	bne.n	8006272 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006270:	e007      	b.n	8006282 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	60da      	str	r2, [r3, #12]
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	4b17      	ldr	r3, [pc, #92]	; (80062fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d80a      	bhi.n	80062ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a8:	089b      	lsrs	r3, r3, #2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6493      	str	r3, [r2, #72]	; 0x48
 80062b8:	e007      	b.n	80062ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	089b      	lsrs	r3, r3, #2
 80062c0:	009a      	lsls	r2, r3, #2
 80062c2:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80062c4:	4413      	add	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	3b08      	subs	r3, #8
 80062d2:	4a0c      	ldr	r2, [pc, #48]	; (8006304 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80062d4:	fba2 2303 	umull	r2, r3, r2, r3
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80062e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2201      	movs	r2, #1
 80062ea:	409a      	lsls	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	40020407 	.word	0x40020407
 8006300:	4002081c 	.word	0x4002081c
 8006304:	cccccccd 	.word	0xcccccccd
 8006308:	40020880 	.word	0x40020880

0800630c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4b0b      	ldr	r3, [pc, #44]	; (800634c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	461a      	mov	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a08      	ldr	r2, [pc, #32]	; (8006350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800632e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3b01      	subs	r3, #1
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2201      	movs	r2, #1
 800633a:	409a      	lsls	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	1000823f 	.word	0x1000823f
 8006350:	40020940 	.word	0x40020940

08006354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006362:	e166      	b.n	8006632 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	2101      	movs	r1, #1
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	fa01 f303 	lsl.w	r3, r1, r3
 8006370:	4013      	ands	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8158 	beq.w	800662c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	2b01      	cmp	r3, #1
 8006386:	d005      	beq.n	8006394 <HAL_GPIO_Init+0x40>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f003 0303 	and.w	r3, r3, #3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d130      	bne.n	80063f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	2203      	movs	r2, #3
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	43db      	mvns	r3, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4013      	ands	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063ca:	2201      	movs	r2, #1
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	43db      	mvns	r3, r3
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4013      	ands	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	091b      	lsrs	r3, r3, #4
 80063e0:	f003 0201 	and.w	r2, r3, #1
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d017      	beq.n	8006432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	2203      	movs	r2, #3
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43db      	mvns	r3, r3
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4013      	ands	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d123      	bne.n	8006486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	08da      	lsrs	r2, r3, #3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3208      	adds	r2, #8
 8006446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	220f      	movs	r2, #15
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	43db      	mvns	r3, r3
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4013      	ands	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	08da      	lsrs	r2, r3, #3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3208      	adds	r2, #8
 8006480:	6939      	ldr	r1, [r7, #16]
 8006482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	2203      	movs	r2, #3
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	43db      	mvns	r3, r3
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4013      	ands	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f003 0203 	and.w	r2, r3, #3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80b2 	beq.w	800662c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064c8:	4b61      	ldr	r3, [pc, #388]	; (8006650 <HAL_GPIO_Init+0x2fc>)
 80064ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064cc:	4a60      	ldr	r2, [pc, #384]	; (8006650 <HAL_GPIO_Init+0x2fc>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	6613      	str	r3, [r2, #96]	; 0x60
 80064d4:	4b5e      	ldr	r3, [pc, #376]	; (8006650 <HAL_GPIO_Init+0x2fc>)
 80064d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064e0:	4a5c      	ldr	r2, [pc, #368]	; (8006654 <HAL_GPIO_Init+0x300>)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	089b      	lsrs	r3, r3, #2
 80064e6:	3302      	adds	r3, #2
 80064e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	220f      	movs	r2, #15
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4013      	ands	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800650a:	d02b      	beq.n	8006564 <HAL_GPIO_Init+0x210>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a52      	ldr	r2, [pc, #328]	; (8006658 <HAL_GPIO_Init+0x304>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d025      	beq.n	8006560 <HAL_GPIO_Init+0x20c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a51      	ldr	r2, [pc, #324]	; (800665c <HAL_GPIO_Init+0x308>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d01f      	beq.n	800655c <HAL_GPIO_Init+0x208>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a50      	ldr	r2, [pc, #320]	; (8006660 <HAL_GPIO_Init+0x30c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d019      	beq.n	8006558 <HAL_GPIO_Init+0x204>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a4f      	ldr	r2, [pc, #316]	; (8006664 <HAL_GPIO_Init+0x310>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <HAL_GPIO_Init+0x200>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a4e      	ldr	r2, [pc, #312]	; (8006668 <HAL_GPIO_Init+0x314>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00d      	beq.n	8006550 <HAL_GPIO_Init+0x1fc>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a4d      	ldr	r2, [pc, #308]	; (800666c <HAL_GPIO_Init+0x318>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d007      	beq.n	800654c <HAL_GPIO_Init+0x1f8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a4c      	ldr	r2, [pc, #304]	; (8006670 <HAL_GPIO_Init+0x31c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d101      	bne.n	8006548 <HAL_GPIO_Init+0x1f4>
 8006544:	2307      	movs	r3, #7
 8006546:	e00e      	b.n	8006566 <HAL_GPIO_Init+0x212>
 8006548:	2308      	movs	r3, #8
 800654a:	e00c      	b.n	8006566 <HAL_GPIO_Init+0x212>
 800654c:	2306      	movs	r3, #6
 800654e:	e00a      	b.n	8006566 <HAL_GPIO_Init+0x212>
 8006550:	2305      	movs	r3, #5
 8006552:	e008      	b.n	8006566 <HAL_GPIO_Init+0x212>
 8006554:	2304      	movs	r3, #4
 8006556:	e006      	b.n	8006566 <HAL_GPIO_Init+0x212>
 8006558:	2303      	movs	r3, #3
 800655a:	e004      	b.n	8006566 <HAL_GPIO_Init+0x212>
 800655c:	2302      	movs	r3, #2
 800655e:	e002      	b.n	8006566 <HAL_GPIO_Init+0x212>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <HAL_GPIO_Init+0x212>
 8006564:	2300      	movs	r3, #0
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	f002 0203 	and.w	r2, r2, #3
 800656c:	0092      	lsls	r2, r2, #2
 800656e:	4093      	lsls	r3, r2
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006576:	4937      	ldr	r1, [pc, #220]	; (8006654 <HAL_GPIO_Init+0x300>)
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	089b      	lsrs	r3, r3, #2
 800657c:	3302      	adds	r3, #2
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006584:	4b3b      	ldr	r3, [pc, #236]	; (8006674 <HAL_GPIO_Init+0x320>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	43db      	mvns	r3, r3
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4013      	ands	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065a8:	4a32      	ldr	r2, [pc, #200]	; (8006674 <HAL_GPIO_Init+0x320>)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065ae:	4b31      	ldr	r3, [pc, #196]	; (8006674 <HAL_GPIO_Init+0x320>)
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	43db      	mvns	r3, r3
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4013      	ands	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065d2:	4a28      	ldr	r2, [pc, #160]	; (8006674 <HAL_GPIO_Init+0x320>)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80065d8:	4b26      	ldr	r3, [pc, #152]	; (8006674 <HAL_GPIO_Init+0x320>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4013      	ands	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <HAL_GPIO_Init+0x320>)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006602:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <HAL_GPIO_Init+0x320>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	43db      	mvns	r3, r3
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4013      	ands	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006626:	4a13      	ldr	r2, [pc, #76]	; (8006674 <HAL_GPIO_Init+0x320>)
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	3301      	adds	r3, #1
 8006630:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	f47f ae91 	bne.w	8006364 <HAL_GPIO_Init+0x10>
  }
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	40021000 	.word	0x40021000
 8006654:	40010000 	.word	0x40010000
 8006658:	48000400 	.word	0x48000400
 800665c:	48000800 	.word	0x48000800
 8006660:	48000c00 	.word	0x48000c00
 8006664:	48001000 	.word	0x48001000
 8006668:	48001400 	.word	0x48001400
 800666c:	48001800 	.word	0x48001800
 8006670:	48001c00 	.word	0x48001c00
 8006674:	40010400 	.word	0x40010400

08006678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	807b      	strh	r3, [r7, #2]
 8006684:	4613      	mov	r3, r2
 8006686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006688:	787b      	ldrb	r3, [r7, #1]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800668e:	887a      	ldrh	r2, [r7, #2]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006694:	e002      	b.n	800669c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006696:	887a      	ldrh	r2, [r7, #2]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80066b2:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	4013      	ands	r3, r2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d006      	beq.n	80066cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066be:	4a05      	ldr	r2, [pc, #20]	; (80066d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe fdc2 	bl	8005250 <HAL_GPIO_EXTI_Callback>
  }
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40010400 	.word	0x40010400

080066d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e08d      	b.n	8006806 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fd fd04 	bl	800410c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2224      	movs	r2, #36	; 0x24
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006728:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006738:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d107      	bne.n	8006752 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800674e:	609a      	str	r2, [r3, #8]
 8006750:	e006      	b.n	8006760 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800675e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d108      	bne.n	800677a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006776:	605a      	str	r2, [r3, #4]
 8006778:	e007      	b.n	800678a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006788:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	69d9      	ldr	r1, [r3, #28]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1a      	ldr	r2, [r3, #32]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	461a      	mov	r2, r3
 800681c:	460b      	mov	r3, r1
 800681e:	817b      	strh	r3, [r7, #10]
 8006820:	4613      	mov	r3, r2
 8006822:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b20      	cmp	r3, #32
 800682e:	f040 80fd 	bne.w	8006a2c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_I2C_Master_Transmit+0x30>
 800683c:	2302      	movs	r3, #2
 800683e:	e0f6      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x21e>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006848:	f7fe ffc4 	bl	80057d4 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	2319      	movs	r3, #25
 8006854:	2201      	movs	r2, #1
 8006856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f914 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e0e1      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2221      	movs	r2, #33	; 0x21
 800686e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2210      	movs	r2, #16
 8006876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	893a      	ldrh	r2, [r7, #8]
 800688a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	2bff      	cmp	r3, #255	; 0xff
 800689a:	d906      	bls.n	80068aa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	22ff      	movs	r2, #255	; 0xff
 80068a0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80068a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e007      	b.n	80068ba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80068b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068b8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d024      	beq.n	800690c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	3301      	adds	r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	8979      	ldrh	r1, [r7, #10]
 80068fe:	4b4e      	ldr	r3, [pc, #312]	; (8006a38 <HAL_I2C_Master_Transmit+0x228>)
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 fa79 	bl	8006dfc <I2C_TransferConfig>
 800690a:	e066      	b.n	80069da <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006910:	b2da      	uxtb	r2, r3
 8006912:	8979      	ldrh	r1, [r7, #10]
 8006914:	4b48      	ldr	r3, [pc, #288]	; (8006a38 <HAL_I2C_Master_Transmit+0x228>)
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fa6e 	bl	8006dfc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006920:	e05b      	b.n	80069da <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	6a39      	ldr	r1, [r7, #32]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 f8fd 	bl	8006b26 <I2C_WaitOnTXISFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e07b      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	781a      	ldrb	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d034      	beq.n	80069da <HAL_I2C_Master_Transmit+0x1ca>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006974:	2b00      	cmp	r3, #0
 8006976:	d130      	bne.n	80069da <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	2200      	movs	r2, #0
 8006980:	2180      	movs	r1, #128	; 0x80
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f880 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e04d      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006996:	b29b      	uxth	r3, r3
 8006998:	2bff      	cmp	r3, #255	; 0xff
 800699a:	d90e      	bls.n	80069ba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	22ff      	movs	r2, #255	; 0xff
 80069a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	8979      	ldrh	r1, [r7, #10]
 80069aa:	2300      	movs	r3, #0
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 fa22 	bl	8006dfc <I2C_TransferConfig>
 80069b8:	e00f      	b.n	80069da <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	8979      	ldrh	r1, [r7, #10]
 80069cc:	2300      	movs	r3, #0
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fa11 	bl	8006dfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d19e      	bne.n	8006922 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	6a39      	ldr	r1, [r7, #32]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f8e3 	bl	8006bb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e01a      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2220      	movs	r2, #32
 80069fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6859      	ldr	r1, [r3, #4]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <HAL_I2C_Master_Transmit+0x22c>)
 8006a0c:	400b      	ands	r3, r1
 8006a0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e000      	b.n	8006a2e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006a2c:	2302      	movs	r3, #2
  }
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	80002000 	.word	0x80002000
 8006a3c:	fe00e800 	.word	0xfe00e800

08006a40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d103      	bne.n	8006a5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d007      	beq.n	8006a7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	619a      	str	r2, [r3, #24]
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	4613      	mov	r3, r2
 8006a96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a98:	e031      	b.n	8006afe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d02d      	beq.n	8006afe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa2:	f7fe fe97 	bl	80057d4 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d302      	bcc.n	8006ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d122      	bne.n	8006afe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2301      	moveq	r3, #1
 8006aca:	2300      	movne	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d113      	bne.n	8006afe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e00f      	b.n	8006b1e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4013      	ands	r3, r2
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	bf0c      	ite	eq
 8006b0e:	2301      	moveq	r3, #1
 8006b10:	2300      	movne	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d0be      	beq.n	8006a9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b32:	e033      	b.n	8006b9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f87f 	bl	8006c3c <I2C_IsErrorOccurred>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e031      	b.n	8006bac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4e:	d025      	beq.n	8006b9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b50:	f7fe fe40 	bl	80057d4 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d302      	bcc.n	8006b66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d11a      	bne.n	8006b9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d013      	beq.n	8006b9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b78:	f043 0220 	orr.w	r2, r3, #32
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e007      	b.n	8006bac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d1c4      	bne.n	8006b34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bc0:	e02f      	b.n	8006c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f838 	bl	8006c3c <I2C_IsErrorOccurred>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e02d      	b.n	8006c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd6:	f7fe fdfd 	bl	80057d4 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d302      	bcc.n	8006bec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d11a      	bne.n	8006c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d013      	beq.n	8006c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfe:	f043 0220 	orr.w	r2, r3, #32
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e007      	b.n	8006c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d1c8      	bne.n	8006bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08a      	sub	sp, #40	; 0x28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d068      	beq.n	8006d3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2210      	movs	r2, #16
 8006c6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c70:	e049      	b.n	8006d06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d045      	beq.n	8006d06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c7a:	f7fe fdab 	bl	80057d4 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d302      	bcc.n	8006c90 <I2C_IsErrorOccurred+0x54>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d13a      	bne.n	8006d06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ca2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb2:	d121      	bne.n	8006cf8 <I2C_IsErrorOccurred+0xbc>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cba:	d01d      	beq.n	8006cf8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006cbc:	7cfb      	ldrb	r3, [r7, #19]
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	d01a      	beq.n	8006cf8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006cd2:	f7fe fd7f 	bl	80057d4 <HAL_GetTick>
 8006cd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cd8:	e00e      	b.n	8006cf8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006cda:	f7fe fd7b 	bl	80057d4 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b19      	cmp	r3, #25
 8006ce6:	d907      	bls.n	8006cf8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	f043 0320 	orr.w	r3, r3, #32
 8006cee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006cf6:	e006      	b.n	8006d06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d1e9      	bne.n	8006cda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d003      	beq.n	8006d1c <I2C_IsErrorOccurred+0xe0>
 8006d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0aa      	beq.n	8006c72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d103      	bne.n	8006d2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	f043 0304 	orr.w	r3, r3, #4
 8006d32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	f043 0308 	orr.w	r3, r3, #8
 8006d74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	f043 0302 	orr.w	r3, r3, #2
 8006d96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01c      	beq.n	8006dea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff fe45 	bl	8006a40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6859      	ldr	r1, [r3, #4]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <I2C_IsErrorOccurred+0x1bc>)
 8006dc2:	400b      	ands	r3, r1
 8006dc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3728      	adds	r7, #40	; 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	fe00e800 	.word	0xfe00e800

08006dfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	817b      	strh	r3, [r7, #10]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e0e:	897b      	ldrh	r3, [r7, #10]
 8006e10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e14:	7a7b      	ldrb	r3, [r7, #9]
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	0d5b      	lsrs	r3, r3, #21
 8006e36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e3a:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <I2C_TransferConfig+0x60>)
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	ea02 0103 	and.w	r1, r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	03ff63ff 	.word	0x03ff63ff

08006e60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d138      	bne.n	8006ee8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e032      	b.n	8006eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2224      	movs	r2, #36	; 0x24
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0201 	bic.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006eb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6819      	ldr	r1, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e000      	b.n	8006eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ee8:	2302      	movs	r3, #2
  }
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d139      	bne.n	8006f80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e033      	b.n	8006f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2224      	movs	r2, #36	; 0x24
 8006f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0201 	bic.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f94:	4b0d      	ldr	r3, [pc, #52]	; (8006fcc <HAL_PWREx_GetVoltageRange+0x3c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa0:	d102      	bne.n	8006fa8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fa6:	e00b      	b.n	8006fc0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006fa8:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <HAL_PWREx_GetVoltageRange+0x3c>)
 8006faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb6:	d102      	bne.n	8006fbe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fbc:	e000      	b.n	8006fc0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006fbe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40007000 	.word	0x40007000

08006fd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d141      	bne.n	8007062 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006fde:	4b4b      	ldr	r3, [pc, #300]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fea:	d131      	bne.n	8007050 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fec:	4b47      	ldr	r3, [pc, #284]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ff2:	4a46      	ldr	r2, [pc, #280]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ffc:	4b43      	ldr	r3, [pc, #268]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007004:	4a41      	ldr	r2, [pc, #260]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800700a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800700c:	4b40      	ldr	r3, [pc, #256]	; (8007110 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2232      	movs	r2, #50	; 0x32
 8007012:	fb02 f303 	mul.w	r3, r2, r3
 8007016:	4a3f      	ldr	r2, [pc, #252]	; (8007114 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007018:	fba2 2303 	umull	r2, r3, r2, r3
 800701c:	0c9b      	lsrs	r3, r3, #18
 800701e:	3301      	adds	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007022:	e002      	b.n	800702a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3b01      	subs	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800702a:	4b38      	ldr	r3, [pc, #224]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007036:	d102      	bne.n	800703e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f2      	bne.n	8007024 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800703e:	4b33      	ldr	r3, [pc, #204]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704a:	d158      	bne.n	80070fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e057      	b.n	8007100 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007050:	4b2e      	ldr	r3, [pc, #184]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007056:	4a2d      	ldr	r2, [pc, #180]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800705c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007060:	e04d      	b.n	80070fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007068:	d141      	bne.n	80070ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800706a:	4b28      	ldr	r3, [pc, #160]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007076:	d131      	bne.n	80070dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007078:	4b24      	ldr	r3, [pc, #144]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800707a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800707e:	4a23      	ldr	r2, [pc, #140]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007084:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007088:	4b20      	ldr	r3, [pc, #128]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007090:	4a1e      	ldr	r2, [pc, #120]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007096:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007098:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2232      	movs	r2, #50	; 0x32
 800709e:	fb02 f303 	mul.w	r3, r2, r3
 80070a2:	4a1c      	ldr	r2, [pc, #112]	; (8007114 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070a4:	fba2 2303 	umull	r2, r3, r2, r3
 80070a8:	0c9b      	lsrs	r3, r3, #18
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070ae:	e002      	b.n	80070b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070b6:	4b15      	ldr	r3, [pc, #84]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c2:	d102      	bne.n	80070ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1f2      	bne.n	80070b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070ca:	4b10      	ldr	r3, [pc, #64]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d6:	d112      	bne.n	80070fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e011      	b.n	8007100 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e2:	4a0a      	ldr	r2, [pc, #40]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80070ec:	e007      	b.n	80070fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80070ee:	4b07      	ldr	r3, [pc, #28]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070f6:	4a05      	ldr	r2, [pc, #20]	; (800710c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	40007000 	.word	0x40007000
 8007110:	20000288 	.word	0x20000288
 8007114:	431bde83 	.word	0x431bde83

08007118 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800711c:	4b05      	ldr	r3, [pc, #20]	; (8007134 <HAL_PWREx_EnableVddIO2+0x1c>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a04      	ldr	r2, [pc, #16]	; (8007134 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007126:	6053      	str	r3, [r2, #4]
}
 8007128:	bf00      	nop
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40007000 	.word	0x40007000

08007138 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f000 bc08 	b.w	800795c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800714c:	4b96      	ldr	r3, [pc, #600]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 030c 	and.w	r3, r3, #12
 8007154:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007156:	4b94      	ldr	r3, [pc, #592]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0310 	and.w	r3, r3, #16
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80e4 	beq.w	8007336 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <HAL_RCC_OscConfig+0x4c>
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b0c      	cmp	r3, #12
 8007178:	f040 808b 	bne.w	8007292 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2b01      	cmp	r3, #1
 8007180:	f040 8087 	bne.w	8007292 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007184:	4b88      	ldr	r3, [pc, #544]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_RCC_OscConfig+0x64>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e3df      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1a      	ldr	r2, [r3, #32]
 80071a0:	4b81      	ldr	r3, [pc, #516]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <HAL_RCC_OscConfig+0x7e>
 80071ac:	4b7e      	ldr	r3, [pc, #504]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071b4:	e005      	b.n	80071c2 <HAL_RCC_OscConfig+0x8a>
 80071b6:	4b7c      	ldr	r3, [pc, #496]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80071b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d223      	bcs.n	800720e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fdcc 	bl	8007d68 <RCC_SetFlashLatencyFromMSIRange>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e3c0      	b.n	800795c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071da:	4b73      	ldr	r3, [pc, #460]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a72      	ldr	r2, [pc, #456]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80071e0:	f043 0308 	orr.w	r3, r3, #8
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	4b70      	ldr	r3, [pc, #448]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	496d      	ldr	r1, [pc, #436]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071f8:	4b6b      	ldr	r3, [pc, #428]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	4968      	ldr	r1, [pc, #416]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007208:	4313      	orrs	r3, r2
 800720a:	604b      	str	r3, [r1, #4]
 800720c:	e025      	b.n	800725a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800720e:	4b66      	ldr	r3, [pc, #408]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a65      	ldr	r2, [pc, #404]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007214:	f043 0308 	orr.w	r3, r3, #8
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	4b63      	ldr	r3, [pc, #396]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	4960      	ldr	r1, [pc, #384]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007228:	4313      	orrs	r3, r2
 800722a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800722c:	4b5e      	ldr	r3, [pc, #376]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	495b      	ldr	r1, [pc, #364]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 800723c:	4313      	orrs	r3, r2
 800723e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fd8c 	bl	8007d68 <RCC_SetFlashLatencyFromMSIRange>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e380      	b.n	800795c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800725a:	f000 fcc1 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 800725e:	4602      	mov	r2, r0
 8007260:	4b51      	ldr	r3, [pc, #324]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	4950      	ldr	r1, [pc, #320]	; (80073ac <HAL_RCC_OscConfig+0x274>)
 800726c:	5ccb      	ldrb	r3, [r1, r3]
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	fa22 f303 	lsr.w	r3, r2, r3
 8007276:	4a4e      	ldr	r2, [pc, #312]	; (80073b0 <HAL_RCC_OscConfig+0x278>)
 8007278:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800727a:	4b4e      	ldr	r3, [pc, #312]	; (80073b4 <HAL_RCC_OscConfig+0x27c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fa58 	bl	8005734 <HAL_InitTick>
 8007284:	4603      	mov	r3, r0
 8007286:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d052      	beq.n	8007334 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	e364      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d032      	beq.n	8007300 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800729a:	4b43      	ldr	r3, [pc, #268]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a42      	ldr	r2, [pc, #264]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072a6:	f7fe fa95 	bl	80057d4 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072ae:	f7fe fa91 	bl	80057d4 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e34d      	b.n	800795c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072c0:	4b39      	ldr	r3, [pc, #228]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0f0      	beq.n	80072ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072cc:	4b36      	ldr	r3, [pc, #216]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a35      	ldr	r2, [pc, #212]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80072d2:	f043 0308 	orr.w	r3, r3, #8
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	4b33      	ldr	r3, [pc, #204]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	4930      	ldr	r1, [pc, #192]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072ea:	4b2f      	ldr	r3, [pc, #188]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	492b      	ldr	r1, [pc, #172]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	604b      	str	r3, [r1, #4]
 80072fe:	e01a      	b.n	8007336 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007300:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a28      	ldr	r2, [pc, #160]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800730c:	f7fe fa62 	bl	80057d4 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007314:	f7fe fa5e 	bl	80057d4 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e31a      	b.n	800795c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007326:	4b20      	ldr	r3, [pc, #128]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f0      	bne.n	8007314 <HAL_RCC_OscConfig+0x1dc>
 8007332:	e000      	b.n	8007336 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007334:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d073      	beq.n	800742a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b08      	cmp	r3, #8
 8007346:	d005      	beq.n	8007354 <HAL_RCC_OscConfig+0x21c>
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	2b0c      	cmp	r3, #12
 800734c:	d10e      	bne.n	800736c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d10b      	bne.n	800736c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007354:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d063      	beq.n	8007428 <HAL_RCC_OscConfig+0x2f0>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d15f      	bne.n	8007428 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e2f7      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007374:	d106      	bne.n	8007384 <HAL_RCC_OscConfig+0x24c>
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a0b      	ldr	r2, [pc, #44]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 800737c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e025      	b.n	80073d0 <HAL_RCC_OscConfig+0x298>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800738c:	d114      	bne.n	80073b8 <HAL_RCC_OscConfig+0x280>
 800738e:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a05      	ldr	r2, [pc, #20]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 8007394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	4b03      	ldr	r3, [pc, #12]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a02      	ldr	r2, [pc, #8]	; (80073a8 <HAL_RCC_OscConfig+0x270>)
 80073a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	e013      	b.n	80073d0 <HAL_RCC_OscConfig+0x298>
 80073a8:	40021000 	.word	0x40021000
 80073ac:	08028880 	.word	0x08028880
 80073b0:	20000288 	.word	0x20000288
 80073b4:	20000298 	.word	0x20000298
 80073b8:	4ba0      	ldr	r3, [pc, #640]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a9f      	ldr	r2, [pc, #636]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80073be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	4b9d      	ldr	r3, [pc, #628]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a9c      	ldr	r2, [pc, #624]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80073ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d013      	beq.n	8007400 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d8:	f7fe f9fc 	bl	80057d4 <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073e0:	f7fe f9f8 	bl	80057d4 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b64      	cmp	r3, #100	; 0x64
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e2b4      	b.n	800795c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073f2:	4b92      	ldr	r3, [pc, #584]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCC_OscConfig+0x2a8>
 80073fe:	e014      	b.n	800742a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7fe f9e8 	bl	80057d4 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007408:	f7fe f9e4 	bl	80057d4 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b64      	cmp	r3, #100	; 0x64
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e2a0      	b.n	800795c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800741a:	4b88      	ldr	r3, [pc, #544]	; (800763c <HAL_RCC_OscConfig+0x504>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1f0      	bne.n	8007408 <HAL_RCC_OscConfig+0x2d0>
 8007426:	e000      	b.n	800742a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d060      	beq.n	80074f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b04      	cmp	r3, #4
 800743a:	d005      	beq.n	8007448 <HAL_RCC_OscConfig+0x310>
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b0c      	cmp	r3, #12
 8007440:	d119      	bne.n	8007476 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d116      	bne.n	8007476 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007448:	4b7c      	ldr	r3, [pc, #496]	; (800763c <HAL_RCC_OscConfig+0x504>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <HAL_RCC_OscConfig+0x328>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e27d      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007460:	4b76      	ldr	r3, [pc, #472]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	061b      	lsls	r3, r3, #24
 800746e:	4973      	ldr	r1, [pc, #460]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007470:	4313      	orrs	r3, r2
 8007472:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007474:	e040      	b.n	80074f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d023      	beq.n	80074c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800747e:	4b6f      	ldr	r3, [pc, #444]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a6e      	ldr	r2, [pc, #440]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748a:	f7fe f9a3 	bl	80057d4 <HAL_GetTick>
 800748e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007492:	f7fe f99f 	bl	80057d4 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e25b      	b.n	800795c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074a4:	4b65      	ldr	r3, [pc, #404]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0f0      	beq.n	8007492 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b0:	4b62      	ldr	r3, [pc, #392]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	495f      	ldr	r1, [pc, #380]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	604b      	str	r3, [r1, #4]
 80074c4:	e018      	b.n	80074f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074c6:	4b5d      	ldr	r3, [pc, #372]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a5c      	ldr	r2, [pc, #368]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80074cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d2:	f7fe f97f 	bl	80057d4 <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074d8:	e008      	b.n	80074ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074da:	f7fe f97b 	bl	80057d4 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e237      	b.n	800795c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074ec:	4b53      	ldr	r3, [pc, #332]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1f0      	bne.n	80074da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d03c      	beq.n	800757e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01c      	beq.n	8007546 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800750c:	4b4b      	ldr	r3, [pc, #300]	; (800763c <HAL_RCC_OscConfig+0x504>)
 800750e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007512:	4a4a      	ldr	r2, [pc, #296]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007514:	f043 0301 	orr.w	r3, r3, #1
 8007518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751c:	f7fe f95a 	bl	80057d4 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007524:	f7fe f956 	bl	80057d4 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e212      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007536:	4b41      	ldr	r3, [pc, #260]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0ef      	beq.n	8007524 <HAL_RCC_OscConfig+0x3ec>
 8007544:	e01b      	b.n	800757e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007546:	4b3d      	ldr	r3, [pc, #244]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800754c:	4a3b      	ldr	r2, [pc, #236]	; (800763c <HAL_RCC_OscConfig+0x504>)
 800754e:	f023 0301 	bic.w	r3, r3, #1
 8007552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007556:	f7fe f93d 	bl	80057d4 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800755e:	f7fe f939 	bl	80057d4 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e1f5      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007570:	4b32      	ldr	r3, [pc, #200]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1ef      	bne.n	800755e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0304 	and.w	r3, r3, #4
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80a6 	beq.w	80076d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800758c:	2300      	movs	r3, #0
 800758e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007590:	4b2a      	ldr	r3, [pc, #168]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10d      	bne.n	80075b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800759c:	4b27      	ldr	r3, [pc, #156]	; (800763c <HAL_RCC_OscConfig+0x504>)
 800759e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a0:	4a26      	ldr	r2, [pc, #152]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80075a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a6:	6593      	str	r3, [r2, #88]	; 0x58
 80075a8:	4b24      	ldr	r3, [pc, #144]	; (800763c <HAL_RCC_OscConfig+0x504>)
 80075aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075b4:	2301      	movs	r3, #1
 80075b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075b8:	4b21      	ldr	r3, [pc, #132]	; (8007640 <HAL_RCC_OscConfig+0x508>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d118      	bne.n	80075f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075c4:	4b1e      	ldr	r3, [pc, #120]	; (8007640 <HAL_RCC_OscConfig+0x508>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <HAL_RCC_OscConfig+0x508>)
 80075ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075d0:	f7fe f900 	bl	80057d4 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d8:	f7fe f8fc 	bl	80057d4 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e1b8      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075ea:	4b15      	ldr	r3, [pc, #84]	; (8007640 <HAL_RCC_OscConfig+0x508>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d108      	bne.n	8007610 <HAL_RCC_OscConfig+0x4d8>
 80075fe:	4b0f      	ldr	r3, [pc, #60]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007604:	4a0d      	ldr	r2, [pc, #52]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007606:	f043 0301 	orr.w	r3, r3, #1
 800760a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800760e:	e029      	b.n	8007664 <HAL_RCC_OscConfig+0x52c>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b05      	cmp	r3, #5
 8007616:	d115      	bne.n	8007644 <HAL_RCC_OscConfig+0x50c>
 8007618:	4b08      	ldr	r3, [pc, #32]	; (800763c <HAL_RCC_OscConfig+0x504>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761e:	4a07      	ldr	r2, [pc, #28]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007620:	f043 0304 	orr.w	r3, r3, #4
 8007624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007628:	4b04      	ldr	r3, [pc, #16]	; (800763c <HAL_RCC_OscConfig+0x504>)
 800762a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762e:	4a03      	ldr	r2, [pc, #12]	; (800763c <HAL_RCC_OscConfig+0x504>)
 8007630:	f043 0301 	orr.w	r3, r3, #1
 8007634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007638:	e014      	b.n	8007664 <HAL_RCC_OscConfig+0x52c>
 800763a:	bf00      	nop
 800763c:	40021000 	.word	0x40021000
 8007640:	40007000 	.word	0x40007000
 8007644:	4b9d      	ldr	r3, [pc, #628]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764a:	4a9c      	ldr	r2, [pc, #624]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007654:	4b99      	ldr	r3, [pc, #612]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765a:	4a98      	ldr	r2, [pc, #608]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 800765c:	f023 0304 	bic.w	r3, r3, #4
 8007660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d016      	beq.n	800769a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800766c:	f7fe f8b2 	bl	80057d4 <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007672:	e00a      	b.n	800768a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007674:	f7fe f8ae 	bl	80057d4 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007682:	4293      	cmp	r3, r2
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e168      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800768a:	4b8c      	ldr	r3, [pc, #560]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 800768c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d0ed      	beq.n	8007674 <HAL_RCC_OscConfig+0x53c>
 8007698:	e015      	b.n	80076c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800769a:	f7fe f89b 	bl	80057d4 <HAL_GetTick>
 800769e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076a0:	e00a      	b.n	80076b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076a2:	f7fe f897 	bl	80057d4 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d901      	bls.n	80076b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e151      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076b8:	4b80      	ldr	r3, [pc, #512]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 80076ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1ed      	bne.n	80076a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076c6:	7ffb      	ldrb	r3, [r7, #31]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d105      	bne.n	80076d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076cc:	4b7b      	ldr	r3, [pc, #492]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 80076ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d0:	4a7a      	ldr	r2, [pc, #488]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 80076d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d03c      	beq.n	800775e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01c      	beq.n	8007726 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80076ec:	4b73      	ldr	r3, [pc, #460]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 80076ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076f2:	4a72      	ldr	r2, [pc, #456]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 80076f4:	f043 0301 	orr.w	r3, r3, #1
 80076f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076fc:	f7fe f86a 	bl	80057d4 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007704:	f7fe f866 	bl	80057d4 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e122      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007716:	4b69      	ldr	r3, [pc, #420]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0ef      	beq.n	8007704 <HAL_RCC_OscConfig+0x5cc>
 8007724:	e01b      	b.n	800775e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007726:	4b65      	ldr	r3, [pc, #404]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800772c:	4a63      	ldr	r2, [pc, #396]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 800772e:	f023 0301 	bic.w	r3, r3, #1
 8007732:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007736:	f7fe f84d 	bl	80057d4 <HAL_GetTick>
 800773a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800773c:	e008      	b.n	8007750 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800773e:	f7fe f849 	bl	80057d4 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d901      	bls.n	8007750 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e105      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007750:	4b5a      	ldr	r3, [pc, #360]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1ef      	bne.n	800773e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 80f9 	beq.w	800795a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776c:	2b02      	cmp	r3, #2
 800776e:	f040 80cf 	bne.w	8007910 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007772:	4b52      	ldr	r3, [pc, #328]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f003 0203 	and.w	r2, r3, #3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	429a      	cmp	r2, r3
 8007784:	d12c      	bne.n	80077e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	3b01      	subs	r3, #1
 8007792:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007794:	429a      	cmp	r2, r3
 8007796:	d123      	bne.n	80077e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d11b      	bne.n	80077e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d113      	bne.n	80077e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	3b01      	subs	r3, #1
 80077c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d109      	bne.n	80077e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	3b01      	subs	r3, #1
 80077da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077dc:	429a      	cmp	r2, r3
 80077de:	d071      	beq.n	80078c4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b0c      	cmp	r3, #12
 80077e4:	d068      	beq.n	80078b8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80077e6:	4b35      	ldr	r3, [pc, #212]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80077f2:	4b32      	ldr	r3, [pc, #200]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e0ac      	b.n	800795c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007802:	4b2e      	ldr	r3, [pc, #184]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a2d      	ldr	r2, [pc, #180]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800780c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800780e:	f7fd ffe1 	bl	80057d4 <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007814:	e008      	b.n	8007828 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007816:	f7fd ffdd 	bl	80057d4 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e099      	b.n	800795c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007828:	4b24      	ldr	r3, [pc, #144]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f0      	bne.n	8007816 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007834:	4b21      	ldr	r3, [pc, #132]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	4b21      	ldr	r3, [pc, #132]	; (80078c0 <HAL_RCC_OscConfig+0x788>)
 800783a:	4013      	ands	r3, r2
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007844:	3a01      	subs	r2, #1
 8007846:	0112      	lsls	r2, r2, #4
 8007848:	4311      	orrs	r1, r2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800784e:	0212      	lsls	r2, r2, #8
 8007850:	4311      	orrs	r1, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007856:	0852      	lsrs	r2, r2, #1
 8007858:	3a01      	subs	r2, #1
 800785a:	0552      	lsls	r2, r2, #21
 800785c:	4311      	orrs	r1, r2
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007862:	0852      	lsrs	r2, r2, #1
 8007864:	3a01      	subs	r2, #1
 8007866:	0652      	lsls	r2, r2, #25
 8007868:	4311      	orrs	r1, r2
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800786e:	06d2      	lsls	r2, r2, #27
 8007870:	430a      	orrs	r2, r1
 8007872:	4912      	ldr	r1, [pc, #72]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007874:	4313      	orrs	r3, r2
 8007876:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007878:	4b10      	ldr	r3, [pc, #64]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a0f      	ldr	r2, [pc, #60]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 800787e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007882:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007884:	4b0d      	ldr	r3, [pc, #52]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	4a0c      	ldr	r2, [pc, #48]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 800788a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800788e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007890:	f7fd ffa0 	bl	80057d4 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007898:	f7fd ff9c 	bl	80057d4 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e058      	b.n	800795c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078aa:	4b04      	ldr	r3, [pc, #16]	; (80078bc <HAL_RCC_OscConfig+0x784>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f0      	beq.n	8007898 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80078b6:	e050      	b.n	800795a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e04f      	b.n	800795c <HAL_RCC_OscConfig+0x824>
 80078bc:	40021000 	.word	0x40021000
 80078c0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078c4:	4b27      	ldr	r3, [pc, #156]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d144      	bne.n	800795a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80078d0:	4b24      	ldr	r3, [pc, #144]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a23      	ldr	r2, [pc, #140]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 80078d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078dc:	4b21      	ldr	r3, [pc, #132]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	4a20      	ldr	r2, [pc, #128]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 80078e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80078e8:	f7fd ff74 	bl	80057d4 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f0:	f7fd ff70 	bl	80057d4 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e02c      	b.n	800795c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007902:	4b18      	ldr	r3, [pc, #96]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f0      	beq.n	80078f0 <HAL_RCC_OscConfig+0x7b8>
 800790e:	e024      	b.n	800795a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	2b0c      	cmp	r3, #12
 8007914:	d01f      	beq.n	8007956 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007916:	4b13      	ldr	r3, [pc, #76]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a12      	ldr	r2, [pc, #72]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 800791c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007922:	f7fd ff57 	bl	80057d4 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800792a:	f7fd ff53 	bl	80057d4 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e00f      	b.n	800795c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800793c:	4b09      	ldr	r3, [pc, #36]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f0      	bne.n	800792a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	4905      	ldr	r1, [pc, #20]	; (8007964 <HAL_RCC_OscConfig+0x82c>)
 800794e:	4b06      	ldr	r3, [pc, #24]	; (8007968 <HAL_RCC_OscConfig+0x830>)
 8007950:	4013      	ands	r3, r2
 8007952:	60cb      	str	r3, [r1, #12]
 8007954:	e001      	b.n	800795a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40021000 	.word	0x40021000
 8007968:	feeefffc 	.word	0xfeeefffc

0800796c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e11d      	b.n	8007bc0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007984:	4b90      	ldr	r3, [pc, #576]	; (8007bc8 <HAL_RCC_ClockConfig+0x25c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 030f 	and.w	r3, r3, #15
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d910      	bls.n	80079b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007992:	4b8d      	ldr	r3, [pc, #564]	; (8007bc8 <HAL_RCC_ClockConfig+0x25c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f023 020f 	bic.w	r2, r3, #15
 800799a:	498b      	ldr	r1, [pc, #556]	; (8007bc8 <HAL_RCC_ClockConfig+0x25c>)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	4313      	orrs	r3, r2
 80079a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a2:	4b89      	ldr	r3, [pc, #548]	; (8007bc8 <HAL_RCC_ClockConfig+0x25c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d001      	beq.n	80079b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e105      	b.n	8007bc0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d010      	beq.n	80079e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	4b81      	ldr	r3, [pc, #516]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d908      	bls.n	80079e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079d0:	4b7e      	ldr	r3, [pc, #504]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	497b      	ldr	r1, [pc, #492]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d079      	beq.n	8007ae2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d11e      	bne.n	8007a34 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079f6:	4b75      	ldr	r3, [pc, #468]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e0dc      	b.n	8007bc0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007a06:	f000 fa09 	bl	8007e1c <RCC_GetSysClockFreqFromPLLSource>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4a70      	ldr	r2, [pc, #448]	; (8007bd0 <HAL_RCC_ClockConfig+0x264>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d946      	bls.n	8007aa0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007a12:	4b6e      	ldr	r3, [pc, #440]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d140      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a1e:	4b6b      	ldr	r3, [pc, #428]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a26:	4a69      	ldr	r2, [pc, #420]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a2e:	2380      	movs	r3, #128	; 0x80
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e035      	b.n	8007aa0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d107      	bne.n	8007a4c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a3c:	4b63      	ldr	r3, [pc, #396]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d115      	bne.n	8007a74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e0b9      	b.n	8007bc0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d107      	bne.n	8007a64 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a54:	4b5d      	ldr	r3, [pc, #372]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e0ad      	b.n	8007bc0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a64:	4b59      	ldr	r3, [pc, #356]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0a5      	b.n	8007bc0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007a74:	f000 f8b4 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	4a55      	ldr	r2, [pc, #340]	; (8007bd0 <HAL_RCC_ClockConfig+0x264>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d90f      	bls.n	8007aa0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007a80:	4b52      	ldr	r3, [pc, #328]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a8c:	4b4f      	ldr	r3, [pc, #316]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a94:	4a4d      	ldr	r2, [pc, #308]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a9c:	2380      	movs	r3, #128	; 0x80
 8007a9e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007aa0:	4b4a      	ldr	r3, [pc, #296]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f023 0203 	bic.w	r2, r3, #3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	4947      	ldr	r1, [pc, #284]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab2:	f7fd fe8f 	bl	80057d4 <HAL_GetTick>
 8007ab6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ab8:	e00a      	b.n	8007ad0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aba:	f7fd fe8b 	bl	80057d4 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d901      	bls.n	8007ad0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e077      	b.n	8007bc0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad0:	4b3e      	ldr	r3, [pc, #248]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 020c 	and.w	r2, r3, #12
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d1eb      	bne.n	8007aba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b80      	cmp	r3, #128	; 0x80
 8007ae6:	d105      	bne.n	8007af4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007ae8:	4b38      	ldr	r3, [pc, #224]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	4a37      	ldr	r2, [pc, #220]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007af2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d010      	beq.n	8007b22 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	4b31      	ldr	r3, [pc, #196]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d208      	bcs.n	8007b22 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b10:	4b2e      	ldr	r3, [pc, #184]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	492b      	ldr	r1, [pc, #172]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b22:	4b29      	ldr	r3, [pc, #164]	; (8007bc8 <HAL_RCC_ClockConfig+0x25c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d210      	bcs.n	8007b52 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b30:	4b25      	ldr	r3, [pc, #148]	; (8007bc8 <HAL_RCC_ClockConfig+0x25c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f023 020f 	bic.w	r2, r3, #15
 8007b38:	4923      	ldr	r1, [pc, #140]	; (8007bc8 <HAL_RCC_ClockConfig+0x25c>)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b40:	4b21      	ldr	r3, [pc, #132]	; (8007bc8 <HAL_RCC_ClockConfig+0x25c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 030f 	and.w	r3, r3, #15
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d001      	beq.n	8007b52 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e036      	b.n	8007bc0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d008      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b5e:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	4918      	ldr	r1, [pc, #96]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d009      	beq.n	8007b90 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b7c:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	4910      	ldr	r1, [pc, #64]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b90:	f000 f826 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 8007b94:	4602      	mov	r2, r0
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <HAL_RCC_ClockConfig+0x260>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	091b      	lsrs	r3, r3, #4
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	490c      	ldr	r1, [pc, #48]	; (8007bd4 <HAL_RCC_ClockConfig+0x268>)
 8007ba2:	5ccb      	ldrb	r3, [r1, r3]
 8007ba4:	f003 031f 	and.w	r3, r3, #31
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bac:	4a0a      	ldr	r2, [pc, #40]	; (8007bd8 <HAL_RCC_ClockConfig+0x26c>)
 8007bae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007bb0:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <HAL_RCC_ClockConfig+0x270>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fd fdbd 	bl	8005734 <HAL_InitTick>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]

  return status;
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40022000 	.word	0x40022000
 8007bcc:	40021000 	.word	0x40021000
 8007bd0:	04c4b400 	.word	0x04c4b400
 8007bd4:	08028880 	.word	0x08028880
 8007bd8:	20000288 	.word	0x20000288
 8007bdc:	20000298 	.word	0x20000298

08007be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b089      	sub	sp, #36	; 0x24
 8007be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	61fb      	str	r3, [r7, #28]
 8007bea:	2300      	movs	r3, #0
 8007bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bee:	4b3e      	ldr	r3, [pc, #248]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 030c 	and.w	r3, r3, #12
 8007bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bf8:	4b3b      	ldr	r3, [pc, #236]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <HAL_RCC_GetSysClockFreq+0x34>
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	2b0c      	cmp	r3, #12
 8007c0c:	d121      	bne.n	8007c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d11e      	bne.n	8007c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007c14:	4b34      	ldr	r3, [pc, #208]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0308 	and.w	r3, r3, #8
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007c20:	4b31      	ldr	r3, [pc, #196]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c26:	0a1b      	lsrs	r3, r3, #8
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	61fb      	str	r3, [r7, #28]
 8007c2e:	e005      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007c30:	4b2d      	ldr	r3, [pc, #180]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	091b      	lsrs	r3, r3, #4
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007c3c:	4a2b      	ldr	r2, [pc, #172]	; (8007cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10d      	bne.n	8007c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c50:	e00a      	b.n	8007c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d102      	bne.n	8007c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c58:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c5a:	61bb      	str	r3, [r7, #24]
 8007c5c:	e004      	b.n	8007c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d101      	bne.n	8007c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c64:	4b23      	ldr	r3, [pc, #140]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	2b0c      	cmp	r3, #12
 8007c6c:	d134      	bne.n	8007cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c6e:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d003      	beq.n	8007c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d003      	beq.n	8007c8c <HAL_RCC_GetSysClockFreq+0xac>
 8007c84:	e005      	b.n	8007c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007c86:	4b1a      	ldr	r3, [pc, #104]	; (8007cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c88:	617b      	str	r3, [r7, #20]
      break;
 8007c8a:	e005      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007c8c:	4b19      	ldr	r3, [pc, #100]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007c8e:	617b      	str	r3, [r7, #20]
      break;
 8007c90:	e002      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	617b      	str	r3, [r7, #20]
      break;
 8007c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c98:	4b13      	ldr	r3, [pc, #76]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007ca6:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	0a1b      	lsrs	r3, r3, #8
 8007cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	fb03 f202 	mul.w	r2, r3, r2
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cbe:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	0e5b      	lsrs	r3, r3, #25
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	3301      	adds	r3, #1
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3724      	adds	r7, #36	; 0x24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40021000 	.word	0x40021000
 8007cec:	08028898 	.word	0x08028898
 8007cf0:	00f42400 	.word	0x00f42400
 8007cf4:	007a1200 	.word	0x007a1200

08007cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cfc:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	20000288 	.word	0x20000288

08007d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d14:	f7ff fff0 	bl	8007cf8 <HAL_RCC_GetHCLKFreq>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	0a1b      	lsrs	r3, r3, #8
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	4904      	ldr	r1, [pc, #16]	; (8007d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d26:	5ccb      	ldrb	r3, [r1, r3]
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	40021000 	.word	0x40021000
 8007d38:	08028890 	.word	0x08028890

08007d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d40:	f7ff ffda 	bl	8007cf8 <HAL_RCC_GetHCLKFreq>
 8007d44:	4602      	mov	r2, r0
 8007d46:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	0adb      	lsrs	r3, r3, #11
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	4904      	ldr	r1, [pc, #16]	; (8007d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d52:	5ccb      	ldrb	r3, [r1, r3]
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40021000 	.word	0x40021000
 8007d64:	08028890 	.word	0x08028890

08007d68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007d74:	4b27      	ldr	r3, [pc, #156]	; (8007e14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007d80:	f7ff f906 	bl	8006f90 <HAL_PWREx_GetVoltageRange>
 8007d84:	6178      	str	r0, [r7, #20]
 8007d86:	e014      	b.n	8007db2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d88:	4b22      	ldr	r3, [pc, #136]	; (8007e14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d8c:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d92:	6593      	str	r3, [r2, #88]	; 0x58
 8007d94:	4b1f      	ldr	r3, [pc, #124]	; (8007e14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007da0:	f7ff f8f6 	bl	8006f90 <HAL_PWREx_GetVoltageRange>
 8007da4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007da6:	4b1b      	ldr	r3, [pc, #108]	; (8007e14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007daa:	4a1a      	ldr	r2, [pc, #104]	; (8007e14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007db0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db8:	d10b      	bne.n	8007dd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b80      	cmp	r3, #128	; 0x80
 8007dbe:	d913      	bls.n	8007de8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2ba0      	cmp	r3, #160	; 0xa0
 8007dc4:	d902      	bls.n	8007dcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	e00d      	b.n	8007de8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007dcc:	2301      	movs	r3, #1
 8007dce:	613b      	str	r3, [r7, #16]
 8007dd0:	e00a      	b.n	8007de8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8007dd6:	d902      	bls.n	8007dde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007dd8:	2302      	movs	r3, #2
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	e004      	b.n	8007de8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b70      	cmp	r3, #112	; 0x70
 8007de2:	d101      	bne.n	8007de8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007de4:	2301      	movs	r3, #1
 8007de6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007de8:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f023 020f 	bic.w	r2, r3, #15
 8007df0:	4909      	ldr	r1, [pc, #36]	; (8007e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007df8:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 030f 	and.w	r3, r3, #15
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d001      	beq.n	8007e0a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40021000 	.word	0x40021000
 8007e18:	40022000 	.word	0x40022000

08007e1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e22:	4b2d      	ldr	r3, [pc, #180]	; (8007ed8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d00b      	beq.n	8007e4a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d825      	bhi.n	8007e84 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d008      	beq.n	8007e50 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d11f      	bne.n	8007e84 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007e44:	4b25      	ldr	r3, [pc, #148]	; (8007edc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007e46:	613b      	str	r3, [r7, #16]
    break;
 8007e48:	e01f      	b.n	8007e8a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007e4a:	4b25      	ldr	r3, [pc, #148]	; (8007ee0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007e4c:	613b      	str	r3, [r7, #16]
    break;
 8007e4e:	e01c      	b.n	8007e8a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e50:	4b21      	ldr	r3, [pc, #132]	; (8007ed8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d107      	bne.n	8007e6c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e5c:	4b1e      	ldr	r3, [pc, #120]	; (8007ed8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e62:	0a1b      	lsrs	r3, r3, #8
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	e005      	b.n	8007e78 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ed8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	091b      	lsrs	r3, r3, #4
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007e78:	4a1a      	ldr	r2, [pc, #104]	; (8007ee4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e80:	613b      	str	r3, [r7, #16]
    break;
 8007e82:	e002      	b.n	8007e8a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]
    break;
 8007e88:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e8a:	4b13      	ldr	r3, [pc, #76]	; (8007ed8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	091b      	lsrs	r3, r3, #4
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	3301      	adds	r3, #1
 8007e96:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007e98:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	0a1b      	lsrs	r3, r3, #8
 8007e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	fb03 f202 	mul.w	r2, r3, r2
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eae:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007eb0:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	0e5b      	lsrs	r3, r3, #25
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	3301      	adds	r3, #1
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007eca:	683b      	ldr	r3, [r7, #0]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	40021000 	.word	0x40021000
 8007edc:	00f42400 	.word	0x00f42400
 8007ee0:	007a1200 	.word	0x007a1200
 8007ee4:	08028898 	.word	0x08028898

08007ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d040      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f08:	2b80      	cmp	r3, #128	; 0x80
 8007f0a:	d02a      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f0c:	2b80      	cmp	r3, #128	; 0x80
 8007f0e:	d825      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007f10:	2b60      	cmp	r3, #96	; 0x60
 8007f12:	d026      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f14:	2b60      	cmp	r3, #96	; 0x60
 8007f16:	d821      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007f18:	2b40      	cmp	r3, #64	; 0x40
 8007f1a:	d006      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007f1c:	2b40      	cmp	r3, #64	; 0x40
 8007f1e:	d81d      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d009      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007f24:	2b20      	cmp	r3, #32
 8007f26:	d010      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007f28:	e018      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007f2a:	4b89      	ldr	r3, [pc, #548]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	4a88      	ldr	r2, [pc, #544]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f34:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f36:	e015      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fb02 	bl	8008548 <RCCEx_PLLSAI1_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f48:	e00c      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3320      	adds	r3, #32
 8007f4e:	2100      	movs	r1, #0
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fbed 	bl	8008730 <RCCEx_PLLSAI2_Config>
 8007f56:	4603      	mov	r3, r0
 8007f58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f5a:	e003      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	74fb      	strb	r3, [r7, #19]
      break;
 8007f60:	e000      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f64:	7cfb      	ldrb	r3, [r7, #19]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10b      	bne.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f6a:	4b79      	ldr	r3, [pc, #484]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f70:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f78:	4975      	ldr	r1, [pc, #468]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007f80:	e001      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f82:	7cfb      	ldrb	r3, [r7, #19]
 8007f84:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d047      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f9a:	d030      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa0:	d82a      	bhi.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa6:	d02a      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007fa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fac:	d824      	bhi.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb2:	d008      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb8:	d81e      	bhi.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc2:	d010      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007fc4:	e018      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007fc6:	4b62      	ldr	r3, [pc, #392]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	4a61      	ldr	r2, [pc, #388]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007fd2:	e015      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fab4 	bl	8008548 <RCCEx_PLLSAI1_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007fe4:	e00c      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3320      	adds	r3, #32
 8007fea:	2100      	movs	r1, #0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fb9f 	bl	8008730 <RCCEx_PLLSAI2_Config>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ff6:	e003      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	74fb      	strb	r3, [r7, #19]
      break;
 8007ffc:	e000      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008000:	7cfb      	ldrb	r3, [r7, #19]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10b      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008006:	4b52      	ldr	r3, [pc, #328]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008008:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800800c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008014:	494e      	ldr	r1, [pc, #312]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008016:	4313      	orrs	r3, r2
 8008018:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800801c:	e001      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801e:	7cfb      	ldrb	r3, [r7, #19]
 8008020:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 809f 	beq.w	800816e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008030:	2300      	movs	r3, #0
 8008032:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008034:	4b46      	ldr	r3, [pc, #280]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008044:	2300      	movs	r3, #0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00d      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800804a:	4b41      	ldr	r3, [pc, #260]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800804c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804e:	4a40      	ldr	r2, [pc, #256]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008054:	6593      	str	r3, [r2, #88]	; 0x58
 8008056:	4b3e      	ldr	r3, [pc, #248]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805e:	60bb      	str	r3, [r7, #8]
 8008060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008062:	2301      	movs	r3, #1
 8008064:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008066:	4b3b      	ldr	r3, [pc, #236]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a3a      	ldr	r2, [pc, #232]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800806c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008070:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008072:	f7fd fbaf 	bl	80057d4 <HAL_GetTick>
 8008076:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008078:	e009      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800807a:	f7fd fbab 	bl	80057d4 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d902      	bls.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	74fb      	strb	r3, [r7, #19]
        break;
 800808c:	e005      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800808e:	4b31      	ldr	r3, [pc, #196]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0ef      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800809a:	7cfb      	ldrb	r3, [r7, #19]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d15b      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080a0:	4b2b      	ldr	r3, [pc, #172]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080aa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01f      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d019      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80080be:	4b24      	ldr	r3, [pc, #144]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080ca:	4b21      	ldr	r3, [pc, #132]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d0:	4a1f      	ldr	r2, [pc, #124]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080da:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e0:	4a1b      	ldr	r2, [pc, #108]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80080ea:	4a19      	ldr	r2, [pc, #100]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d016      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080fc:	f7fd fb6a 	bl	80057d4 <HAL_GetTick>
 8008100:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008102:	e00b      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008104:	f7fd fb66 	bl	80057d4 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008112:	4293      	cmp	r3, r2
 8008114:	d902      	bls.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	74fb      	strb	r3, [r7, #19]
            break;
 800811a:	e006      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800811c:	4b0c      	ldr	r3, [pc, #48]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800811e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0ec      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800812a:	7cfb      	ldrb	r3, [r7, #19]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10c      	bne.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008130:	4b07      	ldr	r3, [pc, #28]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008140:	4903      	ldr	r1, [pc, #12]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008142:	4313      	orrs	r3, r2
 8008144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008148:	e008      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800814a:	7cfb      	ldrb	r3, [r7, #19]
 800814c:	74bb      	strb	r3, [r7, #18]
 800814e:	e005      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8008150:	40021000 	.word	0x40021000
 8008154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008158:	7cfb      	ldrb	r3, [r7, #19]
 800815a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800815c:	7c7b      	ldrb	r3, [r7, #17]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d105      	bne.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008162:	4ba0      	ldr	r3, [pc, #640]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008166:	4a9f      	ldr	r2, [pc, #636]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800816c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800817a:	4b9a      	ldr	r3, [pc, #616]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800817c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008180:	f023 0203 	bic.w	r2, r3, #3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008188:	4996      	ldr	r1, [pc, #600]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800818a:	4313      	orrs	r3, r2
 800818c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800819c:	4b91      	ldr	r3, [pc, #580]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800819e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a2:	f023 020c 	bic.w	r2, r3, #12
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	498e      	ldr	r1, [pc, #568]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081be:	4b89      	ldr	r3, [pc, #548]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081cc:	4985      	ldr	r1, [pc, #532]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081e0:	4b80      	ldr	r3, [pc, #512]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ee:	497d      	ldr	r1, [pc, #500]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0310 	and.w	r3, r3, #16
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008202:	4b78      	ldr	r3, [pc, #480]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008210:	4974      	ldr	r1, [pc, #464]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008212:	4313      	orrs	r3, r2
 8008214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008224:	4b6f      	ldr	r3, [pc, #444]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008232:	496c      	ldr	r1, [pc, #432]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008234:	4313      	orrs	r3, r2
 8008236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008246:	4b67      	ldr	r3, [pc, #412]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800824c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008254:	4963      	ldr	r1, [pc, #396]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008256:	4313      	orrs	r3, r2
 8008258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008268:	4b5e      	ldr	r3, [pc, #376]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800826a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008276:	495b      	ldr	r1, [pc, #364]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008278:	4313      	orrs	r3, r2
 800827a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800828a:	4b56      	ldr	r3, [pc, #344]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800828c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008290:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008298:	4952      	ldr	r1, [pc, #328]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082ac:	4b4d      	ldr	r3, [pc, #308]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ba:	494a      	ldr	r1, [pc, #296]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082ce:	4b45      	ldr	r3, [pc, #276]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082dc:	4941      	ldr	r1, [pc, #260]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082f0:	4b3c      	ldr	r3, [pc, #240]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082f6:	f023 0203 	bic.w	r2, r3, #3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082fe:	4939      	ldr	r1, [pc, #228]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008300:	4313      	orrs	r3, r2
 8008302:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d028      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008312:	4b34      	ldr	r3, [pc, #208]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008318:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008320:	4930      	ldr	r1, [pc, #192]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008322:	4313      	orrs	r3, r2
 8008324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008330:	d106      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008332:	4b2c      	ldr	r3, [pc, #176]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	4a2b      	ldr	r2, [pc, #172]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800833c:	60d3      	str	r3, [r2, #12]
 800833e:	e011      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008348:	d10c      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3304      	adds	r3, #4
 800834e:	2101      	movs	r1, #1
 8008350:	4618      	mov	r0, r3
 8008352:	f000 f8f9 	bl	8008548 <RCCEx_PLLSAI1_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800835a:	7cfb      	ldrb	r3, [r7, #19]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8008360:	7cfb      	ldrb	r3, [r7, #19]
 8008362:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d04d      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008378:	d108      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800837a:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800837c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008380:	4a18      	ldr	r2, [pc, #96]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008386:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800838a:	e012      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800838c:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800838e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008392:	4a14      	ldr	r2, [pc, #80]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008394:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008398:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800839c:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800839e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083aa:	490e      	ldr	r1, [pc, #56]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083ba:	d106      	bne.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083c6:	60d3      	str	r3, [r2, #12]
 80083c8:	e020      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d2:	d109      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80083d4:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4a02      	ldr	r2, [pc, #8]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083de:	60d3      	str	r3, [r2, #12]
 80083e0:	e014      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80083e2:	bf00      	nop
 80083e4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083f0:	d10c      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3304      	adds	r3, #4
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 f8a5 	bl	8008548 <RCCEx_PLLSAI1_Config>
 80083fe:	4603      	mov	r3, r0
 8008400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008402:	7cfb      	ldrb	r3, [r7, #19]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008408:	7cfb      	ldrb	r3, [r7, #19]
 800840a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d028      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008418:	4b4a      	ldr	r3, [pc, #296]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800841a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008426:	4947      	ldr	r1, [pc, #284]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008428:	4313      	orrs	r3, r2
 800842a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008436:	d106      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008438:	4b42      	ldr	r3, [pc, #264]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	4a41      	ldr	r2, [pc, #260]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800843e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008442:	60d3      	str	r3, [r2, #12]
 8008444:	e011      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800844e:	d10c      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3304      	adds	r3, #4
 8008454:	2101      	movs	r1, #1
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f876 	bl	8008548 <RCCEx_PLLSAI1_Config>
 800845c:	4603      	mov	r3, r0
 800845e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008460:	7cfb      	ldrb	r3, [r7, #19]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8008466:	7cfb      	ldrb	r3, [r7, #19]
 8008468:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d01e      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008476:	4b33      	ldr	r3, [pc, #204]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800847c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008486:	492f      	ldr	r1, [pc, #188]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008488:	4313      	orrs	r3, r2
 800848a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008498:	d10c      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3304      	adds	r3, #4
 800849e:	2102      	movs	r1, #2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f851 	bl	8008548 <RCCEx_PLLSAI1_Config>
 80084a6:	4603      	mov	r3, r0
 80084a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084aa:	7cfb      	ldrb	r3, [r7, #19]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80084b0:	7cfb      	ldrb	r3, [r7, #19]
 80084b2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084c0:	4b20      	ldr	r3, [pc, #128]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084c6:	f023 0204 	bic.w	r2, r3, #4
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d0:	491c      	ldr	r1, [pc, #112]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80084e4:	4b17      	ldr	r3, [pc, #92]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084ea:	f023 0218 	bic.w	r2, r3, #24
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f4:	4913      	ldr	r1, [pc, #76]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d017      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008508:	4b0e      	ldr	r3, [pc, #56]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800850a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800850e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008518:	490a      	ldr	r1, [pc, #40]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800852a:	d105      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	4a04      	ldr	r2, [pc, #16]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008536:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008538:	7cbb      	ldrb	r3, [r7, #18]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	40021000 	.word	0x40021000

08008548 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008556:	4b72      	ldr	r3, [pc, #456]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00e      	beq.n	8008580 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008562:	4b6f      	ldr	r3, [pc, #444]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f003 0203 	and.w	r2, r3, #3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d103      	bne.n	800857a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
       ||
 8008576:	2b00      	cmp	r3, #0
 8008578:	d142      	bne.n	8008600 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	73fb      	strb	r3, [r7, #15]
 800857e:	e03f      	b.n	8008600 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b03      	cmp	r3, #3
 8008586:	d018      	beq.n	80085ba <RCCEx_PLLSAI1_Config+0x72>
 8008588:	2b03      	cmp	r3, #3
 800858a:	d825      	bhi.n	80085d8 <RCCEx_PLLSAI1_Config+0x90>
 800858c:	2b01      	cmp	r3, #1
 800858e:	d002      	beq.n	8008596 <RCCEx_PLLSAI1_Config+0x4e>
 8008590:	2b02      	cmp	r3, #2
 8008592:	d009      	beq.n	80085a8 <RCCEx_PLLSAI1_Config+0x60>
 8008594:	e020      	b.n	80085d8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008596:	4b62      	ldr	r3, [pc, #392]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d11d      	bne.n	80085de <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085a6:	e01a      	b.n	80085de <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085a8:	4b5d      	ldr	r3, [pc, #372]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d116      	bne.n	80085e2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085b8:	e013      	b.n	80085e2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085ba:	4b59      	ldr	r3, [pc, #356]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10f      	bne.n	80085e6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80085c6:	4b56      	ldr	r3, [pc, #344]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d109      	bne.n	80085e6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085d6:	e006      	b.n	80085e6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	73fb      	strb	r3, [r7, #15]
      break;
 80085dc:	e004      	b.n	80085e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80085de:	bf00      	nop
 80085e0:	e002      	b.n	80085e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80085e2:	bf00      	nop
 80085e4:	e000      	b.n	80085e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80085e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d108      	bne.n	8008600 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80085ee:	4b4c      	ldr	r3, [pc, #304]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	f023 0203 	bic.w	r2, r3, #3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4949      	ldr	r1, [pc, #292]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 8086 	bne.w	8008714 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008608:	4b45      	ldr	r3, [pc, #276]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a44      	ldr	r2, [pc, #272]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 800860e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008614:	f7fd f8de 	bl	80057d4 <HAL_GetTick>
 8008618:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800861a:	e009      	b.n	8008630 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800861c:	f7fd f8da 	bl	80057d4 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d902      	bls.n	8008630 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	73fb      	strb	r3, [r7, #15]
        break;
 800862e:	e005      	b.n	800863c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008630:	4b3b      	ldr	r3, [pc, #236]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1ef      	bne.n	800861c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d168      	bne.n	8008714 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d113      	bne.n	8008670 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008648:	4b35      	ldr	r3, [pc, #212]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	4b35      	ldr	r3, [pc, #212]	; (8008724 <RCCEx_PLLSAI1_Config+0x1dc>)
 800864e:	4013      	ands	r3, r2
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	6892      	ldr	r2, [r2, #8]
 8008654:	0211      	lsls	r1, r2, #8
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	68d2      	ldr	r2, [r2, #12]
 800865a:	06d2      	lsls	r2, r2, #27
 800865c:	4311      	orrs	r1, r2
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6852      	ldr	r2, [r2, #4]
 8008662:	3a01      	subs	r2, #1
 8008664:	0112      	lsls	r2, r2, #4
 8008666:	430a      	orrs	r2, r1
 8008668:	492d      	ldr	r1, [pc, #180]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 800866a:	4313      	orrs	r3, r2
 800866c:	610b      	str	r3, [r1, #16]
 800866e:	e02d      	b.n	80086cc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d115      	bne.n	80086a2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008676:	4b2a      	ldr	r3, [pc, #168]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	4b2b      	ldr	r3, [pc, #172]	; (8008728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800867c:	4013      	ands	r3, r2
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6892      	ldr	r2, [r2, #8]
 8008682:	0211      	lsls	r1, r2, #8
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6912      	ldr	r2, [r2, #16]
 8008688:	0852      	lsrs	r2, r2, #1
 800868a:	3a01      	subs	r2, #1
 800868c:	0552      	lsls	r2, r2, #21
 800868e:	4311      	orrs	r1, r2
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6852      	ldr	r2, [r2, #4]
 8008694:	3a01      	subs	r2, #1
 8008696:	0112      	lsls	r2, r2, #4
 8008698:	430a      	orrs	r2, r1
 800869a:	4921      	ldr	r1, [pc, #132]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 800869c:	4313      	orrs	r3, r2
 800869e:	610b      	str	r3, [r1, #16]
 80086a0:	e014      	b.n	80086cc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086a2:	4b1f      	ldr	r3, [pc, #124]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086a4:	691a      	ldr	r2, [r3, #16]
 80086a6:	4b21      	ldr	r3, [pc, #132]	; (800872c <RCCEx_PLLSAI1_Config+0x1e4>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6892      	ldr	r2, [r2, #8]
 80086ae:	0211      	lsls	r1, r2, #8
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	6952      	ldr	r2, [r2, #20]
 80086b4:	0852      	lsrs	r2, r2, #1
 80086b6:	3a01      	subs	r2, #1
 80086b8:	0652      	lsls	r2, r2, #25
 80086ba:	4311      	orrs	r1, r2
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6852      	ldr	r2, [r2, #4]
 80086c0:	3a01      	subs	r2, #1
 80086c2:	0112      	lsls	r2, r2, #4
 80086c4:	430a      	orrs	r2, r1
 80086c6:	4916      	ldr	r1, [pc, #88]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80086cc:	4b14      	ldr	r3, [pc, #80]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a13      	ldr	r2, [pc, #76]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d8:	f7fd f87c 	bl	80057d4 <HAL_GetTick>
 80086dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086de:	e009      	b.n	80086f4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086e0:	f7fd f878 	bl	80057d4 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d902      	bls.n	80086f4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	73fb      	strb	r3, [r7, #15]
          break;
 80086f2:	e005      	b.n	8008700 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0ef      	beq.n	80086e0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d106      	bne.n	8008714 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008706:	4b06      	ldr	r3, [pc, #24]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008708:	691a      	ldr	r2, [r3, #16]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	4904      	ldr	r1, [pc, #16]	; (8008720 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008710:	4313      	orrs	r3, r2
 8008712:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40021000 	.word	0x40021000
 8008724:	07ff800f 	.word	0x07ff800f
 8008728:	ff9f800f 	.word	0xff9f800f
 800872c:	f9ff800f 	.word	0xf9ff800f

08008730 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800873e:	4b72      	ldr	r3, [pc, #456]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00e      	beq.n	8008768 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800874a:	4b6f      	ldr	r3, [pc, #444]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	f003 0203 	and.w	r2, r3, #3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d103      	bne.n	8008762 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
       ||
 800875e:	2b00      	cmp	r3, #0
 8008760:	d142      	bne.n	80087e8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	73fb      	strb	r3, [r7, #15]
 8008766:	e03f      	b.n	80087e8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d018      	beq.n	80087a2 <RCCEx_PLLSAI2_Config+0x72>
 8008770:	2b03      	cmp	r3, #3
 8008772:	d825      	bhi.n	80087c0 <RCCEx_PLLSAI2_Config+0x90>
 8008774:	2b01      	cmp	r3, #1
 8008776:	d002      	beq.n	800877e <RCCEx_PLLSAI2_Config+0x4e>
 8008778:	2b02      	cmp	r3, #2
 800877a:	d009      	beq.n	8008790 <RCCEx_PLLSAI2_Config+0x60>
 800877c:	e020      	b.n	80087c0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800877e:	4b62      	ldr	r3, [pc, #392]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d11d      	bne.n	80087c6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800878e:	e01a      	b.n	80087c6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008790:	4b5d      	ldr	r3, [pc, #372]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008798:	2b00      	cmp	r3, #0
 800879a:	d116      	bne.n	80087ca <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087a0:	e013      	b.n	80087ca <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087a2:	4b59      	ldr	r3, [pc, #356]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10f      	bne.n	80087ce <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087ae:	4b56      	ldr	r3, [pc, #344]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d109      	bne.n	80087ce <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087be:	e006      	b.n	80087ce <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	73fb      	strb	r3, [r7, #15]
      break;
 80087c4:	e004      	b.n	80087d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80087c6:	bf00      	nop
 80087c8:	e002      	b.n	80087d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80087ca:	bf00      	nop
 80087cc:	e000      	b.n	80087d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80087ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d108      	bne.n	80087e8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80087d6:	4b4c      	ldr	r3, [pc, #304]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f023 0203 	bic.w	r2, r3, #3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4949      	ldr	r1, [pc, #292]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f040 8086 	bne.w	80088fc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80087f0:	4b45      	ldr	r3, [pc, #276]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a44      	ldr	r2, [pc, #272]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087fc:	f7fc ffea 	bl	80057d4 <HAL_GetTick>
 8008800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008802:	e009      	b.n	8008818 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008804:	f7fc ffe6 	bl	80057d4 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b02      	cmp	r3, #2
 8008810:	d902      	bls.n	8008818 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	73fb      	strb	r3, [r7, #15]
        break;
 8008816:	e005      	b.n	8008824 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008818:	4b3b      	ldr	r3, [pc, #236]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1ef      	bne.n	8008804 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d168      	bne.n	80088fc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d113      	bne.n	8008858 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008830:	4b35      	ldr	r3, [pc, #212]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008832:	695a      	ldr	r2, [r3, #20]
 8008834:	4b35      	ldr	r3, [pc, #212]	; (800890c <RCCEx_PLLSAI2_Config+0x1dc>)
 8008836:	4013      	ands	r3, r2
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6892      	ldr	r2, [r2, #8]
 800883c:	0211      	lsls	r1, r2, #8
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	68d2      	ldr	r2, [r2, #12]
 8008842:	06d2      	lsls	r2, r2, #27
 8008844:	4311      	orrs	r1, r2
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6852      	ldr	r2, [r2, #4]
 800884a:	3a01      	subs	r2, #1
 800884c:	0112      	lsls	r2, r2, #4
 800884e:	430a      	orrs	r2, r1
 8008850:	492d      	ldr	r1, [pc, #180]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008852:	4313      	orrs	r3, r2
 8008854:	614b      	str	r3, [r1, #20]
 8008856:	e02d      	b.n	80088b4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d115      	bne.n	800888a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800885e:	4b2a      	ldr	r3, [pc, #168]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008860:	695a      	ldr	r2, [r3, #20]
 8008862:	4b2b      	ldr	r3, [pc, #172]	; (8008910 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008864:	4013      	ands	r3, r2
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6892      	ldr	r2, [r2, #8]
 800886a:	0211      	lsls	r1, r2, #8
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6912      	ldr	r2, [r2, #16]
 8008870:	0852      	lsrs	r2, r2, #1
 8008872:	3a01      	subs	r2, #1
 8008874:	0552      	lsls	r2, r2, #21
 8008876:	4311      	orrs	r1, r2
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	6852      	ldr	r2, [r2, #4]
 800887c:	3a01      	subs	r2, #1
 800887e:	0112      	lsls	r2, r2, #4
 8008880:	430a      	orrs	r2, r1
 8008882:	4921      	ldr	r1, [pc, #132]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008884:	4313      	orrs	r3, r2
 8008886:	614b      	str	r3, [r1, #20]
 8008888:	e014      	b.n	80088b4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800888a:	4b1f      	ldr	r3, [pc, #124]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 800888c:	695a      	ldr	r2, [r3, #20]
 800888e:	4b21      	ldr	r3, [pc, #132]	; (8008914 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008890:	4013      	ands	r3, r2
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	6892      	ldr	r2, [r2, #8]
 8008896:	0211      	lsls	r1, r2, #8
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6952      	ldr	r2, [r2, #20]
 800889c:	0852      	lsrs	r2, r2, #1
 800889e:	3a01      	subs	r2, #1
 80088a0:	0652      	lsls	r2, r2, #25
 80088a2:	4311      	orrs	r1, r2
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6852      	ldr	r2, [r2, #4]
 80088a8:	3a01      	subs	r2, #1
 80088aa:	0112      	lsls	r2, r2, #4
 80088ac:	430a      	orrs	r2, r1
 80088ae:	4916      	ldr	r1, [pc, #88]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80088b4:	4b14      	ldr	r3, [pc, #80]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a13      	ldr	r2, [pc, #76]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c0:	f7fc ff88 	bl	80057d4 <HAL_GetTick>
 80088c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80088c6:	e009      	b.n	80088dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80088c8:	f7fc ff84 	bl	80057d4 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d902      	bls.n	80088dc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	73fb      	strb	r3, [r7, #15]
          break;
 80088da:	e005      	b.n	80088e8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80088dc:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0ef      	beq.n	80088c8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d106      	bne.n	80088fc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088f0:	695a      	ldr	r2, [r3, #20]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	4904      	ldr	r1, [pc, #16]	; (8008908 <RCCEx_PLLSAI2_Config+0x1d8>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	40021000 	.word	0x40021000
 800890c:	07ff800f 	.word	0x07ff800f
 8008910:	ff9f800f 	.word	0xff9f800f
 8008914:	f9ff800f 	.word	0xf9ff800f

08008918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e095      	b.n	8008a56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	2b00      	cmp	r3, #0
 8008930:	d108      	bne.n	8008944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800893a:	d009      	beq.n	8008950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	61da      	str	r2, [r3, #28]
 8008942:	e005      	b.n	8008950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7fb fd58 	bl	8004420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008986:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008990:	d902      	bls.n	8008998 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
 8008996:	e002      	b.n	800899e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800899c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80089a6:	d007      	beq.n	80089b8 <HAL_SPI_Init+0xa0>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089b0:	d002      	beq.n	80089b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089c8:	431a      	orrs	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	431a      	orrs	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	431a      	orrs	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089e6:	431a      	orrs	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089f0:	431a      	orrs	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fa:	ea42 0103 	orr.w	r1, r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	0c1b      	lsrs	r3, r3, #16
 8008a14:	f003 0204 	and.w	r2, r3, #4
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	f003 0310 	and.w	r3, r3, #16
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	f003 0308 	and.w	r3, r3, #8
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a34:	ea42 0103 	orr.w	r1, r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b088      	sub	sp, #32
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	603b      	str	r3, [r7, #0]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_SPI_Transmit+0x22>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e15f      	b.n	8008d40 <HAL_SPI_Transmit+0x2e2>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a88:	f7fc fea4 	bl	80057d4 <HAL_GetTick>
 8008a8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d002      	beq.n	8008aa4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008aa2:	e148      	b.n	8008d36 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <HAL_SPI_Transmit+0x52>
 8008aaa:	88fb      	ldrh	r3, [r7, #6]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ab4:	e13f      	b.n	8008d36 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2203      	movs	r2, #3
 8008aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	88fa      	ldrh	r2, [r7, #6]
 8008ace:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	88fa      	ldrh	r2, [r7, #6]
 8008ad4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b00:	d10f      	bne.n	8008b22 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2c:	2b40      	cmp	r3, #64	; 0x40
 8008b2e:	d007      	beq.n	8008b40 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b48:	d94f      	bls.n	8008bea <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_SPI_Transmit+0xfa>
 8008b52:	8afb      	ldrh	r3, [r7, #22]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d142      	bne.n	8008bde <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	881a      	ldrh	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	1c9a      	adds	r2, r3, #2
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	3b01      	subs	r3, #1
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b7c:	e02f      	b.n	8008bde <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d112      	bne.n	8008bb2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	881a      	ldrh	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	1c9a      	adds	r2, r3, #2
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bb0:	e015      	b.n	8008bde <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bb2:	f7fc fe0f 	bl	80057d4 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d803      	bhi.n	8008bca <HAL_SPI_Transmit+0x16c>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc8:	d102      	bne.n	8008bd0 <HAL_SPI_Transmit+0x172>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d106      	bne.n	8008bde <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008bdc:	e0ab      	b.n	8008d36 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1ca      	bne.n	8008b7e <HAL_SPI_Transmit+0x120>
 8008be8:	e080      	b.n	8008cec <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <HAL_SPI_Transmit+0x19a>
 8008bf2:	8afb      	ldrh	r3, [r7, #22]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d174      	bne.n	8008ce2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d912      	bls.n	8008c28 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	881a      	ldrh	r2, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	1c9a      	adds	r2, r3, #2
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b02      	subs	r3, #2
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c26:	e05c      	b.n	8008ce2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	330c      	adds	r3, #12
 8008c32:	7812      	ldrb	r2, [r2, #0]
 8008c34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c4e:	e048      	b.n	8008ce2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d12b      	bne.n	8008cb6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d912      	bls.n	8008c8e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	881a      	ldrh	r2, [r3, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	1c9a      	adds	r2, r3, #2
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3b02      	subs	r3, #2
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c8c:	e029      	b.n	8008ce2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	330c      	adds	r3, #12
 8008c98:	7812      	ldrb	r2, [r2, #0]
 8008c9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	3b01      	subs	r3, #1
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cb4:	e015      	b.n	8008ce2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cb6:	f7fc fd8d 	bl	80057d4 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d803      	bhi.n	8008cce <HAL_SPI_Transmit+0x270>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d102      	bne.n	8008cd4 <HAL_SPI_Transmit+0x276>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008ce0:	e029      	b.n	8008d36 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1b1      	bne.n	8008c50 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 ff7d 	bl	8009bf0 <SPI_EndRxTxTransaction>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	613b      	str	r3, [r7, #16]
 8008d1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	77fb      	strb	r3, [r7, #31]
 8008d2c:	e003      	b.n	8008d36 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3720      	adds	r7, #32
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	4613      	mov	r3, r2
 8008d56:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d002      	beq.n	8008d6e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8008d68:	2302      	movs	r3, #2
 8008d6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d6c:	e11a      	b.n	8008fa4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d76:	d112      	bne.n	8008d9e <HAL_SPI_Receive+0x56>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10e      	bne.n	8008d9e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2204      	movs	r2, #4
 8008d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008d88:	88fa      	ldrh	r2, [r7, #6]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	68b9      	ldr	r1, [r7, #8]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f90e 	bl	8008fb6 <HAL_SPI_TransmitReceive>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	e107      	b.n	8008fae <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_SPI_Receive+0x64>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e100      	b.n	8008fae <HAL_SPI_Receive+0x266>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008db4:	f7fc fd0e 	bl	80057d4 <HAL_GetTick>
 8008db8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <HAL_SPI_Receive+0x7e>
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d102      	bne.n	8008dcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008dca:	e0eb      	b.n	8008fa4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2204      	movs	r2, #4
 8008dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	88fa      	ldrh	r2, [r7, #6]
 8008de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	88fa      	ldrh	r2, [r7, #6]
 8008dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e16:	d908      	bls.n	8008e2a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e26:	605a      	str	r2, [r3, #4]
 8008e28:	e007      	b.n	8008e3a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e38:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e42:	d10f      	bne.n	8008e64 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6e:	2b40      	cmp	r3, #64	; 0x40
 8008e70:	d007      	beq.n	8008e82 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e8a:	d86f      	bhi.n	8008f6c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008e8c:	e034      	b.n	8008ef8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d117      	bne.n	8008ecc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f103 020c 	add.w	r2, r3, #12
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea8:	7812      	ldrb	r2, [r2, #0]
 8008eaa:	b2d2      	uxtb	r2, r2
 8008eac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008eca:	e015      	b.n	8008ef8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ecc:	f7fc fc82 	bl	80057d4 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d803      	bhi.n	8008ee4 <HAL_SPI_Receive+0x19c>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee2:	d102      	bne.n	8008eea <HAL_SPI_Receive+0x1a2>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d106      	bne.n	8008ef8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008ef6:	e055      	b.n	8008fa4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1c4      	bne.n	8008e8e <HAL_SPI_Receive+0x146>
 8008f04:	e038      	b.n	8008f78 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 0301 	and.w	r3, r3, #1
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d115      	bne.n	8008f40 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	b292      	uxth	r2, r2
 8008f20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	1c9a      	adds	r2, r3, #2
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008f3e:	e015      	b.n	8008f6c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f40:	f7fc fc48 	bl	80057d4 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d803      	bhi.n	8008f58 <HAL_SPI_Receive+0x210>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f56:	d102      	bne.n	8008f5e <HAL_SPI_Receive+0x216>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d106      	bne.n	8008f6c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008f6a:	e01b      	b.n	8008fa4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1c6      	bne.n	8008f06 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fddf 	bl	8009b40 <SPI_EndRxTransaction>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d002      	beq.n	8008f9c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	75fb      	strb	r3, [r7, #23]
 8008f9a:	e003      	b.n	8008fa4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b08a      	sub	sp, #40	; 0x28
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	607a      	str	r2, [r7, #4]
 8008fc2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <HAL_SPI_TransmitReceive+0x26>
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e20a      	b.n	80093f2 <HAL_SPI_TransmitReceive+0x43c>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fe4:	f7fc fbf6 	bl	80057d4 <HAL_GetTick>
 8008fe8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ff0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008ff8:	887b      	ldrh	r3, [r7, #2]
 8008ffa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008ffc:	887b      	ldrh	r3, [r7, #2]
 8008ffe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009000:	7efb      	ldrb	r3, [r7, #27]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d00e      	beq.n	8009024 <HAL_SPI_TransmitReceive+0x6e>
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800900c:	d106      	bne.n	800901c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <HAL_SPI_TransmitReceive+0x66>
 8009016:	7efb      	ldrb	r3, [r7, #27]
 8009018:	2b04      	cmp	r3, #4
 800901a:	d003      	beq.n	8009024 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800901c:	2302      	movs	r3, #2
 800901e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009022:	e1e0      	b.n	80093e6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d005      	beq.n	8009036 <HAL_SPI_TransmitReceive+0x80>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <HAL_SPI_TransmitReceive+0x80>
 8009030:	887b      	ldrh	r3, [r7, #2]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d103      	bne.n	800903e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800903c:	e1d3      	b.n	80093e6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b04      	cmp	r3, #4
 8009048:	d003      	beq.n	8009052 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2205      	movs	r2, #5
 800904e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	887a      	ldrh	r2, [r7, #2]
 8009062:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	887a      	ldrh	r2, [r7, #2]
 800906a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	887a      	ldrh	r2, [r7, #2]
 8009078:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	887a      	ldrh	r2, [r7, #2]
 800907e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009094:	d802      	bhi.n	800909c <HAL_SPI_TransmitReceive+0xe6>
 8009096:	8a3b      	ldrh	r3, [r7, #16]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d908      	bls.n	80090ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80090aa:	605a      	str	r2, [r3, #4]
 80090ac:	e007      	b.n	80090be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c8:	2b40      	cmp	r3, #64	; 0x40
 80090ca:	d007      	beq.n	80090dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090e4:	f240 8081 	bls.w	80091ea <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <HAL_SPI_TransmitReceive+0x140>
 80090f0:	8a7b      	ldrh	r3, [r7, #18]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d16d      	bne.n	80091d2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	881a      	ldrh	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	1c9a      	adds	r2, r3, #2
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	b29a      	uxth	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800911a:	e05a      	b.n	80091d2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b02      	cmp	r3, #2
 8009128:	d11b      	bne.n	8009162 <HAL_SPI_TransmitReceive+0x1ac>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800912e:	b29b      	uxth	r3, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	d016      	beq.n	8009162 <HAL_SPI_TransmitReceive+0x1ac>
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	2b01      	cmp	r3, #1
 8009138:	d113      	bne.n	8009162 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913e:	881a      	ldrh	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914a:	1c9a      	adds	r2, r3, #2
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b01      	cmp	r3, #1
 800916e:	d11c      	bne.n	80091aa <HAL_SPI_TransmitReceive+0x1f4>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009176:	b29b      	uxth	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d016      	beq.n	80091aa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	b292      	uxth	r2, r2
 8009188:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	1c9a      	adds	r2, r3, #2
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800919a:	b29b      	uxth	r3, r3
 800919c:	3b01      	subs	r3, #1
 800919e:	b29a      	uxth	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091a6:	2301      	movs	r3, #1
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80091aa:	f7fc fb13 	bl	80057d4 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d80b      	bhi.n	80091d2 <HAL_SPI_TransmitReceive+0x21c>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c0:	d007      	beq.n	80091d2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80091d0:	e109      	b.n	80093e6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d19f      	bne.n	800911c <HAL_SPI_TransmitReceive+0x166>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d199      	bne.n	800911c <HAL_SPI_TransmitReceive+0x166>
 80091e8:	e0e3      	b.n	80093b2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <HAL_SPI_TransmitReceive+0x244>
 80091f2:	8a7b      	ldrh	r3, [r7, #18]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	f040 80cf 	bne.w	8009398 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2b01      	cmp	r3, #1
 8009202:	d912      	bls.n	800922a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	881a      	ldrh	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009214:	1c9a      	adds	r2, r3, #2
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800921e:	b29b      	uxth	r3, r3
 8009220:	3b02      	subs	r3, #2
 8009222:	b29a      	uxth	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009228:	e0b6      	b.n	8009398 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	330c      	adds	r3, #12
 8009234:	7812      	ldrb	r2, [r2, #0]
 8009236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009246:	b29b      	uxth	r3, r3
 8009248:	3b01      	subs	r3, #1
 800924a:	b29a      	uxth	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009250:	e0a2      	b.n	8009398 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b02      	cmp	r3, #2
 800925e:	d134      	bne.n	80092ca <HAL_SPI_TransmitReceive+0x314>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009264:	b29b      	uxth	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d02f      	beq.n	80092ca <HAL_SPI_TransmitReceive+0x314>
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	2b01      	cmp	r3, #1
 800926e:	d12c      	bne.n	80092ca <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009274:	b29b      	uxth	r3, r3
 8009276:	2b01      	cmp	r3, #1
 8009278:	d912      	bls.n	80092a0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	881a      	ldrh	r2, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	1c9a      	adds	r2, r3, #2
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009294:	b29b      	uxth	r3, r3
 8009296:	3b02      	subs	r3, #2
 8009298:	b29a      	uxth	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800929e:	e012      	b.n	80092c6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	330c      	adds	r3, #12
 80092aa:	7812      	ldrb	r2, [r2, #0]
 80092ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092bc:	b29b      	uxth	r3, r3
 80092be:	3b01      	subs	r3, #1
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d148      	bne.n	800936a <HAL_SPI_TransmitReceive+0x3b4>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d042      	beq.n	800936a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d923      	bls.n	8009338 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	b292      	uxth	r2, r2
 80092fc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	1c9a      	adds	r2, r3, #2
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b02      	subs	r3, #2
 8009312:	b29a      	uxth	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b01      	cmp	r3, #1
 8009324:	d81f      	bhi.n	8009366 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009334:	605a      	str	r2, [r3, #4]
 8009336:	e016      	b.n	8009366 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f103 020c 	add.w	r2, r3, #12
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009344:	7812      	ldrb	r2, [r2, #0]
 8009346:	b2d2      	uxtb	r2, r2
 8009348:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800935a:	b29b      	uxth	r3, r3
 800935c:	3b01      	subs	r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009366:	2301      	movs	r3, #1
 8009368:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800936a:	f7fc fa33 	bl	80057d4 <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009376:	429a      	cmp	r2, r3
 8009378:	d803      	bhi.n	8009382 <HAL_SPI_TransmitReceive+0x3cc>
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009380:	d102      	bne.n	8009388 <HAL_SPI_TransmitReceive+0x3d2>
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	2b00      	cmp	r3, #0
 8009386:	d107      	bne.n	8009398 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8009396:	e026      	b.n	80093e6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f47f af57 	bne.w	8009252 <HAL_SPI_TransmitReceive+0x29c>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f47f af50 	bne.w	8009252 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 fc1a 	bl	8009bf0 <SPI_EndRxTxTransaction>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2220      	movs	r2, #32
 80093cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093dc:	e003      	b.n	80093e6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80093ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3728      	adds	r7, #40	; 0x28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
	...

080093fc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009414:	2b01      	cmp	r3, #1
 8009416:	d101      	bne.n	800941c <HAL_SPI_Transmit_DMA+0x20>
 8009418:	2302      	movs	r3, #2
 800941a:	e0d4      	b.n	80095c6 <HAL_SPI_Transmit_DMA+0x1ca>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b01      	cmp	r3, #1
 800942e:	d002      	beq.n	8009436 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009430:	2302      	movs	r3, #2
 8009432:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009434:	e0c2      	b.n	80095bc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <HAL_SPI_Transmit_DMA+0x46>
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d102      	bne.n	8009448 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009446:	e0b9      	b.n	80095bc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2203      	movs	r2, #3
 800944c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	88fa      	ldrh	r2, [r7, #6]
 8009460:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	88fa      	ldrh	r2, [r7, #6]
 8009466:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009492:	d10f      	bne.n	80094b4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b8:	4a45      	ldr	r2, [pc, #276]	; (80095d0 <HAL_SPI_Transmit_DMA+0x1d4>)
 80094ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c0:	4a44      	ldr	r2, [pc, #272]	; (80095d4 <HAL_SPI_Transmit_DMA+0x1d8>)
 80094c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c8:	4a43      	ldr	r2, [pc, #268]	; (80095d8 <HAL_SPI_Transmit_DMA+0x1dc>)
 80094ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d0:	2200      	movs	r2, #0
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094e2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094ec:	d82d      	bhi.n	800954a <HAL_SPI_Transmit_DMA+0x14e>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f8:	d127      	bne.n	800954a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094fe:	b29b      	uxth	r3, r3
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10f      	bne.n	8009528 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009516:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800951c:	b29b      	uxth	r3, r3
 800951e:	085b      	lsrs	r3, r3, #1
 8009520:	b29a      	uxth	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009526:	e010      	b.n	800954a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009536:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800953c:	b29b      	uxth	r3, r3
 800953e:	085b      	lsrs	r3, r3, #1
 8009540:	b29b      	uxth	r3, r3
 8009542:	3301      	adds	r3, #1
 8009544:	b29a      	uxth	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009552:	4619      	mov	r1, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	330c      	adds	r3, #12
 800955a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009560:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009562:	f7fc fc71 	bl	8005e48 <HAL_DMA_Start_IT>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d008      	beq.n	800957e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009570:	f043 0210 	orr.w	r2, r3, #16
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800957c:	e01e      	b.n	80095bc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009588:	2b40      	cmp	r3, #64	; 0x40
 800958a:	d007      	beq.n	800959c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800959a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0220 	orr.w	r2, r2, #32
 80095aa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0202 	orr.w	r2, r2, #2
 80095ba:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	0800987f 	.word	0x0800987f
 80095d4:	080097d9 	.word	0x080097d9
 80095d8:	0800989b 	.word	0x0800989b

080095dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10e      	bne.n	800961c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009604:	2b00      	cmp	r3, #0
 8009606:	d009      	beq.n	800961c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	d004      	beq.n	800961c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
    return;
 800961a:	e0ce      	b.n	80097ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <HAL_SPI_IRQHandler+0x5e>
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	4798      	blx	r3
    return;
 8009638:	e0bf      	b.n	80097ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <HAL_SPI_IRQHandler+0x7e>
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80b0 	beq.w	80097ba <HAL_SPI_IRQHandler+0x1de>
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 80aa 	beq.w	80097ba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966c:	2b00      	cmp	r3, #0
 800966e:	d023      	beq.n	80096b8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b03      	cmp	r3, #3
 800967a:	d011      	beq.n	80096a0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009680:	f043 0204 	orr.w	r2, r3, #4
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	e00b      	b.n	80096b8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096a0:	2300      	movs	r3, #0
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	613b      	str	r3, [r7, #16]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	693b      	ldr	r3, [r7, #16]
        return;
 80096b6:	e080      	b.n	80097ba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	f003 0320 	and.w	r3, r3, #32
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d014      	beq.n	80096ec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096c6:	f043 0201 	orr.w	r2, r3, #1
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00c      	beq.n	8009710 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fa:	f043 0208 	orr.w	r2, r3, #8
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009702:	2300      	movs	r3, #0
 8009704:	60bb      	str	r3, [r7, #8]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	60bb      	str	r3, [r7, #8]
 800970e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009714:	2b00      	cmp	r3, #0
 8009716:	d04f      	beq.n	80097b8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009726:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	2b00      	cmp	r3, #0
 8009738:	d104      	bne.n	8009744 <HAL_SPI_IRQHandler+0x168>
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d034      	beq.n	80097ae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0203 	bic.w	r2, r2, #3
 8009752:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009758:	2b00      	cmp	r3, #0
 800975a:	d011      	beq.n	8009780 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009760:	4a17      	ldr	r2, [pc, #92]	; (80097c0 <HAL_SPI_IRQHandler+0x1e4>)
 8009762:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009768:	4618      	mov	r0, r3
 800976a:	f7fc fc44 	bl	8005ff6 <HAL_DMA_Abort_IT>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009778:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009784:	2b00      	cmp	r3, #0
 8009786:	d016      	beq.n	80097b6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978c:	4a0c      	ldr	r2, [pc, #48]	; (80097c0 <HAL_SPI_IRQHandler+0x1e4>)
 800978e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009794:	4618      	mov	r0, r3
 8009796:	f7fc fc2e 	bl	8005ff6 <HAL_DMA_Abort_IT>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00a      	beq.n	80097b6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80097ac:	e003      	b.n	80097b6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fb fc16 	bl	8004fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80097b4:	e000      	b.n	80097b8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80097b6:	bf00      	nop
    return;
 80097b8:	bf00      	nop
  }
}
 80097ba:	3720      	adds	r7, #32
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	080098db 	.word	0x080098db

080097c4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097e6:	f7fb fff5 	bl	80057d4 <HAL_GetTick>
 80097ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0320 	and.w	r3, r3, #32
 80097f6:	2b20      	cmp	r3, #32
 80097f8:	d03b      	beq.n	8009872 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f022 0220 	bic.w	r2, r2, #32
 8009808:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0202 	bic.w	r2, r2, #2
 8009818:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	2164      	movs	r1, #100	; 0x64
 800981e:	6978      	ldr	r0, [r7, #20]
 8009820:	f000 f9e6 	bl	8009bf0 <SPI_EndRxTxTransaction>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800982e:	f043 0220 	orr.w	r2, r3, #32
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10a      	bne.n	8009854 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800983e:	2300      	movs	r3, #0
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2200      	movs	r2, #0
 8009858:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800986a:	6978      	ldr	r0, [r7, #20]
 800986c:	f7fb fbb8 	bl	8004fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009870:	e002      	b.n	8009878 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009872:	6978      	ldr	r0, [r7, #20]
 8009874:	f7fb fbca 	bl	800500c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f7ff ff99 	bl	80097c4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0203 	bic.w	r2, r2, #3
 80098b6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098bc:	f043 0210 	orr.w	r2, r3, #16
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f7fb fb87 	bl	8004fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098d2:	bf00      	nop
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f7fb fb72 	bl	8004fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098fc:	bf00      	nop
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	4613      	mov	r3, r2
 8009912:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009914:	f7fb ff5e 	bl	80057d4 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	1a9b      	subs	r3, r3, r2
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	4413      	add	r3, r2
 8009922:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009924:	f7fb ff56 	bl	80057d4 <HAL_GetTick>
 8009928:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800992a:	4b39      	ldr	r3, [pc, #228]	; (8009a10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	015b      	lsls	r3, r3, #5
 8009930:	0d1b      	lsrs	r3, r3, #20
 8009932:	69fa      	ldr	r2, [r7, #28]
 8009934:	fb02 f303 	mul.w	r3, r2, r3
 8009938:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800993a:	e054      	b.n	80099e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009942:	d050      	beq.n	80099e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009944:	f7fb ff46 	bl	80057d4 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	429a      	cmp	r2, r3
 8009952:	d902      	bls.n	800995a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d13d      	bne.n	80099d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009968:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009972:	d111      	bne.n	8009998 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800997c:	d004      	beq.n	8009988 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009986:	d107      	bne.n	8009998 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009996:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099a0:	d10f      	bne.n	80099c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e017      	b.n	8009a06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4013      	ands	r3, r2
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	bf0c      	ite	eq
 80099f6:	2301      	moveq	r3, #1
 80099f8:	2300      	movne	r3, #0
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	461a      	mov	r2, r3
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d19b      	bne.n	800993c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3720      	adds	r7, #32
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000288 	.word	0x20000288

08009a14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08a      	sub	sp, #40	; 0x28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009a26:	f7fb fed5 	bl	80057d4 <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	4413      	add	r3, r2
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009a36:	f7fb fecd 	bl	80057d4 <HAL_GetTick>
 8009a3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	330c      	adds	r3, #12
 8009a42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a44:	4b3d      	ldr	r3, [pc, #244]	; (8009b3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	00da      	lsls	r2, r3, #3
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	0d1b      	lsrs	r3, r3, #20
 8009a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a56:	fb02 f303 	mul.w	r3, r2, r3
 8009a5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a5c:	e060      	b.n	8009b20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a64:	d107      	bne.n	8009a76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d104      	bne.n	8009a76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7c:	d050      	beq.n	8009b20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a7e:	f7fb fea9 	bl	80057d4 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d902      	bls.n	8009a94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d13d      	bne.n	8009b10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009aa2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aac:	d111      	bne.n	8009ad2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ab6:	d004      	beq.n	8009ac2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ac0:	d107      	bne.n	8009ad2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ad0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ada:	d10f      	bne.n	8009afc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009afa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e010      	b.n	8009b32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689a      	ldr	r2, [r3, #8]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	4013      	ands	r3, r2
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d196      	bne.n	8009a5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3728      	adds	r7, #40	; 0x28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20000288 	.word	0x20000288

08009b40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b54:	d111      	bne.n	8009b7a <SPI_EndRxTransaction+0x3a>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b5e:	d004      	beq.n	8009b6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b68:	d107      	bne.n	8009b7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b78:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2200      	movs	r2, #0
 8009b82:	2180      	movs	r1, #128	; 0x80
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff febd 	bl	8009904 <SPI_WaitFlagStateUntilTimeout>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d007      	beq.n	8009ba0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b94:	f043 0220 	orr.w	r2, r3, #32
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e023      	b.n	8009be8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ba8:	d11d      	bne.n	8009be6 <SPI_EndRxTransaction+0xa6>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb2:	d004      	beq.n	8009bbe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bbc:	d113      	bne.n	8009be6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f7ff ff22 	bl	8009a14 <SPI_WaitFifoStateUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d007      	beq.n	8009be6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bda:	f043 0220 	orr.w	r2, r3, #32
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e000      	b.n	8009be8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af02      	add	r7, sp, #8
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7ff ff03 	bl	8009a14 <SPI_WaitFifoStateUntilTimeout>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d007      	beq.n	8009c24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c18:	f043 0220 	orr.w	r2, r3, #32
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e027      	b.n	8009c74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2180      	movs	r1, #128	; 0x80
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f7ff fe68 	bl	8009904 <SPI_WaitFlagStateUntilTimeout>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d007      	beq.n	8009c4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c3e:	f043 0220 	orr.w	r2, r3, #32
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c46:	2303      	movs	r3, #3
 8009c48:	e014      	b.n	8009c74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7ff fedc 	bl	8009a14 <SPI_WaitFifoStateUntilTimeout>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d007      	beq.n	8009c72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c66:	f043 0220 	orr.w	r2, r3, #32
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e000      	b.n	8009c74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e049      	b.n	8009d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d106      	bne.n	8009ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7fa fcba 	bl	800461c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f000 fd3a 	bl	800a734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d001      	beq.n	8009d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e04f      	b.n	8009de4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0201 	orr.w	r2, r2, #1
 8009d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a23      	ldr	r2, [pc, #140]	; (8009df0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01d      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x76>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6e:	d018      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x76>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a1f      	ldr	r2, [pc, #124]	; (8009df4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x76>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a1e      	ldr	r2, [pc, #120]	; (8009df8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00e      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x76>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a1c      	ldr	r2, [pc, #112]	; (8009dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d009      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x76>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a1b      	ldr	r2, [pc, #108]	; (8009e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x76>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a19      	ldr	r2, [pc, #100]	; (8009e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d115      	bne.n	8009dce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	4b17      	ldr	r3, [pc, #92]	; (8009e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8009daa:	4013      	ands	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b06      	cmp	r3, #6
 8009db2:	d015      	beq.n	8009de0 <HAL_TIM_Base_Start_IT+0xb4>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dba:	d011      	beq.n	8009de0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f042 0201 	orr.w	r2, r2, #1
 8009dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dcc:	e008      	b.n	8009de0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0201 	orr.w	r2, r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	e000      	b.n	8009de2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	40012c00 	.word	0x40012c00
 8009df4:	40000400 	.word	0x40000400
 8009df8:	40000800 	.word	0x40000800
 8009dfc:	40000c00 	.word	0x40000c00
 8009e00:	40013400 	.word	0x40013400
 8009e04:	40014000 	.word	0x40014000
 8009e08:	00010007 	.word	0x00010007

08009e0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0201 	bic.w	r2, r2, #1
 8009e22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6a1a      	ldr	r2, [r3, #32]
 8009e2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e2e:	4013      	ands	r3, r2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10f      	bne.n	8009e54 <HAL_TIM_Base_Stop_IT+0x48>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6a1a      	ldr	r2, [r3, #32]
 8009e3a:	f240 4344 	movw	r3, #1092	; 0x444
 8009e3e:	4013      	ands	r3, r2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d107      	bne.n	8009e54 <HAL_TIM_Base_Stop_IT+0x48>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 0201 	bic.w	r2, r2, #1
 8009e52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e049      	b.n	8009f10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d106      	bne.n	8009e96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7fa fc3f 	bl	8004714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f000 fc43 	bl	800a734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d109      	bne.n	8009f3c <HAL_TIM_PWM_Start+0x24>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	bf14      	ite	ne
 8009f34:	2301      	movne	r3, #1
 8009f36:	2300      	moveq	r3, #0
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	e03c      	b.n	8009fb6 <HAL_TIM_PWM_Start+0x9e>
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d109      	bne.n	8009f56 <HAL_TIM_PWM_Start+0x3e>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	bf14      	ite	ne
 8009f4e:	2301      	movne	r3, #1
 8009f50:	2300      	moveq	r3, #0
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	e02f      	b.n	8009fb6 <HAL_TIM_PWM_Start+0x9e>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d109      	bne.n	8009f70 <HAL_TIM_PWM_Start+0x58>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	bf14      	ite	ne
 8009f68:	2301      	movne	r3, #1
 8009f6a:	2300      	moveq	r3, #0
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	e022      	b.n	8009fb6 <HAL_TIM_PWM_Start+0x9e>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b0c      	cmp	r3, #12
 8009f74:	d109      	bne.n	8009f8a <HAL_TIM_PWM_Start+0x72>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	bf14      	ite	ne
 8009f82:	2301      	movne	r3, #1
 8009f84:	2300      	moveq	r3, #0
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	e015      	b.n	8009fb6 <HAL_TIM_PWM_Start+0x9e>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b10      	cmp	r3, #16
 8009f8e:	d109      	bne.n	8009fa4 <HAL_TIM_PWM_Start+0x8c>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	bf14      	ite	ne
 8009f9c:	2301      	movne	r3, #1
 8009f9e:	2300      	moveq	r3, #0
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	e008      	b.n	8009fb6 <HAL_TIM_PWM_Start+0x9e>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	bf14      	ite	ne
 8009fb0:	2301      	movne	r3, #1
 8009fb2:	2300      	moveq	r3, #0
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e09c      	b.n	800a0f8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d104      	bne.n	8009fce <HAL_TIM_PWM_Start+0xb6>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fcc:	e023      	b.n	800a016 <HAL_TIM_PWM_Start+0xfe>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b04      	cmp	r3, #4
 8009fd2:	d104      	bne.n	8009fde <HAL_TIM_PWM_Start+0xc6>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fdc:	e01b      	b.n	800a016 <HAL_TIM_PWM_Start+0xfe>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b08      	cmp	r3, #8
 8009fe2:	d104      	bne.n	8009fee <HAL_TIM_PWM_Start+0xd6>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fec:	e013      	b.n	800a016 <HAL_TIM_PWM_Start+0xfe>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b0c      	cmp	r3, #12
 8009ff2:	d104      	bne.n	8009ffe <HAL_TIM_PWM_Start+0xe6>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ffc:	e00b      	b.n	800a016 <HAL_TIM_PWM_Start+0xfe>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b10      	cmp	r3, #16
 800a002:	d104      	bne.n	800a00e <HAL_TIM_PWM_Start+0xf6>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a00c:	e003      	b.n	800a016 <HAL_TIM_PWM_Start+0xfe>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2202      	movs	r2, #2
 800a012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2201      	movs	r2, #1
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 ff92 	bl	800af48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a35      	ldr	r2, [pc, #212]	; (800a100 <HAL_TIM_PWM_Start+0x1e8>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d013      	beq.n	800a056 <HAL_TIM_PWM_Start+0x13e>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a34      	ldr	r2, [pc, #208]	; (800a104 <HAL_TIM_PWM_Start+0x1ec>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d00e      	beq.n	800a056 <HAL_TIM_PWM_Start+0x13e>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a32      	ldr	r2, [pc, #200]	; (800a108 <HAL_TIM_PWM_Start+0x1f0>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d009      	beq.n	800a056 <HAL_TIM_PWM_Start+0x13e>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a31      	ldr	r2, [pc, #196]	; (800a10c <HAL_TIM_PWM_Start+0x1f4>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d004      	beq.n	800a056 <HAL_TIM_PWM_Start+0x13e>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a2f      	ldr	r2, [pc, #188]	; (800a110 <HAL_TIM_PWM_Start+0x1f8>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d101      	bne.n	800a05a <HAL_TIM_PWM_Start+0x142>
 800a056:	2301      	movs	r3, #1
 800a058:	e000      	b.n	800a05c <HAL_TIM_PWM_Start+0x144>
 800a05a:	2300      	movs	r3, #0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d007      	beq.n	800a070 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a06e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a22      	ldr	r2, [pc, #136]	; (800a100 <HAL_TIM_PWM_Start+0x1e8>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d01d      	beq.n	800a0b6 <HAL_TIM_PWM_Start+0x19e>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a082:	d018      	beq.n	800a0b6 <HAL_TIM_PWM_Start+0x19e>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a22      	ldr	r2, [pc, #136]	; (800a114 <HAL_TIM_PWM_Start+0x1fc>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d013      	beq.n	800a0b6 <HAL_TIM_PWM_Start+0x19e>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a21      	ldr	r2, [pc, #132]	; (800a118 <HAL_TIM_PWM_Start+0x200>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d00e      	beq.n	800a0b6 <HAL_TIM_PWM_Start+0x19e>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a1f      	ldr	r2, [pc, #124]	; (800a11c <HAL_TIM_PWM_Start+0x204>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d009      	beq.n	800a0b6 <HAL_TIM_PWM_Start+0x19e>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a17      	ldr	r2, [pc, #92]	; (800a104 <HAL_TIM_PWM_Start+0x1ec>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d004      	beq.n	800a0b6 <HAL_TIM_PWM_Start+0x19e>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a15      	ldr	r2, [pc, #84]	; (800a108 <HAL_TIM_PWM_Start+0x1f0>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d115      	bne.n	800a0e2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	4b18      	ldr	r3, [pc, #96]	; (800a120 <HAL_TIM_PWM_Start+0x208>)
 800a0be:	4013      	ands	r3, r2
 800a0c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b06      	cmp	r3, #6
 800a0c6:	d015      	beq.n	800a0f4 <HAL_TIM_PWM_Start+0x1dc>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ce:	d011      	beq.n	800a0f4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0201 	orr.w	r2, r2, #1
 800a0de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0e0:	e008      	b.n	800a0f4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f042 0201 	orr.w	r2, r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	e000      	b.n	800a0f6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	40012c00 	.word	0x40012c00
 800a104:	40013400 	.word	0x40013400
 800a108:	40014000 	.word	0x40014000
 800a10c:	40014400 	.word	0x40014400
 800a110:	40014800 	.word	0x40014800
 800a114:	40000400 	.word	0x40000400
 800a118:	40000800 	.word	0x40000800
 800a11c:	40000c00 	.word	0x40000c00
 800a120:	00010007 	.word	0x00010007

0800a124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d020      	beq.n	800a188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d01b      	beq.n	800a188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f06f 0202 	mvn.w	r2, #2
 800a158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	f003 0303 	and.w	r3, r3, #3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fac1 	bl	800a6f6 <HAL_TIM_IC_CaptureCallback>
 800a174:	e005      	b.n	800a182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fab3 	bl	800a6e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fac4 	bl	800a70a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	f003 0304 	and.w	r3, r3, #4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d020      	beq.n	800a1d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d01b      	beq.n	800a1d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f06f 0204 	mvn.w	r2, #4
 800a1a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fa9b 	bl	800a6f6 <HAL_TIM_IC_CaptureCallback>
 800a1c0:	e005      	b.n	800a1ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fa8d 	bl	800a6e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fa9e 	bl	800a70a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f003 0308 	and.w	r3, r3, #8
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d020      	beq.n	800a220 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f003 0308 	and.w	r3, r3, #8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d01b      	beq.n	800a220 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f06f 0208 	mvn.w	r2, #8
 800a1f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2204      	movs	r2, #4
 800a1f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	f003 0303 	and.w	r3, r3, #3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa75 	bl	800a6f6 <HAL_TIM_IC_CaptureCallback>
 800a20c:	e005      	b.n	800a21a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fa67 	bl	800a6e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fa78 	bl	800a70a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f003 0310 	and.w	r3, r3, #16
 800a226:	2b00      	cmp	r3, #0
 800a228:	d020      	beq.n	800a26c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f003 0310 	and.w	r3, r3, #16
 800a230:	2b00      	cmp	r3, #0
 800a232:	d01b      	beq.n	800a26c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f06f 0210 	mvn.w	r2, #16
 800a23c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2208      	movs	r2, #8
 800a242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fa4f 	bl	800a6f6 <HAL_TIM_IC_CaptureCallback>
 800a258:	e005      	b.n	800a266 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fa41 	bl	800a6e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fa52 	bl	800a70a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00c      	beq.n	800a290 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f06f 0201 	mvn.w	r2, #1
 800a288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7f7 fbb8 	bl	8001a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00c      	beq.n	800a2b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d007      	beq.n	800a2b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 ff02 	bl	800b0b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00c      	beq.n	800a2d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fefa 	bl	800b0cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00c      	beq.n	800a2fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d007      	beq.n	800a2fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fa11 	bl	800a71e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f003 0320 	and.w	r3, r3, #32
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f003 0320 	and.w	r3, r3, #32
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d007      	beq.n	800a320 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f06f 0220 	mvn.w	r2, #32
 800a318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fec2 	bl	800b0a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a320:	bf00      	nop
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d101      	bne.n	800a346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a342:	2302      	movs	r3, #2
 800a344:	e0ff      	b.n	800a546 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b14      	cmp	r3, #20
 800a352:	f200 80f0 	bhi.w	800a536 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a356:	a201      	add	r2, pc, #4	; (adr r2, 800a35c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35c:	0800a3b1 	.word	0x0800a3b1
 800a360:	0800a537 	.word	0x0800a537
 800a364:	0800a537 	.word	0x0800a537
 800a368:	0800a537 	.word	0x0800a537
 800a36c:	0800a3f1 	.word	0x0800a3f1
 800a370:	0800a537 	.word	0x0800a537
 800a374:	0800a537 	.word	0x0800a537
 800a378:	0800a537 	.word	0x0800a537
 800a37c:	0800a433 	.word	0x0800a433
 800a380:	0800a537 	.word	0x0800a537
 800a384:	0800a537 	.word	0x0800a537
 800a388:	0800a537 	.word	0x0800a537
 800a38c:	0800a473 	.word	0x0800a473
 800a390:	0800a537 	.word	0x0800a537
 800a394:	0800a537 	.word	0x0800a537
 800a398:	0800a537 	.word	0x0800a537
 800a39c:	0800a4b5 	.word	0x0800a4b5
 800a3a0:	0800a537 	.word	0x0800a537
 800a3a4:	0800a537 	.word	0x0800a537
 800a3a8:	0800a537 	.word	0x0800a537
 800a3ac:	0800a4f5 	.word	0x0800a4f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68b9      	ldr	r1, [r7, #8]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 fa56 	bl	800a868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f042 0208 	orr.w	r2, r2, #8
 800a3ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	699a      	ldr	r2, [r3, #24]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0204 	bic.w	r2, r2, #4
 800a3da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6999      	ldr	r1, [r3, #24]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	691a      	ldr	r2, [r3, #16]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	619a      	str	r2, [r3, #24]
      break;
 800a3ee:	e0a5      	b.n	800a53c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 fac6 	bl	800a988 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699a      	ldr	r2, [r3, #24]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a40a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	699a      	ldr	r2, [r3, #24]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a41a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6999      	ldr	r1, [r3, #24]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	021a      	lsls	r2, r3, #8
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	430a      	orrs	r2, r1
 800a42e:	619a      	str	r2, [r3, #24]
      break;
 800a430:	e084      	b.n	800a53c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68b9      	ldr	r1, [r7, #8]
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fb2f 	bl	800aa9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	69da      	ldr	r2, [r3, #28]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f042 0208 	orr.w	r2, r2, #8
 800a44c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	69da      	ldr	r2, [r3, #28]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0204 	bic.w	r2, r2, #4
 800a45c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69d9      	ldr	r1, [r3, #28]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	691a      	ldr	r2, [r3, #16]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	61da      	str	r2, [r3, #28]
      break;
 800a470:	e064      	b.n	800a53c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fb97 	bl	800abac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69da      	ldr	r2, [r3, #28]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a48c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69da      	ldr	r2, [r3, #28]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a49c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	69d9      	ldr	r1, [r3, #28]
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	021a      	lsls	r2, r3, #8
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	61da      	str	r2, [r3, #28]
      break;
 800a4b2:	e043      	b.n	800a53c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fbe0 	bl	800ac80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f042 0208 	orr.w	r2, r2, #8
 800a4ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f022 0204 	bic.w	r2, r2, #4
 800a4de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	691a      	ldr	r2, [r3, #16]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4f2:	e023      	b.n	800a53c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fc24 	bl	800ad48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a50e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a51e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	021a      	lsls	r2, r3, #8
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a534:	e002      	b.n	800a53c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	75fb      	strb	r3, [r7, #23]
      break;
 800a53a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a544:	7dfb      	ldrb	r3, [r7, #23]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop

0800a550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a564:	2b01      	cmp	r3, #1
 800a566:	d101      	bne.n	800a56c <HAL_TIM_ConfigClockSource+0x1c>
 800a568:	2302      	movs	r3, #2
 800a56a:	e0b6      	b.n	800a6da <HAL_TIM_ConfigClockSource+0x18a>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a58a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a58e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5a8:	d03e      	beq.n	800a628 <HAL_TIM_ConfigClockSource+0xd8>
 800a5aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ae:	f200 8087 	bhi.w	800a6c0 <HAL_TIM_ConfigClockSource+0x170>
 800a5b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b6:	f000 8086 	beq.w	800a6c6 <HAL_TIM_ConfigClockSource+0x176>
 800a5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5be:	d87f      	bhi.n	800a6c0 <HAL_TIM_ConfigClockSource+0x170>
 800a5c0:	2b70      	cmp	r3, #112	; 0x70
 800a5c2:	d01a      	beq.n	800a5fa <HAL_TIM_ConfigClockSource+0xaa>
 800a5c4:	2b70      	cmp	r3, #112	; 0x70
 800a5c6:	d87b      	bhi.n	800a6c0 <HAL_TIM_ConfigClockSource+0x170>
 800a5c8:	2b60      	cmp	r3, #96	; 0x60
 800a5ca:	d050      	beq.n	800a66e <HAL_TIM_ConfigClockSource+0x11e>
 800a5cc:	2b60      	cmp	r3, #96	; 0x60
 800a5ce:	d877      	bhi.n	800a6c0 <HAL_TIM_ConfigClockSource+0x170>
 800a5d0:	2b50      	cmp	r3, #80	; 0x50
 800a5d2:	d03c      	beq.n	800a64e <HAL_TIM_ConfigClockSource+0xfe>
 800a5d4:	2b50      	cmp	r3, #80	; 0x50
 800a5d6:	d873      	bhi.n	800a6c0 <HAL_TIM_ConfigClockSource+0x170>
 800a5d8:	2b40      	cmp	r3, #64	; 0x40
 800a5da:	d058      	beq.n	800a68e <HAL_TIM_ConfigClockSource+0x13e>
 800a5dc:	2b40      	cmp	r3, #64	; 0x40
 800a5de:	d86f      	bhi.n	800a6c0 <HAL_TIM_ConfigClockSource+0x170>
 800a5e0:	2b30      	cmp	r3, #48	; 0x30
 800a5e2:	d064      	beq.n	800a6ae <HAL_TIM_ConfigClockSource+0x15e>
 800a5e4:	2b30      	cmp	r3, #48	; 0x30
 800a5e6:	d86b      	bhi.n	800a6c0 <HAL_TIM_ConfigClockSource+0x170>
 800a5e8:	2b20      	cmp	r3, #32
 800a5ea:	d060      	beq.n	800a6ae <HAL_TIM_ConfigClockSource+0x15e>
 800a5ec:	2b20      	cmp	r3, #32
 800a5ee:	d867      	bhi.n	800a6c0 <HAL_TIM_ConfigClockSource+0x170>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d05c      	beq.n	800a6ae <HAL_TIM_ConfigClockSource+0x15e>
 800a5f4:	2b10      	cmp	r3, #16
 800a5f6:	d05a      	beq.n	800a6ae <HAL_TIM_ConfigClockSource+0x15e>
 800a5f8:	e062      	b.n	800a6c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a60a:	f000 fc7d 	bl	800af08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a61c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	609a      	str	r2, [r3, #8]
      break;
 800a626:	e04f      	b.n	800a6c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a638:	f000 fc66 	bl	800af08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a64a:	609a      	str	r2, [r3, #8]
      break;
 800a64c:	e03c      	b.n	800a6c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a65a:	461a      	mov	r2, r3
 800a65c:	f000 fbda 	bl	800ae14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2150      	movs	r1, #80	; 0x50
 800a666:	4618      	mov	r0, r3
 800a668:	f000 fc33 	bl	800aed2 <TIM_ITRx_SetConfig>
      break;
 800a66c:	e02c      	b.n	800a6c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a67a:	461a      	mov	r2, r3
 800a67c:	f000 fbf9 	bl	800ae72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2160      	movs	r1, #96	; 0x60
 800a686:	4618      	mov	r0, r3
 800a688:	f000 fc23 	bl	800aed2 <TIM_ITRx_SetConfig>
      break;
 800a68c:	e01c      	b.n	800a6c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a69a:	461a      	mov	r2, r3
 800a69c:	f000 fbba 	bl	800ae14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2140      	movs	r1, #64	; 0x40
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 fc13 	bl	800aed2 <TIM_ITRx_SetConfig>
      break;
 800a6ac:	e00c      	b.n	800a6c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	f000 fc0a 	bl	800aed2 <TIM_ITRx_SetConfig>
      break;
 800a6be:	e003      	b.n	800a6c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c4:	e000      	b.n	800a6c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a6c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b083      	sub	sp, #12
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b083      	sub	sp, #12
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
	...

0800a734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a40      	ldr	r2, [pc, #256]	; (800a848 <TIM_Base_SetConfig+0x114>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d013      	beq.n	800a774 <TIM_Base_SetConfig+0x40>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a752:	d00f      	beq.n	800a774 <TIM_Base_SetConfig+0x40>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a3d      	ldr	r2, [pc, #244]	; (800a84c <TIM_Base_SetConfig+0x118>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d00b      	beq.n	800a774 <TIM_Base_SetConfig+0x40>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a3c      	ldr	r2, [pc, #240]	; (800a850 <TIM_Base_SetConfig+0x11c>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d007      	beq.n	800a774 <TIM_Base_SetConfig+0x40>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a3b      	ldr	r2, [pc, #236]	; (800a854 <TIM_Base_SetConfig+0x120>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d003      	beq.n	800a774 <TIM_Base_SetConfig+0x40>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a3a      	ldr	r2, [pc, #232]	; (800a858 <TIM_Base_SetConfig+0x124>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d108      	bne.n	800a786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	4313      	orrs	r3, r2
 800a784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a2f      	ldr	r2, [pc, #188]	; (800a848 <TIM_Base_SetConfig+0x114>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d01f      	beq.n	800a7ce <TIM_Base_SetConfig+0x9a>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a794:	d01b      	beq.n	800a7ce <TIM_Base_SetConfig+0x9a>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a2c      	ldr	r2, [pc, #176]	; (800a84c <TIM_Base_SetConfig+0x118>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d017      	beq.n	800a7ce <TIM_Base_SetConfig+0x9a>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a2b      	ldr	r2, [pc, #172]	; (800a850 <TIM_Base_SetConfig+0x11c>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d013      	beq.n	800a7ce <TIM_Base_SetConfig+0x9a>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a2a      	ldr	r2, [pc, #168]	; (800a854 <TIM_Base_SetConfig+0x120>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d00f      	beq.n	800a7ce <TIM_Base_SetConfig+0x9a>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a29      	ldr	r2, [pc, #164]	; (800a858 <TIM_Base_SetConfig+0x124>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d00b      	beq.n	800a7ce <TIM_Base_SetConfig+0x9a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a28      	ldr	r2, [pc, #160]	; (800a85c <TIM_Base_SetConfig+0x128>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d007      	beq.n	800a7ce <TIM_Base_SetConfig+0x9a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a27      	ldr	r2, [pc, #156]	; (800a860 <TIM_Base_SetConfig+0x12c>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d003      	beq.n	800a7ce <TIM_Base_SetConfig+0x9a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a26      	ldr	r2, [pc, #152]	; (800a864 <TIM_Base_SetConfig+0x130>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d108      	bne.n	800a7e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a10      	ldr	r2, [pc, #64]	; (800a848 <TIM_Base_SetConfig+0x114>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d00f      	beq.n	800a82c <TIM_Base_SetConfig+0xf8>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a12      	ldr	r2, [pc, #72]	; (800a858 <TIM_Base_SetConfig+0x124>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d00b      	beq.n	800a82c <TIM_Base_SetConfig+0xf8>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a11      	ldr	r2, [pc, #68]	; (800a85c <TIM_Base_SetConfig+0x128>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d007      	beq.n	800a82c <TIM_Base_SetConfig+0xf8>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a10      	ldr	r2, [pc, #64]	; (800a860 <TIM_Base_SetConfig+0x12c>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d003      	beq.n	800a82c <TIM_Base_SetConfig+0xf8>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a0f      	ldr	r2, [pc, #60]	; (800a864 <TIM_Base_SetConfig+0x130>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d103      	bne.n	800a834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	691a      	ldr	r2, [r3, #16]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	615a      	str	r2, [r3, #20]
}
 800a83a:	bf00      	nop
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	40012c00 	.word	0x40012c00
 800a84c:	40000400 	.word	0x40000400
 800a850:	40000800 	.word	0x40000800
 800a854:	40000c00 	.word	0x40000c00
 800a858:	40013400 	.word	0x40013400
 800a85c:	40014000 	.word	0x40014000
 800a860:	40014400 	.word	0x40014400
 800a864:	40014800 	.word	0x40014800

0800a868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	f023 0201 	bic.w	r2, r3, #1
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a89a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f023 0303 	bic.w	r3, r3, #3
 800a8a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f023 0302 	bic.w	r3, r3, #2
 800a8b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	697a      	ldr	r2, [r7, #20]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a2c      	ldr	r2, [pc, #176]	; (800a974 <TIM_OC1_SetConfig+0x10c>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d00f      	beq.n	800a8e8 <TIM_OC1_SetConfig+0x80>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a2b      	ldr	r2, [pc, #172]	; (800a978 <TIM_OC1_SetConfig+0x110>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d00b      	beq.n	800a8e8 <TIM_OC1_SetConfig+0x80>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a2a      	ldr	r2, [pc, #168]	; (800a97c <TIM_OC1_SetConfig+0x114>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d007      	beq.n	800a8e8 <TIM_OC1_SetConfig+0x80>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a29      	ldr	r2, [pc, #164]	; (800a980 <TIM_OC1_SetConfig+0x118>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d003      	beq.n	800a8e8 <TIM_OC1_SetConfig+0x80>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a28      	ldr	r2, [pc, #160]	; (800a984 <TIM_OC1_SetConfig+0x11c>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d10c      	bne.n	800a902 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f023 0308 	bic.w	r3, r3, #8
 800a8ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f023 0304 	bic.w	r3, r3, #4
 800a900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a1b      	ldr	r2, [pc, #108]	; (800a974 <TIM_OC1_SetConfig+0x10c>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d00f      	beq.n	800a92a <TIM_OC1_SetConfig+0xc2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a1a      	ldr	r2, [pc, #104]	; (800a978 <TIM_OC1_SetConfig+0x110>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d00b      	beq.n	800a92a <TIM_OC1_SetConfig+0xc2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a19      	ldr	r2, [pc, #100]	; (800a97c <TIM_OC1_SetConfig+0x114>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d007      	beq.n	800a92a <TIM_OC1_SetConfig+0xc2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a18      	ldr	r2, [pc, #96]	; (800a980 <TIM_OC1_SetConfig+0x118>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d003      	beq.n	800a92a <TIM_OC1_SetConfig+0xc2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a17      	ldr	r2, [pc, #92]	; (800a984 <TIM_OC1_SetConfig+0x11c>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d111      	bne.n	800a94e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	4313      	orrs	r3, r2
 800a942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	621a      	str	r2, [r3, #32]
}
 800a968:	bf00      	nop
 800a96a:	371c      	adds	r7, #28
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	40012c00 	.word	0x40012c00
 800a978:	40013400 	.word	0x40013400
 800a97c:	40014000 	.word	0x40014000
 800a980:	40014400 	.word	0x40014400
 800a984:	40014800 	.word	0x40014800

0800a988 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a988:	b480      	push	{r7}
 800a98a:	b087      	sub	sp, #28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a1b      	ldr	r3, [r3, #32]
 800a99c:	f023 0210 	bic.w	r2, r3, #16
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	021b      	lsls	r3, r3, #8
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f023 0320 	bic.w	r3, r3, #32
 800a9d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	011b      	lsls	r3, r3, #4
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a28      	ldr	r2, [pc, #160]	; (800aa88 <TIM_OC2_SetConfig+0x100>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d003      	beq.n	800a9f4 <TIM_OC2_SetConfig+0x6c>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a27      	ldr	r2, [pc, #156]	; (800aa8c <TIM_OC2_SetConfig+0x104>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d10d      	bne.n	800aa10 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a1d      	ldr	r2, [pc, #116]	; (800aa88 <TIM_OC2_SetConfig+0x100>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d00f      	beq.n	800aa38 <TIM_OC2_SetConfig+0xb0>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a1c      	ldr	r2, [pc, #112]	; (800aa8c <TIM_OC2_SetConfig+0x104>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d00b      	beq.n	800aa38 <TIM_OC2_SetConfig+0xb0>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a1b      	ldr	r2, [pc, #108]	; (800aa90 <TIM_OC2_SetConfig+0x108>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d007      	beq.n	800aa38 <TIM_OC2_SetConfig+0xb0>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a1a      	ldr	r2, [pc, #104]	; (800aa94 <TIM_OC2_SetConfig+0x10c>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d003      	beq.n	800aa38 <TIM_OC2_SetConfig+0xb0>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a19      	ldr	r2, [pc, #100]	; (800aa98 <TIM_OC2_SetConfig+0x110>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d113      	bne.n	800aa60 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	621a      	str	r2, [r3, #32]
}
 800aa7a:	bf00      	nop
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	40012c00 	.word	0x40012c00
 800aa8c:	40013400 	.word	0x40013400
 800aa90:	40014000 	.word	0x40014000
 800aa94:	40014400 	.word	0x40014400
 800aa98:	40014800 	.word	0x40014800

0800aa9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	69db      	ldr	r3, [r3, #28]
 800aac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f023 0303 	bic.w	r3, r3, #3
 800aad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	4313      	orrs	r3, r2
 800aae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	021b      	lsls	r3, r3, #8
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a27      	ldr	r2, [pc, #156]	; (800ab98 <TIM_OC3_SetConfig+0xfc>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d003      	beq.n	800ab06 <TIM_OC3_SetConfig+0x6a>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a26      	ldr	r2, [pc, #152]	; (800ab9c <TIM_OC3_SetConfig+0x100>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d10d      	bne.n	800ab22 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	021b      	lsls	r3, r3, #8
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a1c      	ldr	r2, [pc, #112]	; (800ab98 <TIM_OC3_SetConfig+0xfc>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d00f      	beq.n	800ab4a <TIM_OC3_SetConfig+0xae>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a1b      	ldr	r2, [pc, #108]	; (800ab9c <TIM_OC3_SetConfig+0x100>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d00b      	beq.n	800ab4a <TIM_OC3_SetConfig+0xae>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a1a      	ldr	r2, [pc, #104]	; (800aba0 <TIM_OC3_SetConfig+0x104>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d007      	beq.n	800ab4a <TIM_OC3_SetConfig+0xae>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a19      	ldr	r2, [pc, #100]	; (800aba4 <TIM_OC3_SetConfig+0x108>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d003      	beq.n	800ab4a <TIM_OC3_SetConfig+0xae>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a18      	ldr	r2, [pc, #96]	; (800aba8 <TIM_OC3_SetConfig+0x10c>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d113      	bne.n	800ab72 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	011b      	lsls	r3, r3, #4
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	011b      	lsls	r3, r3, #4
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	685a      	ldr	r2, [r3, #4]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	621a      	str	r2, [r3, #32]
}
 800ab8c:	bf00      	nop
 800ab8e:	371c      	adds	r7, #28
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	40012c00 	.word	0x40012c00
 800ab9c:	40013400 	.word	0x40013400
 800aba0:	40014000 	.word	0x40014000
 800aba4:	40014400 	.word	0x40014400
 800aba8:	40014800 	.word	0x40014800

0800abac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	031b      	lsls	r3, r3, #12
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	4a18      	ldr	r2, [pc, #96]	; (800ac6c <TIM_OC4_SetConfig+0xc0>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d00f      	beq.n	800ac30 <TIM_OC4_SetConfig+0x84>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a17      	ldr	r2, [pc, #92]	; (800ac70 <TIM_OC4_SetConfig+0xc4>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d00b      	beq.n	800ac30 <TIM_OC4_SetConfig+0x84>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a16      	ldr	r2, [pc, #88]	; (800ac74 <TIM_OC4_SetConfig+0xc8>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d007      	beq.n	800ac30 <TIM_OC4_SetConfig+0x84>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a15      	ldr	r2, [pc, #84]	; (800ac78 <TIM_OC4_SetConfig+0xcc>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d003      	beq.n	800ac30 <TIM_OC4_SetConfig+0x84>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a14      	ldr	r2, [pc, #80]	; (800ac7c <TIM_OC4_SetConfig+0xd0>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d109      	bne.n	800ac44 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	019b      	lsls	r3, r3, #6
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	621a      	str	r2, [r3, #32]
}
 800ac5e:	bf00      	nop
 800ac60:	371c      	adds	r7, #28
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	40012c00 	.word	0x40012c00
 800ac70:	40013400 	.word	0x40013400
 800ac74:	40014000 	.word	0x40014000
 800ac78:	40014400 	.word	0x40014400
 800ac7c:	40014800 	.word	0x40014800

0800ac80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	4313      	orrs	r3, r2
 800acbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800acc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	041b      	lsls	r3, r3, #16
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	4313      	orrs	r3, r2
 800acd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a17      	ldr	r2, [pc, #92]	; (800ad34 <TIM_OC5_SetConfig+0xb4>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d00f      	beq.n	800acfa <TIM_OC5_SetConfig+0x7a>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a16      	ldr	r2, [pc, #88]	; (800ad38 <TIM_OC5_SetConfig+0xb8>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d00b      	beq.n	800acfa <TIM_OC5_SetConfig+0x7a>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a15      	ldr	r2, [pc, #84]	; (800ad3c <TIM_OC5_SetConfig+0xbc>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d007      	beq.n	800acfa <TIM_OC5_SetConfig+0x7a>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a14      	ldr	r2, [pc, #80]	; (800ad40 <TIM_OC5_SetConfig+0xc0>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d003      	beq.n	800acfa <TIM_OC5_SetConfig+0x7a>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a13      	ldr	r2, [pc, #76]	; (800ad44 <TIM_OC5_SetConfig+0xc4>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d109      	bne.n	800ad0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	621a      	str	r2, [r3, #32]
}
 800ad28:	bf00      	nop
 800ad2a:	371c      	adds	r7, #28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	40012c00 	.word	0x40012c00
 800ad38:	40013400 	.word	0x40013400
 800ad3c:	40014000 	.word	0x40014000
 800ad40:	40014400 	.word	0x40014400
 800ad44:	40014800 	.word	0x40014800

0800ad48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b087      	sub	sp, #28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a1b      	ldr	r3, [r3, #32]
 800ad5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	021b      	lsls	r3, r3, #8
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	051b      	lsls	r3, r3, #20
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a18      	ldr	r2, [pc, #96]	; (800ae00 <TIM_OC6_SetConfig+0xb8>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d00f      	beq.n	800adc4 <TIM_OC6_SetConfig+0x7c>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a17      	ldr	r2, [pc, #92]	; (800ae04 <TIM_OC6_SetConfig+0xbc>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00b      	beq.n	800adc4 <TIM_OC6_SetConfig+0x7c>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a16      	ldr	r2, [pc, #88]	; (800ae08 <TIM_OC6_SetConfig+0xc0>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d007      	beq.n	800adc4 <TIM_OC6_SetConfig+0x7c>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a15      	ldr	r2, [pc, #84]	; (800ae0c <TIM_OC6_SetConfig+0xc4>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d003      	beq.n	800adc4 <TIM_OC6_SetConfig+0x7c>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a14      	ldr	r2, [pc, #80]	; (800ae10 <TIM_OC6_SetConfig+0xc8>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d109      	bne.n	800add8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	029b      	lsls	r3, r3, #10
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	4313      	orrs	r3, r2
 800add6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	621a      	str	r2, [r3, #32]
}
 800adf2:	bf00      	nop
 800adf4:	371c      	adds	r7, #28
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	40012c00 	.word	0x40012c00
 800ae04:	40013400 	.word	0x40013400
 800ae08:	40014000 	.word	0x40014000
 800ae0c:	40014400 	.word	0x40014400
 800ae10:	40014800 	.word	0x40014800

0800ae14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	f023 0201 	bic.w	r2, r3, #1
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	011b      	lsls	r3, r3, #4
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f023 030a 	bic.w	r3, r3, #10
 800ae50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	621a      	str	r2, [r3, #32]
}
 800ae66:	bf00      	nop
 800ae68:	371c      	adds	r7, #28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b087      	sub	sp, #28
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	60f8      	str	r0, [r7, #12]
 800ae7a:	60b9      	str	r1, [r7, #8]
 800ae7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a1b      	ldr	r3, [r3, #32]
 800ae88:	f023 0210 	bic.w	r2, r3, #16
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	031b      	lsls	r3, r3, #12
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aeae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	011b      	lsls	r3, r3, #4
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	621a      	str	r2, [r3, #32]
}
 800aec6:	bf00      	nop
 800aec8:	371c      	adds	r7, #28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b085      	sub	sp, #20
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	f043 0307 	orr.w	r3, r3, #7
 800aef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	609a      	str	r2, [r3, #8]
}
 800aefc:	bf00      	nop
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	021a      	lsls	r2, r3, #8
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	431a      	orrs	r2, r3
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	4313      	orrs	r3, r2
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	4313      	orrs	r3, r2
 800af34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	609a      	str	r2, [r3, #8]
}
 800af3c:	bf00      	nop
 800af3e:	371c      	adds	r7, #28
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f003 031f 	and.w	r3, r3, #31
 800af5a:	2201      	movs	r2, #1
 800af5c:	fa02 f303 	lsl.w	r3, r2, r3
 800af60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6a1a      	ldr	r2, [r3, #32]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	43db      	mvns	r3, r3
 800af6a:	401a      	ands	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6a1a      	ldr	r2, [r3, #32]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	f003 031f 	and.w	r3, r3, #31
 800af7a:	6879      	ldr	r1, [r7, #4]
 800af7c:	fa01 f303 	lsl.w	r3, r1, r3
 800af80:	431a      	orrs	r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	621a      	str	r2, [r3, #32]
}
 800af86:	bf00      	nop
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
	...

0800af94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d101      	bne.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afa8:	2302      	movs	r3, #2
 800afaa:	e068      	b.n	800b07e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a2e      	ldr	r2, [pc, #184]	; (800b08c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d004      	beq.n	800afe0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a2d      	ldr	r2, [pc, #180]	; (800b090 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d108      	bne.n	800aff2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afe6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4313      	orrs	r3, r2
 800aff0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aff8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	4313      	orrs	r3, r2
 800b002:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a1e      	ldr	r2, [pc, #120]	; (800b08c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d01d      	beq.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b01e:	d018      	beq.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a1b      	ldr	r2, [pc, #108]	; (800b094 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d013      	beq.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a1a      	ldr	r2, [pc, #104]	; (800b098 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d00e      	beq.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a18      	ldr	r2, [pc, #96]	; (800b09c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d009      	beq.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a13      	ldr	r2, [pc, #76]	; (800b090 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d004      	beq.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a14      	ldr	r2, [pc, #80]	; (800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d10c      	bne.n	800b06c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	4313      	orrs	r3, r2
 800b062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	40012c00 	.word	0x40012c00
 800b090:	40013400 	.word	0x40013400
 800b094:	40000400 	.word	0x40000400
 800b098:	40000800 	.word	0x40000800
 800b09c:	40000c00 	.word	0x40000c00
 800b0a0:	40014000 	.word	0x40014000

0800b0a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e042      	b.n	800b178 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d106      	bne.n	800b10a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7f9 fbbb 	bl	8004880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2224      	movs	r2, #36	; 0x24
 800b10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f022 0201 	bic.w	r2, r2, #1
 800b120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 ff48 	bl	800bfc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fc49 	bl	800b9c8 <UART_SetConfig>
 800b136:	4603      	mov	r3, r0
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d101      	bne.n	800b140 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e01b      	b.n	800b178 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b14e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689a      	ldr	r2, [r3, #8]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b15e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f042 0201 	orr.w	r2, r2, #1
 800b16e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 ffc7 	bl	800c104 <UART_CheckIdleState>
 800b176:	4603      	mov	r3, r0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b180:	b480      	push	{r7}
 800b182:	b091      	sub	sp, #68	; 0x44
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	4613      	mov	r3, r2
 800b18c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b194:	2b20      	cmp	r3, #32
 800b196:	d178      	bne.n	800b28a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <HAL_UART_Transmit_IT+0x24>
 800b19e:	88fb      	ldrh	r3, [r7, #6]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e071      	b.n	800b28c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	88fa      	ldrh	r2, [r7, #6]
 800b1b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	88fa      	ldrh	r2, [r7, #6]
 800b1ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2221      	movs	r2, #33	; 0x21
 800b1d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1dc:	d12a      	bne.n	800b234 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e6:	d107      	bne.n	800b1f8 <HAL_UART_Transmit_IT+0x78>
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d103      	bne.n	800b1f8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	4a29      	ldr	r2, [pc, #164]	; (800b298 <HAL_UART_Transmit_IT+0x118>)
 800b1f4:	679a      	str	r2, [r3, #120]	; 0x78
 800b1f6:	e002      	b.n	800b1fe <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	4a28      	ldr	r2, [pc, #160]	; (800b29c <HAL_UART_Transmit_IT+0x11c>)
 800b1fc:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3308      	adds	r3, #8
 800b204:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	e853 3f00 	ldrex	r3, [r3]
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b214:	63bb      	str	r3, [r7, #56]	; 0x38
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3308      	adds	r3, #8
 800b21c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b21e:	637a      	str	r2, [r7, #52]	; 0x34
 800b220:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e5      	bne.n	800b1fe <HAL_UART_Transmit_IT+0x7e>
 800b232:	e028      	b.n	800b286 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b23c:	d107      	bne.n	800b24e <HAL_UART_Transmit_IT+0xce>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d103      	bne.n	800b24e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	4a15      	ldr	r2, [pc, #84]	; (800b2a0 <HAL_UART_Transmit_IT+0x120>)
 800b24a:	679a      	str	r2, [r3, #120]	; 0x78
 800b24c:	e002      	b.n	800b254 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4a14      	ldr	r2, [pc, #80]	; (800b2a4 <HAL_UART_Transmit_IT+0x124>)
 800b252:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	613b      	str	r3, [r7, #16]
   return(result);
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b272:	623b      	str	r3, [r7, #32]
 800b274:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	69f9      	ldr	r1, [r7, #28]
 800b278:	6a3a      	ldr	r2, [r7, #32]
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e6      	bne.n	800b254 <HAL_UART_Transmit_IT+0xd4>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	e000      	b.n	800b28c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b28a:	2302      	movs	r3, #2
  }
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3744      	adds	r7, #68	; 0x44
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr
 800b298:	0800c8c3 	.word	0x0800c8c3
 800b29c:	0800c7e1 	.word	0x0800c7e1
 800b2a0:	0800c71f 	.word	0x0800c71f
 800b2a4:	0800c665 	.word	0x0800c665

0800b2a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08a      	sub	sp, #40	; 0x28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	d137      	bne.n	800b330 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <HAL_UART_Receive_IT+0x24>
 800b2c6:	88fb      	ldrh	r3, [r7, #6]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e030      	b.n	800b332 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a18      	ldr	r2, [pc, #96]	; (800b33c <HAL_UART_Receive_IT+0x94>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d01f      	beq.n	800b320 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d018      	beq.n	800b320 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	e853 3f00 	ldrex	r3, [r3]
 800b2fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b302:	627b      	str	r3, [r7, #36]	; 0x24
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	461a      	mov	r2, r3
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	623b      	str	r3, [r7, #32]
 800b30e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b310:	69f9      	ldr	r1, [r7, #28]
 800b312:	6a3a      	ldr	r2, [r7, #32]
 800b314:	e841 2300 	strex	r3, r2, [r1]
 800b318:	61bb      	str	r3, [r7, #24]
   return(result);
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1e6      	bne.n	800b2ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	461a      	mov	r2, r3
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 fffe 	bl	800c328 <UART_Start_Receive_IT>
 800b32c:	4603      	mov	r3, r0
 800b32e:	e000      	b.n	800b332 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b330:	2302      	movs	r3, #2
  }
}
 800b332:	4618      	mov	r0, r3
 800b334:	3728      	adds	r7, #40	; 0x28
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	40008000 	.word	0x40008000

0800b340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b0ba      	sub	sp, #232	; 0xe8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b36a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b36e:	4013      	ands	r3, r2
 800b370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d11b      	bne.n	800b3b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b380:	f003 0320 	and.w	r3, r3, #32
 800b384:	2b00      	cmp	r3, #0
 800b386:	d015      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b00      	cmp	r3, #0
 800b392:	d105      	bne.n	800b3a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d009      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 82e3 	beq.w	800b970 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	4798      	blx	r3
      }
      return;
 800b3b2:	e2dd      	b.n	800b970 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800b3b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 8123 	beq.w	800b604 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b3be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b3c2:	4b8d      	ldr	r3, [pc, #564]	; (800b5f8 <HAL_UART_IRQHandler+0x2b8>)
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d106      	bne.n	800b3d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b3ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b3ce:	4b8b      	ldr	r3, [pc, #556]	; (800b5fc <HAL_UART_IRQHandler+0x2bc>)
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 8116 	beq.w	800b604 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3dc:	f003 0301 	and.w	r3, r3, #1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d011      	beq.n	800b408 <HAL_UART_IRQHandler+0xc8>
 800b3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3fe:	f043 0201 	orr.w	r2, r3, #1
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d011      	beq.n	800b438 <HAL_UART_IRQHandler+0xf8>
 800b414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2202      	movs	r2, #2
 800b426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b42e:	f043 0204 	orr.w	r2, r3, #4
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b43c:	f003 0304 	and.w	r3, r3, #4
 800b440:	2b00      	cmp	r3, #0
 800b442:	d011      	beq.n	800b468 <HAL_UART_IRQHandler+0x128>
 800b444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00b      	beq.n	800b468 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2204      	movs	r2, #4
 800b456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b45e:	f043 0202 	orr.w	r2, r3, #2
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b46c:	f003 0308 	and.w	r3, r3, #8
 800b470:	2b00      	cmp	r3, #0
 800b472:	d017      	beq.n	800b4a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b478:	f003 0320 	and.w	r3, r3, #32
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d105      	bne.n	800b48c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b480:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b484:	4b5c      	ldr	r3, [pc, #368]	; (800b5f8 <HAL_UART_IRQHandler+0x2b8>)
 800b486:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2208      	movs	r2, #8
 800b492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b49a:	f043 0208 	orr.w	r2, r3, #8
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d012      	beq.n	800b4d6 <HAL_UART_IRQHandler+0x196>
 800b4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00c      	beq.n	800b4d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4cc:	f043 0220 	orr.w	r2, r3, #32
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 8249 	beq.w	800b974 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4e6:	f003 0320 	and.w	r3, r3, #32
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d013      	beq.n	800b516 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d105      	bne.n	800b506 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b4fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d007      	beq.n	800b516 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d003      	beq.n	800b516 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b51c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52a:	2b40      	cmp	r3, #64	; 0x40
 800b52c:	d005      	beq.n	800b53a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b52e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b532:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b536:	2b00      	cmp	r3, #0
 800b538:	d054      	beq.n	800b5e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 f816 	bl	800c56c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54a:	2b40      	cmp	r3, #64	; 0x40
 800b54c:	d146      	bne.n	800b5dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3308      	adds	r3, #8
 800b554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b55c:	e853 3f00 	ldrex	r3, [r3]
 800b560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b56c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3308      	adds	r3, #8
 800b576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b57a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b57e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b58a:	e841 2300 	strex	r3, r2, [r1]
 800b58e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1d9      	bne.n	800b54e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d017      	beq.n	800b5d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5aa:	4a15      	ldr	r2, [pc, #84]	; (800b600 <HAL_UART_IRQHandler+0x2c0>)
 800b5ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fa fd1e 	bl	8005ff6 <HAL_DMA_Abort_IT>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d019      	beq.n	800b5f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5d2:	e00f      	b.n	800b5f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f9e1 	bl	800b99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5da:	e00b      	b.n	800b5f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f9dd 	bl	800b99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5e2:	e007      	b.n	800b5f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f9d9 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b5f2:	e1bf      	b.n	800b974 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5f4:	bf00      	nop
    return;
 800b5f6:	e1bd      	b.n	800b974 <HAL_UART_IRQHandler+0x634>
 800b5f8:	10000001 	.word	0x10000001
 800b5fc:	04000120 	.word	0x04000120
 800b600:	0800c639 	.word	0x0800c639

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b608:	2b01      	cmp	r3, #1
 800b60a:	f040 8153 	bne.w	800b8b4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b60e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b612:	f003 0310 	and.w	r3, r3, #16
 800b616:	2b00      	cmp	r3, #0
 800b618:	f000 814c 	beq.w	800b8b4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b620:	f003 0310 	and.w	r3, r3, #16
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 8145 	beq.w	800b8b4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2210      	movs	r2, #16
 800b630:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b63c:	2b40      	cmp	r3, #64	; 0x40
 800b63e:	f040 80bb 	bne.w	800b7b8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 818f 	beq.w	800b978 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b664:	429a      	cmp	r2, r3
 800b666:	f080 8187 	bcs.w	800b978 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b670:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0320 	and.w	r3, r3, #32
 800b682:	2b00      	cmp	r3, #0
 800b684:	f040 8087 	bne.w	800b796 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b69c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b6b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b6be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b6c2:	e841 2300 	strex	r3, r2, [r1]
 800b6c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b6ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1da      	bne.n	800b688 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6dc:	e853 3f00 	ldrex	r3, [r3]
 800b6e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b6e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6e4:	f023 0301 	bic.w	r3, r3, #1
 800b6e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b6f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b6fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b6fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b702:	e841 2300 	strex	r3, r2, [r1]
 800b706:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1e1      	bne.n	800b6d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b71e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3308      	adds	r3, #8
 800b72e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b732:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b734:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b736:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b738:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b73a:	e841 2300 	strex	r3, r2, [r1]
 800b73e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1e3      	bne.n	800b70e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2220      	movs	r2, #32
 800b74a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b75c:	e853 3f00 	ldrex	r3, [r3]
 800b760:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b764:	f023 0310 	bic.w	r3, r3, #16
 800b768:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	461a      	mov	r2, r3
 800b772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b776:	65bb      	str	r3, [r7, #88]	; 0x58
 800b778:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b77c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b77e:	e841 2300 	strex	r3, r2, [r1]
 800b782:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1e4      	bne.n	800b754 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b790:	4618      	mov	r0, r3
 800b792:	f7fa fbd4 	bl	8005f3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2202      	movs	r2, #2
 800b79a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f8fd 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7b6:	e0df      	b.n	800b978 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 80d1 	beq.w	800b97c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b7da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 80cc 	beq.w	800b97c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b806:	647b      	str	r3, [r7, #68]	; 0x44
 800b808:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b80c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b80e:	e841 2300 	strex	r3, r2, [r1]
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1e4      	bne.n	800b7e4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3308      	adds	r3, #8
 800b820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b824:	e853 3f00 	ldrex	r3, [r3]
 800b828:	623b      	str	r3, [r7, #32]
   return(result);
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b830:	f023 0301 	bic.w	r3, r3, #1
 800b834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3308      	adds	r3, #8
 800b83e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b842:	633a      	str	r2, [r7, #48]	; 0x30
 800b844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b84a:	e841 2300 	strex	r3, r2, [r1]
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1e1      	bne.n	800b81a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2220      	movs	r2, #32
 800b85a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	e853 3f00 	ldrex	r3, [r3]
 800b876:	60fb      	str	r3, [r7, #12]
   return(result);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 0310 	bic.w	r3, r3, #16
 800b87e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b88c:	61fb      	str	r3, [r7, #28]
 800b88e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b890:	69b9      	ldr	r1, [r7, #24]
 800b892:	69fa      	ldr	r2, [r7, #28]
 800b894:	e841 2300 	strex	r3, r2, [r1]
 800b898:	617b      	str	r3, [r7, #20]
   return(result);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1e4      	bne.n	800b86a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f87f 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8b2:	e063      	b.n	800b97c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00e      	beq.n	800b8de <HAL_UART_IRQHandler+0x59e>
 800b8c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d008      	beq.n	800b8de <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b8d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f001 fdb8 	bl	800d44c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8dc:	e051      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d014      	beq.n	800b914 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b8ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d105      	bne.n	800b902 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b8f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d008      	beq.n	800b914 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b906:	2b00      	cmp	r3, #0
 800b908:	d03a      	beq.n	800b980 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
    }
    return;
 800b912:	e035      	b.n	800b980 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d009      	beq.n	800b934 <HAL_UART_IRQHandler+0x5f4>
 800b920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d003      	beq.n	800b934 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f001 f83d 	bl	800c9ac <UART_EndTransmit_IT>
    return;
 800b932:	e026      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d009      	beq.n	800b954 <HAL_UART_IRQHandler+0x614>
 800b940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f001 fd91 	bl	800d474 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b952:	e016      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d010      	beq.n	800b982 <HAL_UART_IRQHandler+0x642>
 800b960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b964:	2b00      	cmp	r3, #0
 800b966:	da0c      	bge.n	800b982 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f001 fd79 	bl	800d460 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b96e:	e008      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
      return;
 800b970:	bf00      	nop
 800b972:	e006      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
    return;
 800b974:	bf00      	nop
 800b976:	e004      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
      return;
 800b978:	bf00      	nop
 800b97a:	e002      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
      return;
 800b97c:	bf00      	nop
 800b97e:	e000      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
    return;
 800b980:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800b982:	37e8      	adds	r7, #232	; 0xe8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9cc:	b08c      	sub	sp, #48	; 0x30
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	689a      	ldr	r2, [r3, #8]
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	431a      	orrs	r2, r3
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	69db      	ldr	r3, [r3, #28]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	4baa      	ldr	r3, [pc, #680]	; (800bca0 <UART_SetConfig+0x2d8>)
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	6812      	ldr	r2, [r2, #0]
 800b9fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba00:	430b      	orrs	r3, r1
 800ba02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	68da      	ldr	r2, [r3, #12]
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	430a      	orrs	r2, r1
 800ba18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a9f      	ldr	r2, [pc, #636]	; (800bca4 <UART_SetConfig+0x2dc>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d004      	beq.n	800ba34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba30:	4313      	orrs	r3, r2
 800ba32:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ba3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	6812      	ldr	r2, [r2, #0]
 800ba46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba52:	f023 010f 	bic.w	r1, r3, #15
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a90      	ldr	r2, [pc, #576]	; (800bca8 <UART_SetConfig+0x2e0>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d125      	bne.n	800bab8 <UART_SetConfig+0xf0>
 800ba6c:	4b8f      	ldr	r3, [pc, #572]	; (800bcac <UART_SetConfig+0x2e4>)
 800ba6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba72:	f003 0303 	and.w	r3, r3, #3
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	d81a      	bhi.n	800bab0 <UART_SetConfig+0xe8>
 800ba7a:	a201      	add	r2, pc, #4	; (adr r2, 800ba80 <UART_SetConfig+0xb8>)
 800ba7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba80:	0800ba91 	.word	0x0800ba91
 800ba84:	0800baa1 	.word	0x0800baa1
 800ba88:	0800ba99 	.word	0x0800ba99
 800ba8c:	0800baa9 	.word	0x0800baa9
 800ba90:	2301      	movs	r3, #1
 800ba92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba96:	e116      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba9e:	e112      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800baa0:	2304      	movs	r3, #4
 800baa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baa6:	e10e      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800baa8:	2308      	movs	r3, #8
 800baaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baae:	e10a      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bab0:	2310      	movs	r3, #16
 800bab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bab6:	e106      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a7c      	ldr	r2, [pc, #496]	; (800bcb0 <UART_SetConfig+0x2e8>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d138      	bne.n	800bb34 <UART_SetConfig+0x16c>
 800bac2:	4b7a      	ldr	r3, [pc, #488]	; (800bcac <UART_SetConfig+0x2e4>)
 800bac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bac8:	f003 030c 	and.w	r3, r3, #12
 800bacc:	2b0c      	cmp	r3, #12
 800bace:	d82d      	bhi.n	800bb2c <UART_SetConfig+0x164>
 800bad0:	a201      	add	r2, pc, #4	; (adr r2, 800bad8 <UART_SetConfig+0x110>)
 800bad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad6:	bf00      	nop
 800bad8:	0800bb0d 	.word	0x0800bb0d
 800badc:	0800bb2d 	.word	0x0800bb2d
 800bae0:	0800bb2d 	.word	0x0800bb2d
 800bae4:	0800bb2d 	.word	0x0800bb2d
 800bae8:	0800bb1d 	.word	0x0800bb1d
 800baec:	0800bb2d 	.word	0x0800bb2d
 800baf0:	0800bb2d 	.word	0x0800bb2d
 800baf4:	0800bb2d 	.word	0x0800bb2d
 800baf8:	0800bb15 	.word	0x0800bb15
 800bafc:	0800bb2d 	.word	0x0800bb2d
 800bb00:	0800bb2d 	.word	0x0800bb2d
 800bb04:	0800bb2d 	.word	0x0800bb2d
 800bb08:	0800bb25 	.word	0x0800bb25
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb12:	e0d8      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb14:	2302      	movs	r3, #2
 800bb16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb1a:	e0d4      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb22:	e0d0      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb24:	2308      	movs	r3, #8
 800bb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb2a:	e0cc      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb32:	e0c8      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a5e      	ldr	r2, [pc, #376]	; (800bcb4 <UART_SetConfig+0x2ec>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d125      	bne.n	800bb8a <UART_SetConfig+0x1c2>
 800bb3e:	4b5b      	ldr	r3, [pc, #364]	; (800bcac <UART_SetConfig+0x2e4>)
 800bb40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb48:	2b30      	cmp	r3, #48	; 0x30
 800bb4a:	d016      	beq.n	800bb7a <UART_SetConfig+0x1b2>
 800bb4c:	2b30      	cmp	r3, #48	; 0x30
 800bb4e:	d818      	bhi.n	800bb82 <UART_SetConfig+0x1ba>
 800bb50:	2b20      	cmp	r3, #32
 800bb52:	d00a      	beq.n	800bb6a <UART_SetConfig+0x1a2>
 800bb54:	2b20      	cmp	r3, #32
 800bb56:	d814      	bhi.n	800bb82 <UART_SetConfig+0x1ba>
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <UART_SetConfig+0x19a>
 800bb5c:	2b10      	cmp	r3, #16
 800bb5e:	d008      	beq.n	800bb72 <UART_SetConfig+0x1aa>
 800bb60:	e00f      	b.n	800bb82 <UART_SetConfig+0x1ba>
 800bb62:	2300      	movs	r3, #0
 800bb64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb68:	e0ad      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb70:	e0a9      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb72:	2304      	movs	r3, #4
 800bb74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb78:	e0a5      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb7a:	2308      	movs	r3, #8
 800bb7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb80:	e0a1      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb82:	2310      	movs	r3, #16
 800bb84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb88:	e09d      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a4a      	ldr	r2, [pc, #296]	; (800bcb8 <UART_SetConfig+0x2f0>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d125      	bne.n	800bbe0 <UART_SetConfig+0x218>
 800bb94:	4b45      	ldr	r3, [pc, #276]	; (800bcac <UART_SetConfig+0x2e4>)
 800bb96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb9e:	2bc0      	cmp	r3, #192	; 0xc0
 800bba0:	d016      	beq.n	800bbd0 <UART_SetConfig+0x208>
 800bba2:	2bc0      	cmp	r3, #192	; 0xc0
 800bba4:	d818      	bhi.n	800bbd8 <UART_SetConfig+0x210>
 800bba6:	2b80      	cmp	r3, #128	; 0x80
 800bba8:	d00a      	beq.n	800bbc0 <UART_SetConfig+0x1f8>
 800bbaa:	2b80      	cmp	r3, #128	; 0x80
 800bbac:	d814      	bhi.n	800bbd8 <UART_SetConfig+0x210>
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <UART_SetConfig+0x1f0>
 800bbb2:	2b40      	cmp	r3, #64	; 0x40
 800bbb4:	d008      	beq.n	800bbc8 <UART_SetConfig+0x200>
 800bbb6:	e00f      	b.n	800bbd8 <UART_SetConfig+0x210>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbbe:	e082      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbc6:	e07e      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bbc8:	2304      	movs	r3, #4
 800bbca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbce:	e07a      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bbd0:	2308      	movs	r3, #8
 800bbd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbd6:	e076      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bbd8:	2310      	movs	r3, #16
 800bbda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbde:	e072      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a35      	ldr	r2, [pc, #212]	; (800bcbc <UART_SetConfig+0x2f4>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d12a      	bne.n	800bc40 <UART_SetConfig+0x278>
 800bbea:	4b30      	ldr	r3, [pc, #192]	; (800bcac <UART_SetConfig+0x2e4>)
 800bbec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbf8:	d01a      	beq.n	800bc30 <UART_SetConfig+0x268>
 800bbfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbfe:	d81b      	bhi.n	800bc38 <UART_SetConfig+0x270>
 800bc00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc04:	d00c      	beq.n	800bc20 <UART_SetConfig+0x258>
 800bc06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc0a:	d815      	bhi.n	800bc38 <UART_SetConfig+0x270>
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <UART_SetConfig+0x250>
 800bc10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc14:	d008      	beq.n	800bc28 <UART_SetConfig+0x260>
 800bc16:	e00f      	b.n	800bc38 <UART_SetConfig+0x270>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc1e:	e052      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bc20:	2302      	movs	r3, #2
 800bc22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc26:	e04e      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bc28:	2304      	movs	r3, #4
 800bc2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc2e:	e04a      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bc30:	2308      	movs	r3, #8
 800bc32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc36:	e046      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bc38:	2310      	movs	r3, #16
 800bc3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc3e:	e042      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a17      	ldr	r2, [pc, #92]	; (800bca4 <UART_SetConfig+0x2dc>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d13a      	bne.n	800bcc0 <UART_SetConfig+0x2f8>
 800bc4a:	4b18      	ldr	r3, [pc, #96]	; (800bcac <UART_SetConfig+0x2e4>)
 800bc4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bc54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc58:	d01a      	beq.n	800bc90 <UART_SetConfig+0x2c8>
 800bc5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc5e:	d81b      	bhi.n	800bc98 <UART_SetConfig+0x2d0>
 800bc60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc64:	d00c      	beq.n	800bc80 <UART_SetConfig+0x2b8>
 800bc66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc6a:	d815      	bhi.n	800bc98 <UART_SetConfig+0x2d0>
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d003      	beq.n	800bc78 <UART_SetConfig+0x2b0>
 800bc70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc74:	d008      	beq.n	800bc88 <UART_SetConfig+0x2c0>
 800bc76:	e00f      	b.n	800bc98 <UART_SetConfig+0x2d0>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc7e:	e022      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bc80:	2302      	movs	r3, #2
 800bc82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc86:	e01e      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bc88:	2304      	movs	r3, #4
 800bc8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc8e:	e01a      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bc90:	2308      	movs	r3, #8
 800bc92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc96:	e016      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bc98:	2310      	movs	r3, #16
 800bc9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc9e:	e012      	b.n	800bcc6 <UART_SetConfig+0x2fe>
 800bca0:	cfff69f3 	.word	0xcfff69f3
 800bca4:	40008000 	.word	0x40008000
 800bca8:	40013800 	.word	0x40013800
 800bcac:	40021000 	.word	0x40021000
 800bcb0:	40004400 	.word	0x40004400
 800bcb4:	40004800 	.word	0x40004800
 800bcb8:	40004c00 	.word	0x40004c00
 800bcbc:	40005000 	.word	0x40005000
 800bcc0:	2310      	movs	r3, #16
 800bcc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4aae      	ldr	r2, [pc, #696]	; (800bf84 <UART_SetConfig+0x5bc>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	f040 8097 	bne.w	800be00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bcd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcd6:	2b08      	cmp	r3, #8
 800bcd8:	d823      	bhi.n	800bd22 <UART_SetConfig+0x35a>
 800bcda:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <UART_SetConfig+0x318>)
 800bcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce0:	0800bd05 	.word	0x0800bd05
 800bce4:	0800bd23 	.word	0x0800bd23
 800bce8:	0800bd0d 	.word	0x0800bd0d
 800bcec:	0800bd23 	.word	0x0800bd23
 800bcf0:	0800bd13 	.word	0x0800bd13
 800bcf4:	0800bd23 	.word	0x0800bd23
 800bcf8:	0800bd23 	.word	0x0800bd23
 800bcfc:	0800bd23 	.word	0x0800bd23
 800bd00:	0800bd1b 	.word	0x0800bd1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd04:	f7fc f804 	bl	8007d10 <HAL_RCC_GetPCLK1Freq>
 800bd08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd0a:	e010      	b.n	800bd2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd0c:	4b9e      	ldr	r3, [pc, #632]	; (800bf88 <UART_SetConfig+0x5c0>)
 800bd0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd10:	e00d      	b.n	800bd2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd12:	f7fb ff65 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 800bd16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd18:	e009      	b.n	800bd2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd20:	e005      	b.n	800bd2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bd22:	2300      	movs	r3, #0
 800bd24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 8130 	beq.w	800bf96 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	4a94      	ldr	r2, [pc, #592]	; (800bf8c <UART_SetConfig+0x5c4>)
 800bd3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd40:	461a      	mov	r2, r3
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	685a      	ldr	r2, [r3, #4]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	005b      	lsls	r3, r3, #1
 800bd52:	4413      	add	r3, r2
 800bd54:	69ba      	ldr	r2, [r7, #24]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d305      	bcc.n	800bd66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd60:	69ba      	ldr	r2, [r7, #24]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d903      	bls.n	800bd6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd6c:	e113      	b.n	800bf96 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	2200      	movs	r2, #0
 800bd72:	60bb      	str	r3, [r7, #8]
 800bd74:	60fa      	str	r2, [r7, #12]
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	4a84      	ldr	r2, [pc, #528]	; (800bf8c <UART_SetConfig+0x5c4>)
 800bd7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	2200      	movs	r2, #0
 800bd84:	603b      	str	r3, [r7, #0]
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd90:	f7f4 ff04 	bl	8000b9c <__aeabi_uldivmod>
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	f04f 0200 	mov.w	r2, #0
 800bda0:	f04f 0300 	mov.w	r3, #0
 800bda4:	020b      	lsls	r3, r1, #8
 800bda6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bdaa:	0202      	lsls	r2, r0, #8
 800bdac:	6979      	ldr	r1, [r7, #20]
 800bdae:	6849      	ldr	r1, [r1, #4]
 800bdb0:	0849      	lsrs	r1, r1, #1
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	eb12 0804 	adds.w	r8, r2, r4
 800bdbc:	eb43 0905 	adc.w	r9, r3, r5
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	469a      	mov	sl, r3
 800bdc8:	4693      	mov	fp, r2
 800bdca:	4652      	mov	r2, sl
 800bdcc:	465b      	mov	r3, fp
 800bdce:	4640      	mov	r0, r8
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	f7f4 fee3 	bl	8000b9c <__aeabi_uldivmod>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4613      	mov	r3, r2
 800bddc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bde4:	d308      	bcc.n	800bdf8 <UART_SetConfig+0x430>
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdec:	d204      	bcs.n	800bdf8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	6a3a      	ldr	r2, [r7, #32]
 800bdf4:	60da      	str	r2, [r3, #12]
 800bdf6:	e0ce      	b.n	800bf96 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bdfe:	e0ca      	b.n	800bf96 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	69db      	ldr	r3, [r3, #28]
 800be04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be08:	d166      	bne.n	800bed8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800be0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be0e:	2b08      	cmp	r3, #8
 800be10:	d827      	bhi.n	800be62 <UART_SetConfig+0x49a>
 800be12:	a201      	add	r2, pc, #4	; (adr r2, 800be18 <UART_SetConfig+0x450>)
 800be14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be18:	0800be3d 	.word	0x0800be3d
 800be1c:	0800be45 	.word	0x0800be45
 800be20:	0800be4d 	.word	0x0800be4d
 800be24:	0800be63 	.word	0x0800be63
 800be28:	0800be53 	.word	0x0800be53
 800be2c:	0800be63 	.word	0x0800be63
 800be30:	0800be63 	.word	0x0800be63
 800be34:	0800be63 	.word	0x0800be63
 800be38:	0800be5b 	.word	0x0800be5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be3c:	f7fb ff68 	bl	8007d10 <HAL_RCC_GetPCLK1Freq>
 800be40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be42:	e014      	b.n	800be6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be44:	f7fb ff7a 	bl	8007d3c <HAL_RCC_GetPCLK2Freq>
 800be48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be4a:	e010      	b.n	800be6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be4c:	4b4e      	ldr	r3, [pc, #312]	; (800bf88 <UART_SetConfig+0x5c0>)
 800be4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be50:	e00d      	b.n	800be6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be52:	f7fb fec5 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 800be56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be58:	e009      	b.n	800be6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be60:	e005      	b.n	800be6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800be62:	2300      	movs	r3, #0
 800be64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800be6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 8090 	beq.w	800bf96 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7a:	4a44      	ldr	r2, [pc, #272]	; (800bf8c <UART_SetConfig+0x5c4>)
 800be7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be80:	461a      	mov	r2, r3
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	fbb3 f3f2 	udiv	r3, r3, r2
 800be88:	005a      	lsls	r2, r3, #1
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	085b      	lsrs	r3, r3, #1
 800be90:	441a      	add	r2, r3
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	fbb2 f3f3 	udiv	r3, r2, r3
 800be9a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be9c:	6a3b      	ldr	r3, [r7, #32]
 800be9e:	2b0f      	cmp	r3, #15
 800bea0:	d916      	bls.n	800bed0 <UART_SetConfig+0x508>
 800bea2:	6a3b      	ldr	r3, [r7, #32]
 800bea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea8:	d212      	bcs.n	800bed0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800beaa:	6a3b      	ldr	r3, [r7, #32]
 800beac:	b29b      	uxth	r3, r3
 800beae:	f023 030f 	bic.w	r3, r3, #15
 800beb2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800beb4:	6a3b      	ldr	r3, [r7, #32]
 800beb6:	085b      	lsrs	r3, r3, #1
 800beb8:	b29b      	uxth	r3, r3
 800beba:	f003 0307 	and.w	r3, r3, #7
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	8bfb      	ldrh	r3, [r7, #30]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	8bfa      	ldrh	r2, [r7, #30]
 800becc:	60da      	str	r2, [r3, #12]
 800bece:	e062      	b.n	800bf96 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bed6:	e05e      	b.n	800bf96 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bedc:	2b08      	cmp	r3, #8
 800bede:	d828      	bhi.n	800bf32 <UART_SetConfig+0x56a>
 800bee0:	a201      	add	r2, pc, #4	; (adr r2, 800bee8 <UART_SetConfig+0x520>)
 800bee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee6:	bf00      	nop
 800bee8:	0800bf0d 	.word	0x0800bf0d
 800beec:	0800bf15 	.word	0x0800bf15
 800bef0:	0800bf1d 	.word	0x0800bf1d
 800bef4:	0800bf33 	.word	0x0800bf33
 800bef8:	0800bf23 	.word	0x0800bf23
 800befc:	0800bf33 	.word	0x0800bf33
 800bf00:	0800bf33 	.word	0x0800bf33
 800bf04:	0800bf33 	.word	0x0800bf33
 800bf08:	0800bf2b 	.word	0x0800bf2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf0c:	f7fb ff00 	bl	8007d10 <HAL_RCC_GetPCLK1Freq>
 800bf10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf12:	e014      	b.n	800bf3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf14:	f7fb ff12 	bl	8007d3c <HAL_RCC_GetPCLK2Freq>
 800bf18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf1a:	e010      	b.n	800bf3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf1c:	4b1a      	ldr	r3, [pc, #104]	; (800bf88 <UART_SetConfig+0x5c0>)
 800bf1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf20:	e00d      	b.n	800bf3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf22:	f7fb fe5d 	bl	8007be0 <HAL_RCC_GetSysClockFreq>
 800bf26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf28:	e009      	b.n	800bf3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf30:	e005      	b.n	800bf3e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bf32:	2300      	movs	r3, #0
 800bf34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bf3c:	bf00      	nop
    }

    if (pclk != 0U)
 800bf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d028      	beq.n	800bf96 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf48:	4a10      	ldr	r2, [pc, #64]	; (800bf8c <UART_SetConfig+0x5c4>)
 800bf4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	085b      	lsrs	r3, r3, #1
 800bf5c:	441a      	add	r2, r3
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf66:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	2b0f      	cmp	r3, #15
 800bf6c:	d910      	bls.n	800bf90 <UART_SetConfig+0x5c8>
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf74:	d20c      	bcs.n	800bf90 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	60da      	str	r2, [r3, #12]
 800bf80:	e009      	b.n	800bf96 <UART_SetConfig+0x5ce>
 800bf82:	bf00      	nop
 800bf84:	40008000 	.word	0x40008000
 800bf88:	00f42400 	.word	0x00f42400
 800bf8c:	080288c8 	.word	0x080288c8
      }
      else
      {
        ret = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bfb2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3730      	adds	r7, #48	; 0x30
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bfc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfcc:	f003 0308 	and.w	r3, r3, #8
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00a      	beq.n	800bfea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00a      	beq.n	800c00c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	430a      	orrs	r2, r1
 800c00a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c010:	f003 0302 	and.w	r3, r3, #2
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00a      	beq.n	800c02e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	430a      	orrs	r2, r1
 800c02c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c032:	f003 0304 	and.w	r3, r3, #4
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	430a      	orrs	r2, r1
 800c04e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c054:	f003 0310 	and.w	r3, r3, #16
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00a      	beq.n	800c072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	430a      	orrs	r2, r1
 800c070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c076:	f003 0320 	and.w	r3, r3, #32
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00a      	beq.n	800c094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	430a      	orrs	r2, r1
 800c092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d01a      	beq.n	800c0d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0be:	d10a      	bne.n	800c0d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00a      	beq.n	800c0f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	605a      	str	r2, [r3, #4]
  }
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b098      	sub	sp, #96	; 0x60
 800c108:	af02      	add	r7, sp, #8
 800c10a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c114:	f7f9 fb5e 	bl	80057d4 <HAL_GetTick>
 800c118:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0308 	and.w	r3, r3, #8
 800c124:	2b08      	cmp	r3, #8
 800c126:	d12f      	bne.n	800c188 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c130:	2200      	movs	r2, #0
 800c132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f88e 	bl	800c258 <UART_WaitOnFlagUntilTimeout>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d022      	beq.n	800c188 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	e853 3f00 	ldrex	r3, [r3]
 800c14e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c156:	653b      	str	r3, [r7, #80]	; 0x50
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	461a      	mov	r2, r3
 800c15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c160:	647b      	str	r3, [r7, #68]	; 0x44
 800c162:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c164:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c168:	e841 2300 	strex	r3, r2, [r1]
 800c16c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1e6      	bne.n	800c142 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2220      	movs	r2, #32
 800c178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c184:	2303      	movs	r3, #3
 800c186:	e063      	b.n	800c250 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f003 0304 	and.w	r3, r3, #4
 800c192:	2b04      	cmp	r3, #4
 800c194:	d149      	bne.n	800c22a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c196:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 f857 	bl	800c258 <UART_WaitOnFlagUntilTimeout>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d03c      	beq.n	800c22a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b8:	e853 3f00 	ldrex	r3, [r3]
 800c1bc:	623b      	str	r3, [r7, #32]
   return(result);
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ce:	633b      	str	r3, [r7, #48]	; 0x30
 800c1d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1d6:	e841 2300 	strex	r3, r2, [r1]
 800c1da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1e6      	bne.n	800c1b0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	3308      	adds	r3, #8
 800c1e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	e853 3f00 	ldrex	r3, [r3]
 800c1f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f023 0301 	bic.w	r3, r3, #1
 800c1f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	3308      	adds	r3, #8
 800c200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c202:	61fa      	str	r2, [r7, #28]
 800c204:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c206:	69b9      	ldr	r1, [r7, #24]
 800c208:	69fa      	ldr	r2, [r7, #28]
 800c20a:	e841 2300 	strex	r3, r2, [r1]
 800c20e:	617b      	str	r3, [r7, #20]
   return(result);
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1e5      	bne.n	800c1e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2220      	movs	r2, #32
 800c21a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c226:	2303      	movs	r3, #3
 800c228:	e012      	b.n	800c250 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2220      	movs	r2, #32
 800c22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2220      	movs	r2, #32
 800c236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3758      	adds	r7, #88	; 0x58
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	603b      	str	r3, [r7, #0]
 800c264:	4613      	mov	r3, r2
 800c266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c268:	e049      	b.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c270:	d045      	beq.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c272:	f7f9 faaf 	bl	80057d4 <HAL_GetTick>
 800c276:	4602      	mov	r2, r0
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d302      	bcc.n	800c288 <UART_WaitOnFlagUntilTimeout+0x30>
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d101      	bne.n	800c28c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c288:	2303      	movs	r3, #3
 800c28a:	e048      	b.n	800c31e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 0304 	and.w	r3, r3, #4
 800c296:	2b00      	cmp	r3, #0
 800c298:	d031      	beq.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	f003 0308 	and.w	r3, r3, #8
 800c2a4:	2b08      	cmp	r3, #8
 800c2a6:	d110      	bne.n	800c2ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2208      	movs	r2, #8
 800c2ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 f95b 	bl	800c56c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2208      	movs	r2, #8
 800c2ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e029      	b.n	800c31e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	69db      	ldr	r3, [r3, #28]
 800c2d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2d8:	d111      	bne.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f000 f941 	bl	800c56c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2220      	movs	r2, #32
 800c2ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c2fa:	2303      	movs	r3, #3
 800c2fc:	e00f      	b.n	800c31e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	69da      	ldr	r2, [r3, #28]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	4013      	ands	r3, r2
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	bf0c      	ite	eq
 800c30e:	2301      	moveq	r3, #1
 800c310:	2300      	movne	r3, #0
 800c312:	b2db      	uxtb	r3, r3
 800c314:	461a      	mov	r2, r3
 800c316:	79fb      	ldrb	r3, [r7, #7]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d0a6      	beq.n	800c26a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
	...

0800c328 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c328:	b480      	push	{r7}
 800c32a:	b0a3      	sub	sp, #140	; 0x8c
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	4613      	mov	r3, r2
 800c334:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	88fa      	ldrh	r2, [r7, #6]
 800c340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	88fa      	ldrh	r2, [r7, #6]
 800c348:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c35a:	d10e      	bne.n	800c37a <UART_Start_Receive_IT+0x52>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d105      	bne.n	800c370 <UART_Start_Receive_IT+0x48>
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c36a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c36e:	e02d      	b.n	800c3cc <UART_Start_Receive_IT+0xa4>
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	22ff      	movs	r2, #255	; 0xff
 800c374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c378:	e028      	b.n	800c3cc <UART_Start_Receive_IT+0xa4>
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10d      	bne.n	800c39e <UART_Start_Receive_IT+0x76>
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d104      	bne.n	800c394 <UART_Start_Receive_IT+0x6c>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	22ff      	movs	r2, #255	; 0xff
 800c38e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c392:	e01b      	b.n	800c3cc <UART_Start_Receive_IT+0xa4>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	227f      	movs	r2, #127	; 0x7f
 800c398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c39c:	e016      	b.n	800c3cc <UART_Start_Receive_IT+0xa4>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3a6:	d10d      	bne.n	800c3c4 <UART_Start_Receive_IT+0x9c>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d104      	bne.n	800c3ba <UART_Start_Receive_IT+0x92>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	227f      	movs	r2, #127	; 0x7f
 800c3b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c3b8:	e008      	b.n	800c3cc <UART_Start_Receive_IT+0xa4>
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	223f      	movs	r2, #63	; 0x3f
 800c3be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c3c2:	e003      	b.n	800c3cc <UART_Start_Receive_IT+0xa4>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2222      	movs	r2, #34	; 0x22
 800c3d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3308      	adds	r3, #8
 800c3e2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3e6:	e853 3f00 	ldrex	r3, [r3]
 800c3ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c3ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3ee:	f043 0301 	orr.w	r3, r3, #1
 800c3f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c400:	673a      	str	r2, [r7, #112]	; 0x70
 800c402:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c406:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c40e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e3      	bne.n	800c3dc <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c41c:	d14f      	bne.n	800c4be <UART_Start_Receive_IT+0x196>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c424:	88fa      	ldrh	r2, [r7, #6]
 800c426:	429a      	cmp	r2, r3
 800c428:	d349      	bcc.n	800c4be <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c432:	d107      	bne.n	800c444 <UART_Start_Receive_IT+0x11c>
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d103      	bne.n	800c444 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	4a47      	ldr	r2, [pc, #284]	; (800c55c <UART_Start_Receive_IT+0x234>)
 800c440:	675a      	str	r2, [r3, #116]	; 0x74
 800c442:	e002      	b.n	800c44a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	4a46      	ldr	r2, [pc, #280]	; (800c560 <UART_Start_Receive_IT+0x238>)
 800c448:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d01a      	beq.n	800c488 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c45a:	e853 3f00 	ldrex	r3, [r3]
 800c45e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c474:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c476:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c478:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c47a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c47c:	e841 2300 	strex	r3, r2, [r1]
 800c480:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e4      	bne.n	800c452 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3308      	adds	r3, #8
 800c48e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c492:	e853 3f00 	ldrex	r3, [r3]
 800c496:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c49e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3308      	adds	r3, #8
 800c4a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c4a8:	64ba      	str	r2, [r7, #72]	; 0x48
 800c4aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c4ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4b0:	e841 2300 	strex	r3, r2, [r1]
 800c4b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1e5      	bne.n	800c488 <UART_Start_Receive_IT+0x160>
 800c4bc:	e046      	b.n	800c54c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4c6:	d107      	bne.n	800c4d8 <UART_Start_Receive_IT+0x1b0>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d103      	bne.n	800c4d8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4a24      	ldr	r2, [pc, #144]	; (800c564 <UART_Start_Receive_IT+0x23c>)
 800c4d4:	675a      	str	r2, [r3, #116]	; 0x74
 800c4d6:	e002      	b.n	800c4de <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4a23      	ldr	r2, [pc, #140]	; (800c568 <UART_Start_Receive_IT+0x240>)
 800c4dc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d019      	beq.n	800c51a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ee:	e853 3f00 	ldrex	r3, [r3]
 800c4f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c4fa:	677b      	str	r3, [r7, #116]	; 0x74
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	461a      	mov	r2, r3
 800c502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c504:	637b      	str	r3, [r7, #52]	; 0x34
 800c506:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c50a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c50c:	e841 2300 	strex	r3, r2, [r1]
 800c510:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e6      	bne.n	800c4e6 <UART_Start_Receive_IT+0x1be>
 800c518:	e018      	b.n	800c54c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	e853 3f00 	ldrex	r3, [r3]
 800c526:	613b      	str	r3, [r7, #16]
   return(result);
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f043 0320 	orr.w	r3, r3, #32
 800c52e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	461a      	mov	r2, r3
 800c536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c538:	623b      	str	r3, [r7, #32]
 800c53a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	69f9      	ldr	r1, [r7, #28]
 800c53e:	6a3a      	ldr	r2, [r7, #32]
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	61bb      	str	r3, [r7, #24]
   return(result);
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e6      	bne.n	800c51a <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	378c      	adds	r7, #140	; 0x8c
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	0800d0e1 	.word	0x0800d0e1
 800c560:	0800cd7d 	.word	0x0800cd7d
 800c564:	0800cbc1 	.word	0x0800cbc1
 800c568:	0800ca05 	.word	0x0800ca05

0800c56c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b095      	sub	sp, #84	; 0x54
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57c:	e853 3f00 	ldrex	r3, [r3]
 800c580:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	461a      	mov	r2, r3
 800c590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c592:	643b      	str	r3, [r7, #64]	; 0x40
 800c594:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c596:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c59a:	e841 2300 	strex	r3, r2, [r1]
 800c59e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1e6      	bne.n	800c574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ae:	6a3b      	ldr	r3, [r7, #32]
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5bc:	f023 0301 	bic.w	r3, r3, #1
 800c5c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	3308      	adds	r3, #8
 800c5c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5d2:	e841 2300 	strex	r3, r2, [r1]
 800c5d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1e3      	bne.n	800c5a6 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d118      	bne.n	800c618 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	e853 3f00 	ldrex	r3, [r3]
 800c5f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	f023 0310 	bic.w	r3, r3, #16
 800c5fa:	647b      	str	r3, [r7, #68]	; 0x44
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	461a      	mov	r2, r3
 800c602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c604:	61bb      	str	r3, [r7, #24]
 800c606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c608:	6979      	ldr	r1, [r7, #20]
 800c60a:	69ba      	ldr	r2, [r7, #24]
 800c60c:	e841 2300 	strex	r3, r2, [r1]
 800c610:	613b      	str	r3, [r7, #16]
   return(result);
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1e6      	bne.n	800c5e6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2220      	movs	r2, #32
 800c61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c62c:	bf00      	nop
 800c62e:	3754      	adds	r7, #84	; 0x54
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c644:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2200      	movs	r2, #0
 800c64a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2200      	movs	r2, #0
 800c652:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f7ff f9a0 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c65c:	bf00      	nop
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c664:	b480      	push	{r7}
 800c666:	b08f      	sub	sp, #60	; 0x3c
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c672:	2b21      	cmp	r3, #33	; 0x21
 800c674:	d14d      	bne.n	800c712 <UART_TxISR_8BIT+0xae>
  {
    if (huart->TxXferCount == 0U)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d132      	bne.n	800c6e8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	e853 3f00 	ldrex	r3, [r3]
 800c68e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c696:	637b      	str	r3, [r7, #52]	; 0x34
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	461a      	mov	r2, r3
 800c69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6a8:	e841 2300 	strex	r3, r2, [r1]
 800c6ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1e6      	bne.n	800c682 <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6c8:	633b      	str	r3, [r7, #48]	; 0x30
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	61bb      	str	r3, [r7, #24]
 800c6d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d6:	6979      	ldr	r1, [r7, #20]
 800c6d8:	69ba      	ldr	r2, [r7, #24]
 800c6da:	e841 2300 	strex	r3, r2, [r1]
 800c6de:	613b      	str	r3, [r7, #16]
   return(result);
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1e6      	bne.n	800c6b4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c6e6:	e014      	b.n	800c712 <UART_TxISR_8BIT+0xae>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6ec:	781a      	ldrb	r2, [r3, #0]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	b292      	uxth	r2, r2
 800c6f4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6fa:	1c5a      	adds	r2, r3, #1
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c706:	b29b      	uxth	r3, r3
 800c708:	3b01      	subs	r3, #1
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c712:	bf00      	nop
 800c714:	373c      	adds	r7, #60	; 0x3c
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c71e:	b480      	push	{r7}
 800c720:	b091      	sub	sp, #68	; 0x44
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c72c:	2b21      	cmp	r3, #33	; 0x21
 800c72e:	d151      	bne.n	800c7d4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c736:	b29b      	uxth	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d132      	bne.n	800c7a2 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c744:	e853 3f00 	ldrex	r3, [r3]
 800c748:	623b      	str	r3, [r7, #32]
   return(result);
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c750:	63bb      	str	r3, [r7, #56]	; 0x38
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	633b      	str	r3, [r7, #48]	; 0x30
 800c75c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c762:	e841 2300 	strex	r3, r2, [r1]
 800c766:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1e6      	bne.n	800c73c <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	e853 3f00 	ldrex	r3, [r3]
 800c77a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c782:	637b      	str	r3, [r7, #52]	; 0x34
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	461a      	mov	r2, r3
 800c78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c78c:	61fb      	str	r3, [r7, #28]
 800c78e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c790:	69b9      	ldr	r1, [r7, #24]
 800c792:	69fa      	ldr	r2, [r7, #28]
 800c794:	e841 2300 	strex	r3, r2, [r1]
 800c798:	617b      	str	r3, [r7, #20]
   return(result);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1e6      	bne.n	800c76e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c7a0:	e018      	b.n	800c7d4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7aa:	881a      	ldrh	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7b4:	b292      	uxth	r2, r2
 800c7b6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7bc:	1c9a      	adds	r2, r3, #2
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c7d4:	bf00      	nop
 800c7d6:	3744      	adds	r7, #68	; 0x44
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b091      	sub	sp, #68	; 0x44
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ee:	2b21      	cmp	r3, #33	; 0x21
 800c7f0:	d161      	bne.n	800c8b6 <UART_TxISR_8BIT_FIFOEN+0xd6>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c7fa:	e058      	b.n	800c8ae <UART_TxISR_8BIT_FIFOEN+0xce>
    {
      if (huart->TxXferCount == 0U)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c802:	b29b      	uxth	r3, r3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d133      	bne.n	800c870 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	3308      	adds	r3, #8
 800c80e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	e853 3f00 	ldrex	r3, [r3]
 800c816:	623b      	str	r3, [r7, #32]
   return(result);
 800c818:	6a3b      	ldr	r3, [r7, #32]
 800c81a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c81e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3308      	adds	r3, #8
 800c826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c828:	633a      	str	r2, [r7, #48]	; 0x30
 800c82a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c830:	e841 2300 	strex	r3, r2, [r1]
 800c834:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1e5      	bne.n	800c808 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	e853 3f00 	ldrex	r3, [r3]
 800c848:	60fb      	str	r3, [r7, #12]
   return(result);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c850:	637b      	str	r3, [r7, #52]	; 0x34
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85a:	61fb      	str	r3, [r7, #28]
 800c85c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85e:	69b9      	ldr	r1, [r7, #24]
 800c860:	69fa      	ldr	r2, [r7, #28]
 800c862:	e841 2300 	strex	r3, r2, [r1]
 800c866:	617b      	str	r3, [r7, #20]
   return(result);
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1e6      	bne.n	800c83c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c86e:	e022      	b.n	800c8b6 <UART_TxISR_8BIT_FIFOEN+0xd6>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	69db      	ldr	r3, [r3, #28]
 800c876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d014      	beq.n	800c8a8 <UART_TxISR_8BIT_FIFOEN+0xc8>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	b292      	uxth	r2, r2
 800c88a:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c8a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c8ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1a3      	bne.n	800c7fc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c8b4:	e7ff      	b.n	800c8b6 <UART_TxISR_8BIT_FIFOEN+0xd6>
 800c8b6:	bf00      	nop
 800c8b8:	3744      	adds	r7, #68	; 0x44
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c8c2:	b480      	push	{r7}
 800c8c4:	b091      	sub	sp, #68	; 0x44
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8d0:	2b21      	cmp	r3, #33	; 0x21
 800c8d2:	d165      	bne.n	800c9a0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c8da:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c8dc:	e05c      	b.n	800c998 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d133      	bne.n	800c952 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	e853 3f00 	ldrex	r3, [r3]
 800c8f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c900:	637b      	str	r3, [r7, #52]	; 0x34
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	3308      	adds	r3, #8
 800c908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c90a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c90c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c912:	e841 2300 	strex	r3, r2, [r1]
 800c916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e5      	bne.n	800c8ea <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	e853 3f00 	ldrex	r3, [r3]
 800c92a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c932:	633b      	str	r3, [r7, #48]	; 0x30
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	461a      	mov	r2, r3
 800c93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93c:	61bb      	str	r3, [r7, #24]
 800c93e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c940:	6979      	ldr	r1, [r7, #20]
 800c942:	69ba      	ldr	r2, [r7, #24]
 800c944:	e841 2300 	strex	r3, r2, [r1]
 800c948:	613b      	str	r3, [r7, #16]
   return(result);
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d1e6      	bne.n	800c91e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c950:	e026      	b.n	800c9a0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	69db      	ldr	r3, [r3, #28]
 800c958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d018      	beq.n	800c992 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c964:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c968:	881a      	ldrh	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c972:	b292      	uxth	r2, r2
 800c974:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c97a:	1c9a      	adds	r2, r3, #2
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c986:	b29b      	uxth	r3, r3
 800c988:	3b01      	subs	r3, #1
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c992:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c994:	3b01      	subs	r3, #1
 800c996:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c998:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d19f      	bne.n	800c8de <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c99e:	e7ff      	b.n	800c9a0 <UART_TxISR_16BIT_FIFOEN+0xde>
 800c9a0:	bf00      	nop
 800c9a2:	3744      	adds	r7, #68	; 0x44
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b088      	sub	sp, #32
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	e853 3f00 	ldrex	r3, [r3]
 800c9c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9c8:	61fb      	str	r3, [r7, #28]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	61bb      	str	r3, [r7, #24]
 800c9d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d6:	6979      	ldr	r1, [r7, #20]
 800c9d8:	69ba      	ldr	r2, [r7, #24]
 800c9da:	e841 2300 	strex	r3, r2, [r1]
 800c9de:	613b      	str	r3, [r7, #16]
   return(result);
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1e6      	bne.n	800c9b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2220      	movs	r2, #32
 800c9ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7fe ffc7 	bl	800b988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9fa:	bf00      	nop
 800c9fc:	3720      	adds	r7, #32
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
	...

0800ca04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b09c      	sub	sp, #112	; 0x70
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca12:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca1c:	2b22      	cmp	r3, #34	; 0x22
 800ca1e:	f040 80be 	bne.w	800cb9e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ca28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ca30:	b2d9      	uxtb	r1, r3
 800ca32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca3c:	400a      	ands	r2, r1
 800ca3e:	b2d2      	uxtb	r2, r2
 800ca40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca46:	1c5a      	adds	r2, r3, #1
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	3b01      	subs	r3, #1
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f040 80a3 	bne.w	800cbb2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca74:	e853 3f00 	ldrex	r3, [r3]
 800ca78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca80:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	461a      	mov	r2, r3
 800ca88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca92:	e841 2300 	strex	r3, r2, [r1]
 800ca96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1e6      	bne.n	800ca6c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	3308      	adds	r3, #8
 800caa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa8:	e853 3f00 	ldrex	r3, [r3]
 800caac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800caae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab0:	f023 0301 	bic.w	r3, r3, #1
 800cab4:	667b      	str	r3, [r7, #100]	; 0x64
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	3308      	adds	r3, #8
 800cabc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cabe:	647a      	str	r2, [r7, #68]	; 0x44
 800cac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cac6:	e841 2300 	strex	r3, r2, [r1]
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cacc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1e5      	bne.n	800ca9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2220      	movs	r2, #32
 800cad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a34      	ldr	r2, [pc, #208]	; (800cbbc <UART_RxISR_8BIT+0x1b8>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d01f      	beq.n	800cb30 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d018      	beq.n	800cb30 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	e853 3f00 	ldrex	r3, [r3]
 800cb0a:	623b      	str	r3, [r7, #32]
   return(result);
 800cb0c:	6a3b      	ldr	r3, [r7, #32]
 800cb0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb12:	663b      	str	r3, [r7, #96]	; 0x60
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb1c:	633b      	str	r3, [r7, #48]	; 0x30
 800cb1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb24:	e841 2300 	strex	r3, r2, [r1]
 800cb28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1e6      	bne.n	800cafe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d12e      	bne.n	800cb96 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	e853 3f00 	ldrex	r3, [r3]
 800cb4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f023 0310 	bic.w	r3, r3, #16
 800cb52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb5c:	61fb      	str	r3, [r7, #28]
 800cb5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb60:	69b9      	ldr	r1, [r7, #24]
 800cb62:	69fa      	ldr	r2, [r7, #28]
 800cb64:	e841 2300 	strex	r3, r2, [r1]
 800cb68:	617b      	str	r3, [r7, #20]
   return(result);
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1e6      	bne.n	800cb3e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	69db      	ldr	r3, [r3, #28]
 800cb76:	f003 0310 	and.w	r3, r3, #16
 800cb7a:	2b10      	cmp	r3, #16
 800cb7c:	d103      	bne.n	800cb86 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2210      	movs	r2, #16
 800cb84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7fe ff0e 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb94:	e00d      	b.n	800cbb2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7f7 f8fe 	bl	8003d98 <HAL_UART_RxCpltCallback>
}
 800cb9c:	e009      	b.n	800cbb2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	8b1b      	ldrh	r3, [r3, #24]
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f042 0208 	orr.w	r2, r2, #8
 800cbae:	b292      	uxth	r2, r2
 800cbb0:	831a      	strh	r2, [r3, #24]
}
 800cbb2:	bf00      	nop
 800cbb4:	3770      	adds	r7, #112	; 0x70
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	40008000 	.word	0x40008000

0800cbc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b09c      	sub	sp, #112	; 0x70
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbd8:	2b22      	cmp	r3, #34	; 0x22
 800cbda:	f040 80be 	bne.w	800cd5a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cbe4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbec:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cbee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800cbf2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cbf6:	4013      	ands	r3, r2
 800cbf8:	b29a      	uxth	r2, r3
 800cbfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbfc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc02:	1c9a      	adds	r2, r3, #2
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	3b01      	subs	r3, #1
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f040 80a3 	bne.w	800cd6e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc30:	e853 3f00 	ldrex	r3, [r3]
 800cc34:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cc36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc3c:	667b      	str	r3, [r7, #100]	; 0x64
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	461a      	mov	r2, r3
 800cc44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc46:	657b      	str	r3, [r7, #84]	; 0x54
 800cc48:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc4e:	e841 2300 	strex	r3, r2, [r1]
 800cc52:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d1e6      	bne.n	800cc28 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3308      	adds	r3, #8
 800cc60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc64:	e853 3f00 	ldrex	r3, [r3]
 800cc68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	f023 0301 	bic.w	r3, r3, #1
 800cc70:	663b      	str	r3, [r7, #96]	; 0x60
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3308      	adds	r3, #8
 800cc78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc7a:	643a      	str	r2, [r7, #64]	; 0x40
 800cc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc82:	e841 2300 	strex	r3, r2, [r1]
 800cc86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1e5      	bne.n	800cc5a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2220      	movs	r2, #32
 800cc92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a34      	ldr	r2, [pc, #208]	; (800cd78 <UART_RxISR_16BIT+0x1b8>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d01f      	beq.n	800ccec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d018      	beq.n	800ccec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc0:	6a3b      	ldr	r3, [r7, #32]
 800ccc2:	e853 3f00 	ldrex	r3, [r3]
 800ccc6:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccda:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cce0:	e841 2300 	strex	r3, r2, [r1]
 800cce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1e6      	bne.n	800ccba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d12e      	bne.n	800cd52 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	e853 3f00 	ldrex	r3, [r3]
 800cd06:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	f023 0310 	bic.w	r3, r3, #16
 800cd0e:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	461a      	mov	r2, r3
 800cd16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd18:	61bb      	str	r3, [r7, #24]
 800cd1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1c:	6979      	ldr	r1, [r7, #20]
 800cd1e:	69ba      	ldr	r2, [r7, #24]
 800cd20:	e841 2300 	strex	r3, r2, [r1]
 800cd24:	613b      	str	r3, [r7, #16]
   return(result);
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1e6      	bne.n	800ccfa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	69db      	ldr	r3, [r3, #28]
 800cd32:	f003 0310 	and.w	r3, r3, #16
 800cd36:	2b10      	cmp	r3, #16
 800cd38:	d103      	bne.n	800cd42 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2210      	movs	r2, #16
 800cd40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7fe fe30 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd50:	e00d      	b.n	800cd6e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7f7 f820 	bl	8003d98 <HAL_UART_RxCpltCallback>
}
 800cd58:	e009      	b.n	800cd6e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	8b1b      	ldrh	r3, [r3, #24]
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f042 0208 	orr.w	r2, r2, #8
 800cd6a:	b292      	uxth	r2, r2
 800cd6c:	831a      	strh	r2, [r3, #24]
}
 800cd6e:	bf00      	nop
 800cd70:	3770      	adds	r7, #112	; 0x70
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	40008000 	.word	0x40008000

0800cd7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b0ac      	sub	sp, #176	; 0xb0
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	69db      	ldr	r3, [r3, #28]
 800cd94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdb2:	2b22      	cmp	r3, #34	; 0x22
 800cdb4:	f040 8182 	bne.w	800d0bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cdbe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cdc2:	e125      	b.n	800d010 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cdca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cdce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cdd2:	b2d9      	uxtb	r1, r3
 800cdd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdde:	400a      	ands	r2, r1
 800cde0:	b2d2      	uxtb	r2, r2
 800cde2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde8:	1c5a      	adds	r2, r3, #1
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	69db      	ldr	r3, [r3, #28]
 800ce06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ce0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce0e:	f003 0307 	and.w	r3, r3, #7
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d053      	beq.n	800cebe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce1a:	f003 0301 	and.w	r3, r3, #1
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d011      	beq.n	800ce46 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ce22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ce26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00b      	beq.n	800ce46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2201      	movs	r2, #1
 800ce34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce3c:	f043 0201 	orr.w	r2, r3, #1
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce4a:	f003 0302 	and.w	r3, r3, #2
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d011      	beq.n	800ce76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ce52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce56:	f003 0301 	and.w	r3, r3, #1
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00b      	beq.n	800ce76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2202      	movs	r2, #2
 800ce64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce6c:	f043 0204 	orr.w	r2, r3, #4
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce7a:	f003 0304 	and.w	r3, r3, #4
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d011      	beq.n	800cea6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ce82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce86:	f003 0301 	and.w	r3, r3, #1
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00b      	beq.n	800cea6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2204      	movs	r2, #4
 800ce94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce9c:	f043 0202 	orr.w	r2, r3, #2
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d006      	beq.n	800cebe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7fe fd73 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f040 80a2 	bne.w	800d010 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ced4:	e853 3f00 	ldrex	r3, [r3]
 800ced8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800ceda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	461a      	mov	r2, r3
 800ceea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ceee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cef0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cef4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cef6:	e841 2300 	strex	r3, r2, [r1]
 800cefa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800cefc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1e4      	bne.n	800cecc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	3308      	adds	r3, #8
 800cf08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf0c:	e853 3f00 	ldrex	r3, [r3]
 800cf10:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cf12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf18:	f023 0301 	bic.w	r3, r3, #1
 800cf1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	3308      	adds	r3, #8
 800cf26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf2a:	66ba      	str	r2, [r7, #104]	; 0x68
 800cf2c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf2e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cf30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf32:	e841 2300 	strex	r3, r2, [r1]
 800cf36:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cf38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1e1      	bne.n	800cf02 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2220      	movs	r2, #32
 800cf42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a60      	ldr	r2, [pc, #384]	; (800d0d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d021      	beq.n	800cfa0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d01a      	beq.n	800cfa0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf72:	e853 3f00 	ldrex	r3, [r3]
 800cf76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cf78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf8c:	657b      	str	r3, [r7, #84]	; 0x54
 800cf8e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf94:	e841 2300 	strex	r3, r2, [r1]
 800cf98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cf9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1e4      	bne.n	800cf6a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d130      	bne.n	800d00a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb6:	e853 3f00 	ldrex	r3, [r3]
 800cfba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbe:	f023 0310 	bic.w	r3, r3, #16
 800cfc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cfd0:	643b      	str	r3, [r7, #64]	; 0x40
 800cfd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfd8:	e841 2300 	strex	r3, r2, [r1]
 800cfdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1e4      	bne.n	800cfae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	69db      	ldr	r3, [r3, #28]
 800cfea:	f003 0310 	and.w	r3, r3, #16
 800cfee:	2b10      	cmp	r3, #16
 800cff0:	d103      	bne.n	800cffa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2210      	movs	r2, #16
 800cff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7fe fcd4 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
 800d008:	e002      	b.n	800d010 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7f6 fec4 	bl	8003d98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d010:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d014:	2b00      	cmp	r3, #0
 800d016:	d006      	beq.n	800d026 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800d018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d01c:	f003 0320 	and.w	r3, r3, #32
 800d020:	2b00      	cmp	r3, #0
 800d022:	f47f aecf 	bne.w	800cdc4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d02c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d030:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d034:	2b00      	cmp	r3, #0
 800d036:	d04b      	beq.n	800d0d0 <UART_RxISR_8BIT_FIFOEN+0x354>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d03e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d042:	429a      	cmp	r2, r3
 800d044:	d244      	bcs.n	800d0d0 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3308      	adds	r3, #8
 800d04c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	e853 3f00 	ldrex	r3, [r3]
 800d054:	61fb      	str	r3, [r7, #28]
   return(result);
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d05c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3308      	adds	r3, #8
 800d066:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d06a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d06c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d072:	e841 2300 	strex	r3, r2, [r1]
 800d076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1e3      	bne.n	800d046 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a16      	ldr	r2, [pc, #88]	; (800d0dc <UART_RxISR_8BIT_FIFOEN+0x360>)
 800d082:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	e853 3f00 	ldrex	r3, [r3]
 800d090:	60bb      	str	r3, [r7, #8]
   return(result);
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	f043 0320 	orr.w	r3, r3, #32
 800d098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d0a6:	61bb      	str	r3, [r7, #24]
 800d0a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0aa:	6979      	ldr	r1, [r7, #20]
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	e841 2300 	strex	r3, r2, [r1]
 800d0b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1e4      	bne.n	800d084 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0ba:	e009      	b.n	800d0d0 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	8b1b      	ldrh	r3, [r3, #24]
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f042 0208 	orr.w	r2, r2, #8
 800d0cc:	b292      	uxth	r2, r2
 800d0ce:	831a      	strh	r2, [r3, #24]
}
 800d0d0:	bf00      	nop
 800d0d2:	37b0      	adds	r7, #176	; 0xb0
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	40008000 	.word	0x40008000
 800d0dc:	0800ca05 	.word	0x0800ca05

0800d0e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b0ae      	sub	sp, #184	; 0xb8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	69db      	ldr	r3, [r3, #28]
 800d0f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	689b      	ldr	r3, [r3, #8]
 800d10c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d116:	2b22      	cmp	r3, #34	; 0x22
 800d118:	f040 8186 	bne.w	800d428 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d122:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d126:	e129      	b.n	800d37c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d12e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d13a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d13e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d142:	4013      	ands	r3, r2
 800d144:	b29a      	uxth	r2, r3
 800d146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d14a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d150:	1c9a      	adds	r2, r3, #2
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	3b01      	subs	r3, #1
 800d160:	b29a      	uxth	r2, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	69db      	ldr	r3, [r3, #28]
 800d16e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d172:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d176:	f003 0307 	and.w	r3, r3, #7
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d053      	beq.n	800d226 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d17e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d182:	f003 0301 	and.w	r3, r3, #1
 800d186:	2b00      	cmp	r3, #0
 800d188:	d011      	beq.n	800d1ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800d18a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00b      	beq.n	800d1ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2201      	movs	r2, #1
 800d19c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1a4:	f043 0201 	orr.w	r2, r3, #1
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1b2:	f003 0302 	and.w	r3, r3, #2
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d011      	beq.n	800d1de <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d1ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00b      	beq.n	800d1de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2202      	movs	r2, #2
 800d1cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1d4:	f043 0204 	orr.w	r2, r3, #4
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1e2:	f003 0304 	and.w	r3, r3, #4
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d011      	beq.n	800d20e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d1ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d1ee:	f003 0301 	and.w	r3, r3, #1
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00b      	beq.n	800d20e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2204      	movs	r2, #4
 800d1fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d204:	f043 0202 	orr.w	r2, r3, #2
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d214:	2b00      	cmp	r3, #0
 800d216:	d006      	beq.n	800d226 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7fe fbbf 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f040 80a4 	bne.w	800d37c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d23c:	e853 3f00 	ldrex	r3, [r3]
 800d240:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	461a      	mov	r2, r3
 800d252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d25a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d25e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d262:	e841 2300 	strex	r3, r2, [r1]
 800d266:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1e2      	bne.n	800d234 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3308      	adds	r3, #8
 800d274:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d278:	e853 3f00 	ldrex	r3, [r3]
 800d27c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d27e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d284:	f023 0301 	bic.w	r3, r3, #1
 800d288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3308      	adds	r3, #8
 800d292:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d296:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d298:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d29c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d29e:	e841 2300 	strex	r3, r2, [r1]
 800d2a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d2a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d1e1      	bne.n	800d26e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2220      	movs	r2, #32
 800d2ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a60      	ldr	r2, [pc, #384]	; (800d444 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d021      	beq.n	800d30c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d01a      	beq.n	800d30c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2de:	e853 3f00 	ldrex	r3, [r3]
 800d2e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d300:	e841 2300 	strex	r3, r2, [r1]
 800d304:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1e4      	bne.n	800d2d6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d310:	2b01      	cmp	r3, #1
 800d312:	d130      	bne.n	800d376 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d322:	e853 3f00 	ldrex	r3, [r3]
 800d326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32a:	f023 0310 	bic.w	r3, r3, #16
 800d32e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d33c:	647b      	str	r3, [r7, #68]	; 0x44
 800d33e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d344:	e841 2300 	strex	r3, r2, [r1]
 800d348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1e4      	bne.n	800d31a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	69db      	ldr	r3, [r3, #28]
 800d356:	f003 0310 	and.w	r3, r3, #16
 800d35a:	2b10      	cmp	r3, #16
 800d35c:	d103      	bne.n	800d366 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2210      	movs	r2, #16
 800d364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d36c:	4619      	mov	r1, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7fe fb1e 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
 800d374:	e002      	b.n	800d37c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7f6 fd0e 	bl	8003d98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d37c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d380:	2b00      	cmp	r3, #0
 800d382:	d006      	beq.n	800d392 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800d384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d388:	f003 0320 	and.w	r3, r3, #32
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f47f aecb 	bne.w	800d128 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d398:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d39c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d04b      	beq.n	800d43c <UART_RxISR_16BIT_FIFOEN+0x35c>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d244      	bcs.n	800d43c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3308      	adds	r3, #8
 800d3b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3bc:	e853 3f00 	ldrex	r3, [r3]
 800d3c0:	623b      	str	r3, [r7, #32]
   return(result);
 800d3c2:	6a3b      	ldr	r3, [r7, #32]
 800d3c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d3d6:	633a      	str	r2, [r7, #48]	; 0x30
 800d3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3de:	e841 2300 	strex	r3, r2, [r1]
 800d3e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d1e3      	bne.n	800d3b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a16      	ldr	r2, [pc, #88]	; (800d448 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800d3ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	e853 3f00 	ldrex	r3, [r3]
 800d3fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f043 0320 	orr.w	r3, r3, #32
 800d404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	461a      	mov	r2, r3
 800d40e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d412:	61fb      	str	r3, [r7, #28]
 800d414:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d416:	69b9      	ldr	r1, [r7, #24]
 800d418:	69fa      	ldr	r2, [r7, #28]
 800d41a:	e841 2300 	strex	r3, r2, [r1]
 800d41e:	617b      	str	r3, [r7, #20]
   return(result);
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1e4      	bne.n	800d3f0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d426:	e009      	b.n	800d43c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	8b1b      	ldrh	r3, [r3, #24]
 800d42e:	b29a      	uxth	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f042 0208 	orr.w	r2, r2, #8
 800d438:	b292      	uxth	r2, r2
 800d43a:	831a      	strh	r2, [r3, #24]
}
 800d43c:	bf00      	nop
 800d43e:	37b8      	adds	r7, #184	; 0xb8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	40008000 	.word	0x40008000
 800d448:	0800cbc1 	.word	0x0800cbc1

0800d44c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d454:	bf00      	nop
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d468:	bf00      	nop
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d496:	2b01      	cmp	r3, #1
 800d498:	d101      	bne.n	800d49e <HAL_UARTEx_EnableFifoMode+0x16>
 800d49a:	2302      	movs	r3, #2
 800d49c:	e02b      	b.n	800d4f6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2224      	movs	r2, #36	; 0x24
 800d4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f022 0201 	bic.w	r2, r2, #1
 800d4c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d4d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f8c2 	bl	800d668 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2220      	movs	r2, #32
 800d4e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3710      	adds	r7, #16
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d4fe:	b480      	push	{r7}
 800d500:	b085      	sub	sp, #20
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d101      	bne.n	800d514 <HAL_UARTEx_DisableFifoMode+0x16>
 800d510:	2302      	movs	r3, #2
 800d512:	e027      	b.n	800d564 <HAL_UARTEx_DisableFifoMode+0x66>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2224      	movs	r2, #36	; 0x24
 800d520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f022 0201 	bic.w	r2, r2, #1
 800d53a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d542:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2220      	movs	r2, #32
 800d556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	3714      	adds	r7, #20
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d580:	2b01      	cmp	r3, #1
 800d582:	d101      	bne.n	800d588 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d584:	2302      	movs	r3, #2
 800d586:	e02d      	b.n	800d5e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2224      	movs	r2, #36	; 0x24
 800d594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f022 0201 	bic.w	r2, r2, #1
 800d5ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	430a      	orrs	r2, r1
 800d5c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f84f 	bl	800d668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68fa      	ldr	r2, [r7, #12]
 800d5d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d101      	bne.n	800d604 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d600:	2302      	movs	r3, #2
 800d602:	e02d      	b.n	800d660 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2224      	movs	r2, #36	; 0x24
 800d610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f022 0201 	bic.w	r2, r2, #1
 800d62a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	430a      	orrs	r2, r1
 800d63e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 f811 	bl	800d668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2220      	movs	r2, #32
 800d652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d674:	2b00      	cmp	r3, #0
 800d676:	d108      	bne.n	800d68a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d688:	e031      	b.n	800d6ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d68a:	2308      	movs	r3, #8
 800d68c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d68e:	2308      	movs	r3, #8
 800d690:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	0e5b      	lsrs	r3, r3, #25
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	f003 0307 	and.w	r3, r3, #7
 800d6a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	0f5b      	lsrs	r3, r3, #29
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	f003 0307 	and.w	r3, r3, #7
 800d6b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d6b2:	7bbb      	ldrb	r3, [r7, #14]
 800d6b4:	7b3a      	ldrb	r2, [r7, #12]
 800d6b6:	4911      	ldr	r1, [pc, #68]	; (800d6fc <UARTEx_SetNbDataToProcess+0x94>)
 800d6b8:	5c8a      	ldrb	r2, [r1, r2]
 800d6ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d6be:	7b3a      	ldrb	r2, [r7, #12]
 800d6c0:	490f      	ldr	r1, [pc, #60]	; (800d700 <UARTEx_SetNbDataToProcess+0x98>)
 800d6c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d6c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
 800d6d2:	7b7a      	ldrb	r2, [r7, #13]
 800d6d4:	4909      	ldr	r1, [pc, #36]	; (800d6fc <UARTEx_SetNbDataToProcess+0x94>)
 800d6d6:	5c8a      	ldrb	r2, [r1, r2]
 800d6d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d6dc:	7b7a      	ldrb	r2, [r7, #13]
 800d6de:	4908      	ldr	r1, [pc, #32]	; (800d700 <UARTEx_SetNbDataToProcess+0x98>)
 800d6e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d6ee:	bf00      	nop
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	080288e0 	.word	0x080288e0
 800d700:	080288e8 	.word	0x080288e8

0800d704 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800d708:	f003 ff70 	bl	80115ec <touchgfx_components_init>
  touchgfx_init();
 800d70c:	f003 ff44 	bl	8011598 <touchgfx_init>
}
 800d710:	bf00      	nop
 800d712:	bd80      	pop	{r7, pc}

0800d714 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800d718:	f003 ff70 	bl	80115fc <touchgfx_taskEntry>
}
 800d71c:	bf00      	nop
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
    {
 800d728:	4a04      	ldr	r2, [pc, #16]	; (800d73c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	601a      	str	r2, [r3, #0]
    }
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	0802890c 	.word	0x0802890c

0800d740 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
    }
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f7ff ffe9 	bl	800d720 <_ZN8touchgfx12FontProviderD1Ev>
 800d74e:	2104      	movs	r1, #4
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f018 ff48 	bl	80265e6 <_ZdlPvj>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4618      	mov	r0, r3
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	460b      	mov	r3, r1
 800d76a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d76c:	887b      	ldrh	r3, [r7, #2]
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d010      	beq.n	800d794 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800d772:	2b02      	cmp	r3, #2
 800d774:	dc13      	bgt.n	800d79e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800d776:	2b00      	cmp	r3, #0
 800d778:	d002      	beq.n	800d780 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d005      	beq.n	800d78a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800d77e:	e00e      	b.n	800d79e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d780:	f002 fd32 	bl	80101e8 <_ZN17TypedTextDatabase8getFontsEv>
 800d784:	4603      	mov	r3, r0
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	e00a      	b.n	800d7a0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d78a:	f002 fd2d 	bl	80101e8 <_ZN17TypedTextDatabase8getFontsEv>
 800d78e:	4603      	mov	r3, r0
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	e005      	b.n	800d7a0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d794:	f002 fd28 	bl	80101e8 <_ZN17TypedTextDatabase8getFontsEv>
 800d798:	4603      	mov	r3, r0
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	e000      	b.n	800d7a0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800d79e:	2300      	movs	r3, #0
    }
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	4a05      	ldr	r2, [pc, #20]	; (800d7c8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7ff ffb1 	bl	800d720 <_ZN8touchgfx12FontProviderD1Ev>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	080288f8 	.word	0x080288f8

0800d7cc <_ZN23ApplicationFontProviderD0Ev>:
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff ffe7 	bl	800d7a8 <_ZN23ApplicationFontProviderD1Ev>
 800d7da:	2104      	movs	r1, #4
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f018 ff02 	bl	80265e6 <_ZdlPvj>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
    {
 800d7f4:	4a04      	ldr	r2, [pc, #16]	; (800d808 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	601a      	str	r2, [r3, #0]
    }
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr
 800d808:	08028d20 	.word	0x08028d20

0800d80c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
    }
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7ff ffe9 	bl	800d7ec <_ZN8touchgfx4FontD1Ev>
 800d81a:	2114      	movs	r1, #20
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f018 fee2 	bl	80265e6 <_ZdlPvj>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d82c:	b590      	push	{r4, r7, lr}
 800d82e:	b087      	sub	sp, #28
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d838:	887b      	ldrh	r3, [r7, #2]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d101      	bne.n	800d842 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	e010      	b.n	800d864 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d846:	2300      	movs	r3, #0
 800d848:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3308      	adds	r3, #8
 800d850:	681c      	ldr	r4, [r3, #0]
 800d852:	f107 030f 	add.w	r3, r7, #15
 800d856:	f107 0210 	add.w	r2, r7, #16
 800d85a:	8879      	ldrh	r1, [r7, #2]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	47a0      	blx	r4
 800d860:	6178      	str	r0, [r7, #20]
        return glyph;
 800d862:	697b      	ldr	r3, [r7, #20]
    }
 800d864:	4618      	mov	r0, r3
 800d866:	371c      	adds	r7, #28
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd90      	pop	{r4, r7, pc}

0800d86c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	89db      	ldrh	r3, [r3, #14]
    }
 800d878:	4618      	mov	r0, r3
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	8a1b      	ldrh	r3, [r3, #16]
    }
 800d890:	4618      	mov	r0, r3
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	88db      	ldrh	r3, [r3, #6]
    }
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	889b      	ldrh	r3, [r3, #4]
    }
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	7a9b      	ldrb	r3, [r3, #10]
 800d8d8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d8dc:	b2db      	uxtb	r3, r3
    }
 800d8de:	4618      	mov	r0, r3
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d8ea:	b480      	push	{r7}
 800d8ec:	b083      	sub	sp, #12
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	7a9b      	ldrb	r3, [r3, #10]
 800d8f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d8fa:	b2db      	uxtb	r3, r3
    }
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	4a05      	ldr	r2, [pc, #20]	; (800d928 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	601a      	str	r2, [r3, #0]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4618      	mov	r0, r3
 800d91a:	f7ff ff67 	bl	800d7ec <_ZN8touchgfx4FontD1Ev>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4618      	mov	r0, r3
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	08029854 	.word	0x08029854

0800d92c <_ZN8touchgfx9ConstFontD0Ev>:
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff ffe7 	bl	800d908 <_ZN8touchgfx9ConstFontD1Ev>
 800d93a:	211c      	movs	r1, #28
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f018 fe52 	bl	80265e6 <_ZdlPvj>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4618      	mov	r0, r3
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	4a05      	ldr	r2, [pc, #20]	; (800d96c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	601a      	str	r2, [r3, #0]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff ffd3 	bl	800d908 <_ZN8touchgfx9ConstFontD1Ev>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	08028930 	.word	0x08028930

0800d970 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff ffe7 	bl	800d94c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d97e:	212c      	movs	r1, #44	; 0x2c
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f018 fe30 	bl	80265e6 <_ZdlPvj>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4618      	mov	r0, r3
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
    {
 800d998:	4a04      	ldr	r2, [pc, #16]	; (800d9ac <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	601a      	str	r2, [r3, #0]
    }
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr
 800d9ac:	08028920 	.word	0x08028920

0800d9b0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
    }
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7ff ffe9 	bl	800d990 <_ZN8touchgfx9TypedTextD1Ev>
 800d9be:	2108      	movs	r1, #8
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f018 fe10 	bl	80265e6 <_ZdlPvj>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800d9dc:	4618      	mov	r0, r3
 800d9de:	370c      	adds	r7, #12
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800da00:	b580      	push	{r7, lr}
 800da02:	b08e      	sub	sp, #56	; 0x38
 800da04:	af0a      	add	r7, sp, #40	; 0x28
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	4611      	mov	r1, r2
 800da0c:	461a      	mov	r2, r3
 800da0e:	460b      	mov	r3, r1
 800da10:	80fb      	strh	r3, [r7, #6]
 800da12:	4613      	mov	r3, r2
 800da14:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	88b9      	ldrh	r1, [r7, #4]
 800da1a:	88fa      	ldrh	r2, [r7, #6]
 800da1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800da20:	9308      	str	r3, [sp, #32]
 800da22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da24:	9307      	str	r3, [sp, #28]
 800da26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800da2a:	9306      	str	r3, [sp, #24]
 800da2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da30:	9305      	str	r3, [sp, #20]
 800da32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da36:	9304      	str	r3, [sp, #16]
 800da38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da3c:	9303      	str	r3, [sp, #12]
 800da3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da42:	9302      	str	r3, [sp, #8]
 800da44:	7f3b      	ldrb	r3, [r7, #28]
 800da46:	9301      	str	r3, [sp, #4]
 800da48:	8b3b      	ldrh	r3, [r7, #24]
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	460b      	mov	r3, r1
 800da4e:	68b9      	ldr	r1, [r7, #8]
 800da50:	f009 fa08 	bl	8016e64 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800da54:	4a09      	ldr	r2, [pc, #36]	; (800da7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da5e:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da64:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da6a:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da70:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	08028930 	.word	0x08028930

0800da80 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800da80:	b480      	push	{r7}
 800da82:	b085      	sub	sp, #20
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	889b      	ldrh	r3, [r3, #4]
 800da94:	0adb      	lsrs	r3, r3, #11
 800da96:	b29b      	uxth	r3, r3
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	4413      	add	r3, r2
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4413      	add	r3, r2
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800dab2:	b480      	push	{r7}
 800dab4:	b089      	sub	sp, #36	; 0x24
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	460b      	mov	r3, r1
 800dabc:	607a      	str	r2, [r7, #4]
 800dabe:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d003      	beq.n	800dace <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7b1b      	ldrb	r3, [r3, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d101      	bne.n	800dad2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800dace:	2300      	movs	r3, #0
 800dad0:	e031      	b.n	800db36 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6a1a      	ldr	r2, [r3, #32]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	7b5b      	ldrb	r3, [r3, #13]
 800dade:	021b      	lsls	r3, r3, #8
 800dae0:	b21b      	sxth	r3, r3
 800dae2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dae6:	b219      	sxth	r1, r3
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	7adb      	ldrb	r3, [r3, #11]
 800daec:	b21b      	sxth	r3, r3
 800daee:	430b      	orrs	r3, r1
 800daf0:	b21b      	sxth	r3, r3
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4413      	add	r3, r2
 800daf8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	7b1b      	ldrb	r3, [r3, #12]
 800dafe:	837b      	strh	r3, [r7, #26]
 800db00:	e013      	b.n	800db2a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	897a      	ldrh	r2, [r7, #10]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d103      	bne.n	800db14 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800db12:	e010      	b.n	800db36 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	881b      	ldrh	r3, [r3, #0]
 800db18:	897a      	ldrh	r2, [r7, #10]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d309      	bcc.n	800db32 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800db1e:	8b7b      	ldrh	r3, [r7, #26]
 800db20:	3b01      	subs	r3, #1
 800db22:	837b      	strh	r3, [r7, #26]
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	3304      	adds	r3, #4
 800db28:	61fb      	str	r3, [r7, #28]
 800db2a:	8b7b      	ldrh	r3, [r7, #26]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1e8      	bne.n	800db02 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800db30:	e000      	b.n	800db34 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800db32:	bf00      	nop
        }
    }
    return 0;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3724      	adds	r7, #36	; 0x24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
	...

0800db44 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800db44:	b580      	push	{r7, lr}
 800db46:	af00      	add	r7, sp, #0
 800db48:	4801      	ldr	r0, [pc, #4]	; (800db50 <__tcf_0+0xc>)
 800db4a:	f7ff feff 	bl	800d94c <_ZN8touchgfx13GeneratedFontD1Ev>
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	20023bf8 	.word	0x20023bf8

0800db54 <_Z23getFont_verdana_10_4bppv>:
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b08e      	sub	sp, #56	; 0x38
 800db58:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800db5a:	4b21      	ldr	r3, [pc, #132]	; (800dbe0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f3bf 8f5b 	dmb	ish
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	bf0c      	ite	eq
 800db6a:	2301      	moveq	r3, #1
 800db6c:	2300      	movne	r3, #0
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	d030      	beq.n	800dbd6 <_Z23getFont_verdana_10_4bppv+0x82>
 800db74:	481a      	ldr	r0, [pc, #104]	; (800dbe0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800db76:	f018 fd38 	bl	80265ea <__cxa_guard_acquire>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	bf14      	ite	ne
 800db80:	2301      	movne	r3, #1
 800db82:	2300      	moveq	r3, #0
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d025      	beq.n	800dbd6 <_Z23getFont_verdana_10_4bppv+0x82>
 800db8a:	2300      	movs	r3, #0
 800db8c:	930c      	str	r3, [sp, #48]	; 0x30
 800db8e:	2300      	movs	r3, #0
 800db90:	930b      	str	r3, [sp, #44]	; 0x2c
 800db92:	2300      	movs	r3, #0
 800db94:	930a      	str	r3, [sp, #40]	; 0x28
 800db96:	233f      	movs	r3, #63	; 0x3f
 800db98:	9309      	str	r3, [sp, #36]	; 0x24
 800db9a:	4b12      	ldr	r3, [pc, #72]	; (800dbe4 <_Z23getFont_verdana_10_4bppv+0x90>)
 800db9c:	9308      	str	r3, [sp, #32]
 800db9e:	4b12      	ldr	r3, [pc, #72]	; (800dbe8 <_Z23getFont_verdana_10_4bppv+0x94>)
 800dba0:	9307      	str	r3, [sp, #28]
 800dba2:	2300      	movs	r3, #0
 800dba4:	9306      	str	r3, [sp, #24]
 800dba6:	2300      	movs	r3, #0
 800dba8:	9305      	str	r3, [sp, #20]
 800dbaa:	2301      	movs	r3, #1
 800dbac:	9304      	str	r3, [sp, #16]
 800dbae:	2304      	movs	r3, #4
 800dbb0:	9303      	str	r3, [sp, #12]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	9302      	str	r3, [sp, #8]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	230a      	movs	r3, #10
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	230a      	movs	r3, #10
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	490a      	ldr	r1, [pc, #40]	; (800dbec <_Z23getFont_verdana_10_4bppv+0x98>)
 800dbc4:	480a      	ldr	r0, [pc, #40]	; (800dbf0 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800dbc6:	f7ff ff1b 	bl	800da00 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dbca:	480a      	ldr	r0, [pc, #40]	; (800dbf4 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800dbcc:	f018 fd58 	bl	8026680 <atexit>
 800dbd0:	4803      	ldr	r0, [pc, #12]	; (800dbe0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dbd2:	f018 fd16 	bl	8026602 <__cxa_guard_release>
    return verdana_10_4bpp;
 800dbd6:	4b06      	ldr	r3, [pc, #24]	; (800dbf0 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20023c24 	.word	0x20023c24
 800dbe4:	0802b4ec 	.word	0x0802b4ec
 800dbe8:	0802b5d4 	.word	0x0802b5d4
 800dbec:	0802b13c 	.word	0x0802b13c
 800dbf0:	20023bf8 	.word	0x20023bf8
 800dbf4:	0800db45 	.word	0x0800db45

0800dbf8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 65, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	4801      	ldr	r0, [pc, #4]	; (800dc04 <__tcf_0+0xc>)
 800dbfe:	f7ff fea5 	bl	800d94c <_ZN8touchgfx13GeneratedFontD1Ev>
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	20023c28 	.word	0x20023c28

0800dc08 <_Z23getFont_verdana_20_4bppv>:
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b08e      	sub	sp, #56	; 0x38
 800dc0c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 65, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800dc0e:	4b21      	ldr	r3, [pc, #132]	; (800dc94 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f3bf 8f5b 	dmb	ish
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	bf0c      	ite	eq
 800dc1e:	2301      	moveq	r3, #1
 800dc20:	2300      	movne	r3, #0
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d030      	beq.n	800dc8a <_Z23getFont_verdana_20_4bppv+0x82>
 800dc28:	481a      	ldr	r0, [pc, #104]	; (800dc94 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800dc2a:	f018 fcde 	bl	80265ea <__cxa_guard_acquire>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	bf14      	ite	ne
 800dc34:	2301      	movne	r3, #1
 800dc36:	2300      	moveq	r3, #0
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d025      	beq.n	800dc8a <_Z23getFont_verdana_20_4bppv+0x82>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	930c      	str	r3, [sp, #48]	; 0x30
 800dc42:	2300      	movs	r3, #0
 800dc44:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc46:	2300      	movs	r3, #0
 800dc48:	930a      	str	r3, [sp, #40]	; 0x28
 800dc4a:	233f      	movs	r3, #63	; 0x3f
 800dc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc4e:	4b12      	ldr	r3, [pc, #72]	; (800dc98 <_Z23getFont_verdana_20_4bppv+0x90>)
 800dc50:	9308      	str	r3, [sp, #32]
 800dc52:	4b12      	ldr	r3, [pc, #72]	; (800dc9c <_Z23getFont_verdana_20_4bppv+0x94>)
 800dc54:	9307      	str	r3, [sp, #28]
 800dc56:	2301      	movs	r3, #1
 800dc58:	9306      	str	r3, [sp, #24]
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	9305      	str	r3, [sp, #20]
 800dc5e:	2301      	movs	r3, #1
 800dc60:	9304      	str	r3, [sp, #16]
 800dc62:	2304      	movs	r3, #4
 800dc64:	9303      	str	r3, [sp, #12]
 800dc66:	2300      	movs	r3, #0
 800dc68:	9302      	str	r3, [sp, #8]
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	9301      	str	r3, [sp, #4]
 800dc6e:	2314      	movs	r3, #20
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	2318      	movs	r3, #24
 800dc74:	2241      	movs	r2, #65	; 0x41
 800dc76:	490a      	ldr	r1, [pc, #40]	; (800dca0 <_Z23getFont_verdana_20_4bppv+0x98>)
 800dc78:	480a      	ldr	r0, [pc, #40]	; (800dca4 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800dc7a:	f7ff fec1 	bl	800da00 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dc7e:	480a      	ldr	r0, [pc, #40]	; (800dca8 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800dc80:	f018 fcfe 	bl	8026680 <atexit>
 800dc84:	4803      	ldr	r0, [pc, #12]	; (800dc94 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800dc86:	f018 fcbc 	bl	8026602 <__cxa_guard_release>
    return verdana_20_4bpp;
 800dc8a:	4b06      	ldr	r3, [pc, #24]	; (800dca4 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	20023c54 	.word	0x20023c54
 800dc98:	0802b4f0 	.word	0x0802b4f0
 800dc9c:	0802b5d8 	.word	0x0802b5d8
 800dca0:	0802b14c 	.word	0x0802b14c
 800dca4:	20023c28 	.word	0x20023c28
 800dca8:	0800dbf9 	.word	0x0800dbf9

0800dcac <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dcac:	b580      	push	{r7, lr}
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	4801      	ldr	r0, [pc, #4]	; (800dcb8 <__tcf_0+0xc>)
 800dcb2:	f7ff fe4b 	bl	800d94c <_ZN8touchgfx13GeneratedFontD1Ev>
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20023c58 	.word	0x20023c58

0800dcbc <_Z23getFont_verdana_40_4bppv>:
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b08e      	sub	sp, #56	; 0x38
 800dcc0:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dcc2:	4b21      	ldr	r3, [pc, #132]	; (800dd48 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f3bf 8f5b 	dmb	ish
 800dcca:	f003 0301 	and.w	r3, r3, #1
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	bf0c      	ite	eq
 800dcd2:	2301      	moveq	r3, #1
 800dcd4:	2300      	movne	r3, #0
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d030      	beq.n	800dd3e <_Z23getFont_verdana_40_4bppv+0x82>
 800dcdc:	481a      	ldr	r0, [pc, #104]	; (800dd48 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dcde:	f018 fc84 	bl	80265ea <__cxa_guard_acquire>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	bf14      	ite	ne
 800dce8:	2301      	movne	r3, #1
 800dcea:	2300      	moveq	r3, #0
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d025      	beq.n	800dd3e <_Z23getFont_verdana_40_4bppv+0x82>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	930c      	str	r3, [sp, #48]	; 0x30
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	930a      	str	r3, [sp, #40]	; 0x28
 800dcfe:	233f      	movs	r3, #63	; 0x3f
 800dd00:	9309      	str	r3, [sp, #36]	; 0x24
 800dd02:	4b12      	ldr	r3, [pc, #72]	; (800dd4c <_Z23getFont_verdana_40_4bppv+0x90>)
 800dd04:	9308      	str	r3, [sp, #32]
 800dd06:	4b12      	ldr	r3, [pc, #72]	; (800dd50 <_Z23getFont_verdana_40_4bppv+0x94>)
 800dd08:	9307      	str	r3, [sp, #28]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9306      	str	r3, [sp, #24]
 800dd0e:	2300      	movs	r3, #0
 800dd10:	9305      	str	r3, [sp, #20]
 800dd12:	2301      	movs	r3, #1
 800dd14:	9304      	str	r3, [sp, #16]
 800dd16:	2304      	movs	r3, #4
 800dd18:	9303      	str	r3, [sp, #12]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	9302      	str	r3, [sp, #8]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	9301      	str	r3, [sp, #4]
 800dd22:	2328      	movs	r3, #40	; 0x28
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	2328      	movs	r3, #40	; 0x28
 800dd28:	2201      	movs	r2, #1
 800dd2a:	490a      	ldr	r1, [pc, #40]	; (800dd54 <_Z23getFont_verdana_40_4bppv+0x98>)
 800dd2c:	480a      	ldr	r0, [pc, #40]	; (800dd58 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800dd2e:	f7ff fe67 	bl	800da00 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dd32:	480a      	ldr	r0, [pc, #40]	; (800dd5c <_Z23getFont_verdana_40_4bppv+0xa0>)
 800dd34:	f018 fca4 	bl	8026680 <atexit>
 800dd38:	4803      	ldr	r0, [pc, #12]	; (800dd48 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dd3a:	f018 fc62 	bl	8026602 <__cxa_guard_release>
    return verdana_40_4bpp;
 800dd3e:	4b06      	ldr	r3, [pc, #24]	; (800dd58 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	20023c84 	.word	0x20023c84
 800dd4c:	0802b5d0 	.word	0x0802b5d0
 800dd50:	0802b5dc 	.word	0x0802b5dc
 800dd54:	0802b4dc 	.word	0x0802b4dc
 800dd58:	20023c58 	.word	0x20023c58
 800dd5c:	0800dcad 	.word	0x0800dcad

0800dd60 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dd82:	bf00      	nop
 800dd84:	370c      	adds	r7, #12
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr

0800dd8e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800dd8e:	b480      	push	{r7}
 800dd90:	b083      	sub	sp, #12
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
 800dd96:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dd98:	bf00      	nop
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ddae:	bf00      	nop
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ddba:	b480      	push	{r7}
 800ddbc:	b083      	sub	sp, #12
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800ddc6:	bf00      	nop
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ddd2:	b480      	push	{r7}
 800ddd4:	b083      	sub	sp, #12
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
    {
    }
 800ddda:	bf00      	nop
 800dddc:	370c      	adds	r7, #12
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800dde6:	b480      	push	{r7}
 800dde8:	b083      	sub	sp, #12
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
    {
    }
 800ddee:	bf00      	nop
 800ddf0:	370c      	adds	r7, #12
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
	...

0800ddfc <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
    {
 800de04:	4a04      	ldr	r2, [pc, #16]	; (800de18 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	601a      	str	r2, [r3, #0]
    }
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4618      	mov	r0, r3
 800de0e:	370c      	adds	r7, #12
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr
 800de18:	08028ab0 	.word	0x08028ab0

0800de1c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
    }
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f7ff ffe9 	bl	800ddfc <_ZN8touchgfx15UIEventListenerD1Ev>
 800de2a:	2104      	movs	r1, #4
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f018 fbda 	bl	80265e6 <_ZdlPvj>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4618      	mov	r0, r3
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
    {
    }
 800de44:	bf00      	nop
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	460b      	mov	r3, r1
 800de5a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800de5c:	bf00      	nop
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800de7a:	6810      	ldr	r0, [r2, #0]
 800de7c:	6851      	ldr	r1, [r2, #4]
 800de7e:	c303      	stmia	r3!, {r0, r1}
    }
 800de80:	bf00      	nop
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	3304      	adds	r3, #4
 800de98:	4618      	mov	r0, r3
 800de9a:	f007 feb3 	bl	8015c04 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800de9e:	bf00      	nop
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
	...

0800dea8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
    {
 800deb0:	4a04      	ldr	r2, [pc, #16]	; (800dec4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	601a      	str	r2, [r3, #0]
    }
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	08028a98 	.word	0x08028a98

0800dec8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
    }
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7ff ffe9 	bl	800dea8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ded6:	2104      	movs	r1, #4
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f018 fb84 	bl	80265e6 <_ZdlPvj>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800dee8:	b480      	push	{r7}
 800deea:	af00      	add	r7, sp, #0
    {
        return instance;
 800deec:	4b03      	ldr	r3, [pc, #12]	; (800defc <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800deee:	681b      	ldr	r3, [r3, #0]
    }
 800def0:	4618      	mov	r0, r3
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	2002585c 	.word	0x2002585c

0800df00 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800df00:	b480      	push	{r7}
 800df02:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800df04:	4b0b      	ldr	r3, [pc, #44]	; (800df34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d008      	beq.n	800df22 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800df10:	4b08      	ldr	r3, [pc, #32]	; (800df34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df16:	2b00      	cmp	r3, #0
 800df18:	d003      	beq.n	800df22 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800df1a:	4b06      	ldr	r3, [pc, #24]	; (800df34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df20:	e002      	b.n	800df28 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800df22:	4b04      	ldr	r3, [pc, #16]	; (800df34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	689b      	ldr	r3, [r3, #8]
    }
 800df28:	4618      	mov	r0, r3
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	2002585c 	.word	0x2002585c

0800df38 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800df40:	4a07      	ldr	r2, [pc, #28]	; (800df60 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	605a      	str	r2, [r3, #4]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	721a      	strb	r2, [r3, #8]
    {
    }
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	4618      	mov	r0, r3
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr
 800df60:	08028a74 	.word	0x08028a74

0800df64 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
    {
 800df6c:	4a04      	ldr	r2, [pc, #16]	; (800df80 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	601a      	str	r2, [r3, #0]
    }
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	4618      	mov	r0, r3
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	08028a74 	.word	0x08028a74

0800df84 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
    }
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff ffe9 	bl	800df64 <_ZN8touchgfx10TransitionD1Ev>
 800df92:	210c      	movs	r1, #12
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f018 fb26 	bl	80265e6 <_ZdlPvj>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4618      	mov	r0, r3
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
    {
    }
 800dfac:	bf00      	nop
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
    {
    }
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
    {
    }
 800dfd4:	bf00      	nop
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800dfe8:	f007 fdce 	bl	8015b88 <_ZN8touchgfx11Application11getInstanceEv>
 800dfec:	4603      	mov	r3, r0
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	323c      	adds	r2, #60	; 0x3c
 800dff2:	6812      	ldr	r2, [r2, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	4790      	blx	r2
    }
 800dff8:	bf00      	nop
 800dffa:	3708      	adds	r7, #8
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	683a      	ldr	r2, [r7, #0]
 800e00e:	605a      	str	r2, [r3, #4]
    }
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	4a05      	ldr	r2, [pc, #20]	; (800e03c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	601a      	str	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7ff fee5 	bl	800ddfc <_ZN8touchgfx15UIEventListenerD1Ev>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	08029798 	.word	0x08029798

0800e040 <_ZN8touchgfx11ApplicationD0Ev>:
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7ff ffe7 	bl	800e01c <_ZN8touchgfx11ApplicationD1Ev>
 800e04e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f018 fac7 	bl	80265e6 <_ZdlPvj>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4618      	mov	r0, r3
 800e05c:	3708      	adds	r7, #8
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4618      	mov	r0, r3
 800e070:	f007 fe96 	bl	8015da0 <_ZN8touchgfx11ApplicationC1Ev>
 800e074:	4a09      	ldr	r2, [pc, #36]	; (800e09c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a04      	ldr	r2, [pc, #16]	; (800e0a0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e08e:	6013      	str	r3, [r2, #0]
    }
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	4618      	mov	r0, r3
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	08028a20 	.word	0x08028a20
 800e0a0:	200258a8 	.word	0x200258a8

0800e0a4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 f804 	bl	800e0ba <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e0b2:	bf00      	nop
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b082      	sub	sp, #8
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d00f      	beq.n	800e0ec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	330c      	adds	r3, #12
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4610      	mov	r0, r2
 800e0e0:	4798      	blx	r3
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e000      	b.n	800e0ee <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00e      	beq.n	800e110 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	3308      	adds	r3, #8
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4610      	mov	r0, r2
 800e106:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800e110:	bf00      	nop
 800e112:	3708      	adds	r7, #8
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	683a      	ldr	r2, [r7, #0]
 800e126:	601a      	str	r2, [r3, #0]
    }
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	4a05      	ldr	r2, [pc, #20]	; (800e154 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	601a      	str	r2, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4618      	mov	r0, r3
 800e146:	f7ff ff69 	bl	800e01c <_ZN8touchgfx11ApplicationD1Ev>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4618      	mov	r0, r3
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	08028a20 	.word	0x08028a20

0800e158 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7ff ffe7 	bl	800e134 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e166:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f018 fa3b 	bl	80265e6 <_ZdlPvj>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4618      	mov	r0, r3
 800e174:	3708      	adds	r7, #8
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
	...

0800e17c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	4a08      	ldr	r2, [pc, #32]	; (800e1a8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	601a      	str	r2, [r3, #0]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e190:	4618      	mov	r0, r3
 800e192:	f000 facd 	bl	800e730 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4618      	mov	r0, r3
 800e19a:	f7ff ffcb 	bl	800e134 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	080289b4 	.word	0x080289b4

0800e1ac <_ZN23FrontendApplicationBaseD0Ev>:
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7ff ffe1 	bl	800e17c <_ZN23FrontendApplicationBaseD1Ev>
 800e1ba:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f018 fa11 	bl	80265e6 <_ZdlPvj>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b082      	sub	sp, #8
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f882 	bl	800e2e0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800e1dc:	bf00      	nop
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	721a      	strb	r2, [r3, #8]
    }
 800e1f2:	bf00      	nop
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr

0800e1fe <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800e1fe:	b480      	push	{r7}
 800e200:	b083      	sub	sp, #12
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
 800e206:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	683a      	ldr	r2, [r7, #0]
 800e20c:	605a      	str	r2, [r3, #4]
    }
 800e20e:	bf00      	nop
 800e210:	370c      	adds	r7, #12
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
	...

0800e21c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7ff ff1a 	bl	800e064 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e230:	4a16      	ldr	r2, [pc, #88]	; (800e28c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e23c:	4618      	mov	r0, r3
 800e23e:	f000 f8a5 	bl	800e38c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800e252:	f7ff fe49 	bl	800dee8 <_ZN8touchgfx3HAL11getInstanceEv>
 800e256:	4603      	mov	r3, r0
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	3208      	adds	r2, #8
 800e25c:	6812      	ldr	r2, [r2, #0]
 800e25e:	2100      	movs	r1, #0
 800e260:	4618      	mov	r0, r3
 800e262:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800e264:	2000      	movs	r0, #0
 800e266:	f001 ff47 	bl	80100f8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e26a:	f7ff fe49 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 800e26e:	4603      	mov	r3, r0
 800e270:	4618      	mov	r0, r3
 800e272:	f010 fe66 	bl	801ef42 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800e276:	f7ff fe43 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 800e27a:	4603      	mov	r3, r0
 800e27c:	4618      	mov	r0, r3
 800e27e:	f010 fedb 	bl	801f038 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	080289b4 	.word	0x080289b4

0800e290 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4618      	mov	r0, r3
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	683a      	ldr	r2, [r7, #0]
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7ff ffe9 	bl	800e290 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	685a      	ldr	r2, [r3, #4]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	605a      	str	r2, [r3, #4]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	3208      	adds	r2, #8
 800e2ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2d2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3708      	adds	r7, #8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800e2e0:	b590      	push	{r4, r7, lr}
 800e2e2:	b089      	sub	sp, #36	; 0x24
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800e2ee:	4b10      	ldr	r3, [pc, #64]	; (800e330 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800e2f0:	61bb      	str	r3, [r7, #24]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	61fb      	str	r3, [r7, #28]
 800e2f6:	f107 0008 	add.w	r0, r7, #8
 800e2fa:	f107 0318 	add.w	r3, r7, #24
 800e2fe:	cb0c      	ldmia	r3, {r2, r3}
 800e300:	6879      	ldr	r1, [r7, #4]
 800e302:	f000 f85f 	bl	800e3c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e306:	f107 0308 	add.w	r3, r7, #8
 800e30a:	4619      	mov	r1, r3
 800e30c:	4620      	mov	r0, r4
 800e30e:	f7ff ffcb 	bl	800e2a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e312:	f107 0308 	add.w	r3, r7, #8
 800e316:	4618      	mov	r0, r3
 800e318:	f000 fa0a 	bl	800e730 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800e328:	bf00      	nop
 800e32a:	3724      	adds	r7, #36	; 0x24
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd90      	pop	{r4, r7, pc}
 800e330:	0800e335 	.word	0x0800e335

0800e334 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af02      	add	r7, sp, #8
 800e33a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e348:	461a      	mov	r2, r3
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	4b04      	ldr	r3, [pc, #16]	; (800e364 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800e354:	4804      	ldr	r0, [pc, #16]	; (800e368 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800e356:	f000 f867 	bl	800e428 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e35a:	bf00      	nop
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	2002589c 	.word	0x2002589c
 800e368:	20025898 	.word	0x20025898

0800e36c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	4a04      	ldr	r2, [pc, #16]	; (800e388 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	601a      	str	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4618      	mov	r0, r3
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr
 800e388:	08028a98 	.word	0x08028a98

0800e38c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4618      	mov	r0, r3
 800e398:	f7ff ffe8 	bl	800e36c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e39c:	4a08      	ldr	r2, [pc, #32]	; (800e3c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	601a      	str	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	605a      	str	r2, [r3, #4]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	609a      	str	r2, [r3, #8]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	60da      	str	r2, [r3, #12]
    {
    }
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	08028a08 	.word	0x08028a08

0800e3c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	4639      	mov	r1, r7
 800e3d0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff ffc8 	bl	800e36c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e3dc:	4a08      	ldr	r2, [pc, #32]	; (800e400 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	601a      	str	r2, [r3, #0]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	605a      	str	r2, [r3, #4]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	3308      	adds	r3, #8
 800e3ec:	463a      	mov	r2, r7
 800e3ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3f2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	08028a08 	.word	0x08028a08

0800e404 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4618      	mov	r0, r3
 800e410:	f7ff fd92 	bl	800df38 <_ZN8touchgfx10TransitionC1Ev>
 800e414:	4a03      	ldr	r2, [pc, #12]	; (800e424 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	601a      	str	r2, [r3, #0]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4618      	mov	r0, r3
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	08028990 	.word	0x08028990

0800e428 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e428:	b590      	push	{r4, r7, lr}
 800e42a:	b08f      	sub	sp, #60	; 0x3c
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	607a      	str	r2, [r7, #4]
 800e434:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	689a      	ldr	r2, [r3, #8]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	3320      	adds	r3, #32
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4610      	mov	r0, r2
 800e446:	4798      	blx	r3
 800e448:	4603      	mov	r3, r0
 800e44a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800e44e:	d205      	bcs.n	800e45c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800e450:	4b7d      	ldr	r3, [pc, #500]	; (800e648 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800e452:	4a7e      	ldr	r2, [pc, #504]	; (800e64c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e454:	21a3      	movs	r1, #163	; 0xa3
 800e456:	487e      	ldr	r0, [pc, #504]	; (800e650 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e458:	f018 f8f4 	bl	8026644 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	685a      	ldr	r2, [r3, #4]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3320      	adds	r3, #32
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4610      	mov	r0, r2
 800e46c:	4798      	blx	r3
 800e46e:	4603      	mov	r3, r0
 800e470:	2b0f      	cmp	r3, #15
 800e472:	d805      	bhi.n	800e480 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800e474:	4b77      	ldr	r3, [pc, #476]	; (800e654 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e476:	4a75      	ldr	r2, [pc, #468]	; (800e64c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e478:	21a4      	movs	r1, #164	; 0xa4
 800e47a:	4875      	ldr	r0, [pc, #468]	; (800e650 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e47c:	f018 f8e2 	bl	8026644 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	68da      	ldr	r2, [r3, #12]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3320      	adds	r3, #32
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4610      	mov	r0, r2
 800e490:	4798      	blx	r3
 800e492:	4603      	mov	r3, r0
 800e494:	2b0b      	cmp	r3, #11
 800e496:	d805      	bhi.n	800e4a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800e498:	4b6f      	ldr	r3, [pc, #444]	; (800e658 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e49a:	4a6c      	ldr	r2, [pc, #432]	; (800e64c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e49c:	21a5      	movs	r1, #165	; 0xa5
 800e49e:	486c      	ldr	r0, [pc, #432]	; (800e650 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e4a0:	f018 f8d0 	bl	8026644 <__assert_func>
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e4b0:	f007 fb6a 	bl	8015b88 <_ZN8touchgfx11Application11getInstanceEv>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7ff fce8 	bl	800de8c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e4bc:	6a3b      	ldr	r3, [r7, #32]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d008      	beq.n	800e4d6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	6a3b      	ldr	r3, [r7, #32]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	330c      	adds	r3, #12
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	4798      	blx	r3
    if (*currentTrans)
 800e4d6:	6a3b      	ldr	r3, [r7, #32]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d007      	beq.n	800e4ee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	4798      	blx	r3
    if (*currentScreen)
 800e4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d008      	beq.n	800e508 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	3314      	adds	r3, #20
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4610      	mov	r0, r2
 800e506:	4798      	blx	r3
    if (*currentPresenter)
 800e508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d008      	beq.n	800e522 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	3304      	adds	r3, #4
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4610      	mov	r0, r2
 800e520:	4798      	blx	r3
    if (*currentScreen)
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d007      	beq.n	800e53a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800e52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4610      	mov	r0, r2
 800e538:	4798      	blx	r3
    if (*currentPresenter)
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d008      	beq.n	800e554 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	3308      	adds	r3, #8
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4610      	mov	r0, r2
 800e552:	4798      	blx	r3
}
 800e554:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	2100      	movs	r1, #0
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 f87d 	bl	800e65c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e562:	4603      	mov	r3, r0
 800e564:	4619      	mov	r1, r3
 800e566:	200c      	movs	r0, #12
 800e568:	f7ff fbfa 	bl	800dd60 <_ZnwjPv>
 800e56c:	4604      	mov	r4, r0
 800e56e:	4620      	mov	r0, r4
 800e570:	f7ff ff48 	bl	800e404 <_ZN8touchgfx12NoTransitionC1Ev>
 800e574:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	2100      	movs	r1, #0
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 f880 	bl	800e682 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800e582:	4603      	mov	r3, r0
 800e584:	4619      	mov	r1, r3
 800e586:	f44f 7001 	mov.w	r0, #516	; 0x204
 800e58a:	f7ff fbe9 	bl	800dd60 <_ZnwjPv>
 800e58e:	4604      	mov	r4, r0
 800e590:	4620      	mov	r0, r4
 800e592:	f002 f807 	bl	80105a4 <_ZN11Screen1ViewC1Ev>
 800e596:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	2100      	movs	r1, #0
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 f882 	bl	800e6a8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	2010      	movs	r0, #16
 800e5aa:	f7ff fbd9 	bl	800dd60 <_ZnwjPv>
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f001 ff86 	bl	80104c4 <_ZN16Screen1PresenterC1ER11Screen1View>
 800e5b8:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5be:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5c4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ca:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d002      	beq.n	800e5d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800e5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	e000      	b.n	800e5da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e5de:	f7ff fd9b 	bl	800e118 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff fe08 	bl	800e1fe <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 f86b 	bl	800e6ce <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800e5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fa:	61fb      	str	r3, [r7, #28]
 800e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fe:	61bb      	str	r3, [r7, #24]
 800e600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e602:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	330c      	adds	r3, #12
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	69f8      	ldr	r0, [r7, #28]
 800e60e:	4798      	blx	r3
    newPresenter->activate();
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	69b8      	ldr	r0, [r7, #24]
 800e618:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e61a:	6979      	ldr	r1, [r7, #20]
 800e61c:	69f8      	ldr	r0, [r7, #28]
 800e61e:	f008 ffbf 	bl	80175a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	3310      	adds	r3, #16
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6978      	ldr	r0, [r7, #20]
 800e62c:	4798      	blx	r3
    newTransition->invalidate();
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3314      	adds	r3, #20
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	6978      	ldr	r0, [r7, #20]
 800e638:	4798      	blx	r3
}
 800e63a:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e63e:	4618      	mov	r0, r3
 800e640:	373c      	adds	r7, #60	; 0x3c
 800e642:	46bd      	mov	sp, r7
 800e644:	bd90      	pop	{r4, r7, pc}
 800e646:	bf00      	nop
 800e648:	080276b8 	.word	0x080276b8
 800e64c:	08027748 	.word	0x08027748
 800e650:	0802784c 	.word	0x0802784c
 800e654:	08027890 	.word	0x08027890
 800e658:	08027934 	.word	0x08027934

0800e65c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	460b      	mov	r3, r1
 800e666:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	3324      	adds	r3, #36	; 0x24
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	887a      	ldrh	r2, [r7, #2]
 800e672:	4611      	mov	r1, r2
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	4798      	blx	r3
 800e678:	4603      	mov	r3, r0
    }
 800e67a:	4618      	mov	r0, r3
 800e67c:	3708      	adds	r7, #8
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}

0800e682 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800e682:	b580      	push	{r7, lr}
 800e684:	b082      	sub	sp, #8
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
 800e68a:	460b      	mov	r3, r1
 800e68c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3324      	adds	r3, #36	; 0x24
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	887a      	ldrh	r2, [r7, #2]
 800e698:	4611      	mov	r1, r2
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	4798      	blx	r3
 800e69e:	4603      	mov	r3, r0
    }
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3324      	adds	r3, #36	; 0x24
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	887a      	ldrh	r2, [r7, #2]
 800e6be:	4611      	mov	r1, r2
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	4798      	blx	r3
 800e6c4:	4603      	mov	r3, r0
    }
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3708      	adds	r7, #8
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e6ce:	b480      	push	{r7}
 800e6d0:	b083      	sub	sp, #12
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e6de:	bf00      	nop
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
	...

0800e6ec <_ZN8touchgfx12NoTransitionD1Ev>:
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	4a05      	ldr	r2, [pc, #20]	; (800e70c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	601a      	str	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff fc31 	bl	800df64 <_ZN8touchgfx10TransitionD1Ev>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	4618      	mov	r0, r3
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	08028990 	.word	0x08028990

0800e710 <_ZN8touchgfx12NoTransitionD0Ev>:
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7ff ffe7 	bl	800e6ec <_ZN8touchgfx12NoTransitionD1Ev>
 800e71e:	210c      	movs	r1, #12
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f017 ff60 	bl	80265e6 <_ZdlPvj>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4618      	mov	r0, r3
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	4a05      	ldr	r2, [pc, #20]	; (800e750 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4618      	mov	r0, r3
 800e742:	f7ff fbb1 	bl	800dea8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4618      	mov	r0, r3
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	08028a08 	.word	0x08028a08

0800e754 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7ff ffe7 	bl	800e730 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e762:	2110      	movs	r1, #16
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f017 ff3e 	bl	80265e6 <_ZdlPvj>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4618      	mov	r0, r3
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	68d2      	ldr	r2, [r2, #12]
 800e784:	1052      	asrs	r2, r2, #1
 800e786:	1899      	adds	r1, r3, r2
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	f003 0301 	and.w	r3, r3, #1
 800e790:	2b00      	cmp	r3, #0
 800e792:	d102      	bne.n	800e79a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	689b      	ldr	r3, [r3, #8]
 800e798:	e00a      	b.n	800e7b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	68d2      	ldr	r2, [r2, #12]
 800e7a2:	1052      	asrs	r2, r2, #1
 800e7a4:	4413      	add	r3, r2
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	6892      	ldr	r2, [r2, #8]
 800e7ac:	4413      	add	r3, r2
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4608      	mov	r0, r1
 800e7b2:	4798      	blx	r3
    }
 800e7b4:	bf00      	nop
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d010      	beq.n	800e7ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d107      	bne.n	800e7e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	f003 0301 	and.w	r3, r3, #1
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d101      	bne.n	800e7e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e000      	b.n	800e7e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d001      	beq.n	800e7ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e000      	b.n	800e7f0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800e7ee:	2300      	movs	r3, #0
    }
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
        : color(col)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	683a      	ldr	r2, [r7, #0]
 800e80a:	601a      	str	r2, [r3, #0]
    {
    }
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	4618      	mov	r0, r3
 800e810:	370c      	adds	r7, #12
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr

0800e81a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e81a:	b480      	push	{r7}
 800e81c:	b083      	sub	sp, #12
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	801a      	strh	r2, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2200      	movs	r2, #0
 800e82c:	805a      	strh	r2, [r3, #2]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2200      	movs	r2, #0
 800e832:	809a      	strh	r2, [r3, #4]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	80da      	strh	r2, [r3, #6]
    {
    }
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4618      	mov	r0, r3
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	4608      	mov	r0, r1
 800e852:	4611      	mov	r1, r2
 800e854:	461a      	mov	r2, r3
 800e856:	4603      	mov	r3, r0
 800e858:	817b      	strh	r3, [r7, #10]
 800e85a:	460b      	mov	r3, r1
 800e85c:	813b      	strh	r3, [r7, #8]
 800e85e:	4613      	mov	r3, r2
 800e860:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	897a      	ldrh	r2, [r7, #10]
 800e866:	801a      	strh	r2, [r3, #0]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	893a      	ldrh	r2, [r7, #8]
 800e86c:	805a      	strh	r2, [r3, #2]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	88fa      	ldrh	r2, [r7, #6]
 800e872:	809a      	strh	r2, [r3, #4]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	8b3a      	ldrh	r2, [r7, #24]
 800e878:	80da      	strh	r2, [r3, #6]
    {
    }
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	4618      	mov	r0, r3
 800e87e:	3714      	adds	r7, #20
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	887a      	ldrh	r2, [r7, #2]
 800e898:	801a      	strh	r2, [r3, #0]
    {
    }
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4618      	mov	r0, r3
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800e8b0:	4a14      	ldr	r2, [pc, #80]	; (800e904 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	601a      	str	r2, [r3, #0]
        : rect(),
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	3304      	adds	r3, #4
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7ff ffad 	bl	800e81a <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	330c      	adds	r3, #12
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7ff ffa8 	bl	800e81a <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	080297ec 	.word	0x080297ec

0800e908 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
    {
 800e910:	4a04      	ldr	r2, [pc, #16]	; (800e924 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	601a      	str	r2, [r3, #0]
    }
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4618      	mov	r0, r3
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr
 800e924:	080297ec 	.word	0x080297ec

0800e928 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
    }
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7ff ffe9 	bl	800e908 <_ZN8touchgfx8DrawableD1Ev>
 800e936:	2128      	movs	r1, #40	; 0x28
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f017 fe54 	bl	80265e6 <_ZdlPvj>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4618      	mov	r0, r3
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e956:	2b00      	cmp	r3, #0
 800e958:	d005      	beq.n	800e966 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	3314      	adds	r3, #20
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	4798      	blx	r3
        }
    }
 800e966:	bf00      	nop
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800e96e:	b480      	push	{r7}
 800e970:	b083      	sub	sp, #12
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e976:	2300      	movs	r3, #0
    }
 800e978:	4618      	mov	r0, r3
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	4608      	mov	r0, r1
 800e98e:	4611      	mov	r1, r2
 800e990:	461a      	mov	r2, r3
 800e992:	4603      	mov	r3, r0
 800e994:	817b      	strh	r3, [r7, #10]
 800e996:	460b      	mov	r3, r1
 800e998:	813b      	strh	r3, [r7, #8]
 800e99a:	4613      	mov	r3, r2
 800e99c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e99e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e9a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f000 f844 	bl	800ea36 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e9ae:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e9b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f000 f898 	bl	800eaee <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e9be:	bf00      	nop
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800e9c6:	b480      	push	{r7}
 800e9c8:	b083      	sub	sp, #12
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	370c      	adds	r7, #12
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr

0800e9fa <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e9fa:	b480      	push	{r7}
 800e9fc:	b083      	sub	sp, #12
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	460b      	mov	r3, r1
 800ea04:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	887a      	ldrh	r2, [r7, #2]
 800ea0a:	809a      	strh	r2, [r3, #4]
    }
 800ea0c:	bf00      	nop
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	460b      	mov	r3, r1
 800ea22:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	887a      	ldrh	r2, [r7, #2]
 800ea28:	80da      	strh	r2, [r3, #6]
    }
 800ea2a:	bf00      	nop
 800ea2c:	370c      	adds	r7, #12
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	807b      	strh	r3, [r7, #2]
 800ea42:	4613      	mov	r3, r2
 800ea44:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3330      	adds	r3, #48	; 0x30
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ea52:	4611      	mov	r1, r2
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	4798      	blx	r3
        setY(y);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	3334      	adds	r3, #52	; 0x34
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ea64:	4611      	mov	r1, r2
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	4798      	blx	r3
    }
 800ea6a:	bf00      	nop
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800ea72:	b480      	push	{r7}
 800ea74:	b083      	sub	sp, #12
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	887a      	ldrh	r2, [r7, #2]
 800ea82:	811a      	strh	r2, [r3, #8]
    }
 800ea84:	bf00      	nop
 800ea86:	370c      	adds	r7, #12
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr

0800ea90 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	887a      	ldrh	r2, [r7, #2]
 800eaa0:	815a      	strh	r2, [r3, #10]
    }
 800eaa2:	bf00      	nop
 800eaa4:	370c      	adds	r7, #12
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr

0800eaae <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800eaae:	b480      	push	{r7}
 800eab0:	b083      	sub	sp, #12
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
    {
    }
 800eab6:	bf00      	nop
 800eab8:	370c      	adds	r7, #12
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr

0800eac2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800eac2:	b480      	push	{r7}
 800eac4:	b083      	sub	sp, #12
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800eacc:	bf00      	nop
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800eae2:	bf00      	nop
 800eae4:	370c      	adds	r7, #12
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr

0800eaee <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b082      	sub	sp, #8
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	6078      	str	r0, [r7, #4]
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	807b      	strh	r3, [r7, #2]
 800eafa:	4613      	mov	r3, r2
 800eafc:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	3338      	adds	r3, #56	; 0x38
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800eb0a:	4611      	mov	r1, r2
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	4798      	blx	r3
        setHeight(height);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	333c      	adds	r3, #60	; 0x3c
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	4798      	blx	r3
    }
 800eb22:	bf00      	nop
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800eb2a:	b480      	push	{r7}
 800eb2c:	b083      	sub	sp, #12
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800eb34:	bf00      	nop
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
    {
    }
 800eb48:	bf00      	nop
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	78fa      	ldrb	r2, [r7, #3]
 800eb64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800eb68:	bf00      	nop
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800eb82:	4618      	mov	r0, r3
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800eb8e:	b480      	push	{r7}
 800eb90:	b083      	sub	sp, #12
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	807b      	strh	r3, [r7, #2]
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	3354      	adds	r3, #84	; 0x54
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	8879      	ldrh	r1, [r7, #2]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ebc8:	b292      	uxth	r2, r2
 800ebca:	1a8a      	subs	r2, r1, r2
 800ebcc:	b292      	uxth	r2, r2
 800ebce:	b210      	sxth	r0, r2
 800ebd0:	8839      	ldrh	r1, [r7, #0]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ebd8:	b292      	uxth	r2, r2
 800ebda:	1a8a      	subs	r2, r1, r2
 800ebdc:	b292      	uxth	r2, r2
 800ebde:	b212      	sxth	r2, r2
 800ebe0:	4601      	mov	r1, r0
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	4798      	blx	r3
    }
 800ebe6:	bf00      	nop
 800ebe8:	3708      	adds	r7, #8
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ebee:	b480      	push	{r7}
 800ebf0:	b083      	sub	sp, #12
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebfc:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec04:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec0c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ec0e:	bf00      	nop
 800ec10:	370c      	adds	r7, #12
 800ec12:	46bd      	mov	sp, r7
 800ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec18:	4770      	bx	lr

0800ec1a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b084      	sub	sp, #16
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	60f8      	str	r0, [r7, #12]
 800ec22:	60b9      	str	r1, [r7, #8]
 800ec24:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f7ff ffe1 	bl	800ebee <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681a      	ldr	r2, [r3, #0]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	601a      	str	r2, [r3, #0]
    }
 800ec3a:	bf00      	nop
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
    void registerTimerWidget(Drawable* w)
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b082      	sub	sp, #8
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
 800ec4a:	6039      	str	r1, [r7, #0]
        timerWidgets.add(w);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	3304      	adds	r3, #4
 800ec50:	6839      	ldr	r1, [r7, #0]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f007 f866 	bl	8015d24 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
    }
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
     * @param [in] w The widget to remove.
     *
     * @note If widget has been registered multiple times, an equal number of calls to unregister
     *       are required to stop widget from receiving tick events.
     */
    void unregisterTimerWidget(const Drawable* w)
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
    {
        timerWidgets.remove(w);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	6839      	ldr	r1, [r7, #0]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f006 ffae 	bl	8015bd2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
    }
 800ec76:	bf00      	nop
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
	...

0800ec80 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
    {
 800ec88:	4a06      	ldr	r2, [pc, #24]	; (800eca4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	3304      	adds	r3, #4
 800ec92:	4618      	mov	r0, r3
 800ec94:	f001 f82e 	bl	800fcf4 <_ZN8touchgfx9ContainerD1Ev>
    }
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	080298f0 	.word	0x080298f0

0800eca8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
    }
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7ff ffe5 	bl	800ec80 <_ZN8touchgfx6ScreenD1Ev>
 800ecb6:	213c      	movs	r1, #60	; 0x3c
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f017 fc94 	bl	80265e6 <_ZdlPvj>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800ecc8:	b480      	push	{r7}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
    {
    }
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
    {
    }
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
    {
    }
 800ecf8:	bf00      	nop
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
    {
    }
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	460b      	mov	r3, r1
 800ed22:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f003 fac5 	bl	80122d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800ed46:	bf00      	nop
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b084      	sub	sp, #16
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	60f8      	str	r0, [r7, #12]
 800ed56:	607b      	str	r3, [r7, #4]
 800ed58:	460b      	mov	r3, r1
 800ed5a:	817b      	strh	r3, [r7, #10]
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7ff ff06 	bl	800eb74 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d008      	beq.n	800ed80 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7ff ff0c 	bl	800eb8e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d001      	beq.n	800ed80 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e000      	b.n	800ed82 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ed80:	2300      	movs	r3, #0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d002      	beq.n	800ed8c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ed86:	68fa      	ldr	r2, [r7, #12]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	601a      	str	r2, [r3, #0]
        }
    }
 800ed8c:	bf00      	nop
 800ed8e:	3710      	adds	r7, #16
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff fd82 	bl	800e8a8 <_ZN8touchgfx8DrawableC1Ev>
 800eda4:	4a03      	ldr	r2, [pc, #12]	; (800edb4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4618      	mov	r0, r3
 800edae:	3708      	adds	r7, #8
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	08028c68 	.word	0x08028c68

0800edb8 <_ZN8touchgfx6WidgetD1Ev>:
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	4a05      	ldr	r2, [pc, #20]	; (800edd8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	601a      	str	r2, [r3, #0]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4618      	mov	r0, r3
 800edca:	f7ff fd9d 	bl	800e908 <_ZN8touchgfx8DrawableD1Ev>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4618      	mov	r0, r3
 800edd2:	3708      	adds	r7, #8
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	08028c68 	.word	0x08028c68

0800eddc <_ZN8touchgfx6WidgetD0Ev>:
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7ff ffe7 	bl	800edb8 <_ZN8touchgfx6WidgetD1Ev>
 800edea:	2128      	movs	r1, #40	; 0x28
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f017 fbfa 	bl	80265e6 <_ZdlPvj>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	4618      	mov	r0, r3
 800ee08:	2326      	movs	r3, #38	; 0x26
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	f017 fe1e 	bl	8026a4e <memset>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7ff ffbd 	bl	800ed94 <_ZN8touchgfx6WidgetC1Ev>
 800ee1a:	4a09      	ldr	r2, [pc, #36]	; (800ee40 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	22ff      	movs	r2, #255	; 0xff
 800ee24:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	3328      	adds	r3, #40	; 0x28
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7ff fce4 	bl	800e7fc <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4618      	mov	r0, r3
 800ee38:	3708      	adds	r7, #8
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	08029500 	.word	0x08029500

0800ee44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ee54:	bf00      	nop
 800ee56:	370c      	adds	r7, #12
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	2326      	movs	r3, #38	; 0x26
 800ee70:	461a      	mov	r2, r3
 800ee72:	2100      	movs	r1, #0
 800ee74:	f017 fdeb 	bl	8026a4e <memset>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7ff ff8a 	bl	800ed94 <_ZN8touchgfx6WidgetC1Ev>
 800ee80:	4a09      	ldr	r2, [pc, #36]	; (800eea8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	601a      	str	r2, [r3, #0]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	683a      	ldr	r2, [r7, #0]
 800ee8a:	8812      	ldrh	r2, [r2, #0]
 800ee8c:	84da      	strh	r2, [r3, #38]	; 0x26
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	22ff      	movs	r2, #255	; 0xff
 800ee92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800ee96:	6839      	ldr	r1, [r7, #0]
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f005 f936 	bl	801410a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	4618      	mov	r0, r3
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	080296d4 	.word	0x080296d4

0800eeac <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	4a05      	ldr	r2, [pc, #20]	; (800eecc <_ZN8touchgfx3BoxD1Ev+0x20>)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7ff ff7b 	bl	800edb8 <_ZN8touchgfx6WidgetD1Ev>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4618      	mov	r0, r3
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	08029500 	.word	0x08029500

0800eed0 <_ZN8touchgfx3BoxD0Ev>:
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f7ff ffe7 	bl	800eeac <_ZN8touchgfx3BoxD1Ev>
 800eede:	212c      	movs	r1, #44	; 0x2c
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f017 fb80 	bl	80265e6 <_ZdlPvj>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4618      	mov	r0, r3
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7ff ff7e 	bl	800edfc <_ZN8touchgfx3BoxC1Ev>
 800ef00:	4a08      	ldr	r2, [pc, #32]	; (800ef24 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	332c      	adds	r3, #44	; 0x2c
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff fc75 	bl	800e7fc <_ZN8touchgfx9colortypeC1Em>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	0802966c 	.word	0x0802966c

0800ef28 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	683a      	ldr	r2, [r7, #0]
 800ef36:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800ef38:	bf00      	nop
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	887a      	ldrh	r2, [r7, #2]
 800ef54:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800ef56:	bf00      	nop
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
	...

0800ef64 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800ef70:	4a06      	ldr	r2, [pc, #24]	; (800ef8c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	601a      	str	r2, [r3, #0]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	887a      	ldrh	r2, [r7, #2]
 800ef7a:	809a      	strh	r2, [r3, #4]
    }
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	370c      	adds	r7, #12
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop
 800ef8c:	08028920 	.word	0x08028920

0800ef90 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	2326      	movs	r3, #38	; 0x26
 800ef9e:	461a      	mov	r2, r3
 800efa0:	2100      	movs	r1, #0
 800efa2:	f017 fd54 	bl	8026a4e <memset>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7ff fef3 	bl	800ed94 <_ZN8touchgfx6WidgetC1Ev>
 800efae:	4a16      	ldr	r2, [pc, #88]	; (800f008 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	601a      	str	r2, [r3, #0]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	3328      	adds	r3, #40	; 0x28
 800efb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7ff ffd1 	bl	800ef64 <_ZN8touchgfx9TypedTextC1Et>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	3330      	adds	r3, #48	; 0x30
 800efc6:	2100      	movs	r1, #0
 800efc8:	4618      	mov	r0, r3
 800efca:	f7ff fc17 	bl	800e7fc <_ZN8touchgfx9colortypeC1Em>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	869a      	strh	r2, [r3, #52]	; 0x34
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	22ff      	movs	r2, #255	; 0xff
 800efd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	333c      	adds	r3, #60	; 0x3c
 800eff8:	4618      	mov	r0, r3
 800effa:	f000 f8f0 	bl	800f1de <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4618      	mov	r0, r3
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	08029470 	.word	0x08029470

0800f00c <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800f00c:	b590      	push	{r4, r7, lr}
 800f00e:	b087      	sub	sp, #28
 800f010:	af00      	add	r7, sp, #0
 800f012:	6178      	str	r0, [r7, #20]
 800f014:	460b      	mov	r3, r1
 800f016:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f01e:	4611      	mov	r1, r2
 800f020:	4618      	mov	r0, r3
 800f022:	f7ff fd26 	bl	800ea72 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	3384      	adds	r3, #132	; 0x84
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	697c      	ldr	r4, [r7, #20]
 800f030:	463a      	mov	r2, r7
 800f032:	6979      	ldr	r1, [r7, #20]
 800f034:	4610      	mov	r0, r2
 800f036:	4798      	blx	r3
 800f038:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f03c:	463a      	mov	r2, r7
 800f03e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f040:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f044:	bf00      	nop
 800f046:	371c      	adds	r7, #28
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd90      	pop	{r4, r7, pc}

0800f04c <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800f04c:	b590      	push	{r4, r7, lr}
 800f04e:	b087      	sub	sp, #28
 800f050:	af00      	add	r7, sp, #0
 800f052:	6178      	str	r0, [r7, #20]
 800f054:	460b      	mov	r3, r1
 800f056:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f05e:	4611      	mov	r1, r2
 800f060:	4618      	mov	r0, r3
 800f062:	f7ff fd15 	bl	800ea90 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	3384      	adds	r3, #132	; 0x84
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	697c      	ldr	r4, [r7, #20]
 800f070:	463a      	mov	r2, r7
 800f072:	6979      	ldr	r1, [r7, #20]
 800f074:	4610      	mov	r0, r2
 800f076:	4798      	blx	r3
 800f078:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f07c:	463a      	mov	r2, r7
 800f07e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f080:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f084:	bf00      	nop
 800f086:	371c      	adds	r7, #28
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd90      	pop	{r4, r7, pc}

0800f08c <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff fbbf 	bl	800e81a <_ZN8touchgfx4RectC1Ev>
    }
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	78fa      	ldrb	r2, [r7, #3]
 800f0b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800f0b8:	bf00      	nop
 800f0ba:	370c      	adds	r7, #12
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800f0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800f0d0:	687e      	ldr	r6, [r7, #4]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	3334      	adds	r3, #52	; 0x34
 800f0d8:	681c      	ldr	r4, [r3, #0]
 800f0da:	887d      	ldrh	r5, [r7, #2]
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 f867 	bl	800f1b0 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f0e6:	4b1c      	ldr	r3, [pc, #112]	; (800f158 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d105      	bne.n	800f0fa <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800f0ee:	4b1b      	ldr	r3, [pc, #108]	; (800f15c <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800f0f0:	4a1b      	ldr	r2, [pc, #108]	; (800f160 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800f0f2:	216c      	movs	r1, #108	; 0x6c
 800f0f4:	481b      	ldr	r0, [pc, #108]	; (800f164 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f0f6:	f017 faa5 	bl	8026644 <__assert_func>
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	889a      	ldrh	r2, [r3, #4]
 800f102:	4b19      	ldr	r3, [pc, #100]	; (800f168 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800f104:	881b      	ldrh	r3, [r3, #0]
 800f106:	429a      	cmp	r2, r3
 800f108:	bf34      	ite	cc
 800f10a:	2301      	movcc	r3, #1
 800f10c:	2300      	movcs	r3, #0
 800f10e:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f110:	2b00      	cmp	r3, #0
 800f112:	d105      	bne.n	800f120 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800f114:	4b15      	ldr	r3, [pc, #84]	; (800f16c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800f116:	4a12      	ldr	r2, [pc, #72]	; (800f160 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800f118:	216d      	movs	r1, #109	; 0x6d
 800f11a:	4812      	ldr	r0, [pc, #72]	; (800f164 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f11c:	f017 fa92 	bl	8026644 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f120:	4b13      	ldr	r3, [pc, #76]	; (800f170 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	4b0c      	ldr	r3, [pc, #48]	; (800f158 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800f126:	6819      	ldr	r1, [r3, #0]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	889b      	ldrh	r3, [r3, #4]
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	440b      	add	r3, r1
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	4413      	add	r3, r2
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	3230      	adds	r2, #48	; 0x30
 800f13c:	6812      	ldr	r2, [r2, #0]
 800f13e:	4618      	mov	r0, r3
 800f140:	4790      	blx	r2
 800f142:	4603      	mov	r3, r0
 800f144:	1aeb      	subs	r3, r5, r3
 800f146:	b29b      	uxth	r3, r3
 800f148:	b21b      	sxth	r3, r3
 800f14a:	4619      	mov	r1, r3
 800f14c:	4630      	mov	r0, r6
 800f14e:	47a0      	blx	r4
    }
 800f150:	bf00      	nop
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f158:	200258ac 	.word	0x200258ac
 800f15c:	080279d8 	.word	0x080279d8
 800f160:	08027a1c 	.word	0x08027a1c
 800f164:	08027a58 	.word	0x08027a58
 800f168:	200258b0 	.word	0x200258b0
 800f16c:	08027a9c 	.word	0x08027a9c
 800f170:	200258b4 	.word	0x200258b4

0800f174 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	460b      	mov	r3, r1
 800f17e:	807b      	strh	r3, [r7, #2]
 800f180:	4613      	mov	r3, r2
 800f182:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3330      	adds	r3, #48	; 0x30
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f192:	4610      	mov	r0, r2
 800f194:	4798      	blx	r3
        setBaselineY(baselineY);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	3364      	adds	r3, #100	; 0x64
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f1a2:	4611      	mov	r1, r2
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	4798      	blx	r3
    }
 800f1a8:	bf00      	nop
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	3328      	adds	r3, #40	; 0x28
    }
 800f1bc:	4618      	mov	r0, r3
 800f1be:	370c      	adds	r7, #12
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr

0800f1c8 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f1d0:	2300      	movs	r3, #0
    }
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	370c      	adds	r7, #12
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr

0800f1de <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b084      	sub	sp, #16
 800f1e2:	af02      	add	r7, sp, #8
 800f1e4:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	f7ff fb27 	bl	800e848 <_ZN8touchgfx4RectC1Essss>
              text(0)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	609a      	str	r2, [r3, #8]
        {
        }
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4618      	mov	r0, r3
 800f204:	3708      	adds	r7, #8
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
	...

0800f20c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	4a08      	ldr	r2, [pc, #32]	; (800f238 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	601a      	str	r2, [r3, #0]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	3328      	adds	r3, #40	; 0x28
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fe fbb6 	bl	800d990 <_ZN8touchgfx9TypedTextD1Ev>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff fdc6 	bl	800edb8 <_ZN8touchgfx6WidgetD1Ev>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4618      	mov	r0, r3
 800f230:	3708      	adds	r7, #8
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	08029470 	.word	0x08029470

0800f23c <_ZN8touchgfx8TextAreaD0Ev>:
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff ffe1 	bl	800f20c <_ZN8touchgfx8TextAreaD1Ev>
 800f24a:	2148      	movs	r1, #72	; 0x48
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f017 f9ca 	bl	80265e6 <_ZdlPvj>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4618      	mov	r0, r3
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
        : TextArea()
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4618      	mov	r0, r3
 800f268:	f7ff fe92 	bl	800ef90 <_ZN8touchgfx8TextAreaC1Ev>
 800f26c:	4a03      	ldr	r2, [pc, #12]	; (800f27c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	601a      	str	r2, [r3, #0]
    {
    }
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4618      	mov	r0, r3
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	080295dc 	.word	0x080295dc

0800f280 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff fb5c 	bl	800e948 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800f290:	bf00      	nop
 800f292:	3708      	adds	r7, #8
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7ff ff9b 	bl	800f1de <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	4a05      	ldr	r2, [pc, #20]	; (800f2d0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7ff ffa3 	bl	800f20c <_ZN8touchgfx8TextAreaD1Ev>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	080295dc 	.word	0x080295dc

0800f2d4 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff ffe7 	bl	800f2b0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f2e2:	2148      	movs	r1, #72	; 0x48
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f017 f97e 	bl	80265e6 <_ZdlPvj>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7ff ffac 	bl	800f25c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800f304:	4a05      	ldr	r2, [pc, #20]	; (800f31c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	601a      	str	r2, [r3, #0]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4618      	mov	r0, r3
 800f314:	3708      	adds	r7, #8
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	08028bd8 	.word	0x08028bd8

0800f320 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	683a      	ldr	r2, [r7, #0]
 800f32e:	649a      	str	r2, [r3, #72]	; 0x48
    }
 800f330:	bf00      	nop
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800f348:	4618      	mov	r0, r3
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800f35e:	6839      	ldr	r1, [r7, #0]
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7ff ffdd 	bl	800f320 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800f366:	bf00      	nop
 800f368:	3708      	adds	r7, #8
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
	...

0800f370 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	4618      	mov	r0, r3
 800f37c:	2326      	movs	r3, #38	; 0x26
 800f37e:	461a      	mov	r2, r3
 800f380:	2100      	movs	r1, #0
 800f382:	f017 fb64 	bl	8026a4e <memset>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4618      	mov	r0, r3
 800f38a:	f7ff fd03 	bl	800ed94 <_ZN8touchgfx6WidgetC1Ev>
 800f38e:	4a0a      	ldr	r2, [pc, #40]	; (800f3b8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	601a      	str	r2, [r3, #0]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	629a      	str	r2, [r3, #40]	; 0x28
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2101      	movs	r1, #1
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7ff fbd4 	bl	800eb54 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	08029400 	.word	0x08029400

0800f3bc <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	4a05      	ldr	r2, [pc, #20]	; (800f3dc <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff fcf3 	bl	800edb8 <_ZN8touchgfx6WidgetD1Ev>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	08029400 	.word	0x08029400

0800f3e0 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff ffe7 	bl	800f3bc <_ZN8touchgfx14AbstractButtonD1Ev>
 800f3ee:	2130      	movs	r1, #48	; 0x30
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f017 f8f8 	bl	80265e6 <_ZdlPvj>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7ff ffb0 	bl	800f370 <_ZN8touchgfx14AbstractButtonC1Ev>
 800f410:	4a0c      	ldr	r2, [pc, #48]	; (800f444 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	601a      	str	r2, [r3, #0]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	332e      	adds	r3, #46	; 0x2e
 800f41a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f41e:	4618      	mov	r0, r3
 800f420:	f7ff fa32 	bl	800e888 <_ZN8touchgfx6BitmapC1Et>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	3330      	adds	r3, #48	; 0x30
 800f428:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7ff fa2b 	bl	800e888 <_ZN8touchgfx6BitmapC1Et>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	22ff      	movs	r2, #255	; 0xff
 800f436:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4618      	mov	r0, r3
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	08029568 	.word	0x08029568

0800f448 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	4a05      	ldr	r2, [pc, #20]	; (800f468 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	601a      	str	r2, [r3, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4618      	mov	r0, r3
 800f45a:	f7ff fc11 	bl	800ec80 <_ZN8touchgfx6ScreenD1Ev>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	08028ba4 	.word	0x08028ba4

0800f46c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7ff ffe7 	bl	800f448 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800f47a:	2140      	movs	r1, #64	; 0x40
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f017 f8b2 	bl	80265e6 <_ZdlPvj>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800f48c:	b590      	push	{r4, r7, lr}
 800f48e:	b09f      	sub	sp, #124	; 0x7c
 800f490:	af02      	add	r7, sp, #8
 800f492:	6178      	str	r0, [r7, #20]
    frameCountInteraction2Interval(0)
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	4618      	mov	r0, r3
 800f498:	f000 fa8a 	bl	800f9b0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800f49c:	4ab0      	ldr	r2, [pc, #704]	; (800f760 <_ZN15Screen1ViewBaseC1Ev+0x2d4>)
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	3340      	adds	r3, #64	; 0x40
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7ff fca8 	bl	800edfc <_ZN8touchgfx3BoxC1Ev>
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f4b2:	f107 031c 	add.w	r3, r7, #28
 800f4b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7ff f9e4 	bl	800e888 <_ZN8touchgfx6BitmapC1Et>
 800f4c0:	f107 031c 	add.w	r3, r7, #28
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	f7ff fcca 	bl	800ee60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	3398      	adds	r3, #152	; 0x98
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff fd0d 	bl	800eef0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	33cc      	adds	r3, #204	; 0xcc
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 faa0 	bl	800fa20 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev>
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7ff ff8a 	bl	800f400 <_ZN8touchgfx6ButtonC1Ev>
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800f4f2:	f107 0320 	add.w	r3, r7, #32
 800f4f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7ff f9c4 	bl	800e888 <_ZN8touchgfx6BitmapC1Et>
 800f500:	f107 0320 	add.w	r3, r7, #32
 800f504:	4619      	mov	r1, r3
 800f506:	4620      	mov	r0, r4
 800f508:	f7ff fcaa 	bl	800ee60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	2200      	movs	r2, #0
 800f510:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
{
    __background.setPosition(0, 0, 320, 240);
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f51a:	23f0      	movs	r3, #240	; 0xf0
 800f51c:	9300      	str	r3, [sp, #0]
 800f51e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f522:	2200      	movs	r2, #0
 800f524:	2100      	movs	r1, #0
 800f526:	f7ff fa2d 	bl	800e984 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f530:	2300      	movs	r3, #0
 800f532:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800f536:	2300      	movs	r3, #0
 800f538:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800f53c:	2300      	movs	r3, #0
 800f53e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f542:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800f546:	041b      	lsls	r3, r3, #16
 800f548:	461a      	mov	r2, r3
 800f54a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800f54e:	021b      	lsls	r3, r3, #8
 800f550:	431a      	orrs	r2, r3
 800f552:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f556:	4313      	orrs	r3, r2
 800f558:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f55c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f560:	4611      	mov	r1, r2
 800f562:	4618      	mov	r0, r3
 800f564:	f7ff f94a 	bl	800e7fc <_ZN8touchgfx9colortypeC1Em>
 800f568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f56a:	4619      	mov	r1, r3
 800f56c:	4620      	mov	r0, r4
 800f56e:	f7ff fc69 	bl	800ee44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	3340      	adds	r3, #64	; 0x40
 800f578:	4619      	mov	r1, r3
 800f57a:	4610      	mov	r0, r2
 800f57c:	f7ff fbd8 	bl	800ed30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	336c      	adds	r3, #108	; 0x6c
 800f584:	2200      	movs	r2, #0
 800f586:	2100      	movs	r1, #0
 800f588:	4618      	mov	r0, r3
 800f58a:	f7ff fa54 	bl	800ea36 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f598:	2100      	movs	r1, #0
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff f974 	bl	800e888 <_ZN8touchgfx6BitmapC1Et>
 800f5a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f004 fdaf 	bl	801410a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800f5ac:	697a      	ldr	r2, [r7, #20]
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	336c      	adds	r3, #108	; 0x6c
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	4610      	mov	r0, r2
 800f5b6:	f7ff fbbb 	bl	800ed30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    boxWithBorder1.setPosition(0, 15, 320, 95);
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800f5c0:	235f      	movs	r3, #95	; 0x5f
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f5c8:	220f      	movs	r2, #15
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	f7ff f9da 	bl	800e984 <_ZN8touchgfx8Drawable11setPositionEssss>
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800f5d6:	23ff      	movs	r3, #255	; 0xff
 800f5d8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 800f5dc:	23ff      	movs	r3, #255	; 0xff
 800f5de:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 800f5e2:	23ff      	movs	r3, #255	; 0xff
 800f5e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f5e8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800f5ec:	041b      	lsls	r3, r3, #16
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800f5f4:	021b      	lsls	r3, r3, #8
 800f5f6:	431a      	orrs	r2, r3
 800f5f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f602:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f606:	4611      	mov	r1, r2
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff f8f7 	bl	800e7fc <_ZN8touchgfx9colortypeC1Em>
 800f60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f610:	4619      	mov	r1, r3
 800f612:	4620      	mov	r0, r4
 800f614:	f7ff fc16 	bl	800ee44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(107, 104, 104));
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800f61e:	236b      	movs	r3, #107	; 0x6b
 800f620:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800f624:	2368      	movs	r3, #104	; 0x68
 800f626:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800f62a:	2368      	movs	r3, #104	; 0x68
 800f62c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800f630:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800f634:	041b      	lsls	r3, r3, #16
 800f636:	461a      	mov	r2, r3
 800f638:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f63c:	021b      	lsls	r3, r3, #8
 800f63e:	431a      	orrs	r2, r3
 800f640:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f644:	4313      	orrs	r3, r2
 800f646:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f64a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f64e:	4611      	mov	r1, r2
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff f8d3 	bl	800e7fc <_ZN8touchgfx9colortypeC1Em>
 800f656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f658:	4619      	mov	r1, r3
 800f65a:	4620      	mov	r0, r4
 800f65c:	f7ff fc64 	bl	800ef28 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    boxWithBorder1.setBorderSize(1);
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	3398      	adds	r3, #152	; 0x98
 800f664:	2101      	movs	r1, #1
 800f666:	4618      	mov	r0, r3
 800f668:	f7ff fc6c 	bl	800ef44 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    add(boxWithBorder1);
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	3398      	adds	r3, #152	; 0x98
 800f672:	4619      	mov	r1, r3
 800f674:	4610      	mov	r0, r2
 800f676:	f7ff fb5b 	bl	800ed30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setPosition(30, 52, 516, 20);
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800f680:	2314      	movs	r3, #20
 800f682:	9300      	str	r3, [sp, #0]
 800f684:	f44f 7301 	mov.w	r3, #516	; 0x204
 800f688:	2234      	movs	r2, #52	; 0x34
 800f68a:	211e      	movs	r1, #30
 800f68c:	f7ff f97a 	bl	800e984 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800f696:	2300      	movs	r3, #0
 800f698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f69c:	2300      	movs	r3, #0
 800f69e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800f6a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6ac:	041b      	lsls	r3, r3, #16
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800f6b4:	021b      	lsls	r3, r3, #8
 800f6b6:	431a      	orrs	r2, r3
 800f6b8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f6c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f6c6:	4611      	mov	r1, r2
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7ff f897 	bl	800e7fc <_ZN8touchgfx9colortypeC1Em>
 800f6ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6d0:	663c      	str	r4, [r7, #96]	; 0x60
 800f6d2:	61bb      	str	r3, [r7, #24]
        color = newColor;
 800f6d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6d6:	69ba      	ldr	r2, [r7, #24]
 800f6d8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f6da:	bf00      	nop
    textArea1.setLinespacing(0);
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	33cc      	adds	r3, #204	; 0xcc
 800f6e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        linespace = space;
 800f6e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6ea:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800f6ee:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f6f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	3384      	adds	r3, #132	; 0x84
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800f6fa:	463a      	mov	r2, r7
 800f6fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f6fe:	4610      	mov	r0, r2
 800f700:	4798      	blx	r3
 800f702:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f706:	463a      	mov	r2, r7
 800f708:	ca07      	ldmia	r2, {r0, r1, r2}
 800f70a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f70e:	bf00      	nop
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_3WQK).getText());
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 800f716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f71a:	2100      	movs	r1, #0
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7ff fc21 	bl	800ef64 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f722:	4b10      	ldr	r3, [pc, #64]	; (800f764 <_ZN15Screen1ViewBaseC1Ev+0x2d8>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d105      	bne.n	800f736 <_ZN15Screen1ViewBaseC1Ev+0x2aa>
 800f72a:	4b0f      	ldr	r3, [pc, #60]	; (800f768 <_ZN15Screen1ViewBaseC1Ev+0x2dc>)
 800f72c:	4a0f      	ldr	r2, [pc, #60]	; (800f76c <_ZN15Screen1ViewBaseC1Ev+0x2e0>)
 800f72e:	2160      	movs	r1, #96	; 0x60
 800f730:	480f      	ldr	r0, [pc, #60]	; (800f770 <_ZN15Screen1ViewBaseC1Ev+0x2e4>)
 800f732:	f016 ff87 	bl	8026644 <__assert_func>
 800f736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f73a:	66fb      	str	r3, [r7, #108]	; 0x6c
        return typedTextId < numberOfTypedTexts;
 800f73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f73e:	889a      	ldrh	r2, [r3, #4]
 800f740:	4b0c      	ldr	r3, [pc, #48]	; (800f774 <_ZN15Screen1ViewBaseC1Ev+0x2e8>)
 800f742:	881b      	ldrh	r3, [r3, #0]
 800f744:	429a      	cmp	r2, r3
 800f746:	bf34      	ite	cc
 800f748:	2301      	movcc	r3, #1
 800f74a:	2300      	movcs	r3, #0
 800f74c:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d114      	bne.n	800f77c <_ZN15Screen1ViewBaseC1Ev+0x2f0>
 800f752:	4b09      	ldr	r3, [pc, #36]	; (800f778 <_ZN15Screen1ViewBaseC1Ev+0x2ec>)
 800f754:	4a05      	ldr	r2, [pc, #20]	; (800f76c <_ZN15Screen1ViewBaseC1Ev+0x2e0>)
 800f756:	2161      	movs	r1, #97	; 0x61
 800f758:	4805      	ldr	r0, [pc, #20]	; (800f770 <_ZN15Screen1ViewBaseC1Ev+0x2e4>)
 800f75a:	f016 ff73 	bl	8026644 <__assert_func>
 800f75e:	bf00      	nop
 800f760:	08028ad8 	.word	0x08028ad8
 800f764:	200258ac 	.word	0x200258ac
 800f768:	080279d8 	.word	0x080279d8
 800f76c:	08027adc 	.word	0x08027adc
 800f770:	08027a58 	.word	0x08027a58
 800f774:	200258b0 	.word	0x200258b0
 800f778:	08027a9c 	.word	0x08027a9c
        return texts->getText(typedTextId);
 800f77c:	4b41      	ldr	r3, [pc, #260]	; (800f884 <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f782:	4611      	mov	r1, r2
 800f784:	4618      	mov	r0, r3
 800f786:	f000 fd0d 	bl	80101a4 <_ZNK8touchgfx5Texts7getTextEt>
 800f78a:	4603      	mov	r3, r0
 800f78c:	bf00      	nop
 800f78e:	4a3e      	ldr	r2, [pc, #248]	; (800f888 <_ZN15Screen1ViewBaseC1Ev+0x3fc>)
 800f790:	2135      	movs	r1, #53	; 0x35
 800f792:	4620      	mov	r0, r4
 800f794:	f009 fa3c 	bl	8018c10 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fe f8f7 	bl	800d990 <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.setWildcard(textArea1Buffer);
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	4610      	mov	r0, r2
 800f7b2:	f7ff fdcf 	bl	800f354 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G9G3));
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800f7bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7ff fbce 	bl	800ef64 <_ZN8touchgfx9TypedTextC1Et>
 800f7c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	f004 fa9c 	bl	8013d0c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f7d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fe f8d9 	bl	800d990 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 800f7de:	697a      	ldr	r2, [r7, #20]
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	33cc      	adds	r3, #204	; 0xcc
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	4610      	mov	r0, r2
 800f7e8:	f7ff faa2 	bl	800ed30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(130, 147);
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800f7f2:	2293      	movs	r2, #147	; 0x93
 800f7f4:	2182      	movs	r1, #130	; 0x82
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7ff f91d 	bl	800ea36 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_TINY_FILL_PRESSED_ID));
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	f503 749a 	add.w	r4, r3, #308	; 0x134
 800f802:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f806:	2101      	movs	r1, #1
 800f808:	4618      	mov	r0, r3
 800f80a:	f7ff f83d 	bl	800e888 <_ZN8touchgfx6BitmapC1Et>
 800f80e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f812:	2102      	movs	r1, #2
 800f814:	4618      	mov	r0, r3
 800f816:	f7ff f837 	bl	800e888 <_ZN8touchgfx6BitmapC1Et>
 800f81a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f81e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f822:	4619      	mov	r1, r3
 800f824:	4620      	mov	r0, r4
 800f826:	f004 fac3 	bl	8013db0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    add(button1);
 800f82a:	697a      	ldr	r2, [r7, #20]
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800f832:	4619      	mov	r1, r3
 800f834:	4610      	mov	r0, r2
 800f836:	f7ff fa7b 	bl	800ed30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image2.setXY(135, 152);
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f840:	2298      	movs	r2, #152	; 0x98
 800f842:	2187      	movs	r1, #135	; 0x87
 800f844:	4618      	mov	r0, r3
 800f846:	f7ff f8f6 	bl	800ea36 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_AV_PLAY_CIRCLE_OUTLINE_50_50_000000_SVG_ID));
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800f850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f854:	2103      	movs	r1, #3
 800f856:	4618      	mov	r0, r3
 800f858:	f7ff f816 	bl	800e888 <_ZN8touchgfx6BitmapC1Et>
 800f85c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f860:	4619      	mov	r1, r3
 800f862:	4620      	mov	r0, r4
 800f864:	f004 fc51 	bl	801410a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image2);
 800f868:	697a      	ldr	r2, [r7, #20]
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f870:	4619      	mov	r1, r3
 800f872:	4610      	mov	r0, r2
 800f874:	f7ff fa5c 	bl	800ed30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	4618      	mov	r0, r3
 800f87c:	3774      	adds	r7, #116	; 0x74
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd90      	pop	{r4, r7, pc}
 800f882:	bf00      	nop
 800f884:	200258b8 	.word	0x200258b8
 800f888:	08027b14 	.word	0x08027b14

0800f88c <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	4a15      	ldr	r2, [pc, #84]	; (800f8ec <_ZN15Screen1ViewBaseD1Ev+0x60>)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	601a      	str	r2, [r3, #0]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f000 fa49 	bl	800fd38 <_ZN8touchgfx5ImageD1Ev>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f000 fa87 	bl	800fdc0 <_ZN8touchgfx6ButtonD1Ev>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	33cc      	adds	r3, #204	; 0xcc
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f000 f9fa 	bl	800fcb0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	3398      	adds	r3, #152	; 0x98
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f000 fa5b 	bl	800fd7c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	336c      	adds	r3, #108	; 0x6c
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f000 fa34 	bl	800fd38 <_ZN8touchgfx5ImageD1Ev>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3340      	adds	r3, #64	; 0x40
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff fae9 	bl	800eeac <_ZN8touchgfx3BoxD1Ev>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7ff fdb3 	bl	800f448 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3708      	adds	r7, #8
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	08028ad8 	.word	0x08028ad8

0800f8f0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
}
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7ff ffc7 	bl	800f88c <_ZN15Screen1ViewBaseD1Ev>
 800f8fe:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f016 fe6f 	bl	80265e6 <_ZdlPvj>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4618      	mov	r0, r3
 800f90c:	3708      	adds	r7, #8
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}

0800f912 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800f912:	b480      	push	{r7}
 800f914:	b083      	sub	sp, #12
 800f916:	af00      	add	r7, sp, #0
 800f918:	6078      	str	r0, [r7, #4]

}
 800f91a:	bf00      	nop
 800f91c:	370c      	adds	r7, #12
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr
	...

0800f928 <_ZN15Screen1ViewBase15handleTickEventEv>:

void Screen1ViewBase::handleTickEvent()
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af02      	add	r7, sp, #8
 800f92e:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When every N tick move textArea1
    //Move textArea1 to x:-550, y:52 with QuadOut easing in 10000 ms (600 Ticks)
    textArea1.clearMoveAnimationEndedAction();
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	33cc      	adds	r3, #204	; 0xcc
 800f934:	4618      	mov	r0, r3
 800f936:	f000 f8af 	bl	800fa98 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>
    textArea1.startMoveAnimation(-550, 52, 600, touchgfx::EasingEquations::quadEaseOut, touchgfx::EasingEquations::quadEaseOut);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800f940:	4b18      	ldr	r3, [pc, #96]	; (800f9a4 <_ZN15Screen1ViewBase15handleTickEventEv+0x7c>)
 800f942:	9301      	str	r3, [sp, #4]
 800f944:	4b17      	ldr	r3, [pc, #92]	; (800f9a4 <_ZN15Screen1ViewBase15handleTickEventEv+0x7c>)
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f94c:	2234      	movs	r2, #52	; 0x34
 800f94e:	4916      	ldr	r1, [pc, #88]	; (800f9a8 <_ZN15Screen1ViewBase15handleTickEventEv+0x80>)
 800f950:	f000 f8af 	bl	800fab2 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>

    frameCountInteraction2Interval++;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f95a:	1c5a      	adds	r2, r3, #1
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    if(frameCountInteraction2Interval == TICK_INTERACTION2_INTERVAL)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f968:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800f96c:	d115      	bne.n	800f99a <_ZN15Screen1ViewBase15handleTickEventEv+0x72>
    {
        //Interaction2
        //When every N tick move textArea1
        //Move textArea1 to x:270, y:52 with LinearOut easing in 1 ms (1 Ticks)
        textArea1.clearMoveAnimationEndedAction();
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	33cc      	adds	r3, #204	; 0xcc
 800f972:	4618      	mov	r0, r3
 800f974:	f000 f890 	bl	800fa98 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>
        textArea1.startMoveAnimation(270, 52, 1, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800f97e:	4b0b      	ldr	r3, [pc, #44]	; (800f9ac <_ZN15Screen1ViewBase15handleTickEventEv+0x84>)
 800f980:	9301      	str	r3, [sp, #4]
 800f982:	4b0a      	ldr	r3, [pc, #40]	; (800f9ac <_ZN15Screen1ViewBase15handleTickEventEv+0x84>)
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	2301      	movs	r3, #1
 800f988:	2234      	movs	r2, #52	; 0x34
 800f98a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800f98e:	f000 f890 	bl	800fab2 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>
        frameCountInteraction2Interval = 0;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
}
 800f99a:	bf00      	nop
 800f99c:	3708      	adds	r7, #8
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	0801760b 	.word	0x0801760b
 800f9a8:	fffffdda 	.word	0xfffffdda
 800f9ac:	08017607 	.word	0x08017607

0800f9b0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f007 fc44 	bl	8017248 <_ZN8touchgfx6ScreenC1Ev>
 800f9c0:	4a05      	ldr	r2, [pc, #20]	; (800f9d8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	601a      	str	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	08028ba4 	.word	0x08028ba4

0800f9dc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	4a05      	ldr	r2, [pc, #20]	; (800f9fc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	601a      	str	r2, [r3, #0]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7ff fc5f 	bl	800f2b0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3708      	adds	r7, #8
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	08028bd8 	.word	0x08028bd8

0800fa00 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7ff ffe7 	bl	800f9dc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fa0e:	214c      	movs	r1, #76	; 0x4c
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f016 fde8 	bl	80265e6 <_ZdlPvj>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
          moveAnimationStartY(0),
          moveAnimationEndX(0),
          moveAnimationEndY(0),
          moveAnimationXEquation(),
          moveAnimationYEquation(),
          moveAnimationEndedCallback(0)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7ff fc62 	bl	800f2f4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800fa30:	4a18      	ldr	r2, [pc, #96]	; (800fa94 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev+0x74>)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	601a      	str	r2, [r3, #0]
          moveAnimationRunning(false),
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          moveAnimationCounter(0),
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2200      	movs	r2, #0
 800fa42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          moveAnimationDelay(0),
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
          moveAnimationDuration(0),
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
          moveAnimationStartX(0),
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
          moveAnimationStartY(0),
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
          moveAnimationEndX(0),
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          moveAnimationEndY(0),
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
          moveAnimationXEquation(),
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	65da      	str	r2, [r3, #92]	; 0x5c
          moveAnimationYEquation(),
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	661a      	str	r2, [r3, #96]	; 0x60
          moveAnimationEndedCallback(0)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	665a      	str	r2, [r3, #100]	; 0x64
    {
    }
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3708      	adds	r7, #8
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	08028b0c 	.word	0x08028b0c

0800fa98 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>:
     * The effect is that any action set using setMoveAnimationEndedAction() will not be
     * executed.
     *
     * @see setMoveAnimationEndedAction
     */
    void clearMoveAnimationEndedAction()
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
    {
        moveAnimationEndedCallback = 0;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2200      	movs	r2, #0
 800faa4:	665a      	str	r2, [r3, #100]	; 0x64
    }
 800faa6:	bf00      	nop
 800faa8:	370c      	adds	r7, #12
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>:
     *                              EasingEquations::linearEaseNone.
     * @param  yProgressionEquation (Optional) The equation that describes the development of the
     *                              Y position during the animation. Default is
     *                              EasingEquations::linearEaseNone.
     */
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b084      	sub	sp, #16
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	60f8      	str	r0, [r7, #12]
 800faba:	4608      	mov	r0, r1
 800fabc:	4611      	mov	r1, r2
 800fabe:	461a      	mov	r2, r3
 800fac0:	4603      	mov	r3, r0
 800fac2:	817b      	strh	r3, [r7, #10]
 800fac4:	460b      	mov	r3, r1
 800fac6:	813b      	strh	r3, [r7, #8]
 800fac8:	4613      	mov	r3, r2
 800faca:	80fb      	strh	r3, [r7, #6]
    {
        if (!moveAnimationRunning)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800fad2:	f083 0301 	eor.w	r3, r3, #1
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d007      	beq.n	800faec <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_+0x3a>
        {
            Application::getInstance()->registerTimerWidget(this);
 800fadc:	f006 f854 	bl	8015b88 <_ZN8touchgfx11Application11getInstanceEv>
 800fae0:	4602      	mov	r2, r0
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	4619      	mov	r1, r3
 800fae6:	4610      	mov	r0, r2
 800fae8:	f7ff f8ab 	bl	800ec42 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        }

        moveAnimationCounter = 0;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2200      	movs	r2, #0
 800faf0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        moveAnimationStartX = T::getX();
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fe ff65 	bl	800e9c6 <_ZNK8touchgfx8Drawable4getXEv>
 800fafc:	4603      	mov	r3, r0
 800fafe:	461a      	mov	r2, r3
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        moveAnimationStartY = T::getY();
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fe ff69 	bl	800e9e0 <_ZNK8touchgfx8Drawable4getYEv>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	461a      	mov	r2, r3
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        moveAnimationEndX = endX;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	897a      	ldrh	r2, [r7, #10]
 800fb1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
        moveAnimationEndY = endY;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	893a      	ldrh	r2, [r7, #8]
 800fb24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        moveAnimationDuration = duration;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	88fa      	ldrh	r2, [r7, #6]
 800fb2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        moveAnimationXEquation = xProgressionEquation;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	69ba      	ldr	r2, [r7, #24]
 800fb34:	65da      	str	r2, [r3, #92]	; 0x5c
        moveAnimationYEquation = yProgressionEquation;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	69fa      	ldr	r2, [r7, #28]
 800fb3a:	661a      	str	r2, [r3, #96]	; 0x60

        moveAnimationRunning = true;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d107      	bne.n	800fb5e <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_+0xac>
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d102      	bne.n	800fb5e <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_+0xac>
        {
            nextMoveAnimationStep(); // Set end position and shut down
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f000 f804 	bl	800fb66 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv>
        }
    }
 800fb5e:	bf00      	nop
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv>:
        nextMoveAnimationStep();
    }

protected:
    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 800fb66:	b590      	push	{r4, r7, lr}
 800fb68:	b085      	sub	sp, #20
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f000 8097 	beq.w	800fca8 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x142>
        {
            moveAnimationCounter++;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fb80:	3301      	adds	r3, #1
 800fb82:	b29a      	uxth	r2, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
            if (moveAnimationCounter >= moveAnimationDelay)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb96:	429a      	cmp	r2, r3
 800fb98:	f0c0 8086 	bcc.w	800fca8 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x142>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fba2:	461a      	mov	r2, r3
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbaa:	1ad3      	subs	r3, r2, r3
 800fbac:	60fb      	str	r3, [r7, #12]

                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	b298      	uxth	r0, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800fbbc:	b29a      	uxth	r2, r3
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	b21a      	sxth	r2, r3
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	47a0      	blx	r4
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	817b      	strh	r3, [r7, #10]
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	b298      	uxth	r0, r3
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	1ad3      	subs	r3, r2, r3
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	b21a      	sxth	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fbfe:	2100      	movs	r1, #0
 800fc00:	47a0      	blx	r4
 800fc02:	4603      	mov	r3, r0
 800fc04:	813b      	strh	r3, [r7, #8]

                T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800fc0e:	b29a      	uxth	r2, r3
 800fc10:	897b      	ldrh	r3, [r7, #10]
 800fc12:	4413      	add	r3, r2
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	b219      	sxth	r1, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800fc1e:	b29a      	uxth	r2, r3
 800fc20:	893b      	ldrh	r3, [r7, #8]
 800fc22:	4413      	add	r3, r2
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	b21b      	sxth	r3, r3
 800fc28:	461a      	mov	r2, r3
 800fc2a:	f7fe ffbd 	bl	800eba8 <_ZN8touchgfx8Drawable6moveToEss>

                if (moveAnimationCounter >= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fc34:	461a      	mov	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fc44:	440b      	add	r3, r1
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d32e      	bcc.n	800fca8 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x142>
                {
                    // End of animation
                    moveAnimationRunning = false;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                    moveAnimationCounter = 0;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                    Application::getInstance()->unregisterTimerWidget(this);
 800fc5a:	f005 ff95 	bl	8015b88 <_ZN8touchgfx11Application11getInstanceEv>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4619      	mov	r1, r3
 800fc64:	4610      	mov	r0, r2
 800fc66:	f7fe fffb 	bl	800ec60 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>

                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00d      	beq.n	800fc8e <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x128>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	330c      	adds	r3, #12
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4610      	mov	r0, r2
 800fc82:	4798      	blx	r3
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d001      	beq.n	800fc8e <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x128>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e000      	b.n	800fc90 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x12a>
 800fc8e:	2300      	movs	r3, #0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d009      	beq.n	800fca8 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x142>
                    {
                        moveAnimationEndedCallback->execute(*this);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	3308      	adds	r3, #8
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	6879      	ldr	r1, [r7, #4]
 800fca4:	4610      	mov	r0, r2
 800fca6:	4798      	blx	r3
                    }
                }
            }
        }
    }
 800fca8:	bf00      	nop
 800fcaa:	3714      	adds	r7, #20
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd90      	pop	{r4, r7, pc}

0800fcb0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>:
class MoveAnimator : public T
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	4a05      	ldr	r2, [pc, #20]	; (800fcd0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev+0x20>)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	601a      	str	r2, [r3, #0]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7ff fe8b 	bl	800f9dc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	08028b0c 	.word	0x08028b0c

0800fcd4 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED0Ev>:
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7ff ffe7 	bl	800fcb0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>
 800fce2:	2168      	movs	r1, #104	; 0x68
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f016 fc7e 	bl	80265e6 <_ZdlPvj>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	4a05      	ldr	r2, [pc, #20]	; (800fd14 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	601a      	str	r2, [r3, #0]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7fe fdff 	bl	800e908 <_ZN8touchgfx8DrawableD1Ev>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3708      	adds	r7, #8
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	08029218 	.word	0x08029218

0800fd18 <_ZN8touchgfx9ContainerD0Ev>:
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f7ff ffe7 	bl	800fcf4 <_ZN8touchgfx9ContainerD1Ev>
 800fd26:	212c      	movs	r1, #44	; 0x2c
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f016 fc5c 	bl	80265e6 <_ZdlPvj>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	4a05      	ldr	r2, [pc, #20]	; (800fd58 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	601a      	str	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7ff f835 	bl	800edb8 <_ZN8touchgfx6WidgetD1Ev>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4618      	mov	r0, r3
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	080296d4 	.word	0x080296d4

0800fd5c <_ZN8touchgfx5ImageD0Ev>:
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f7ff ffe7 	bl	800fd38 <_ZN8touchgfx5ImageD1Ev>
 800fd6a:	212c      	movs	r1, #44	; 0x2c
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f016 fc3a 	bl	80265e6 <_ZdlPvj>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4618      	mov	r0, r3
 800fd76:	3708      	adds	r7, #8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	4a05      	ldr	r2, [pc, #20]	; (800fd9c <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	601a      	str	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff f88d 	bl	800eeac <_ZN8touchgfx3BoxD1Ev>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	0802966c 	.word	0x0802966c

0800fda0 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7ff ffe7 	bl	800fd7c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800fdae:	2134      	movs	r1, #52	; 0x34
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f016 fc18 	bl	80265e6 <_ZdlPvj>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	4a05      	ldr	r2, [pc, #20]	; (800fde0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7ff faf3 	bl	800f3bc <_ZN8touchgfx14AbstractButtonD1Ev>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	08029568 	.word	0x08029568

0800fde4 <_ZN8touchgfx6ButtonD0Ev>:
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f7ff ffe7 	bl	800fdc0 <_ZN8touchgfx6ButtonD1Ev>
 800fdf2:	2134      	movs	r1, #52	; 0x34
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f016 fbf6 	bl	80265e6 <_ZdlPvj>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fe fe96 	bl	800eb40 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f7ff fea6 	bl	800fb66 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv>
    }
 800fe1a:	bf00      	nop
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 800fe22:	b480      	push	{r7}
 800fe24:	b083      	sub	sp, #12
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	887a      	ldrh	r2, [r7, #2]
 800fe32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    }
 800fe36:	bf00      	nop
 800fe38:	370c      	adds	r7, #12
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr

0800fe42 <_ZNK8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800fe42:	b480      	push	{r7}
 800fe44:	b083      	sub	sp, #12
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    }
 800fe50:	4618      	mov	r0, r3
 800fe52:	370c      	adds	r7, #12
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	af00      	add	r7, sp, #0
    return bitmap_database;
 800fe60:	4b02      	ldr	r3, [pc, #8]	; (800fe6c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr
 800fe6c:	08028cc8 	.word	0x08028cc8

0800fe70 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800fe70:	b480      	push	{r7}
 800fe72:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800fe74:	2304      	movs	r3, #4
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800fe80:	b480      	push	{r7}
 800fe82:	b085      	sub	sp, #20
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	460b      	mov	r3, r1
 800fe8a:	607a      	str	r2, [r7, #4]
 800fe8c:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800fe8e:	2300      	movs	r3, #0
    }
 800fe90:	4618      	mov	r0, r3
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800fea4:	2300      	movs	r3, #0
    }
 800fea6:	4618      	mov	r0, r3
 800fea8:	370c      	adds	r7, #12
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr

0800feb2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800feb2:	b480      	push	{r7}
 800feb4:	b083      	sub	sp, #12
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800feba:	2300      	movs	r3, #0
    }
 800febc:	4618      	mov	r0, r3
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	4613      	mov	r3, r2
 800fed4:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800fed6:	4a07      	ldr	r2, [pc, #28]	; (800fef4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	6013      	str	r3, [r2, #0]
        fonts = f;
 800fedc:	4a06      	ldr	r2, [pc, #24]	; (800fef8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800fee2:	4a06      	ldr	r2, [pc, #24]	; (800fefc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800fee4:	88fb      	ldrh	r3, [r7, #6]
 800fee6:	8013      	strh	r3, [r2, #0]
    }
 800fee8:	bf00      	nop
 800feea:	3714      	adds	r7, #20
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr
 800fef4:	200258ac 	.word	0x200258ac
 800fef8:	200258b4 	.word	0x200258b4
 800fefc:	200258b0 	.word	0x200258b0

0800ff00 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800ff00:	b40e      	push	{r1, r2, r3}
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b085      	sub	sp, #20
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800ff0a:	f107 0320 	add.w	r3, r7, #32
 800ff0e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	69fa      	ldr	r2, [r7, #28]
 800ff14:	2100      	movs	r1, #0
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f006 fdcc 	bl	8016ab4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800ff20:	89fb      	ldrh	r3, [r7, #14]
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3714      	adds	r7, #20
 800ff26:	46bd      	mov	sp, r7
 800ff28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff2c:	b003      	add	sp, #12
 800ff2e:	4770      	bx	lr

0800ff30 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800ff30:	b40c      	push	{r2, r3}
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b084      	sub	sp, #16
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800ff3e:	f107 031c 	add.w	r3, r7, #28
 800ff42:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800ff44:	78f9      	ldrb	r1, [r7, #3]
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	69ba      	ldr	r2, [r7, #24]
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f006 fdb2 	bl	8016ab4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800ff50:	4603      	mov	r3, r0
 800ff52:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800ff54:	89fb      	ldrh	r3, [r7, #14]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff60:	b002      	add	sp, #8
 800ff62:	4770      	bx	lr

0800ff64 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b08a      	sub	sp, #40	; 0x28
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d016      	beq.n	800ffa6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	3322      	adds	r3, #34	; 0x22
 800ff7c:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff80:	8adb      	ldrh	r3, [r3, #22]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d105      	bne.n	800ff92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800ff86:	4b43      	ldr	r3, [pc, #268]	; (8010094 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800ff88:	4a43      	ldr	r2, [pc, #268]	; (8010098 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800ff8a:	21c5      	movs	r1, #197	; 0xc5
 800ff8c:	4843      	ldr	r0, [pc, #268]	; (801009c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800ff8e:	f016 fb59 	bl	8026644 <__assert_func>
            return buffer[pos];
 800ff92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff94:	8a9b      	ldrh	r3, [r3, #20]
 800ff96:	461a      	mov	r2, r3
 800ff98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d001      	beq.n	800ffa6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e000      	b.n	800ffa8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d06a      	beq.n	8010082 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f008 f886 	bl	80180be <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	3322      	adds	r3, #34	; 0x22
 800ffb6:	623b      	str	r3, [r7, #32]
 800ffb8:	2301      	movs	r3, #1
 800ffba:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	8adb      	ldrh	r3, [r3, #22]
 800ffc0:	8bfa      	ldrh	r2, [r7, #30]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d305      	bcc.n	800ffd2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800ffc6:	4b36      	ldr	r3, [pc, #216]	; (80100a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800ffc8:	4a36      	ldr	r2, [pc, #216]	; (80100a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800ffca:	21cb      	movs	r1, #203	; 0xcb
 800ffcc:	4833      	ldr	r0, [pc, #204]	; (801009c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800ffce:	f016 fb39 	bl	8026644 <__assert_func>
            const uint16_t index = pos + offset;
 800ffd2:	6a3b      	ldr	r3, [r7, #32]
 800ffd4:	8a9a      	ldrh	r2, [r3, #20]
 800ffd6:	8bfb      	ldrh	r3, [r7, #30]
 800ffd8:	4413      	add	r3, r2
 800ffda:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800ffdc:	8bbb      	ldrh	r3, [r7, #28]
 800ffde:	2b09      	cmp	r3, #9
 800ffe0:	d801      	bhi.n	800ffe6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800ffe2:	8bbb      	ldrh	r3, [r7, #28]
 800ffe4:	e001      	b.n	800ffea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800ffe6:	8bbb      	ldrh	r3, [r7, #28]
 800ffe8:	3b0a      	subs	r3, #10
 800ffea:	6a3a      	ldr	r2, [r7, #32]
 800ffec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fff0:	f640 123f 	movw	r2, #2367	; 0x93f
 800fff4:	4293      	cmp	r3, r2
 800fff6:	bf0c      	ite	eq
 800fff8:	2301      	moveq	r3, #1
 800fffa:	2300      	movne	r3, #0
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d03f      	beq.n	8010082 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	3322      	adds	r3, #34	; 0x22
 8010006:	687a      	ldr	r2, [r7, #4]
 8010008:	3222      	adds	r2, #34	; 0x22
 801000a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 801000c:	68ba      	ldr	r2, [r7, #8]
 801000e:	8ad2      	ldrh	r2, [r2, #22]
 8010010:	2a00      	cmp	r2, #0
 8010012:	d105      	bne.n	8010020 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010014:	4b1f      	ldr	r3, [pc, #124]	; (8010094 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010016:	4a20      	ldr	r2, [pc, #128]	; (8010098 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010018:	21c5      	movs	r1, #197	; 0xc5
 801001a:	4820      	ldr	r0, [pc, #128]	; (801009c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801001c:	f016 fb12 	bl	8026644 <__assert_func>
            return buffer[pos];
 8010020:	68ba      	ldr	r2, [r7, #8]
 8010022:	8a92      	ldrh	r2, [r2, #20]
 8010024:	4611      	mov	r1, r2
 8010026:	68ba      	ldr	r2, [r7, #8]
 8010028:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801002c:	613b      	str	r3, [r7, #16]
 801002e:	4613      	mov	r3, r2
 8010030:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	8adb      	ldrh	r3, [r3, #22]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d806      	bhi.n	8010048 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 801003a:	4b1b      	ldr	r3, [pc, #108]	; (80100a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 801003c:	4a1b      	ldr	r2, [pc, #108]	; (80100ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 801003e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8010042:	4816      	ldr	r0, [pc, #88]	; (801009c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010044:	f016 fafe 	bl	8026644 <__assert_func>
            const uint16_t index = pos + 1;
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	8a9b      	ldrh	r3, [r3, #20]
 801004c:	3301      	adds	r3, #1
 801004e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010050:	89bb      	ldrh	r3, [r7, #12]
 8010052:	2b09      	cmp	r3, #9
 8010054:	d801      	bhi.n	801005a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010056:	89bb      	ldrh	r3, [r7, #12]
 8010058:	e000      	b.n	801005c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801005a:	2300      	movs	r3, #0
 801005c:	693a      	ldr	r2, [r7, #16]
 801005e:	89f9      	ldrh	r1, [r7, #14]
 8010060:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010064:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	3322      	adds	r3, #34	; 0x22
 801006a:	61bb      	str	r3, [r7, #24]
 801006c:	f640 133f 	movw	r3, #2367	; 0x93f
 8010070:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010072:	69bb      	ldr	r3, [r7, #24]
 8010074:	8a9b      	ldrh	r3, [r3, #20]
 8010076:	4619      	mov	r1, r3
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	8afa      	ldrh	r2, [r7, #22]
 801007c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010080:	bf00      	nop
        }
    }
    return getNextChar();
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f007 ff1e 	bl	8017ec4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010088:	4603      	mov	r3, r0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3728      	adds	r7, #40	; 0x28
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	08027b18 	.word	0x08027b18
 8010098:	08027b24 	.word	0x08027b24
 801009c:	08027bd0 	.word	0x08027bd0
 80100a0:	08027c18 	.word	0x08027c18
 80100a4:	08027c28 	.word	0x08027c28
 80100a8:	08027cfc 	.word	0x08027cfc
 80100ac:	08027d08 	.word	0x08027d08

080100b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f007 feca 	bl	8017e52 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80100be:	bf00      	nop
 80100c0:	3708      	adds	r7, #8
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b088      	sub	sp, #32
 80100ca:	af02      	add	r7, sp, #8
 80100cc:	60f8      	str	r0, [r7, #12]
 80100ce:	1d38      	adds	r0, r7, #4
 80100d0:	e880 0006 	stmia.w	r0, {r1, r2}
 80100d4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80100d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80100da:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80100dc:	1d39      	adds	r1, r7, #4
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	9301      	str	r3, [sp, #4]
 80100e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e4:	9300      	str	r3, [sp, #0]
 80100e6:	6a3b      	ldr	r3, [r7, #32]
 80100e8:	683a      	ldr	r2, [r7, #0]
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f005 f8f4 	bl	80152d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80100f0:	bf00      	nop
 80100f2:	3718      	adds	r7, #24
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80100f8:	b590      	push	{r4, r7, lr}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4603      	mov	r3, r0
 8010100:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010102:	2300      	movs	r3, #0
 8010104:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010106:	88fb      	ldrh	r3, [r7, #6]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d127      	bne.n	801015c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 801010c:	88fb      	ldrh	r3, [r7, #6]
 801010e:	4a1e      	ldr	r2, [pc, #120]	; (8010188 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d016      	beq.n	8010146 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010118:	88fb      	ldrh	r3, [r7, #6]
 801011a:	4a1b      	ldr	r2, [pc, #108]	; (8010188 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801011c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010120:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	68ba      	ldr	r2, [r7, #8]
 8010128:	4413      	add	r3, r2
 801012a:	4a18      	ldr	r2, [pc, #96]	; (801018c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801012c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	68ba      	ldr	r2, [r7, #8]
 8010134:	4413      	add	r3, r2
 8010136:	4a16      	ldr	r2, [pc, #88]	; (8010190 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010138:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	689b      	ldr	r3, [r3, #8]
 801013e:	68ba      	ldr	r2, [r7, #8]
 8010140:	4413      	add	r3, r2
 8010142:	60fb      	str	r3, [r7, #12]
 8010144:	e00a      	b.n	801015c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010146:	4b11      	ldr	r3, [pc, #68]	; (801018c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010148:	4a12      	ldr	r2, [pc, #72]	; (8010194 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801014a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801014c:	4a12      	ldr	r2, [pc, #72]	; (8010198 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801014e:	4b10      	ldr	r3, [pc, #64]	; (8010190 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010150:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010152:	88fb      	ldrh	r3, [r7, #6]
 8010154:	4a11      	ldr	r2, [pc, #68]	; (801019c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801015a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00d      	beq.n	801017e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010162:	4a0f      	ldr	r2, [pc, #60]	; (80101a0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010164:	88fb      	ldrh	r3, [r7, #6]
 8010166:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010168:	f000 f83e 	bl	80101e8 <_ZN17TypedTextDatabase8getFontsEv>
 801016c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801016e:	f000 f833 	bl	80101d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010172:	4603      	mov	r3, r0
 8010174:	461a      	mov	r2, r3
 8010176:	4621      	mov	r1, r4
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f7ff fea5 	bl	800fec8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801017e:	bf00      	nop
 8010180:	3714      	adds	r7, #20
 8010182:	46bd      	mov	sp, r7
 8010184:	bd90      	pop	{r4, r7, pc}
 8010186:	bf00      	nop
 8010188:	20023c88 	.word	0x20023c88
 801018c:	20023c90 	.word	0x20023c90
 8010190:	20023c94 	.word	0x20023c94
 8010194:	0805a578 	.word	0x0805a578
 8010198:	0805a570 	.word	0x0805a570
 801019c:	0805a5e4 	.word	0x0805a5e4
 80101a0:	20023c8c 	.word	0x20023c8c

080101a4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	460b      	mov	r3, r1
 80101ae:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80101b0:	4b07      	ldr	r3, [pc, #28]	; (80101d0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	4b07      	ldr	r3, [pc, #28]	; (80101d4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80101b6:	6819      	ldr	r1, [r3, #0]
 80101b8:	887b      	ldrh	r3, [r7, #2]
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	440b      	add	r3, r1
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	005b      	lsls	r3, r3, #1
 80101c2:	4413      	add	r3, r2
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	370c      	adds	r7, #12
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr
 80101d0:	20023c90 	.word	0x20023c90
 80101d4:	20023c94 	.word	0x20023c94

080101d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80101d8:	b480      	push	{r7}
 80101da:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80101dc:	2302      	movs	r3, #2
}
 80101de:	4618      	mov	r0, r3
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80101e8:	b480      	push	{r7}
 80101ea:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80101ec:	4b02      	ldr	r3, [pc, #8]	; (80101f8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr
 80101f8:	20023c98 	.word	0x20023c98

080101fc <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b01      	cmp	r3, #1
 801020a:	d113      	bne.n	8010234 <_Z41__static_initialization_and_destruction_0ii+0x38>
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010212:	4293      	cmp	r3, r2
 8010214:	d10e      	bne.n	8010234 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8010216:	f7fd fcf7 	bl	800dc08 <_Z23getFont_verdana_20_4bppv>
 801021a:	4603      	mov	r3, r0
};
 801021c:	4a07      	ldr	r2, [pc, #28]	; (801023c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801021e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8010220:	f7fd fd4c 	bl	800dcbc <_Z23getFont_verdana_40_4bppv>
 8010224:	4603      	mov	r3, r0
};
 8010226:	4a05      	ldr	r2, [pc, #20]	; (801023c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010228:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 801022a:	f7fd fc93 	bl	800db54 <_Z23getFont_verdana_10_4bppv>
 801022e:	4603      	mov	r3, r0
};
 8010230:	4a02      	ldr	r2, [pc, #8]	; (801023c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010232:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8010234:	bf00      	nop
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	20023c98 	.word	0x20023c98

08010240 <_GLOBAL__sub_I_touchgfx_fonts>:
 8010240:	b580      	push	{r7, lr}
 8010242:	af00      	add	r7, sp, #0
 8010244:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010248:	2001      	movs	r0, #1
 801024a:	f7ff ffd7 	bl	80101fc <_Z41__static_initialization_and_destruction_0ii>
 801024e:	bd80      	pop	{r7, pc}

08010250 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	4a05      	ldr	r2, [pc, #20]	; (8010270 <_ZN19FrontendApplicationD1Ev+0x20>)
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	601a      	str	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4618      	mov	r0, r3
 8010262:	f7fd ff8b 	bl	800e17c <_ZN23FrontendApplicationBaseD1Ev>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4618      	mov	r0, r3
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	08028d7c 	.word	0x08028d7c

08010274 <_ZN19FrontendApplicationD0Ev>:
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7ff ffe7 	bl	8010250 <_ZN19FrontendApplicationD1Ev>
 8010282:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f016 f9ad 	bl	80265e6 <_ZdlPvj>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4618      	mov	r0, r3
 8010290:	3708      	adds	r7, #8
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8010296:	b580      	push	{r7, lr}
 8010298:	b082      	sub	sp, #8
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80102a4:	4618      	mov	r0, r3
 80102a6:	f000 f82d 	bl	8010304 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f005 fd07 	bl	8015cc0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80102b2:	bf00      	nop
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
	...

080102bc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	687a      	ldr	r2, [r7, #4]
 80102cc:	68b9      	ldr	r1, [r7, #8]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fd ffa4 	bl	800e21c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80102d4:	4a03      	ldr	r2, [pc, #12]	; (80102e4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	601a      	str	r2, [r3, #0]
{

}
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	4618      	mov	r0, r3
 80102de:	3710      	adds	r7, #16
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	08028d7c 	.word	0x08028d7c

080102e8 <_ZN5ModelC1Ev>:

extern __IO uint8_t rx_counter;
extern __IO uint8_t midiTitleReady;


Model::Model() : modelListener(0)
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2200      	movs	r2, #0
 80102f4:	601a      	str	r2, [r3, #0]
{

}
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4618      	mov	r0, r3
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr

08010304 <_ZN5Model4tickEv>:

void Model::tick()
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
	if(midiTitleReady){
 801030c:	4b0f      	ldr	r3, [pc, #60]	; (801034c <_ZN5Model4tickEv+0x48>)
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	b2db      	uxtb	r3, r3
 8010312:	2b00      	cmp	r3, #0
 8010314:	bf14      	ite	ne
 8010316:	2301      	movne	r3, #1
 8010318:	2300      	moveq	r3, #0
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b00      	cmp	r3, #0
 801031e:	d011      	beq.n	8010344 <_ZN5Model4tickEv+0x40>
		midiTitleReady = 0;
 8010320:	4b0a      	ldr	r3, [pc, #40]	; (801034c <_ZN5Model4tickEv+0x48>)
 8010322:	2200      	movs	r2, #0
 8010324:	701a      	strb	r2, [r3, #0]
		modelListener -> midiTitleReady((uint8_t)rx_counter);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	3308      	adds	r3, #8
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4906      	ldr	r1, [pc, #24]	; (8010350 <_ZN5Model4tickEv+0x4c>)
 8010336:	7809      	ldrb	r1, [r1, #0]
 8010338:	b2c9      	uxtb	r1, r1
 801033a:	4610      	mov	r0, r2
 801033c:	4798      	blx	r3
		rx_counter = 0;
 801033e:	4b04      	ldr	r3, [pc, #16]	; (8010350 <_ZN5Model4tickEv+0x4c>)
 8010340:	2200      	movs	r2, #0
 8010342:	701a      	strb	r2, [r3, #0]

	}
}
 8010344:	bf00      	nop
 8010346:	3708      	adds	r7, #8
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	20000047 	.word	0x20000047
 8010350:	20000046 	.word	0x20000046

08010354 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
    {
    }
 801035c:	bf00      	nop
 801035e:	370c      	adds	r7, #12
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr

08010368 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
    {
    }
 8010370:	bf00      	nop
 8010372:	370c      	adds	r7, #12
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr

0801037c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 801037c:	b480      	push	{r7}
 801037e:	b083      	sub	sp, #12
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
    {
 8010384:	4a04      	ldr	r2, [pc, #16]	; (8010398 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	601a      	str	r2, [r3, #0]
    }
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4618      	mov	r0, r3
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr
 8010398:	08028e14 	.word	0x08028e14

0801039c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
    }
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff ffe9 	bl	801037c <_ZN8touchgfx9PresenterD1Ev>
 80103aa:	2104      	movs	r1, #4
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f016 f91a 	bl	80265e6 <_ZdlPvj>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	4618      	mov	r0, r3
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
    {
 80103c4:	4a04      	ldr	r2, [pc, #16]	; (80103d8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	601a      	str	r2, [r3, #0]
    }
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4618      	mov	r0, r3
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr
 80103d8:	08028e14 	.word	0x08028e14

080103dc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	4a06      	ldr	r2, [pc, #24]	; (8010400 <_ZN13ModelListenerC1Ev+0x24>)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	601a      	str	r2, [r3, #0]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2200      	movs	r2, #0
 80103ee:	605a      	str	r2, [r3, #4]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	4618      	mov	r0, r3
 80103f4:	370c      	adds	r7, #12
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	08028e00 	.word	0x08028e00

08010404 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	4a04      	ldr	r2, [pc, #16]	; (8010420 <_ZN13ModelListenerD1Ev+0x1c>)
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	601a      	str	r2, [r3, #0]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	370c      	adds	r7, #12
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr
 8010420:	08028e00 	.word	0x08028e00

08010424 <_ZN13ModelListenerD0Ev>:
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f7ff ffe9 	bl	8010404 <_ZN13ModelListenerD1Ev>
 8010432:	2108      	movs	r1, #8
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f016 f8d6 	bl	80265e6 <_ZdlPvj>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4618      	mov	r0, r3
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <_ZN13ModelListener14midiTitleReadyEh>:

    virtual void midiTitleReady(uint8_t value){};
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	460b      	mov	r3, r1
 801044e:	70fb      	strb	r3, [r7, #3]
 8010450:	bf00      	nop
 8010452:	370c      	adds	r7, #12
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	4a09      	ldr	r2, [pc, #36]	; (801048c <_ZN16Screen1PresenterD1Ev+0x30>)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	4a09      	ldr	r2, [pc, #36]	; (8010490 <_ZN16Screen1PresenterD1Ev+0x34>)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	605a      	str	r2, [r3, #4]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	3304      	adds	r3, #4
 8010474:	4618      	mov	r0, r3
 8010476:	f7ff ffc5 	bl	8010404 <_ZN13ModelListenerD1Ev>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	f7ff ff7d 	bl	801037c <_ZN8touchgfx9PresenterD1Ev>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	08028dd0 	.word	0x08028dd0
 8010490:	08028dec 	.word	0x08028dec

08010494 <_ZThn4_N16Screen1PresenterD1Ev>:
 8010494:	f1a0 0004 	sub.w	r0, r0, #4
 8010498:	e7e0      	b.n	801045c <_ZN16Screen1PresenterD1Ev>
 801049a:	bf00      	nop

0801049c <_ZN16Screen1PresenterD0Ev>:
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f7ff ffd9 	bl	801045c <_ZN16Screen1PresenterD1Ev>
 80104aa:	2110      	movs	r1, #16
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f016 f89a 	bl	80265e6 <_ZdlPvj>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4618      	mov	r0, r3
 80104b6:	3708      	adds	r7, #8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <_ZThn4_N16Screen1PresenterD0Ev>:
 80104bc:	f1a0 0004 	sub.w	r0, r0, #4
 80104c0:	e7ec      	b.n	801049c <_ZN16Screen1PresenterD0Ev>
	...

080104c4 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>



Screen1Presenter::Screen1Presenter(Screen1View& v)
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
    : view(v)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7ff ff73 	bl	80103bc <_ZN8touchgfx9PresenterC1Ev>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	3304      	adds	r3, #4
 80104da:	4618      	mov	r0, r3
 80104dc:	f7ff ff7e 	bl	80103dc <_ZN13ModelListenerC1Ev>
 80104e0:	4a06      	ldr	r2, [pc, #24]	; (80104fc <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
 80104e6:	4a06      	ldr	r2, [pc, #24]	; (8010500 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	605a      	str	r2, [r3, #4]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	683a      	ldr	r2, [r7, #0]
 80104f0:	60da      	str	r2, [r3, #12]
{

}
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4618      	mov	r0, r3
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	08028dd0 	.word	0x08028dd0
 8010500:	08028dec 	.word	0x08028dec

08010504 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8010504:	b480      	push	{r7}
 8010506:	b083      	sub	sp, #12
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]

}
 801050c:	bf00      	nop
 801050e:	370c      	adds	r7, #12
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr

08010518 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]

}
 8010520:	bf00      	nop
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <_ZN16Screen1Presenter14midiTitleReadyEh>:

void Screen1Presenter::midiTitleReady(uint8_t value){
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	460b      	mov	r3, r1
 8010536:	70fb      	strb	r3, [r7, #3]
	view.midiTitleReady(value);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	68da      	ldr	r2, [r3, #12]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	332c      	adds	r3, #44	; 0x2c
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	78f9      	ldrb	r1, [r7, #3]
 8010548:	4610      	mov	r0, r2
 801054a:	4798      	blx	r3
}
 801054c:	bf00      	nop
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <_ZThn4_N16Screen1Presenter14midiTitleReadyEh>:

    virtual void midiTitleReady(uint8_t value);
 8010554:	f1a0 0004 	sub.w	r0, r0, #4
 8010558:	f7ff bfe8 	b.w	801052c <_ZN16Screen1Presenter14midiTitleReadyEh>

0801055c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	4a05      	ldr	r2, [pc, #20]	; (801057c <_ZN11Screen1ViewD1Ev+0x20>)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	601a      	str	r2, [r3, #0]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff f98d 	bl	800f88c <_ZN15Screen1ViewBaseD1Ev>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4618      	mov	r0, r3
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	08028e2c 	.word	0x08028e2c

08010580 <_ZN11Screen1ViewD0Ev>:
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7ff ffe7 	bl	801055c <_ZN11Screen1ViewD1Ev>
 801058e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f016 f827 	bl	80265e6 <_ZdlPvj>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	4618      	mov	r0, r3
 801059c:	3708      	adds	r7, #8
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
	...

080105a4 <_ZN11Screen1ViewC1Ev>:
#include <string.h>
#include <stm32l4xx_hal.h>

extern __IO uint8_t midi_titleBuffer[50];

Screen1View::Screen1View()
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7fe ff6c 	bl	800f48c <_ZN15Screen1ViewBaseC1Ev>
 80105b4:	4a03      	ldr	r2, [pc, #12]	; (80105c4 <_ZN11Screen1ViewC1Ev+0x20>)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	601a      	str	r2, [r3, #0]
{

}
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	4618      	mov	r0, r3
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	08028e2c 	.word	0x08028e2c

080105c8 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7ff f99d 	bl	800f912 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80105d8:	bf00      	nop
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7fe fb80 	bl	800ecf0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80105f0:	bf00      	nop
 80105f2:	3708      	adds	r7, #8
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}

080105f8 <_ZN11Screen1View14midiTitleReadyEh>:

void Screen1View::midiTitleReady(uint8_t value){
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	460b      	mov	r3, r1
 8010602:	70fb      	strb	r3, [r7, #3]

	while(value){
 8010604:	e00e      	b.n	8010624 <_ZN11Screen1View14midiTitleReadyEh+0x2c>
		textArea1Buffer[value] = midi_titleBuffer[value];
 8010606:	78fb      	ldrb	r3, [r7, #3]
 8010608:	4a12      	ldr	r2, [pc, #72]	; (8010654 <_ZN11Screen1View14midiTitleReadyEh+0x5c>)
 801060a:	5cd3      	ldrb	r3, [r2, r3]
 801060c:	b2da      	uxtb	r2, r3
 801060e:	78fb      	ldrb	r3, [r7, #3]
 8010610:	b291      	uxth	r1, r2
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	33c8      	adds	r3, #200	; 0xc8
 8010616:	005b      	lsls	r3, r3, #1
 8010618:	4413      	add	r3, r2
 801061a:	460a      	mov	r2, r1
 801061c:	809a      	strh	r2, [r3, #4]
		value--;
 801061e:	78fb      	ldrb	r3, [r7, #3]
 8010620:	3b01      	subs	r3, #1
 8010622:	70fb      	strb	r3, [r7, #3]
	while(value){
 8010624:	78fb      	ldrb	r3, [r7, #3]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1ed      	bne.n	8010606 <_ZN11Screen1View14midiTitleReadyEh+0xe>
	}
	textArea1Buffer[value] = midi_titleBuffer[value];
 801062a:	78fb      	ldrb	r3, [r7, #3]
 801062c:	4a09      	ldr	r2, [pc, #36]	; (8010654 <_ZN11Screen1View14midiTitleReadyEh+0x5c>)
 801062e:	5cd3      	ldrb	r3, [r2, r3]
 8010630:	b2da      	uxtb	r2, r3
 8010632:	78fb      	ldrb	r3, [r7, #3]
 8010634:	b291      	uxth	r1, r2
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	33c8      	adds	r3, #200	; 0xc8
 801063a:	005b      	lsls	r3, r3, #1
 801063c:	4413      	add	r3, r2
 801063e:	460a      	mov	r2, r1
 8010640:	809a      	strh	r2, [r3, #4]
	textArea1.invalidate();
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	33cc      	adds	r3, #204	; 0xcc
 8010646:	4618      	mov	r0, r3
 8010648:	f006 fb5e 	bl	8016d08 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 801064c:	bf00      	nop
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	20000014 	.word	0x20000014

08010658 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8010658:	b480      	push	{r7}
 801065a:	b083      	sub	sp, #12
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
    {
 8010660:	4a04      	ldr	r2, [pc, #16]	; (8010674 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	601a      	str	r2, [r3, #0]
    }
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr
 8010674:	08028e7c 	.word	0x08028e7c

08010678 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
    }
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7ff ffe9 	bl	8010658 <_ZN8touchgfx15TouchControllerD1Ev>
 8010686:	2104      	movs	r1, #4
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f015 ffac 	bl	80265e6 <_ZdlPvj>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4618      	mov	r0, r3
 8010692:	3708      	adds	r7, #8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "main.h"

void STM32TouchController::init()
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80106a0:	bf00      	nop
 80106a2:	370c      	adds	r7, #12
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b084      	sub	sp, #16
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
     return ((bool) Touch_TouchGFXSampleTouch(&x, &y));;
 80106b8:	6879      	ldr	r1, [r7, #4]
 80106ba:	68b8      	ldr	r0, [r7, #8]
 80106bc:	f7f4 ff66 	bl	800558c <Touch_TouchGFXSampleTouch>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	bf14      	ite	ne
 80106c6:	2301      	movne	r3, #1
 80106c8:	2300      	moveq	r3, #0
 80106ca:	b2db      	uxtb	r3, r3
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	4a05      	ldr	r2, [pc, #20]	; (80106f4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	601a      	str	r2, [r3, #0]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7ff ffb7 	bl	8010658 <_ZN8touchgfx15TouchControllerD1Ev>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4618      	mov	r0, r3
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}
 80106f4:	08028e64 	.word	0x08028e64

080106f8 <_ZN20STM32TouchControllerD0Ev>:
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f7ff ffe7 	bl	80106d4 <_ZN20STM32TouchControllerD1Ev>
 8010706:	2104      	movs	r1, #4
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f015 ff6c 	bl	80265e6 <_ZdlPvj>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4618      	mov	r0, r3
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8010718:	b480      	push	{r7}
 801071a:	af00      	add	r7, sp, #0

}
 801071c:	bf00      	nop
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr
	...

08010728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	4603      	mov	r3, r0
 8010730:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8010732:	79fb      	ldrb	r3, [r7, #7]
 8010734:	2b03      	cmp	r3, #3
 8010736:	d80c      	bhi.n	8010752 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8010738:	a201      	add	r2, pc, #4	; (adr r2, 8010740 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 801073a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801073e:	bf00      	nop
 8010740:	08010751 	.word	0x08010751
 8010744:	08010751 	.word	0x08010751
 8010748:	08010751 	.word	0x08010751
 801074c:	08010751 	.word	0x08010751
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8010750:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8010752:	bf00      	nop
 8010754:	370c      	adds	r7, #12
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop

08010760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8010760:	b480      	push	{r7}
 8010762:	b083      	sub	sp, #12
 8010764:	af00      	add	r7, sp, #0
 8010766:	4603      	mov	r3, r0
 8010768:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801076a:	79fb      	ldrb	r3, [r7, #7]
 801076c:	2b03      	cmp	r3, #3
 801076e:	d80c      	bhi.n	801078a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8010770:	a201      	add	r2, pc, #4	; (adr r2, 8010778 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8010772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010776:	bf00      	nop
 8010778:	08010789 	.word	0x08010789
 801077c:	08010789 	.word	0x08010789
 8010780:	08010789 	.word	0x08010789
 8010784:	08010789 	.word	0x08010789
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8010788:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 801078a:	bf00      	nop
 801078c:	370c      	adds	r7, #12
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr
 8010796:	bf00      	nop

08010798 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	4603      	mov	r3, r0
 80107a0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80107a2:	79fb      	ldrb	r3, [r7, #7]
 80107a4:	2b03      	cmp	r3, #3
 80107a6:	d80c      	bhi.n	80107c2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80107a8:	a201      	add	r2, pc, #4	; (adr r2, 80107b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80107aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ae:	bf00      	nop
 80107b0:	080107c1 	.word	0x080107c1
 80107b4:	080107c1 	.word	0x080107c1
 80107b8:	080107c1 	.word	0x080107c1
 80107bc:	080107c1 	.word	0x080107c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80107c0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80107c2:	bf00      	nop
 80107c4:	370c      	adds	r7, #12
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop

080107d0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80107d0:	b480      	push	{r7}
 80107d2:	b083      	sub	sp, #12
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
    {
 80107d8:	4a04      	ldr	r2, [pc, #16]	; (80107ec <_ZN8touchgfx3HALD1Ev+0x1c>)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	601a      	str	r2, [r3, #0]
    }
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr
 80107ec:	080292b4 	.word	0x080292b4

080107f0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
    }
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7ff ffe9 	bl	80107d0 <_ZN8touchgfx3HALD1Ev>
 80107fe:	217c      	movs	r1, #124	; 0x7c
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f015 fef0 	bl	80265e6 <_ZdlPvj>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	460b      	mov	r3, r1
 801081a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	78fa      	ldrb	r2, [r7, #3]
 8010820:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2201      	movs	r2, #1
 8010828:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 801082c:	bf00      	nop
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	460b      	mov	r3, r1
 8010842:	807b      	strh	r3, [r7, #2]
 8010844:	4613      	mov	r3, r2
 8010846:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8010848:	4b0c      	ldr	r3, [pc, #48]	; (801087c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	887a      	ldrh	r2, [r7, #2]
 801084e:	429a      	cmp	r2, r3
 8010850:	d304      	bcc.n	801085c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8010852:	4b0b      	ldr	r3, [pc, #44]	; (8010880 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	883a      	ldrh	r2, [r7, #0]
 8010858:	429a      	cmp	r2, r3
 801085a:	d205      	bcs.n	8010868 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 801085c:	4b09      	ldr	r3, [pc, #36]	; (8010884 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 801085e:	4a0a      	ldr	r2, [pc, #40]	; (8010888 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8010860:	219e      	movs	r1, #158	; 0x9e
 8010862:	480a      	ldr	r0, [pc, #40]	; (801088c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8010864:	f015 feee 	bl	8026644 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8010868:	4a09      	ldr	r2, [pc, #36]	; (8010890 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 801086a:	887b      	ldrh	r3, [r7, #2]
 801086c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 801086e:	4a09      	ldr	r2, [pc, #36]	; (8010894 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8010870:	883b      	ldrh	r3, [r7, #0]
 8010872:	8013      	strh	r3, [r2, #0]
    }
 8010874:	bf00      	nop
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	20025850 	.word	0x20025850
 8010880:	20025852 	.word	0x20025852
 8010884:	08027dbc 	.word	0x08027dbc
 8010888:	08027e20 	.word	0x08027e20
 801088c:	08027e64 	.word	0x08027e64
 8010890:	20025856 	.word	0x20025856
 8010894:	20025858 	.word	0x20025858

08010898 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d009      	beq.n	80108be <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	685a      	ldr	r2, [r3, #4]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4610      	mov	r0, r2
 80108b8:	4798      	blx	r3
 80108ba:	4603      	mov	r3, r0
 80108bc:	e000      	b.n	80108c0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80108be:	2300      	movs	r3, #0
    }
 80108c0:	4618      	mov	r0, r3
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f002 fd2d 	bl	8013330 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	33ac      	adds	r3, #172	; 0xac
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	4798      	blx	r3
    }
 80108e2:	bf00      	nop
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80108ea:	b480      	push	{r7}
 80108ec:	b083      	sub	sp, #12
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 80108f4:	2300      	movs	r3, #0
    }
 80108f6:	4618      	mov	r0, r3
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
	...

08010904 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
 8010910:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d106      	bne.n	8010926 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8010918:	4b0f      	ldr	r3, [pc, #60]	; (8010958 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 801091a:	4a10      	ldr	r2, [pc, #64]	; (801095c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 801091c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8010920:	480f      	ldr	r0, [pc, #60]	; (8010960 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8010922:	f015 fe8f 	bl	8026644 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	68ba      	ldr	r2, [r7, #8]
 801092a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2b00      	cmp	r3, #0
 8010936:	bf14      	ite	ne
 8010938:	2301      	movne	r3, #1
 801093a:	2300      	moveq	r3, #0
 801093c:	b2da      	uxtb	r2, r3
 801093e:	4b09      	ldr	r3, [pc, #36]	; (8010964 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8010940:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	338c      	adds	r3, #140	; 0x8c
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	6839      	ldr	r1, [r7, #0]
 801094c:	68f8      	ldr	r0, [r7, #12]
 801094e:	4798      	blx	r3
    }
 8010950:	bf00      	nop
 8010952:	3710      	adds	r7, #16
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}
 8010958:	08027ea8 	.word	0x08027ea8
 801095c:	08027ee0 	.word	0x08027ee0
 8010960:	08027e64 	.word	0x08027e64
 8010964:	2002585a 	.word	0x2002585a

08010968 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	683a      	ldr	r2, [r7, #0]
 8010976:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	bf14      	ite	ne
 801097e:	2301      	movne	r3, #1
 8010980:	2300      	moveq	r3, #0
 8010982:	b2da      	uxtb	r2, r3
 8010984:	4b03      	ldr	r3, [pc, #12]	; (8010994 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8010986:	701a      	strb	r2, [r3, #0]
    }
 8010988:	bf00      	nop
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr
 8010994:	2002585b 	.word	0x2002585b

08010998 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80109a0:	2300      	movs	r3, #0
    }
 80109a2:	4618      	mov	r0, r3
 80109a4:	370c      	adds	r7, #12
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr

080109ae <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b082      	sub	sp, #8
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
 80109b6:	460b      	mov	r3, r1
 80109b8:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d004      	beq.n	80109cc <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c6:	887a      	ldrh	r2, [r7, #2]
 80109c8:	4610      	mov	r0, r2
 80109ca:	4798      	blx	r3
        }
    }
 80109cc:	bf00      	nop
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80109dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80109e0:	4618      	mov	r0, r3
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	685a      	ldr	r2, [r3, #4]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	3318      	adds	r3, #24
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4610      	mov	r0, r2
 8010a04:	4798      	blx	r3
 8010a06:	4603      	mov	r3, r0
    }
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8010a10:	b480      	push	{r7}
 8010a12:	b085      	sub	sp, #20
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d011      	beq.n	8010a4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8010a28:	4b14      	ldr	r3, [pc, #80]	; (8010a7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d11e      	bne.n	8010a6e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8010a30:	4b13      	ldr	r3, [pc, #76]	; (8010a80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010a32:	881b      	ldrh	r3, [r3, #0]
 8010a34:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8010a36:	4b13      	ldr	r3, [pc, #76]	; (8010a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010a38:	881a      	ldrh	r2, [r3, #0]
 8010a3a:	4b11      	ldr	r3, [pc, #68]	; (8010a80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010a3c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8010a3e:	4a11      	ldr	r2, [pc, #68]	; (8010a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010a40:	89bb      	ldrh	r3, [r7, #12]
 8010a42:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8010a44:	4b0d      	ldr	r3, [pc, #52]	; (8010a7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010a46:	2201      	movs	r2, #1
 8010a48:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8010a4a:	e010      	b.n	8010a6e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8010a4c:	4b0b      	ldr	r3, [pc, #44]	; (8010a7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d00c      	beq.n	8010a6e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8010a54:	4b0a      	ldr	r3, [pc, #40]	; (8010a80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010a56:	881b      	ldrh	r3, [r3, #0]
 8010a58:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8010a5a:	4b0a      	ldr	r3, [pc, #40]	; (8010a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010a5c:	881a      	ldrh	r2, [r3, #0]
 8010a5e:	4b08      	ldr	r3, [pc, #32]	; (8010a80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010a60:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8010a62:	4a08      	ldr	r2, [pc, #32]	; (8010a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010a64:	89fb      	ldrh	r3, [r7, #14]
 8010a66:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8010a68:	4b04      	ldr	r3, [pc, #16]	; (8010a7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	701a      	strb	r2, [r3, #0]
    }
 8010a6e:	bf00      	nop
 8010a70:	3714      	adds	r7, #20
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	20025854 	.word	0x20025854
 8010a80:	20025852 	.word	0x20025852
 8010a84:	20025850 	.word	0x20025850

08010a88 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
    {
    }
 8010a90:	bf00      	nop
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8010a9c:	b480      	push	{r7}
 8010a9e:	b083      	sub	sp, #12
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
    {
    }
 8010aa4:	bf00      	nop
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f001 fe96 	bl	80127ec <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8010ac0:	bf00      	nop
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	4a05      	ldr	r2, [pc, #20]	; (8010ae8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7ff fe79 	bl	80107d0 <_ZN8touchgfx3HALD1Ev>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3708      	adds	r7, #8
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	080290e0 	.word	0x080290e0

08010aec <_ZN20TouchGFXGeneratedHALD0Ev>:
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7ff ffe7 	bl	8010ac8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8010afa:	217c      	movs	r1, #124	; 0x7c
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f015 fd72 	bl	80265e6 <_ZdlPvj>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4618      	mov	r0, r3
 8010b06:	3708      	adds	r7, #8
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7ff ffca 	bl	8010ab0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8010b1c:	bf00      	nop
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <_ZN11TouchGFXHAL10initializeEv>:
 */
#warning "A user must call touchgfx::startNewTransfer(); once touchgfxDisplayDriverTransmitBlock() has succesfully sent a block."
#warning "A user must implement C-methods touchgfxDisplayDriverTransmitActive() and touchgfxDisplayDriverTransmitBlock() used by the Partial Framebuffer Strategy."

void TouchGFXHAL::initialize()
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 ffce 	bl	8011ad0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8010b34:	bf00      	nop
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b082      	sub	sp, #8
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f001 f840 	bl	8011bcc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8010b4c:	4603      	mov	r3, r0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3708      	adds	r7, #8
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b082      	sub	sp, #8
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6839      	ldr	r1, [r7, #0]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f001 f83c 	bl	8011be2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8010b6a:	bf00      	nop
 8010b6c:	3708      	adds	r7, #8
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}

08010b72 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8010b72:	b580      	push	{r7, lr}
 8010b74:	b082      	sub	sp, #8
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
 8010b7a:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6839      	ldr	r1, [r7, #0]
 8010b80:	4618      	mov	r0, r3
 8010b82:	f001 f839 	bl	8011bf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8010b86:	bf00      	nop
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b084      	sub	sp, #16
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	60f8      	str	r0, [r7, #12]
 8010b96:	60b9      	str	r1, [r7, #8]
 8010b98:	607a      	str	r2, [r7, #4]
 8010b9a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	68b9      	ldr	r1, [r7, #8]
 8010ba4:	f001 f86b 	bl	8011c7e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8010ba8:	4603      	mov	r3, r0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b082      	sub	sp, #8
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f000 ffb7 	bl	8011b30 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8010bc2:	bf00      	nop
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}

08010bca <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8010bca:	b580      	push	{r7, lr}
 8010bcc:	b082      	sub	sp, #8
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f000 ffb5 	bl	8011b44 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8010bda:	bf00      	nop
 8010bdc:	3708      	adds	r7, #8
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8010be2:	b580      	push	{r7, lr}
 8010be4:	b082      	sub	sp, #8
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	4618      	mov	r0, r3
 8010bee:	f000 ffb3 	bl	8011b58 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8010bf2:	bf00      	nop
 8010bf4:	3708      	adds	r7, #8
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8010bfa:	b580      	push	{r7, lr}
 8010bfc:	b082      	sub	sp, #8
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 ffb1 	bl	8011b6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8010c0a:	bf00      	nop
 8010c0c:	3708      	adds	r7, #8
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b082      	sub	sp, #8
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f000 ffaf 	bl	8011b80 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8010c22:	4603      	mov	r3, r0
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 ffaf 	bl	8011b9a <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8010c3c:	bf00      	nop
 8010c3e:	3708      	adds	r7, #8
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	4a05      	ldr	r2, [pc, #20]	; (8010c64 <_ZN11TouchGFXHALD1Ev+0x20>)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	601a      	str	r2, [r3, #0]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7ff ff37 	bl	8010ac8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	08028e94 	.word	0x08028e94

08010c68 <_ZN11TouchGFXHALD0Ev>:
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f7ff ffe7 	bl	8010c44 <_ZN11TouchGFXHALD1Ev>
 8010c76:	217c      	movs	r1, #124	; 0x7c
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f015 fcb4 	bl	80265e6 <_ZdlPvj>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	4618      	mov	r0, r3
 8010c82:	3708      	adds	r7, #8
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8010c88:	b480      	push	{r7}
 8010c8a:	af00      	add	r7, sp, #0
    fb_sem = 0;
 8010c8c:	4b05      	ldr	r3, [pc, #20]	; (8010ca4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	601a      	str	r2, [r3, #0]
    vsync_sem = 0;
 8010c92:	4b05      	ldr	r3, [pc, #20]	; (8010ca8 <_ZN8touchgfx10OSWrappers10initializeEv+0x20>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	601a      	str	r2, [r3, #0]
}
 8010c98:	bf00      	nop
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop
 8010ca4:	20023ca4 	.word	0x20023ca4
 8010ca8:	20023ca8 	.word	0x20023ca8

08010cac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8010cac:	b480      	push	{r7}
 8010cae:	af00      	add	r7, sp, #0
    while (fb_sem);
 8010cb0:	bf00      	nop
 8010cb2:	4b08      	ldr	r3, [pc, #32]	; (8010cd4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	bf14      	ite	ne
 8010cba:	2301      	movne	r3, #1
 8010cbc:	2300      	moveq	r3, #0
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1f6      	bne.n	8010cb2 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x6>
    fb_sem = 1;
 8010cc4:	4b03      	ldr	r3, [pc, #12]	; (8010cd4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	601a      	str	r2, [r3, #0]
}
 8010cca:	bf00      	nop
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr
 8010cd4:	20023ca4 	.word	0x20023ca4

08010cd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8010cd8:	b480      	push	{r7}
 8010cda:	af00      	add	r7, sp, #0
    fb_sem = 0;
 8010cdc:	4b03      	ldr	r3, [pc, #12]	; (8010cec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8010cde:	2200      	movs	r2, #0
 8010ce0:	601a      	str	r2, [r3, #0]
}
 8010ce2:	bf00      	nop
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr
 8010cec:	20023ca4 	.word	0x20023ca4

08010cf0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	af00      	add	r7, sp, #0
    fb_sem = 1;
 8010cf4:	4b03      	ldr	r3, [pc, #12]	; (8010d04 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	601a      	str	r2, [r3, #0]
}
 8010cfa:	bf00      	nop
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr
 8010d04:	20023ca4 	.word	0x20023ca4

08010d08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8010d08:	b480      	push	{r7}
 8010d0a:	af00      	add	r7, sp, #0
    fb_sem = 0;
 8010d0c:	4b03      	ldr	r3, [pc, #12]	; (8010d1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8010d0e:	2200      	movs	r2, #0
 8010d10:	601a      	str	r2, [r3, #0]
}
 8010d12:	bf00      	nop
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr
 8010d1c:	20023ca4 	.word	0x20023ca4

08010d20 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8010d20:	b480      	push	{r7}
 8010d22:	af00      	add	r7, sp, #0
    vsync_sem = 1;
 8010d24:	4b03      	ldr	r3, [pc, #12]	; (8010d34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8010d26:	2201      	movs	r2, #1
 8010d28:	601a      	str	r2, [r3, #0]
}
 8010d2a:	bf00      	nop
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr
 8010d34:	20023ca8 	.word	0x20023ca8

08010d38 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>:
/*
  * Signal that the rendering of the frame has completed. Used by
  * some systems to avoid using any previous vsync.
  */
void OSWrappers::signalRenderingDone()
{
 8010d38:	b480      	push	{r7}
 8010d3a:	af00      	add	r7, sp, #0
    vsync_sem = 0;
 8010d3c:	4b03      	ldr	r3, [pc, #12]	; (8010d4c <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv+0x14>)
 8010d3e:	2200      	movs	r2, #0
 8010d40:	601a      	str	r2, [r3, #0]
}
 8010d42:	bf00      	nop
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr
 8010d4c:	20023ca8 	.word	0x20023ca8

08010d50 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>:
 * @note signalRenderingDone is typically used together with this function.
 *
 * @return True if VSync occurred.
 */
bool OSWrappers::isVSyncAvailable()
{
 8010d50:	b480      	push	{r7}
 8010d52:	af00      	add	r7, sp, #0
    return vsync_sem;
 8010d54:	4b05      	ldr	r3, [pc, #20]	; (8010d6c <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv+0x1c>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	bf14      	ite	ne
 8010d5c:	2301      	movne	r3, #1
 8010d5e:	2300      	moveq	r3, #0
 8010d60:	b2db      	uxtb	r3, r3
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr
 8010d6c:	20023ca8 	.word	0x20023ca8

08010d70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	af00      	add	r7, sp, #0
    if (vsync_sem)
 8010d74:	4b0a      	ldr	r3, [pc, #40]	; (8010da0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	bf14      	ite	ne
 8010d7c:	2301      	movne	r3, #1
 8010d7e:	2300      	moveq	r3, #0
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00a      	beq.n	8010d9c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        vsync_sem = 0;
 8010d86:	4b06      	ldr	r3, [pc, #24]	; (8010da0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	601a      	str	r2, [r3, #0]
        HAL::getInstance()->backPorchExited();
 8010d8c:	f7fd f8ac 	bl	800dee8 <_ZN8touchgfx3HAL11getInstanceEv>
 8010d90:	4603      	mov	r3, r0
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	3270      	adds	r2, #112	; 0x70
 8010d96:	6812      	ldr	r2, [r2, #0]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	4790      	blx	r2
    }
}
 8010d9c:	bf00      	nop
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	20023ca8 	.word	0x20023ca8

08010da4 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
        : color(0)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	601a      	str	r2, [r3, #0]
    }
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4618      	mov	r0, r3
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr

08010dc0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8010dc0:	b480      	push	{r7}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
    {
 8010dc8:	4a04      	ldr	r2, [pc, #16]	; (8010ddc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	601a      	str	r2, [r3, #0]
    }
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr
 8010ddc:	08028fbc 	.word	0x08028fbc

08010de0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
    }
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f7ff ffe9 	bl	8010dc0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010dee:	2104      	movs	r1, #4
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f015 fbf8 	bl	80265e6 <_ZdlPvj>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
    {
    }
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8010e1c:	2300      	movs	r3, #0
    }
 8010e1e:	4618      	mov	r0, r3
 8010e20:	370c      	adds	r7, #12
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
	...

08010e2c <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8010e2c:	b480      	push	{r7}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
    {
 8010e34:	4a04      	ldr	r2, [pc, #16]	; (8010e48 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	601a      	str	r2, [r3, #0]
    }
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr
 8010e48:	0802938c 	.word	0x0802938c

08010e4c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
    }
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7ff ffe9 	bl	8010e2c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010e5a:	210c      	movs	r1, #12
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f015 fbc2 	bl	80265e6 <_ZdlPvj>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8010e76:	4a09      	ldr	r2, [pc, #36]	; (8010e9c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	601a      	str	r2, [r3, #0]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	683a      	ldr	r2, [r7, #0]
 8010e80:	605a      	str	r2, [r3, #4]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2200      	movs	r2, #0
 8010e86:	721a      	strb	r2, [r3, #8]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	725a      	strb	r2, [r3, #9]
    {
    }
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	4618      	mov	r0, r3
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr
 8010e9c:	0802938c 	.word	0x0802938c

08010ea0 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
    {
    }
 8010ea8:	bf00      	nop
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
    {
    }
 8010ebc:	bf00      	nop
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	330c      	adds	r3, #12
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff ff65 	bl	8010da4 <_ZN8touchgfx9colortypeC1Ev>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 8010eec:	687a      	ldr	r2, [r7, #4]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	330c      	adds	r3, #12
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	4610      	mov	r0, r2
 8010ef6:	f7ff ffb9 	bl	8010e6c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8010efa:	4a0b      	ldr	r2, [pc, #44]	; (8010f28 <_ZN8STM32DMAC1Ev+0x44>)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	601a      	str	r2, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f103 000c 	add.w	r0, r3, #12
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	3320      	adds	r3, #32
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	f002 fb49 	bl	80135a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	3320      	adds	r3, #32
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7ff ffd6 	bl	8010ec8 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3708      	adds	r7, #8
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
 8010f26:	bf00      	nop
 8010f28:	08028f6c 	.word	0x08028f6c

08010f2c <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 8010f34:	2300      	movs	r3, #0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	370c      	adds	r7, #12
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr
	...

08010f44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8010f4e:	4b03      	ldr	r3, [pc, #12]	; (8010f5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 8010f50:	4a03      	ldr	r2, [pc, #12]	; (8010f60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 8010f52:	2122      	movs	r1, #34	; 0x22
 8010f54:	4803      	ldr	r0, [pc, #12]	; (8010f64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 8010f56:	f015 fb75 	bl	8026644 <__assert_func>
 8010f5a:	bf00      	nop
 8010f5c:	08027f30 	.word	0x08027f30
 8010f60:	08027f54 	.word	0x08027f54
 8010f64:	08027f94 	.word	0x08027f94

08010f68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8010f72:	4b03      	ldr	r3, [pc, #12]	; (8010f80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 8010f74:	4a03      	ldr	r2, [pc, #12]	; (8010f84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 8010f76:	2127      	movs	r1, #39	; 0x27
 8010f78:	4803      	ldr	r0, [pc, #12]	; (8010f88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 8010f7a:	f015 fb63 	bl	8026644 <__assert_func>
 8010f7e:	bf00      	nop
 8010f80:	08027f30 	.word	0x08027f30
 8010f84:	08027fc0 	.word	0x08027fc0
 8010f88:	08027f94 	.word	0x08027f94

08010f8c <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	4a08      	ldr	r2, [pc, #32]	; (8010fb8 <_ZN8STM32DMAD1Ev+0x2c>)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	601a      	str	r2, [r3, #0]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	330c      	adds	r3, #12
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f000 f81c 	bl	8010fdc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7ff ff40 	bl	8010e2c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3708      	adds	r7, #8
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	08028f6c 	.word	0x08028f6c

08010fbc <_ZN8STM32DMAD0Ev>:
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7ff ffe1 	bl	8010f8c <_ZN8STM32DMAD1Ev>
 8010fca:	2144      	movs	r1, #68	; 0x44
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f015 fb0a 	bl	80265e6 <_ZdlPvj>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	4a05      	ldr	r2, [pc, #20]	; (8010ffc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	601a      	str	r2, [r3, #0]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff fee7 	bl	8010dc0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	080293dc 	.word	0x080293dc

08011000 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7ff ffe7 	bl	8010fdc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801100e:	2114      	movs	r1, #20
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f015 fae8 	bl	80265e6 <_ZdlPvj>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	4618      	mov	r0, r3
 801101a:	3708      	adds	r7, #8
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}

08011020 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8011020:	b480      	push	{r7}
 8011022:	b083      	sub	sp, #12
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8011028:	4a04      	ldr	r2, [pc, #16]	; (801103c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6013      	str	r3, [r2, #0]
    }
 801102e:	bf00      	nop
 8011030:	370c      	adds	r7, #12
 8011032:	46bd      	mov	sp, r7
 8011034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011038:	4770      	bx	lr
 801103a:	bf00      	nop
 801103c:	200258b8 	.word	0x200258b8

08011040 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011040:	b480      	push	{r7}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
 801104c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801104e:	4a0b      	ldr	r2, [pc, #44]	; (801107c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	68ba      	ldr	r2, [r7, #8]
 8011058:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	683a      	ldr	r2, [r7, #0]
 8011064:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	69ba      	ldr	r2, [r7, #24]
 801106a:	611a      	str	r2, [r3, #16]
    {
    }
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	4618      	mov	r0, r3
 8011070:	3714      	adds	r7, #20
 8011072:	46bd      	mov	sp, r7
 8011074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop
 801107c:	080290a4 	.word	0x080290a4

08011080 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
    {
 8011088:	4a04      	ldr	r2, [pc, #16]	; (801109c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	601a      	str	r2, [r3, #0]
    }
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	4618      	mov	r0, r3
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr
 801109c:	080290a4 	.word	0x080290a4

080110a0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
    }
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f7ff ffe9 	bl	8011080 <_ZN8touchgfx7MVPHeapD1Ev>
 80110ae:	2114      	movs	r1, #20
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f015 fa98 	bl	80265e6 <_ZdlPvj>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	4618      	mov	r0, r3
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80110c0:	b480      	push	{r7}
 80110c2:	b083      	sub	sp, #12
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
    {
 80110c8:	4a04      	ldr	r2, [pc, #16]	; (80110dc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	601a      	str	r2, [r3, #0]
    }
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	4618      	mov	r0, r3
 80110d2:	370c      	adds	r7, #12
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr
 80110dc:	08029740 	.word	0x08029740

080110e0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
    }
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7ff ffe9 	bl	80110c0 <_ZN8touchgfx3LCDD1Ev>
 80110ee:	2108      	movs	r1, #8
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f015 fa78 	bl	80265e6 <_ZdlPvj>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	4618      	mov	r0, r3
 80110fa:	3708      	adds	r7, #8
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
            : startX(0),
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2200      	movs	r2, #0
 801110c:	801a      	strh	r2, [r3, #0]
              startY(0),
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2200      	movs	r2, #0
 8011112:	805a      	strh	r2, [r3, #2]
              downX(0),
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2200      	movs	r2, #0
 8011118:	809a      	strh	r2, [r3, #4]
              downY(0),
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2200      	movs	r2, #0
 801111e:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2200      	movs	r2, #0
 8011124:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2200      	movs	r2, #0
 801112a:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	739a      	strb	r2, [r3, #14]
        {
        }
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	4618      	mov	r0, r3
 801113c:	370c      	adds	r7, #12
 801113e:	46bd      	mov	sp, r7
 8011140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011144:	4770      	bx	lr

08011146 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8011146:	b580      	push	{r7, lr}
 8011148:	b082      	sub	sp, #8
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4618      	mov	r0, r3
 8011152:	f7ff ffd5 	bl	8011100 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	611a      	str	r2, [r3, #16]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2200      	movs	r2, #0
 8011160:	829a      	strh	r2, [r3, #20]
    {
    }
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	4618      	mov	r0, r3
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 801116c:	b580      	push	{r7, lr}
 801116e:	b084      	sub	sp, #16
 8011170:	af00      	add	r7, sp, #0
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	607a      	str	r2, [r7, #4]
 8011178:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 801117a:	4a55      	ldr	r2, [pc, #340]	; (80112d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	68ba      	ldr	r2, [r7, #8]
 8011184:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	683a      	ldr	r2, [r7, #0]
 8011190:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	2200      	movs	r2, #0
 8011196:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2200      	movs	r2, #0
 801119c:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2200      	movs	r2, #0
 80111a2:	619a      	str	r2, [r3, #24]
          gestures(),
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	331c      	adds	r3, #28
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7ff ffcc 	bl	8011146 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2200      	movs	r2, #0
 80111b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2200      	movs	r2, #0
 80111ba:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2200      	movs	r2, #0
 80111c0:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2200      	movs	r2, #0
 80111c6:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2200      	movs	r2, #0
 80111cc:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2200      	movs	r2, #0
 80111d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2201      	movs	r2, #1
 80111da:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2200      	movs	r2, #0
 80111e2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2200      	movs	r2, #0
 80111ea:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2200      	movs	r2, #0
 80111f2:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	3350      	adds	r3, #80	; 0x50
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fd fb0e 	bl	800e81a <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2200      	movs	r2, #0
 8011202:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2200      	movs	r2, #0
 801120a:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2200      	movs	r2, #0
 8011210:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2200      	movs	r2, #0
 8011216:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2201      	movs	r2, #1
 801121c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2200      	movs	r2, #0
 8011224:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2200      	movs	r2, #0
 801122c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2201      	movs	r2, #1
 8011234:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2200      	movs	r2, #0
 801123c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2200      	movs	r2, #0
 8011244:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2200      	movs	r2, #0
 801124c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2200      	movs	r2, #0
 8011254:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2200      	movs	r2, #0
 801125c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2200      	movs	r2, #0
 8011264:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2200      	movs	r2, #0
 801126a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	2200      	movs	r2, #0
 8011272:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2201      	movs	r2, #1
 801127a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	2201      	movs	r2, #1
 8011282:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 8011286:	4a13      	ldr	r2, [pc, #76]	; (80112d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 801128c:	4a12      	ldr	r2, [pc, #72]	; (80112d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801128e:	8b3b      	ldrh	r3, [r7, #24]
 8011290:	8013      	strh	r3, [r2, #0]
 8011292:	4b11      	ldr	r3, [pc, #68]	; (80112d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011294:	881a      	ldrh	r2, [r3, #0]
 8011296:	4b11      	ldr	r3, [pc, #68]	; (80112dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8011298:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 801129a:	4a11      	ldr	r2, [pc, #68]	; (80112e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801129c:	8bbb      	ldrh	r3, [r7, #28]
 801129e:	8013      	strh	r3, [r2, #0]
 80112a0:	4b0f      	ldr	r3, [pc, #60]	; (80112e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80112a2:	881a      	ldrh	r2, [r3, #0]
 80112a4:	4b0f      	ldr	r3, [pc, #60]	; (80112e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80112a6:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80112a8:	4b0f      	ldr	r3, [pc, #60]	; (80112e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80112aa:	2200      	movs	r2, #0
 80112ac:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80112ae:	8b3a      	ldrh	r2, [r7, #24]
 80112b0:	8bbb      	ldrh	r3, [r7, #28]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	bf34      	ite	cc
 80112b6:	2301      	movcc	r3, #1
 80112b8:	2300      	movcs	r3, #0
 80112ba:	b2db      	uxtb	r3, r3
 80112bc:	461a      	mov	r2, r3
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	4618      	mov	r0, r3
 80112c8:	3710      	adds	r7, #16
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	080292b4 	.word	0x080292b4
 80112d4:	2002585c 	.word	0x2002585c
 80112d8:	20025850 	.word	0x20025850
 80112dc:	20025856 	.word	0x20025856
 80112e0:	20025852 	.word	0x20025852
 80112e4:	20025858 	.word	0x20025858
 80112e8:	20025854 	.word	0x20025854

080112ec <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7fc fff1 	bl	800e2e0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80112fe:	bf00      	nop
 8011300:	3708      	adds	r7, #8
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
	...

08011308 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011308:	b580      	push	{r7, lr}
 801130a:	b086      	sub	sp, #24
 801130c:	af02      	add	r7, sp, #8
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	607a      	str	r2, [r7, #4]
 8011314:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8011316:	68f8      	ldr	r0, [r7, #12]
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	68b9      	ldr	r1, [r7, #8]
 8011322:	f7ff fe8d 	bl	8011040 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8011326:	4a04      	ldr	r2, [pc, #16]	; (8011338 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	601a      	str	r2, [r3, #0]
    {

    }
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	4618      	mov	r0, r3
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	08029090 	.word	0x08029090

0801133c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801133c:	b580      	push	{r7, lr}
 801133e:	af00      	add	r7, sp, #0
 8011340:	4801      	ldr	r0, [pc, #4]	; (8011348 <__tcf_0+0xc>)
 8011342:	f000 f969 	bl	8011618 <_ZN12FrontendHeapD1Ev>
 8011346:	bd80      	pop	{r7, pc}
 8011348:	20023cac 	.word	0x20023cac

0801134c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801134c:	b580      	push	{r7, lr}
 801134e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8011350:	4b11      	ldr	r3, [pc, #68]	; (8011398 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f3bf 8f5b 	dmb	ish
 8011358:	f003 0301 	and.w	r3, r3, #1
 801135c:	2b00      	cmp	r3, #0
 801135e:	bf0c      	ite	eq
 8011360:	2301      	moveq	r3, #1
 8011362:	2300      	movne	r3, #0
 8011364:	b2db      	uxtb	r3, r3
 8011366:	2b00      	cmp	r3, #0
 8011368:	d013      	beq.n	8011392 <_ZN12FrontendHeap11getInstanceEv+0x46>
 801136a:	480b      	ldr	r0, [pc, #44]	; (8011398 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801136c:	f015 f93d 	bl	80265ea <__cxa_guard_acquire>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	bf14      	ite	ne
 8011376:	2301      	movne	r3, #1
 8011378:	2300      	moveq	r3, #0
 801137a:	b2db      	uxtb	r3, r3
 801137c:	2b00      	cmp	r3, #0
 801137e:	d008      	beq.n	8011392 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8011380:	4806      	ldr	r0, [pc, #24]	; (801139c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8011382:	f000 f867 	bl	8011454 <_ZN12FrontendHeapC1Ev>
 8011386:	4806      	ldr	r0, [pc, #24]	; (80113a0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8011388:	f015 f97a 	bl	8026680 <atexit>
 801138c:	4802      	ldr	r0, [pc, #8]	; (8011398 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801138e:	f015 f938 	bl	8026602 <__cxa_guard_release>
        return instance;
 8011392:	4b02      	ldr	r3, [pc, #8]	; (801139c <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8011394:	4618      	mov	r0, r3
 8011396:	bd80      	pop	{r7, pc}
 8011398:	20024058 	.word	0x20024058
 801139c:	20023cac 	.word	0x20023cac
 80113a0:	0801133d 	.word	0x0801133d

080113a4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	4a05      	ldr	r2, [pc, #20]	; (80113c4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	601a      	str	r2, [r3, #0]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff fe63 	bl	8011080 <_ZN8touchgfx7MVPHeapD1Ev>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	4618      	mov	r0, r3
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	08029090 	.word	0x08029090

080113c8 <_ZN16FrontendHeapBaseD0Ev>:
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7ff ffe7 	bl	80113a4 <_ZN16FrontendHeapBaseD1Ev>
 80113d6:	2114      	movs	r1, #20
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f015 f904 	bl	80265e6 <_ZdlPvj>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	4618      	mov	r0, r3
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f000 ff58 	bl	80122a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80113f8:	4a03      	ldr	r2, [pc, #12]	; (8011408 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	4618      	mov	r0, r3
 8011402:	3708      	adds	r7, #8
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	0802905c 	.word	0x0802905c

0801140c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4618      	mov	r0, r3
 8011418:	f000 ff46 	bl	80122a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801141c:	4a03      	ldr	r2, [pc, #12]	; (801142c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	601a      	str	r2, [r3, #0]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4618      	mov	r0, r3
 8011426:	3708      	adds	r7, #8
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}
 801142c:	08029028 	.word	0x08029028

08011430 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4618      	mov	r0, r3
 801143c:	f000 ff34 	bl	80122a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011440:	4a03      	ldr	r2, [pc, #12]	; (8011450 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	601a      	str	r2, [r3, #0]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4618      	mov	r0, r3
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	08028ff4 	.word	0x08028ff4

08011454 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011454:	b590      	push	{r4, r7, lr}
 8011456:	b085      	sub	sp, #20
 8011458:	af02      	add	r7, sp, #8
 801145a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f103 0114 	add.w	r1, r3, #20
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f503 740e 	add.w	r4, r3, #568	; 0x238
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f503 7314 	add.w	r3, r3, #592	; 0x250
                     app(model, *this)
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	4623      	mov	r3, r4
 801147a:	f7ff ff45 	bl	8011308 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801147e:	4a18      	ldr	r2, [pc, #96]	; (80114e0 <_ZN12FrontendHeapC1Ev+0x8c>)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	601a      	str	r2, [r3, #0]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	3314      	adds	r3, #20
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff ffad 	bl	80113e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	332c      	adds	r3, #44	; 0x2c
 8011492:	4618      	mov	r0, r3
 8011494:	f7ff ffba 	bl	801140c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 801149e:	4618      	mov	r0, r3
 80114a0:	f7ff ffc6 	bl	8011430 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fe ff1c 	bl	80102e8 <_ZN5ModelC1Ev>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f503 7014 	add.w	r0, r3, #592	; 0x250
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	4619      	mov	r1, r3
 80114c0:	f7fe fefc 	bl	80102bc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80114cc:	4619      	mov	r1, r3
 80114ce:	4610      	mov	r0, r2
 80114d0:	f7ff ff0c 	bl	80112ec <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	4618      	mov	r0, r3
 80114d8:	370c      	adds	r7, #12
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd90      	pop	{r4, r7, pc}
 80114de:	bf00      	nop
 80114e0:	08028fe0 	.word	0x08028fe0

080114e4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b086      	sub	sp, #24
 80114e8:	af02      	add	r7, sp, #8
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
 80114f0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	8bbb      	ldrh	r3, [r7, #28]
 80114f6:	9301      	str	r3, [sp, #4]
 80114f8:	8b3b      	ldrh	r3, [r7, #24]
 80114fa:	9300      	str	r3, [sp, #0]
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	68b9      	ldr	r1, [r7, #8]
 8011502:	f7ff fe33 	bl	801116c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8011506:	4a04      	ldr	r2, [pc, #16]	; (8011518 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	601a      	str	r2, [r3, #0]
    }
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	4618      	mov	r0, r3
 8011510:	3710      	adds	r7, #16
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	080290e0 	.word	0x080290e0

0801151c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 801151c:	b580      	push	{r7, lr}
 801151e:	b086      	sub	sp, #24
 8011520:	af02      	add	r7, sp, #8
 8011522:	60f8      	str	r0, [r7, #12]
 8011524:	60b9      	str	r1, [r7, #8]
 8011526:	607a      	str	r2, [r7, #4]
 8011528:	603b      	str	r3, [r7, #0]
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	8bbb      	ldrh	r3, [r7, #28]
 801152e:	9301      	str	r3, [sp, #4]
 8011530:	8b3b      	ldrh	r3, [r7, #24]
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	68b9      	ldr	r1, [r7, #8]
 801153a:	f7ff ffd3 	bl	80114e4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801153e:	4a04      	ldr	r2, [pc, #16]	; (8011550 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	601a      	str	r2, [r3, #0]
    }
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	4618      	mov	r0, r3
 8011548:	3710      	adds	r7, #16
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	08028e94 	.word	0x08028e94

08011554 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	4a04      	ldr	r2, [pc, #16]	; (8011570 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	4618      	mov	r0, r3
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr
 8011570:	08028e7c 	.word	0x08028e7c

08011574 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	4618      	mov	r0, r3
 8011580:	f7ff ffe8 	bl	8011554 <_ZN8touchgfx15TouchControllerC1Ev>
 8011584:	4a03      	ldr	r2, [pc, #12]	; (8011594 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	601a      	str	r2, [r3, #0]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4618      	mov	r0, r3
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	08028e64 	.word	0x08028e64

08011598 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 320, 240);

void touchgfx_init()
{
 8011598:	b590      	push	{r4, r7, lr}
 801159a:	b085      	sub	sp, #20
 801159c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801159e:	f7fe fc5d 	bl	800fe5c <_ZN14BitmapDatabase11getInstanceEv>
 80115a2:	4604      	mov	r4, r0
 80115a4:	f7fe fc64 	bl	800fe70 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80115a8:	4603      	mov	r3, r0
 80115aa:	4619      	mov	r1, r3
 80115ac:	2300      	movs	r3, #0
 80115ae:	9300      	str	r3, [sp, #0]
 80115b0:	2300      	movs	r3, #0
 80115b2:	2200      	movs	r2, #0
 80115b4:	4620      	mov	r0, r4
 80115b6:	f007 fbd1 	bl	8018d5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80115ba:	4809      	ldr	r0, [pc, #36]	; (80115e0 <touchgfx_init+0x48>)
 80115bc:	f7ff fd30 	bl	8011020 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80115c0:	2000      	movs	r0, #0
 80115c2:	f7fe fd99 	bl	80100f8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80115c6:	4807      	ldr	r0, [pc, #28]	; (80115e4 <touchgfx_init+0x4c>)
 80115c8:	f007 fb30 	bl	8018c2c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80115cc:	f7ff febe 	bl	801134c <_ZN12FrontendHeap11getInstanceEv>
 80115d0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80115d2:	4805      	ldr	r0, [pc, #20]	; (80115e8 <touchgfx_init+0x50>)
 80115d4:	f7ff faa6 	bl	8010b24 <_ZN11TouchGFXHAL10initializeEv>
}
 80115d8:	bf00      	nop
 80115da:	370c      	adds	r7, #12
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd90      	pop	{r4, r7, pc}
 80115e0:	20024128 	.word	0x20024128
 80115e4:	200002a0 	.word	0x200002a0
 80115e8:	2002412c 	.word	0x2002412c

080115ec <touchgfx_components_init>:

void touchgfx_components_init()
{
 80115ec:	b480      	push	{r7}
 80115ee:	af00      	add	r7, sp, #0
}
 80115f0:	bf00      	nop
 80115f2:	46bd      	mov	sp, r7
 80115f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f8:	4770      	bx	lr
	...

080115fc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	af00      	add	r7, sp, #0
    /*
     * Main event loop will check for VSYNC signal, and then process next frame.
     *
     * Note This function returns immediately if there is no VSYNC signal.
     */
     if (OSWrappers::isVSyncAvailable())
 8011600:	f7ff fba6 	bl	8010d50 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d002      	beq.n	8011610 <touchgfx_taskEntry+0x14>
     {
         hal.backPorchExited();
 801160a:	4802      	ldr	r0, [pc, #8]	; (8011614 <touchgfx_taskEntry+0x18>)
 801160c:	f7ff f95c 	bl	80108c8 <_ZN8touchgfx3HAL15backPorchExitedEv>
     }
}
 8011610:	bf00      	nop
 8011612:	bd80      	pop	{r7, pc}
 8011614:	2002412c 	.word	0x2002412c

08011618 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	4a10      	ldr	r2, [pc, #64]	; (8011664 <_ZN12FrontendHeapD1Ev+0x4c>)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	601a      	str	r2, [r3, #0]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801162c:	4618      	mov	r0, r3
 801162e:	f7fe fe0f 	bl	8010250 <_ZN19FrontendApplicationD1Ev>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011638:	4618      	mov	r0, r3
 801163a:	f000 f827 	bl	801168c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	332c      	adds	r3, #44	; 0x2c
 8011642:	4618      	mov	r0, r3
 8011644:	f000 f844 	bl	80116d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	3314      	adds	r3, #20
 801164c:	4618      	mov	r0, r3
 801164e:	f000 f863 	bl	8011718 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	4618      	mov	r0, r3
 8011656:	f7ff fea5 	bl	80113a4 <_ZN16FrontendHeapBaseD1Ev>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	4618      	mov	r0, r3
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	08028fe0 	.word	0x08028fe0

08011668 <_ZN12FrontendHeapD0Ev>:
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7ff ffd1 	bl	8011618 <_ZN12FrontendHeapD1Ev>
 8011676:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f014 ffb3 	bl	80265e6 <_ZdlPvj>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	4618      	mov	r0, r3
 8011684:	3708      	adds	r7, #8
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
	...

0801168c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	4a05      	ldr	r2, [pc, #20]	; (80116ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	601a      	str	r2, [r3, #0]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4618      	mov	r0, r3
 801169e:	f000 fe02 	bl	80122a6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	08028ff4 	.word	0x08028ff4

080116b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b082      	sub	sp, #8
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f7ff ffe7 	bl	801168c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80116be:	2114      	movs	r1, #20
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f014 ff90 	bl	80265e6 <_ZdlPvj>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4618      	mov	r0, r3
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	4a05      	ldr	r2, [pc, #20]	; (80116f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	601a      	str	r2, [r3, #0]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	4618      	mov	r0, r3
 80116e2:	f000 fde0 	bl	80122a6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4618      	mov	r0, r3
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	08029028 	.word	0x08029028

080116f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f7ff ffe7 	bl	80116d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011702:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f014 ff6d 	bl	80265e6 <_ZdlPvj>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4618      	mov	r0, r3
 8011710:	3708      	adds	r7, #8
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
	...

08011718 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	4a05      	ldr	r2, [pc, #20]	; (8011738 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	601a      	str	r2, [r3, #0]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	4618      	mov	r0, r3
 801172a:	f000 fdbc 	bl	80122a6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	4618      	mov	r0, r3
 8011732:	3708      	adds	r7, #8
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	0802905c 	.word	0x0802905c

0801173c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f7ff ffe7 	bl	8011718 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801174a:	2118      	movs	r1, #24
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f014 ff4a 	bl	80265e6 <_ZdlPvj>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4618      	mov	r0, r3
 8011756:	3708      	adds	r7, #8
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 801175c:	b580      	push	{r7, lr}
 801175e:	b082      	sub	sp, #8
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	4a05      	ldr	r2, [pc, #20]	; (801177c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	601a      	str	r2, [r3, #0]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4618      	mov	r0, r3
 801176e:	f7ff fca7 	bl	80110c0 <_ZN8touchgfx3LCDD1Ev>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	4618      	mov	r0, r3
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	08029ba8 	.word	0x08029ba8

08011780 <_ZN8touchgfx8LCD16bppD0Ev>:
 8011780:	b580      	push	{r7, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f7ff ffe7 	bl	801175c <_ZN8touchgfx8LCD16bppD1Ev>
 801178e:	2184      	movs	r1, #132	; 0x84
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f014 ff28 	bl	80265e6 <_ZdlPvj>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	4618      	mov	r0, r3
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <_Z41__static_initialization_and_destruction_0ii>:
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af02      	add	r7, sp, #8
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d118      	bne.n	80117e2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d113      	bne.n	80117e2 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 80117ba:	4817      	ldr	r0, [pc, #92]	; (8011818 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80117bc:	f7ff feda 	bl	8011574 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80117c0:	4816      	ldr	r0, [pc, #88]	; (801181c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80117c2:	f7ff fb8f 	bl	8010ee4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80117c6:	4816      	ldr	r0, [pc, #88]	; (8011820 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80117c8:	f00b fd8c 	bl	801d2e4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 320, 240);
 80117cc:	23f0      	movs	r3, #240	; 0xf0
 80117ce:	9301      	str	r3, [sp, #4]
 80117d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80117d4:	9300      	str	r3, [sp, #0]
 80117d6:	4b10      	ldr	r3, [pc, #64]	; (8011818 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80117d8:	4a11      	ldr	r2, [pc, #68]	; (8011820 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80117da:	4910      	ldr	r1, [pc, #64]	; (801181c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80117dc:	4811      	ldr	r0, [pc, #68]	; (8011824 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80117de:	f7ff fe9d 	bl	801151c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d113      	bne.n	8011810 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d10e      	bne.n	8011810 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80117f2:	480c      	ldr	r0, [pc, #48]	; (8011824 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80117f4:	f7ff fa26 	bl	8010c44 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80117f8:	480b      	ldr	r0, [pc, #44]	; (8011828 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80117fa:	f7fb ffd5 	bl	800d7a8 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80117fe:	4808      	ldr	r0, [pc, #32]	; (8011820 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011800:	f7ff ffac 	bl	801175c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8011804:	4805      	ldr	r0, [pc, #20]	; (801181c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8011806:	f7ff fbc1 	bl	8010f8c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801180a:	4803      	ldr	r0, [pc, #12]	; (8011818 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801180c:	f7fe ff62 	bl	80106d4 <_ZN20STM32TouchControllerD1Ev>
}
 8011810:	bf00      	nop
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	2002405c 	.word	0x2002405c
 801181c:	20024060 	.word	0x20024060
 8011820:	200240a4 	.word	0x200240a4
 8011824:	2002412c 	.word	0x2002412c
 8011828:	200002a0 	.word	0x200002a0

0801182c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8011834:	2301      	movs	r3, #1
    }
 8011836:	4618      	mov	r0, r3
 8011838:	370c      	adds	r7, #12
 801183a:	46bd      	mov	sp, r7
 801183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011840:	4770      	bx	lr

08011842 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8011842:	b480      	push	{r7}
 8011844:	b083      	sub	sp, #12
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801184a:	230c      	movs	r3, #12
    }
 801184c:	4618      	mov	r0, r3
 801184e:	370c      	adds	r7, #12
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr

08011858 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	460b      	mov	r3, r1
 8011862:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8011864:	887a      	ldrh	r2, [r7, #2]
 8011866:	4613      	mov	r3, r2
 8011868:	005b      	lsls	r3, r3, #1
 801186a:	4413      	add	r3, r2
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	3308      	adds	r3, #8
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	4413      	add	r3, r2
    }
 8011874:	4618      	mov	r0, r3
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr

08011880 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	460b      	mov	r3, r1
 801188a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801188c:	887a      	ldrh	r2, [r7, #2]
 801188e:	4613      	mov	r3, r2
 8011890:	005b      	lsls	r3, r3, #1
 8011892:	4413      	add	r3, r2
 8011894:	009b      	lsls	r3, r3, #2
 8011896:	3308      	adds	r3, #8
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	4413      	add	r3, r2
    }
 801189c:	4618      	mov	r0, r3
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80118a8:	b480      	push	{r7}
 80118aa:	b083      	sub	sp, #12
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80118b0:	2301      	movs	r3, #1
    }
 80118b2:	4618      	mov	r0, r3
 80118b4:	370c      	adds	r7, #12
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr

080118be <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80118be:	b480      	push	{r7}
 80118c0:	b083      	sub	sp, #12
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80118c6:	f44f 7301 	mov.w	r3, #516	; 0x204
    }
 80118ca:	4618      	mov	r0, r3
 80118cc:	370c      	adds	r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr

080118d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80118d6:	b480      	push	{r7}
 80118d8:	b083      	sub	sp, #12
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
 80118de:	460b      	mov	r3, r1
 80118e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80118e2:	887a      	ldrh	r2, [r7, #2]
 80118e4:	4613      	mov	r3, r2
 80118e6:	01db      	lsls	r3, r3, #7
 80118e8:	4413      	add	r3, r2
 80118ea:	009b      	lsls	r3, r3, #2
 80118ec:	3308      	adds	r3, #8
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	4413      	add	r3, r2
    }
 80118f2:	4618      	mov	r0, r3
 80118f4:	370c      	adds	r7, #12
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80118fe:	b480      	push	{r7}
 8011900:	b083      	sub	sp, #12
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
 8011906:	460b      	mov	r3, r1
 8011908:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801190a:	887a      	ldrh	r2, [r7, #2]
 801190c:	4613      	mov	r3, r2
 801190e:	01db      	lsls	r3, r3, #7
 8011910:	4413      	add	r3, r2
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	3308      	adds	r3, #8
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	4413      	add	r3, r2
    }
 801191a:	4618      	mov	r0, r3
 801191c:	370c      	adds	r7, #12
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr

08011926 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8011926:	b480      	push	{r7}
 8011928:	b083      	sub	sp, #12
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801192e:	2301      	movs	r3, #1
    }
 8011930:	4618      	mov	r0, r3
 8011932:	370c      	adds	r7, #12
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011944:	2310      	movs	r3, #16
    }
 8011946:	4618      	mov	r0, r3
 8011948:	370c      	adds	r7, #12
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr

08011952 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011952:	b480      	push	{r7}
 8011954:	b083      	sub	sp, #12
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	460b      	mov	r3, r1
 801195c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801195e:	887b      	ldrh	r3, [r7, #2]
 8011960:	011b      	lsls	r3, r3, #4
 8011962:	3308      	adds	r3, #8
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	4413      	add	r3, r2
    }
 8011968:	4618      	mov	r0, r3
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr

08011974 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	460b      	mov	r3, r1
 801197e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011980:	887b      	ldrh	r3, [r7, #2]
 8011982:	011b      	lsls	r3, r3, #4
 8011984:	3308      	adds	r3, #8
 8011986:	687a      	ldr	r2, [r7, #4]
 8011988:	4413      	add	r3, r2
    }
 801198a:	4618      	mov	r0, r3
 801198c:	370c      	adds	r7, #12
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr

08011996 <_GLOBAL__sub_I_touchgfx_init>:
 8011996:	b580      	push	{r7, lr}
 8011998:	af00      	add	r7, sp, #0
 801199a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801199e:	2001      	movs	r0, #1
 80119a0:	f7ff fefe 	bl	80117a0 <_Z41__static_initialization_and_destruction_0ii>
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <_GLOBAL__sub_D_touchgfx_init>:
 80119a6:	b580      	push	{r7, lr}
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80119ae:	2000      	movs	r0, #0
 80119b0:	f7ff fef6 	bl	80117a0 <_Z41__static_initialization_and_destruction_0ii>
 80119b4:	bd80      	pop	{r7, pc}
	...

080119b8 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
    {
 80119c0:	4a04      	ldr	r2, [pc, #16]	; (80119d4 <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x1c>)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	601a      	str	r2, [r3, #0]
    }
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	4618      	mov	r0, r3
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr
 80119d4:	080291b8 	.word	0x080291b8

080119d8 <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
    }
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f7ff ffe9 	bl	80119b8 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 80119e6:	2104      	movs	r1, #4
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f014 fdfc 	bl	80265e6 <_ZdlPvj>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	4618      	mov	r0, r3
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8011a06:	3301      	adds	r3, #1
 8011a08:	b2da      	uxtb	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 8011a10:	bf00      	nop
 8011a12:	370c      	adds	r7, #12
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr

08011a1c <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 8011a1c:	b480      	push	{r7}
 8011a1e:	b083      	sub	sp, #12
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	683a      	ldr	r2, [r7, #0]
 8011a2a:	619a      	str	r2, [r3, #24]
    }
 8011a2c:	bf00      	nop
 8011a2e:	370c      	adds	r7, #12
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr

08011a38 <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>:
    FrameBufferAllocator* getFrameBufferAllocator()
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
        return frameBufferAllocator;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	699b      	ldr	r3, [r3, #24]
    }
 8011a44:	4618      	mov	r0, r3
 8011a46:	370c      	adds	r7, #12
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	460b      	mov	r3, r1
 8011a5a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8011a5c:	78fb      	ldrb	r3, [r7, #3]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d002      	beq.n	8011a68 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8011a62:	78fb      	ldrb	r3, [r7, #3]
 8011a64:	2b02      	cmp	r3, #2
 8011a66:	d105      	bne.n	8011a74 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	78fa      	ldrb	r2, [r7, #3]
 8011a6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8011a70:	2301      	movs	r3, #1
 8011a72:	e027      	b.n	8011ac4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8011a74:	78fb      	ldrb	r3, [r7, #3]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d123      	bne.n	8011ac2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d014      	beq.n	8011aac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	339c      	adds	r3, #156	; 0x9c
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	4798      	blx	r3
 8011a8e:	4603      	mov	r3, r0
 8011a90:	461a      	mov	r2, r3
 8011a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d008      	beq.n	8011aac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011a9a:	4b0c      	ldr	r3, [pc, #48]	; (8011acc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	f083 0301 	eor.w	r3, r3, #1
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d001      	beq.n	8011aac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e000      	b.n	8011aae <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8011aac:	2300      	movs	r3, #0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d005      	beq.n	8011abe <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	78fa      	ldrb	r2, [r7, #3]
 8011ab6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8011aba:	2301      	movs	r3, #1
 8011abc:	e002      	b.n	8011ac4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	e000      	b.n	8011ac4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8011ac2:	2300      	movs	r3, #0
    }
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3708      	adds	r7, #8
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	2002585a 	.word	0x2002585a

08011ad0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
                   3, /* number of blocks */
                   2  /* bytes per pixel */
                   > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 8011ad0:	b5b0      	push	{r4, r5, r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f000 fedb 	bl	8012896 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8011ae0:	687d      	ldr	r5, [r7, #4]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	3364      	adds	r3, #100	; 0x64
 8011ae8:	681c      	ldr	r4, [r3, #0]
 8011aea:	f004 f84d 	bl	8015b88 <_ZN8touchgfx11Application11getInstanceEv>
 8011aee:	4603      	mov	r3, r0
 8011af0:	4619      	mov	r1, r3
 8011af2:	4628      	mov	r0, r5
 8011af4:	47a0      	blx	r4
    enableLCDControllerInterrupt();
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	3380      	adds	r3, #128	; 0x80
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	4798      	blx	r3
    enableInterrupts();
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	3378      	adds	r3, #120	; 0x78
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	4798      	blx	r3
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	4906      	ldr	r1, [pc, #24]	; (8011b2c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7ff ff82 	bl	8011a1c <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2102      	movs	r1, #2
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7ff ff97 	bl	8011a50 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 8011b22:	bf00      	nop
 8011b24:	3708      	adds	r7, #8
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bdb0      	pop	{r4, r5, r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	200241a8 	.word	0x200241a8

08011b30 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
}
 8011b38:	bf00      	nop
 8011b3a:	370c      	adds	r7, #12
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
}
 8011b4c:	bf00      	nop
 8011b4e:	370c      	adds	r7, #12
 8011b50:	46bd      	mov	sp, r7
 8011b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b56:	4770      	bx	lr

08011b58 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
}
 8011b60:	bf00      	nop
 8011b62:	370c      	adds	r7, #12
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr

08011b6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
}
 8011b74:	bf00      	nop
 8011b76:	370c      	adds	r7, #12
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr

08011b80 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f000 fe6a 	bl	8012864 <_ZN8touchgfx3HAL10beginFrameEv>
 8011b90:	4603      	mov	r3, r0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3708      	adds	r7, #8
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}

08011b9a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8011b9a:	b580      	push	{r7, lr}
 8011b9c:	b082      	sub	sp, #8
 8011b9e:	af00      	add	r7, sp, #0
 8011ba0:	6078      	str	r0, [r7, #4]
    // We must guard the next frame until we're done transferring all blocks over our display interface
    // through either a semaphore if user is running an OS or a simple variable if not
    // Wait until all blocks have been transmitted
    while (touchgfxDisplayDriverTransmitActive()){}
 8011ba2:	bf00      	nop
 8011ba4:	f7f3 fb02 	bl	80051ac <touchgfxDisplayDriverTransmitActive>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	bf14      	ite	ne
 8011bae:	2301      	movne	r3, #1
 8011bb0:	2300      	moveq	r3, #0
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d1f5      	bne.n	8011ba4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xa>

    HAL::endFrame();
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f000 fe5e 	bl	801287c <_ZN8touchgfx3HAL8endFrameEv>
    touchgfx::OSWrappers::signalRenderingDone();
 8011bc0:	f7ff f8ba 	bl	8010d38 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>
}
 8011bc4:	bf00      	nop
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b083      	sub	sp, #12
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	370c      	adds	r7, #12
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be0:	4770      	bx	lr

08011be2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8011be2:	b480      	push	{r7}
 8011be4:	b083      	sub	sp, #12
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8011bec:	bf00      	nop
 8011bee:	370c      	adds	r7, #12
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr

08011bf8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b088      	sub	sp, #32
 8011bfc:	af02      	add	r7, sp, #8
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6839      	ldr	r1, [r7, #0]
 8011c06:	4618      	mov	r0, r3
 8011c08:	f000 fdf6 	bl	80127f8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // Once flushFrameBuffer() is called by the framework a block is already for transfer
    // Mark it ready for transfer and transmit it if user defined method isTransmittingData() does not return false
    // If data is not being transmitted, transfer the data with user defined method transmitFrameBufferBlock().
    frameBufferAllocator->markBlockReadyForTransfer();
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	699a      	ldr	r2, [r3, #24]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	699b      	ldr	r3, [r3, #24]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	3304      	adds	r3, #4
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4610      	mov	r0, r2
 8011c1c:	4798      	blx	r3
    if (!touchgfxDisplayDriverTransmitActive())
 8011c1e:	f7f3 fac5 	bl	80051ac <touchgfxDisplayDriverTransmitActive>
 8011c22:	4603      	mov	r3, r0
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	bf0c      	ite	eq
 8011c28:	2301      	moveq	r3, #1
 8011c2a:	2300      	movne	r3, #0
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d021      	beq.n	8011c76 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x7e>
    {
        touchgfx::Rect r;
 8011c32:	f107 030c 	add.w	r3, r7, #12
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fc fdef 	bl	800e81a <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = frameBufferAllocator->getBlockForTransfer(r);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	699a      	ldr	r2, [r3, #24]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	699b      	ldr	r3, [r3, #24]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	330c      	adds	r3, #12
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f107 010c 	add.w	r1, r7, #12
 8011c4e:	4610      	mov	r0, r2
 8011c50:	4798      	blx	r3
 8011c52:	6178      	str	r0, [r7, #20]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8011c54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011c58:	b299      	uxth	r1, r3
 8011c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011c64:	b298      	uxth	r0, r3
 8011c66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	9300      	str	r3, [sp, #0]
 8011c6e:	4603      	mov	r3, r0
 8011c70:	6978      	ldr	r0, [r7, #20]
 8011c72:	f7f3 faad 	bl	80051d0 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8011c76:	bf00      	nop
 8011c78:	3718      	adds	r7, #24
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011c7e:	b580      	push	{r7, lr}
 8011c80:	b084      	sub	sp, #16
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	60f8      	str	r0, [r7, #12]
 8011c86:	60b9      	str	r1, [r7, #8]
 8011c88:	607a      	str	r2, [r7, #4]
 8011c8a:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8011c8c:	68f8      	ldr	r0, [r7, #12]
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	687a      	ldr	r2, [r7, #4]
 8011c92:	68b9      	ldr	r1, [r7, #8]
 8011c94:	f000 ff21 	bl	8012ada <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8011c98:	4603      	mov	r3, r0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
void FrameBufferAllocatorWaitOnTransfer()
{
 8011ca2:	b480      	push	{r7}
 8011ca4:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
   */
}
 8011ca6:	bf00      	nop
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cae:	4770      	bx	lr

08011cb0 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
void FrameBufferAllocatorSignalBlockDrawn()
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
   */
}
 8011cb4:	bf00      	nop
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr

08011cbe <_ZN8touchgfx16startNewTransferEv>:

// A user must call touchgfx::startNewTransfer(); once transmitFrameBufferBlock() has successfully sent a block.
void startNewTransfer()
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b086      	sub	sp, #24
 8011cc2:	af02      	add	r7, sp, #8
    FrameBufferAllocator* fba = HAL::getInstance()->getFrameBufferAllocator();
 8011cc4:	f7fc f910 	bl	800dee8 <_ZN8touchgfx3HAL11getInstanceEv>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7ff feb4 	bl	8011a38 <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>
 8011cd0:	60f8      	str	r0, [r7, #12]

  // Free the previous transmitted block, marking it ready for rendering
    fba->freeBlockAfterTransfer();
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	3318      	adds	r3, #24
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	4798      	blx	r3
    if (fba->hasBlockReadyForTransfer())
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	3308      	adds	r3, #8
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	68f8      	ldr	r0, [r7, #12]
 8011ce8:	4798      	blx	r3
 8011cea:	4603      	mov	r3, r0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d01d      	beq.n	8011d2c <_ZN8touchgfx16startNewTransferEv+0x6e>
    {
        touchgfx::Rect r;
 8011cf0:	463b      	mov	r3, r7
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fc fd91 	bl	800e81a <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = fba->getBlockForTransfer(r);
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	330c      	adds	r3, #12
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	463a      	mov	r2, r7
 8011d02:	4611      	mov	r1, r2
 8011d04:	68f8      	ldr	r0, [r7, #12]
 8011d06:	4798      	blx	r3
 8011d08:	60b8      	str	r0, [r7, #8]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8011d0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011d0e:	b299      	uxth	r1, r3
 8011d10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d14:	b29a      	uxth	r2, r3
 8011d16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011d1a:	b298      	uxth	r0, r3
 8011d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	9300      	str	r3, [sp, #0]
 8011d24:	4603      	mov	r3, r0
 8011d26:	68b8      	ldr	r0, [r7, #8]
 8011d28:	f7f3 fa52 	bl	80051d0 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8011d2c:	bf00      	nop
 8011d2e:	3710      	adds	r7, #16
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}

08011d34 <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	af00      	add	r7, sp, #0
  // After completed transmission start new transfer if blocks are ready.
    touchgfx::startNewTransfer();
 8011d38:	f7ff ffc1 	bl	8011cbe <_ZN8touchgfx16startNewTransferEv>
}
 8011d3c:	bf00      	nop
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 8011d44:	f7fc f8d0 	bl	800dee8 <_ZN8touchgfx3HAL11getInstanceEv>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7ff fe54 	bl	80119f8 <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 8011d50:	f7fe ffe6 	bl	8010d20 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8011d54:	bf00      	nop
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 8011d58:	b480      	push	{r7}
 8011d5a:	b083      	sub	sp, #12
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	4a04      	ldr	r2, [pc, #16]	; (8011d74 <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x1c>)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	601a      	str	r2, [r3, #0]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	370c      	adds	r7, #12
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr
 8011d74:	080291b8 	.word	0x080291b8

08011d78 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 8011d78:	b5b0      	push	{r4, r5, r7, lr}
 8011d7a:	b084      	sub	sp, #16
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
    {
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff ffe8 	bl	8011d58 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 8011d88:	4a1a      	ldr	r2, [pc, #104]	; (8011df4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x7c>)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	601a      	str	r2, [r3, #0]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8011d94:	3308      	adds	r3, #8
 8011d96:	2402      	movs	r4, #2
 8011d98:	461d      	mov	r5, r3
 8011d9a:	e004      	b.n	8011da6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x2e>
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f7fc fd3c 	bl	800e81a <_ZN8touchgfx4RectC1Ev>
 8011da2:	3508      	adds	r5, #8
 8011da4:	3c01      	subs	r4, #1
 8011da6:	2c00      	cmp	r4, #0
 8011da8:	daf8      	bge.n	8011d9c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x24>
        sendingBlock = -1;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011db0:	461a      	mov	r2, r3
 8011db2:	f04f 33ff 	mov.w	r3, #4294967295
 8011db6:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        drawingBlock = -1;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8011dc6:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        for (uint32_t i = 0; i < blocks; i++)
 8011dca:	2300      	movs	r3, #0
 8011dcc:	60fb      	str	r3, [r7, #12]
 8011dce:	e008      	b.n	8011de2 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x6a>
        {
            state[i] = EMPTY;
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	3304      	adds	r3, #4
 8011dd8:	2200      	movs	r2, #0
 8011dda:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	3301      	adds	r3, #1
 8011de0:	60fb      	str	r3, [r7, #12]
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2b02      	cmp	r3, #2
 8011de6:	d9f3      	bls.n	8011dd0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x58>
        }
    }
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	4618      	mov	r0, r3
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bdb0      	pop	{r4, r5, r7, pc}
 8011df2:	bf00      	nop
 8011df4:	080290b4 	.word	0x080290b4

08011df8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	4a05      	ldr	r2, [pc, #20]	; (8011e18 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev+0x20>)
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	601a      	str	r2, [r3, #0]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7ff fdd5 	bl	80119b8 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	4618      	mov	r0, r3
 8011e12:	3708      	adds	r7, #8
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	080290b4 	.word	0x080290b4

08011e1c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED0Ev>:
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f7ff ffe7 	bl	8011df8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
 8011e2a:	f241 61a8 	movw	r1, #5800	; 0x16a8
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f014 fbd9 	bl	80265e6 <_ZdlPvj>
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	4618      	mov	r0, r3
 8011e38:	3708      	adds	r7, #8
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
	...

08011e40 <_Z41__static_initialization_and_destruction_0ii>:
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d107      	bne.n	8011e60 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d102      	bne.n	8011e60 <_Z41__static_initialization_and_destruction_0ii+0x20>
                   > blockAllocator;
 8011e5a:	4809      	ldr	r0, [pc, #36]	; (8011e80 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011e5c:	f7ff ff8c 	bl	8011d78 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d107      	bne.n	8011e76 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d102      	bne.n	8011e76 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8011e70:	4803      	ldr	r0, [pc, #12]	; (8011e80 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011e72:	f7ff ffc1 	bl	8011df8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
}
 8011e76:	bf00      	nop
 8011e78:	3708      	adds	r7, #8
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	200241a8 	.word	0x200241a8

08011e84 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b086      	sub	sp, #24
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	60f8      	str	r0, [r7, #12]
 8011e8c:	4608      	mov	r0, r1
 8011e8e:	4611      	mov	r1, r2
 8011e90:	461a      	mov	r2, r3
 8011e92:	4603      	mov	r3, r0
 8011e94:	817b      	strh	r3, [r7, #10]
 8011e96:	460b      	mov	r3, r1
 8011e98:	813b      	strh	r3, [r7, #8]
 8011e9a:	4613      	mov	r3, r2
 8011e9c:	80fb      	strh	r3, [r7, #6]
    {
        drawingBlock++;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ea4:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	68fa      	ldr	r2, [r7, #12]
 8011eac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011eb0:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        if (drawingBlock == blocks)
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011eba:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011ebe:	2b03      	cmp	r3, #3
 8011ec0:	d109      	bne.n	8011ed6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x52>
        {
            drawingBlock = 0;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ec8:	461a      	mov	r2, r3
 8011eca:	2300      	movs	r3, #0
 8011ecc:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        }
        while (state[drawingBlock] != EMPTY)
 8011ed0:	e001      	b.n	8011ed6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x52>
        {
            FrameBufferAllocatorWaitOnTransfer();
 8011ed2:	f7ff fee6 	bl	8011ca2 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011edc:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011ee0:	68fa      	ldr	r2, [r7, #12]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	791b      	ldrb	r3, [r3, #4]
 8011ee6:	b2db      	uxtb	r3, r3
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	bf14      	ite	ne
 8011eec:	2301      	movne	r3, #1
 8011eee:	2300      	moveq	r3, #0
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d1ed      	bne.n	8011ed2 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x4e>
        }
        assert(state[drawingBlock] == EMPTY);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011efc:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011f00:	68fa      	ldr	r2, [r7, #12]
 8011f02:	4413      	add	r3, r2
 8011f04:	791b      	ldrb	r3, [r3, #4]
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d005      	beq.n	8011f18 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x94>
 8011f0c:	4b38      	ldr	r3, [pc, #224]	; (8011ff0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x16c>)
 8011f0e:	4a39      	ldr	r2, [pc, #228]	; (8011ff4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 8011f10:	21aa      	movs	r1, #170	; 0xaa
 8011f12:	4839      	ldr	r0, [pc, #228]	; (8011ff8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 8011f14:	f014 fb96 	bl	8026644 <__assert_func>
        state[drawingBlock] = ALLOCATED;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f1e:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011f22:	68fa      	ldr	r2, [r7, #12]
 8011f24:	4413      	add	r3, r2
 8011f26:	2201      	movs	r2, #1
 8011f28:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 8011f2a:	88fb      	ldrh	r3, [r7, #6]
 8011f2c:	005b      	lsls	r3, r3, #1
 8011f2e:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8011f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f3a:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f42:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 8011f46:	4613      	mov	r3, r2
 8011f48:	011b      	lsls	r3, r3, #4
 8011f4a:	1a9b      	subs	r3, r3, r2
 8011f4c:	01db      	lsls	r3, r3, #7
 8011f4e:	3308      	adds	r3, #8
 8011f50:	68fa      	ldr	r2, [r7, #12]
 8011f52:	441a      	add	r2, r3
 8011f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f56:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f5e:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 8011f62:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	f202 22d1 	addw	r2, r2, #721	; 0x2d1
 8011f6c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
        blockRect[drawingBlock].y = y;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f76:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011f7a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8011f7e:	68fa      	ldr	r2, [r7, #12]
 8011f80:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011f84:	00db      	lsls	r3, r3, #3
 8011f86:	4413      	add	r3, r2
 8011f88:	460a      	mov	r2, r1
 8011f8a:	805a      	strh	r2, [r3, #2]
        blockRect[drawingBlock].width = width;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f92:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011f96:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011fa0:	00db      	lsls	r3, r3, #3
 8011fa2:	4413      	add	r3, r2
 8011fa4:	460a      	mov	r2, r1
 8011fa6:	809a      	strh	r2, [r3, #4]
        blockRect[drawingBlock].height = MIN(height, lines);
 8011fa8:	8c3a      	ldrh	r2, [r7, #32]
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	429a      	cmp	r2, r3
 8011fae:	bfa8      	it	ge
 8011fb0:	461a      	movge	r2, r3
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fb8:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011fbc:	b211      	sxth	r1, r2
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011fc4:	00db      	lsls	r3, r3, #3
 8011fc6:	4413      	add	r3, r2
 8011fc8:	460a      	mov	r2, r1
 8011fca:	80da      	strh	r2, [r3, #6]
        return blockRect[drawingBlock].height;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fd2:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011fd6:	68fa      	ldr	r2, [r7, #12]
 8011fd8:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011fdc:	00db      	lsls	r3, r3, #3
 8011fde:	4413      	add	r3, r2
 8011fe0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011fe4:	b29b      	uxth	r3, r3
    }
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	08028174 	.word	0x08028174
 8011ff4:	08028194 	.word	0x08028194
 8011ff8:	080282c8 	.word	0x080282c8

08011ffc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b082      	sub	sp, #8
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801200a:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	4413      	add	r3, r2
 8012012:	791b      	ldrb	r3, [r3, #4]
 8012014:	b2db      	uxtb	r3, r3
 8012016:	2b01      	cmp	r3, #1
 8012018:	d005      	beq.n	8012026 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x2a>
 801201a:	4b0a      	ldr	r3, [pc, #40]	; (8012044 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 801201c:	4a0a      	ldr	r2, [pc, #40]	; (8012048 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 801201e:	21b9      	movs	r1, #185	; 0xb9
 8012020:	480a      	ldr	r0, [pc, #40]	; (801204c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x50>)
 8012022:	f014 fb0f 	bl	8026644 <__assert_func>
        state[drawingBlock] = DRAWN;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801202c:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	4413      	add	r3, r2
 8012034:	2202      	movs	r2, #2
 8012036:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 8012038:	f7ff fe3a 	bl	8011cb0 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 801203c:	bf00      	nop
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	0802831c 	.word	0x0802831c
 8012048:	08028340 	.word	0x08028340
 801204c:	080282c8 	.word	0x080282c8

08012050 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 8012050:	b480      	push	{r7}
 8012052:	b085      	sub	sp, #20
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 8012058:	2300      	movs	r3, #0
 801205a:	60fb      	str	r3, [r7, #12]
 801205c:	e011      	b.n	8012082 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x32>
        {
            if (state[i] == DRAWN)
 801205e:	687a      	ldr	r2, [r7, #4]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	4413      	add	r3, r2
 8012064:	3304      	adds	r3, #4
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	b2db      	uxtb	r3, r3
 801206a:	2b02      	cmp	r3, #2
 801206c:	bf0c      	ite	eq
 801206e:	2301      	moveq	r3, #1
 8012070:	2300      	movne	r3, #0
 8012072:	b2db      	uxtb	r3, r3
 8012074:	2b00      	cmp	r3, #0
 8012076:	d001      	beq.n	801207c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x2c>
            {
                return true;
 8012078:	2301      	movs	r3, #1
 801207a:	e006      	b.n	801208a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x3a>
        for (uint32_t i = 0; i < blocks; i++)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	3301      	adds	r3, #1
 8012080:	60fb      	str	r3, [r7, #12]
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2b02      	cmp	r3, #2
 8012086:	d9ea      	bls.n	801205e <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0xe>
            }
        }
        return false;
 8012088:	2300      	movs	r3, #0
    }
 801208a:	4618      	mov	r0, r3
 801208c:	3714      	adds	r7, #20
 801208e:	46bd      	mov	sp, r7
 8012090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012094:	4770      	bx	lr
	...

08012098 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80120a8:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80120ac:	3301      	adds	r3, #1
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80120b4:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        if (sendingBlock == blocks)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80120be:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80120c2:	2b03      	cmp	r3, #3
 80120c4:	d106      	bne.n	80120d4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x3c>
        {
            sendingBlock = 0;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80120cc:	461a      	mov	r2, r3
 80120ce:	2300      	movs	r3, #0
 80120d0:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        }
        assert(state[sendingBlock] == DRAWN);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80120da:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	4413      	add	r3, r2
 80120e2:	791b      	ldrb	r3, [r3, #4]
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	2b02      	cmp	r3, #2
 80120e8:	d005      	beq.n	80120f6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x5e>
 80120ea:	4b16      	ldr	r3, [pc, #88]	; (8012144 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xac>)
 80120ec:	4a16      	ldr	r2, [pc, #88]	; (8012148 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb0>)
 80120ee:	21dd      	movs	r1, #221	; 0xdd
 80120f0:	4816      	ldr	r0, [pc, #88]	; (801214c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb4>)
 80120f2:	f014 faa7 	bl	8026644 <__assert_func>
        rect = blockRect[sendingBlock];
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80120fc:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8012100:	683a      	ldr	r2, [r7, #0]
 8012102:	6879      	ldr	r1, [r7, #4]
 8012104:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8012108:	00db      	lsls	r3, r3, #3
 801210a:	440b      	add	r3, r1
 801210c:	cb03      	ldmia	r3!, {r0, r1}
 801210e:	6010      	str	r0, [r2, #0]
 8012110:	6051      	str	r1, [r2, #4]
        state[sendingBlock] = SENDING;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012118:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	4413      	add	r3, r2
 8012120:	2203      	movs	r2, #3
 8012122:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801212a:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 801212e:	4613      	mov	r3, r2
 8012130:	011b      	lsls	r3, r3, #4
 8012132:	1a9b      	subs	r3, r3, r2
 8012134:	01db      	lsls	r3, r3, #7
 8012136:	3308      	adds	r3, #8
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	4413      	add	r3, r2
    }
 801213c:	4618      	mov	r0, r3
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	08028414 	.word	0x08028414
 8012148:	08028434 	.word	0x08028434
 801214c:	080282c8 	.word	0x080282c8

08012150 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801215e:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8012162:	3301      	adds	r3, #1
 8012164:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2b03      	cmp	r3, #3
 801216a:	d101      	bne.n	8012170 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x20>
        {
            nextSendingBlock = 0;
 801216c:	2300      	movs	r3, #0
 801216e:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 8012170:	687a      	ldr	r2, [r7, #4]
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	4413      	add	r3, r2
 8012176:	3304      	adds	r3, #4
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	b2db      	uxtb	r3, r3
 801217c:	2b02      	cmp	r3, #2
 801217e:	d005      	beq.n	801218c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x3c>
 8012180:	4b07      	ldr	r3, [pc, #28]	; (80121a0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 8012182:	4a08      	ldr	r2, [pc, #32]	; (80121a4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 8012184:	21ea      	movs	r1, #234	; 0xea
 8012186:	4808      	ldr	r0, [pc, #32]	; (80121a8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 8012188:	f014 fa5c 	bl	8026644 <__assert_func>
        return blockRect[nextSendingBlock];
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8012192:	00db      	lsls	r3, r3, #3
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	4413      	add	r3, r2
    }
 8012198:	4618      	mov	r0, r3
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	08028534 	.word	0x08028534
 80121a4:	08028558 	.word	0x08028558
 80121a8:	080282c8 	.word	0x080282c8

080121ac <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 80121ac:	b480      	push	{r7}
 80121ae:	b085      	sub	sp, #20
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80121ba:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80121be:	3301      	adds	r3, #1
 80121c0:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2b03      	cmp	r3, #3
 80121c6:	d101      	bne.n	80121cc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv+0x20>
        {
            nextDrawingBlock = 0;
 80121c8:	2300      	movs	r3, #0
 80121ca:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 80121cc:	687a      	ldr	r2, [r7, #4]
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	4413      	add	r3, r2
 80121d2:	3304      	adds	r3, #4
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	b2db      	uxtb	r3, r3
 80121d8:	2b00      	cmp	r3, #0
 80121da:	bf0c      	ite	eq
 80121dc:	2301      	moveq	r3, #1
 80121de:	2300      	movne	r3, #0
 80121e0:	b2db      	uxtb	r3, r3
    }
 80121e2:	4618      	mov	r0, r3
 80121e4:	3714      	adds	r7, #20
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr
	...

080121f0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80121fe:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	4413      	add	r3, r2
 8012206:	791b      	ldrb	r3, [r3, #4]
 8012208:	b2db      	uxtb	r3, r3
 801220a:	2b03      	cmp	r3, #3
 801220c:	d005      	beq.n	801221a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x2a>
 801220e:	4b09      	ldr	r3, [pc, #36]	; (8012234 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x44>)
 8012210:	4a09      	ldr	r2, [pc, #36]	; (8012238 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 8012212:	21ff      	movs	r1, #255	; 0xff
 8012214:	4809      	ldr	r0, [pc, #36]	; (801223c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x4c>)
 8012216:	f014 fa15 	bl	8026644 <__assert_func>
        state[sendingBlock] = EMPTY;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012220:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8012224:	687a      	ldr	r2, [r7, #4]
 8012226:	4413      	add	r3, r2
 8012228:	2200      	movs	r2, #0
 801222a:	711a      	strb	r2, [r3, #4]
    }
 801222c:	bf00      	nop
 801222e:	3708      	adds	r7, #8
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	08028638 	.word	0x08028638
 8012238:	08028658 	.word	0x08028658
 801223c:	080282c8 	.word	0x080282c8

08012240 <_GLOBAL__sub_I__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8012240:	b580      	push	{r7, lr}
 8012242:	af00      	add	r7, sp, #0
 8012244:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012248:	2001      	movs	r0, #1
 801224a:	f7ff fdf9 	bl	8011e40 <_Z41__static_initialization_and_destruction_0ii>
 801224e:	bd80      	pop	{r7, pc}

08012250 <_GLOBAL__sub_D__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8012250:	b580      	push	{r7, lr}
 8012252:	af00      	add	r7, sp, #0
 8012254:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012258:	2000      	movs	r0, #0
 801225a:	f7ff fdf1 	bl	8011e40 <_Z41__static_initialization_and_destruction_0ii>
 801225e:	bd80      	pop	{r7, pc}

08012260 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012260:	8880      	ldrh	r0, [r0, #4]
 8012262:	4770      	bx	lr

08012264 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012264:	b570      	push	{r4, r5, r6, lr}
 8012266:	6803      	ldr	r3, [r0, #0]
 8012268:	4605      	mov	r5, r0
 801226a:	460c      	mov	r4, r1
 801226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801226e:	2100      	movs	r1, #0
 8012270:	4798      	blx	r3
 8012272:	682b      	ldr	r3, [r5, #0]
 8012274:	4606      	mov	r6, r0
 8012276:	6a1b      	ldr	r3, [r3, #32]
 8012278:	4628      	mov	r0, r5
 801227a:	4798      	blx	r3
 801227c:	1ba4      	subs	r4, r4, r6
 801227e:	b2a4      	uxth	r4, r4
 8012280:	fbb4 f0f0 	udiv	r0, r4, r0
 8012284:	bd70      	pop	{r4, r5, r6, pc}

08012286 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012286:	2300      	movs	r3, #0
 8012288:	8083      	strh	r3, [r0, #4]
 801228a:	4770      	bx	lr

0801228c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801228c:	b510      	push	{r4, lr}
 801228e:	6803      	ldr	r3, [r0, #0]
 8012290:	8881      	ldrh	r1, [r0, #4]
 8012292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012294:	4604      	mov	r4, r0
 8012296:	4798      	blx	r3
 8012298:	88a3      	ldrh	r3, [r4, #4]
 801229a:	3301      	adds	r3, #1
 801229c:	80a3      	strh	r3, [r4, #4]
 801229e:	bd10      	pop	{r4, pc}

080122a0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80122a0:	6803      	ldr	r3, [r0, #0]
 80122a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122a4:	4718      	bx	r3

080122a6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80122a6:	4770      	bx	lr

080122a8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80122a8:	4a02      	ldr	r2, [pc, #8]	; (80122b4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80122aa:	6002      	str	r2, [r0, #0]
 80122ac:	2200      	movs	r2, #0
 80122ae:	8082      	strh	r2, [r0, #4]
 80122b0:	4770      	bx	lr
 80122b2:	bf00      	nop
 80122b4:	080291e4 	.word	0x080291e4

080122b8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80122b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80122ba:	4770      	bx	lr

080122bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80122bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80122be:	2000      	movs	r0, #0
 80122c0:	b12b      	cbz	r3, 80122ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80122c2:	b920      	cbnz	r0, 80122ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80122c4:	1a5a      	subs	r2, r3, r1
 80122c6:	4250      	negs	r0, r2
 80122c8:	4150      	adcs	r0, r2
 80122ca:	699b      	ldr	r3, [r3, #24]
 80122cc:	e7f8      	b.n	80122c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80122ce:	4770      	bx	lr

080122d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80122d0:	2300      	movs	r3, #0
 80122d2:	6148      	str	r0, [r1, #20]
 80122d4:	618b      	str	r3, [r1, #24]
 80122d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80122d8:	b913      	cbnz	r3, 80122e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80122da:	6281      	str	r1, [r0, #40]	; 0x28
 80122dc:	4770      	bx	lr
 80122de:	4613      	mov	r3, r2
 80122e0:	699a      	ldr	r2, [r3, #24]
 80122e2:	2a00      	cmp	r2, #0
 80122e4:	d1fb      	bne.n	80122de <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80122e6:	6199      	str	r1, [r3, #24]
 80122e8:	4770      	bx	lr

080122ea <_ZN8touchgfx9Container9removeAllEv>:
 80122ea:	2200      	movs	r2, #0
 80122ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80122ee:	b123      	cbz	r3, 80122fa <_ZN8touchgfx9Container9removeAllEv+0x10>
 80122f0:	6999      	ldr	r1, [r3, #24]
 80122f2:	6281      	str	r1, [r0, #40]	; 0x28
 80122f4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80122f8:	e7f8      	b.n	80122ec <_ZN8touchgfx9Container9removeAllEv+0x2>
 80122fa:	4770      	bx	lr

080122fc <_ZN8touchgfx9Container6unlinkEv>:
 80122fc:	2300      	movs	r3, #0
 80122fe:	6283      	str	r3, [r0, #40]	; 0x28
 8012300:	4770      	bx	lr

08012302 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012302:	2200      	movs	r2, #0
 8012304:	8002      	strh	r2, [r0, #0]
 8012306:	8042      	strh	r2, [r0, #2]
 8012308:	8082      	strh	r2, [r0, #4]
 801230a:	80c2      	strh	r2, [r0, #6]
 801230c:	4770      	bx	lr

0801230e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801230e:	b570      	push	{r4, r5, r6, lr}
 8012310:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012312:	460d      	mov	r5, r1
 8012314:	4616      	mov	r6, r2
 8012316:	b13c      	cbz	r4, 8012328 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012318:	6823      	ldr	r3, [r4, #0]
 801231a:	4620      	mov	r0, r4
 801231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801231e:	4632      	mov	r2, r6
 8012320:	4629      	mov	r1, r5
 8012322:	4798      	blx	r3
 8012324:	69a4      	ldr	r4, [r4, #24]
 8012326:	e7f6      	b.n	8012316 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012328:	bd70      	pop	{r4, r5, r6, pc}

0801232a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801232a:	b538      	push	{r3, r4, r5, lr}
 801232c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801232e:	460d      	mov	r5, r1
 8012330:	b134      	cbz	r4, 8012340 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012332:	682b      	ldr	r3, [r5, #0]
 8012334:	4621      	mov	r1, r4
 8012336:	689b      	ldr	r3, [r3, #8]
 8012338:	4628      	mov	r0, r5
 801233a:	4798      	blx	r3
 801233c:	69a4      	ldr	r4, [r4, #24]
 801233e:	e7f7      	b.n	8012330 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012340:	bd38      	pop	{r3, r4, r5, pc}

08012342 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012342:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012344:	b19b      	cbz	r3, 801236e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012346:	428b      	cmp	r3, r1
 8012348:	d109      	bne.n	801235e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801234a:	699a      	ldr	r2, [r3, #24]
 801234c:	2100      	movs	r1, #0
 801234e:	6159      	str	r1, [r3, #20]
 8012350:	6282      	str	r2, [r0, #40]	; 0x28
 8012352:	b902      	cbnz	r2, 8012356 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012354:	4770      	bx	lr
 8012356:	6199      	str	r1, [r3, #24]
 8012358:	4770      	bx	lr
 801235a:	4613      	mov	r3, r2
 801235c:	b13a      	cbz	r2, 801236e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801235e:	699a      	ldr	r2, [r3, #24]
 8012360:	428a      	cmp	r2, r1
 8012362:	d1fa      	bne.n	801235a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012364:	698a      	ldr	r2, [r1, #24]
 8012366:	619a      	str	r2, [r3, #24]
 8012368:	2300      	movs	r3, #0
 801236a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801236e:	4770      	bx	lr

08012370 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012370:	b410      	push	{r4}
 8012372:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012374:	4604      	mov	r4, r0
 8012376:	b92b      	cbnz	r3, 8012384 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012378:	6803      	ldr	r3, [r0, #0]
 801237a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801237e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012380:	4611      	mov	r1, r2
 8012382:	4718      	bx	r3
 8012384:	b941      	cbnz	r1, 8012398 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012386:	6193      	str	r3, [r2, #24]
 8012388:	6282      	str	r2, [r0, #40]	; 0x28
 801238a:	6154      	str	r4, [r2, #20]
 801238c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012390:	4770      	bx	lr
 8012392:	4603      	mov	r3, r0
 8012394:	2800      	cmp	r0, #0
 8012396:	d0f9      	beq.n	801238c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012398:	4299      	cmp	r1, r3
 801239a:	6998      	ldr	r0, [r3, #24]
 801239c:	d1f9      	bne.n	8012392 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801239e:	6190      	str	r0, [r2, #24]
 80123a0:	618a      	str	r2, [r1, #24]
 80123a2:	e7f2      	b.n	801238a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080123a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80123a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a8:	461f      	mov	r7, r3
 80123aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80123ae:	460d      	mov	r5, r1
 80123b0:	4616      	mov	r6, r2
 80123b2:	b103      	cbz	r3, 80123b6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80123b4:	6038      	str	r0, [r7, #0]
 80123b6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80123b8:	b314      	cbz	r4, 8012400 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80123ba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80123be:	b1eb      	cbz	r3, 80123fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80123c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80123c4:	428d      	cmp	r5, r1
 80123c6:	db19      	blt.n	80123fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80123c8:	8923      	ldrh	r3, [r4, #8]
 80123ca:	b289      	uxth	r1, r1
 80123cc:	440b      	add	r3, r1
 80123ce:	b21b      	sxth	r3, r3
 80123d0:	429d      	cmp	r5, r3
 80123d2:	da13      	bge.n	80123fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80123d4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80123d8:	4296      	cmp	r6, r2
 80123da:	db0f      	blt.n	80123fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80123dc:	8963      	ldrh	r3, [r4, #10]
 80123de:	b292      	uxth	r2, r2
 80123e0:	4413      	add	r3, r2
 80123e2:	b21b      	sxth	r3, r3
 80123e4:	429e      	cmp	r6, r3
 80123e6:	da09      	bge.n	80123fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80123e8:	6823      	ldr	r3, [r4, #0]
 80123ea:	1ab2      	subs	r2, r6, r2
 80123ec:	1a69      	subs	r1, r5, r1
 80123ee:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80123f2:	b212      	sxth	r2, r2
 80123f4:	463b      	mov	r3, r7
 80123f6:	b209      	sxth	r1, r1
 80123f8:	4620      	mov	r0, r4
 80123fa:	47c0      	blx	r8
 80123fc:	69a4      	ldr	r4, [r4, #24]
 80123fe:	e7db      	b.n	80123b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012404 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012408:	4c6e      	ldr	r4, [pc, #440]	; (80125c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801240a:	b0a1      	sub	sp, #132	; 0x84
 801240c:	6824      	ldr	r4, [r4, #0]
 801240e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8012410:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8012414:	9303      	str	r3, [sp, #12]
 8012416:	2400      	movs	r4, #0
 8012418:	802c      	strh	r4, [r5, #0]
 801241a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801241c:	802c      	strh	r4, [r5, #0]
 801241e:	601c      	str	r4, [r3, #0]
 8012420:	4606      	mov	r6, r0
 8012422:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012426:	f7ff ffbd 	bl	80123a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801242a:	f1b9 0f03 	cmp.w	r9, #3
 801242e:	f340 80c2 	ble.w	80125b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8012432:	4631      	mov	r1, r6
 8012434:	a80c      	add	r0, sp, #48	; 0x30
 8012436:	f004 fd03 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801243a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801243e:	9306      	str	r3, [sp, #24]
 8012440:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012444:	9307      	str	r3, [sp, #28]
 8012446:	9b03      	ldr	r3, [sp, #12]
 8012448:	f8d3 a000 	ldr.w	sl, [r3]
 801244c:	f1ba 0f00 	cmp.w	sl, #0
 8012450:	f000 80b4 	beq.w	80125bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8012454:	4651      	mov	r1, sl
 8012456:	a810      	add	r0, sp, #64	; 0x40
 8012458:	f004 fcf2 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801245c:	9b01      	ldr	r3, [sp, #4]
 801245e:	9a06      	ldr	r2, [sp, #24]
 8012460:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8012464:	189d      	adds	r5, r3, r2
 8012466:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801246a:	9a07      	ldr	r2, [sp, #28]
 801246c:	2002      	movs	r0, #2
 801246e:	fb91 f1f0 	sdiv	r1, r1, r0
 8012472:	4419      	add	r1, r3
 8012474:	1a6d      	subs	r5, r5, r1
 8012476:	9b02      	ldr	r3, [sp, #8]
 8012478:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801247c:	4413      	add	r3, r2
 801247e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012482:	fb92 f2f0 	sdiv	r2, r2, r0
 8012486:	440a      	add	r2, r1
 8012488:	1a9b      	subs	r3, r3, r2
 801248a:	435b      	muls	r3, r3
 801248c:	fb05 3505 	mla	r5, r5, r5, r3
 8012490:	4f4d      	ldr	r7, [pc, #308]	; (80125c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8012492:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012494:	ac10      	add	r4, sp, #64	; 0x40
 8012496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012498:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801249a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801249c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801249e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124a0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80124a4:	f1b9 0f0c 	cmp.w	r9, #12
 80124a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80124ac:	f04f 0303 	mov.w	r3, #3
 80124b0:	bfc8      	it	gt
 80124b2:	4698      	movgt	r8, r3
 80124b4:	f8cd 9000 	str.w	r9, [sp]
 80124b8:	f04f 0400 	mov.w	r4, #0
 80124bc:	bfdc      	itt	le
 80124be:	f109 32ff 	addle.w	r2, r9, #4294967295
 80124c2:	fb92 f8f3 	sdivle	r8, r2, r3
 80124c6:	1c63      	adds	r3, r4, #1
 80124c8:	aa10      	add	r2, sp, #64	; 0x40
 80124ca:	f004 0401 	and.w	r4, r4, #1
 80124ce:	9308      	str	r3, [sp, #32]
 80124d0:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80124d4:	9b00      	ldr	r3, [sp, #0]
 80124d6:	fb93 f3f8 	sdiv	r3, r3, r8
 80124da:	b29b      	uxth	r3, r3
 80124dc:	3404      	adds	r4, #4
 80124de:	f04f 0b00 	mov.w	fp, #0
 80124e2:	9304      	str	r3, [sp, #16]
 80124e4:	9a04      	ldr	r2, [sp, #16]
 80124e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80124ea:	fb13 f302 	smulbb	r3, r3, r2
 80124ee:	9a01      	ldr	r2, [sp, #4]
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	1899      	adds	r1, r3, r2
 80124f4:	9305      	str	r3, [sp, #20]
 80124f6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80124fa:	b209      	sxth	r1, r1
 80124fc:	4299      	cmp	r1, r3
 80124fe:	db4d      	blt.n	801259c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012500:	8932      	ldrh	r2, [r6, #8]
 8012502:	4413      	add	r3, r2
 8012504:	b21b      	sxth	r3, r3
 8012506:	4299      	cmp	r1, r3
 8012508:	da48      	bge.n	801259c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801250a:	9b04      	ldr	r3, [sp, #16]
 801250c:	6827      	ldr	r7, [r4, #0]
 801250e:	fb17 f703 	smulbb	r7, r7, r3
 8012512:	9b02      	ldr	r3, [sp, #8]
 8012514:	b2bf      	uxth	r7, r7
 8012516:	18fa      	adds	r2, r7, r3
 8012518:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801251c:	b212      	sxth	r2, r2
 801251e:	429a      	cmp	r2, r3
 8012520:	db3c      	blt.n	801259c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012522:	8970      	ldrh	r0, [r6, #10]
 8012524:	4403      	add	r3, r0
 8012526:	b21b      	sxth	r3, r3
 8012528:	429a      	cmp	r2, r3
 801252a:	da37      	bge.n	801259c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801252c:	2300      	movs	r3, #0
 801252e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012530:	4630      	mov	r0, r6
 8012532:	ab0b      	add	r3, sp, #44	; 0x2c
 8012534:	f7ff ff36 	bl	80123a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801253a:	b37a      	cbz	r2, 801259c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801253c:	4552      	cmp	r2, sl
 801253e:	d02d      	beq.n	801259c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012540:	4611      	mov	r1, r2
 8012542:	a80e      	add	r0, sp, #56	; 0x38
 8012544:	9209      	str	r2, [sp, #36]	; 0x24
 8012546:	f004 fc7b 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801254a:	9a06      	ldr	r2, [sp, #24]
 801254c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8012550:	9b01      	ldr	r3, [sp, #4]
 8012552:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8012556:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801255a:	4413      	add	r3, r2
 801255c:	f04f 0e02 	mov.w	lr, #2
 8012560:	fb91 f1fe 	sdiv	r1, r1, lr
 8012564:	4401      	add	r1, r0
 8012566:	1a58      	subs	r0, r3, r1
 8012568:	9a07      	ldr	r2, [sp, #28]
 801256a:	9b02      	ldr	r3, [sp, #8]
 801256c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012570:	fb9c fcfe 	sdiv	ip, ip, lr
 8012574:	4413      	add	r3, r2
 8012576:	448c      	add	ip, r1
 8012578:	eba3 030c 	sub.w	r3, r3, ip
 801257c:	435b      	muls	r3, r3
 801257e:	fb00 3300 	mla	r3, r0, r0, r3
 8012582:	42ab      	cmp	r3, r5
 8012584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012586:	d208      	bcs.n	801259a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012588:	9803      	ldr	r0, [sp, #12]
 801258a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801258c:	6001      	str	r1, [r0, #0]
 801258e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012590:	9805      	ldr	r0, [sp, #20]
 8012592:	8008      	strh	r0, [r1, #0]
 8012594:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012596:	461d      	mov	r5, r3
 8012598:	800f      	strh	r7, [r1, #0]
 801259a:	4692      	mov	sl, r2
 801259c:	f10b 0b01 	add.w	fp, fp, #1
 80125a0:	f1bb 0f04 	cmp.w	fp, #4
 80125a4:	f104 0408 	add.w	r4, r4, #8
 80125a8:	d19c      	bne.n	80124e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80125aa:	9b00      	ldr	r3, [sp, #0]
 80125ac:	9c08      	ldr	r4, [sp, #32]
 80125ae:	444b      	add	r3, r9
 80125b0:	4544      	cmp	r4, r8
 80125b2:	9300      	str	r3, [sp, #0]
 80125b4:	d187      	bne.n	80124c6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80125b6:	b021      	add	sp, #132	; 0x84
 80125b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125bc:	f04f 35ff 	mov.w	r5, #4294967295
 80125c0:	e766      	b.n	8012490 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80125c2:	bf00      	nop
 80125c4:	2002585c 	.word	0x2002585c
 80125c8:	08028728 	.word	0x08028728

080125cc <_ZN8touchgfx4RectaNERKS0_>:
 80125cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125d0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80125d4:	888c      	ldrh	r4, [r1, #4]
 80125d6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80125da:	443c      	add	r4, r7
 80125dc:	b2a4      	uxth	r4, r4
 80125de:	fa0f f884 	sxth.w	r8, r4
 80125e2:	45c1      	cmp	r9, r8
 80125e4:	da2f      	bge.n	8012646 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80125e6:	8882      	ldrh	r2, [r0, #4]
 80125e8:	444a      	add	r2, r9
 80125ea:	b292      	uxth	r2, r2
 80125ec:	fa0f fe82 	sxth.w	lr, r2
 80125f0:	4577      	cmp	r7, lr
 80125f2:	da28      	bge.n	8012646 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80125f4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80125f8:	88cb      	ldrh	r3, [r1, #6]
 80125fa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80125fe:	442b      	add	r3, r5
 8012600:	b21b      	sxth	r3, r3
 8012602:	429e      	cmp	r6, r3
 8012604:	da1f      	bge.n	8012646 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012606:	88c3      	ldrh	r3, [r0, #6]
 8012608:	4433      	add	r3, r6
 801260a:	b29b      	uxth	r3, r3
 801260c:	fa0f fc83 	sxth.w	ip, r3
 8012610:	4565      	cmp	r5, ip
 8012612:	da18      	bge.n	8012646 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012614:	454f      	cmp	r7, r9
 8012616:	bfb8      	it	lt
 8012618:	464f      	movlt	r7, r9
 801261a:	42b5      	cmp	r5, r6
 801261c:	bfb8      	it	lt
 801261e:	4635      	movlt	r5, r6
 8012620:	45f0      	cmp	r8, lr
 8012622:	bfd8      	it	le
 8012624:	4622      	movle	r2, r4
 8012626:	1bd2      	subs	r2, r2, r7
 8012628:	8082      	strh	r2, [r0, #4]
 801262a:	884a      	ldrh	r2, [r1, #2]
 801262c:	88c9      	ldrh	r1, [r1, #6]
 801262e:	8007      	strh	r7, [r0, #0]
 8012630:	440a      	add	r2, r1
 8012632:	b292      	uxth	r2, r2
 8012634:	b211      	sxth	r1, r2
 8012636:	458c      	cmp	ip, r1
 8012638:	bfa8      	it	ge
 801263a:	4613      	movge	r3, r2
 801263c:	1b5b      	subs	r3, r3, r5
 801263e:	80c3      	strh	r3, [r0, #6]
 8012640:	8045      	strh	r5, [r0, #2]
 8012642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012646:	2300      	movs	r3, #0
 8012648:	8003      	strh	r3, [r0, #0]
 801264a:	8043      	strh	r3, [r0, #2]
 801264c:	8083      	strh	r3, [r0, #4]
 801264e:	80c3      	strh	r3, [r0, #6]
 8012650:	e7f7      	b.n	8012642 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012652 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012652:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012656:	2b00      	cmp	r3, #0
 8012658:	dd06      	ble.n	8012668 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801265a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801265e:	2800      	cmp	r0, #0
 8012660:	bfcc      	ite	gt
 8012662:	2000      	movgt	r0, #0
 8012664:	2001      	movle	r0, #1
 8012666:	4770      	bx	lr
 8012668:	2001      	movs	r0, #1
 801266a:	4770      	bx	lr

0801266c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012670:	2300      	movs	r3, #0
 8012672:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012674:	8003      	strh	r3, [r0, #0]
 8012676:	4604      	mov	r4, r0
 8012678:	8043      	strh	r3, [r0, #2]
 801267a:	8083      	strh	r3, [r0, #4]
 801267c:	80c3      	strh	r3, [r0, #6]
 801267e:	2d00      	cmp	r5, #0
 8012680:	d040      	beq.n	8012704 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012682:	1d28      	adds	r0, r5, #4
 8012684:	f7ff ffe5 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012688:	b988      	cbnz	r0, 80126ae <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801268a:	4620      	mov	r0, r4
 801268c:	f7ff ffe1 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012690:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012694:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012698:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801269c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80126a0:	b138      	cbz	r0, 80126b2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80126a2:	8022      	strh	r2, [r4, #0]
 80126a4:	8063      	strh	r3, [r4, #2]
 80126a6:	f8a4 e004 	strh.w	lr, [r4, #4]
 80126aa:	f8a4 c006 	strh.w	ip, [r4, #6]
 80126ae:	69ad      	ldr	r5, [r5, #24]
 80126b0:	e7e5      	b.n	801267e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80126b2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80126b6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80126ba:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80126be:	4290      	cmp	r0, r2
 80126c0:	4607      	mov	r7, r0
 80126c2:	bfa8      	it	ge
 80126c4:	4617      	movge	r7, r2
 80126c6:	4472      	add	r2, lr
 80126c8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80126cc:	8027      	strh	r7, [r4, #0]
 80126ce:	4299      	cmp	r1, r3
 80126d0:	460e      	mov	r6, r1
 80126d2:	4440      	add	r0, r8
 80126d4:	bfa8      	it	ge
 80126d6:	461e      	movge	r6, r3
 80126d8:	4471      	add	r1, lr
 80126da:	4463      	add	r3, ip
 80126dc:	b200      	sxth	r0, r0
 80126de:	b212      	sxth	r2, r2
 80126e0:	b209      	sxth	r1, r1
 80126e2:	b21b      	sxth	r3, r3
 80126e4:	4290      	cmp	r0, r2
 80126e6:	bfac      	ite	ge
 80126e8:	ebc7 0200 	rsbge	r2, r7, r0
 80126ec:	ebc7 0202 	rsblt	r2, r7, r2
 80126f0:	4299      	cmp	r1, r3
 80126f2:	bfac      	ite	ge
 80126f4:	ebc6 0301 	rsbge	r3, r6, r1
 80126f8:	ebc6 0303 	rsblt	r3, r6, r3
 80126fc:	8066      	strh	r6, [r4, #2]
 80126fe:	80a2      	strh	r2, [r4, #4]
 8012700:	80e3      	strh	r3, [r4, #6]
 8012702:	e7d4      	b.n	80126ae <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012704:	4620      	mov	r0, r4
 8012706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801270a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801270a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801270e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012712:	b383      	cbz	r3, 8012776 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012714:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012716:	b374      	cbz	r4, 8012776 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012718:	f9b1 5000 	ldrsh.w	r5, [r1]
 801271c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012720:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012724:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012728:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801272c:	b303      	cbz	r3, 8012770 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801272e:	4668      	mov	r0, sp
 8012730:	1d21      	adds	r1, r4, #4
 8012732:	f8ad 5000 	strh.w	r5, [sp]
 8012736:	f8ad 6002 	strh.w	r6, [sp, #2]
 801273a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801273e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012742:	f7ff ff43 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 8012746:	4668      	mov	r0, sp
 8012748:	f7ff ff83 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 801274c:	b980      	cbnz	r0, 8012770 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801274e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012752:	88a2      	ldrh	r2, [r4, #4]
 8012754:	1a9b      	subs	r3, r3, r2
 8012756:	f8ad 3000 	strh.w	r3, [sp]
 801275a:	88e2      	ldrh	r2, [r4, #6]
 801275c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012760:	1a9b      	subs	r3, r3, r2
 8012762:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012766:	6823      	ldr	r3, [r4, #0]
 8012768:	4669      	mov	r1, sp
 801276a:	689b      	ldr	r3, [r3, #8]
 801276c:	4620      	mov	r0, r4
 801276e:	4798      	blx	r3
 8012770:	69a4      	ldr	r4, [r4, #24]
 8012772:	2c00      	cmp	r4, #0
 8012774:	d1d8      	bne.n	8012728 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012776:	b002      	add	sp, #8
 8012778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801277c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801277c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801277e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012782:	460d      	mov	r5, r1
 8012784:	4616      	mov	r6, r2
 8012786:	b323      	cbz	r3, 80127d2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012788:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801278a:	b314      	cbz	r4, 80127d2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801278c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012790:	b1eb      	cbz	r3, 80127ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012792:	6828      	ldr	r0, [r5, #0]
 8012794:	6869      	ldr	r1, [r5, #4]
 8012796:	466b      	mov	r3, sp
 8012798:	c303      	stmia	r3!, {r0, r1}
 801279a:	4668      	mov	r0, sp
 801279c:	1d21      	adds	r1, r4, #4
 801279e:	f7ff ff15 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 80127a2:	4668      	mov	r0, sp
 80127a4:	f7ff ff55 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 80127a8:	b988      	cbnz	r0, 80127ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80127aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80127ae:	88a2      	ldrh	r2, [r4, #4]
 80127b0:	1a9b      	subs	r3, r3, r2
 80127b2:	f8ad 3000 	strh.w	r3, [sp]
 80127b6:	88e2      	ldrh	r2, [r4, #6]
 80127b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80127bc:	1a9b      	subs	r3, r3, r2
 80127be:	f8ad 3002 	strh.w	r3, [sp, #2]
 80127c2:	6823      	ldr	r3, [r4, #0]
 80127c4:	4632      	mov	r2, r6
 80127c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127c8:	4669      	mov	r1, sp
 80127ca:	4620      	mov	r0, r4
 80127cc:	4798      	blx	r3
 80127ce:	69a4      	ldr	r4, [r4, #24]
 80127d0:	e7db      	b.n	801278a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80127d2:	b002      	add	sp, #8
 80127d4:	bd70      	pop	{r4, r5, r6, pc}

080127d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80127d6:	b513      	push	{r0, r1, r4, lr}
 80127d8:	6803      	ldr	r3, [r0, #0]
 80127da:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80127de:	2300      	movs	r3, #0
 80127e0:	e9cd 3300 	strd	r3, r3, [sp]
 80127e4:	466b      	mov	r3, sp
 80127e6:	47a0      	blx	r4
 80127e8:	b002      	add	sp, #8
 80127ea:	bd10      	pop	{r4, pc}

080127ec <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80127ec:	2301      	movs	r3, #1
 80127ee:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80127f2:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80127f6:	4770      	bx	lr

080127f8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80127f8:	2301      	movs	r3, #1
 80127fa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80127fe:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8012802:	4770      	bx	lr

08012804 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012804:	6843      	ldr	r3, [r0, #4]
 8012806:	2201      	movs	r2, #1
 8012808:	725a      	strb	r2, [r3, #9]
 801280a:	6840      	ldr	r0, [r0, #4]
 801280c:	6803      	ldr	r3, [r0, #0]
 801280e:	691b      	ldr	r3, [r3, #16]
 8012810:	4718      	bx	r3

08012812 <_ZN8touchgfx3HAL8flushDMAEv>:
 8012812:	6840      	ldr	r0, [r0, #4]
 8012814:	6803      	ldr	r3, [r0, #0]
 8012816:	689b      	ldr	r3, [r3, #8]
 8012818:	4718      	bx	r3

0801281a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801281a:	b530      	push	{r4, r5, lr}
 801281c:	b08b      	sub	sp, #44	; 0x2c
 801281e:	6804      	ldr	r4, [r0, #0]
 8012820:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8012824:	9509      	str	r5, [sp, #36]	; 0x24
 8012826:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801282a:	9508      	str	r5, [sp, #32]
 801282c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8012830:	9507      	str	r5, [sp, #28]
 8012832:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8012836:	9506      	str	r5, [sp, #24]
 8012838:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801283c:	9505      	str	r5, [sp, #20]
 801283e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8012842:	9504      	str	r5, [sp, #16]
 8012844:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8012848:	9503      	str	r5, [sp, #12]
 801284a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801284e:	9502      	str	r5, [sp, #8]
 8012850:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012854:	e9cd 3500 	strd	r3, r5, [sp]
 8012858:	4613      	mov	r3, r2
 801285a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801285c:	2200      	movs	r2, #0
 801285e:	47a0      	blx	r4
 8012860:	b00b      	add	sp, #44	; 0x2c
 8012862:	bd30      	pop	{r4, r5, pc}

08012864 <_ZN8touchgfx3HAL10beginFrameEv>:
 8012864:	4b04      	ldr	r3, [pc, #16]	; (8012878 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	b123      	cbz	r3, 8012874 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801286a:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 801286e:	f080 0001 	eor.w	r0, r0, #1
 8012872:	4770      	bx	lr
 8012874:	2001      	movs	r0, #1
 8012876:	4770      	bx	lr
 8012878:	2002585a 	.word	0x2002585a

0801287c <_ZN8touchgfx3HAL8endFrameEv>:
 801287c:	b510      	push	{r4, lr}
 801287e:	4604      	mov	r4, r0
 8012880:	6840      	ldr	r0, [r0, #4]
 8012882:	6803      	ldr	r3, [r0, #0]
 8012884:	689b      	ldr	r3, [r3, #8]
 8012886:	4798      	blx	r3
 8012888:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 801288c:	b113      	cbz	r3, 8012894 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801288e:	2301      	movs	r3, #1
 8012890:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8012894:	bd10      	pop	{r4, pc}

08012896 <_ZN8touchgfx3HAL10initializeEv>:
 8012896:	b510      	push	{r4, lr}
 8012898:	4604      	mov	r4, r0
 801289a:	f7fe f9f5 	bl	8010c88 <_ZN8touchgfx10OSWrappers10initializeEv>
 801289e:	f7fd ff3b 	bl	8010718 <_ZN8touchgfx4GPIO4initEv>
 80128a2:	6860      	ldr	r0, [r4, #4]
 80128a4:	6803      	ldr	r3, [r0, #0]
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	4798      	blx	r3
 80128aa:	68e0      	ldr	r0, [r4, #12]
 80128ac:	6803      	ldr	r3, [r0, #0]
 80128ae:	689b      	ldr	r3, [r3, #8]
 80128b0:	4798      	blx	r3
 80128b2:	6823      	ldr	r3, [r4, #0]
 80128b4:	4620      	mov	r0, r4
 80128b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128bc:	4718      	bx	r3

080128be <_ZN8touchgfx3HAL9taskEntryEv>:
 80128be:	b508      	push	{r3, lr}
 80128c0:	6803      	ldr	r3, [r0, #0]
 80128c2:	4604      	mov	r4, r0
 80128c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128c8:	4798      	blx	r3
 80128ca:	6823      	ldr	r3, [r4, #0]
 80128cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128ce:	4620      	mov	r0, r4
 80128d0:	4798      	blx	r3
 80128d2:	f7fe fa4d 	bl	8010d70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80128d6:	6823      	ldr	r3, [r4, #0]
 80128d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128da:	e7f8      	b.n	80128ce <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080128dc <_ZN8touchgfx3HAL4tickEv>:
 80128dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80128de:	6803      	ldr	r3, [r0, #0]
 80128e0:	4d5b      	ldr	r5, [pc, #364]	; (8012a50 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80128e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80128e6:	4604      	mov	r4, r0
 80128e8:	4798      	blx	r3
 80128ea:	2800      	cmp	r0, #0
 80128ec:	f000 8095 	beq.w	8012a1a <_ZN8touchgfx3HAL4tickEv+0x13e>
 80128f0:	2001      	movs	r0, #1
 80128f2:	f7fd ff19 	bl	8010728 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80128f6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80128fa:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80128fe:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8012902:	2600      	movs	r6, #0
 8012904:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8012908:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801290c:	b133      	cbz	r3, 801291c <_ZN8touchgfx3HAL4tickEv+0x40>
 801290e:	6823      	ldr	r3, [r4, #0]
 8012910:	4620      	mov	r0, r4
 8012912:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012916:	4798      	blx	r3
 8012918:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 801291c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8012920:	6862      	ldr	r2, [r4, #4]
 8012922:	f083 0301 	eor.w	r3, r3, #1
 8012926:	7253      	strb	r3, [r2, #9]
 8012928:	2601      	movs	r6, #1
 801292a:	702e      	strb	r6, [r5, #0]
 801292c:	f003 f92c 	bl	8015b88 <_ZN8touchgfx11Application11getInstanceEv>
 8012930:	6803      	ldr	r3, [r0, #0]
 8012932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012934:	4798      	blx	r3
 8012936:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801293a:	b90b      	cbnz	r3, 8012940 <_ZN8touchgfx3HAL4tickEv+0x64>
 801293c:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8012940:	f003 f922 	bl	8015b88 <_ZN8touchgfx11Application11getInstanceEv>
 8012944:	6803      	ldr	r3, [r0, #0]
 8012946:	695b      	ldr	r3, [r3, #20]
 8012948:	4798      	blx	r3
 801294a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801294c:	6803      	ldr	r3, [r0, #0]
 801294e:	691b      	ldr	r3, [r3, #16]
 8012950:	4798      	blx	r3
 8012952:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8012956:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 801295a:	3b01      	subs	r3, #1
 801295c:	b2db      	uxtb	r3, r3
 801295e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012962:	b10a      	cbz	r2, 8012968 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012964:	2b00      	cmp	r3, #0
 8012966:	d1eb      	bne.n	8012940 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012968:	4a3a      	ldr	r2, [pc, #232]	; (8012a54 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801296a:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 801296e:	7813      	ldrb	r3, [r2, #0]
 8012970:	3301      	adds	r3, #1
 8012972:	b25b      	sxtb	r3, r3
 8012974:	4299      	cmp	r1, r3
 8012976:	7013      	strb	r3, [r2, #0]
 8012978:	dc10      	bgt.n	801299c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801297a:	68e0      	ldr	r0, [r4, #12]
 801297c:	2300      	movs	r3, #0
 801297e:	7013      	strb	r3, [r2, #0]
 8012980:	6803      	ldr	r3, [r0, #0]
 8012982:	aa03      	add	r2, sp, #12
 8012984:	68db      	ldr	r3, [r3, #12]
 8012986:	a902      	add	r1, sp, #8
 8012988:	4798      	blx	r3
 801298a:	6823      	ldr	r3, [r4, #0]
 801298c:	2800      	cmp	r0, #0
 801298e:	d050      	beq.n	8012a32 <_ZN8touchgfx3HAL4tickEv+0x156>
 8012990:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012994:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012998:	4620      	mov	r0, r4
 801299a:	4798      	blx	r3
 801299c:	6960      	ldr	r0, [r4, #20]
 801299e:	2300      	movs	r3, #0
 80129a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80129a4:	b158      	cbz	r0, 80129be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80129a6:	6803      	ldr	r3, [r0, #0]
 80129a8:	f10d 0107 	add.w	r1, sp, #7
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	4798      	blx	r3
 80129b0:	b128      	cbz	r0, 80129be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80129b2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80129b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80129b8:	6803      	ldr	r3, [r0, #0]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	4798      	blx	r3
 80129be:	f104 001c 	add.w	r0, r4, #28
 80129c2:	f013 fd5b 	bl	802647c <_ZN8touchgfx8Gestures4tickEv>
 80129c6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80129ca:	b30b      	cbz	r3, 8012a10 <_ZN8touchgfx3HAL4tickEv+0x134>
 80129cc:	6920      	ldr	r0, [r4, #16]
 80129ce:	6803      	ldr	r3, [r0, #0]
 80129d0:	691b      	ldr	r3, [r3, #16]
 80129d2:	4798      	blx	r3
 80129d4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80129d6:	4606      	mov	r6, r0
 80129d8:	b903      	cbnz	r3, 80129dc <_ZN8touchgfx3HAL4tickEv+0x100>
 80129da:	6760      	str	r0, [r4, #116]	; 0x74
 80129dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80129de:	4a1e      	ldr	r2, [pc, #120]	; (8012a58 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80129e0:	1af3      	subs	r3, r6, r3
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d914      	bls.n	8012a10 <_ZN8touchgfx3HAL4tickEv+0x134>
 80129e6:	6920      	ldr	r0, [r4, #16]
 80129e8:	6803      	ldr	r3, [r0, #0]
 80129ea:	699b      	ldr	r3, [r3, #24]
 80129ec:	4798      	blx	r3
 80129ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80129f0:	2264      	movs	r2, #100	; 0x64
 80129f2:	1af3      	subs	r3, r6, r3
 80129f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80129f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80129fc:	2800      	cmp	r0, #0
 80129fe:	dc1d      	bgt.n	8012a3c <_ZN8touchgfx3HAL4tickEv+0x160>
 8012a00:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 8012a04:	6920      	ldr	r0, [r4, #16]
 8012a06:	6803      	ldr	r3, [r0, #0]
 8012a08:	2100      	movs	r1, #0
 8012a0a:	69db      	ldr	r3, [r3, #28]
 8012a0c:	4798      	blx	r3
 8012a0e:	6766      	str	r6, [r4, #116]	; 0x74
 8012a10:	f003 f8ba 	bl	8015b88 <_ZN8touchgfx11Application11getInstanceEv>
 8012a14:	6803      	ldr	r3, [r0, #0]
 8012a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a18:	4798      	blx	r3
 8012a1a:	6823      	ldr	r3, [r4, #0]
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012a22:	4798      	blx	r3
 8012a24:	2001      	movs	r0, #1
 8012a26:	f7fd fe9b 	bl	8010760 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	702b      	strb	r3, [r5, #0]
 8012a2e:	b004      	add	sp, #16
 8012a30:	bd70      	pop	{r4, r5, r6, pc}
 8012a32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012a36:	4620      	mov	r0, r4
 8012a38:	4798      	blx	r3
 8012a3a:	e7af      	b.n	801299c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012a3c:	2863      	cmp	r0, #99	; 0x63
 8012a3e:	bfcb      	itete	gt
 8012a40:	2300      	movgt	r3, #0
 8012a42:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8012a46:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 8012a4a:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8012a4e:	e7d9      	b.n	8012a04 <_ZN8touchgfx3HAL4tickEv+0x128>
 8012a50:	20025860 	.word	0x20025860
 8012a54:	20025861 	.word	0x20025861
 8012a58:	05f5e100 	.word	0x05f5e100

08012a5c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012a5c:	b510      	push	{r4, lr}
 8012a5e:	4604      	mov	r4, r0
 8012a60:	f7fe f93a 	bl	8010cd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8012a64:	6863      	ldr	r3, [r4, #4]
 8012a66:	2200      	movs	r2, #0
 8012a68:	729a      	strb	r2, [r3, #10]
 8012a6a:	bd10      	pop	{r4, pc}

08012a6c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012a6c:	65c1      	str	r1, [r0, #92]	; 0x5c
 8012a6e:	301c      	adds	r0, #28
 8012a70:	f013 bd02 	b.w	8026478 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012a74 <_ZN8touchgfx3HAL5touchEll>:
 8012a74:	b530      	push	{r4, r5, lr}
 8012a76:	b087      	sub	sp, #28
 8012a78:	4604      	mov	r4, r0
 8012a7a:	a804      	add	r0, sp, #16
 8012a7c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012a80:	f002 fe74 	bl	801576c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012a84:	9b04      	ldr	r3, [sp, #16]
 8012a86:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012a8a:	a906      	add	r1, sp, #24
 8012a8c:	9b05      	ldr	r3, [sp, #20]
 8012a8e:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012a92:	a803      	add	r0, sp, #12
 8012a94:	f002 febc 	bl	8015810 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012a98:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 8012a9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012aa0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012aa4:	f104 001c 	add.w	r0, r4, #28
 8012aa8:	b189      	cbz	r1, 8012ace <_ZN8touchgfx3HAL5touchEll+0x5a>
 8012aaa:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	462a      	mov	r2, r5
 8012ab8:	f013 fcee 	bl	8026498 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8012abc:	b128      	cbz	r0, 8012aca <_ZN8touchgfx3HAL5touchEll+0x56>
 8012abe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012ac2:	6623      	str	r3, [r4, #96]	; 0x60
 8012ac4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012ac8:	6663      	str	r3, [r4, #100]	; 0x64
 8012aca:	b007      	add	sp, #28
 8012acc:	bd30      	pop	{r4, r5, pc}
 8012ace:	f013 fd23 	bl	8026518 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8012ad8:	e7f1      	b.n	8012abe <_ZN8touchgfx3HAL5touchEll+0x4a>

08012ada <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8012ada:	b510      	push	{r4, lr}
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d046      	beq.n	8012b6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012ae0:	ea81 0002 	eor.w	r0, r1, r2
 8012ae4:	07c4      	lsls	r4, r0, #31
 8012ae6:	d508      	bpl.n	8012afa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012ae8:	440b      	add	r3, r1
 8012aea:	3a01      	subs	r2, #1
 8012aec:	428b      	cmp	r3, r1
 8012aee:	d93e      	bls.n	8012b6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012af0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012af4:	f801 0b01 	strb.w	r0, [r1], #1
 8012af8:	e7f8      	b.n	8012aec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8012afa:	07d0      	lsls	r0, r2, #31
 8012afc:	bf42      	ittt	mi
 8012afe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8012b02:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012b06:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8012b0a:	2b01      	cmp	r3, #1
 8012b0c:	d911      	bls.n	8012b32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012b0e:	ea81 0402 	eor.w	r4, r1, r2
 8012b12:	07a4      	lsls	r4, r4, #30
 8012b14:	4610      	mov	r0, r2
 8012b16:	d022      	beq.n	8012b5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012b18:	f023 0401 	bic.w	r4, r3, #1
 8012b1c:	440c      	add	r4, r1
 8012b1e:	428c      	cmp	r4, r1
 8012b20:	4602      	mov	r2, r0
 8012b22:	d904      	bls.n	8012b2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8012b24:	8812      	ldrh	r2, [r2, #0]
 8012b26:	f821 2b02 	strh.w	r2, [r1], #2
 8012b2a:	3002      	adds	r0, #2
 8012b2c:	e7f7      	b.n	8012b1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8012b2e:	f003 0301 	and.w	r3, r3, #1
 8012b32:	f023 0003 	bic.w	r0, r3, #3
 8012b36:	4408      	add	r0, r1
 8012b38:	4288      	cmp	r0, r1
 8012b3a:	4614      	mov	r4, r2
 8012b3c:	d904      	bls.n	8012b48 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8012b3e:	6824      	ldr	r4, [r4, #0]
 8012b40:	f841 4b04 	str.w	r4, [r1], #4
 8012b44:	3204      	adds	r2, #4
 8012b46:	e7f7      	b.n	8012b38 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012b48:	f003 0303 	and.w	r3, r3, #3
 8012b4c:	440b      	add	r3, r1
 8012b4e:	3a01      	subs	r2, #1
 8012b50:	428b      	cmp	r3, r1
 8012b52:	d90c      	bls.n	8012b6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012b54:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012b58:	f801 0b01 	strb.w	r0, [r1], #1
 8012b5c:	e7f8      	b.n	8012b50 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8012b5e:	0790      	lsls	r0, r2, #30
 8012b60:	d0e7      	beq.n	8012b32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012b62:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012b66:	f821 0b02 	strh.w	r0, [r1], #2
 8012b6a:	3b02      	subs	r3, #2
 8012b6c:	e7e1      	b.n	8012b32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012b6e:	2001      	movs	r0, #1
 8012b70:	bd10      	pop	{r4, pc}

08012b72 <_ZN8touchgfx3HAL7noTouchEv>:
 8012b72:	b510      	push	{r4, lr}
 8012b74:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8012b78:	4604      	mov	r4, r0
 8012b7a:	b153      	cbz	r3, 8012b92 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012b7c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8012b80:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8012b84:	2101      	movs	r1, #1
 8012b86:	301c      	adds	r0, #28
 8012b88:	f013 fcc6 	bl	8026518 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8012b92:	bd10      	pop	{r4, pc}

08012b94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b98:	b085      	sub	sp, #20
 8012b9a:	ad04      	add	r5, sp, #16
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	2000      	movs	r0, #0
 8012ba0:	f845 0d04 	str.w	r0, [r5, #-4]!
 8012ba4:	69a0      	ldr	r0, [r4, #24]
 8012ba6:	6806      	ldr	r6, [r0, #0]
 8012ba8:	9501      	str	r5, [sp, #4]
 8012baa:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8012bae:	9500      	str	r5, [sp, #0]
 8012bb0:	6835      	ldr	r5, [r6, #0]
 8012bb2:	4699      	mov	r9, r3
 8012bb4:	460f      	mov	r7, r1
 8012bb6:	4690      	mov	r8, r2
 8012bb8:	47a8      	blx	r5
 8012bba:	4d10      	ldr	r5, [pc, #64]	; (8012bfc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8012bbc:	4606      	mov	r6, r0
 8012bbe:	f8a5 9000 	strh.w	r9, [r5]
 8012bc2:	f7fb f99d 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 8012bc6:	6803      	ldr	r3, [r0, #0]
 8012bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bca:	4798      	blx	r3
 8012bcc:	b128      	cbz	r0, 8012bda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8012bce:	2801      	cmp	r0, #1
 8012bd0:	d00b      	beq.n	8012bea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8012bd2:	4630      	mov	r0, r6
 8012bd4:	b005      	add	sp, #20
 8012bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bda:	882b      	ldrh	r3, [r5, #0]
 8012bdc:	fb08 7203 	mla	r2, r8, r3, r7
 8012be0:	9b03      	ldr	r3, [sp, #12]
 8012be2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8012be6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012be8:	e7f3      	b.n	8012bd2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012bea:	882a      	ldrh	r2, [r5, #0]
 8012bec:	9b03      	ldr	r3, [sp, #12]
 8012bee:	fb08 7202 	mla	r2, r8, r2, r7
 8012bf2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012bf6:	1a9a      	subs	r2, r3, r2
 8012bf8:	63e2      	str	r2, [r4, #60]	; 0x3c
 8012bfa:	e7ea      	b.n	8012bd2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012bfc:	20025856 	.word	0x20025856

08012c00 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8012c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c02:	b08b      	sub	sp, #44	; 0x2c
 8012c04:	4617      	mov	r7, r2
 8012c06:	4604      	mov	r4, r0
 8012c08:	460e      	mov	r6, r1
 8012c0a:	461d      	mov	r5, r3
 8012c0c:	f7fb f978 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 8012c10:	6803      	ldr	r3, [r0, #0]
 8012c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c14:	4798      	blx	r3
 8012c16:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012c1a:	9007      	str	r0, [sp, #28]
 8012c1c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012c20:	4b0d      	ldr	r3, [pc, #52]	; (8012c58 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8012c22:	6822      	ldr	r2, [r4, #0]
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	9306      	str	r3, [sp, #24]
 8012c28:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012c2c:	9305      	str	r3, [sp, #20]
 8012c2e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012c32:	9304      	str	r3, [sp, #16]
 8012c34:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012c38:	9303      	str	r3, [sp, #12]
 8012c3a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012c3e:	9302      	str	r3, [sp, #8]
 8012c40:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012c44:	e9cd 5300 	strd	r5, r3, [sp]
 8012c48:	4631      	mov	r1, r6
 8012c4a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8012c4c:	463b      	mov	r3, r7
 8012c4e:	2200      	movs	r2, #0
 8012c50:	4620      	mov	r0, r4
 8012c52:	47a8      	blx	r5
 8012c54:	b00b      	add	sp, #44	; 0x2c
 8012c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c58:	20025856 	.word	0x20025856

08012c5c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c60:	4698      	mov	r8, r3
 8012c62:	6803      	ldr	r3, [r0, #0]
 8012c64:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8012c66:	4b15      	ldr	r3, [pc, #84]	; (8012cbc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8012c68:	b08b      	sub	sp, #44	; 0x2c
 8012c6a:	4617      	mov	r7, r2
 8012c6c:	f8b3 9000 	ldrh.w	r9, [r3]
 8012c70:	460e      	mov	r6, r1
 8012c72:	4604      	mov	r4, r0
 8012c74:	f7fb f944 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 8012c78:	6803      	ldr	r3, [r0, #0]
 8012c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c7c:	4798      	blx	r3
 8012c7e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012c82:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012c86:	2302      	movs	r3, #2
 8012c88:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	9305      	str	r3, [sp, #20]
 8012c90:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012c94:	9304      	str	r3, [sp, #16]
 8012c96:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012c9a:	9303      	str	r3, [sp, #12]
 8012c9c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012ca0:	9302      	str	r3, [sp, #8]
 8012ca2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	e9cd 8300 	strd	r8, r3, [sp]
 8012cac:	4631      	mov	r1, r6
 8012cae:	463b      	mov	r3, r7
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	47a8      	blx	r5
 8012cb4:	b00b      	add	sp, #44	; 0x2c
 8012cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cba:	bf00      	nop
 8012cbc:	20025856 	.word	0x20025856

08012cc0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8012cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cc4:	4698      	mov	r8, r3
 8012cc6:	6803      	ldr	r3, [r0, #0]
 8012cc8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8012cca:	4b11      	ldr	r3, [pc, #68]	; (8012d10 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8012ccc:	b087      	sub	sp, #28
 8012cce:	f8b3 9000 	ldrh.w	r9, [r3]
 8012cd2:	460e      	mov	r6, r1
 8012cd4:	4617      	mov	r7, r2
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	f7fb f912 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 8012cdc:	6803      	ldr	r3, [r0, #0]
 8012cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce0:	4798      	blx	r3
 8012ce2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8012ce6:	f8cd 900c 	str.w	r9, [sp, #12]
 8012cea:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8012cee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8012cf2:	9302      	str	r3, [sp, #8]
 8012cf4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012cf8:	9301      	str	r3, [sp, #4]
 8012cfa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	463a      	mov	r2, r7
 8012d02:	4643      	mov	r3, r8
 8012d04:	4631      	mov	r1, r6
 8012d06:	4620      	mov	r0, r4
 8012d08:	47a8      	blx	r5
 8012d0a:	b007      	add	sp, #28
 8012d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d10:	20025856 	.word	0x20025856

08012d14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d18:	4604      	mov	r4, r0
 8012d1a:	b08f      	sub	sp, #60	; 0x3c
 8012d1c:	4610      	mov	r0, r2
 8012d1e:	460d      	mov	r5, r1
 8012d20:	4691      	mov	r9, r2
 8012d22:	461e      	mov	r6, r3
 8012d24:	f005 ff9a 	bl	8018c5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012d28:	2800      	cmp	r0, #0
 8012d2a:	f000 809d 	beq.w	8012e68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8012d2e:	6823      	ldr	r3, [r4, #0]
 8012d30:	f8df b198 	ldr.w	fp, [pc, #408]	; 8012ecc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8012d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d36:	f8df a198 	ldr.w	sl, [pc, #408]	; 8012ed0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8012d3a:	4f61      	ldr	r7, [pc, #388]	; (8012ec0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	4798      	blx	r3
 8012d40:	6823      	ldr	r3, [r4, #0]
 8012d42:	4620      	mov	r0, r4
 8012d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d46:	4798      	blx	r3
 8012d48:	f8bb 3000 	ldrh.w	r3, [fp]
 8012d4c:	9301      	str	r3, [sp, #4]
 8012d4e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012d52:	f8ba 3000 	ldrh.w	r3, [sl]
 8012d56:	9302      	str	r3, [sp, #8]
 8012d58:	883b      	ldrh	r3, [r7, #0]
 8012d5a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8012d5e:	9303      	str	r3, [sp, #12]
 8012d60:	4b58      	ldr	r3, [pc, #352]	; (8012ec4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012d62:	9305      	str	r3, [sp, #20]
 8012d64:	881a      	ldrh	r2, [r3, #0]
 8012d66:	9204      	str	r2, [sp, #16]
 8012d68:	4640      	mov	r0, r8
 8012d6a:	f006 f80b 	bl	8018d84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012d6e:	8038      	strh	r0, [r7, #0]
 8012d70:	4640      	mov	r0, r8
 8012d72:	f006 f83b 	bl	8018dec <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012d76:	9b05      	ldr	r3, [sp, #20]
 8012d78:	b280      	uxth	r0, r0
 8012d7a:	8018      	strh	r0, [r3, #0]
 8012d7c:	4b52      	ldr	r3, [pc, #328]	; (8012ec8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d174      	bne.n	8012e6e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8012d84:	883b      	ldrh	r3, [r7, #0]
 8012d86:	f8ab 3000 	strh.w	r3, [fp]
 8012d8a:	f8aa 0000 	strh.w	r0, [sl]
 8012d8e:	4648      	mov	r0, r9
 8012d90:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8012d94:	f005 ff62 	bl	8018c5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012d98:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	4611      	mov	r1, r2
 8012da0:	4628      	mov	r0, r5
 8012da2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8012da6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8012daa:	f7fb fe44 	bl	800ea36 <_ZN8touchgfx8Drawable5setXYEss>
 8012dae:	2301      	movs	r3, #1
 8012db0:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8012db4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8012db8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	dd5c      	ble.n	8012e7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012dc0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	dd58      	ble.n	8012e7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012dc8:	462a      	mov	r2, r5
 8012dca:	ab0a      	add	r3, sp, #40	; 0x28
 8012dcc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012dd0:	6851      	ldr	r1, [r2, #4]
 8012dd2:	c303      	stmia	r3!, {r0, r1}
 8012dd4:	4631      	mov	r1, r6
 8012dd6:	a80a      	add	r0, sp, #40	; 0x28
 8012dd8:	f7ff fbf8 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 8012ddc:	4b38      	ldr	r3, [pc, #224]	; (8012ec0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012dde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012de2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012de6:	2100      	movs	r1, #0
 8012de8:	aa0a      	add	r2, sp, #40	; 0x28
 8012dea:	4b36      	ldr	r3, [pc, #216]	; (8012ec4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012dec:	910c      	str	r1, [sp, #48]	; 0x30
 8012dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012df6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012dfa:	ab08      	add	r3, sp, #32
 8012dfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e00:	4618      	mov	r0, r3
 8012e02:	a90c      	add	r1, sp, #48	; 0x30
 8012e04:	f7ff fbe2 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 8012e08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d13c      	bne.n	8012e88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8012e0e:	2000      	movs	r0, #0
 8012e10:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8012e14:	2600      	movs	r6, #0
 8012e16:	682a      	ldr	r2, [r5, #0]
 8012e18:	696b      	ldr	r3, [r5, #20]
 8012e1a:	616e      	str	r6, [r5, #20]
 8012e1c:	9305      	str	r3, [sp, #20]
 8012e1e:	6892      	ldr	r2, [r2, #8]
 8012e20:	a908      	add	r1, sp, #32
 8012e22:	4628      	mov	r0, r5
 8012e24:	4790      	blx	r2
 8012e26:	9b05      	ldr	r3, [sp, #20]
 8012e28:	616b      	str	r3, [r5, #20]
 8012e2a:	4652      	mov	r2, sl
 8012e2c:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8012e30:	4649      	mov	r1, r9
 8012e32:	4628      	mov	r0, r5
 8012e34:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8012e38:	f7fb fdfd 	bl	800ea36 <_ZN8touchgfx8Drawable5setXYEss>
 8012e3c:	4b23      	ldr	r3, [pc, #140]	; (8012ecc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8012e3e:	9a01      	ldr	r2, [sp, #4]
 8012e40:	801a      	strh	r2, [r3, #0]
 8012e42:	4b23      	ldr	r3, [pc, #140]	; (8012ed0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8012e44:	9a02      	ldr	r2, [sp, #8]
 8012e46:	801a      	strh	r2, [r3, #0]
 8012e48:	4b1d      	ldr	r3, [pc, #116]	; (8012ec0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012e4a:	9a03      	ldr	r2, [sp, #12]
 8012e4c:	801a      	strh	r2, [r3, #0]
 8012e4e:	4b1d      	ldr	r3, [pc, #116]	; (8012ec4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012e50:	9a04      	ldr	r2, [sp, #16]
 8012e52:	801a      	strh	r2, [r3, #0]
 8012e54:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8012e58:	6823      	ldr	r3, [r4, #0]
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e5e:	4798      	blx	r3
 8012e60:	6823      	ldr	r3, [r4, #0]
 8012e62:	4620      	mov	r0, r4
 8012e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e66:	4798      	blx	r3
 8012e68:	b00f      	add	sp, #60	; 0x3c
 8012e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6e:	883b      	ldrh	r3, [r7, #0]
 8012e70:	f8ab 0000 	strh.w	r0, [fp]
 8012e74:	f8aa 3000 	strh.w	r3, [sl]
 8012e78:	e789      	b.n	8012d8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8012e7a:	462a      	mov	r2, r5
 8012e7c:	ab0a      	add	r3, sp, #40	; 0x28
 8012e7e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012e82:	6851      	ldr	r1, [r2, #4]
 8012e84:	c303      	stmia	r3!, {r0, r1}
 8012e86:	e7a9      	b.n	8012ddc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8012e88:	a807      	add	r0, sp, #28
 8012e8a:	f006 f8eb 	bl	8019064 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012e8e:	4606      	mov	r6, r0
 8012e90:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012e92:	6803      	ldr	r3, [r0, #0]
 8012e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e96:	4798      	blx	r3
 8012e98:	4286      	cmp	r6, r0
 8012e9a:	d1b8      	bne.n	8012e0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012e9c:	f7fb f830 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 8012ea0:	6803      	ldr	r3, [r0, #0]
 8012ea2:	4606      	mov	r6, r0
 8012ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ea6:	9305      	str	r3, [sp, #20]
 8012ea8:	a807      	add	r0, sp, #28
 8012eaa:	f006 f8db 	bl	8019064 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012eae:	9b05      	ldr	r3, [sp, #20]
 8012eb0:	4601      	mov	r1, r0
 8012eb2:	4630      	mov	r0, r6
 8012eb4:	4798      	blx	r3
 8012eb6:	f080 0001 	eor.w	r0, r0, #1
 8012eba:	b2c0      	uxtb	r0, r0
 8012ebc:	e7a8      	b.n	8012e10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8012ebe:	bf00      	nop
 8012ec0:	20025850 	.word	0x20025850
 8012ec4:	20025852 	.word	0x20025852
 8012ec8:	20025854 	.word	0x20025854
 8012ecc:	20025856 	.word	0x20025856
 8012ed0:	20025858 	.word	0x20025858

08012ed4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012ed4:	b510      	push	{r4, lr}
 8012ed6:	4b07      	ldr	r3, [pc, #28]	; (8012ef4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	4604      	mov	r4, r0
 8012edc:	b13b      	cbz	r3, 8012eee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012ede:	6803      	ldr	r3, [r0, #0]
 8012ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ee2:	4798      	blx	r3
 8012ee4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012ee6:	4283      	cmp	r3, r0
 8012ee8:	d101      	bne.n	8012eee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012eea:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012eec:	bd10      	pop	{r4, pc}
 8012eee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012ef0:	e7fc      	b.n	8012eec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012ef2:	bf00      	nop
 8012ef4:	2002585a 	.word	0x2002585a

08012ef8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8012ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012efc:	b08a      	sub	sp, #40	; 0x28
 8012efe:	461d      	mov	r5, r3
 8012f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f04:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012f08:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012f0c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012f10:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012f14:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012f18:	2400      	movs	r4, #0
 8012f1a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012f1e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8012f22:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012f26:	4690      	mov	r8, r2
 8012f28:	4607      	mov	r7, r0
 8012f2a:	9404      	str	r4, [sp, #16]
 8012f2c:	f88d 4020 	strb.w	r4, [sp, #32]
 8012f30:	f7ff ffd0 	bl	8012ed4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012f34:	fb06 8505 	mla	r5, r6, r5, r8
 8012f38:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	9505      	str	r5, [sp, #20]
 8012f40:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012f44:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012f48:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8012f4c:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012f50:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012f54:	6803      	ldr	r3, [r0, #0]
 8012f56:	a901      	add	r1, sp, #4
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	4798      	blx	r3
 8012f5c:	b00a      	add	sp, #40	; 0x28
 8012f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012f62 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012f62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f66:	b08b      	sub	sp, #44	; 0x2c
 8012f68:	2400      	movs	r4, #0
 8012f6a:	461d      	mov	r5, r3
 8012f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012f70:	4688      	mov	r8, r1
 8012f72:	4691      	mov	r9, r2
 8012f74:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8012f78:	9404      	str	r4, [sp, #16]
 8012f7a:	4607      	mov	r7, r0
 8012f7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f80:	f7ff ffa8 	bl	8012ed4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012f84:	fb06 9505 	mla	r5, r6, r5, r9
 8012f88:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012f8c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012f90:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012f94:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	9505      	str	r5, [sp, #20]
 8012f9c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012fa0:	f8ad 401c 	strh.w	r4, [sp, #28]
 8012fa4:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012fa8:	f8cd 8010 	str.w	r8, [sp, #16]
 8012fac:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012fb0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012fb4:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012fb8:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012fbc:	6803      	ldr	r3, [r0, #0]
 8012fbe:	a901      	add	r1, sp, #4
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	4798      	blx	r3
 8012fc4:	b00b      	add	sp, #44	; 0x2c
 8012fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08012fcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8012fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd0:	b08a      	sub	sp, #40	; 0x28
 8012fd2:	4698      	mov	r8, r3
 8012fd4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8012fd8:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8012fdc:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8012fe0:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	2d0b      	cmp	r5, #11
 8012fe8:	4606      	mov	r6, r0
 8012fea:	9304      	str	r3, [sp, #16]
 8012fec:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8012ff0:	d138      	bne.n	8013064 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8012ff2:	2380      	movs	r3, #128	; 0x80
 8012ff4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012ff8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012ffc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013000:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013004:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013008:	f88d 0020 	strb.w	r0, [sp, #32]
 801300c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013010:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013014:	4630      	mov	r0, r6
 8013016:	9203      	str	r2, [sp, #12]
 8013018:	f7ff ff5c 	bl	8012ed4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801301c:	2c0b      	cmp	r4, #11
 801301e:	bf98      	it	ls
 8013020:	4b1b      	ldrls	r3, [pc, #108]	; (8013090 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8013022:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8013026:	bf98      	it	ls
 8013028:	5d19      	ldrbls	r1, [r3, r4]
 801302a:	f8ad 701e 	strh.w	r7, [sp, #30]
 801302e:	bf88      	it	hi
 8013030:	2100      	movhi	r1, #0
 8013032:	fb02 8307 	mla	r3, r2, r7, r8
 8013036:	10c9      	asrs	r1, r1, #3
 8013038:	fb01 0003 	mla	r0, r1, r3, r0
 801303c:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8013040:	9005      	str	r0, [sp, #20]
 8013042:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8013046:	6870      	ldr	r0, [r6, #4]
 8013048:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801304c:	2300      	movs	r3, #0
 801304e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8013052:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013056:	6803      	ldr	r3, [r0, #0]
 8013058:	a901      	add	r1, sp, #4
 801305a:	685b      	ldr	r3, [r3, #4]
 801305c:	4798      	blx	r3
 801305e:	b00a      	add	sp, #40	; 0x28
 8013060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013064:	2d02      	cmp	r5, #2
 8013066:	d109      	bne.n	801307c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8013068:	28ff      	cmp	r0, #255	; 0xff
 801306a:	d105      	bne.n	8013078 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 801306c:	f1bc 0f00 	cmp.w	ip, #0
 8013070:	bf14      	ite	ne
 8013072:	2340      	movne	r3, #64	; 0x40
 8013074:	2320      	moveq	r3, #32
 8013076:	e7bd      	b.n	8012ff4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013078:	2340      	movs	r3, #64	; 0x40
 801307a:	e7bb      	b.n	8012ff4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801307c:	28ff      	cmp	r0, #255	; 0xff
 801307e:	d105      	bne.n	801308c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8013080:	f1bc 0f00 	cmp.w	ip, #0
 8013084:	bf14      	ite	ne
 8013086:	2304      	movne	r3, #4
 8013088:	2301      	moveq	r3, #1
 801308a:	e7b3      	b.n	8012ff4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801308c:	2304      	movs	r3, #4
 801308e:	e7b1      	b.n	8012ff4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013090:	080292a0 	.word	0x080292a0

08013094 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8013094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013098:	b08b      	sub	sp, #44	; 0x2c
 801309a:	461d      	mov	r5, r3
 801309c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80130a0:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80130a4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80130a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80130ac:	bf14      	ite	ne
 80130ae:	2308      	movne	r3, #8
 80130b0:	2302      	moveq	r3, #2
 80130b2:	2400      	movs	r4, #0
 80130b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80130b8:	4688      	mov	r8, r1
 80130ba:	4693      	mov	fp, r2
 80130bc:	9404      	str	r4, [sp, #16]
 80130be:	4607      	mov	r7, r0
 80130c0:	f7ff ff08 	bl	8012ed4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80130c4:	2e0b      	cmp	r6, #11
 80130c6:	bf98      	it	ls
 80130c8:	4b15      	ldrls	r3, [pc, #84]	; (8013120 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80130ca:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80130ce:	bf98      	it	ls
 80130d0:	5d9c      	ldrbls	r4, [r3, r6]
 80130d2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80130d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80130da:	fb05 b50a 	mla	r5, r5, sl, fp
 80130de:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80130e2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80130e6:	10e4      	asrs	r4, r4, #3
 80130e8:	fb04 0405 	mla	r4, r4, r5, r0
 80130ec:	2300      	movs	r3, #0
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	9405      	str	r4, [sp, #20]
 80130f2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80130f6:	f8ad a01e 	strh.w	sl, [sp, #30]
 80130fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80130fe:	f88d 9020 	strb.w	r9, [sp, #32]
 8013102:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8013106:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801310a:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801310e:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8013112:	6803      	ldr	r3, [r0, #0]
 8013114:	a901      	add	r1, sp, #4
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	4798      	blx	r3
 801311a:	b00b      	add	sp, #44	; 0x2c
 801311c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013120:	080292a0 	.word	0x080292a0

08013124 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013128:	461e      	mov	r6, r3
 801312a:	4b0a      	ldr	r3, [pc, #40]	; (8013154 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801312c:	460f      	mov	r7, r1
 801312e:	881d      	ldrh	r5, [r3, #0]
 8013130:	4690      	mov	r8, r2
 8013132:	f7fa fee5 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 8013136:	6803      	ldr	r3, [r0, #0]
 8013138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801313a:	4798      	blx	r3
 801313c:	280b      	cmp	r0, #11
 801313e:	bf9a      	itte	ls
 8013140:	4b05      	ldrls	r3, [pc, #20]	; (8013158 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013142:	5c1c      	ldrbls	r4, [r3, r0]
 8013144:	2400      	movhi	r4, #0
 8013146:	fb08 7005 	mla	r0, r8, r5, r7
 801314a:	10e4      	asrs	r4, r4, #3
 801314c:	fb04 6000 	mla	r0, r4, r0, r6
 8013150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013154:	20025856 	.word	0x20025856
 8013158:	080292a0 	.word	0x080292a0

0801315c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801315e:	b08b      	sub	sp, #44	; 0x2c
 8013160:	461f      	mov	r7, r3
 8013162:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013166:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801316a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801316e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013172:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013176:	f8ad 301a 	strh.w	r3, [sp, #26]
 801317a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801317e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013182:	2500      	movs	r5, #0
 8013184:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013188:	f88d 3020 	strb.w	r3, [sp, #32]
 801318c:	4604      	mov	r4, r0
 801318e:	4616      	mov	r6, r2
 8013190:	9504      	str	r5, [sp, #16]
 8013192:	f7ff fe9f 	bl	8012ed4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013196:	463a      	mov	r2, r7
 8013198:	4631      	mov	r1, r6
 801319a:	4603      	mov	r3, r0
 801319c:	4620      	mov	r0, r4
 801319e:	f7ff ffc1 	bl	8013124 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80131a2:	4b0e      	ldr	r3, [pc, #56]	; (80131dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80131a4:	9005      	str	r0, [sp, #20]
 80131a6:	881b      	ldrh	r3, [r3, #0]
 80131a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80131ac:	f7fa fea8 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 80131b0:	6803      	ldr	r3, [r0, #0]
 80131b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131b4:	4798      	blx	r3
 80131b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80131b8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80131bc:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80131c0:	9304      	str	r3, [sp, #16]
 80131c2:	6860      	ldr	r0, [r4, #4]
 80131c4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80131c8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80131cc:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80131d0:	6803      	ldr	r3, [r0, #0]
 80131d2:	a901      	add	r1, sp, #4
 80131d4:	685b      	ldr	r3, [r3, #4]
 80131d6:	4798      	blx	r3
 80131d8:	b00b      	add	sp, #44	; 0x2c
 80131da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131dc:	20025856 	.word	0x20025856

080131e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80131e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131e2:	b08d      	sub	sp, #52	; 0x34
 80131e4:	466b      	mov	r3, sp
 80131e6:	e883 0006 	stmia.w	r3, {r1, r2}
 80131ea:	2300      	movs	r3, #0
 80131ec:	9306      	str	r3, [sp, #24]
 80131ee:	6803      	ldr	r3, [r0, #0]
 80131f0:	f8bd 6000 	ldrh.w	r6, [sp]
 80131f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131f6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80131fa:	2501      	movs	r5, #1
 80131fc:	9503      	str	r5, [sp, #12]
 80131fe:	4604      	mov	r4, r0
 8013200:	4798      	blx	r3
 8013202:	463a      	mov	r2, r7
 8013204:	4631      	mov	r1, r6
 8013206:	4603      	mov	r3, r0
 8013208:	4620      	mov	r0, r4
 801320a:	f7ff ff8b 	bl	8013124 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801320e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013210:	9307      	str	r3, [sp, #28]
 8013212:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013216:	f8ad 3020 	strh.w	r3, [sp, #32]
 801321a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801321e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013222:	4b0f      	ldr	r3, [pc, #60]	; (8013260 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013224:	9004      	str	r0, [sp, #16]
 8013226:	881b      	ldrh	r3, [r3, #0]
 8013228:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801322c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013230:	f7fa fe66 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 8013234:	6803      	ldr	r3, [r0, #0]
 8013236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013238:	4798      	blx	r3
 801323a:	23ff      	movs	r3, #255	; 0xff
 801323c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013240:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013244:	6860      	ldr	r0, [r4, #4]
 8013246:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801324a:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801324e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013252:	6803      	ldr	r3, [r0, #0]
 8013254:	a903      	add	r1, sp, #12
 8013256:	685b      	ldr	r3, [r3, #4]
 8013258:	4798      	blx	r3
 801325a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801325c:	b00d      	add	sp, #52	; 0x34
 801325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013260:	20025856 	.word	0x20025856

08013264 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013268:	b08c      	sub	sp, #48	; 0x30
 801326a:	461e      	mov	r6, r3
 801326c:	466d      	mov	r5, sp
 801326e:	2300      	movs	r3, #0
 8013270:	e885 0006 	stmia.w	r5, {r1, r2}
 8013274:	9306      	str	r3, [sp, #24]
 8013276:	6803      	ldr	r3, [r0, #0]
 8013278:	f8bd 7000 	ldrh.w	r7, [sp]
 801327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801327e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013282:	2501      	movs	r5, #1
 8013284:	9503      	str	r5, [sp, #12]
 8013286:	4604      	mov	r4, r0
 8013288:	4798      	blx	r3
 801328a:	4642      	mov	r2, r8
 801328c:	4639      	mov	r1, r7
 801328e:	4603      	mov	r3, r0
 8013290:	4620      	mov	r0, r4
 8013292:	f7ff ff47 	bl	8013124 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013296:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801329a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801329e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80132a2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80132a6:	4b11      	ldr	r3, [pc, #68]	; (80132ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80132a8:	9004      	str	r0, [sp, #16]
 80132aa:	881b      	ldrh	r3, [r3, #0]
 80132ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80132b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80132b2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80132b6:	9607      	str	r6, [sp, #28]
 80132b8:	f7fa fe22 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 80132bc:	6803      	ldr	r3, [r0, #0]
 80132be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132c0:	4798      	blx	r3
 80132c2:	23ff      	movs	r3, #255	; 0xff
 80132c4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80132c8:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80132cc:	6860      	ldr	r0, [r4, #4]
 80132ce:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80132d2:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80132d6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80132da:	6803      	ldr	r3, [r0, #0]
 80132dc:	a903      	add	r1, sp, #12
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	4798      	blx	r3
 80132e2:	4630      	mov	r0, r6
 80132e4:	b00c      	add	sp, #48	; 0x30
 80132e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ea:	bf00      	nop
 80132ec:	20025856 	.word	0x20025856

080132f0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80132f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132f2:	b085      	sub	sp, #20
 80132f4:	ac02      	add	r4, sp, #8
 80132f6:	e884 0006 	stmia.w	r4, {r1, r2}
 80132fa:	4605      	mov	r5, r0
 80132fc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013300:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013304:	f7ff fde6 	bl	8012ed4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013308:	463a      	mov	r2, r7
 801330a:	4603      	mov	r3, r0
 801330c:	4631      	mov	r1, r6
 801330e:	4628      	mov	r0, r5
 8013310:	f7ff ff08 	bl	8013124 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013314:	4a05      	ldr	r2, [pc, #20]	; (801332c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013316:	682b      	ldr	r3, [r5, #0]
 8013318:	8812      	ldrh	r2, [r2, #0]
 801331a:	9200      	str	r2, [sp, #0]
 801331c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801331e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013322:	4603      	mov	r3, r0
 8013324:	4628      	mov	r0, r5
 8013326:	47b0      	blx	r6
 8013328:	b005      	add	sp, #20
 801332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801332c:	20025856 	.word	0x20025856

08013330 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013330:	b570      	push	{r4, r5, r6, lr}
 8013332:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8013336:	4604      	mov	r4, r0
 8013338:	b19b      	cbz	r3, 8013362 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801333a:	2002      	movs	r0, #2
 801333c:	f7fd fa2c 	bl	8010798 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013340:	2300      	movs	r3, #0
 8013342:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8013346:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 801334a:	6823      	ldr	r3, [r4, #0]
 801334c:	4620      	mov	r0, r4
 801334e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8013352:	f7ff fdbf 	bl	8012ed4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013356:	462b      	mov	r3, r5
 8013358:	4601      	mov	r1, r0
 801335a:	4620      	mov	r0, r4
 801335c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013360:	4718      	bx	r3
 8013362:	bd70      	pop	{r4, r5, r6, pc}

08013364 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013364:	b538      	push	{r3, r4, r5, lr}
 8013366:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 801336a:	428b      	cmp	r3, r1
 801336c:	4604      	mov	r4, r0
 801336e:	460d      	mov	r5, r1
 8013370:	d006      	beq.n	8013380 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013372:	6803      	ldr	r3, [r0, #0]
 8013374:	b929      	cbnz	r1, 8013382 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013376:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801337a:	4798      	blx	r3
 801337c:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8013380:	bd38      	pop	{r3, r4, r5, pc}
 8013382:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013386:	e7f8      	b.n	801337a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013388 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013388:	b510      	push	{r4, lr}
 801338a:	4b0d      	ldr	r3, [pc, #52]	; (80133c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	4604      	mov	r4, r0
 8013390:	b95b      	cbnz	r3, 80133aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013392:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013396:	2b02      	cmp	r3, #2
 8013398:	d007      	beq.n	80133aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801339a:	6840      	ldr	r0, [r0, #4]
 801339c:	f000 f90e 	bl	80135bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80133a0:	b118      	cbz	r0, 80133aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80133a2:	6862      	ldr	r2, [r4, #4]
 80133a4:	7a53      	ldrb	r3, [r2, #9]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d0fc      	beq.n	80133a4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80133aa:	f7fd fc7f 	bl	8010cac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80133ae:	4620      	mov	r0, r4
 80133b0:	2100      	movs	r1, #0
 80133b2:	f7ff ffd7 	bl	8013364 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80133b6:	4620      	mov	r0, r4
 80133b8:	f7ff fd8c 	bl	8012ed4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80133bc:	bd10      	pop	{r4, pc}
 80133be:	bf00      	nop
 80133c0:	2002585a 	.word	0x2002585a

080133c4 <_ZN8touchgfx13DMA_Interface5flushEv>:
 80133c4:	6803      	ldr	r3, [r0, #0]
 80133c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133c8:	4718      	bx	r3

080133ca <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80133ca:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80133ce:	1a13      	subs	r3, r2, r0
 80133d0:	4258      	negs	r0, r3
 80133d2:	4158      	adcs	r0, r3
 80133d4:	4770      	bx	lr

080133d6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80133d6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80133da:	1a9b      	subs	r3, r3, r2
 80133dc:	2b00      	cmp	r3, #0
 80133de:	bfdc      	itt	le
 80133e0:	6882      	ldrle	r2, [r0, #8]
 80133e2:	189b      	addle	r3, r3, r2
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	bfcc      	ite	gt
 80133e8:	2000      	movgt	r0, #0
 80133ea:	2001      	movle	r0, #1
 80133ec:	4770      	bx	lr

080133ee <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80133ee:	6902      	ldr	r2, [r0, #16]
 80133f0:	6843      	ldr	r3, [r0, #4]
 80133f2:	2024      	movs	r0, #36	; 0x24
 80133f4:	fb00 3002 	mla	r0, r0, r2, r3
 80133f8:	4770      	bx	lr

080133fa <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80133fa:	6803      	ldr	r3, [r0, #0]
 80133fc:	691b      	ldr	r3, [r3, #16]
 80133fe:	4718      	bx	r3

08013400 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013400:	b570      	push	{r4, r5, r6, lr}
 8013402:	2301      	movs	r3, #1
 8013404:	7203      	strb	r3, [r0, #8]
 8013406:	4604      	mov	r4, r0
 8013408:	6840      	ldr	r0, [r0, #4]
 801340a:	6803      	ldr	r3, [r0, #0]
 801340c:	699b      	ldr	r3, [r3, #24]
 801340e:	4798      	blx	r3
 8013410:	6803      	ldr	r3, [r0, #0]
 8013412:	2b40      	cmp	r3, #64	; 0x40
 8013414:	4605      	mov	r5, r0
 8013416:	d00c      	beq.n	8013432 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013418:	d810      	bhi.n	801343c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801341a:	2b04      	cmp	r3, #4
 801341c:	d01d      	beq.n	801345a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801341e:	d804      	bhi.n	801342a <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013420:	2b01      	cmp	r3, #1
 8013422:	d006      	beq.n	8013432 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013424:	2b02      	cmp	r3, #2
 8013426:	d02c      	beq.n	8013482 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013428:	bd70      	pop	{r4, r5, r6, pc}
 801342a:	2b08      	cmp	r3, #8
 801342c:	d01d      	beq.n	801346a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801342e:	2b20      	cmp	r3, #32
 8013430:	d1fa      	bne.n	8013428 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013432:	6823      	ldr	r3, [r4, #0]
 8013434:	4620      	mov	r0, r4
 8013436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013438:	4798      	blx	r3
 801343a:	e013      	b.n	8013464 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801343c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013440:	d0f7      	beq.n	8013432 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013442:	d804      	bhi.n	801344e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013444:	2b80      	cmp	r3, #128	; 0x80
 8013446:	d0f4      	beq.n	8013432 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801344c:	e7f0      	b.n	8013430 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801344e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013452:	d0ee      	beq.n	8013432 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013458:	e7e5      	b.n	8013426 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801345a:	6823      	ldr	r3, [r4, #0]
 801345c:	7f01      	ldrb	r1, [r0, #28]
 801345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013460:	4620      	mov	r0, r4
 8013462:	4798      	blx	r3
 8013464:	6823      	ldr	r3, [r4, #0]
 8013466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013468:	e006      	b.n	8013478 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801346a:	6823      	ldr	r3, [r4, #0]
 801346c:	7f01      	ldrb	r1, [r0, #28]
 801346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013470:	4620      	mov	r0, r4
 8013472:	4798      	blx	r3
 8013474:	6823      	ldr	r3, [r4, #0]
 8013476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013478:	4629      	mov	r1, r5
 801347a:	4620      	mov	r0, r4
 801347c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013480:	4718      	bx	r3
 8013482:	6823      	ldr	r3, [r4, #0]
 8013484:	4620      	mov	r0, r4
 8013486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013488:	4798      	blx	r3
 801348a:	e7f3      	b.n	8013474 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801348c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801348c:	4770      	bx	lr

0801348e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801348e:	4770      	bx	lr

08013490 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013490:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013494:	1ad2      	subs	r2, r2, r3
 8013496:	2a00      	cmp	r2, #0
 8013498:	b510      	push	{r4, lr}
 801349a:	bfdc      	itt	le
 801349c:	6884      	ldrle	r4, [r0, #8]
 801349e:	1912      	addle	r2, r2, r4
 80134a0:	2a01      	cmp	r2, #1
 80134a2:	dd16      	ble.n	80134d2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80134a4:	6842      	ldr	r2, [r0, #4]
 80134a6:	2424      	movs	r4, #36	; 0x24
 80134a8:	fb04 2303 	mla	r3, r4, r3, r2
 80134ac:	f101 0220 	add.w	r2, r1, #32
 80134b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80134b4:	f843 4b04 	str.w	r4, [r3], #4
 80134b8:	4291      	cmp	r1, r2
 80134ba:	d1f9      	bne.n	80134b0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80134bc:	780a      	ldrb	r2, [r1, #0]
 80134be:	701a      	strb	r2, [r3, #0]
 80134c0:	68c3      	ldr	r3, [r0, #12]
 80134c2:	6882      	ldr	r2, [r0, #8]
 80134c4:	f3bf 8f5b 	dmb	ish
 80134c8:	3301      	adds	r3, #1
 80134ca:	429a      	cmp	r2, r3
 80134cc:	bfd8      	it	le
 80134ce:	1a9b      	suble	r3, r3, r2
 80134d0:	60c3      	str	r3, [r0, #12]
 80134d2:	bd10      	pop	{r4, pc}

080134d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80134d4:	6903      	ldr	r3, [r0, #16]
 80134d6:	6882      	ldr	r2, [r0, #8]
 80134d8:	f3bf 8f5b 	dmb	ish
 80134dc:	3301      	adds	r3, #1
 80134de:	429a      	cmp	r2, r3
 80134e0:	bfd8      	it	le
 80134e2:	1a9b      	suble	r3, r3, r2
 80134e4:	6103      	str	r3, [r0, #16]
 80134e6:	4770      	bx	lr

080134e8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80134e8:	b570      	push	{r4, r5, r6, lr}
 80134ea:	4604      	mov	r4, r0
 80134ec:	460e      	mov	r6, r1
 80134ee:	6860      	ldr	r0, [r4, #4]
 80134f0:	6803      	ldr	r3, [r0, #0]
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	4798      	blx	r3
 80134f6:	2800      	cmp	r0, #0
 80134f8:	d1f9      	bne.n	80134ee <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80134fa:	4d0d      	ldr	r5, [pc, #52]	; (8013530 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80134fc:	6828      	ldr	r0, [r5, #0]
 80134fe:	6803      	ldr	r3, [r0, #0]
 8013500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013502:	4798      	blx	r3
 8013504:	f7fd fbf4 	bl	8010cf0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013508:	6828      	ldr	r0, [r5, #0]
 801350a:	2101      	movs	r1, #1
 801350c:	f7ff ff2a 	bl	8013364 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013510:	6860      	ldr	r0, [r4, #4]
 8013512:	6803      	ldr	r3, [r0, #0]
 8013514:	4631      	mov	r1, r6
 8013516:	689b      	ldr	r3, [r3, #8]
 8013518:	4798      	blx	r3
 801351a:	6823      	ldr	r3, [r4, #0]
 801351c:	4620      	mov	r0, r4
 801351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013520:	4798      	blx	r3
 8013522:	6828      	ldr	r0, [r5, #0]
 8013524:	6803      	ldr	r3, [r0, #0]
 8013526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801352a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801352c:	4718      	bx	r3
 801352e:	bf00      	nop
 8013530:	2002585c 	.word	0x2002585c

08013534 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013534:	b508      	push	{r3, lr}
 8013536:	f7fd fbb9 	bl	8010cac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801353a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801353e:	f7fd bbcb 	b.w	8010cd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013542 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013542:	b510      	push	{r4, lr}
 8013544:	4604      	mov	r4, r0
 8013546:	6840      	ldr	r0, [r0, #4]
 8013548:	6803      	ldr	r3, [r0, #0]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4798      	blx	r3
 801354e:	b948      	cbnz	r0, 8013564 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013550:	7a63      	ldrb	r3, [r4, #9]
 8013552:	b13b      	cbz	r3, 8013564 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013554:	7a23      	ldrb	r3, [r4, #8]
 8013556:	b92b      	cbnz	r3, 8013564 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013558:	6823      	ldr	r3, [r4, #0]
 801355a:	4620      	mov	r0, r4
 801355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801355e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013562:	4718      	bx	r3
 8013564:	bd10      	pop	{r4, pc}

08013566 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013566:	b570      	push	{r4, r5, r6, lr}
 8013568:	4604      	mov	r4, r0
 801356a:	6840      	ldr	r0, [r0, #4]
 801356c:	6803      	ldr	r3, [r0, #0]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	4798      	blx	r3
 8013572:	4605      	mov	r5, r0
 8013574:	b930      	cbnz	r0, 8013584 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013576:	7a23      	ldrb	r3, [r4, #8]
 8013578:	b123      	cbz	r3, 8013584 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801357a:	6860      	ldr	r0, [r4, #4]
 801357c:	6803      	ldr	r3, [r0, #0]
 801357e:	695b      	ldr	r3, [r3, #20]
 8013580:	4798      	blx	r3
 8013582:	7225      	strb	r5, [r4, #8]
 8013584:	6860      	ldr	r0, [r4, #4]
 8013586:	6803      	ldr	r3, [r0, #0]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4798      	blx	r3
 801358c:	b928      	cbnz	r0, 801359a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801358e:	6823      	ldr	r3, [r4, #0]
 8013590:	4620      	mov	r0, r4
 8013592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013598:	4718      	bx	r3
 801359a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801359e:	f7fd bbb3 	b.w	8010d08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080135a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80135a4:	b510      	push	{r4, lr}
 80135a6:	4c04      	ldr	r4, [pc, #16]	; (80135b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80135a8:	6082      	str	r2, [r0, #8]
 80135aa:	2200      	movs	r2, #0
 80135ac:	e9c0 4100 	strd	r4, r1, [r0]
 80135b0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80135b4:	bd10      	pop	{r4, pc}
 80135b6:	bf00      	nop
 80135b8:	080293dc 	.word	0x080293dc

080135bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80135bc:	6840      	ldr	r0, [r0, #4]
 80135be:	6803      	ldr	r3, [r0, #0]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	4718      	bx	r3

080135c4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80135c4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80135c8:	4770      	bx	lr

080135ca <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80135ca:	b510      	push	{r4, lr}
 80135cc:	4604      	mov	r4, r0
 80135ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80135d0:	b150      	cbz	r0, 80135e8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80135d2:	6803      	ldr	r3, [r0, #0]
 80135d4:	68db      	ldr	r3, [r3, #12]
 80135d6:	4798      	blx	r3
 80135d8:	b130      	cbz	r0, 80135e8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80135da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80135dc:	6803      	ldr	r3, [r0, #0]
 80135de:	4621      	mov	r1, r4
 80135e0:	689b      	ldr	r3, [r3, #8]
 80135e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135e6:	4718      	bx	r3
 80135e8:	bd10      	pop	{r4, pc}

080135ea <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80135ea:	b570      	push	{r4, r5, r6, lr}
 80135ec:	790b      	ldrb	r3, [r1, #4]
 80135ee:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	bf0c      	ite	eq
 80135f6:	2301      	moveq	r3, #1
 80135f8:	2300      	movne	r3, #0
 80135fa:	4604      	mov	r4, r0
 80135fc:	460e      	mov	r6, r1
 80135fe:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8013602:	d109      	bne.n	8013618 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8013604:	b14d      	cbz	r5, 801361a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8013606:	7933      	ldrb	r3, [r6, #4]
 8013608:	2b01      	cmp	r3, #1
 801360a:	d10c      	bne.n	8013626 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801360c:	6823      	ldr	r3, [r4, #0]
 801360e:	4620      	mov	r0, r4
 8013610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013616:	4718      	bx	r3
 8013618:	b12d      	cbz	r5, 8013626 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801361a:	6823      	ldr	r3, [r4, #0]
 801361c:	4620      	mov	r0, r4
 801361e:	695b      	ldr	r3, [r3, #20]
 8013620:	4798      	blx	r3
 8013622:	2d00      	cmp	r5, #0
 8013624:	d1ef      	bne.n	8013606 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8013626:	bd70      	pop	{r4, r5, r6, pc}

08013628 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013628:	2000      	movs	r0, #0
 801362a:	4770      	bx	lr

0801362c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801362c:	4b07      	ldr	r3, [pc, #28]	; (801364c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801362e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013630:	881b      	ldrh	r3, [r3, #0]
 8013632:	4293      	cmp	r3, r2
 8013634:	bf81      	itttt	hi
 8013636:	4b06      	ldrhi	r3, [pc, #24]	; (8013650 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013638:	681b      	ldrhi	r3, [r3, #0]
 801363a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801363e:	7858      	ldrbhi	r0, [r3, #1]
 8013640:	bf8c      	ite	hi
 8013642:	f000 0003 	andhi.w	r0, r0, #3
 8013646:	2000      	movls	r0, #0
 8013648:	4770      	bx	lr
 801364a:	bf00      	nop
 801364c:	200258b0 	.word	0x200258b0
 8013650:	200258ac 	.word	0x200258ac

08013654 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013658:	4b10      	ldr	r3, [pc, #64]	; (801369c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801365a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801365c:	881b      	ldrh	r3, [r3, #0]
 801365e:	428b      	cmp	r3, r1
 8013660:	4604      	mov	r4, r0
 8013662:	d918      	bls.n	8013696 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013664:	6803      	ldr	r3, [r0, #0]
 8013666:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8013668:	4b0d      	ldr	r3, [pc, #52]	; (80136a0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801366a:	6818      	ldr	r0, [r3, #0]
 801366c:	f7fc fd9a 	bl	80101a4 <_ZNK8touchgfx5Texts7getTextEt>
 8013670:	6823      	ldr	r3, [r4, #0]
 8013672:	4606      	mov	r6, r0
 8013674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013676:	4620      	mov	r0, r4
 8013678:	4798      	blx	r3
 801367a:	6823      	ldr	r3, [r4, #0]
 801367c:	4607      	mov	r7, r0
 801367e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013682:	4620      	mov	r0, r4
 8013684:	4798      	blx	r3
 8013686:	463a      	mov	r2, r7
 8013688:	4603      	mov	r3, r0
 801368a:	4631      	mov	r1, r6
 801368c:	4620      	mov	r0, r4
 801368e:	46ac      	mov	ip, r5
 8013690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013694:	4760      	bx	ip
 8013696:	2000      	movs	r0, #0
 8013698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801369c:	200258b0 	.word	0x200258b0
 80136a0:	200258b8 	.word	0x200258b8

080136a4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80136a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80136a8:	4b17      	ldr	r3, [pc, #92]	; (8013708 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80136aa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80136ac:	881b      	ldrh	r3, [r3, #0]
 80136ae:	428b      	cmp	r3, r1
 80136b0:	4604      	mov	r4, r0
 80136b2:	d926      	bls.n	8013702 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80136b4:	4b15      	ldr	r3, [pc, #84]	; (801370c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80136bc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80136c0:	4b13      	ldr	r3, [pc, #76]	; (8013710 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80136c2:	7855      	ldrb	r5, [r2, #1]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80136ca:	6833      	ldr	r3, [r6, #0]
 80136cc:	69df      	ldr	r7, [r3, #28]
 80136ce:	4b11      	ldr	r3, [pc, #68]	; (8013714 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80136d0:	6818      	ldr	r0, [r3, #0]
 80136d2:	f7fc fd67 	bl	80101a4 <_ZNK8touchgfx5Texts7getTextEt>
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	4680      	mov	r8, r0
 80136da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136dc:	4620      	mov	r0, r4
 80136de:	4798      	blx	r3
 80136e0:	6823      	ldr	r3, [r4, #0]
 80136e2:	4681      	mov	r9, r0
 80136e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80136e8:	4620      	mov	r0, r4
 80136ea:	4798      	blx	r3
 80136ec:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80136f0:	9000      	str	r0, [sp, #0]
 80136f2:	464b      	mov	r3, r9
 80136f4:	4642      	mov	r2, r8
 80136f6:	4629      	mov	r1, r5
 80136f8:	4630      	mov	r0, r6
 80136fa:	47b8      	blx	r7
 80136fc:	b003      	add	sp, #12
 80136fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013702:	2000      	movs	r0, #0
 8013704:	e7fa      	b.n	80136fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8013706:	bf00      	nop
 8013708:	200258b0 	.word	0x200258b0
 801370c:	200258ac 	.word	0x200258ac
 8013710:	200258b4 	.word	0x200258b4
 8013714:	200258b8 	.word	0x200258b8

08013718 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8013718:	b40e      	push	{r1, r2, r3}
 801371a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801371e:	4b2f      	ldr	r3, [pc, #188]	; (80137dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013720:	881a      	ldrh	r2, [r3, #0]
 8013722:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8013724:	429a      	cmp	r2, r3
 8013726:	b09d      	sub	sp, #116	; 0x74
 8013728:	4604      	mov	r4, r0
 801372a:	d954      	bls.n	80137d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801372c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80137e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013730:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80137e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8013734:	aa26      	add	r2, sp, #152	; 0x98
 8013736:	9202      	str	r2, [sp, #8]
 8013738:	f8d9 2000 	ldr.w	r2, [r9]
 801373c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013740:	f8d8 3000 	ldr.w	r3, [r8]
 8013744:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013748:	682b      	ldr	r3, [r5, #0]
 801374a:	4628      	mov	r0, r5
 801374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801374e:	4798      	blx	r3
 8013750:	b207      	sxth	r7, r0
 8013752:	4606      	mov	r6, r0
 8013754:	a803      	add	r0, sp, #12
 8013756:	f003 ff8a 	bl	801766e <_ZN8touchgfx12TextProviderC1Ev>
 801375a:	682b      	ldr	r3, [r5, #0]
 801375c:	4628      	mov	r0, r5
 801375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013760:	4798      	blx	r3
 8013762:	682b      	ldr	r3, [r5, #0]
 8013764:	4682      	mov	sl, r0
 8013766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013768:	4628      	mov	r0, r5
 801376a:	4798      	blx	r3
 801376c:	4653      	mov	r3, sl
 801376e:	9000      	str	r0, [sp, #0]
 8013770:	9a02      	ldr	r2, [sp, #8]
 8013772:	9925      	ldr	r1, [sp, #148]	; 0x94
 8013774:	a803      	add	r0, sp, #12
 8013776:	f003 ffd5 	bl	8017724 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801377a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801377c:	f8d9 3000 	ldr.w	r3, [r9]
 8013780:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8013784:	8925      	ldrh	r5, [r4, #8]
 8013786:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801378a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801378e:	eba5 050c 	sub.w	r5, r5, ip
 8013792:	784a      	ldrb	r2, [r1, #1]
 8013794:	f8d8 3000 	ldr.w	r3, [r8]
 8013798:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801379c:	b22d      	sxth	r5, r5
 801379e:	9500      	str	r5, [sp, #0]
 80137a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80137a4:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80137a8:	a803      	add	r0, sp, #12
 80137aa:	f001 fd65 	bl	8015278 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80137ae:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80137b2:	18b9      	adds	r1, r7, r2
 80137b4:	2900      	cmp	r1, #0
 80137b6:	b203      	sxth	r3, r0
 80137b8:	dd0b      	ble.n	80137d2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80137ba:	3b01      	subs	r3, #1
 80137bc:	fb13 f302 	smulbb	r3, r3, r2
 80137c0:	fb16 3300 	smlabb	r3, r6, r0, r3
 80137c4:	b21f      	sxth	r7, r3
 80137c6:	4638      	mov	r0, r7
 80137c8:	b01d      	add	sp, #116	; 0x74
 80137ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137ce:	b003      	add	sp, #12
 80137d0:	4770      	bx	lr
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	dcf7      	bgt.n	80137c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80137d6:	2700      	movs	r7, #0
 80137d8:	e7f5      	b.n	80137c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80137da:	bf00      	nop
 80137dc:	200258b0 	.word	0x200258b0
 80137e0:	200258ac 	.word	0x200258ac
 80137e4:	200258b4 	.word	0x200258b4

080137e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 80137e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ec:	4bbc      	ldr	r3, [pc, #752]	; (8013ae0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 80137ee:	460c      	mov	r4, r1
 80137f0:	881b      	ldrh	r3, [r3, #0]
 80137f2:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80137f4:	428b      	cmp	r3, r1
 80137f6:	b0a9      	sub	sp, #164	; 0xa4
 80137f8:	4680      	mov	r8, r0
 80137fa:	d809      	bhi.n	8013810 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 80137fc:	2300      	movs	r3, #0
 80137fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013802:	e9c0 3200 	strd	r3, r2, [r0]
 8013806:	6083      	str	r3, [r0, #8]
 8013808:	4640      	mov	r0, r8
 801380a:	b029      	add	sp, #164	; 0xa4
 801380c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013810:	4eb4      	ldr	r6, [pc, #720]	; (8013ae4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8013812:	6833      	ldr	r3, [r6, #0]
 8013814:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8013818:	4bb3      	ldr	r3, [pc, #716]	; (8013ae8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013820:	4bb2      	ldr	r3, [pc, #712]	; (8013aec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013822:	6818      	ldr	r0, [r3, #0]
 8013824:	f7fc fcbe 	bl	80101a4 <_ZNK8touchgfx5Texts7getTextEt>
 8013828:	682b      	ldr	r3, [r5, #0]
 801382a:	4681      	mov	r9, r0
 801382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801382e:	4628      	mov	r0, r5
 8013830:	4798      	blx	r3
 8013832:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8013834:	b203      	sxth	r3, r0
 8013836:	4407      	add	r7, r0
 8013838:	9304      	str	r3, [sp, #16]
 801383a:	b2bb      	uxth	r3, r7
 801383c:	9303      	str	r3, [sp, #12]
 801383e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8013842:	4682      	mov	sl, r0
 8013844:	a80f      	add	r0, sp, #60	; 0x3c
 8013846:	2b00      	cmp	r3, #0
 8013848:	f040 80a6 	bne.w	8013998 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 801384c:	f003 ff0f 	bl	801766e <_ZN8touchgfx12TextProviderC1Ev>
 8013850:	682b      	ldr	r3, [r5, #0]
 8013852:	4628      	mov	r0, r5
 8013854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013856:	4798      	blx	r3
 8013858:	682b      	ldr	r3, [r5, #0]
 801385a:	4606      	mov	r6, r0
 801385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801385e:	4628      	mov	r0, r5
 8013860:	4798      	blx	r3
 8013862:	6823      	ldr	r3, [r4, #0]
 8013864:	4607      	mov	r7, r0
 8013866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013868:	4620      	mov	r0, r4
 801386a:	4798      	blx	r3
 801386c:	6823      	ldr	r3, [r4, #0]
 801386e:	4683      	mov	fp, r0
 8013870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013874:	4620      	mov	r0, r4
 8013876:	4798      	blx	r3
 8013878:	463b      	mov	r3, r7
 801387a:	e9cd b000 	strd	fp, r0, [sp]
 801387e:	4649      	mov	r1, r9
 8013880:	4632      	mov	r2, r6
 8013882:	a80f      	add	r0, sp, #60	; 0x3c
 8013884:	f003 ff63 	bl	801774e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013888:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801388c:	f8df b254 	ldr.w	fp, [pc, #596]	; 8013ae4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8013890:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013894:	f04f 0600 	mov.w	r6, #0
 8013898:	bf0c      	ite	eq
 801389a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801389e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80138a2:	4637      	mov	r7, r6
 80138a4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80138a6:	f8db 3000 	ldr.w	r3, [fp]
 80138aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80138ae:	4629      	mov	r1, r5
 80138b0:	785b      	ldrb	r3, [r3, #1]
 80138b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80138b6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80138ba:	a80f      	add	r0, sp, #60	; 0x3c
 80138bc:	f001 f9f7 	bl	8014cae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80138c0:	9b03      	ldr	r3, [sp, #12]
 80138c2:	4286      	cmp	r6, r0
 80138c4:	bfb8      	it	lt
 80138c6:	4606      	movlt	r6, r0
 80138c8:	3701      	adds	r7, #1
 80138ca:	eba9 0903 	sub.w	r9, r9, r3
 80138ce:	a80f      	add	r0, sp, #60	; 0x3c
 80138d0:	b236      	sxth	r6, r6
 80138d2:	b2bf      	uxth	r7, r7
 80138d4:	fa0f f989 	sxth.w	r9, r9
 80138d8:	f003 fef0 	bl	80176bc <_ZN8touchgfx12TextProvider11endOfStringEv>
 80138dc:	b918      	cbnz	r0, 80138e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 80138de:	7a2b      	ldrb	r3, [r5, #8]
 80138e0:	444b      	add	r3, r9
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	dcde      	bgt.n	80138a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 80138e6:	9b03      	ldr	r3, [sp, #12]
 80138e8:	9a04      	ldr	r2, [sp, #16]
 80138ea:	f895 9009 	ldrb.w	r9, [r5, #9]
 80138ee:	fb13 f707 	smulbb	r7, r3, r7
 80138f2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80138f4:	1aff      	subs	r7, r7, r3
 80138f6:	b2bf      	uxth	r7, r7
 80138f8:	b23b      	sxth	r3, r7
 80138fa:	429a      	cmp	r2, r3
 80138fc:	bfa8      	it	ge
 80138fe:	4657      	movge	r7, sl
 8013900:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013904:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013908:	6823      	ldr	r3, [r4, #0]
 801390a:	bf08      	it	eq
 801390c:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8013910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013912:	bf18      	it	ne
 8013914:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8013918:	4620      	mov	r0, r4
 801391a:	4798      	blx	r3
 801391c:	444f      	add	r7, r9
 801391e:	fa1f f987 	uxth.w	r9, r7
 8013922:	2801      	cmp	r0, #1
 8013924:	fa0f f789 	sxth.w	r7, r9
 8013928:	b2b3      	uxth	r3, r6
 801392a:	f000 80e1 	beq.w	8013af0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801392e:	2802      	cmp	r0, #2
 8013930:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8013934:	f000 80e2 	beq.w	8013afc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8013938:	7aea      	ldrb	r2, [r5, #11]
 801393a:	7b2d      	ldrb	r5, [r5, #12]
 801393c:	b236      	sxth	r6, r6
 801393e:	1ab6      	subs	r6, r6, r2
 8013940:	442a      	add	r2, r5
 8013942:	4413      	add	r3, r2
 8013944:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8013948:	fa1f fa86 	uxth.w	sl, r6
 801394c:	b29b      	uxth	r3, r3
 801394e:	2a02      	cmp	r2, #2
 8013950:	fa0f fb8a 	sxth.w	fp, sl
 8013954:	b21e      	sxth	r6, r3
 8013956:	f000 80d5 	beq.w	8013b04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 801395a:	2a03      	cmp	r2, #3
 801395c:	f000 80dd 	beq.w	8013b1a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8013960:	2a01      	cmp	r2, #1
 8013962:	f040 80e5 	bne.w	8013b30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8013966:	8925      	ldrh	r5, [r4, #8]
 8013968:	4633      	mov	r3, r6
 801396a:	eba5 0909 	sub.w	r9, r5, r9
 801396e:	463e      	mov	r6, r7
 8013970:	465d      	mov	r5, fp
 8013972:	461f      	mov	r7, r3
 8013974:	fa0f fb89 	sxth.w	fp, r9
 8013978:	4b5c      	ldr	r3, [pc, #368]	; (8013aec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801397a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801397c:	6818      	ldr	r0, [r3, #0]
 801397e:	f7fc fc11 	bl	80101a4 <_ZNK8touchgfx5Texts7getTextEt>
 8013982:	f8a8 b000 	strh.w	fp, [r8]
 8013986:	f8a8 5002 	strh.w	r5, [r8, #2]
 801398a:	f8a8 6004 	strh.w	r6, [r8, #4]
 801398e:	f8a8 7006 	strh.w	r7, [r8, #6]
 8013992:	f8c8 0008 	str.w	r0, [r8, #8]
 8013996:	e737      	b.n	8013808 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8013998:	f003 fe69 	bl	801766e <_ZN8touchgfx12TextProviderC1Ev>
 801399c:	682b      	ldr	r3, [r5, #0]
 801399e:	4628      	mov	r0, r5
 80139a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139a2:	4798      	blx	r3
 80139a4:	682b      	ldr	r3, [r5, #0]
 80139a6:	4607      	mov	r7, r0
 80139a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139aa:	4628      	mov	r0, r5
 80139ac:	4798      	blx	r3
 80139ae:	6823      	ldr	r3, [r4, #0]
 80139b0:	4683      	mov	fp, r0
 80139b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80139b4:	4620      	mov	r0, r4
 80139b6:	4798      	blx	r3
 80139b8:	6822      	ldr	r2, [r4, #0]
 80139ba:	9005      	str	r0, [sp, #20]
 80139bc:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80139c0:	4620      	mov	r0, r4
 80139c2:	4790      	blx	r2
 80139c4:	9b05      	ldr	r3, [sp, #20]
 80139c6:	9001      	str	r0, [sp, #4]
 80139c8:	463a      	mov	r2, r7
 80139ca:	4649      	mov	r1, r9
 80139cc:	9300      	str	r3, [sp, #0]
 80139ce:	a80f      	add	r0, sp, #60	; 0x3c
 80139d0:	465b      	mov	r3, fp
 80139d2:	f003 febc 	bl	801774e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80139d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80139da:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 80139de:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80139e0:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80139e4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80139e8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80139ec:	bf0a      	itet	eq
 80139ee:	464a      	moveq	r2, r9
 80139f0:	461a      	movne	r2, r3
 80139f2:	4699      	moveq	r9, r3
 80139f4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80139f8:	1ad2      	subs	r2, r2, r3
 80139fa:	6833      	ldr	r3, [r6, #0]
 80139fc:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8013a00:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013a04:	af0f      	add	r7, sp, #60	; 0x3c
 8013a06:	7859      	ldrb	r1, [r3, #1]
 8013a08:	9707      	str	r7, [sp, #28]
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013a10:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013a14:	f88d 1020 	strb.w	r1, [sp, #32]
 8013a18:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8013a1c:	9509      	str	r5, [sp, #36]	; 0x24
 8013a1e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013a22:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8013a26:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8013a2a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013a2e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8013a32:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013a36:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013a3a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013a3e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013a42:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013a46:	b350      	cbz	r0, 8013a9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8013a48:	682b      	ldr	r3, [r5, #0]
 8013a4a:	4628      	mov	r0, r5
 8013a4c:	695b      	ldr	r3, [r3, #20]
 8013a4e:	4798      	blx	r3
 8013a50:	4607      	mov	r7, r0
 8013a52:	b320      	cbz	r0, 8013a9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8013a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a56:	6803      	ldr	r3, [r0, #0]
 8013a58:	4639      	mov	r1, r7
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	4798      	blx	r3
 8013a5e:	4606      	mov	r6, r0
 8013a60:	b1e8      	cbz	r0, 8013a9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8013a62:	7b43      	ldrb	r3, [r0, #13]
 8013a64:	7a82      	ldrb	r2, [r0, #10]
 8013a66:	005b      	lsls	r3, r3, #1
 8013a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a6c:	4313      	orrs	r3, r2
 8013a6e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013a72:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8013a76:	2b06      	cmp	r3, #6
 8013a78:	d111      	bne.n	8013a9e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8013a7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a7c:	6803      	ldr	r3, [r0, #0]
 8013a7e:	4632      	mov	r2, r6
 8013a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a82:	4639      	mov	r1, r7
 8013a84:	4798      	blx	r3
 8013a86:	7b73      	ldrb	r3, [r6, #13]
 8013a88:	005b      	lsls	r3, r3, #1
 8013a8a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013a8e:	7ab3      	ldrb	r3, [r6, #10]
 8013a90:	4313      	orrs	r3, r2
 8013a92:	4418      	add	r0, r3
 8013a94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013a98:	4418      	add	r0, r3
 8013a9a:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8013a9e:	2600      	movs	r6, #0
 8013aa0:	4637      	mov	r7, r6
 8013aa2:	a806      	add	r0, sp, #24
 8013aa4:	f001 fae4 	bl	8015070 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013aa8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8013aac:	9b03      	ldr	r3, [sp, #12]
 8013aae:	4286      	cmp	r6, r0
 8013ab0:	eba9 0903 	sub.w	r9, r9, r3
 8013ab4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013ab8:	bfb8      	it	lt
 8013aba:	4606      	movlt	r6, r0
 8013abc:	3701      	adds	r7, #1
 8013abe:	b236      	sxth	r6, r6
 8013ac0:	b2bf      	uxth	r7, r7
 8013ac2:	fa0f f989 	sxth.w	r9, r9
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	f43f af0d 	beq.w	80138e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8013acc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	f47f af08 	bne.w	80138e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8013ad6:	7a2b      	ldrb	r3, [r5, #8]
 8013ad8:	444b      	add	r3, r9
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	dce1      	bgt.n	8013aa2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 8013ade:	e702      	b.n	80138e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8013ae0:	200258b0 	.word	0x200258b0
 8013ae4:	200258ac 	.word	0x200258ac
 8013ae8:	200258b4 	.word	0x200258b4
 8013aec:	200258b8 	.word	0x200258b8
 8013af0:	ebaa 0606 	sub.w	r6, sl, r6
 8013af4:	2002      	movs	r0, #2
 8013af6:	fb96 f6f0 	sdiv	r6, r6, r0
 8013afa:	e71d      	b.n	8013938 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8013afc:	441e      	add	r6, r3
 8013afe:	ebaa 0606 	sub.w	r6, sl, r6
 8013b02:	e719      	b.n	8013938 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8013b04:	8925      	ldrh	r5, [r4, #8]
 8013b06:	1aed      	subs	r5, r5, r3
 8013b08:	eba5 050a 	sub.w	r5, r5, sl
 8013b0c:	fa0f fb85 	sxth.w	fp, r5
 8013b10:	8965      	ldrh	r5, [r4, #10]
 8013b12:	eba5 0509 	sub.w	r5, r5, r9
 8013b16:	b22d      	sxth	r5, r5
 8013b18:	e72e      	b.n	8013978 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8013b1a:	8965      	ldrh	r5, [r4, #10]
 8013b1c:	1aed      	subs	r5, r5, r3
 8013b1e:	eba5 050a 	sub.w	r5, r5, sl
 8013b22:	4633      	mov	r3, r6
 8013b24:	b22d      	sxth	r5, r5
 8013b26:	463e      	mov	r6, r7
 8013b28:	f04f 0b00 	mov.w	fp, #0
 8013b2c:	461f      	mov	r7, r3
 8013b2e:	e723      	b.n	8013978 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8013b30:	2500      	movs	r5, #0
 8013b32:	e721      	b.n	8013978 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

08013b34 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013b34:	b513      	push	{r0, r1, r4, lr}
 8013b36:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8013b3a:	4604      	mov	r4, r0
 8013b3c:	b1fb      	cbz	r3, 8013b7e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013b3e:	4b16      	ldr	r3, [pc, #88]	; (8013b98 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013b40:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013b42:	881b      	ldrh	r3, [r3, #0]
 8013b44:	428b      	cmp	r3, r1
 8013b46:	d91a      	bls.n	8013b7e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013b48:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	dd16      	ble.n	8013b7e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013b50:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	dd12      	ble.n	8013b7e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013b58:	4b10      	ldr	r3, [pc, #64]	; (8013b9c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8013b5a:	6818      	ldr	r0, [r3, #0]
 8013b5c:	f7fc fb22 	bl	80101a4 <_ZNK8touchgfx5Texts7getTextEt>
 8013b60:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013b64:	6822      	ldr	r2, [r4, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	db06      	blt.n	8013b78 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013b6a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	db02      	blt.n	8013b78 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013b72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013b74:	4298      	cmp	r0, r3
 8013b76:	d004      	beq.n	8013b82 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013b78:	6953      	ldr	r3, [r2, #20]
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	4798      	blx	r3
 8013b7e:	b002      	add	sp, #8
 8013b80:	bd10      	pop	{r4, pc}
 8013b82:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8013b86:	c903      	ldmia	r1, {r0, r1}
 8013b88:	466b      	mov	r3, sp
 8013b8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b8e:	6912      	ldr	r2, [r2, #16]
 8013b90:	4619      	mov	r1, r3
 8013b92:	4620      	mov	r0, r4
 8013b94:	4790      	blx	r2
 8013b96:	e7f2      	b.n	8013b7e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013b98:	200258b0 	.word	0x200258b0
 8013b9c:	200258b8 	.word	0x200258b8

08013ba0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba4:	4b44      	ldr	r3, [pc, #272]	; (8013cb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013ba6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013ba8:	881b      	ldrh	r3, [r3, #0]
 8013baa:	4293      	cmp	r3, r2
 8013bac:	b08e      	sub	sp, #56	; 0x38
 8013bae:	4604      	mov	r4, r0
 8013bb0:	d97e      	bls.n	8013cb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013bb2:	6808      	ldr	r0, [r1, #0]
 8013bb4:	4d41      	ldr	r5, [pc, #260]	; (8013cbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8013bb6:	6849      	ldr	r1, [r1, #4]
 8013bb8:	ab05      	add	r3, sp, #20
 8013bba:	c303      	stmia	r3!, {r0, r1}
 8013bbc:	4611      	mov	r1, r2
 8013bbe:	6828      	ldr	r0, [r5, #0]
 8013bc0:	f7fc faf0 	bl	80101a4 <_ZNK8touchgfx5Texts7getTextEt>
 8013bc4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	db11      	blt.n	8013bf0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013bcc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	db0d      	blt.n	8013bf0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013bd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013bd6:	4298      	cmp	r0, r3
 8013bd8:	d10a      	bne.n	8013bf0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013bda:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8013bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013be2:	ab09      	add	r3, sp, #36	; 0x24
 8013be4:	e883 0003 	stmia.w	r3, {r0, r1}
 8013be8:	4619      	mov	r1, r3
 8013bea:	a805      	add	r0, sp, #20
 8013bec:	f7fe fcee 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 8013bf0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	dd5b      	ble.n	8013cb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013bf8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	dd57      	ble.n	8013cb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013c00:	4f2f      	ldr	r7, [pc, #188]	; (8013cc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013c02:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013c0a:	4b2e      	ldr	r3, [pc, #184]	; (8013cc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013c12:	2e00      	cmp	r6, #0
 8013c14:	d04c      	beq.n	8013cb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013c16:	6823      	ldr	r3, [r4, #0]
 8013c18:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8013c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c1e:	4620      	mov	r0, r4
 8013c20:	4798      	blx	r3
 8013c22:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8013c2a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8013c2e:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8013c32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013c34:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013c38:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8013c3c:	785b      	ldrb	r3, [r3, #1]
 8013c3e:	9609      	str	r6, [sp, #36]	; 0x24
 8013c40:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013c44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c48:	4b1f      	ldr	r3, [pc, #124]	; (8013cc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8013c4a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8013c54:	910b      	str	r1, [sp, #44]	; 0x2c
 8013c56:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8013c5a:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8013c5e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8013c62:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8013c66:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8013c6a:	b10a      	cbz	r2, 8013c70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8013c6c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8013c6e:	b906      	cbnz	r6, 8013c72 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013c70:	689e      	ldr	r6, [r3, #8]
 8013c72:	af07      	add	r7, sp, #28
 8013c74:	4621      	mov	r1, r4
 8013c76:	4638      	mov	r0, r7
 8013c78:	f003 f8e2 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c7c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013c7e:	6828      	ldr	r0, [r5, #0]
 8013c80:	f7fc fa90 	bl	80101a4 <_ZNK8touchgfx5Texts7getTextEt>
 8013c84:	6823      	ldr	r3, [r4, #0]
 8013c86:	4605      	mov	r5, r0
 8013c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	4798      	blx	r3
 8013c8e:	6823      	ldr	r3, [r4, #0]
 8013c90:	4680      	mov	r8, r0
 8013c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c96:	4620      	mov	r0, r4
 8013c98:	4798      	blx	r3
 8013c9a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8013c9e:	ab09      	add	r3, sp, #36	; 0x24
 8013ca0:	9300      	str	r3, [sp, #0]
 8013ca2:	9501      	str	r5, [sp, #4]
 8013ca4:	ab05      	add	r3, sp, #20
 8013ca6:	e897 0006 	ldmia.w	r7, {r1, r2}
 8013caa:	4630      	mov	r0, r6
 8013cac:	f7fc fa0b 	bl	80100c6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013cb0:	b00e      	add	sp, #56	; 0x38
 8013cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb6:	bf00      	nop
 8013cb8:	200258b0 	.word	0x200258b0
 8013cbc:	200258b8 	.word	0x200258b8
 8013cc0:	200258ac 	.word	0x200258ac
 8013cc4:	200258b4 	.word	0x200258b4
 8013cc8:	2002585c 	.word	0x2002585c

08013ccc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013ccc:	b538      	push	{r3, r4, r5, lr}
 8013cce:	4b0e      	ldr	r3, [pc, #56]	; (8013d08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013cd0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013cd2:	881b      	ldrh	r3, [r3, #0]
 8013cd4:	429a      	cmp	r2, r3
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	d214      	bcs.n	8013d04 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013cda:	6803      	ldr	r3, [r0, #0]
 8013cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cde:	4798      	blx	r3
 8013ce0:	6823      	ldr	r3, [r4, #0]
 8013ce2:	4605      	mov	r5, r0
 8013ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	4798      	blx	r3
 8013cea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013cee:	b22d      	sxth	r5, r5
 8013cf0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013cf4:	4601      	mov	r1, r0
 8013cf6:	bf06      	itte	eq
 8013cf8:	4602      	moveq	r2, r0
 8013cfa:	4629      	moveq	r1, r5
 8013cfc:	462a      	movne	r2, r5
 8013cfe:	4620      	mov	r0, r4
 8013d00:	f7fa fef5 	bl	800eaee <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013d04:	bd38      	pop	{r3, r4, r5, pc}
 8013d06:	bf00      	nop
 8013d08:	200258b0 	.word	0x200258b0

08013d0c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013d0c:	b530      	push	{r4, r5, lr}
 8013d0e:	888b      	ldrh	r3, [r1, #4]
 8013d10:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013d12:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013d16:	b085      	sub	sp, #20
 8013d18:	4604      	mov	r4, r0
 8013d1a:	b923      	cbnz	r3, 8013d26 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013d1c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013d20:	b90b      	cbnz	r3, 8013d26 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013d22:	f7ff ffd3 	bl	8013ccc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013d26:	6823      	ldr	r3, [r4, #0]
 8013d28:	466d      	mov	r5, sp
 8013d2a:	4621      	mov	r1, r4
 8013d2c:	4628      	mov	r0, r5
 8013d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d32:	4798      	blx	r3
 8013d34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013d38:	343c      	adds	r4, #60	; 0x3c
 8013d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013d3e:	b005      	add	sp, #20
 8013d40:	bd30      	pop	{r4, r5, pc}

08013d42 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013d42:	2300      	movs	r3, #0
 8013d44:	8083      	strh	r3, [r0, #4]
 8013d46:	80c3      	strh	r3, [r0, #6]
 8013d48:	8003      	strh	r3, [r0, #0]
 8013d4a:	8043      	strh	r3, [r0, #2]
 8013d4c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013d50:	2bff      	cmp	r3, #255	; 0xff
 8013d52:	bf01      	itttt	eq
 8013d54:	890b      	ldrheq	r3, [r1, #8]
 8013d56:	8083      	strheq	r3, [r0, #4]
 8013d58:	894b      	ldrheq	r3, [r1, #10]
 8013d5a:	80c3      	strheq	r3, [r0, #6]
 8013d5c:	4770      	bx	lr
	...

08013d60 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d62:	4604      	mov	r4, r0
 8013d64:	6808      	ldr	r0, [r1, #0]
 8013d66:	6849      	ldr	r1, [r1, #4]
 8013d68:	466b      	mov	r3, sp
 8013d6a:	c303      	stmia	r3!, {r0, r1}
 8013d6c:	6823      	ldr	r3, [r4, #0]
 8013d6e:	4669      	mov	r1, sp
 8013d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d72:	4620      	mov	r0, r4
 8013d74:	4798      	blx	r3
 8013d76:	4b08      	ldr	r3, [pc, #32]	; (8013d98 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8013d7e:	b10a      	cbz	r2, 8013d84 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013d80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013d82:	b900      	cbnz	r0, 8013d86 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013d84:	6898      	ldr	r0, [r3, #8]
 8013d86:	6803      	ldr	r3, [r0, #0]
 8013d88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013d8a:	6a1d      	ldr	r5, [r3, #32]
 8013d8c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013d90:	4669      	mov	r1, sp
 8013d92:	47a8      	blx	r5
 8013d94:	b003      	add	sp, #12
 8013d96:	bd30      	pop	{r4, r5, pc}
 8013d98:	2002585c 	.word	0x2002585c

08013d9c <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013d9c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8013da0:	b12a      	cbz	r2, 8013dae <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013da2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013da6:	b112      	cbz	r2, 8013dae <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013da8:	6803      	ldr	r3, [r0, #0]
 8013daa:	695b      	ldr	r3, [r3, #20]
 8013dac:	4718      	bx	r3
 8013dae:	4770      	bx	lr

08013db0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8013db0:	b570      	push	{r4, r5, r6, lr}
 8013db2:	880b      	ldrh	r3, [r1, #0]
 8013db4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8013db6:	4605      	mov	r5, r0
 8013db8:	8813      	ldrh	r3, [r2, #0]
 8013dba:	f825 3f30 	strh.w	r3, [r5, #48]!
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	4628      	mov	r0, r5
 8013dc2:	f004 ffdf 	bl	8018d84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013dc6:	4606      	mov	r6, r0
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f005 f80f 	bl	8018dec <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013dce:	6823      	ldr	r3, [r4, #0]
 8013dd0:	4605      	mov	r5, r0
 8013dd2:	4631      	mov	r1, r6
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dd8:	4798      	blx	r3
 8013dda:	6823      	ldr	r3, [r4, #0]
 8013ddc:	4629      	mov	r1, r5
 8013dde:	4620      	mov	r0, r4
 8013de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013de6:	4718      	bx	r3

08013de8 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8013de8:	b510      	push	{r4, lr}
 8013dea:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8013dee:	2bff      	cmp	r3, #255	; 0xff
 8013df0:	4604      	mov	r4, r0
 8013df2:	d006      	beq.n	8013e02 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8013df4:	2300      	movs	r3, #0
 8013df6:	8003      	strh	r3, [r0, #0]
 8013df8:	8043      	strh	r3, [r0, #2]
 8013dfa:	8083      	strh	r3, [r0, #4]
 8013dfc:	80c3      	strh	r3, [r0, #6]
 8013dfe:	4620      	mov	r0, r4
 8013e00:	bd10      	pop	{r4, pc}
 8013e02:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8013e06:	b11b      	cbz	r3, 8013e10 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8013e08:	3130      	adds	r1, #48	; 0x30
 8013e0a:	f005 f823 	bl	8018e54 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013e0e:	e7f6      	b.n	8013dfe <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8013e10:	312e      	adds	r1, #46	; 0x2e
 8013e12:	e7fa      	b.n	8013e0a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08013e14 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8013e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e18:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013e1c:	b08a      	sub	sp, #40	; 0x28
 8013e1e:	4604      	mov	r4, r0
 8013e20:	4688      	mov	r8, r1
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d066      	beq.n	8013ef4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8013e26:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013e28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013e2c:	a805      	add	r0, sp, #20
 8013e2e:	f004 ffa9 	bl	8018d84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013e32:	4607      	mov	r7, r0
 8013e34:	a805      	add	r0, sp, #20
 8013e36:	f004 ffd9 	bl	8018dec <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013e3a:	f9b8 6000 	ldrsh.w	r6, [r8]
 8013e3e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8013e42:	4432      	add	r2, r6
 8013e44:	b292      	uxth	r2, r2
 8013e46:	2300      	movs	r3, #0
 8013e48:	fa0f fc82 	sxth.w	ip, r2
 8013e4c:	459c      	cmp	ip, r3
 8013e4e:	9306      	str	r3, [sp, #24]
 8013e50:	dd52      	ble.n	8013ef8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013e52:	42b7      	cmp	r7, r6
 8013e54:	dd50      	ble.n	8013ef8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013e56:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013e5a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013e5e:	442b      	add	r3, r5
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	b219      	sxth	r1, r3
 8013e64:	2900      	cmp	r1, #0
 8013e66:	dd47      	ble.n	8013ef8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013e68:	42a8      	cmp	r0, r5
 8013e6a:	dd45      	ble.n	8013ef8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013e6c:	4567      	cmp	r7, ip
 8013e6e:	bfb8      	it	lt
 8013e70:	b2ba      	uxthlt	r2, r7
 8013e72:	4288      	cmp	r0, r1
 8013e74:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8013e78:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8013e7c:	bfb8      	it	lt
 8013e7e:	b283      	uxthlt	r3, r0
 8013e80:	1b92      	subs	r2, r2, r6
 8013e82:	1b5b      	subs	r3, r3, r5
 8013e84:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013e88:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013e8c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013e90:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013e94:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d026      	beq.n	8013eee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013ea0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	dd22      	ble.n	8013eee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013ea8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	dd1e      	ble.n	8013eee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013eb6:	6823      	ldr	r3, [r4, #0]
 8013eb8:	a908      	add	r1, sp, #32
 8013eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	4798      	blx	r3
 8013ec0:	4b0f      	ldr	r3, [pc, #60]	; (8013f00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8013ec8:	b10a      	cbz	r2, 8013ece <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8013eca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013ecc:	b900      	cbnz	r0, 8013ed0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8013ece:	6898      	ldr	r0, [r3, #8]
 8013ed0:	6801      	ldr	r1, [r0, #0]
 8013ed2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8013ed6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013eda:	2501      	movs	r5, #1
 8013edc:	9502      	str	r5, [sp, #8]
 8013ede:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8013ee2:	9401      	str	r4, [sp, #4]
 8013ee4:	ac06      	add	r4, sp, #24
 8013ee6:	9400      	str	r4, [sp, #0]
 8013ee8:	688c      	ldr	r4, [r1, #8]
 8013eea:	a905      	add	r1, sp, #20
 8013eec:	47a0      	blx	r4
 8013eee:	b00a      	add	sp, #40	; 0x28
 8013ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8013ef6:	e797      	b.n	8013e28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8013ef8:	2300      	movs	r3, #0
 8013efa:	9307      	str	r3, [sp, #28]
 8013efc:	e7ca      	b.n	8013e94 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8013efe:	bf00      	nop
 8013f00:	2002585c 	.word	0x2002585c

08013f04 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8013f04:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8013f08:	b12a      	cbz	r2, 8013f16 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013f0a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013f0e:	b112      	cbz	r2, 8013f16 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013f10:	6803      	ldr	r3, [r0, #0]
 8013f12:	695b      	ldr	r3, [r3, #20]
 8013f14:	4718      	bx	r3
 8013f16:	4770      	bx	lr

08013f18 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8013f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f1c:	4b2f      	ldr	r3, [pc, #188]	; (8013fdc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8013f1e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013f20:	881b      	ldrh	r3, [r3, #0]
 8013f22:	4293      	cmp	r3, r2
 8013f24:	b08d      	sub	sp, #52	; 0x34
 8013f26:	4604      	mov	r4, r0
 8013f28:	460f      	mov	r7, r1
 8013f2a:	d954      	bls.n	8013fd6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013f2c:	4b2c      	ldr	r3, [pc, #176]	; (8013fe0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8013f2e:	6819      	ldr	r1, [r3, #0]
 8013f30:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013f34:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8013f38:	4a2a      	ldr	r2, [pc, #168]	; (8013fe4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8013f3a:	6812      	ldr	r2, [r2, #0]
 8013f3c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013f40:	2900      	cmp	r1, #0
 8013f42:	d048      	beq.n	8013fd6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013f44:	785a      	ldrb	r2, [r3, #1]
 8013f46:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8013f4a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013f4e:	4b26      	ldr	r3, [pc, #152]	; (8013fe8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8013f50:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8013f54:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8013f58:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8013f5c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8013f5e:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8013f62:	9107      	str	r1, [sp, #28]
 8013f64:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8013f68:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013f6c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	f88d 8020 	strb.w	r8, [sp, #32]
 8013f76:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8013f7a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8013f7e:	9609      	str	r6, [sp, #36]	; 0x24
 8013f80:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8013f84:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013f88:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8013f8c:	b10b      	cbz	r3, 8013f92 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8013f8e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8013f90:	b905      	cbnz	r5, 8013f94 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8013f92:	6895      	ldr	r5, [r2, #8]
 8013f94:	ae05      	add	r6, sp, #20
 8013f96:	4621      	mov	r1, r4
 8013f98:	4630      	mov	r0, r6
 8013f9a:	f002 ff51 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f9e:	4b13      	ldr	r3, [pc, #76]	; (8013fec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013fa0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013fa2:	6818      	ldr	r0, [r3, #0]
 8013fa4:	f7fc f8fe 	bl	80101a4 <_ZNK8touchgfx5Texts7getTextEt>
 8013fa8:	6823      	ldr	r3, [r4, #0]
 8013faa:	4680      	mov	r8, r0
 8013fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013fae:	4620      	mov	r0, r4
 8013fb0:	4798      	blx	r3
 8013fb2:	6823      	ldr	r3, [r4, #0]
 8013fb4:	4681      	mov	r9, r0
 8013fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013fba:	4620      	mov	r0, r4
 8013fbc:	4798      	blx	r3
 8013fbe:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8013fc2:	ab07      	add	r3, sp, #28
 8013fc4:	9300      	str	r3, [sp, #0]
 8013fc6:	f8cd 8004 	str.w	r8, [sp, #4]
 8013fca:	463b      	mov	r3, r7
 8013fcc:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	f7fc f878 	bl	80100c6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013fd6:	b00d      	add	sp, #52	; 0x34
 8013fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fdc:	200258b0 	.word	0x200258b0
 8013fe0:	200258ac 	.word	0x200258ac
 8013fe4:	200258b4 	.word	0x200258b4
 8013fe8:	2002585c 	.word	0x2002585c
 8013fec:	200258b8 	.word	0x200258b8

08013ff0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8013ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013ff8:	8962      	ldrh	r2, [r4, #10]
 8013ffa:	b218      	sxth	r0, r3
 8013ffc:	460e      	mov	r6, r1
 8013ffe:	005b      	lsls	r3, r3, #1
 8014000:	8921      	ldrh	r1, [r4, #8]
 8014002:	b29b      	uxth	r3, r3
 8014004:	1ac9      	subs	r1, r1, r3
 8014006:	b08e      	sub	sp, #56	; 0x38
 8014008:	b209      	sxth	r1, r1
 801400a:	1ad3      	subs	r3, r2, r3
 801400c:	b21b      	sxth	r3, r3
 801400e:	2900      	cmp	r1, #0
 8014010:	f8ad 0000 	strh.w	r0, [sp]
 8014014:	f8ad 0002 	strh.w	r0, [sp, #2]
 8014018:	f8ad 1004 	strh.w	r1, [sp, #4]
 801401c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014020:	dd5e      	ble.n	80140e0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8014022:	2b00      	cmp	r3, #0
 8014024:	dd5c      	ble.n	80140e0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8014026:	6830      	ldr	r0, [r6, #0]
 8014028:	6871      	ldr	r1, [r6, #4]
 801402a:	ab02      	add	r3, sp, #8
 801402c:	c303      	stmia	r3!, {r0, r1}
 801402e:	4669      	mov	r1, sp
 8014030:	a802      	add	r0, sp, #8
 8014032:	f7fe facb 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 8014036:	4620      	mov	r0, r4
 8014038:	a902      	add	r1, sp, #8
 801403a:	f7ff fe91 	bl	8013d60 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801403e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8014040:	2800      	cmp	r0, #0
 8014042:	d05f      	beq.n	8014104 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8014044:	8963      	ldrh	r3, [r4, #10]
 8014046:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801404a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801404e:	1a1f      	subs	r7, r3, r0
 8014050:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8014054:	b202      	sxth	r2, r0
 8014056:	2500      	movs	r5, #0
 8014058:	b21b      	sxth	r3, r3
 801405a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801405e:	1a09      	subs	r1, r1, r0
 8014060:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8014064:	9506      	str	r5, [sp, #24]
 8014066:	f8ad 201e 	strh.w	r2, [sp, #30]
 801406a:	f8ad 5020 	strh.w	r5, [sp, #32]
 801406e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8014072:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8014076:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801407a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801407e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014082:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8014086:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801408a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801408e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014092:	af04      	add	r7, sp, #16
 8014094:	ab06      	add	r3, sp, #24
 8014096:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801409a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801409e:	e887 0003 	stmia.w	r7, {r0, r1}
 80140a2:	4631      	mov	r1, r6
 80140a4:	4638      	mov	r0, r7
 80140a6:	f7fe fa91 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 80140aa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	dd12      	ble.n	80140d8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80140b2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	dd0e      	ble.n	80140d8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80140ba:	6823      	ldr	r3, [r4, #0]
 80140bc:	4639      	mov	r1, r7
 80140be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140c0:	4620      	mov	r0, r4
 80140c2:	4798      	blx	r3
 80140c4:	f7f9 ff1c 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 80140c8:	6803      	ldr	r3, [r0, #0]
 80140ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80140cc:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80140d0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80140d4:	4639      	mov	r1, r7
 80140d6:	47c0      	blx	r8
 80140d8:	3501      	adds	r5, #1
 80140da:	2d04      	cmp	r5, #4
 80140dc:	d1da      	bne.n	8014094 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 80140de:	e011      	b.n	8014104 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80140e0:	6830      	ldr	r0, [r6, #0]
 80140e2:	6871      	ldr	r1, [r6, #4]
 80140e4:	ab06      	add	r3, sp, #24
 80140e6:	c303      	stmia	r3!, {r0, r1}
 80140e8:	6823      	ldr	r3, [r4, #0]
 80140ea:	a906      	add	r1, sp, #24
 80140ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ee:	4620      	mov	r0, r4
 80140f0:	4798      	blx	r3
 80140f2:	f7f9 ff05 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 80140f6:	6803      	ldr	r3, [r0, #0]
 80140f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80140fa:	6a1d      	ldr	r5, [r3, #32]
 80140fc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014100:	a906      	add	r1, sp, #24
 8014102:	47a8      	blx	r5
 8014104:	b00e      	add	sp, #56	; 0x38
 8014106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801410a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801410a:	b570      	push	{r4, r5, r6, lr}
 801410c:	880b      	ldrh	r3, [r1, #0]
 801410e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014110:	4604      	mov	r4, r0
 8014112:	4608      	mov	r0, r1
 8014114:	460d      	mov	r5, r1
 8014116:	f004 fe35 	bl	8018d84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801411a:	4606      	mov	r6, r0
 801411c:	4628      	mov	r0, r5
 801411e:	f004 fe65 	bl	8018dec <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014122:	6823      	ldr	r3, [r4, #0]
 8014124:	4605      	mov	r5, r0
 8014126:	4631      	mov	r1, r6
 8014128:	4620      	mov	r0, r4
 801412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801412c:	4798      	blx	r3
 801412e:	6823      	ldr	r3, [r4, #0]
 8014130:	4629      	mov	r1, r5
 8014132:	4620      	mov	r0, r4
 8014134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801413a:	4718      	bx	r3

0801413c <_ZNK8touchgfx5Image12getSolidRectEv>:
 801413c:	b510      	push	{r4, lr}
 801413e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8014142:	2bff      	cmp	r3, #255	; 0xff
 8014144:	4604      	mov	r4, r0
 8014146:	d006      	beq.n	8014156 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8014148:	2300      	movs	r3, #0
 801414a:	8003      	strh	r3, [r0, #0]
 801414c:	8043      	strh	r3, [r0, #2]
 801414e:	8083      	strh	r3, [r0, #4]
 8014150:	80c3      	strh	r3, [r0, #6]
 8014152:	4620      	mov	r0, r4
 8014154:	bd10      	pop	{r4, pc}
 8014156:	3126      	adds	r1, #38	; 0x26
 8014158:	f004 fe7c 	bl	8018e54 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801415c:	e7f9      	b.n	8014152 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801415e <_ZNK8touchgfx5Image17invalidateContentEv>:
 801415e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8014162:	b12a      	cbz	r2, 8014170 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014164:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8014168:	b112      	cbz	r2, 8014170 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801416a:	6803      	ldr	r3, [r0, #0]
 801416c:	695b      	ldr	r3, [r3, #20]
 801416e:	4718      	bx	r3
 8014170:	4770      	bx	lr
	...

08014174 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014178:	4604      	mov	r4, r0
 801417a:	b088      	sub	sp, #32
 801417c:	f854 3b26 	ldr.w	r3, [r4], #38
 8014180:	2500      	movs	r5, #0
 8014182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014184:	460f      	mov	r7, r1
 8014186:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801418a:	a904      	add	r1, sp, #16
 801418c:	4606      	mov	r6, r0
 801418e:	4798      	blx	r3
 8014190:	4620      	mov	r0, r4
 8014192:	f004 fdf7 	bl	8018d84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014196:	4680      	mov	r8, r0
 8014198:	4620      	mov	r0, r4
 801419a:	f004 fe27 	bl	8018dec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801419e:	9506      	str	r5, [sp, #24]
 80141a0:	ad06      	add	r5, sp, #24
 80141a2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80141a6:	4639      	mov	r1, r7
 80141a8:	4628      	mov	r0, r5
 80141aa:	f8ad 801c 	strh.w	r8, [sp, #28]
 80141ae:	f7fe fa0d 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 80141b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	dd19      	ble.n	80141ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80141ba:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	dd15      	ble.n	80141ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80141c2:	4b0c      	ldr	r3, [pc, #48]	; (80141f4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80141ca:	b10a      	cbz	r2, 80141d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80141cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80141ce:	b900      	cbnz	r0, 80141d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80141d0:	6898      	ldr	r0, [r3, #8]
 80141d2:	6801      	ldr	r1, [r0, #0]
 80141d4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80141d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80141dc:	2701      	movs	r7, #1
 80141de:	9702      	str	r7, [sp, #8]
 80141e0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80141e4:	e9cd 5600 	strd	r5, r6, [sp]
 80141e8:	688d      	ldr	r5, [r1, #8]
 80141ea:	4621      	mov	r1, r4
 80141ec:	47a8      	blx	r5
 80141ee:	b008      	add	sp, #32
 80141f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141f4:	2002585c 	.word	0x2002585c

080141f8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80141f8:	b510      	push	{r4, lr}
 80141fa:	6803      	ldr	r3, [r0, #0]
 80141fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141fe:	460c      	mov	r4, r1
 8014200:	4798      	blx	r3
 8014202:	1b03      	subs	r3, r0, r4
 8014204:	4258      	negs	r0, r3
 8014206:	4158      	adcs	r0, r3
 8014208:	bd10      	pop	{r4, pc}
	...

0801420c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801420c:	4b01      	ldr	r3, [pc, #4]	; (8014214 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801420e:	6019      	str	r1, [r3, #0]
 8014210:	4770      	bx	lr
 8014212:	bf00      	nop
 8014214:	20025864 	.word	0x20025864

08014218 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801421c:	4696      	mov	lr, r2
 801421e:	4605      	mov	r5, r0
 8014220:	4614      	mov	r4, r2
 8014222:	460e      	mov	r6, r1
 8014224:	461f      	mov	r7, r3
 8014226:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801422a:	b097      	sub	sp, #92	; 0x5c
 801422c:	f10d 0c1c 	add.w	ip, sp, #28
 8014230:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014234:	f8de 3000 	ldr.w	r3, [lr]
 8014238:	f8cc 3000 	str.w	r3, [ip]
 801423c:	f104 0e14 	add.w	lr, r4, #20
 8014240:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014244:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014248:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801424c:	f8de 3000 	ldr.w	r3, [lr]
 8014250:	f8cc 3000 	str.w	r3, [ip]
 8014254:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014258:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801425c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014260:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014264:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8014268:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801426c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8014270:	f8de 3000 	ldr.w	r3, [lr]
 8014274:	f8cc 3000 	str.w	r3, [ip]
 8014278:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801427a:	682b      	ldr	r3, [r5, #0]
 801427c:	9201      	str	r2, [sp, #4]
 801427e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014282:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014284:	9200      	str	r2, [sp, #0]
 8014286:	f8cd 8008 	str.w	r8, [sp, #8]
 801428a:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801428e:	aa07      	add	r2, sp, #28
 8014290:	463b      	mov	r3, r7
 8014292:	4631      	mov	r1, r6
 8014294:	4628      	mov	r0, r5
 8014296:	47d8      	blx	fp
 8014298:	46a6      	mov	lr, r4
 801429a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801429e:	f10d 0c1c 	add.w	ip, sp, #28
 80142a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142a6:	f8de 3000 	ldr.w	r3, [lr]
 80142aa:	f8cc 3000 	str.w	r3, [ip]
 80142ae:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80142b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80142b6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80142ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142be:	343c      	adds	r4, #60	; 0x3c
 80142c0:	f8de 3000 	ldr.w	r3, [lr]
 80142c4:	f8cc 3000 	str.w	r3, [ip]
 80142c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142ca:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80142ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142d2:	6823      	ldr	r3, [r4, #0]
 80142d4:	f8cc 3000 	str.w	r3, [ip]
 80142d8:	682b      	ldr	r3, [r5, #0]
 80142da:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80142de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80142e0:	9201      	str	r2, [sp, #4]
 80142e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80142e4:	9200      	str	r2, [sp, #0]
 80142e6:	f8cd 8008 	str.w	r8, [sp, #8]
 80142ea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80142ec:	aa07      	add	r2, sp, #28
 80142ee:	463b      	mov	r3, r7
 80142f0:	4631      	mov	r1, r6
 80142f2:	4628      	mov	r0, r5
 80142f4:	47a0      	blx	r4
 80142f6:	b017      	add	sp, #92	; 0x5c
 80142f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080142fc <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80142fc:	2000      	movs	r0, #0
 80142fe:	4770      	bx	lr

08014300 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014304:	b08d      	sub	sp, #52	; 0x34
 8014306:	4688      	mov	r8, r1
 8014308:	9916      	ldr	r1, [sp, #88]	; 0x58
 801430a:	f8d3 c000 	ldr.w	ip, [r3]
 801430e:	680f      	ldr	r7, [r1, #0]
 8014310:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8014314:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014318:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801431c:	edd3 6a07 	vldr	s13, [r3, #28]
 8014320:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014322:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8014326:	f9b1 9000 	ldrsh.w	r9, [r1]
 801432a:	f9ba 1000 	ldrsh.w	r1, [sl]
 801432e:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8014332:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014336:	eba7 070c 	sub.w	r7, r7, ip
 801433a:	42bc      	cmp	r4, r7
 801433c:	bfa8      	it	ge
 801433e:	463c      	movge	r4, r7
 8014340:	ee07 4a90 	vmov	s15, r4
 8014344:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014348:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801434c:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014350:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014354:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014358:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801435c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014360:	eb09 0e0c 	add.w	lr, r9, ip
 8014364:	4571      	cmp	r1, lr
 8014366:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801436a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801436e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014372:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014376:	ee22 2a07 	vmul.f32	s4, s4, s14
 801437a:	f340 808d 	ble.w	8014498 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801437e:	eba1 060e 	sub.w	r6, r1, lr
 8014382:	fb96 f5f4 	sdiv	r5, r6, r4
 8014386:	ee07 5a10 	vmov	s14, r5
 801438a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801438e:	2d00      	cmp	r5, #0
 8014390:	fb04 6615 	mls	r6, r4, r5, r6
 8014394:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014398:	eee7 0a24 	vfma.f32	s1, s14, s9
 801439c:	eea7 1a05 	vfma.f32	s2, s14, s10
 80143a0:	dd13      	ble.n	80143ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 80143a2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80143a6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80143aa:	eef5 6a40 	vcmp.f32	s13, #0.0
 80143ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b2:	bf18      	it	ne
 80143b4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80143b8:	ee31 2a45 	vsub.f32	s4, s2, s10
 80143bc:	bf08      	it	eq
 80143be:	eeb0 7a67 	vmoveq.f32	s14, s15
 80143c2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80143c6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80143ca:	fb05 f204 	mul.w	r2, r5, r4
 80143ce:	1abf      	subs	r7, r7, r2
 80143d0:	4494      	add	ip, r2
 80143d2:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80143d6:	4411      	add	r1, r2
 80143d8:	eb09 020c 	add.w	r2, r9, ip
 80143dc:	443a      	add	r2, r7
 80143de:	b209      	sxth	r1, r1
 80143e0:	428a      	cmp	r2, r1
 80143e2:	bfc4      	itt	gt
 80143e4:	eba1 0209 	subgt.w	r2, r1, r9
 80143e8:	eba2 070c 	subgt.w	r7, r2, ip
 80143ec:	2f00      	cmp	r7, #0
 80143ee:	dd50      	ble.n	8014492 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 80143f0:	fb97 f1f4 	sdiv	r1, r7, r4
 80143f4:	fb04 7211 	mls	r2, r4, r1, r7
 80143f8:	b90a      	cbnz	r2, 80143fe <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 80143fa:	3901      	subs	r1, #1
 80143fc:	4622      	mov	r2, r4
 80143fe:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014402:	6840      	ldr	r0, [r0, #4]
 8014404:	900b      	str	r0, [sp, #44]	; 0x2c
 8014406:	f8d0 a000 	ldr.w	sl, [r0]
 801440a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801440c:	9008      	str	r0, [sp, #32]
 801440e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8014412:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014414:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014418:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801441c:	695b      	ldr	r3, [r3, #20]
 801441e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014420:	445b      	add	r3, fp
 8014422:	eef0 6a42 	vmov.f32	s13, s4
 8014426:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801442a:	ee21 3a23 	vmul.f32	s6, s2, s7
 801442e:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014432:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014436:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801443a:	9307      	str	r3, [sp, #28]
 801443c:	ee17 7a90 	vmov	r7, s15
 8014440:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014444:	eeb0 7a61 	vmov.f32	s14, s3
 8014448:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801444c:	ee16 3a90 	vmov	r3, s13
 8014450:	fb97 f7f4 	sdiv	r7, r7, r4
 8014454:	ee17 ca90 	vmov	ip, s15
 8014458:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801445c:	fb9c fcf4 	sdiv	ip, ip, r4
 8014460:	fb0c 3306 	mla	r3, ip, r6, r3
 8014464:	9302      	str	r3, [sp, #8]
 8014466:	ee17 3a10 	vmov	r3, s14
 801446a:	44b6      	add	lr, r6
 801446c:	fb04 e505 	mla	r5, r4, r5, lr
 8014470:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014474:	fb07 3706 	mla	r7, r7, r6, r3
 8014478:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801447c:	e9cd 4700 	strd	r4, r7, [sp]
 8014480:	2900      	cmp	r1, #0
 8014482:	bfcc      	ite	gt
 8014484:	46a1      	movgt	r9, r4
 8014486:	4691      	movle	r9, r2
 8014488:	eba9 0306 	sub.w	r3, r9, r6
 801448c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014490:	47a0      	blx	r4
 8014492:	b00d      	add	sp, #52	; 0x34
 8014494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014498:	2500      	movs	r5, #0
 801449a:	462e      	mov	r6, r5
 801449c:	e799      	b.n	80143d2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

080144a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80144a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144a4:	b0db      	sub	sp, #364	; 0x16c
 80144a6:	461d      	mov	r5, r3
 80144a8:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80144ac:	930a      	str	r3, [sp, #40]	; 0x28
 80144ae:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80144b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80144b4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80144b8:	9310      	str	r3, [sp, #64]	; 0x40
 80144ba:	6803      	ldr	r3, [r0, #0]
 80144bc:	910f      	str	r1, [sp, #60]	; 0x3c
 80144be:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80144c0:	9009      	str	r0, [sp, #36]	; 0x24
 80144c2:	4614      	mov	r4, r2
 80144c4:	4629      	mov	r1, r5
 80144c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80144ca:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80144ce:	47b8      	blx	r7
 80144d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144d2:	6058      	str	r0, [r3, #4]
 80144d4:	2800      	cmp	r0, #0
 80144d6:	f000 83a1 	beq.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80144da:	682b      	ldr	r3, [r5, #0]
 80144dc:	9314      	str	r3, [sp, #80]	; 0x50
 80144de:	686b      	ldr	r3, [r5, #4]
 80144e0:	9315      	str	r3, [sp, #84]	; 0x54
 80144e2:	4bc4      	ldr	r3, [pc, #784]	; (80147f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80144e4:	ed94 7a02 	vldr	s14, [r4, #8]
 80144e8:	7819      	ldrb	r1, [r3, #0]
 80144ea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80144ee:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80144f2:	2900      	cmp	r1, #0
 80144f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80144f8:	bf16      	itet	ne
 80144fa:	4619      	movne	r1, r3
 80144fc:	4611      	moveq	r1, r2
 80144fe:	4613      	movne	r3, r2
 8014500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014504:	9116      	str	r1, [sp, #88]	; 0x58
 8014506:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801450a:	f240 8387 	bls.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801450e:	ed94 7a07 	vldr	s14, [r4, #28]
 8014512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801451a:	f240 837f 	bls.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801451e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8014522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452a:	f240 8377 	bls.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801452e:	6822      	ldr	r2, [r4, #0]
 8014530:	4bb1      	ldr	r3, [pc, #708]	; (80147f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014532:	429a      	cmp	r2, r3
 8014534:	f2c0 8372 	blt.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014538:	49b0      	ldr	r1, [pc, #704]	; (80147fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801453a:	6963      	ldr	r3, [r4, #20]
 801453c:	428a      	cmp	r2, r1
 801453e:	f300 836d 	bgt.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014542:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014546:	48ae      	ldr	r0, [pc, #696]	; (8014800 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014548:	33ff      	adds	r3, #255	; 0xff
 801454a:	4283      	cmp	r3, r0
 801454c:	f200 8366 	bhi.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014550:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014552:	4dac      	ldr	r5, [pc, #688]	; (8014804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014554:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014558:	33ff      	adds	r3, #255	; 0xff
 801455a:	42ab      	cmp	r3, r5
 801455c:	f200 835e 	bhi.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014560:	6862      	ldr	r2, [r4, #4]
 8014562:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8014566:	33ff      	adds	r3, #255	; 0xff
 8014568:	4283      	cmp	r3, r0
 801456a:	f200 8357 	bhi.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801456e:	69a1      	ldr	r1, [r4, #24]
 8014570:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014574:	33ff      	adds	r3, #255	; 0xff
 8014576:	4283      	cmp	r3, r0
 8014578:	f200 8350 	bhi.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801457c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801457e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8014582:	30ff      	adds	r0, #255	; 0xff
 8014584:	42a8      	cmp	r0, r5
 8014586:	f200 8349 	bhi.w	8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801458a:	428a      	cmp	r2, r1
 801458c:	f280 8110 	bge.w	80147b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014590:	429a      	cmp	r2, r3
 8014592:	f300 8119 	bgt.w	80147c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014596:	4299      	cmp	r1, r3
 8014598:	f280 811d 	bge.w	80147d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801459c:	2502      	movs	r5, #2
 801459e:	2701      	movs	r7, #1
 80145a0:	46a9      	mov	r9, r5
 80145a2:	46b8      	mov	r8, r7
 80145a4:	f04f 0a00 	mov.w	sl, #0
 80145a8:	4621      	mov	r1, r4
 80145aa:	a849      	add	r0, sp, #292	; 0x124
 80145ac:	f003 fda6 	bl	80180fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80145b0:	4622      	mov	r2, r4
 80145b2:	4653      	mov	r3, sl
 80145b4:	a949      	add	r1, sp, #292	; 0x124
 80145b6:	f8cd 9000 	str.w	r9, [sp]
 80145ba:	a819      	add	r0, sp, #100	; 0x64
 80145bc:	f003 fece 	bl	801835c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80145c0:	4622      	mov	r2, r4
 80145c2:	4653      	mov	r3, sl
 80145c4:	a949      	add	r1, sp, #292	; 0x124
 80145c6:	f8cd 8000 	str.w	r8, [sp]
 80145ca:	a829      	add	r0, sp, #164	; 0xa4
 80145cc:	f003 fec6 	bl	801835c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80145d0:	4643      	mov	r3, r8
 80145d2:	4622      	mov	r2, r4
 80145d4:	a949      	add	r1, sp, #292	; 0x124
 80145d6:	f8cd 9000 	str.w	r9, [sp]
 80145da:	a839      	add	r0, sp, #228	; 0xe4
 80145dc:	f003 febe 	bl	801835c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80145e0:	42af      	cmp	r7, r5
 80145e2:	bfb5      	itete	lt
 80145e4:	2300      	movlt	r3, #0
 80145e6:	2301      	movge	r3, #1
 80145e8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80145ea:	930e      	strge	r3, [sp, #56]	; 0x38
 80145ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80145f2:	af12      	add	r7, sp, #72	; 0x48
 80145f4:	bfb9      	ittee	lt
 80145f6:	ad29      	addlt	r5, sp, #164	; 0xa4
 80145f8:	ac19      	addlt	r4, sp, #100	; 0x64
 80145fa:	ad19      	addge	r5, sp, #100	; 0x64
 80145fc:	ac29      	addge	r4, sp, #164	; 0xa4
 80145fe:	e887 0003 	stmia.w	r7, {r0, r1}
 8014602:	b928      	cbnz	r0, 8014610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8014604:	4b80      	ldr	r3, [pc, #512]	; (8014808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8014606:	6818      	ldr	r0, [r3, #0]
 8014608:	6803      	ldr	r3, [r0, #0]
 801460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801460c:	4798      	blx	r3
 801460e:	6038      	str	r0, [r7, #0]
 8014610:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014612:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014616:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801461a:	930c      	str	r3, [sp, #48]	; 0x30
 801461c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801461e:	6963      	ldr	r3, [r4, #20]
 8014620:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014622:	440b      	add	r3, r1
 8014624:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014628:	4408      	add	r0, r1
 801462a:	b200      	sxth	r0, r0
 801462c:	4283      	cmp	r3, r0
 801462e:	900d      	str	r0, [sp, #52]	; 0x34
 8014630:	f280 80dd 	bge.w	80147ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014634:	428b      	cmp	r3, r1
 8014636:	da08      	bge.n	801464a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014638:	2a00      	cmp	r2, #0
 801463a:	dd06      	ble.n	801464a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801463c:	1acb      	subs	r3, r1, r3
 801463e:	429a      	cmp	r2, r3
 8014640:	f2c0 80e4 	blt.w	801480c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014644:	2b00      	cmp	r3, #0
 8014646:	f300 80e2 	bgt.w	801480e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801464a:	6967      	ldr	r7, [r4, #20]
 801464c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801464e:	443b      	add	r3, r7
 8014650:	461f      	mov	r7, r3
 8014652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014654:	1bdf      	subs	r7, r3, r7
 8014656:	4297      	cmp	r7, r2
 8014658:	bfa8      	it	ge
 801465a:	4617      	movge	r7, r2
 801465c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014660:	2f00      	cmp	r7, #0
 8014662:	f340 8166 	ble.w	8014932 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014666:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014668:	6829      	ldr	r1, [r5, #0]
 801466a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801466e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014672:	6820      	ldr	r0, [r4, #0]
 8014674:	4411      	add	r1, r2
 8014676:	4299      	cmp	r1, r3
 8014678:	dd1a      	ble.n	80146b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801467a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801467e:	440b      	add	r3, r1
 8014680:	4402      	add	r2, r0
 8014682:	b21b      	sxth	r3, r3
 8014684:	429a      	cmp	r2, r3
 8014686:	dc13      	bgt.n	80146b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801468a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	9206      	str	r2, [sp, #24]
 8014690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014692:	9205      	str	r2, [sp, #20]
 8014694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014696:	9500      	str	r5, [sp, #0]
 8014698:	e9cd b203 	strd	fp, r2, [sp, #12]
 801469c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801469e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146a0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80146a4:	a912      	add	r1, sp, #72	; 0x48
 80146a6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80146aa:	aa49      	add	r2, sp, #292	; 0x124
 80146ac:	4623      	mov	r3, r4
 80146ae:	47c8      	blx	r9
 80146b0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80146b4:	441a      	add	r2, r3
 80146b6:	6963      	ldr	r3, [r4, #20]
 80146b8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80146bc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80146c0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80146c4:	68a1      	ldr	r1, [r4, #8]
 80146c6:	ed94 6a08 	vldr	s12, [r4, #32]
 80146ca:	6022      	str	r2, [r4, #0]
 80146cc:	3301      	adds	r3, #1
 80146ce:	6163      	str	r3, [r4, #20]
 80146d0:	69a3      	ldr	r3, [r4, #24]
 80146d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80146d6:	3b01      	subs	r3, #1
 80146d8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80146dc:	61a3      	str	r3, [r4, #24]
 80146de:	6923      	ldr	r3, [r4, #16]
 80146e0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80146e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146e8:	edd4 6a07 	vldr	s13, [r4, #28]
 80146ec:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80146f0:	440b      	add	r3, r1
 80146f2:	68e1      	ldr	r1, [r4, #12]
 80146f4:	6123      	str	r3, [r4, #16]
 80146f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80146fa:	428b      	cmp	r3, r1
 80146fc:	edc4 6a07 	vstr	s13, [r4, #28]
 8014700:	db15      	blt.n	801472e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8014702:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014706:	ee76 6a26 	vadd.f32	s13, s12, s13
 801470a:	3201      	adds	r2, #1
 801470c:	edc4 6a07 	vstr	s13, [r4, #28]
 8014710:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014714:	6022      	str	r2, [r4, #0]
 8014716:	ee36 7a87 	vadd.f32	s14, s13, s14
 801471a:	1a5b      	subs	r3, r3, r1
 801471c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014720:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014724:	6123      	str	r3, [r4, #16]
 8014726:	ee77 7a27 	vadd.f32	s15, s14, s15
 801472a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801472e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014732:	441a      	add	r2, r3
 8014734:	696b      	ldr	r3, [r5, #20]
 8014736:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801473a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801473e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014742:	68a9      	ldr	r1, [r5, #8]
 8014744:	ed95 6a08 	vldr	s12, [r5, #32]
 8014748:	602a      	str	r2, [r5, #0]
 801474a:	3301      	adds	r3, #1
 801474c:	616b      	str	r3, [r5, #20]
 801474e:	69ab      	ldr	r3, [r5, #24]
 8014750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014754:	3b01      	subs	r3, #1
 8014756:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801475a:	61ab      	str	r3, [r5, #24]
 801475c:	692b      	ldr	r3, [r5, #16]
 801475e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014766:	edd5 6a07 	vldr	s13, [r5, #28]
 801476a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801476e:	440b      	add	r3, r1
 8014770:	68e9      	ldr	r1, [r5, #12]
 8014772:	612b      	str	r3, [r5, #16]
 8014774:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014778:	428b      	cmp	r3, r1
 801477a:	edc5 6a07 	vstr	s13, [r5, #28]
 801477e:	db15      	blt.n	80147ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014780:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014784:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014788:	3201      	adds	r2, #1
 801478a:	edc5 6a07 	vstr	s13, [r5, #28]
 801478e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014792:	602a      	str	r2, [r5, #0]
 8014794:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014798:	1a5b      	subs	r3, r3, r1
 801479a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801479e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80147a2:	612b      	str	r3, [r5, #16]
 80147a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147a8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80147ac:	3f01      	subs	r7, #1
 80147ae:	e757      	b.n	8014660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80147b0:	4299      	cmp	r1, r3
 80147b2:	dc13      	bgt.n	80147dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80147b4:	429a      	cmp	r2, r3
 80147b6:	da14      	bge.n	80147e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80147b8:	2502      	movs	r5, #2
 80147ba:	2703      	movs	r7, #3
 80147bc:	46a9      	mov	r9, r5
 80147be:	f04f 0800 	mov.w	r8, #0
 80147c2:	f04f 0a01 	mov.w	sl, #1
 80147c6:	e6ef      	b.n	80145a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80147c8:	2501      	movs	r5, #1
 80147ca:	2700      	movs	r7, #0
 80147cc:	46a9      	mov	r9, r5
 80147ce:	46b8      	mov	r8, r7
 80147d0:	f04f 0a02 	mov.w	sl, #2
 80147d4:	e6e8      	b.n	80145a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80147d6:	2501      	movs	r5, #1
 80147d8:	2702      	movs	r7, #2
 80147da:	e6e1      	b.n	80145a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80147dc:	2500      	movs	r5, #0
 80147de:	2701      	movs	r7, #1
 80147e0:	e7f4      	b.n	80147cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80147e2:	2702      	movs	r7, #2
 80147e4:	2503      	movs	r5, #3
 80147e6:	f04f 0900 	mov.w	r9, #0
 80147ea:	46b8      	mov	r8, r7
 80147ec:	e7e9      	b.n	80147c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80147ee:	4613      	mov	r3, r2
 80147f0:	e728      	b.n	8014644 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80147f2:	bf00      	nop
 80147f4:	20025854 	.word	0x20025854
 80147f8:	fffd8f01 	.word	0xfffd8f01
 80147fc:	00027100 	.word	0x00027100
 8014800:	0004e1ff 	.word	0x0004e1ff
 8014804:	0004e1fe 	.word	0x0004e1fe
 8014808:	2002585c 	.word	0x2002585c
 801480c:	4613      	mov	r3, r2
 801480e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014810:	9111      	str	r1, [sp, #68]	; 0x44
 8014812:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8014816:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801481a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801481c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8014820:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014824:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8014828:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801482c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014830:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014834:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8014838:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801483c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014840:	469e      	mov	lr, r3
 8014842:	469c      	mov	ip, r3
 8014844:	f04f 0900 	mov.w	r9, #0
 8014848:	f1bc 0f00 	cmp.w	ip, #0
 801484c:	d147      	bne.n	80148de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801484e:	eb03 0c07 	add.w	ip, r3, r7
 8014852:	1ad7      	subs	r7, r2, r3
 8014854:	f1b9 0f00 	cmp.w	r9, #0
 8014858:	d009      	beq.n	801486e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801485a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801485e:	9029      	str	r0, [sp, #164]	; 0xa4
 8014860:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014864:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014868:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801486c:	912d      	str	r1, [sp, #180]	; 0xb4
 801486e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014870:	9111      	str	r1, [sp, #68]	; 0x44
 8014872:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014876:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801487a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801487e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014882:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014886:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801488a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801488e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014892:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014896:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801489a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801489e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80148a2:	f04f 0800 	mov.w	r8, #0
 80148a6:	f1be 0f00 	cmp.w	lr, #0
 80148aa:	d031      	beq.n	8014910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80148ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80148ae:	4431      	add	r1, r6
 80148b0:	4549      	cmp	r1, r9
 80148b2:	4450      	add	r0, sl
 80148b4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80148b8:	ee37 7a04 	vadd.f32	s14, s14, s8
 80148bc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80148c0:	db08      	blt.n	80148d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80148c2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80148c6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80148ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 80148ce:	3001      	adds	r0, #1
 80148d0:	eba1 0109 	sub.w	r1, r1, r9
 80148d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80148d8:	f04f 0801 	mov.w	r8, #1
 80148dc:	e7e3      	b.n	80148a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80148de:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80148e0:	4431      	add	r1, r6
 80148e2:	4541      	cmp	r1, r8
 80148e4:	4450      	add	r0, sl
 80148e6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80148ea:	ee77 7a84 	vadd.f32	s15, s15, s8
 80148ee:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80148f2:	db08      	blt.n	8014906 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80148f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80148f8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80148fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014900:	3001      	adds	r0, #1
 8014902:	eba1 0108 	sub.w	r1, r1, r8
 8014906:	f10c 3cff 	add.w	ip, ip, #4294967295
 801490a:	f04f 0901 	mov.w	r9, #1
 801490e:	e79b      	b.n	8014848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014910:	449c      	add	ip, r3
 8014912:	1aff      	subs	r7, r7, r3
 8014914:	f1b8 0f00 	cmp.w	r8, #0
 8014918:	d009      	beq.n	801492e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801491a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801491e:	9019      	str	r0, [sp, #100]	; 0x64
 8014920:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014924:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014928:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801492c:	911d      	str	r1, [sp, #116]	; 0x74
 801492e:	1ad2      	subs	r2, r2, r3
 8014930:	e68b      	b.n	801464a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014934:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8014936:	2b00      	cmp	r3, #0
 8014938:	f000 80d1 	beq.w	8014ade <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801493c:	ad19      	add	r5, sp, #100	; 0x64
 801493e:	ac39      	add	r4, sp, #228	; 0xe4
 8014940:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014942:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014946:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801494a:	930c      	str	r3, [sp, #48]	; 0x30
 801494c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801494e:	6963      	ldr	r3, [r4, #20]
 8014950:	440b      	add	r3, r1
 8014952:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014956:	4408      	add	r0, r1
 8014958:	b200      	sxth	r0, r0
 801495a:	4283      	cmp	r3, r0
 801495c:	900d      	str	r0, [sp, #52]	; 0x34
 801495e:	f280 80c1 	bge.w	8014ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8014962:	428b      	cmp	r3, r1
 8014964:	da08      	bge.n	8014978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014966:	2a00      	cmp	r2, #0
 8014968:	dd06      	ble.n	8014978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801496a:	1acb      	subs	r3, r1, r3
 801496c:	429a      	cmp	r2, r3
 801496e:	f2c0 80bb 	blt.w	8014ae8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8014972:	2b00      	cmp	r3, #0
 8014974:	f300 80b9 	bgt.w	8014aea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8014978:	6967      	ldr	r7, [r4, #20]
 801497a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801497c:	443b      	add	r3, r7
 801497e:	461f      	mov	r7, r3
 8014980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014982:	1bdf      	subs	r7, r3, r7
 8014984:	4297      	cmp	r7, r2
 8014986:	bfa8      	it	ge
 8014988:	4617      	movge	r7, r2
 801498a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801498e:	2f00      	cmp	r7, #0
 8014990:	f340 813c 	ble.w	8014c0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014994:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014996:	6829      	ldr	r1, [r5, #0]
 8014998:	f9b3 2000 	ldrsh.w	r2, [r3]
 801499c:	f9bb 3000 	ldrsh.w	r3, [fp]
 80149a0:	6820      	ldr	r0, [r4, #0]
 80149a2:	4411      	add	r1, r2
 80149a4:	4299      	cmp	r1, r3
 80149a6:	dd1a      	ble.n	80149de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80149a8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80149ac:	440b      	add	r3, r1
 80149ae:	4402      	add	r2, r0
 80149b0:	b21b      	sxth	r3, r3
 80149b2:	429a      	cmp	r2, r3
 80149b4:	dc13      	bgt.n	80149de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80149b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	9206      	str	r2, [sp, #24]
 80149be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80149c0:	9205      	str	r2, [sp, #20]
 80149c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149c4:	9500      	str	r5, [sp, #0]
 80149c6:	e9cd b203 	strd	fp, r2, [sp, #12]
 80149ca:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80149cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149ce:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80149d2:	a912      	add	r1, sp, #72	; 0x48
 80149d4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80149d8:	aa49      	add	r2, sp, #292	; 0x124
 80149da:	4623      	mov	r3, r4
 80149dc:	47c8      	blx	r9
 80149de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80149e2:	441a      	add	r2, r3
 80149e4:	6963      	ldr	r3, [r4, #20]
 80149e6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80149ea:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80149ee:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80149f2:	68a1      	ldr	r1, [r4, #8]
 80149f4:	ed94 6a08 	vldr	s12, [r4, #32]
 80149f8:	6022      	str	r2, [r4, #0]
 80149fa:	3301      	adds	r3, #1
 80149fc:	6163      	str	r3, [r4, #20]
 80149fe:	69a3      	ldr	r3, [r4, #24]
 8014a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a04:	3b01      	subs	r3, #1
 8014a06:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014a0a:	61a3      	str	r3, [r4, #24]
 8014a0c:	6923      	ldr	r3, [r4, #16]
 8014a0e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a16:	edd4 6a07 	vldr	s13, [r4, #28]
 8014a1a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014a1e:	440b      	add	r3, r1
 8014a20:	68e1      	ldr	r1, [r4, #12]
 8014a22:	6123      	str	r3, [r4, #16]
 8014a24:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014a28:	428b      	cmp	r3, r1
 8014a2a:	edc4 6a07 	vstr	s13, [r4, #28]
 8014a2e:	db15      	blt.n	8014a5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014a30:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014a34:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014a38:	3201      	adds	r2, #1
 8014a3a:	edc4 6a07 	vstr	s13, [r4, #28]
 8014a3e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014a42:	6022      	str	r2, [r4, #0]
 8014a44:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014a48:	1a5b      	subs	r3, r3, r1
 8014a4a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014a4e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014a52:	6123      	str	r3, [r4, #16]
 8014a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a58:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014a5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014a60:	441a      	add	r2, r3
 8014a62:	696b      	ldr	r3, [r5, #20]
 8014a64:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014a68:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014a6c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014a70:	68a9      	ldr	r1, [r5, #8]
 8014a72:	ed95 6a08 	vldr	s12, [r5, #32]
 8014a76:	602a      	str	r2, [r5, #0]
 8014a78:	3301      	adds	r3, #1
 8014a7a:	616b      	str	r3, [r5, #20]
 8014a7c:	69ab      	ldr	r3, [r5, #24]
 8014a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a82:	3b01      	subs	r3, #1
 8014a84:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014a88:	61ab      	str	r3, [r5, #24]
 8014a8a:	692b      	ldr	r3, [r5, #16]
 8014a8c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a94:	edd5 6a07 	vldr	s13, [r5, #28]
 8014a98:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014a9c:	440b      	add	r3, r1
 8014a9e:	68e9      	ldr	r1, [r5, #12]
 8014aa0:	612b      	str	r3, [r5, #16]
 8014aa2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014aa6:	428b      	cmp	r3, r1
 8014aa8:	edc5 6a07 	vstr	s13, [r5, #28]
 8014aac:	db15      	blt.n	8014ada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8014aae:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014ab2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014ab6:	3201      	adds	r2, #1
 8014ab8:	edc5 6a07 	vstr	s13, [r5, #28]
 8014abc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014ac0:	602a      	str	r2, [r5, #0]
 8014ac2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014ac6:	1a5b      	subs	r3, r3, r1
 8014ac8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014acc:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014ad0:	612b      	str	r3, [r5, #16]
 8014ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ad6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014ada:	3f01      	subs	r7, #1
 8014adc:	e757      	b.n	801498e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8014ade:	ad39      	add	r5, sp, #228	; 0xe4
 8014ae0:	ac19      	add	r4, sp, #100	; 0x64
 8014ae2:	e72d      	b.n	8014940 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8014ae4:	4613      	mov	r3, r2
 8014ae6:	e744      	b.n	8014972 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8014ae8:	4613      	mov	r3, r2
 8014aea:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8014aee:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8014af0:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8014af4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8014af8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8014afc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8014b00:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8014b04:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8014b08:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8014b0c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8014b0e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8014b12:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8014b16:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8014b1a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8014b1e:	960e      	str	r6, [sp, #56]	; 0x38
 8014b20:	469e      	mov	lr, r3
 8014b22:	461f      	mov	r7, r3
 8014b24:	f04f 0900 	mov.w	r9, #0
 8014b28:	2f00      	cmp	r7, #0
 8014b2a:	d146      	bne.n	8014bba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8014b2c:	449c      	add	ip, r3
 8014b2e:	1ad7      	subs	r7, r2, r3
 8014b30:	f1b9 0f00 	cmp.w	r9, #0
 8014b34:	d009      	beq.n	8014b4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8014b36:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8014b3a:	9039      	str	r0, [sp, #228]	; 0xe4
 8014b3c:	913d      	str	r1, [sp, #244]	; 0xf4
 8014b3e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8014b42:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8014b46:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8014b4a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014b4c:	910e      	str	r1, [sp, #56]	; 0x38
 8014b4e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014b52:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014b56:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014b5a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014b5e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014b62:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014b66:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014b6a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014b6e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014b72:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014b76:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014b7a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014b7e:	f04f 0800 	mov.w	r8, #0
 8014b82:	f1be 0f00 	cmp.w	lr, #0
 8014b86:	d030      	beq.n	8014bea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8014b88:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014b8a:	4431      	add	r1, r6
 8014b8c:	4549      	cmp	r1, r9
 8014b8e:	4450      	add	r0, sl
 8014b90:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014b94:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014b98:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014b9c:	db08      	blt.n	8014bb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8014b9e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014ba2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014ba6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014baa:	3001      	adds	r0, #1
 8014bac:	eba1 0109 	sub.w	r1, r1, r9
 8014bb0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014bb4:	f04f 0801 	mov.w	r8, #1
 8014bb8:	e7e3      	b.n	8014b82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8014bba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014bbc:	4431      	add	r1, r6
 8014bbe:	4541      	cmp	r1, r8
 8014bc0:	4450      	add	r0, sl
 8014bc2:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014bc6:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014bca:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014bce:	db08      	blt.n	8014be2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8014bd0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014bd4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014bd8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014bdc:	3001      	adds	r0, #1
 8014bde:	eba1 0108 	sub.w	r1, r1, r8
 8014be2:	3f01      	subs	r7, #1
 8014be4:	f04f 0901 	mov.w	r9, #1
 8014be8:	e79e      	b.n	8014b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8014bea:	449c      	add	ip, r3
 8014bec:	1aff      	subs	r7, r7, r3
 8014bee:	f1b8 0f00 	cmp.w	r8, #0
 8014bf2:	d009      	beq.n	8014c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8014bf4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014bf8:	9019      	str	r0, [sp, #100]	; 0x64
 8014bfa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014bfe:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014c02:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014c06:	911d      	str	r1, [sp, #116]	; 0x74
 8014c08:	1ad2      	subs	r2, r2, r3
 8014c0a:	e6b5      	b.n	8014978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	b923      	cbnz	r3, 8014c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014c12:	4b04      	ldr	r3, [pc, #16]	; (8014c24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8014c14:	6818      	ldr	r0, [r3, #0]
 8014c16:	6803      	ldr	r3, [r0, #0]
 8014c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c1a:	4798      	blx	r3
 8014c1c:	b05b      	add	sp, #364	; 0x16c
 8014c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c22:	bf00      	nop
 8014c24:	2002585c 	.word	0x2002585c

08014c28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8014c28:	b570      	push	{r4, r5, r6, lr}
 8014c2a:	4604      	mov	r4, r0
 8014c2c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8014c30:	9805      	ldr	r0, [sp, #20]
 8014c32:	6061      	str	r1, [r4, #4]
 8014c34:	2500      	movs	r5, #0
 8014c36:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8014c3a:	8263      	strh	r3, [r4, #18]
 8014c3c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014c40:	8025      	strh	r5, [r4, #0]
 8014c42:	7221      	strb	r1, [r4, #8]
 8014c44:	7266      	strb	r6, [r4, #9]
 8014c46:	60e0      	str	r0, [r4, #12]
 8014c48:	8222      	strh	r2, [r4, #16]
 8014c4a:	82a3      	strh	r3, [r4, #20]
 8014c4c:	82e5      	strh	r5, [r4, #22]
 8014c4e:	8325      	strh	r5, [r4, #24]
 8014c50:	8365      	strh	r5, [r4, #26]
 8014c52:	83a5      	strh	r5, [r4, #28]
 8014c54:	83e5      	strh	r5, [r4, #30]
 8014c56:	8425      	strh	r5, [r4, #32]
 8014c58:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8014c5c:	b32e      	cbz	r6, 8014caa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014c5e:	6803      	ldr	r3, [r0, #0]
 8014c60:	695b      	ldr	r3, [r3, #20]
 8014c62:	4798      	blx	r3
 8014c64:	4606      	mov	r6, r0
 8014c66:	b300      	cbz	r0, 8014caa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014c68:	68e0      	ldr	r0, [r4, #12]
 8014c6a:	6803      	ldr	r3, [r0, #0]
 8014c6c:	4631      	mov	r1, r6
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	4798      	blx	r3
 8014c72:	4605      	mov	r5, r0
 8014c74:	b1c8      	cbz	r0, 8014caa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014c76:	7b43      	ldrb	r3, [r0, #13]
 8014c78:	7a82      	ldrb	r2, [r0, #10]
 8014c7a:	005b      	lsls	r3, r3, #1
 8014c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c80:	4313      	orrs	r3, r2
 8014c82:	8423      	strh	r3, [r4, #32]
 8014c84:	7a63      	ldrb	r3, [r4, #9]
 8014c86:	2b06      	cmp	r3, #6
 8014c88:	d10f      	bne.n	8014caa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014c8a:	68e0      	ldr	r0, [r4, #12]
 8014c8c:	6803      	ldr	r3, [r0, #0]
 8014c8e:	462a      	mov	r2, r5
 8014c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c92:	4631      	mov	r1, r6
 8014c94:	4798      	blx	r3
 8014c96:	7b6b      	ldrb	r3, [r5, #13]
 8014c98:	005b      	lsls	r3, r3, #1
 8014c9a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014c9e:	7aab      	ldrb	r3, [r5, #10]
 8014ca0:	4313      	orrs	r3, r2
 8014ca2:	4418      	add	r0, r3
 8014ca4:	8c23      	ldrh	r3, [r4, #32]
 8014ca6:	4418      	add	r0, r3
 8014ca8:	8420      	strh	r0, [r4, #32]
 8014caa:	4620      	mov	r0, r4
 8014cac:	bd70      	pop	{r4, r5, r6, pc}

08014cae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8014cae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb2:	2400      	movs	r4, #0
 8014cb4:	b085      	sub	sp, #20
 8014cb6:	4681      	mov	r9, r0
 8014cb8:	4688      	mov	r8, r1
 8014cba:	4692      	mov	sl, r2
 8014cbc:	469b      	mov	fp, r3
 8014cbe:	4627      	mov	r7, r4
 8014cc0:	4625      	mov	r5, r4
 8014cc2:	4626      	mov	r6, r4
 8014cc4:	4554      	cmp	r4, sl
 8014cc6:	da2a      	bge.n	8014d1e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014cc8:	2300      	movs	r3, #0
 8014cca:	9303      	str	r3, [sp, #12]
 8014ccc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014cd0:	429d      	cmp	r5, r3
 8014cd2:	d004      	beq.n	8014cde <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8014cd4:	f242 030b 	movw	r3, #8203	; 0x200b
 8014cd8:	429d      	cmp	r5, r3
 8014cda:	bf18      	it	ne
 8014cdc:	462f      	movne	r7, r5
 8014cde:	ab03      	add	r3, sp, #12
 8014ce0:	4642      	mov	r2, r8
 8014ce2:	4659      	mov	r1, fp
 8014ce4:	4648      	mov	r0, r9
 8014ce6:	f003 f81f 	bl	8017d28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014cea:	4605      	mov	r5, r0
 8014cec:	b1b8      	cbz	r0, 8014d1e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014cee:	280a      	cmp	r0, #10
 8014cf0:	d015      	beq.n	8014d1e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014cf2:	9a03      	ldr	r2, [sp, #12]
 8014cf4:	b18a      	cbz	r2, 8014d1a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8014cf6:	7b50      	ldrb	r0, [r2, #13]
 8014cf8:	7a93      	ldrb	r3, [r2, #10]
 8014cfa:	8895      	ldrh	r5, [r2, #4]
 8014cfc:	0040      	lsls	r0, r0, #1
 8014cfe:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014d02:	4303      	orrs	r3, r0
 8014d04:	9301      	str	r3, [sp, #4]
 8014d06:	f8d8 3000 	ldr.w	r3, [r8]
 8014d0a:	4639      	mov	r1, r7
 8014d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d0e:	4640      	mov	r0, r8
 8014d10:	4798      	blx	r3
 8014d12:	9b01      	ldr	r3, [sp, #4]
 8014d14:	4418      	add	r0, r3
 8014d16:	4406      	add	r6, r0
 8014d18:	b2b6      	uxth	r6, r6
 8014d1a:	3401      	adds	r4, #1
 8014d1c:	e7d2      	b.n	8014cc4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8014d1e:	4630      	mov	r0, r6
 8014d20:	b005      	add	sp, #20
 8014d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d26 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8014d26:	2a02      	cmp	r2, #2
 8014d28:	b530      	push	{r4, r5, lr}
 8014d2a:	d011      	beq.n	8014d50 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8014d2c:	2a03      	cmp	r2, #3
 8014d2e:	d01c      	beq.n	8014d6a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8014d30:	2a01      	cmp	r2, #1
 8014d32:	d10c      	bne.n	8014d4e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014d34:	888b      	ldrh	r3, [r1, #4]
 8014d36:	8801      	ldrh	r1, [r0, #0]
 8014d38:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014d3c:	8844      	ldrh	r4, [r0, #2]
 8014d3e:	8004      	strh	r4, [r0, #0]
 8014d40:	1a5b      	subs	r3, r3, r1
 8014d42:	1a9b      	subs	r3, r3, r2
 8014d44:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014d48:	8043      	strh	r3, [r0, #2]
 8014d4a:	8081      	strh	r1, [r0, #4]
 8014d4c:	80c2      	strh	r2, [r0, #6]
 8014d4e:	bd30      	pop	{r4, r5, pc}
 8014d50:	88cb      	ldrh	r3, [r1, #6]
 8014d52:	8842      	ldrh	r2, [r0, #2]
 8014d54:	1a9b      	subs	r3, r3, r2
 8014d56:	88c2      	ldrh	r2, [r0, #6]
 8014d58:	1a9b      	subs	r3, r3, r2
 8014d5a:	888a      	ldrh	r2, [r1, #4]
 8014d5c:	8801      	ldrh	r1, [r0, #0]
 8014d5e:	8043      	strh	r3, [r0, #2]
 8014d60:	1a52      	subs	r2, r2, r1
 8014d62:	8881      	ldrh	r1, [r0, #4]
 8014d64:	1a52      	subs	r2, r2, r1
 8014d66:	8002      	strh	r2, [r0, #0]
 8014d68:	e7f1      	b.n	8014d4e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014d6a:	88cb      	ldrh	r3, [r1, #6]
 8014d6c:	8841      	ldrh	r1, [r0, #2]
 8014d6e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014d72:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014d76:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014d7a:	8045      	strh	r5, [r0, #2]
 8014d7c:	1a5b      	subs	r3, r3, r1
 8014d7e:	1a9b      	subs	r3, r3, r2
 8014d80:	8003      	strh	r3, [r0, #0]
 8014d82:	8082      	strh	r2, [r0, #4]
 8014d84:	80c4      	strh	r4, [r0, #6]
 8014d86:	e7e2      	b.n	8014d4e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08014d88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8014d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d8c:	b09f      	sub	sp, #124	; 0x7c
 8014d8e:	9116      	str	r1, [sp, #88]	; 0x58
 8014d90:	9317      	str	r3, [sp, #92]	; 0x5c
 8014d92:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014d94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014d96:	8809      	ldrh	r1, [r1, #0]
 8014d98:	889b      	ldrh	r3, [r3, #4]
 8014d9a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8014d9e:	9212      	str	r2, [sp, #72]	; 0x48
 8014da0:	440b      	add	r3, r1
 8014da2:	b21b      	sxth	r3, r3
 8014da4:	9310      	str	r3, [sp, #64]	; 0x40
 8014da6:	f8d8 3000 	ldr.w	r3, [r8]
 8014daa:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8014dae:	7b19      	ldrb	r1, [r3, #12]
 8014db0:	7adb      	ldrb	r3, [r3, #11]
 8014db2:	9011      	str	r0, [sp, #68]	; 0x44
 8014db4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8014db8:	9114      	str	r1, [sp, #80]	; 0x50
 8014dba:	9315      	str	r3, [sp, #84]	; 0x54
 8014dbc:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8014dc0:	2a00      	cmp	r2, #0
 8014dc2:	d06a      	beq.n	8014e9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8014dc4:	f898 3010 	ldrb.w	r3, [r8, #16]
 8014dc8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014dca:	2b06      	cmp	r3, #6
 8014dcc:	bf14      	ite	ne
 8014dce:	2301      	movne	r3, #1
 8014dd0:	2302      	moveq	r3, #2
 8014dd2:	4413      	add	r3, r2
 8014dd4:	f04f 0900 	mov.w	r9, #0
 8014dd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014dda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014dde:	464c      	mov	r4, r9
 8014de0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8014de4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8014de8:	4293      	cmp	r3, r2
 8014dea:	f280 808f 	bge.w	8014f0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014dee:	2300      	movs	r3, #0
 8014df0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8014df4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8014df8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014dfc:	429c      	cmp	r4, r3
 8014dfe:	d006      	beq.n	8014e0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8014e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e02:	f242 020b 	movw	r2, #8203	; 0x200b
 8014e06:	4294      	cmp	r4, r2
 8014e08:	bf18      	it	ne
 8014e0a:	4623      	movne	r3, r4
 8014e0c:	930d      	str	r3, [sp, #52]	; 0x34
 8014e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e10:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8014e12:	f8d8 2000 	ldr.w	r2, [r8]
 8014e16:	428b      	cmp	r3, r1
 8014e18:	db41      	blt.n	8014e9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8014e1a:	6813      	ldr	r3, [r2, #0]
 8014e1c:	4610      	mov	r0, r2
 8014e1e:	695b      	ldr	r3, [r3, #20]
 8014e20:	4798      	blx	r3
 8014e22:	4604      	mov	r4, r0
 8014e24:	f8d8 0000 	ldr.w	r0, [r8]
 8014e28:	6803      	ldr	r3, [r0, #0]
 8014e2a:	aa1d      	add	r2, sp, #116	; 0x74
 8014e2c:	689d      	ldr	r5, [r3, #8]
 8014e2e:	4621      	mov	r1, r4
 8014e30:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014e34:	47a8      	blx	r5
 8014e36:	901c      	str	r0, [sp, #112]	; 0x70
 8014e38:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014e3c:	429c      	cmp	r4, r3
 8014e3e:	f000 80eb 	beq.w	8015018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014e42:	f242 030b 	movw	r3, #8203	; 0x200b
 8014e46:	429c      	cmp	r4, r3
 8014e48:	f000 80e6 	beq.w	8015018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014e4c:	2c00      	cmp	r4, #0
 8014e4e:	f000 80f8 	beq.w	8015042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8014e52:	2c0a      	cmp	r4, #10
 8014e54:	d060      	beq.n	8014f18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014e56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014e58:	b36a      	cbz	r2, 8014eb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8014e5a:	8894      	ldrh	r4, [r2, #4]
 8014e5c:	f1bb 0f00 	cmp.w	fp, #0
 8014e60:	d03b      	beq.n	8014eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8014e62:	f892 900d 	ldrb.w	r9, [r2, #13]
 8014e66:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8014e6a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8014e6e:	f892 900a 	ldrb.w	r9, [r2, #10]
 8014e72:	f1bb 0f01 	cmp.w	fp, #1
 8014e76:	ea49 0903 	orr.w	r9, r9, r3
 8014e7a:	d134      	bne.n	8014ee6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8014e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e7e:	eba6 0609 	sub.w	r6, r6, r9
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d14f      	bne.n	8014f26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014e86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e88:	eb09 0306 	add.w	r3, r9, r6
 8014e8c:	4413      	add	r3, r2
 8014e8e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014e90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014e94:	4293      	cmp	r3, r2
 8014e96:	da51      	bge.n	8014f3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014e98:	e038      	b.n	8014f0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014e9a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014e9c:	e79a      	b.n	8014dd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8014e9e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014ea2:	9301      	str	r3, [sp, #4]
 8014ea4:	ab1d      	add	r3, sp, #116	; 0x74
 8014ea6:	9300      	str	r3, [sp, #0]
 8014ea8:	4659      	mov	r1, fp
 8014eaa:	ab1c      	add	r3, sp, #112	; 0x70
 8014eac:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014eae:	f002 ff84 	bl	8017dba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	e7c0      	b.n	8014e38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8014eb6:	f8d8 0000 	ldr.w	r0, [r8]
 8014eba:	6803      	ldr	r3, [r0, #0]
 8014ebc:	691b      	ldr	r3, [r3, #16]
 8014ebe:	4798      	blx	r3
 8014ec0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014ec4:	4298      	cmp	r0, r3
 8014ec6:	f000 80a7 	beq.w	8015018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014eca:	f242 030b 	movw	r3, #8203	; 0x200b
 8014ece:	4298      	cmp	r0, r3
 8014ed0:	f000 80a2 	beq.w	8015018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014ed4:	f1bb 0f00 	cmp.w	fp, #0
 8014ed8:	d100      	bne.n	8014edc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8014eda:	444e      	add	r6, r9
 8014edc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014ede:	2a00      	cmp	r2, #0
 8014ee0:	d1bf      	bne.n	8014e62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014ee2:	4691      	mov	r9, r2
 8014ee4:	e098      	b.n	8015018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	f000 80ac 	beq.w	8015046 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2be>
 8014eee:	f1bb 0f00 	cmp.w	fp, #0
 8014ef2:	d118      	bne.n	8014f26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014ef4:	f8d8 0000 	ldr.w	r0, [r8]
 8014ef8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014efa:	6803      	ldr	r3, [r0, #0]
 8014efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014efe:	4798      	blx	r3
 8014f00:	4406      	add	r6, r0
 8014f02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f06:	1af3      	subs	r3, r6, r3
 8014f08:	4293      	cmp	r3, r2
 8014f0a:	dd17      	ble.n	8014f3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014f0c:	2c00      	cmp	r4, #0
 8014f0e:	f000 8098 	beq.w	8015042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8014f12:	2c0a      	cmp	r4, #10
 8014f14:	f040 8086 	bne.w	8015024 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8014f18:	240a      	movs	r4, #10
 8014f1a:	fab4 f084 	clz	r0, r4
 8014f1e:	0940      	lsrs	r0, r0, #5
 8014f20:	b01f      	add	sp, #124	; 0x7c
 8014f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f26:	f8d8 0000 	ldr.w	r0, [r8]
 8014f2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014f2c:	6803      	ldr	r3, [r0, #0]
 8014f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f30:	4798      	blx	r3
 8014f32:	f1bb 0f01 	cmp.w	fp, #1
 8014f36:	eba6 0600 	sub.w	r6, r6, r0
 8014f3a:	d0a4      	beq.n	8014e86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8014f3c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014f3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014f40:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014f44:	f9b3 7000 	ldrsh.w	r7, [r3]
 8014f48:	7b43      	ldrb	r3, [r0, #13]
 8014f4a:	015b      	lsls	r3, r3, #5
 8014f4c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014f50:	7983      	ldrb	r3, [r0, #6]
 8014f52:	4431      	add	r1, r6
 8014f54:	4313      	orrs	r3, r2
 8014f56:	440b      	add	r3, r1
 8014f58:	42bb      	cmp	r3, r7
 8014f5a:	db5d      	blt.n	8015018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f5e:	4299      	cmp	r1, r3
 8014f60:	da5a      	bge.n	8015018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014f62:	f8d8 0000 	ldr.w	r0, [r8]
 8014f66:	6803      	ldr	r3, [r0, #0]
 8014f68:	42b7      	cmp	r7, r6
 8014f6a:	bfc8      	it	gt
 8014f6c:	1bbf      	subgt	r7, r7, r6
 8014f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f70:	bfcc      	ite	gt
 8014f72:	b2bf      	uxthgt	r7, r7
 8014f74:	2700      	movle	r7, #0
 8014f76:	4798      	blx	r3
 8014f78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014f7a:	7b5a      	ldrb	r2, [r3, #13]
 8014f7c:	00d1      	lsls	r1, r2, #3
 8014f7e:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8014f82:	7a19      	ldrb	r1, [r3, #8]
 8014f84:	4329      	orrs	r1, r5
 8014f86:	0655      	lsls	r5, r2, #25
 8014f88:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014f8a:	bf44      	itt	mi
 8014f8c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8014f90:	b209      	sxthmi	r1, r1
 8014f92:	1945      	adds	r5, r0, r5
 8014f94:	1a6d      	subs	r5, r5, r1
 8014f96:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014f98:	b2ad      	uxth	r5, r5
 8014f9a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014f9e:	fa0f fa85 	sxth.w	sl, r5
 8014fa2:	4551      	cmp	r1, sl
 8014fa4:	dd3c      	ble.n	8015020 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8014fa6:	0112      	lsls	r2, r2, #4
 8014fa8:	79d8      	ldrb	r0, [r3, #7]
 8014faa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014fae:	4302      	orrs	r2, r0
 8014fb0:	4492      	add	sl, r2
 8014fb2:	4551      	cmp	r1, sl
 8014fb4:	dc30      	bgt.n	8015018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014fb6:	1b4d      	subs	r5, r1, r5
 8014fb8:	b22d      	sxth	r5, r5
 8014fba:	468a      	mov	sl, r1
 8014fbc:	9319      	str	r3, [sp, #100]	; 0x64
 8014fbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014fc0:	f8d8 0000 	ldr.w	r0, [r8]
 8014fc4:	681a      	ldr	r2, [r3, #0]
 8014fc6:	6801      	ldr	r1, [r0, #0]
 8014fc8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014fca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014fcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8014fce:	9218      	str	r2, [sp, #96]	; 0x60
 8014fd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014fd2:	4788      	blx	r1
 8014fd4:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014fd8:	910b      	str	r1, [sp, #44]	; 0x2c
 8014fda:	f898 100e 	ldrb.w	r1, [r8, #14]
 8014fde:	910a      	str	r1, [sp, #40]	; 0x28
 8014fe0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8014fe4:	9109      	str	r1, [sp, #36]	; 0x24
 8014fe6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014fea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014fec:	9305      	str	r3, [sp, #20]
 8014fee:	b2ad      	uxth	r5, r5
 8014ff0:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8014ff4:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8014ff8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014ffa:	9304      	str	r3, [sp, #16]
 8014ffc:	4437      	add	r7, r6
 8014ffe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015002:	9206      	str	r2, [sp, #24]
 8015004:	b23f      	sxth	r7, r7
 8015006:	f8cd a004 	str.w	sl, [sp, #4]
 801500a:	9700      	str	r7, [sp, #0]
 801500c:	681a      	ldr	r2, [r3, #0]
 801500e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015014:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015016:	47a8      	blx	r5
 8015018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801501a:	3301      	adds	r3, #1
 801501c:	930e      	str	r3, [sp, #56]	; 0x38
 801501e:	e6e1      	b.n	8014de4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8015020:	2500      	movs	r5, #0
 8015022:	e7cb      	b.n	8014fbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8015024:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015026:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015028:	3501      	adds	r5, #1
 801502a:	429d      	cmp	r5, r3
 801502c:	f6bf af75 	bge.w	8014f1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8015030:	4659      	mov	r1, fp
 8015032:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015034:	f7fa ff96 	bl	800ff64 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015038:	4604      	mov	r4, r0
 801503a:	b110      	cbz	r0, 8015042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 801503c:	280a      	cmp	r0, #10
 801503e:	d1f2      	bne.n	8015026 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8015040:	e76a      	b.n	8014f18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8015042:	2400      	movs	r4, #0
 8015044:	e769      	b.n	8014f1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8015046:	f1bb 0f00 	cmp.w	fp, #0
 801504a:	f43f af5a 	beq.w	8014f02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801504e:	e775      	b.n	8014f3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08015050 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015050:	b530      	push	{r4, r5, lr}
 8015052:	8ac4      	ldrh	r4, [r0, #22]
 8015054:	8b45      	ldrh	r5, [r0, #26]
 8015056:	8343      	strh	r3, [r0, #26]
 8015058:	442c      	add	r4, r5
 801505a:	1ae4      	subs	r4, r4, r3
 801505c:	82c4      	strh	r4, [r0, #22]
 801505e:	8b83      	ldrh	r3, [r0, #28]
 8015060:	8b04      	ldrh	r4, [r0, #24]
 8015062:	4422      	add	r2, r4
 8015064:	440c      	add	r4, r1
 8015066:	1a59      	subs	r1, r3, r1
 8015068:	83c2      	strh	r2, [r0, #30]
 801506a:	8304      	strh	r4, [r0, #24]
 801506c:	8381      	strh	r1, [r0, #28]
 801506e:	bd30      	pop	{r4, r5, pc}

08015070 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8015070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015074:	4604      	mov	r4, r0
 8015076:	8a47      	ldrh	r7, [r0, #18]
 8015078:	68c0      	ldr	r0, [r0, #12]
 801507a:	6803      	ldr	r3, [r0, #0]
 801507c:	b085      	sub	sp, #20
 801507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015080:	4798      	blx	r3
 8015082:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8015086:	7a63      	ldrb	r3, [r4, #9]
 8015088:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801508c:	42b7      	cmp	r7, r6
 801508e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015092:	bfac      	ite	ge
 8015094:	f04f 0900 	movge.w	r9, #0
 8015098:	f04f 0901 	movlt.w	r9, #1
 801509c:	2b05      	cmp	r3, #5
 801509e:	d804      	bhi.n	80150aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 80150a0:	e8df f003 	tbb	[pc, r3]
 80150a4:	470e0854 	.word	0x470e0854
 80150a8:	4c4c      	.short	0x4c4c
 80150aa:	2500      	movs	r5, #0
 80150ac:	46a9      	mov	r9, r5
 80150ae:	462e      	mov	r6, r5
 80150b0:	462f      	mov	r7, r5
 80150b2:	e00d      	b.n	80150d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80150b4:	42b7      	cmp	r7, r6
 80150b6:	bfb4      	ite	lt
 80150b8:	2600      	movlt	r6, #0
 80150ba:	2601      	movge	r6, #1
 80150bc:	2500      	movs	r5, #0
 80150be:	e7f7      	b.n	80150b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 80150c0:	42b7      	cmp	r7, r6
 80150c2:	464d      	mov	r5, r9
 80150c4:	f04f 0900 	mov.w	r9, #0
 80150c8:	bfb4      	ite	lt
 80150ca:	2600      	movlt	r6, #0
 80150cc:	2601      	movge	r6, #1
 80150ce:	464f      	mov	r7, r9
 80150d0:	f04f 0800 	mov.w	r8, #0
 80150d4:	f8a4 8016 	strh.w	r8, [r4, #22]
 80150d8:	f8a4 8018 	strh.w	r8, [r4, #24]
 80150dc:	f8cd 8004 	str.w	r8, [sp, #4]
 80150e0:	2300      	movs	r3, #0
 80150e2:	9303      	str	r3, [sp, #12]
 80150e4:	8823      	ldrh	r3, [r4, #0]
 80150e6:	2b20      	cmp	r3, #32
 80150e8:	d034      	beq.n	8015154 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 80150ea:	f242 010b 	movw	r1, #8203	; 0x200b
 80150ee:	1a5a      	subs	r2, r3, r1
 80150f0:	f1d2 0a00 	rsbs	sl, r2, #0
 80150f4:	eb4a 0a02 	adc.w	sl, sl, r2
 80150f8:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80150fc:	4293      	cmp	r3, r2
 80150fe:	d009      	beq.n	8015114 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 8015100:	428b      	cmp	r3, r1
 8015102:	9a01      	ldr	r2, [sp, #4]
 8015104:	bf18      	it	ne
 8015106:	461a      	movne	r2, r3
 8015108:	9201      	str	r2, [sp, #4]
 801510a:	bf0c      	ite	eq
 801510c:	f04f 0a01 	moveq.w	sl, #1
 8015110:	f04f 0a00 	movne.w	sl, #0
 8015114:	ab03      	add	r3, sp, #12
 8015116:	68e2      	ldr	r2, [r4, #12]
 8015118:	7a21      	ldrb	r1, [r4, #8]
 801511a:	6860      	ldr	r0, [r4, #4]
 801511c:	f002 fe04 	bl	8017d28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015120:	8020      	strh	r0, [r4, #0]
 8015122:	b9d8      	cbnz	r0, 801515c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 8015124:	8ba2      	ldrh	r2, [r4, #28]
 8015126:	2300      	movs	r3, #0
 8015128:	4611      	mov	r1, r2
 801512a:	4620      	mov	r0, r4
 801512c:	f7ff ff90 	bl	8015050 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015130:	e06e      	b.n	8015210 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 8015132:	2500      	movs	r5, #0
 8015134:	46a9      	mov	r9, r5
 8015136:	462e      	mov	r6, r5
 8015138:	2701      	movs	r7, #1
 801513a:	e7c9      	b.n	80150d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801513c:	42b7      	cmp	r7, r6
 801513e:	f04f 0500 	mov.w	r5, #0
 8015142:	bfb4      	ite	lt
 8015144:	2700      	movlt	r7, #0
 8015146:	2701      	movge	r7, #1
 8015148:	462e      	mov	r6, r5
 801514a:	e7c1      	b.n	80150d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801514c:	2500      	movs	r5, #0
 801514e:	46a9      	mov	r9, r5
 8015150:	2601      	movs	r6, #1
 8015152:	e7ad      	b.n	80150b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8015154:	9301      	str	r3, [sp, #4]
 8015156:	f04f 0a01 	mov.w	sl, #1
 801515a:	e7db      	b.n	8015114 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 801515c:	8b63      	ldrh	r3, [r4, #26]
 801515e:	280a      	cmp	r0, #10
 8015160:	f103 0301 	add.w	r3, r3, #1
 8015164:	8363      	strh	r3, [r4, #26]
 8015166:	d0dd      	beq.n	8015124 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 8015168:	9a03      	ldr	r2, [sp, #12]
 801516a:	bb62      	cbnz	r2, 80151c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 801516c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015170:	4298      	cmp	r0, r3
 8015172:	d003      	beq.n	801517c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 8015174:	f242 030b 	movw	r3, #8203	; 0x200b
 8015178:	4298      	cmp	r0, r3
 801517a:	d1b1      	bne.n	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801517c:	8823      	ldrh	r3, [r4, #0]
 801517e:	8ba1      	ldrh	r1, [r4, #28]
 8015180:	2b20      	cmp	r3, #32
 8015182:	d003      	beq.n	801518c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 8015184:	f242 000b 	movw	r0, #8203	; 0x200b
 8015188:	4283      	cmp	r3, r0
 801518a:	d131      	bne.n	80151f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 801518c:	f1ba 0f00 	cmp.w	sl, #0
 8015190:	bf0a      	itet	eq
 8015192:	4688      	moveq	r8, r1
 8015194:	4650      	movne	r0, sl
 8015196:	2001      	moveq	r0, #1
 8015198:	440a      	add	r2, r1
 801519a:	8b23      	ldrh	r3, [r4, #24]
 801519c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80151a0:	b292      	uxth	r2, r2
 80151a2:	83a2      	strh	r2, [r4, #28]
 80151a4:	4413      	add	r3, r2
 80151a6:	f1b9 0f00 	cmp.w	r9, #0
 80151aa:	d102      	bne.n	80151b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 80151ac:	2d00      	cmp	r5, #0
 80151ae:	d042      	beq.n	8015236 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 80151b0:	b300      	cbz	r0, 80151f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 80151b2:	8c21      	ldrh	r1, [r4, #32]
 80151b4:	4419      	add	r1, r3
 80151b6:	458c      	cmp	ip, r1
 80151b8:	da37      	bge.n	801522a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 80151ba:	8ae1      	ldrh	r1, [r4, #22]
 80151bc:	2900      	cmp	r1, #0
 80151be:	d034      	beq.n	801522a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 80151c0:	4563      	cmp	r3, ip
 80151c2:	dd8d      	ble.n	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80151c4:	e01d      	b.n	8015202 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 80151c6:	8893      	ldrh	r3, [r2, #4]
 80151c8:	8023      	strh	r3, [r4, #0]
 80151ca:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80151ce:	9901      	ldr	r1, [sp, #4]
 80151d0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80151d4:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 80151d8:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80151dc:	ea4b 0b00 	orr.w	fp, fp, r0
 80151e0:	68e0      	ldr	r0, [r4, #12]
 80151e2:	6803      	ldr	r3, [r0, #0]
 80151e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151e6:	4798      	blx	r3
 80151e8:	eb0b 0200 	add.w	r2, fp, r0
 80151ec:	b292      	uxth	r2, r2
 80151ee:	e7c5      	b.n	801517c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 80151f0:	2000      	movs	r0, #0
 80151f2:	e7d1      	b.n	8015198 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 80151f4:	4563      	cmp	r3, ip
 80151f6:	f77f af73 	ble.w	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80151fa:	8ae3      	ldrh	r3, [r4, #22]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	f43f af6f 	beq.w	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015202:	2301      	movs	r3, #1
 8015204:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8015208:	8c22      	ldrh	r2, [r4, #32]
 801520a:	8be3      	ldrh	r3, [r4, #30]
 801520c:	4413      	add	r3, r2
 801520e:	83e3      	strh	r3, [r4, #30]
 8015210:	68e0      	ldr	r0, [r4, #12]
 8015212:	6803      	ldr	r3, [r0, #0]
 8015214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015216:	4798      	blx	r3
 8015218:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801521c:	4418      	add	r0, r3
 801521e:	8a63      	ldrh	r3, [r4, #18]
 8015220:	1a18      	subs	r0, r3, r0
 8015222:	8260      	strh	r0, [r4, #18]
 8015224:	b005      	add	sp, #20
 8015226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801522a:	2300      	movs	r3, #0
 801522c:	4611      	mov	r1, r2
 801522e:	4620      	mov	r0, r4
 8015230:	f7ff ff0e 	bl	8015050 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015234:	e754      	b.n	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015236:	4563      	cmp	r3, ip
 8015238:	dd14      	ble.n	8015264 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 801523a:	b117      	cbz	r7, 8015242 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 801523c:	2301      	movs	r3, #1
 801523e:	460a      	mov	r2, r1
 8015240:	e772      	b.n	8015128 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8015242:	2e00      	cmp	r6, #0
 8015244:	f43f af4c 	beq.w	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015248:	2800      	cmp	r0, #0
 801524a:	f47f af49 	bne.w	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801524e:	f1ba 0f00 	cmp.w	sl, #0
 8015252:	d002      	beq.n	801525a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 8015254:	2301      	movs	r3, #1
 8015256:	4642      	mov	r2, r8
 8015258:	e767      	b.n	801512a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 801525a:	8ae3      	ldrh	r3, [r4, #22]
 801525c:	2b00      	cmp	r3, #0
 801525e:	f43f af3f 	beq.w	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015262:	e7d5      	b.n	8015210 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 8015264:	2800      	cmp	r0, #0
 8015266:	f47f af3b 	bne.w	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801526a:	f1ba 0f00 	cmp.w	sl, #0
 801526e:	f43f af37 	beq.w	80150e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015272:	2301      	movs	r3, #1
 8015274:	4642      	mov	r2, r8
 8015276:	e7da      	b.n	801522e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

08015278 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801527a:	4605      	mov	r5, r0
 801527c:	b08f      	sub	sp, #60	; 0x3c
 801527e:	4617      	mov	r7, r2
 8015280:	461c      	mov	r4, r3
 8015282:	460e      	mov	r6, r1
 8015284:	b1d1      	cbz	r1, 80152bc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	4620      	mov	r0, r4
 801528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801528c:	4798      	blx	r3
 801528e:	4240      	negs	r0, r0
 8015290:	b200      	sxth	r0, r0
 8015292:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015296:	9603      	str	r6, [sp, #12]
 8015298:	9700      	str	r7, [sp, #0]
 801529a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801529e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80152a2:	4629      	mov	r1, r5
 80152a4:	a805      	add	r0, sp, #20
 80152a6:	f7ff fcbf 	bl	8014c28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80152aa:	2401      	movs	r4, #1
 80152ac:	a805      	add	r0, sp, #20
 80152ae:	f7ff fedf 	bl	8015070 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80152b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80152b6:	b163      	cbz	r3, 80152d2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80152b8:	3401      	adds	r4, #1
 80152ba:	e7f7      	b.n	80152ac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80152bc:	f002 fe02 	bl	8017ec4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80152c0:	2401      	movs	r4, #1
 80152c2:	280a      	cmp	r0, #10
 80152c4:	4628      	mov	r0, r5
 80152c6:	bf08      	it	eq
 80152c8:	3401      	addeq	r4, #1
 80152ca:	f002 fdfb 	bl	8017ec4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80152ce:	2800      	cmp	r0, #0
 80152d0:	d1f7      	bne.n	80152c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80152d2:	b2a0      	uxth	r0, r4
 80152d4:	b00f      	add	sp, #60	; 0x3c
 80152d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080152d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80152d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152dc:	b0e3      	sub	sp, #396	; 0x18c
 80152de:	461c      	mov	r4, r3
 80152e0:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 80152e2:	4683      	mov	fp, r0
 80152e4:	4688      	mov	r8, r1
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	f000 8112 	beq.w	8015510 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80152ec:	6823      	ldr	r3, [r4, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	f000 810e 	beq.w	8015510 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80152f4:	7ba3      	ldrb	r3, [r4, #14]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	f000 810a 	beq.w	8015510 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80152fc:	6810      	ldr	r0, [r2, #0]
 80152fe:	6851      	ldr	r1, [r2, #4]
 8015300:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015304:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015308:	ad0a      	add	r5, sp, #40	; 0x28
 801530a:	462b      	mov	r3, r5
 801530c:	c303      	stmia	r3!, {r0, r1}
 801530e:	2100      	movs	r1, #0
 8015310:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015314:	910c      	str	r1, [sp, #48]	; 0x30
 8015316:	79a2      	ldrb	r2, [r4, #6]
 8015318:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801531c:	a90c      	add	r1, sp, #48	; 0x30
 801531e:	4628      	mov	r0, r5
 8015320:	f7ff fd01 	bl	8014d26 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015324:	a90c      	add	r1, sp, #48	; 0x30
 8015326:	4608      	mov	r0, r1
 8015328:	79a2      	ldrb	r2, [r4, #6]
 801532a:	f7ff fcfc 	bl	8014d26 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801532e:	a817      	add	r0, sp, #92	; 0x5c
 8015330:	f002 f99d 	bl	801766e <_ZN8touchgfx12TextProviderC1Ev>
 8015334:	6820      	ldr	r0, [r4, #0]
 8015336:	6803      	ldr	r3, [r0, #0]
 8015338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801533a:	4798      	blx	r3
 801533c:	4606      	mov	r6, r0
 801533e:	6820      	ldr	r0, [r4, #0]
 8015340:	6803      	ldr	r3, [r0, #0]
 8015342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015344:	4798      	blx	r3
 8015346:	4633      	mov	r3, r6
 8015348:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801534a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801534c:	9000      	str	r0, [sp, #0]
 801534e:	a817      	add	r0, sp, #92	; 0x5c
 8015350:	f002 f9e8 	bl	8017724 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015354:	6820      	ldr	r0, [r4, #0]
 8015356:	f894 a004 	ldrb.w	sl, [r4, #4]
 801535a:	6803      	ldr	r3, [r0, #0]
 801535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801535e:	4798      	blx	r3
 8015360:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015364:	6823      	ldr	r3, [r4, #0]
 8015366:	4607      	mov	r7, r0
 8015368:	4406      	add	r6, r0
 801536a:	a830      	add	r0, sp, #192	; 0xc0
 801536c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8015370:	f002 f97d 	bl	801766e <_ZN8touchgfx12TextProviderC1Ev>
 8015374:	7c23      	ldrb	r3, [r4, #16]
 8015376:	b17b      	cbz	r3, 8015398 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015378:	6820      	ldr	r0, [r4, #0]
 801537a:	6803      	ldr	r3, [r0, #0]
 801537c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801537e:	4798      	blx	r3
 8015380:	9009      	str	r0, [sp, #36]	; 0x24
 8015382:	6820      	ldr	r0, [r4, #0]
 8015384:	6802      	ldr	r2, [r0, #0]
 8015386:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015388:	4790      	blx	r2
 801538a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801538c:	9000      	str	r0, [sp, #0]
 801538e:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8015390:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015392:	a830      	add	r0, sp, #192	; 0xc0
 8015394:	f002 f9c6 	bl	8017724 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015398:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801539c:	7be2      	ldrb	r2, [r4, #15]
 801539e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80153a2:	1a8a      	subs	r2, r1, r2
 80153a4:	7c21      	ldrb	r1, [r4, #16]
 80153a6:	9103      	str	r1, [sp, #12]
 80153a8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80153ac:	9102      	str	r1, [sp, #8]
 80153ae:	6821      	ldr	r1, [r4, #0]
 80153b0:	9101      	str	r1, [sp, #4]
 80153b2:	7961      	ldrb	r1, [r4, #5]
 80153b4:	9100      	str	r1, [sp, #0]
 80153b6:	b292      	uxth	r2, r2
 80153b8:	a930      	add	r1, sp, #192	; 0xc0
 80153ba:	a80e      	add	r0, sp, #56	; 0x38
 80153bc:	f7ff fc34 	bl	8014c28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80153c0:	2e00      	cmp	r6, #0
 80153c2:	dc5b      	bgt.n	801547c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80153c4:	af17      	add	r7, sp, #92	; 0x5c
 80153c6:	f04f 0900 	mov.w	r9, #0
 80153ca:	7c23      	ldrb	r3, [r4, #16]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	f000 80b1 	beq.w	8015534 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80153d2:	a80e      	add	r0, sp, #56	; 0x38
 80153d4:	f7ff fe4c 	bl	8015070 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80153d8:	f1ba 0f00 	cmp.w	sl, #0
 80153dc:	f000 80a5 	beq.w	801552a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80153e0:	7c23      	ldrb	r3, [r4, #16]
 80153e2:	9309      	str	r3, [sp, #36]	; 0x24
 80153e4:	2264      	movs	r2, #100	; 0x64
 80153e6:	4639      	mov	r1, r7
 80153e8:	a849      	add	r0, sp, #292	; 0x124
 80153ea:	f011 fc00 	bl	8026bee <memcpy>
 80153ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	f000 80a7 	beq.w	8015544 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80153f6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80153fa:	7922      	ldrb	r2, [r4, #4]
 80153fc:	2a01      	cmp	r2, #1
 80153fe:	f040 808a 	bne.w	8015516 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8015402:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8015406:	1ac0      	subs	r0, r0, r3
 8015408:	2302      	movs	r3, #2
 801540a:	fb90 f0f3 	sdiv	r0, r0, r3
 801540e:	b200      	sxth	r0, r0
 8015410:	7c23      	ldrb	r3, [r4, #16]
 8015412:	2b00      	cmp	r3, #0
 8015414:	f000 808b 	beq.w	801552e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015418:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801541c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8015420:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015424:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015428:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801542c:	4410      	add	r0, r2
 801542e:	b200      	sxth	r0, r0
 8015430:	9000      	str	r0, [sp, #0]
 8015432:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8015436:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801543a:	4642      	mov	r2, r8
 801543c:	2100      	movs	r1, #0
 801543e:	4658      	mov	r0, fp
 8015440:	f7ff fca2 	bl	8014d88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015444:	2800      	cmp	r0, #0
 8015446:	d163      	bne.n	8015510 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015448:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801544c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8015450:	b2b2      	uxth	r2, r6
 8015452:	4413      	add	r3, r2
 8015454:	1a8a      	subs	r2, r1, r2
 8015456:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801545a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801545e:	b21b      	sxth	r3, r3
 8015460:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015464:	2a00      	cmp	r2, #0
 8015466:	d153      	bne.n	8015510 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015468:	6822      	ldr	r2, [r4, #0]
 801546a:	8869      	ldrh	r1, [r5, #2]
 801546c:	7a12      	ldrb	r2, [r2, #8]
 801546e:	1a9b      	subs	r3, r3, r2
 8015470:	88ea      	ldrh	r2, [r5, #6]
 8015472:	440a      	add	r2, r1
 8015474:	b212      	sxth	r2, r2
 8015476:	4293      	cmp	r3, r2
 8015478:	dda7      	ble.n	80153ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801547a:	e049      	b.n	8015510 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801547c:	7c23      	ldrb	r3, [r4, #16]
 801547e:	444f      	add	r7, r9
 8015480:	b1c3      	cbz	r3, 80154b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8015482:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8015486:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801548a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801548e:	443b      	add	r3, r7
 8015490:	4293      	cmp	r3, r2
 8015492:	da97      	bge.n	80153c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015494:	a80e      	add	r0, sp, #56	; 0x38
 8015496:	f7ff fdeb 	bl	8015070 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801549a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801549e:	3b01      	subs	r3, #1
 80154a0:	b29b      	uxth	r3, r3
 80154a2:	454b      	cmp	r3, r9
 80154a4:	9309      	str	r3, [sp, #36]	; 0x24
 80154a6:	d021      	beq.n	80154ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80154a8:	7961      	ldrb	r1, [r4, #5]
 80154aa:	a817      	add	r0, sp, #92	; 0x5c
 80154ac:	f7fa fd5a 	bl	800ff64 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80154b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154b2:	e7f4      	b.n	801549e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80154b4:	fa1f f986 	uxth.w	r9, r6
 80154b8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80154bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80154c0:	443b      	add	r3, r7
 80154c2:	4293      	cmp	r3, r2
 80154c4:	f6bf af7e 	bge.w	80153c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80154c8:	a817      	add	r0, sp, #92	; 0x5c
 80154ca:	f002 fcfb 	bl	8017ec4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80154ce:	b1f8      	cbz	r0, 8015510 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80154d0:	280a      	cmp	r0, #10
 80154d2:	d1f1      	bne.n	80154b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80154d4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80154d8:	444b      	add	r3, r9
 80154da:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80154de:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80154e2:	eba3 0309 	sub.w	r3, r3, r9
 80154e6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80154ea:	e7e5      	b.n	80154b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80154ec:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80154f0:	b2b3      	uxth	r3, r6
 80154f2:	441a      	add	r2, r3
 80154f4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80154f8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 80154fc:	1ad3      	subs	r3, r2, r3
 80154fe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015502:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015506:	b11b      	cbz	r3, 8015510 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015508:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 801550c:	2b00      	cmp	r3, #0
 801550e:	d0ba      	beq.n	8015486 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8015510:	b063      	add	sp, #396	; 0x18c
 8015512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015516:	2a02      	cmp	r2, #2
 8015518:	d105      	bne.n	8015526 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801551a:	7be2      	ldrb	r2, [r4, #15]
 801551c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8015520:	1a80      	subs	r0, r0, r2
 8015522:	1ac0      	subs	r0, r0, r3
 8015524:	e773      	b.n	801540e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8015526:	2000      	movs	r0, #0
 8015528:	e772      	b.n	8015410 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801552a:	7be0      	ldrb	r0, [r4, #15]
 801552c:	e770      	b.n	8015410 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801552e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015532:	e773      	b.n	801541c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015534:	f1ba 0f00 	cmp.w	sl, #0
 8015538:	d0f7      	beq.n	801552a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801553a:	2264      	movs	r2, #100	; 0x64
 801553c:	4639      	mov	r1, r7
 801553e:	a849      	add	r0, sp, #292	; 0x124
 8015540:	f011 fb55 	bl	8026bee <memcpy>
 8015544:	2300      	movs	r3, #0
 8015546:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801554a:	6821      	ldr	r1, [r4, #0]
 801554c:	a849      	add	r0, sp, #292	; 0x124
 801554e:	f7ff fbae 	bl	8014cae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015552:	b203      	sxth	r3, r0
 8015554:	e751      	b.n	80153fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08015556 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015556:	2b03      	cmp	r3, #3
 8015558:	d818      	bhi.n	801558c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801555a:	e8df f003 	tbb	[pc, r3]
 801555e:	0602      	.short	0x0602
 8015560:	130d      	.short	0x130d
 8015562:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015566:	1850      	adds	r0, r2, r1
 8015568:	4770      	bx	lr
 801556a:	8803      	ldrh	r3, [r0, #0]
 801556c:	8880      	ldrh	r0, [r0, #4]
 801556e:	4418      	add	r0, r3
 8015570:	b200      	sxth	r0, r0
 8015572:	1a80      	subs	r0, r0, r2
 8015574:	3801      	subs	r0, #1
 8015576:	4770      	bx	lr
 8015578:	8803      	ldrh	r3, [r0, #0]
 801557a:	8880      	ldrh	r0, [r0, #4]
 801557c:	4418      	add	r0, r3
 801557e:	b200      	sxth	r0, r0
 8015580:	1a40      	subs	r0, r0, r1
 8015582:	e7f7      	b.n	8015574 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015584:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015588:	4410      	add	r0, r2
 801558a:	4770      	bx	lr
 801558c:	2000      	movs	r0, #0
 801558e:	4770      	bx	lr

08015590 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015590:	2b03      	cmp	r3, #3
 8015592:	d817      	bhi.n	80155c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015594:	e8df f003 	tbb	[pc, r3]
 8015598:	10090602 	.word	0x10090602
 801559c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80155a0:	1850      	adds	r0, r2, r1
 80155a2:	4770      	bx	lr
 80155a4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80155a8:	e7fa      	b.n	80155a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80155aa:	8843      	ldrh	r3, [r0, #2]
 80155ac:	88c0      	ldrh	r0, [r0, #6]
 80155ae:	4418      	add	r0, r3
 80155b0:	b200      	sxth	r0, r0
 80155b2:	1a80      	subs	r0, r0, r2
 80155b4:	3801      	subs	r0, #1
 80155b6:	4770      	bx	lr
 80155b8:	8843      	ldrh	r3, [r0, #2]
 80155ba:	88c0      	ldrh	r0, [r0, #6]
 80155bc:	4418      	add	r0, r3
 80155be:	b200      	sxth	r0, r0
 80155c0:	1a40      	subs	r0, r0, r1
 80155c2:	e7f7      	b.n	80155b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80155c4:	2000      	movs	r0, #0
 80155c6:	4770      	bx	lr

080155c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80155c8:	4b01      	ldr	r3, [pc, #4]	; (80155d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80155ca:	2200      	movs	r2, #0
 80155cc:	601a      	str	r2, [r3, #0]
 80155ce:	4770      	bx	lr
 80155d0:	20025864 	.word	0x20025864

080155d4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80155d4:	4603      	mov	r3, r0
 80155d6:	b1c8      	cbz	r0, 801560c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80155d8:	0c02      	lsrs	r2, r0, #16
 80155da:	0412      	lsls	r2, r2, #16
 80155dc:	b9a2      	cbnz	r2, 8015608 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80155de:	0403      	lsls	r3, r0, #16
 80155e0:	2010      	movs	r0, #16
 80155e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80155e6:	bf04      	itt	eq
 80155e8:	021b      	lsleq	r3, r3, #8
 80155ea:	3008      	addeq	r0, #8
 80155ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80155f0:	bf04      	itt	eq
 80155f2:	011b      	lsleq	r3, r3, #4
 80155f4:	3004      	addeq	r0, #4
 80155f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80155fa:	bf04      	itt	eq
 80155fc:	009b      	lsleq	r3, r3, #2
 80155fe:	3002      	addeq	r0, #2
 8015600:	2b00      	cmp	r3, #0
 8015602:	db04      	blt.n	801560e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015604:	3001      	adds	r0, #1
 8015606:	4770      	bx	lr
 8015608:	2000      	movs	r0, #0
 801560a:	e7ea      	b.n	80155e2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801560c:	2020      	movs	r0, #32
 801560e:	4770      	bx	lr

08015610 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015614:	b087      	sub	sp, #28
 8015616:	460d      	mov	r5, r1
 8015618:	4616      	mov	r6, r2
 801561a:	4698      	mov	r8, r3
 801561c:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8015620:	4601      	mov	r1, r0
 8015622:	b120      	cbz	r0, 801562e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8015624:	b11a      	cbz	r2, 801562e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8015626:	2d1f      	cmp	r5, #31
 8015628:	d801      	bhi.n	801562e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801562a:	2b1f      	cmp	r3, #31
 801562c:	d904      	bls.n	8015638 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801562e:	2000      	movs	r0, #0
 8015630:	6038      	str	r0, [r7, #0]
 8015632:	b007      	add	sp, #28
 8015634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015638:	b97d      	cbnz	r5, 801565a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801563a:	b143      	cbz	r3, 801564e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801563c:	4602      	mov	r2, r0
 801563e:	e9cd 4700 	strd	r4, r7, [sp]
 8015642:	462b      	mov	r3, r5
 8015644:	4641      	mov	r1, r8
 8015646:	4630      	mov	r0, r6
 8015648:	f7ff ffe2 	bl	8015610 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801564c:	e7f1      	b.n	8015632 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801564e:	f04f 33ff 	mov.w	r3, #4294967295
 8015652:	603b      	str	r3, [r7, #0]
 8015654:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015658:	e7eb      	b.n	8015632 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801565a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801565e:	d106      	bne.n	801566e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8015660:	4346      	muls	r6, r0
 8015662:	fbb6 f0f4 	udiv	r0, r6, r4
 8015666:	fb04 6610 	mls	r6, r4, r0, r6
 801566a:	603e      	str	r6, [r7, #0]
 801566c:	e7e1      	b.n	8015632 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801566e:	2201      	movs	r2, #1
 8015670:	40aa      	lsls	r2, r5
 8015672:	3a01      	subs	r2, #1
 8015674:	4016      	ands	r6, r2
 8015676:	fa00 fb05 	lsl.w	fp, r0, r5
 801567a:	4630      	mov	r0, r6
 801567c:	fbbb f9f4 	udiv	r9, fp, r4
 8015680:	fb0a f309 	mul.w	r3, sl, r9
 8015684:	9303      	str	r3, [sp, #12]
 8015686:	f7ff ffa5 	bl	80155d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801568a:	462b      	mov	r3, r5
 801568c:	460a      	mov	r2, r1
 801568e:	e9cd 4700 	strd	r4, r7, [sp]
 8015692:	4601      	mov	r1, r0
 8015694:	4630      	mov	r0, r6
 8015696:	f7ff ffbb 	bl	8015610 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801569a:	fb04 b919 	mls	r9, r4, r9, fp
 801569e:	4606      	mov	r6, r0
 80156a0:	4648      	mov	r0, r9
 80156a2:	eb05 0108 	add.w	r1, r5, r8
 80156a6:	f7ff ff95 	bl	80155d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80156aa:	ab05      	add	r3, sp, #20
 80156ac:	e9cd 4300 	strd	r4, r3, [sp]
 80156b0:	464a      	mov	r2, r9
 80156b2:	4603      	mov	r3, r0
 80156b4:	4650      	mov	r0, sl
 80156b6:	f7ff ffab 	bl	8015610 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80156ba:	6839      	ldr	r1, [r7, #0]
 80156bc:	9a05      	ldr	r2, [sp, #20]
 80156be:	9b03      	ldr	r3, [sp, #12]
 80156c0:	4411      	add	r1, r2
 80156c2:	fbb1 f2f4 	udiv	r2, r1, r4
 80156c6:	18d3      	adds	r3, r2, r3
 80156c8:	441e      	add	r6, r3
 80156ca:	fb04 1412 	mls	r4, r4, r2, r1
 80156ce:	4430      	add	r0, r6
 80156d0:	603c      	str	r4, [r7, #0]
 80156d2:	e7ae      	b.n	8015632 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080156d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80156d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156d8:	b085      	sub	sp, #20
 80156da:	f1b0 0900 	subs.w	r9, r0, #0
 80156de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80156e0:	461d      	mov	r5, r3
 80156e2:	bfbf      	itttt	lt
 80156e4:	6823      	ldrlt	r3, [r4, #0]
 80156e6:	425b      	neglt	r3, r3
 80156e8:	f1c9 0900 	rsblt	r9, r9, #0
 80156ec:	6023      	strlt	r3, [r4, #0]
 80156ee:	bfb4      	ite	lt
 80156f0:	f04f 36ff 	movlt.w	r6, #4294967295
 80156f4:	2601      	movge	r6, #1
 80156f6:	2a00      	cmp	r2, #0
 80156f8:	4617      	mov	r7, r2
 80156fa:	da04      	bge.n	8015706 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80156fc:	6823      	ldr	r3, [r4, #0]
 80156fe:	425b      	negs	r3, r3
 8015700:	4257      	negs	r7, r2
 8015702:	4276      	negs	r6, r6
 8015704:	6023      	str	r3, [r4, #0]
 8015706:	2d00      	cmp	r5, #0
 8015708:	4638      	mov	r0, r7
 801570a:	bfba      	itte	lt
 801570c:	426d      	neglt	r5, r5
 801570e:	f04f 38ff 	movlt.w	r8, #4294967295
 8015712:	f04f 0801 	movge.w	r8, #1
 8015716:	f7ff ff5d 	bl	80155d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801571a:	ab03      	add	r3, sp, #12
 801571c:	e9cd 5300 	strd	r5, r3, [sp]
 8015720:	463a      	mov	r2, r7
 8015722:	4603      	mov	r3, r0
 8015724:	4648      	mov	r0, r9
 8015726:	f7ff ff73 	bl	8015610 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801572a:	6823      	ldr	r3, [r4, #0]
 801572c:	9a03      	ldr	r2, [sp, #12]
 801572e:	4546      	cmp	r6, r8
 8015730:	441a      	add	r2, r3
 8015732:	fb92 f3f5 	sdiv	r3, r2, r5
 8015736:	4418      	add	r0, r3
 8015738:	bf18      	it	ne
 801573a:	4240      	negne	r0, r0
 801573c:	fb05 2313 	mls	r3, r5, r3, r2
 8015740:	1c72      	adds	r2, r6, #1
 8015742:	6023      	str	r3, [r4, #0]
 8015744:	d105      	bne.n	8015752 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015746:	2b00      	cmp	r3, #0
 8015748:	f1c3 0200 	rsb	r2, r3, #0
 801574c:	db0b      	blt.n	8015766 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801574e:	6022      	str	r2, [r4, #0]
 8015750:	e006      	b.n	8015760 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015752:	2e01      	cmp	r6, #1
 8015754:	d104      	bne.n	8015760 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015756:	2b00      	cmp	r3, #0
 8015758:	da02      	bge.n	8015760 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801575a:	442b      	add	r3, r5
 801575c:	3801      	subs	r0, #1
 801575e:	6023      	str	r3, [r4, #0]
 8015760:	b005      	add	sp, #20
 8015762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015766:	3801      	subs	r0, #1
 8015768:	1b52      	subs	r2, r2, r5
 801576a:	e7f0      	b.n	801574e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801576c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801576c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015770:	4c1c      	ldr	r4, [pc, #112]	; (80157e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015772:	6807      	ldr	r7, [r0, #0]
 8015774:	69a3      	ldr	r3, [r4, #24]
 8015776:	4605      	mov	r5, r0
 8015778:	b92b      	cbnz	r3, 8015786 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801577a:	6840      	ldr	r0, [r0, #4]
 801577c:	e9c5 7000 	strd	r7, r0, [r5]
 8015780:	b004      	add	sp, #16
 8015782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015786:	68a2      	ldr	r2, [r4, #8]
 8015788:	6820      	ldr	r0, [r4, #0]
 801578a:	ae04      	add	r6, sp, #16
 801578c:	f04f 0802 	mov.w	r8, #2
 8015790:	fb93 f1f8 	sdiv	r1, r3, r8
 8015794:	440a      	add	r2, r1
 8015796:	f846 2d04 	str.w	r2, [r6, #-4]!
 801579a:	69e1      	ldr	r1, [r4, #28]
 801579c:	9600      	str	r6, [sp, #0]
 801579e:	463a      	mov	r2, r7
 80157a0:	f7ff ff98 	bl	80156d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80157a4:	69a3      	ldr	r3, [r4, #24]
 80157a6:	686a      	ldr	r2, [r5, #4]
 80157a8:	6a21      	ldr	r1, [r4, #32]
 80157aa:	9600      	str	r6, [sp, #0]
 80157ac:	4607      	mov	r7, r0
 80157ae:	6860      	ldr	r0, [r4, #4]
 80157b0:	f7ff ff90 	bl	80156d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80157b4:	6962      	ldr	r2, [r4, #20]
 80157b6:	69a3      	ldr	r3, [r4, #24]
 80157b8:	fb93 f8f8 	sdiv	r8, r3, r8
 80157bc:	4442      	add	r2, r8
 80157be:	9203      	str	r2, [sp, #12]
 80157c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80157c2:	682a      	ldr	r2, [r5, #0]
 80157c4:	9600      	str	r6, [sp, #0]
 80157c6:	4407      	add	r7, r0
 80157c8:	68e0      	ldr	r0, [r4, #12]
 80157ca:	f7ff ff83 	bl	80156d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80157ce:	9600      	str	r6, [sp, #0]
 80157d0:	4680      	mov	r8, r0
 80157d2:	69a3      	ldr	r3, [r4, #24]
 80157d4:	686a      	ldr	r2, [r5, #4]
 80157d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80157d8:	6920      	ldr	r0, [r4, #16]
 80157da:	f7ff ff7b 	bl	80156d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80157de:	4440      	add	r0, r8
 80157e0:	e7cc      	b.n	801577c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80157e2:	bf00      	nop
 80157e4:	20025868 	.word	0x20025868

080157e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80157e8:	4b07      	ldr	r3, [pc, #28]	; (8015808 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	d109      	bne.n	8015804 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80157f0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80157f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80157f8:	8003      	strh	r3, [r0, #0]
 80157fa:	4b04      	ldr	r3, [pc, #16]	; (801580c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80157fc:	881b      	ldrh	r3, [r3, #0]
 80157fe:	3b01      	subs	r3, #1
 8015800:	1a9b      	subs	r3, r3, r2
 8015802:	800b      	strh	r3, [r1, #0]
 8015804:	4770      	bx	lr
 8015806:	bf00      	nop
 8015808:	20025854 	.word	0x20025854
 801580c:	20025850 	.word	0x20025850

08015810 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015810:	b510      	push	{r4, lr}
 8015812:	4b07      	ldr	r3, [pc, #28]	; (8015830 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015814:	781b      	ldrb	r3, [r3, #0]
 8015816:	2b01      	cmp	r3, #1
 8015818:	d108      	bne.n	801582c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801581a:	4b06      	ldr	r3, [pc, #24]	; (8015834 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801581c:	880c      	ldrh	r4, [r1, #0]
 801581e:	881b      	ldrh	r3, [r3, #0]
 8015820:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015824:	3b01      	subs	r3, #1
 8015826:	1b1b      	subs	r3, r3, r4
 8015828:	8003      	strh	r3, [r0, #0]
 801582a:	800a      	strh	r2, [r1, #0]
 801582c:	bd10      	pop	{r4, pc}
 801582e:	bf00      	nop
 8015830:	20025854 	.word	0x20025854
 8015834:	20025850 	.word	0x20025850

08015838 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015838:	b510      	push	{r4, lr}
 801583a:	4b0a      	ldr	r3, [pc, #40]	; (8015864 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	2b01      	cmp	r3, #1
 8015840:	d10e      	bne.n	8015860 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015842:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015846:	8843      	ldrh	r3, [r0, #2]
 8015848:	f9b0 4000 	ldrsh.w	r4, [r0]
 801584c:	8044      	strh	r4, [r0, #2]
 801584e:	18ca      	adds	r2, r1, r3
 8015850:	4b05      	ldr	r3, [pc, #20]	; (8015868 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015852:	881b      	ldrh	r3, [r3, #0]
 8015854:	1a9b      	subs	r3, r3, r2
 8015856:	8003      	strh	r3, [r0, #0]
 8015858:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801585c:	80c3      	strh	r3, [r0, #6]
 801585e:	8081      	strh	r1, [r0, #4]
 8015860:	bd10      	pop	{r4, pc}
 8015862:	bf00      	nop
 8015864:	20025854 	.word	0x20025854
 8015868:	20025850 	.word	0x20025850

0801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801586c:	4b08      	ldr	r3, [pc, #32]	; (8015890 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	2b01      	cmp	r3, #1
 8015872:	d10c      	bne.n	801588e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8015874:	8803      	ldrh	r3, [r0, #0]
 8015876:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801587a:	8842      	ldrh	r2, [r0, #2]
 801587c:	8002      	strh	r2, [r0, #0]
 801587e:	185a      	adds	r2, r3, r1
 8015880:	4b04      	ldr	r3, [pc, #16]	; (8015894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8015882:	881b      	ldrh	r3, [r3, #0]
 8015884:	1a9b      	subs	r3, r3, r2
 8015886:	8043      	strh	r3, [r0, #2]
 8015888:	88c3      	ldrh	r3, [r0, #6]
 801588a:	8083      	strh	r3, [r0, #4]
 801588c:	80c1      	strh	r1, [r0, #6]
 801588e:	4770      	bx	lr
 8015890:	20025854 	.word	0x20025854
 8015894:	20025850 	.word	0x20025850

08015898 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015898:	b510      	push	{r4, lr}
 801589a:	4b07      	ldr	r3, [pc, #28]	; (80158b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	2b01      	cmp	r3, #1
 80158a0:	d108      	bne.n	80158b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80158a2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80158a6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80158aa:	8003      	strh	r3, [r0, #0]
 80158ac:	8893      	ldrh	r3, [r2, #4]
 80158ae:	3b01      	subs	r3, #1
 80158b0:	1b1b      	subs	r3, r3, r4
 80158b2:	800b      	strh	r3, [r1, #0]
 80158b4:	bd10      	pop	{r4, pc}
 80158b6:	bf00      	nop
 80158b8:	20025854 	.word	0x20025854

080158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80158bc:	b510      	push	{r4, lr}
 80158be:	4b0a      	ldr	r3, [pc, #40]	; (80158e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	2b01      	cmp	r3, #1
 80158c4:	460a      	mov	r2, r1
 80158c6:	d10d      	bne.n	80158e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80158c8:	8881      	ldrh	r1, [r0, #4]
 80158ca:	8803      	ldrh	r3, [r0, #0]
 80158cc:	440b      	add	r3, r1
 80158ce:	4601      	mov	r1, r0
 80158d0:	3b01      	subs	r3, #1
 80158d2:	f821 3b02 	strh.w	r3, [r1], #2
 80158d6:	f7ff ffdf 	bl	8015898 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80158da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80158de:	88c2      	ldrh	r2, [r0, #6]
 80158e0:	8082      	strh	r2, [r0, #4]
 80158e2:	80c3      	strh	r3, [r0, #6]
 80158e4:	bd10      	pop	{r4, pc}
 80158e6:	bf00      	nop
 80158e8:	20025854 	.word	0x20025854

080158ec <_ZN8touchgfx11Application13requestRedrawEv>:
 80158ec:	4b06      	ldr	r3, [pc, #24]	; (8015908 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80158ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80158f2:	4b06      	ldr	r3, [pc, #24]	; (801590c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80158f4:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80158f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158fc:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8015900:	2100      	movs	r1, #0
 8015902:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8015906:	4770      	bx	lr
 8015908:	20025850 	.word	0x20025850
 801590c:	20025852 	.word	0x20025852

08015910 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015910:	4b03      	ldr	r3, [pc, #12]	; (8015920 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8015912:	6818      	ldr	r0, [r3, #0]
 8015914:	b110      	cbz	r0, 801591c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8015916:	6803      	ldr	r3, [r0, #0]
 8015918:	699b      	ldr	r3, [r3, #24]
 801591a:	4718      	bx	r3
 801591c:	4770      	bx	lr
 801591e:	bf00      	nop
 8015920:	20025898 	.word	0x20025898

08015924 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015924:	4770      	bx	lr
	...

08015928 <_ZN8touchgfx11Application4drawEv>:
 8015928:	b507      	push	{r0, r1, r2, lr}
 801592a:	4b09      	ldr	r3, [pc, #36]	; (8015950 <_ZN8touchgfx11Application4drawEv+0x28>)
 801592c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015930:	4b08      	ldr	r3, [pc, #32]	; (8015954 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8015932:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015936:	f9b3 3000 	ldrsh.w	r3, [r3]
 801593a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801593e:	6803      	ldr	r3, [r0, #0]
 8015940:	2100      	movs	r1, #0
 8015942:	9100      	str	r1, [sp, #0]
 8015944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015946:	4669      	mov	r1, sp
 8015948:	4798      	blx	r3
 801594a:	b003      	add	sp, #12
 801594c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015950:	20025850 	.word	0x20025850
 8015954:	20025852 	.word	0x20025852

08015958 <_ZN8touchgfx11Application10invalidateEv>:
 8015958:	4b09      	ldr	r3, [pc, #36]	; (8015980 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801595a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801595e:	4b09      	ldr	r3, [pc, #36]	; (8015984 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8015960:	b082      	sub	sp, #8
 8015962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015966:	f8ad 2004 	strh.w	r2, [sp, #4]
 801596a:	2100      	movs	r1, #0
 801596c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015970:	9100      	str	r1, [sp, #0]
 8015972:	6803      	ldr	r3, [r0, #0]
 8015974:	aa02      	add	r2, sp, #8
 8015976:	e912 0006 	ldmdb	r2, {r1, r2}
 801597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801597c:	b002      	add	sp, #8
 801597e:	4718      	bx	r3
 8015980:	20025850 	.word	0x20025850
 8015984:	20025852 	.word	0x20025852

08015988 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015988:	4b03      	ldr	r3, [pc, #12]	; (8015998 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801598a:	6818      	ldr	r0, [r3, #0]
 801598c:	b110      	cbz	r0, 8015994 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801598e:	6803      	ldr	r3, [r0, #0]
 8015990:	69db      	ldr	r3, [r3, #28]
 8015992:	4718      	bx	r3
 8015994:	4770      	bx	lr
 8015996:	bf00      	nop
 8015998:	20025898 	.word	0x20025898

0801599c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801599c:	4b03      	ldr	r3, [pc, #12]	; (80159ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801599e:	6818      	ldr	r0, [r3, #0]
 80159a0:	b110      	cbz	r0, 80159a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80159a2:	6803      	ldr	r3, [r0, #0]
 80159a4:	6a1b      	ldr	r3, [r3, #32]
 80159a6:	4718      	bx	r3
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop
 80159ac:	20025898 	.word	0x20025898

080159b0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80159b0:	2300      	movs	r3, #0
 80159b2:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 80159b6:	4770      	bx	lr

080159b8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80159b8:	4b03      	ldr	r3, [pc, #12]	; (80159c8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80159ba:	6818      	ldr	r0, [r3, #0]
 80159bc:	b110      	cbz	r0, 80159c4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80159be:	6803      	ldr	r3, [r0, #0]
 80159c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159c2:	4718      	bx	r3
 80159c4:	4770      	bx	lr
 80159c6:	bf00      	nop
 80159c8:	20025898 	.word	0x20025898

080159cc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80159cc:	b510      	push	{r4, lr}
 80159ce:	f9b1 4000 	ldrsh.w	r4, [r1]
 80159d2:	888a      	ldrh	r2, [r1, #4]
 80159d4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80159d8:	4422      	add	r2, r4
 80159da:	b212      	sxth	r2, r2
 80159dc:	4293      	cmp	r3, r2
 80159de:	da15      	bge.n	8015a0c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80159e0:	8882      	ldrh	r2, [r0, #4]
 80159e2:	4413      	add	r3, r2
 80159e4:	b21b      	sxth	r3, r3
 80159e6:	429c      	cmp	r4, r3
 80159e8:	da10      	bge.n	8015a0c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80159ea:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80159ee:	88c9      	ldrh	r1, [r1, #6]
 80159f0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80159f4:	4419      	add	r1, r3
 80159f6:	b209      	sxth	r1, r1
 80159f8:	428a      	cmp	r2, r1
 80159fa:	da07      	bge.n	8015a0c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80159fc:	88c0      	ldrh	r0, [r0, #6]
 80159fe:	4410      	add	r0, r2
 8015a00:	b200      	sxth	r0, r0
 8015a02:	4283      	cmp	r3, r0
 8015a04:	bfac      	ite	ge
 8015a06:	2000      	movge	r0, #0
 8015a08:	2001      	movlt	r0, #1
 8015a0a:	bd10      	pop	{r4, pc}
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	e7fc      	b.n	8015a0a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015a10 <_ZN8touchgfx4Rect10restrictToEss>:
 8015a10:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	b510      	push	{r4, lr}
 8015a18:	da04      	bge.n	8015a24 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8015a1a:	8884      	ldrh	r4, [r0, #4]
 8015a1c:	4423      	add	r3, r4
 8015a1e:	8083      	strh	r3, [r0, #4]
 8015a20:	2300      	movs	r3, #0
 8015a22:	8003      	strh	r3, [r0, #0]
 8015a24:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015a28:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015a2c:	1b09      	subs	r1, r1, r4
 8015a2e:	428b      	cmp	r3, r1
 8015a30:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015a34:	bfc8      	it	gt
 8015a36:	8081      	strhgt	r1, [r0, #4]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	da04      	bge.n	8015a46 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8015a3c:	88c1      	ldrh	r1, [r0, #6]
 8015a3e:	440b      	add	r3, r1
 8015a40:	80c3      	strh	r3, [r0, #6]
 8015a42:	2300      	movs	r3, #0
 8015a44:	8043      	strh	r3, [r0, #2]
 8015a46:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015a4a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8015a4e:	1a52      	subs	r2, r2, r1
 8015a50:	4293      	cmp	r3, r2
 8015a52:	bfc8      	it	gt
 8015a54:	80c2      	strhgt	r2, [r0, #6]
 8015a56:	bd10      	pop	{r4, pc}

08015a58 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015a58:	b510      	push	{r4, lr}
 8015a5a:	4b10      	ldr	r3, [pc, #64]	; (8015a9c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8015a5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015a60:	4b0f      	ldr	r3, [pc, #60]	; (8015aa0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8015a62:	460c      	mov	r4, r1
 8015a64:	4620      	mov	r0, r4
 8015a66:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015a6a:	f7ff ffd1 	bl	8015a10 <_ZN8touchgfx4Rect10restrictToEss>
 8015a6e:	4b0d      	ldr	r3, [pc, #52]	; (8015aa4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8015a70:	6818      	ldr	r0, [r3, #0]
 8015a72:	b190      	cbz	r0, 8015a9a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8015a74:	6803      	ldr	r3, [r0, #0]
 8015a76:	4621      	mov	r1, r4
 8015a78:	689b      	ldr	r3, [r3, #8]
 8015a7a:	4798      	blx	r3
 8015a7c:	4b0a      	ldr	r3, [pc, #40]	; (8015aa8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8015a7e:	6818      	ldr	r0, [r3, #0]
 8015a80:	b118      	cbz	r0, 8015a8a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8015a82:	6803      	ldr	r3, [r0, #0]
 8015a84:	4621      	mov	r1, r4
 8015a86:	689b      	ldr	r3, [r3, #8]
 8015a88:	4798      	blx	r3
 8015a8a:	4b08      	ldr	r3, [pc, #32]	; (8015aac <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8015a8c:	6818      	ldr	r0, [r3, #0]
 8015a8e:	6803      	ldr	r3, [r0, #0]
 8015a90:	4621      	mov	r1, r4
 8015a92:	69db      	ldr	r3, [r3, #28]
 8015a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a98:	4718      	bx	r3
 8015a9a:	bd10      	pop	{r4, pc}
 8015a9c:	20025852 	.word	0x20025852
 8015aa0:	20025850 	.word	0x20025850
 8015aa4:	20025898 	.word	0x20025898
 8015aa8:	20025894 	.word	0x20025894
 8015aac:	2002585c 	.word	0x2002585c

08015ab0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8015ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ab2:	4606      	mov	r6, r0
 8015ab4:	4608      	mov	r0, r1
 8015ab6:	460f      	mov	r7, r1
 8015ab8:	f7fc fdcb 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015abc:	b9e8      	cbnz	r0, 8015afa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015abe:	f9b7 5000 	ldrsh.w	r5, [r7]
 8015ac2:	f9b6 4000 	ldrsh.w	r4, [r6]
 8015ac6:	42a5      	cmp	r5, r4
 8015ac8:	db17      	blt.n	8015afa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015aca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015ace:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	db11      	blt.n	8015afa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015ad6:	88b9      	ldrh	r1, [r7, #4]
 8015ad8:	440d      	add	r5, r1
 8015ada:	88b1      	ldrh	r1, [r6, #4]
 8015adc:	440c      	add	r4, r1
 8015ade:	b22d      	sxth	r5, r5
 8015ae0:	b224      	sxth	r4, r4
 8015ae2:	42a5      	cmp	r5, r4
 8015ae4:	dc09      	bgt.n	8015afa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015ae6:	88f8      	ldrh	r0, [r7, #6]
 8015ae8:	4410      	add	r0, r2
 8015aea:	88f2      	ldrh	r2, [r6, #6]
 8015aec:	4413      	add	r3, r2
 8015aee:	b200      	sxth	r0, r0
 8015af0:	b21b      	sxth	r3, r3
 8015af2:	4298      	cmp	r0, r3
 8015af4:	bfcc      	ite	gt
 8015af6:	2000      	movgt	r0, #0
 8015af8:	2001      	movle	r0, #1
 8015afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015afc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8015afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015afe:	4604      	mov	r4, r0
 8015b00:	4608      	mov	r0, r1
 8015b02:	460d      	mov	r5, r1
 8015b04:	f7fc fda5 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b08:	b978      	cbnz	r0, 8015b2a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8015b0a:	4620      	mov	r0, r4
 8015b0c:	f7fc fda1 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b10:	f9b5 6000 	ldrsh.w	r6, [r5]
 8015b14:	b150      	cbz	r0, 8015b2c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8015b16:	8026      	strh	r6, [r4, #0]
 8015b18:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015b1c:	8063      	strh	r3, [r4, #2]
 8015b1e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015b22:	80a3      	strh	r3, [r4, #4]
 8015b24:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015b28:	80e3      	strh	r3, [r4, #6]
 8015b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b2c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015b30:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015b34:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015b38:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8015b3c:	88ed      	ldrh	r5, [r5, #6]
 8015b3e:	42b1      	cmp	r1, r6
 8015b40:	460f      	mov	r7, r1
 8015b42:	bfa8      	it	ge
 8015b44:	4637      	movge	r7, r6
 8015b46:	4293      	cmp	r3, r2
 8015b48:	4618      	mov	r0, r3
 8015b4a:	4466      	add	r6, ip
 8015b4c:	bfa8      	it	ge
 8015b4e:	4610      	movge	r0, r2
 8015b50:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015b54:	8027      	strh	r7, [r4, #0]
 8015b56:	442a      	add	r2, r5
 8015b58:	88e5      	ldrh	r5, [r4, #6]
 8015b5a:	8060      	strh	r0, [r4, #2]
 8015b5c:	4461      	add	r1, ip
 8015b5e:	442b      	add	r3, r5
 8015b60:	b236      	sxth	r6, r6
 8015b62:	b209      	sxth	r1, r1
 8015b64:	b212      	sxth	r2, r2
 8015b66:	b21b      	sxth	r3, r3
 8015b68:	428e      	cmp	r6, r1
 8015b6a:	bfac      	ite	ge
 8015b6c:	ebc7 0106 	rsbge	r1, r7, r6
 8015b70:	ebc7 0101 	rsblt	r1, r7, r1
 8015b74:	429a      	cmp	r2, r3
 8015b76:	bfac      	ite	ge
 8015b78:	ebc0 0202 	rsbge	r2, r0, r2
 8015b7c:	ebc0 0203 	rsblt	r2, r0, r3
 8015b80:	80a1      	strh	r1, [r4, #4]
 8015b82:	80e2      	strh	r2, [r4, #6]
 8015b84:	e7d1      	b.n	8015b2a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08015b88 <_ZN8touchgfx11Application11getInstanceEv>:
 8015b88:	4b01      	ldr	r3, [pc, #4]	; (8015b90 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8015b8a:	6818      	ldr	r0, [r3, #0]
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop
 8015b90:	200258a8 	.word	0x200258a8

08015b94 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8015b94:	b510      	push	{r4, lr}
 8015b96:	2300      	movs	r3, #0
 8015b98:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8015b9c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8015ba0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8015ba4:	4604      	mov	r4, r0
 8015ba6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8015baa:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d90e      	bls.n	8015bd0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8015bb2:	18e2      	adds	r2, r4, r3
 8015bb4:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8015bb8:	b122      	cbz	r2, 8015bc4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8015bba:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8015bbe:	6803      	ldr	r3, [r0, #0]
 8015bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bc2:	4798      	blx	r3
 8015bc4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8015bc8:	3301      	adds	r3, #1
 8015bca:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8015bce:	e7ea      	b.n	8015ba6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8015bd0:	bd10      	pop	{r4, pc}

08015bd2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8015bd2:	b530      	push	{r4, r5, lr}
 8015bd4:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 8015bd8:	2200      	movs	r2, #0
 8015bda:	b293      	uxth	r3, r2
 8015bdc:	429d      	cmp	r5, r3
 8015bde:	d90e      	bls.n	8015bfe <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8015be0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8015be4:	428b      	cmp	r3, r1
 8015be6:	d10b      	bne.n	8015c00 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8015be8:	1884      	adds	r4, r0, r2
 8015bea:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8015bee:	b13b      	cbz	r3, 8015c00 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8015bf0:	3b01      	subs	r3, #1
 8015bf2:	b2db      	uxtb	r3, r3
 8015bf4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 8015bf8:	b90b      	cbnz	r3, 8015bfe <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8015bfa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015bfe:	bd30      	pop	{r4, r5, pc}
 8015c00:	3201      	adds	r2, #1
 8015c02:	e7ea      	b.n	8015bda <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08015c04 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8015c04:	2300      	movs	r3, #0
 8015c06:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8015c0a:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8015c0e:	30a4      	adds	r0, #164	; 0xa4
 8015c10:	f802 3b01 	strb.w	r3, [r2], #1
 8015c14:	4282      	cmp	r2, r0
 8015c16:	d1fb      	bne.n	8015c10 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8015c18:	4770      	bx	lr
	...

08015c1c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015c1c:	b570      	push	{r4, r5, r6, lr}
 8015c1e:	4c0b      	ldr	r4, [pc, #44]	; (8015c4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8015c20:	4605      	mov	r5, r0
 8015c22:	6820      	ldr	r0, [r4, #0]
 8015c24:	460e      	mov	r6, r1
 8015c26:	b110      	cbz	r0, 8015c2e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8015c28:	6803      	ldr	r3, [r0, #0]
 8015c2a:	695b      	ldr	r3, [r3, #20]
 8015c2c:	4798      	blx	r3
 8015c2e:	1d28      	adds	r0, r5, #4
 8015c30:	f7ff ffe8 	bl	8015c04 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015c34:	6026      	str	r6, [r4, #0]
 8015c36:	6833      	ldr	r3, [r6, #0]
 8015c38:	4630      	mov	r0, r6
 8015c3a:	68db      	ldr	r3, [r3, #12]
 8015c3c:	4798      	blx	r3
 8015c3e:	682b      	ldr	r3, [r5, #0]
 8015c40:	4628      	mov	r0, r5
 8015c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c48:	4718      	bx	r3
 8015c4a:	bf00      	nop
 8015c4c:	20025898 	.word	0x20025898

08015c50 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8015c50:	2300      	movs	r3, #0
 8015c52:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8015c56:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8015c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c5c:	461a      	mov	r2, r3
 8015c5e:	461c      	mov	r4, r3
 8015c60:	461d      	mov	r5, r3
 8015c62:	459c      	cmp	ip, r3
 8015c64:	dd1a      	ble.n	8015c9c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8015c66:	18c6      	adds	r6, r0, r3
 8015c68:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8015c6c:	b16e      	cbz	r6, 8015c8a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d008      	beq.n	8015c84 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8015c72:	fa1f fe82 	uxth.w	lr, r2
 8015c76:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8015c7a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8015c7e:	1887      	adds	r7, r0, r2
 8015c80:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8015c84:	3201      	adds	r2, #1
 8015c86:	3301      	adds	r3, #1
 8015c88:	e7eb      	b.n	8015c62 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8015c8a:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8015c8e:	4299      	cmp	r1, r3
 8015c90:	bfa8      	it	ge
 8015c92:	3501      	addge	r5, #1
 8015c94:	429e      	cmp	r6, r3
 8015c96:	bfc8      	it	gt
 8015c98:	3401      	addgt	r4, #1
 8015c9a:	e7f4      	b.n	8015c86 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8015c9c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8015ca0:	1b49      	subs	r1, r1, r5
 8015ca2:	1b1b      	subs	r3, r3, r4
 8015ca4:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8015ca8:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8015cac:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	dd03      	ble.n	8015cbc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8015cb4:	3b01      	subs	r3, #1
 8015cb6:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8015cba:	e7f7      	b.n	8015cac <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8015cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015cc0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8015cc0:	b570      	push	{r4, r5, r6, lr}
 8015cc2:	4d16      	ldr	r5, [pc, #88]	; (8015d1c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8015cc4:	4604      	mov	r4, r0
 8015cc6:	6828      	ldr	r0, [r5, #0]
 8015cc8:	b140      	cbz	r0, 8015cdc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015cca:	7a03      	ldrb	r3, [r0, #8]
 8015ccc:	b933      	cbnz	r3, 8015cdc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015cce:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8015cd2:	6803      	ldr	r3, [r0, #0]
 8015cd4:	689b      	ldr	r3, [r3, #8]
 8015cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cda:	4718      	bx	r3
 8015cdc:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8015ce0:	4e0f      	ldr	r6, [pc, #60]	; (8015d20 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8015ce2:	b973      	cbnz	r3, 8015d02 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015ce4:	b168      	cbz	r0, 8015d02 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015ce6:	7a03      	ldrb	r3, [r0, #8]
 8015ce8:	b15b      	cbz	r3, 8015d02 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015cea:	6830      	ldr	r0, [r6, #0]
 8015cec:	b110      	cbz	r0, 8015cf4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8015cee:	6803      	ldr	r3, [r0, #0]
 8015cf0:	691b      	ldr	r3, [r3, #16]
 8015cf2:	4798      	blx	r3
 8015cf4:	6828      	ldr	r0, [r5, #0]
 8015cf6:	6803      	ldr	r3, [r0, #0]
 8015cf8:	68db      	ldr	r3, [r3, #12]
 8015cfa:	4798      	blx	r3
 8015cfc:	2301      	movs	r3, #1
 8015cfe:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8015d02:	3404      	adds	r4, #4
 8015d04:	4620      	mov	r0, r4
 8015d06:	f7ff ff45 	bl	8015b94 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	f7ff ffa0 	bl	8015c50 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8015d10:	6830      	ldr	r0, [r6, #0]
 8015d12:	b110      	cbz	r0, 8015d1a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8015d14:	6803      	ldr	r3, [r0, #0]
 8015d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d18:	e7dd      	b.n	8015cd6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8015d1a:	bd70      	pop	{r4, r5, r6, pc}
 8015d1c:	2002589c 	.word	0x2002589c
 8015d20:	20025898 	.word	0x20025898

08015d24 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8015d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d26:	2300      	movs	r3, #0
 8015d28:	4604      	mov	r4, r0
 8015d2a:	460d      	mov	r5, r1
 8015d2c:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 8015d30:	4618      	mov	r0, r3
 8015d32:	b29a      	uxth	r2, r3
 8015d34:	4291      	cmp	r1, r2
 8015d36:	d911      	bls.n	8015d5c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x38>
 8015d38:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8015d3c:	18e6      	adds	r6, r4, r3
 8015d3e:	42af      	cmp	r7, r5
 8015d40:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 8015d44:	d105      	bne.n	8015d52 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8015d46:	2aff      	cmp	r2, #255	; 0xff
 8015d48:	d002      	beq.n	8015d50 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8015d4a:	3201      	adds	r2, #1
 8015d4c:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 8015d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d52:	2a00      	cmp	r2, #0
 8015d54:	bf08      	it	eq
 8015d56:	2001      	moveq	r0, #1
 8015d58:	3301      	adds	r3, #1
 8015d5a:	e7ea      	b.n	8015d32 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8015d5c:	b120      	cbz	r0, 8015d68 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8015d5e:	2920      	cmp	r1, #32
 8015d60:	d102      	bne.n	8015d68 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8015d62:	4620      	mov	r0, r4
 8015d64:	f7ff ff74 	bl	8015c50 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8015d68:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8015d6c:	2b1f      	cmp	r3, #31
 8015d6e:	d8ef      	bhi.n	8015d50 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8015d70:	18e2      	adds	r2, r4, r3
 8015d72:	2101      	movs	r1, #1
 8015d74:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 8015d78:	185a      	adds	r2, r3, r1
 8015d7a:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 8015d7e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8015d82:	e7e5      	b.n	8015d50 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08015d84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015d84:	4603      	mov	r3, r0
 8015d86:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	801a      	strh	r2, [r3, #0]
 8015d8e:	805a      	strh	r2, [r3, #2]
 8015d90:	809a      	strh	r2, [r3, #4]
 8015d92:	80da      	strh	r2, [r3, #6]
 8015d94:	3308      	adds	r3, #8
 8015d96:	428b      	cmp	r3, r1
 8015d98:	d1f8      	bne.n	8015d8c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015d9a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8015d9e:	4770      	bx	lr

08015da0 <_ZN8touchgfx11ApplicationC1Ev>:
 8015da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015da2:	4606      	mov	r6, r0
 8015da4:	4b1c      	ldr	r3, [pc, #112]	; (8015e18 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8015da6:	f846 3b04 	str.w	r3, [r6], #4
 8015daa:	4604      	mov	r4, r0
 8015dac:	2500      	movs	r5, #0
 8015dae:	22a8      	movs	r2, #168	; 0xa8
 8015db0:	2100      	movs	r1, #0
 8015db2:	4630      	mov	r0, r6
 8015db4:	f010 fe4b 	bl	8026a4e <memset>
 8015db8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8015dbc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8015dc0:	f7ff ffe0 	bl	8015d84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015dc4:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8015dc8:	f7ff ffdc 	bl	8015d84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015dcc:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8015dd0:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8015dd4:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8015dd8:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8015ddc:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8015de0:	490e      	ldr	r1, [pc, #56]	; (8015e1c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8015de2:	480f      	ldr	r0, [pc, #60]	; (8015e20 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8015de4:	4f0f      	ldr	r7, [pc, #60]	; (8015e24 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8015de6:	f010 faf5 	bl	80263d4 <CRC_Lock>
 8015dea:	4b0f      	ldr	r3, [pc, #60]	; (8015e28 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8015dec:	b158      	cbz	r0, 8015e06 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8015dee:	801d      	strh	r5, [r3, #0]
 8015df0:	4a0e      	ldr	r2, [pc, #56]	; (8015e2c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8015df2:	2300      	movs	r3, #0
 8015df4:	6013      	str	r3, [r2, #0]
 8015df6:	4a0e      	ldr	r2, [pc, #56]	; (8015e30 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8015df8:	603b      	str	r3, [r7, #0]
 8015dfa:	4630      	mov	r0, r6
 8015dfc:	6013      	str	r3, [r2, #0]
 8015dfe:	f7ff ff01 	bl	8015c04 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015e02:	4620      	mov	r0, r4
 8015e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015e0a:	2002      	movs	r0, #2
 8015e0c:	801a      	strh	r2, [r3, #0]
 8015e0e:	6038      	str	r0, [r7, #0]
 8015e10:	f001 fa52 	bl	80172b8 <_ZN8touchgfx6Screen4drawEv>
 8015e14:	e7ec      	b.n	8015df0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8015e16:	bf00      	nop
 8015e18:	08029798 	.word	0x08029798
 8015e1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8015e20:	f407a5c2 	.word	0xf407a5c2
 8015e24:	20025898 	.word	0x20025898
 8015e28:	200002a4 	.word	0x200002a4
 8015e2c:	200258a8 	.word	0x200258a8
 8015e30:	2002589c 	.word	0x2002589c

08015e34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015e34:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8015e38:	3b01      	subs	r3, #1
 8015e3a:	b29b      	uxth	r3, r3
 8015e3c:	428b      	cmp	r3, r1
 8015e3e:	b510      	push	{r4, lr}
 8015e40:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8015e44:	d908      	bls.n	8015e58 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8015e46:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015e4a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015e4e:	681a      	ldr	r2, [r3, #0]
 8015e50:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015e54:	685a      	ldr	r2, [r3, #4]
 8015e56:	6062      	str	r2, [r4, #4]
 8015e58:	bd10      	pop	{r4, pc}
	...

08015e5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e60:	4b8f      	ldr	r3, [pc, #572]	; (80160a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8015e62:	b08f      	sub	sp, #60	; 0x3c
 8015e64:	ac0a      	add	r4, sp, #40	; 0x28
 8015e66:	e884 0006 	stmia.w	r4, {r1, r2}
 8015e6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015e6e:	4b8d      	ldr	r3, [pc, #564]	; (80160a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8015e70:	4683      	mov	fp, r0
 8015e72:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015e76:	4620      	mov	r0, r4
 8015e78:	f7ff fdca 	bl	8015a10 <_ZN8touchgfx4Rect10restrictToEss>
 8015e7c:	4620      	mov	r0, r4
 8015e7e:	f7fc fbe8 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015e82:	2800      	cmp	r0, #0
 8015e84:	d16a      	bne.n	8015f5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015e86:	9403      	str	r4, [sp, #12]
 8015e88:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8015e8c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8015e90:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8015e94:	35a4      	adds	r5, #164	; 0xa4
 8015e96:	9301      	str	r3, [sp, #4]
 8015e98:	b15c      	cbz	r4, 8015eb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8015e9a:	4629      	mov	r1, r5
 8015e9c:	9803      	ldr	r0, [sp, #12]
 8015e9e:	f7ff fe07 	bl	8015ab0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015ea2:	3c01      	subs	r4, #1
 8015ea4:	b118      	cbz	r0, 8015eae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8015ea6:	b2a1      	uxth	r1, r4
 8015ea8:	9801      	ldr	r0, [sp, #4]
 8015eaa:	f7ff ffc3 	bl	8015e34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015eae:	3d08      	subs	r5, #8
 8015eb0:	e7f2      	b.n	8015e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8015eb2:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 8015eb6:	f8cd a010 	str.w	sl, [sp, #16]
 8015eba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015ebe:	9302      	str	r3, [sp, #8]
 8015ec0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015ec4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8015ec8:	9306      	str	r3, [sp, #24]
 8015eca:	445c      	add	r4, fp
 8015ecc:	2500      	movs	r5, #0
 8015ece:	4626      	mov	r6, r4
 8015ed0:	f8cd a014 	str.w	sl, [sp, #20]
 8015ed4:	462f      	mov	r7, r5
 8015ed6:	9b05      	ldr	r3, [sp, #20]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d073      	beq.n	8015fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015edc:	9903      	ldr	r1, [sp, #12]
 8015ede:	4630      	mov	r0, r6
 8015ee0:	f7ff fd74 	bl	80159cc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015ee4:	b350      	cbz	r0, 8015f3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015ee6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8015eea:	f9b6 c000 	ldrsh.w	ip, [r6]
 8015eee:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8015ef2:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8015ef6:	45e6      	cmp	lr, ip
 8015ef8:	db33      	blt.n	8015f62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015efa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015efe:	88b3      	ldrh	r3, [r6, #4]
 8015f00:	4472      	add	r2, lr
 8015f02:	4463      	add	r3, ip
 8015f04:	b212      	sxth	r2, r2
 8015f06:	b21b      	sxth	r3, r3
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	dc2a      	bgt.n	8015f62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015f0c:	88f3      	ldrh	r3, [r6, #6]
 8015f0e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015f12:	fa1f f289 	uxth.w	r2, r9
 8015f16:	4413      	add	r3, r2
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	45c8      	cmp	r8, r9
 8015f1c:	fa1f fc88 	uxth.w	ip, r8
 8015f20:	fa0f fe83 	sxth.w	lr, r3
 8015f24:	db0f      	blt.n	8015f46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015f26:	eba3 030c 	sub.w	r3, r3, ip
 8015f2a:	1ac9      	subs	r1, r1, r3
 8015f2c:	b209      	sxth	r1, r1
 8015f2e:	2900      	cmp	r1, #0
 8015f30:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015f34:	dd12      	ble.n	8015f5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015f36:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8015f3a:	4605      	mov	r5, r0
 8015f3c:	9b05      	ldr	r3, [sp, #20]
 8015f3e:	3b01      	subs	r3, #1
 8015f40:	9305      	str	r3, [sp, #20]
 8015f42:	3e08      	subs	r6, #8
 8015f44:	e7c7      	b.n	8015ed6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8015f46:	4461      	add	r1, ip
 8015f48:	b209      	sxth	r1, r1
 8015f4a:	4571      	cmp	r1, lr
 8015f4c:	dc38      	bgt.n	8015fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015f4e:	eba2 020c 	sub.w	r2, r2, ip
 8015f52:	b212      	sxth	r2, r2
 8015f54:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8015f58:	2a00      	cmp	r2, #0
 8015f5a:	dcee      	bgt.n	8015f3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015f5c:	b00f      	add	sp, #60	; 0x3c
 8015f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f62:	45c8      	cmp	r8, r9
 8015f64:	db2c      	blt.n	8015fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015f66:	88f3      	ldrh	r3, [r6, #6]
 8015f68:	4499      	add	r9, r3
 8015f6a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015f6e:	4498      	add	r8, r3
 8015f70:	fa0f f989 	sxth.w	r9, r9
 8015f74:	fa0f f888 	sxth.w	r8, r8
 8015f78:	45c1      	cmp	r9, r8
 8015f7a:	db21      	blt.n	8015fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015f7c:	88b3      	ldrh	r3, [r6, #4]
 8015f7e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015f82:	fa1f f28c 	uxth.w	r2, ip
 8015f86:	4413      	add	r3, r2
 8015f88:	b29b      	uxth	r3, r3
 8015f8a:	45e6      	cmp	lr, ip
 8015f8c:	fa1f f88e 	uxth.w	r8, lr
 8015f90:	fa0f f983 	sxth.w	r9, r3
 8015f94:	db0a      	blt.n	8015fac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8015f96:	eba3 0308 	sub.w	r3, r3, r8
 8015f9a:	1ac9      	subs	r1, r1, r3
 8015f9c:	b209      	sxth	r1, r1
 8015f9e:	2900      	cmp	r1, #0
 8015fa0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8015fa4:	ddda      	ble.n	8015f5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015fa6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8015faa:	e7c6      	b.n	8015f3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015fac:	4441      	add	r1, r8
 8015fae:	b209      	sxth	r1, r1
 8015fb0:	4549      	cmp	r1, r9
 8015fb2:	dc05      	bgt.n	8015fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015fb4:	eba2 0208 	sub.w	r2, r2, r8
 8015fb8:	b212      	sxth	r2, r2
 8015fba:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015fbe:	e7cb      	b.n	8015f58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8015fc0:	4607      	mov	r7, r0
 8015fc2:	e7bb      	b.n	8015f3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015fc4:	2d00      	cmp	r5, #0
 8015fc6:	d181      	bne.n	8015ecc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8015fc8:	2f00      	cmp	r7, #0
 8015fca:	f000 81dd 	beq.w	8016388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015fce:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8015fd2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8015fd6:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8015fda:	b2b3      	uxth	r3, r6
 8015fdc:	9305      	str	r3, [sp, #20]
 8015fde:	9a05      	ldr	r2, [sp, #20]
 8015fe0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8015fe4:	4413      	add	r3, r2
 8015fe6:	b2ba      	uxth	r2, r7
 8015fe8:	4492      	add	sl, r2
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	fa1f fa8a 	uxth.w	sl, sl
 8015ff0:	fa0f f883 	sxth.w	r8, r3
 8015ff4:	fa0f f98a 	sxth.w	r9, sl
 8015ff8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015ffc:	9b04      	ldr	r3, [sp, #16]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d052      	beq.n	80160a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016002:	9903      	ldr	r1, [sp, #12]
 8016004:	4620      	mov	r0, r4
 8016006:	f7ff fce1 	bl	80159cc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801600a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801600e:	b1c0      	cbz	r0, 8016042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016010:	f9b4 e000 	ldrsh.w	lr, [r4]
 8016014:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016018:	4576      	cmp	r6, lr
 801601a:	dc22      	bgt.n	8016062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801601c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016020:	44f4      	add	ip, lr
 8016022:	fa0f fc8c 	sxth.w	ip, ip
 8016026:	45e0      	cmp	r8, ip
 8016028:	db1b      	blt.n	8016062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801602a:	428f      	cmp	r7, r1
 801602c:	fa1f fc81 	uxth.w	ip, r1
 8016030:	88e1      	ldrh	r1, [r4, #6]
 8016032:	dc0d      	bgt.n	8016050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8016034:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016038:	eba1 010c 	sub.w	r1, r1, ip
 801603c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8016040:	80e1      	strh	r1, [r4, #6]
 8016042:	4628      	mov	r0, r5
 8016044:	9904      	ldr	r1, [sp, #16]
 8016046:	3901      	subs	r1, #1
 8016048:	9104      	str	r1, [sp, #16]
 801604a:	3c08      	subs	r4, #8
 801604c:	4605      	mov	r5, r0
 801604e:	e7d3      	b.n	8015ff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8016050:	4461      	add	r1, ip
 8016052:	b209      	sxth	r1, r1
 8016054:	4549      	cmp	r1, r9
 8016056:	dcf5      	bgt.n	8016044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016058:	eba2 0c0c 	sub.w	ip, r2, ip
 801605c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016060:	e7ef      	b.n	8016042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016062:	428f      	cmp	r7, r1
 8016064:	dcee      	bgt.n	8016044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016066:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801606a:	4461      	add	r1, ip
 801606c:	b209      	sxth	r1, r1
 801606e:	4589      	cmp	r9, r1
 8016070:	dbe8      	blt.n	8016044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016072:	4576      	cmp	r6, lr
 8016074:	fa1f fc8e 	uxth.w	ip, lr
 8016078:	88a1      	ldrh	r1, [r4, #4]
 801607a:	dc07      	bgt.n	801608c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801607c:	eba3 0c0c 	sub.w	ip, r3, ip
 8016080:	eba1 010c 	sub.w	r1, r1, ip
 8016084:	f8a4 8000 	strh.w	r8, [r4]
 8016088:	80a1      	strh	r1, [r4, #4]
 801608a:	e7da      	b.n	8016042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801608c:	4461      	add	r1, ip
 801608e:	b209      	sxth	r1, r1
 8016090:	4588      	cmp	r8, r1
 8016092:	dbd7      	blt.n	8016044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016094:	9905      	ldr	r1, [sp, #20]
 8016096:	eba1 0c0c 	sub.w	ip, r1, ip
 801609a:	f8a4 c004 	strh.w	ip, [r4, #4]
 801609e:	e7d0      	b.n	8016042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80160a0:	20025852 	.word	0x20025852
 80160a4:	20025850 	.word	0x20025850
 80160a8:	2d00      	cmp	r5, #0
 80160aa:	f000 816d 	beq.w	8016388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80160ae:	9b06      	ldr	r3, [sp, #24]
 80160b0:	445b      	add	r3, fp
 80160b2:	461c      	mov	r4, r3
 80160b4:	9b02      	ldr	r3, [sp, #8]
 80160b6:	3301      	adds	r3, #1
 80160b8:	f000 8166 	beq.w	8016388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80160bc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80160c0:	4629      	mov	r1, r5
 80160c2:	9803      	ldr	r0, [sp, #12]
 80160c4:	f7ff fcf4 	bl	8015ab0 <_ZNK8touchgfx4Rect8includesERKS0_>
 80160c8:	b120      	cbz	r0, 80160d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80160ca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80160ce:	9801      	ldr	r0, [sp, #4]
 80160d0:	f7ff feb0 	bl	8015e34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80160d4:	9903      	ldr	r1, [sp, #12]
 80160d6:	4628      	mov	r0, r5
 80160d8:	f7ff fc78 	bl	80159cc <_ZNK8touchgfx4Rect9intersectERKS0_>
 80160dc:	2800      	cmp	r0, #0
 80160de:	f000 809c 	beq.w	801621a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80160e2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 80160e6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80160ea:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80160ee:	9309      	str	r3, [sp, #36]	; 0x24
 80160f0:	fa1f f189 	uxth.w	r1, r9
 80160f4:	eb01 0c03 	add.w	ip, r1, r3
 80160f8:	fa1f fa8c 	uxth.w	sl, ip
 80160fc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8016100:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8016104:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8016108:	b283      	uxth	r3, r0
 801610a:	eb03 050c 	add.w	r5, r3, ip
 801610e:	b2ad      	uxth	r5, r5
 8016110:	9505      	str	r5, [sp, #20]
 8016112:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8016116:	9504      	str	r5, [sp, #16]
 8016118:	4548      	cmp	r0, r9
 801611a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801611e:	f340 8099 	ble.w	8016254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8016122:	1a5b      	subs	r3, r3, r1
 8016124:	b29b      	uxth	r3, r3
 8016126:	4596      	cmp	lr, r2
 8016128:	fa0f f08a 	sxth.w	r0, sl
 801612c:	b21e      	sxth	r6, r3
 801612e:	dd2e      	ble.n	801618e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8016130:	9f02      	ldr	r7, [sp, #8]
 8016132:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8016136:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801613a:	9f04      	ldr	r7, [sp, #16]
 801613c:	1a3f      	subs	r7, r7, r0
 801613e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8016142:	fa1f fe8e 	uxth.w	lr, lr
 8016146:	b292      	uxth	r2, r2
 8016148:	ebae 0102 	sub.w	r1, lr, r2
 801614c:	44a6      	add	lr, r4
 801614e:	4402      	add	r2, r0
 8016150:	b289      	uxth	r1, r1
 8016152:	fa0f fe8e 	sxth.w	lr, lr
 8016156:	b212      	sxth	r2, r2
 8016158:	b20d      	sxth	r5, r1
 801615a:	ebae 0202 	sub.w	r2, lr, r2
 801615e:	436f      	muls	r7, r5
 8016160:	4372      	muls	r2, r6
 8016162:	4297      	cmp	r7, r2
 8016164:	db09      	blt.n	801617a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016166:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801616a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801616e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016172:	449c      	add	ip, r3
 8016174:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016178:	e686      	b.n	8015e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801617a:	4421      	add	r1, r4
 801617c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8016180:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8016184:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016188:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801618c:	e67c      	b.n	8015e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801618e:	9f04      	ldr	r7, [sp, #16]
 8016190:	42b8      	cmp	r0, r7
 8016192:	da27      	bge.n	80161e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8016194:	9902      	ldr	r1, [sp, #8]
 8016196:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801619a:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801619e:	eb05 010e 	add.w	r1, r5, lr
 80161a2:	fa1f f881 	uxth.w	r8, r1
 80161a6:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80161aa:	4411      	add	r1, r2
 80161ac:	eba1 0108 	sub.w	r1, r1, r8
 80161b0:	b289      	uxth	r1, r1
 80161b2:	fa0f f988 	sxth.w	r9, r8
 80161b6:	eba2 020e 	sub.w	r2, r2, lr
 80161ba:	fa0f f881 	sxth.w	r8, r1
 80161be:	1a3f      	subs	r7, r7, r0
 80161c0:	4372      	muls	r2, r6
 80161c2:	fb08 f707 	mul.w	r7, r8, r7
 80161c6:	42ba      	cmp	r2, r7
 80161c8:	dc06      	bgt.n	80161d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80161ca:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80161ce:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80161d2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80161d6:	e7ca      	b.n	801616e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80161d8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80161dc:	4429      	add	r1, r5
 80161de:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80161e2:	e651      	b.n	8015e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80161e4:	9805      	ldr	r0, [sp, #20]
 80161e6:	ebaa 0000 	sub.w	r0, sl, r0
 80161ea:	b280      	uxth	r0, r0
 80161ec:	2d06      	cmp	r5, #6
 80161ee:	fa0f fe80 	sxth.w	lr, r0
 80161f2:	d817      	bhi.n	8016224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80161f4:	9b04      	ldr	r3, [sp, #16]
 80161f6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80161fa:	1c6b      	adds	r3, r5, #1
 80161fc:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8016200:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8016204:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016208:	9b01      	ldr	r3, [sp, #4]
 801620a:	9801      	ldr	r0, [sp, #4]
 801620c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016210:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016214:	805a      	strh	r2, [r3, #2]
 8016216:	809e      	strh	r6, [r3, #4]
 8016218:	80d9      	strh	r1, [r3, #6]
 801621a:	9b02      	ldr	r3, [sp, #8]
 801621c:	3b01      	subs	r3, #1
 801621e:	9302      	str	r3, [sp, #8]
 8016220:	3c08      	subs	r4, #8
 8016222:	e747      	b.n	80160b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016224:	9a02      	ldr	r2, [sp, #8]
 8016226:	45b6      	cmp	lr, r6
 8016228:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801622c:	db0d      	blt.n	801624a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801622e:	449c      	add	ip, r3
 8016230:	fa1f fc8c 	uxth.w	ip, ip
 8016234:	445a      	add	r2, fp
 8016236:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801623a:	448c      	add	ip, r1
 801623c:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8016240:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8016244:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8016248:	e61e      	b.n	8015e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801624a:	445a      	add	r2, fp
 801624c:	4484      	add	ip, r0
 801624e:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8016252:	e78f      	b.n	8016174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016254:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8016258:	fa1f f18e 	uxth.w	r1, lr
 801625c:	eb01 0806 	add.w	r8, r1, r6
 8016260:	b293      	uxth	r3, r2
 8016262:	fa1f f888 	uxth.w	r8, r8
 8016266:	9306      	str	r3, [sp, #24]
 8016268:	fa0f f388 	sxth.w	r3, r8
 801626c:	9307      	str	r3, [sp, #28]
 801626e:	9f06      	ldr	r7, [sp, #24]
 8016270:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8016274:	443b      	add	r3, r7
 8016276:	b29b      	uxth	r3, r3
 8016278:	4596      	cmp	lr, r2
 801627a:	9308      	str	r3, [sp, #32]
 801627c:	da24      	bge.n	80162c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801627e:	9905      	ldr	r1, [sp, #20]
 8016280:	eba3 0308 	sub.w	r3, r3, r8
 8016284:	ebaa 0401 	sub.w	r4, sl, r1
 8016288:	b2a4      	uxth	r4, r4
 801628a:	b29b      	uxth	r3, r3
 801628c:	b225      	sxth	r5, r4
 801628e:	b219      	sxth	r1, r3
 8016290:	eba2 020e 	sub.w	r2, r2, lr
 8016294:	eba9 0000 	sub.w	r0, r9, r0
 8016298:	436a      	muls	r2, r5
 801629a:	4348      	muls	r0, r1
 801629c:	4282      	cmp	r2, r0
 801629e:	9a02      	ldr	r2, [sp, #8]
 80162a0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80162a4:	445a      	add	r2, fp
 80162a6:	dc06      	bgt.n	80162b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80162a8:	9b07      	ldr	r3, [sp, #28]
 80162aa:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80162ae:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80162b2:	44a4      	add	ip, r4
 80162b4:	e75e      	b.n	8016174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80162b6:	9904      	ldr	r1, [sp, #16]
 80162b8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80162bc:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80162c0:	4433      	add	r3, r6
 80162c2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80162c6:	e5df      	b.n	8015e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80162c8:	9f06      	ldr	r7, [sp, #24]
 80162ca:	9b04      	ldr	r3, [sp, #16]
 80162cc:	1bc9      	subs	r1, r1, r7
 80162ce:	fa0f f78a 	sxth.w	r7, sl
 80162d2:	b289      	uxth	r1, r1
 80162d4:	429f      	cmp	r7, r3
 80162d6:	fa0f fe81 	sxth.w	lr, r1
 80162da:	dd23      	ble.n	8016324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80162dc:	9a05      	ldr	r2, [sp, #20]
 80162de:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80162e2:	9d07      	ldr	r5, [sp, #28]
 80162e4:	ebaa 0202 	sub.w	r2, sl, r2
 80162e8:	b292      	uxth	r2, r2
 80162ea:	eba5 0a03 	sub.w	sl, r5, r3
 80162ee:	b214      	sxth	r4, r2
 80162f0:	eba9 0000 	sub.w	r0, r9, r0
 80162f4:	9b02      	ldr	r3, [sp, #8]
 80162f6:	fb0e f000 	mul.w	r0, lr, r0
 80162fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80162fe:	00db      	lsls	r3, r3, #3
 8016300:	4550      	cmp	r0, sl
 8016302:	445b      	add	r3, fp
 8016304:	db03      	blt.n	801630e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8016306:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801630a:	4494      	add	ip, r2
 801630c:	e732      	b.n	8016174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801630e:	9a04      	ldr	r2, [sp, #16]
 8016310:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8016314:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8016318:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801631c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016320:	4431      	add	r1, r6
 8016322:	e75c      	b.n	80161de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016324:	9b08      	ldr	r3, [sp, #32]
 8016326:	eba3 0308 	sub.w	r3, r3, r8
 801632a:	b29b      	uxth	r3, r3
 801632c:	2d06      	cmp	r5, #6
 801632e:	b218      	sxth	r0, r3
 8016330:	d813      	bhi.n	801635a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8016332:	9b07      	ldr	r3, [sp, #28]
 8016334:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8016338:	1c6b      	adds	r3, r5, #1
 801633a:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801633e:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016342:	9b01      	ldr	r3, [sp, #4]
 8016344:	9901      	ldr	r1, [sp, #4]
 8016346:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801634a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801634e:	805a      	strh	r2, [r3, #2]
 8016350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016352:	809a      	strh	r2, [r3, #4]
 8016354:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016358:	e75f      	b.n	801621a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801635a:	9c02      	ldr	r4, [sp, #8]
 801635c:	4570      	cmp	r0, lr
 801635e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016362:	db0d      	blt.n	8016380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8016364:	4431      	add	r1, r6
 8016366:	9b06      	ldr	r3, [sp, #24]
 8016368:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801636c:	b289      	uxth	r1, r1
 801636e:	445c      	add	r4, fp
 8016370:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016374:	4419      	add	r1, r3
 8016376:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801637a:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801637e:	e583      	b.n	8015e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016380:	445c      	add	r4, fp
 8016382:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8016386:	e79b      	b.n	80162c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016388:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801638c:	1e65      	subs	r5, r4, #1
 801638e:	b2ad      	uxth	r5, r5
 8016390:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8016394:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016398:	42b5      	cmp	r5, r6
 801639a:	d044      	beq.n	8016426 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801639c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80163a0:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 80163a4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80163a8:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 80163ac:	4282      	cmp	r2, r0
 80163ae:	d11f      	bne.n	80163f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80163b0:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 80163b4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80163b8:	459c      	cmp	ip, r3
 80163ba:	d119      	bne.n	80163f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80163bc:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 80163c0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80163c4:	19d8      	adds	r0, r3, r7
 80163c6:	b200      	sxth	r0, r0
 80163c8:	4288      	cmp	r0, r1
 80163ca:	d109      	bne.n	80163e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80163cc:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 80163d0:	4413      	add	r3, r2
 80163d2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80163d6:	4629      	mov	r1, r5
 80163d8:	9801      	ldr	r0, [sp, #4]
 80163da:	f7ff fd2b 	bl	8015e34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80163de:	e003      	b.n	80163e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80163e0:	4411      	add	r1, r2
 80163e2:	b209      	sxth	r1, r1
 80163e4:	42b9      	cmp	r1, r7
 80163e6:	d0f3      	beq.n	80163d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80163e8:	3d01      	subs	r5, #1
 80163ea:	b2ad      	uxth	r5, r5
 80163ec:	3c08      	subs	r4, #8
 80163ee:	e7d3      	b.n	8016398 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80163f0:	42b9      	cmp	r1, r7
 80163f2:	d1f9      	bne.n	80163e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80163f4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 80163f8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80163fc:	4299      	cmp	r1, r3
 80163fe:	d1f3      	bne.n	80163e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016400:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8016404:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016408:	181f      	adds	r7, r3, r0
 801640a:	b23f      	sxth	r7, r7
 801640c:	42ba      	cmp	r2, r7
 801640e:	d105      	bne.n	801641c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8016410:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8016414:	440b      	add	r3, r1
 8016416:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801641a:	e7dc      	b.n	80163d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801641c:	440a      	add	r2, r1
 801641e:	b212      	sxth	r2, r2
 8016420:	4290      	cmp	r0, r2
 8016422:	d1e1      	bne.n	80163e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016424:	e7f6      	b.n	8016414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8016426:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801642a:	2e07      	cmp	r6, #7
 801642c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016430:	d812      	bhi.n	8016458 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8016432:	1c75      	adds	r5, r6, #1
 8016434:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8016438:	9d01      	ldr	r5, [sp, #4]
 801643a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801643e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8016442:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8016446:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801644a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801644e:	442c      	add	r4, r5
 8016450:	8061      	strh	r1, [r4, #2]
 8016452:	80a2      	strh	r2, [r4, #4]
 8016454:	80e3      	strh	r3, [r4, #6]
 8016456:	e581      	b.n	8015f5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016458:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801645c:	3e01      	subs	r6, #1
 801645e:	445c      	add	r4, fp
 8016460:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8016464:	f04f 37ff 	mov.w	r7, #4294967295
 8016468:	2500      	movs	r5, #0
 801646a:	9305      	str	r3, [sp, #20]
 801646c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8016470:	9302      	str	r3, [sp, #8]
 8016472:	1e72      	subs	r2, r6, #1
 8016474:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8016478:	9304      	str	r3, [sp, #16]
 801647a:	4691      	mov	r9, r2
 801647c:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8016480:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016484:	bf14      	ite	ne
 8016486:	9905      	ldrne	r1, [sp, #20]
 8016488:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801648c:	6818      	ldr	r0, [r3, #0]
 801648e:	9207      	str	r2, [sp, #28]
 8016490:	bf18      	it	ne
 8016492:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016496:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801649a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801649e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80164a2:	9306      	str	r3, [sp, #24]
 80164a4:	fb18 f801 	smulbb	r8, r8, r1
 80164a8:	6859      	ldr	r1, [r3, #4]
 80164aa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80164ae:	4671      	mov	r1, lr
 80164b0:	a80c      	add	r0, sp, #48	; 0x30
 80164b2:	f7ff fb23 	bl	8015afc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80164b6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80164ba:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80164be:	9b04      	ldr	r3, [sp, #16]
 80164c0:	9a02      	ldr	r2, [sp, #8]
 80164c2:	fb10 f001 	smulbb	r0, r0, r1
 80164c6:	fb02 8803 	mla	r8, r2, r3, r8
 80164ca:	eba0 0108 	sub.w	r1, r0, r8
 80164ce:	f04f 0c08 	mov.w	ip, #8
 80164d2:	fb90 f0fc 	sdiv	r0, r0, ip
 80164d6:	4288      	cmp	r0, r1
 80164d8:	dc20      	bgt.n	801651c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 80164da:	4551      	cmp	r1, sl
 80164dc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80164e0:	da03      	bge.n	80164ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 80164e2:	b1d9      	cbz	r1, 801651c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 80164e4:	468a      	mov	sl, r1
 80164e6:	464f      	mov	r7, r9
 80164e8:	4635      	mov	r5, r6
 80164ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80164ee:	f119 0f02 	cmn.w	r9, #2
 80164f2:	d1c5      	bne.n	8016480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80164f4:	4616      	mov	r6, r2
 80164f6:	3201      	adds	r2, #1
 80164f8:	f1a4 0408 	sub.w	r4, r4, #8
 80164fc:	d1b6      	bne.n	801646c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80164fe:	9b01      	ldr	r3, [sp, #4]
 8016500:	b2ac      	uxth	r4, r5
 8016502:	00ed      	lsls	r5, r5, #3
 8016504:	1958      	adds	r0, r3, r5
 8016506:	1c7b      	adds	r3, r7, #1
 8016508:	d10b      	bne.n	8016522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 801650a:	4601      	mov	r1, r0
 801650c:	9803      	ldr	r0, [sp, #12]
 801650e:	f7ff faf5 	bl	8015afc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016512:	4621      	mov	r1, r4
 8016514:	9801      	ldr	r0, [sp, #4]
 8016516:	f7ff fc8d 	bl	8015e34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801651a:	e4b5      	b.n	8015e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801651c:	464f      	mov	r7, r9
 801651e:	4635      	mov	r5, r6
 8016520:	e7ed      	b.n	80164fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 8016522:	9b01      	ldr	r3, [sp, #4]
 8016524:	00ff      	lsls	r7, r7, #3
 8016526:	19d9      	adds	r1, r3, r7
 8016528:	f7ff fae8 	bl	8015afc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801652c:	9b03      	ldr	r3, [sp, #12]
 801652e:	cb03      	ldmia	r3!, {r0, r1}
 8016530:	445f      	add	r7, fp
 8016532:	445d      	add	r5, fp
 8016534:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8016538:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801653c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8016540:	9b03      	ldr	r3, [sp, #12]
 8016542:	6869      	ldr	r1, [r5, #4]
 8016544:	c303      	stmia	r3!, {r0, r1}
 8016546:	e7e4      	b.n	8016512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

08016548 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801654c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8016550:	b09b      	sub	sp, #108	; 0x6c
 8016552:	4604      	mov	r4, r0
 8016554:	4630      	mov	r0, r6
 8016556:	f7fc f87c 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 801655a:	4605      	mov	r5, r0
 801655c:	b948      	cbnz	r0, 8016572 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801655e:	6823      	ldr	r3, [r4, #0]
 8016560:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016566:	4620      	mov	r0, r4
 8016568:	4798      	blx	r3
 801656a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801656e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8016572:	4bc6      	ldr	r3, [pc, #792]	; (801688c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d03f      	beq.n	80165fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801657a:	4dc5      	ldr	r5, [pc, #788]	; (8016890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801657c:	4628      	mov	r0, r5
 801657e:	f7fc f868 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016582:	4606      	mov	r6, r0
 8016584:	2800      	cmp	r0, #0
 8016586:	d138      	bne.n	80165fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8016588:	4628      	mov	r0, r5
 801658a:	f7ff f955 	bl	8015838 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801658e:	6823      	ldr	r3, [r4, #0]
 8016590:	6829      	ldr	r1, [r5, #0]
 8016592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016594:	686a      	ldr	r2, [r5, #4]
 8016596:	4620      	mov	r0, r4
 8016598:	4798      	blx	r3
 801659a:	802e      	strh	r6, [r5, #0]
 801659c:	806e      	strh	r6, [r5, #2]
 801659e:	80ae      	strh	r6, [r5, #4]
 80165a0:	80ee      	strh	r6, [r5, #6]
 80165a2:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 80165a6:	4dbb      	ldr	r5, [pc, #748]	; (8016894 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80165a8:	4640      	mov	r0, r8
 80165aa:	f7ff fbeb 	bl	8015d84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80165ae:	882e      	ldrh	r6, [r5, #0]
 80165b0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80165b4:	4633      	mov	r3, r6
 80165b6:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80165ba:	42bb      	cmp	r3, r7
 80165bc:	d224      	bcs.n	8016608 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80165be:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80165c2:	2907      	cmp	r1, #7
 80165c4:	d816      	bhi.n	80165f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80165c6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80165ca:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80165ce:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80165d2:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80165d6:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80165da:	1c4a      	adds	r2, r1, #1
 80165dc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80165e0:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80165e4:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80165e8:	f8a2 a002 	strh.w	sl, [r2, #2]
 80165ec:	f8a2 e004 	strh.w	lr, [r2, #4]
 80165f0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80165f4:	3301      	adds	r3, #1
 80165f6:	b29b      	uxth	r3, r3
 80165f8:	e7df      	b.n	80165ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80165fa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d1cf      	bne.n	80165a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8016602:	b01b      	add	sp, #108	; 0x6c
 8016604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016608:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801660c:	42b3      	cmp	r3, r6
 801660e:	d90c      	bls.n	801662a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8016610:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8016614:	6822      	ldr	r2, [r4, #0]
 8016616:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801661a:	6c17      	ldr	r7, [r2, #64]	; 0x40
 801661c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8016620:	4620      	mov	r0, r4
 8016622:	3601      	adds	r6, #1
 8016624:	47b8      	blx	r7
 8016626:	b2b6      	uxth	r6, r6
 8016628:	e7ee      	b.n	8016608 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801662a:	4a9b      	ldr	r2, [pc, #620]	; (8016898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801662c:	6813      	ldr	r3, [r2, #0]
 801662e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016632:	2b01      	cmp	r3, #1
 8016634:	4691      	mov	r9, r2
 8016636:	f040 80e2 	bne.w	80167fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801663a:	8829      	ldrh	r1, [r5, #0]
 801663c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016640:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8016644:	33ae      	adds	r3, #174	; 0xae
 8016646:	2600      	movs	r6, #0
 8016648:	428f      	cmp	r7, r1
 801664a:	f103 0308 	add.w	r3, r3, #8
 801664e:	dd0a      	ble.n	8016666 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8016650:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8016654:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8016658:	4402      	add	r2, r0
 801665a:	b212      	sxth	r2, r2
 801665c:	4296      	cmp	r6, r2
 801665e:	bfb8      	it	lt
 8016660:	4616      	movlt	r6, r2
 8016662:	3101      	adds	r1, #1
 8016664:	e7f0      	b.n	8016648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8016666:	4b8d      	ldr	r3, [pc, #564]	; (801689c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016668:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8016898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 801666c:	881b      	ldrh	r3, [r3, #0]
 801666e:	2b0f      	cmp	r3, #15
 8016670:	bf88      	it	hi
 8016672:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8016676:	f04f 0300 	mov.w	r3, #0
 801667a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801667e:	bf98      	it	ls
 8016680:	f04f 0b01 	movls.w	fp, #1
 8016684:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8016688:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801668c:	4b82      	ldr	r3, [pc, #520]	; (8016898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801668e:	4438      	add	r0, r7
 8016690:	b207      	sxth	r7, r0
 8016692:	6818      	ldr	r0, [r3, #0]
 8016694:	42b7      	cmp	r7, r6
 8016696:	6803      	ldr	r3, [r0, #0]
 8016698:	f280 8083 	bge.w	80167a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801669c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80166a0:	4798      	blx	r3
 80166a2:	eb07 030b 	add.w	r3, r7, fp
 80166a6:	4298      	cmp	r0, r3
 80166a8:	da07      	bge.n	80166ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 80166aa:	42b0      	cmp	r0, r6
 80166ac:	da05      	bge.n	80166ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 80166ae:	4287      	cmp	r7, r0
 80166b0:	dd6c      	ble.n	801678c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80166b2:	2f00      	cmp	r7, #0
 80166b4:	dd6a      	ble.n	801678c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80166b6:	4630      	mov	r0, r6
 80166b8:	e004      	b.n	80166c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 80166ba:	4287      	cmp	r7, r0
 80166bc:	dcfb      	bgt.n	80166b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80166be:	42b0      	cmp	r0, r6
 80166c0:	bfa8      	it	ge
 80166c2:	4630      	movge	r0, r6
 80166c4:	4b76      	ldr	r3, [pc, #472]	; (80168a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80166c6:	f8ad 7016 	strh.w	r7, [sp, #22]
 80166ca:	1bc0      	subs	r0, r0, r7
 80166cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166d0:	882f      	ldrh	r7, [r5, #0]
 80166d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80166d6:	2200      	movs	r2, #0
 80166d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80166dc:	f8ad 001a 	strh.w	r0, [sp, #26]
 80166e0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80166e4:	42bb      	cmp	r3, r7
 80166e6:	d9cd      	bls.n	8016684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 80166e8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80166ec:	ab07      	add	r3, sp, #28
 80166ee:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80166f2:	6851      	ldr	r1, [r2, #4]
 80166f4:	c303      	stmia	r3!, {r0, r1}
 80166f6:	a905      	add	r1, sp, #20
 80166f8:	a807      	add	r0, sp, #28
 80166fa:	f7ff f967 	bl	80159cc <_ZNK8touchgfx4Rect9intersectERKS0_>
 80166fe:	2800      	cmp	r0, #0
 8016700:	d04c      	beq.n	801679c <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 8016702:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016706:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801670a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801670e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8016712:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016716:	9302      	str	r3, [sp, #8]
 8016718:	4686      	mov	lr, r0
 801671a:	4290      	cmp	r0, r2
 801671c:	4450      	add	r0, sl
 801671e:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8016722:	bfb8      	it	lt
 8016724:	4696      	movlt	lr, r2
 8016726:	4452      	add	r2, sl
 8016728:	4299      	cmp	r1, r3
 801672a:	b280      	uxth	r0, r0
 801672c:	b292      	uxth	r2, r2
 801672e:	468c      	mov	ip, r1
 8016730:	fa0f fa82 	sxth.w	sl, r2
 8016734:	bfb8      	it	lt
 8016736:	469c      	movlt	ip, r3
 8016738:	b203      	sxth	r3, r0
 801673a:	4553      	cmp	r3, sl
 801673c:	bfb8      	it	lt
 801673e:	4602      	movlt	r2, r0
 8016740:	eba2 020e 	sub.w	r2, r2, lr
 8016744:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016748:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801674c:	9b02      	ldr	r3, [sp, #8]
 801674e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016752:	4411      	add	r1, r2
 8016754:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016758:	f8ad c01e 	strh.w	ip, [sp, #30]
 801675c:	4413      	add	r3, r2
 801675e:	b289      	uxth	r1, r1
 8016760:	b29b      	uxth	r3, r3
 8016762:	b208      	sxth	r0, r1
 8016764:	b21a      	sxth	r2, r3
 8016766:	4290      	cmp	r0, r2
 8016768:	bfb8      	it	lt
 801676a:	460b      	movlt	r3, r1
 801676c:	eba3 030c 	sub.w	r3, r3, ip
 8016770:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016774:	a807      	add	r0, sp, #28
 8016776:	f7fb ff6c 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 801677a:	b920      	cbnz	r0, 8016786 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801677c:	6823      	ldr	r3, [r4, #0]
 801677e:	a907      	add	r1, sp, #28
 8016780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016782:	4620      	mov	r0, r4
 8016784:	4798      	blx	r3
 8016786:	3701      	adds	r7, #1
 8016788:	b2bf      	uxth	r7, r7
 801678a:	e7a9      	b.n	80166e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801678c:	f8d9 0000 	ldr.w	r0, [r9]
 8016790:	6803      	ldr	r3, [r0, #0]
 8016792:	2101      	movs	r1, #1
 8016794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016798:	4798      	blx	r3
 801679a:	e773      	b.n	8016684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801679c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80167a0:	e7e8      	b.n	8016774 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 80167a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167a4:	4798      	blx	r3
 80167a6:	4b3f      	ldr	r3, [pc, #252]	; (80168a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80167a8:	781b      	ldrb	r3, [r3, #0]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	f43f af29 	beq.w	8016602 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80167b0:	2300      	movs	r3, #0
 80167b2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 80167b6:	882b      	ldrh	r3, [r5, #0]
 80167b8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80167bc:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80167c0:	42ab      	cmp	r3, r5
 80167c2:	f4bf af1e 	bcs.w	8016602 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80167c6:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 80167ca:	2907      	cmp	r1, #7
 80167cc:	d814      	bhi.n	80167f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 80167ce:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80167d2:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80167d6:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80167da:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80167de:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80167e2:	1c4a      	adds	r2, r1, #1
 80167e4:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 80167e8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80167ec:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80167f0:	f8a2 c002 	strh.w	ip, [r2, #2]
 80167f4:	8097      	strh	r7, [r2, #4]
 80167f6:	80d6      	strh	r6, [r2, #6]
 80167f8:	3301      	adds	r3, #1
 80167fa:	b29b      	uxth	r3, r3
 80167fc:	e7e0      	b.n	80167c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 80167fe:	2b02      	cmp	r3, #2
 8016800:	f040 8133 	bne.w	8016a6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 8016804:	4b28      	ldr	r3, [pc, #160]	; (80168a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8016806:	781b      	ldrb	r3, [r3, #0]
 8016808:	2b01      	cmp	r3, #1
 801680a:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801680e:	f000 8098 	beq.w	8016942 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 8016812:	882a      	ldrh	r2, [r5, #0]
 8016814:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 8016818:	3201      	adds	r2, #1
 801681a:	b292      	uxth	r2, r2
 801681c:	2900      	cmp	r1, #0
 801681e:	d0c2      	beq.n	80167a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8016820:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 8016824:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8016828:	441e      	add	r6, r3
 801682a:	b236      	sxth	r6, r6
 801682c:	4694      	mov	ip, r2
 801682e:	f04f 0900 	mov.w	r9, #0
 8016832:	fa1f f38c 	uxth.w	r3, ip
 8016836:	4299      	cmp	r1, r3
 8016838:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801683c:	f240 80bf 	bls.w	80169be <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 8016840:	4427      	add	r7, r4
 8016842:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8016846:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801684a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 801684e:	4283      	cmp	r3, r0
 8016850:	f340 80a1 	ble.w	8016996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 8016854:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 8016858:	4406      	add	r6, r0
 801685a:	b236      	sxth	r6, r6
 801685c:	429e      	cmp	r6, r3
 801685e:	bfa8      	it	ge
 8016860:	461e      	movge	r6, r3
 8016862:	46e1      	mov	r9, ip
 8016864:	f10c 0c01 	add.w	ip, ip, #1
 8016868:	e7e3      	b.n	8016832 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 801686a:	d10a      	bne.n	8016882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 801686c:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 8016870:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 8016874:	4562      	cmp	r2, ip
 8016876:	bfb8      	it	lt
 8016878:	4662      	movlt	r2, ip
 801687a:	4288      	cmp	r0, r1
 801687c:	bfb8      	it	lt
 801687e:	461f      	movlt	r7, r3
 8016880:	e087      	b.n	8016992 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 8016882:	428a      	cmp	r2, r1
 8016884:	bfb8      	it	lt
 8016886:	460a      	movlt	r2, r1
 8016888:	e083      	b.n	8016992 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801688a:	bf00      	nop
 801688c:	20025894 	.word	0x20025894
 8016890:	200258a0 	.word	0x200258a0
 8016894:	200002a4 	.word	0x200002a4
 8016898:	2002585c 	.word	0x2002585c
 801689c:	20025852 	.word	0x20025852
 80168a0:	20025850 	.word	0x20025850
 80168a4:	2002585a 	.word	0x2002585a
 80168a8:	20025854 	.word	0x20025854
 80168ac:	19a1      	adds	r1, r4, r6
 80168ae:	ab07      	add	r3, sp, #28
 80168b0:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80168b4:	6849      	ldr	r1, [r1, #4]
 80168b6:	c303      	stmia	r3!, {r0, r1}
 80168b8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80168bc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80168c0:	2b13      	cmp	r3, #19
 80168c2:	bfd8      	it	le
 80168c4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80168c8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80168cc:	440b      	add	r3, r1
 80168ce:	1a9b      	subs	r3, r3, r2
 80168d0:	a807      	add	r0, sp, #28
 80168d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80168d6:	f7fe ffc9 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80168da:	a807      	add	r0, sp, #28
 80168dc:	f7fb feb9 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 80168e0:	bb78      	cbnz	r0, 8016942 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 80168e2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80168e6:	f8d9 0000 	ldr.w	r0, [r9]
 80168ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80168ee:	f8d0 e000 	ldr.w	lr, [r0]
 80168f2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80168f6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80168fa:	f1bc 0f14 	cmp.w	ip, #20
 80168fe:	bfa8      	it	ge
 8016900:	f04f 0c14 	movge.w	ip, #20
 8016904:	fa1f fc8c 	uxth.w	ip, ip
 8016908:	f8cd c000 	str.w	ip, [sp]
 801690c:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 8016910:	47d8      	blx	fp
 8016912:	4683      	mov	fp, r0
 8016914:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016918:	a807      	add	r0, sp, #28
 801691a:	f7fe ff8d 	bl	8015838 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801691e:	6823      	ldr	r3, [r4, #0]
 8016920:	4426      	add	r6, r4
 8016922:	4620      	mov	r0, r4
 8016924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016926:	a907      	add	r1, sp, #28
 8016928:	4798      	blx	r3
 801692a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801692e:	eba0 000b 	sub.w	r0, r0, fp
 8016932:	b200      	sxth	r0, r0
 8016934:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 8016938:	b918      	cbnz	r0, 8016942 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801693a:	b2b9      	uxth	r1, r7
 801693c:	4650      	mov	r0, sl
 801693e:	f7ff fa79 	bl	8015e34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016942:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8016946:	f1bb 0f00 	cmp.w	fp, #0
 801694a:	f43f af2c 	beq.w	80167a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801694e:	882b      	ldrh	r3, [r5, #0]
 8016950:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8016954:	3301      	adds	r3, #1
 8016956:	b29b      	uxth	r3, r3
 8016958:	2700      	movs	r7, #0
 801695a:	b299      	uxth	r1, r3
 801695c:	458b      	cmp	fp, r1
 801695e:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 8016962:	d9a3      	bls.n	80168ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 8016964:	4426      	add	r6, r4
 8016966:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801696a:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 801696e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8016972:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 8016976:	4408      	add	r0, r1
 8016978:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 801697c:	4461      	add	r1, ip
 801697e:	b200      	sxth	r0, r0
 8016980:	b209      	sxth	r1, r1
 8016982:	4288      	cmp	r0, r1
 8016984:	f6bf af71 	bge.w	801686a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8016988:	4584      	cmp	ip, r0
 801698a:	4662      	mov	r2, ip
 801698c:	461f      	mov	r7, r3
 801698e:	bfb8      	it	lt
 8016990:	4602      	movlt	r2, r0
 8016992:	3301      	adds	r3, #1
 8016994:	e7e1      	b.n	801695a <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 8016996:	d10e      	bne.n	80169b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 8016998:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801699c:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 80169a0:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 80169a4:	4473      	add	r3, lr
 80169a6:	b21b      	sxth	r3, r3
 80169a8:	429e      	cmp	r6, r3
 80169aa:	bfa8      	it	ge
 80169ac:	461e      	movge	r6, r3
 80169ae:	4287      	cmp	r7, r0
 80169b0:	bfb8      	it	lt
 80169b2:	46e1      	movlt	r9, ip
 80169b4:	e756      	b.n	8016864 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 80169b6:	4286      	cmp	r6, r0
 80169b8:	bfa8      	it	ge
 80169ba:	4606      	movge	r6, r0
 80169bc:	e752      	b.n	8016864 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 80169be:	eb0a 0007 	add.w	r0, sl, r7
 80169c2:	4427      	add	r7, r4
 80169c4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80169c8:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 80169cc:	f1bb 0f13 	cmp.w	fp, #19
 80169d0:	bfde      	ittt	le
 80169d2:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 80169d6:	445e      	addle	r6, fp
 80169d8:	b236      	sxthle	r6, r6
 80169da:	f7fb fe3a 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 80169de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80169e2:	2800      	cmp	r0, #0
 80169e4:	f47f af1a 	bne.w	801681c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 80169e8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80169ec:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80169f0:	482a      	ldr	r0, [pc, #168]	; (8016a9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 80169f2:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 80169f6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80169fa:	6800      	ldr	r0, [r0, #0]
 80169fc:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016a00:	1ab6      	subs	r6, r6, r2
 8016a02:	2e14      	cmp	r6, #20
 8016a04:	f8ad 201e 	strh.w	r2, [sp, #30]
 8016a08:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016a0c:	bfa8      	it	ge
 8016a0e:	2614      	movge	r6, #20
 8016a10:	f8d0 c000 	ldr.w	ip, [r0]
 8016a14:	b2b6      	uxth	r6, r6
 8016a16:	fa1f fb8b 	uxth.w	fp, fp
 8016a1a:	455e      	cmp	r6, fp
 8016a1c:	bf94      	ite	ls
 8016a1e:	9600      	strls	r6, [sp, #0]
 8016a20:	f8cd b000 	strhi.w	fp, [sp]
 8016a24:	b292      	uxth	r2, r2
 8016a26:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	b289      	uxth	r1, r1
 8016a2e:	47b0      	blx	r6
 8016a30:	6823      	ldr	r3, [r4, #0]
 8016a32:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a38:	a907      	add	r1, sp, #28
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	4798      	blx	r3
 8016a3e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8016a42:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016a46:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8016a4a:	1a5b      	subs	r3, r3, r1
 8016a4c:	440a      	add	r2, r1
 8016a4e:	b21b      	sxth	r3, r3
 8016a50:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8016a54:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	f47f aeda 	bne.w	8016812 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016a5e:	fa1f f189 	uxth.w	r1, r9
 8016a62:	4650      	mov	r0, sl
 8016a64:	f7ff f9e6 	bl	8015e34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016a68:	e6d3      	b.n	8016812 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016a6a:	882e      	ldrh	r6, [r5, #0]
 8016a6c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016a70:	42b3      	cmp	r3, r6
 8016a72:	f67f ae98 	bls.w	80167a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8016a76:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8016a7a:	ab07      	add	r3, sp, #28
 8016a7c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016a80:	6851      	ldr	r1, [r2, #4]
 8016a82:	c303      	stmia	r3!, {r0, r1}
 8016a84:	a807      	add	r0, sp, #28
 8016a86:	f7fb fde4 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a8a:	b920      	cbnz	r0, 8016a96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 8016a8c:	6823      	ldr	r3, [r4, #0]
 8016a8e:	a907      	add	r1, sp, #28
 8016a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a92:	4620      	mov	r0, r4
 8016a94:	4798      	blx	r3
 8016a96:	3601      	adds	r6, #1
 8016a98:	b2b6      	uxth	r6, r6
 8016a9a:	e7e7      	b.n	8016a6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 8016a9c:	2002585c 	.word	0x2002585c

08016aa0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016aa0:	4b03      	ldr	r3, [pc, #12]	; (8016ab0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	801a      	strh	r2, [r3, #0]
 8016aa6:	805a      	strh	r2, [r3, #2]
 8016aa8:	809a      	strh	r2, [r3, #4]
 8016aaa:	80da      	strh	r2, [r3, #6]
 8016aac:	4770      	bx	lr
 8016aae:	bf00      	nop
 8016ab0:	200258a0 	.word	0x200258a0

08016ab4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab8:	4606      	mov	r6, r0
 8016aba:	b09d      	sub	sp, #116	; 0x74
 8016abc:	a803      	add	r0, sp, #12
 8016abe:	4614      	mov	r4, r2
 8016ac0:	468a      	mov	sl, r1
 8016ac2:	461d      	mov	r5, r3
 8016ac4:	f000 fdd3 	bl	801766e <_ZN8touchgfx12TextProviderC1Ev>
 8016ac8:	6833      	ldr	r3, [r6, #0]
 8016aca:	4630      	mov	r0, r6
 8016acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016ace:	4798      	blx	r3
 8016ad0:	6833      	ldr	r3, [r6, #0]
 8016ad2:	4607      	mov	r7, r0
 8016ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ad6:	4630      	mov	r0, r6
 8016ad8:	4798      	blx	r3
 8016ada:	462a      	mov	r2, r5
 8016adc:	9000      	str	r0, [sp, #0]
 8016ade:	4621      	mov	r1, r4
 8016ae0:	463b      	mov	r3, r7
 8016ae2:	a803      	add	r0, sp, #12
 8016ae4:	f000 fe1e 	bl	8017724 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016ae8:	2500      	movs	r5, #0
 8016aea:	462c      	mov	r4, r5
 8016aec:	46a9      	mov	r9, r5
 8016aee:	46a8      	mov	r8, r5
 8016af0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8016af4:	2300      	movs	r3, #0
 8016af6:	9302      	str	r3, [sp, #8]
 8016af8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016afc:	429c      	cmp	r4, r3
 8016afe:	d002      	beq.n	8016b06 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8016b00:	455c      	cmp	r4, fp
 8016b02:	bf18      	it	ne
 8016b04:	4625      	movne	r5, r4
 8016b06:	ab02      	add	r3, sp, #8
 8016b08:	4632      	mov	r2, r6
 8016b0a:	4651      	mov	r1, sl
 8016b0c:	a803      	add	r0, sp, #12
 8016b0e:	f001 f90b 	bl	8017d28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016b12:	4604      	mov	r4, r0
 8016b14:	b108      	cbz	r0, 8016b1a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8016b16:	280a      	cmp	r0, #10
 8016b18:	d10a      	bne.n	8016b30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8016b1a:	45c1      	cmp	r9, r8
 8016b1c:	bf38      	it	cc
 8016b1e:	46c1      	movcc	r9, r8
 8016b20:	f04f 0800 	mov.w	r8, #0
 8016b24:	2c00      	cmp	r4, #0
 8016b26:	d1e5      	bne.n	8016af4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016b28:	4648      	mov	r0, r9
 8016b2a:	b01d      	add	sp, #116	; 0x74
 8016b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b30:	9a02      	ldr	r2, [sp, #8]
 8016b32:	2a00      	cmp	r2, #0
 8016b34:	d0de      	beq.n	8016af4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016b36:	7b57      	ldrb	r7, [r2, #13]
 8016b38:	6833      	ldr	r3, [r6, #0]
 8016b3a:	8894      	ldrh	r4, [r2, #4]
 8016b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b3e:	007f      	lsls	r7, r7, #1
 8016b40:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8016b44:	7a97      	ldrb	r7, [r2, #10]
 8016b46:	4629      	mov	r1, r5
 8016b48:	4307      	orrs	r7, r0
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	4798      	blx	r3
 8016b4e:	4438      	add	r0, r7
 8016b50:	4480      	add	r8, r0
 8016b52:	fa1f f888 	uxth.w	r8, r8
 8016b56:	e7e5      	b.n	8016b24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08016b58 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016b58:	b508      	push	{r3, lr}
 8016b5a:	6803      	ldr	r3, [r0, #0]
 8016b5c:	68db      	ldr	r3, [r3, #12]
 8016b5e:	4798      	blx	r3
 8016b60:	b128      	cbz	r0, 8016b6e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8016b62:	7b43      	ldrb	r3, [r0, #13]
 8016b64:	7a80      	ldrb	r0, [r0, #10]
 8016b66:	005b      	lsls	r3, r3, #1
 8016b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016b6c:	4318      	orrs	r0, r3
 8016b6e:	bd08      	pop	{r3, pc}

08016b70 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016b70:	b40e      	push	{r1, r2, r3}
 8016b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b74:	b09e      	sub	sp, #120	; 0x78
 8016b76:	ab23      	add	r3, sp, #140	; 0x8c
 8016b78:	4605      	mov	r5, r0
 8016b7a:	f853 4b04 	ldr.w	r4, [r3], #4
 8016b7e:	9303      	str	r3, [sp, #12]
 8016b80:	a805      	add	r0, sp, #20
 8016b82:	f000 fd74 	bl	801766e <_ZN8touchgfx12TextProviderC1Ev>
 8016b86:	682b      	ldr	r3, [r5, #0]
 8016b88:	4628      	mov	r0, r5
 8016b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016b8c:	4798      	blx	r3
 8016b8e:	682b      	ldr	r3, [r5, #0]
 8016b90:	4606      	mov	r6, r0
 8016b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016b94:	4628      	mov	r0, r5
 8016b96:	4798      	blx	r3
 8016b98:	4633      	mov	r3, r6
 8016b9a:	ae1e      	add	r6, sp, #120	; 0x78
 8016b9c:	4621      	mov	r1, r4
 8016b9e:	9000      	str	r0, [sp, #0]
 8016ba0:	9a03      	ldr	r2, [sp, #12]
 8016ba2:	2400      	movs	r4, #0
 8016ba4:	a805      	add	r0, sp, #20
 8016ba6:	f000 fdbd 	bl	8017724 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016baa:	f846 4d68 	str.w	r4, [r6, #-104]!
 8016bae:	462a      	mov	r2, r5
 8016bb0:	4633      	mov	r3, r6
 8016bb2:	4621      	mov	r1, r4
 8016bb4:	a805      	add	r0, sp, #20
 8016bb6:	f001 f8b7 	bl	8017d28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016bba:	b1f0      	cbz	r0, 8016bfa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8016bbc:	280a      	cmp	r0, #10
 8016bbe:	d018      	beq.n	8016bf2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8016bc0:	9f04      	ldr	r7, [sp, #16]
 8016bc2:	b1b7      	cbz	r7, 8016bf2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8016bc4:	7b78      	ldrb	r0, [r7, #13]
 8016bc6:	7a3b      	ldrb	r3, [r7, #8]
 8016bc8:	88ea      	ldrh	r2, [r5, #6]
 8016bca:	00c1      	lsls	r1, r0, #3
 8016bcc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016bd0:	4319      	orrs	r1, r3
 8016bd2:	0643      	lsls	r3, r0, #25
 8016bd4:	bf44      	itt	mi
 8016bd6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8016bda:	b219      	sxthmi	r1, r3
 8016bdc:	0100      	lsls	r0, r0, #4
 8016bde:	79fb      	ldrb	r3, [r7, #7]
 8016be0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016be4:	4303      	orrs	r3, r0
 8016be6:	4413      	add	r3, r2
 8016be8:	1a5b      	subs	r3, r3, r1
 8016bea:	b21b      	sxth	r3, r3
 8016bec:	429c      	cmp	r4, r3
 8016bee:	bfb8      	it	lt
 8016bf0:	461c      	movlt	r4, r3
 8016bf2:	4633      	mov	r3, r6
 8016bf4:	462a      	mov	r2, r5
 8016bf6:	2100      	movs	r1, #0
 8016bf8:	e7dc      	b.n	8016bb4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8016bfa:	b2a0      	uxth	r0, r4
 8016bfc:	b01e      	add	sp, #120	; 0x78
 8016bfe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016c02:	b003      	add	sp, #12
 8016c04:	4770      	bx	lr

08016c06 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8016c06:	7a43      	ldrb	r3, [r0, #9]
 8016c08:	8880      	ldrh	r0, [r0, #4]
 8016c0a:	4418      	add	r0, r3
 8016c0c:	b280      	uxth	r0, r0
 8016c0e:	4770      	bx	lr

08016c10 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8016c10:	6803      	ldr	r3, [r0, #0]
 8016c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c14:	4718      	bx	r3

08016c16 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8016c16:	b40e      	push	{r1, r2, r3}
 8016c18:	b570      	push	{r4, r5, r6, lr}
 8016c1a:	b09d      	sub	sp, #116	; 0x74
 8016c1c:	ab21      	add	r3, sp, #132	; 0x84
 8016c1e:	4604      	mov	r4, r0
 8016c20:	f853 5b04 	ldr.w	r5, [r3], #4
 8016c24:	9302      	str	r3, [sp, #8]
 8016c26:	a803      	add	r0, sp, #12
 8016c28:	f000 fd21 	bl	801766e <_ZN8touchgfx12TextProviderC1Ev>
 8016c2c:	6823      	ldr	r3, [r4, #0]
 8016c2e:	4620      	mov	r0, r4
 8016c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c32:	4798      	blx	r3
 8016c34:	6823      	ldr	r3, [r4, #0]
 8016c36:	4606      	mov	r6, r0
 8016c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	4798      	blx	r3
 8016c3e:	4633      	mov	r3, r6
 8016c40:	9000      	str	r0, [sp, #0]
 8016c42:	9a02      	ldr	r2, [sp, #8]
 8016c44:	4629      	mov	r1, r5
 8016c46:	a803      	add	r0, sp, #12
 8016c48:	f000 fd6c 	bl	8017724 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016c4c:	a803      	add	r0, sp, #12
 8016c4e:	f001 f939 	bl	8017ec4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016c52:	2401      	movs	r4, #1
 8016c54:	b2a3      	uxth	r3, r4
 8016c56:	b140      	cbz	r0, 8016c6a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8016c58:	280a      	cmp	r0, #10
 8016c5a:	bf08      	it	eq
 8016c5c:	3301      	addeq	r3, #1
 8016c5e:	a803      	add	r0, sp, #12
 8016c60:	bf08      	it	eq
 8016c62:	b21c      	sxtheq	r4, r3
 8016c64:	f001 f92e 	bl	8017ec4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016c68:	e7f4      	b.n	8016c54 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	b01d      	add	sp, #116	; 0x74
 8016c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c72:	b003      	add	sp, #12
 8016c74:	4770      	bx	lr

08016c76 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016c76:	b40e      	push	{r1, r2, r3}
 8016c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c7a:	b09e      	sub	sp, #120	; 0x78
 8016c7c:	ab23      	add	r3, sp, #140	; 0x8c
 8016c7e:	4604      	mov	r4, r0
 8016c80:	f853 5b04 	ldr.w	r5, [r3], #4
 8016c84:	9303      	str	r3, [sp, #12]
 8016c86:	a805      	add	r0, sp, #20
 8016c88:	f000 fcf1 	bl	801766e <_ZN8touchgfx12TextProviderC1Ev>
 8016c8c:	6823      	ldr	r3, [r4, #0]
 8016c8e:	4620      	mov	r0, r4
 8016c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c92:	4798      	blx	r3
 8016c94:	6823      	ldr	r3, [r4, #0]
 8016c96:	4606      	mov	r6, r0
 8016c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c9a:	4620      	mov	r0, r4
 8016c9c:	4798      	blx	r3
 8016c9e:	4633      	mov	r3, r6
 8016ca0:	4629      	mov	r1, r5
 8016ca2:	9000      	str	r0, [sp, #0]
 8016ca4:	9a03      	ldr	r2, [sp, #12]
 8016ca6:	a805      	add	r0, sp, #20
 8016ca8:	ad1e      	add	r5, sp, #120	; 0x78
 8016caa:	f000 fd3b 	bl	8017724 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016cae:	2100      	movs	r1, #0
 8016cb0:	f845 1d68 	str.w	r1, [r5, #-104]!
 8016cb4:	4622      	mov	r2, r4
 8016cb6:	462b      	mov	r3, r5
 8016cb8:	a805      	add	r0, sp, #20
 8016cba:	f001 f835 	bl	8017d28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016cbe:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8016cc2:	b1d8      	cbz	r0, 8016cfc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8016cc4:	280a      	cmp	r0, #10
 8016cc6:	d012      	beq.n	8016cee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016cc8:	9804      	ldr	r0, [sp, #16]
 8016cca:	b180      	cbz	r0, 8016cee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016ccc:	7b47      	ldrb	r7, [r0, #13]
 8016cce:	88e2      	ldrh	r2, [r4, #6]
 8016cd0:	00fb      	lsls	r3, r7, #3
 8016cd2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016cd6:	7a03      	ldrb	r3, [r0, #8]
 8016cd8:	430b      	orrs	r3, r1
 8016cda:	0679      	lsls	r1, r7, #25
 8016cdc:	bf44      	itt	mi
 8016cde:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016ce2:	b21b      	sxthmi	r3, r3
 8016ce4:	1ad3      	subs	r3, r2, r3
 8016ce6:	b21b      	sxth	r3, r3
 8016ce8:	429e      	cmp	r6, r3
 8016cea:	bfa8      	it	ge
 8016cec:	461e      	movge	r6, r3
 8016cee:	462b      	mov	r3, r5
 8016cf0:	4622      	mov	r2, r4
 8016cf2:	2100      	movs	r1, #0
 8016cf4:	a805      	add	r0, sp, #20
 8016cf6:	f001 f817 	bl	8017d28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016cfa:	e7e2      	b.n	8016cc2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	b01e      	add	sp, #120	; 0x78
 8016d00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016d04:	b003      	add	sp, #12
 8016d06:	4770      	bx	lr

08016d08 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8016d08:	b513      	push	{r0, r1, r4, lr}
 8016d0a:	6803      	ldr	r3, [r0, #0]
 8016d0c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016d10:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016d14:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016d18:	2400      	movs	r4, #0
 8016d1a:	9400      	str	r4, [sp, #0]
 8016d1c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016d20:	691b      	ldr	r3, [r3, #16]
 8016d22:	4669      	mov	r1, sp
 8016d24:	4798      	blx	r3
 8016d26:	b002      	add	sp, #8
 8016d28:	bd10      	pop	{r4, pc}

08016d2a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8016d2a:	b538      	push	{r3, r4, r5, lr}
 8016d2c:	680b      	ldr	r3, [r1, #0]
 8016d2e:	460c      	mov	r4, r1
 8016d30:	68db      	ldr	r3, [r3, #12]
 8016d32:	4605      	mov	r5, r0
 8016d34:	4798      	blx	r3
 8016d36:	6823      	ldr	r3, [r4, #0]
 8016d38:	4620      	mov	r0, r4
 8016d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d3c:	4629      	mov	r1, r5
 8016d3e:	4798      	blx	r3
 8016d40:	4628      	mov	r0, r5
 8016d42:	bd38      	pop	{r3, r4, r5, pc}

08016d44 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8016d44:	b410      	push	{r4}
 8016d46:	880a      	ldrh	r2, [r1, #0]
 8016d48:	8884      	ldrh	r4, [r0, #4]
 8016d4a:	4422      	add	r2, r4
 8016d4c:	800a      	strh	r2, [r1, #0]
 8016d4e:	88c4      	ldrh	r4, [r0, #6]
 8016d50:	884a      	ldrh	r2, [r1, #2]
 8016d52:	4422      	add	r2, r4
 8016d54:	804a      	strh	r2, [r1, #2]
 8016d56:	6940      	ldr	r0, [r0, #20]
 8016d58:	b120      	cbz	r0, 8016d64 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8016d5a:	6803      	ldr	r3, [r0, #0]
 8016d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d62:	4718      	bx	r3
 8016d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d68:	4770      	bx	lr

08016d6a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8016d6a:	b570      	push	{r4, r5, r6, lr}
 8016d6c:	8882      	ldrh	r2, [r0, #4]
 8016d6e:	880b      	ldrh	r3, [r1, #0]
 8016d70:	4413      	add	r3, r2
 8016d72:	800b      	strh	r3, [r1, #0]
 8016d74:	88c2      	ldrh	r2, [r0, #6]
 8016d76:	884b      	ldrh	r3, [r1, #2]
 8016d78:	460c      	mov	r4, r1
 8016d7a:	4413      	add	r3, r2
 8016d7c:	804b      	strh	r3, [r1, #2]
 8016d7e:	4605      	mov	r5, r0
 8016d80:	1d01      	adds	r1, r0, #4
 8016d82:	4620      	mov	r0, r4
 8016d84:	f7fb fc22 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 8016d88:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	dd0b      	ble.n	8016da8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016d90:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	dd07      	ble.n	8016da8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016d98:	6968      	ldr	r0, [r5, #20]
 8016d9a:	b128      	cbz	r0, 8016da8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016d9c:	6803      	ldr	r3, [r0, #0]
 8016d9e:	4621      	mov	r1, r4
 8016da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016da6:	4718      	bx	r3
 8016da8:	bd70      	pop	{r4, r5, r6, pc}
	...

08016dac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016dac:	b570      	push	{r4, r5, r6, lr}
 8016dae:	8882      	ldrh	r2, [r0, #4]
 8016db0:	880b      	ldrh	r3, [r1, #0]
 8016db2:	4413      	add	r3, r2
 8016db4:	800b      	strh	r3, [r1, #0]
 8016db6:	88c2      	ldrh	r2, [r0, #6]
 8016db8:	884b      	ldrh	r3, [r1, #2]
 8016dba:	460c      	mov	r4, r1
 8016dbc:	4413      	add	r3, r2
 8016dbe:	804b      	strh	r3, [r1, #2]
 8016dc0:	4605      	mov	r5, r0
 8016dc2:	1d01      	adds	r1, r0, #4
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	f7fb fc01 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 8016dca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	dd19      	ble.n	8016e06 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016dd2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	dd15      	ble.n	8016e06 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016dda:	6968      	ldr	r0, [r5, #20]
 8016ddc:	b128      	cbz	r0, 8016dea <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8016dde:	6803      	ldr	r3, [r0, #0]
 8016de0:	4621      	mov	r1, r4
 8016de2:	691b      	ldr	r3, [r3, #16]
 8016de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016de8:	4718      	bx	r3
 8016dea:	4b07      	ldr	r3, [pc, #28]	; (8016e08 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	3304      	adds	r3, #4
 8016df0:	429d      	cmp	r5, r3
 8016df2:	d108      	bne.n	8016e06 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016df4:	f7fe fec8 	bl	8015b88 <_ZN8touchgfx11Application11getInstanceEv>
 8016df8:	6803      	ldr	r3, [r0, #0]
 8016dfa:	6821      	ldr	r1, [r4, #0]
 8016dfc:	6862      	ldr	r2, [r4, #4]
 8016dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e04:	4718      	bx	r3
 8016e06:	bd70      	pop	{r4, r5, r6, pc}
 8016e08:	20025898 	.word	0x20025898

08016e0c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016e0c:	b570      	push	{r4, r5, r6, lr}
 8016e0e:	4604      	mov	r4, r0
 8016e10:	4616      	mov	r6, r2
 8016e12:	460d      	mov	r5, r1
 8016e14:	b901      	cbnz	r1, 8016e18 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8016e16:	b192      	cbz	r2, 8016e3e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8016e18:	6823      	ldr	r3, [r4, #0]
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	699b      	ldr	r3, [r3, #24]
 8016e1e:	4798      	blx	r3
 8016e20:	88e2      	ldrh	r2, [r4, #6]
 8016e22:	88a1      	ldrh	r1, [r4, #4]
 8016e24:	4432      	add	r2, r6
 8016e26:	4429      	add	r1, r5
 8016e28:	4620      	mov	r0, r4
 8016e2a:	b212      	sxth	r2, r2
 8016e2c:	b209      	sxth	r1, r1
 8016e2e:	f7f7 fe02 	bl	800ea36 <_ZN8touchgfx8Drawable5setXYEss>
 8016e32:	6823      	ldr	r3, [r4, #0]
 8016e34:	4620      	mov	r0, r4
 8016e36:	699b      	ldr	r3, [r3, #24]
 8016e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e3c:	4718      	bx	r3
 8016e3e:	bd70      	pop	{r4, r5, r6, pc}

08016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8016e40:	b510      	push	{r4, lr}
 8016e42:	4604      	mov	r4, r0
 8016e44:	4608      	mov	r0, r1
 8016e46:	2300      	movs	r3, #0
 8016e48:	8023      	strh	r3, [r4, #0]
 8016e4a:	8063      	strh	r3, [r4, #2]
 8016e4c:	6803      	ldr	r3, [r0, #0]
 8016e4e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016e52:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016e56:	80a1      	strh	r1, [r4, #4]
 8016e58:	80e2      	strh	r2, [r4, #6]
 8016e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e5c:	4621      	mov	r1, r4
 8016e5e:	4798      	blx	r3
 8016e60:	4620      	mov	r0, r4
 8016e62:	bd10      	pop	{r4, pc}

08016e64 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8016e64:	b530      	push	{r4, r5, lr}
 8016e66:	8083      	strh	r3, [r0, #4]
 8016e68:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016e6c:	80c3      	strh	r3, [r0, #6]
 8016e6e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8016e72:	7203      	strb	r3, [r0, #8]
 8016e74:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016e78:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8016e7c:	7243      	strb	r3, [r0, #9]
 8016e7e:	7a83      	ldrb	r3, [r0, #10]
 8016e80:	6141      	str	r1, [r0, #20]
 8016e82:	f365 0306 	bfi	r3, r5, #0, #7
 8016e86:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8016e8a:	8302      	strh	r2, [r0, #24]
 8016e8c:	f365 13c7 	bfi	r3, r5, #7, #1
 8016e90:	7283      	strb	r3, [r0, #10]
 8016e92:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016e96:	72c3      	strb	r3, [r0, #11]
 8016e98:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016e9c:	7303      	strb	r3, [r0, #12]
 8016e9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016ea2:	81c3      	strh	r3, [r0, #14]
 8016ea4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8016ea8:	8203      	strh	r3, [r0, #16]
 8016eaa:	4b01      	ldr	r3, [pc, #4]	; (8016eb0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8016eac:	6003      	str	r3, [r0, #0]
 8016eae:	bd30      	pop	{r4, r5, pc}
 8016eb0:	08029854 	.word	0x08029854

08016eb4 <_ZNK8touchgfx9ConstFont4findEt>:
 8016eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eb6:	6944      	ldr	r4, [r0, #20]
 8016eb8:	b3bc      	cbz	r4, 8016f2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016eba:	88a3      	ldrh	r3, [r4, #4]
 8016ebc:	8b02      	ldrh	r2, [r0, #24]
 8016ebe:	1acb      	subs	r3, r1, r3
 8016ec0:	f102 32ff 	add.w	r2, r2, #4294967295
 8016ec4:	d431      	bmi.n	8016f2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016ec6:	4293      	cmp	r3, r2
 8016ec8:	dd0c      	ble.n	8016ee4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8016eca:	230e      	movs	r3, #14
 8016ecc:	fb03 4302 	mla	r3, r3, r2, r4
 8016ed0:	889b      	ldrh	r3, [r3, #4]
 8016ed2:	1a5b      	subs	r3, r3, r1
 8016ed4:	1ad3      	subs	r3, r2, r3
 8016ed6:	429a      	cmp	r2, r3
 8016ed8:	db27      	blt.n	8016f2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	bfbc      	itt	lt
 8016ede:	2302      	movlt	r3, #2
 8016ee0:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016ee4:	2500      	movs	r5, #0
 8016ee6:	260e      	movs	r6, #14
 8016ee8:	4295      	cmp	r5, r2
 8016eea:	dc1e      	bgt.n	8016f2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016eec:	fb06 4003 	mla	r0, r6, r3, r4
 8016ef0:	8887      	ldrh	r7, [r0, #4]
 8016ef2:	42b9      	cmp	r1, r7
 8016ef4:	d01a      	beq.n	8016f2c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8016ef6:	d20d      	bcs.n	8016f14 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8016ef8:	1e5a      	subs	r2, r3, #1
 8016efa:	4295      	cmp	r5, r2
 8016efc:	dc15      	bgt.n	8016f2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016efe:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016f02:	1a5b      	subs	r3, r3, r1
 8016f04:	1ad3      	subs	r3, r2, r3
 8016f06:	429a      	cmp	r2, r3
 8016f08:	db0f      	blt.n	8016f2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016f0a:	429d      	cmp	r5, r3
 8016f0c:	ddec      	ble.n	8016ee8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016f0e:	1953      	adds	r3, r2, r5
 8016f10:	105b      	asrs	r3, r3, #1
 8016f12:	e7e9      	b.n	8016ee8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016f14:	1c5d      	adds	r5, r3, #1
 8016f16:	42aa      	cmp	r2, r5
 8016f18:	db07      	blt.n	8016f2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016f1a:	8a43      	ldrh	r3, [r0, #18]
 8016f1c:	1acb      	subs	r3, r1, r3
 8016f1e:	442b      	add	r3, r5
 8016f20:	429d      	cmp	r5, r3
 8016f22:	dc02      	bgt.n	8016f2a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016f24:	429a      	cmp	r2, r3
 8016f26:	dadf      	bge.n	8016ee8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016f28:	e7f1      	b.n	8016f0e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8016f2a:	2000      	movs	r0, #0
 8016f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f2e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f30:	4604      	mov	r4, r0
 8016f32:	4617      	mov	r7, r2
 8016f34:	461e      	mov	r6, r3
 8016f36:	b911      	cbnz	r1, 8016f3e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8016f38:	2500      	movs	r5, #0
 8016f3a:	4628      	mov	r0, r5
 8016f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f3e:	290a      	cmp	r1, #10
 8016f40:	d0fa      	beq.n	8016f38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016f42:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016f46:	4291      	cmp	r1, r2
 8016f48:	d0f6      	beq.n	8016f38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016f4a:	f242 020b 	movw	r2, #8203	; 0x200b
 8016f4e:	4291      	cmp	r1, r2
 8016f50:	d0f2      	beq.n	8016f38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016f52:	f7ff ffaf 	bl	8016eb4 <_ZNK8touchgfx9ConstFont4findEt>
 8016f56:	4605      	mov	r5, r0
 8016f58:	b950      	cbnz	r0, 8016f70 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016f5a:	6823      	ldr	r3, [r4, #0]
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	691b      	ldr	r3, [r3, #16]
 8016f60:	4798      	blx	r3
 8016f62:	4601      	mov	r1, r0
 8016f64:	4620      	mov	r0, r4
 8016f66:	f7ff ffa5 	bl	8016eb4 <_ZNK8touchgfx9ConstFont4findEt>
 8016f6a:	4605      	mov	r5, r0
 8016f6c:	2800      	cmp	r0, #0
 8016f6e:	d0e3      	beq.n	8016f38 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016f70:	6823      	ldr	r3, [r4, #0]
 8016f72:	4629      	mov	r1, r5
 8016f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f76:	4620      	mov	r0, r4
 8016f78:	4798      	blx	r3
 8016f7a:	6038      	str	r0, [r7, #0]
 8016f7c:	6823      	ldr	r3, [r4, #0]
 8016f7e:	4620      	mov	r0, r4
 8016f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f82:	4798      	blx	r3
 8016f84:	7030      	strb	r0, [r6, #0]
 8016f86:	e7d8      	b.n	8016f3a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016f88 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016f88:	2000      	movs	r0, #0
 8016f8a:	4770      	bx	lr

08016f8c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016f8c:	2001      	movs	r0, #1
 8016f8e:	4770      	bx	lr

08016f90 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8016f90:	2002      	movs	r0, #2
 8016f92:	4770      	bx	lr

08016f94 <_ZN8touchgfx12GestureEventD1Ev>:
 8016f94:	4770      	bx	lr

08016f96 <_ZN8touchgfx9DragEventD1Ev>:
 8016f96:	4770      	bx	lr

08016f98 <_ZN8touchgfx10ClickEventD1Ev>:
 8016f98:	4770      	bx	lr

08016f9a <_ZN8touchgfx10ClickEventD0Ev>:
 8016f9a:	b510      	push	{r4, lr}
 8016f9c:	210c      	movs	r1, #12
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	f00f fb21 	bl	80265e6 <_ZdlPvj>
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	bd10      	pop	{r4, pc}

08016fa8 <_ZN8touchgfx9DragEventD0Ev>:
 8016fa8:	b510      	push	{r4, lr}
 8016faa:	2110      	movs	r1, #16
 8016fac:	4604      	mov	r4, r0
 8016fae:	f00f fb1a 	bl	80265e6 <_ZdlPvj>
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	bd10      	pop	{r4, pc}

08016fb6 <_ZN8touchgfx12GestureEventD0Ev>:
 8016fb6:	b510      	push	{r4, lr}
 8016fb8:	210c      	movs	r1, #12
 8016fba:	4604      	mov	r4, r0
 8016fbc:	f00f fb13 	bl	80265e6 <_ZdlPvj>
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	bd10      	pop	{r4, pc}

08016fc4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016fc4:	b530      	push	{r4, r5, lr}
 8016fc6:	460d      	mov	r5, r1
 8016fc8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016fca:	b087      	sub	sp, #28
 8016fcc:	4604      	mov	r4, r0
 8016fce:	b301      	cbz	r1, 8017012 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016fd0:	a801      	add	r0, sp, #4
 8016fd2:	f7ff ff35 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016fd6:	892a      	ldrh	r2, [r5, #8]
 8016fd8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016fdc:	7928      	ldrb	r0, [r5, #4]
 8016fde:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016fe2:	f88d 0010 	strb.w	r0, [sp, #16]
 8016fe6:	1ad2      	subs	r2, r2, r3
 8016fe8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016fea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016fec:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016ff0:	441a      	add	r2, r3
 8016ff2:	896b      	ldrh	r3, [r5, #10]
 8016ff4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016ff8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016ffc:	1b5b      	subs	r3, r3, r5
 8016ffe:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8017000:	442b      	add	r3, r5
 8017002:	4d05      	ldr	r5, [pc, #20]	; (8017018 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017004:	9503      	str	r5, [sp, #12]
 8017006:	f8ad 3016 	strh.w	r3, [sp, #22]
 801700a:	6803      	ldr	r3, [r0, #0]
 801700c:	a903      	add	r1, sp, #12
 801700e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017010:	4798      	blx	r3
 8017012:	b007      	add	sp, #28
 8017014:	bd30      	pop	{r4, r5, pc}
 8017016:	bf00      	nop
 8017018:	080298dc 	.word	0x080298dc

0801701c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017020:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017022:	b08a      	sub	sp, #40	; 0x28
 8017024:	4604      	mov	r4, r0
 8017026:	460d      	mov	r5, r1
 8017028:	b113      	cbz	r3, 8017030 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801702a:	790b      	ldrb	r3, [r1, #4]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d044      	beq.n	80170ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017030:	f104 0804 	add.w	r8, r4, #4
 8017034:	4641      	mov	r1, r8
 8017036:	a803      	add	r0, sp, #12
 8017038:	f7ff ff02 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801703c:	792b      	ldrb	r3, [r5, #4]
 801703e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017042:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8017046:	b983      	cbnz	r3, 801706a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8017048:	892a      	ldrh	r2, [r5, #8]
 801704a:	88e9      	ldrh	r1, [r5, #6]
 801704c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8017050:	1b92      	subs	r2, r2, r6
 8017052:	1bc9      	subs	r1, r1, r7
 8017054:	9301      	str	r3, [sp, #4]
 8017056:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801705a:	9300      	str	r3, [sp, #0]
 801705c:	b212      	sxth	r2, r2
 801705e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8017062:	b209      	sxth	r1, r1
 8017064:	4640      	mov	r0, r8
 8017066:	f7fb f9cd 	bl	8012404 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801706a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801706c:	b329      	cbz	r1, 80170ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801706e:	a805      	add	r0, sp, #20
 8017070:	f7ff fee6 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017074:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017078:	792b      	ldrb	r3, [r5, #4]
 801707a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801707c:	f88d 3020 	strb.w	r3, [sp, #32]
 8017080:	1abf      	subs	r7, r7, r2
 8017082:	88ea      	ldrh	r2, [r5, #6]
 8017084:	4417      	add	r7, r2
 8017086:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8017088:	4417      	add	r7, r2
 801708a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801708e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8017092:	1ab6      	subs	r6, r6, r2
 8017094:	892a      	ldrh	r2, [r5, #8]
 8017096:	4416      	add	r6, r2
 8017098:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801709a:	4416      	add	r6, r2
 801709c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80170a0:	4a07      	ldr	r2, [pc, #28]	; (80170c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80170a2:	9207      	str	r2, [sp, #28]
 80170a4:	2600      	movs	r6, #0
 80170a6:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80170aa:	6803      	ldr	r3, [r0, #0]
 80170ac:	a907      	add	r1, sp, #28
 80170ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170b0:	4798      	blx	r3
 80170b2:	792b      	ldrb	r3, [r5, #4]
 80170b4:	b10b      	cbz	r3, 80170ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80170b6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80170ba:	b00a      	add	sp, #40	; 0x28
 80170bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170c0:	080298b4 	.word	0x080298b4

080170c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80170c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170c8:	460c      	mov	r4, r1
 80170ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80170cc:	b088      	sub	sp, #32
 80170ce:	4605      	mov	r5, r0
 80170d0:	2900      	cmp	r1, #0
 80170d2:	d06d      	beq.n	80171b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80170d4:	4668      	mov	r0, sp
 80170d6:	f7ff feb3 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80170da:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80170dc:	88e3      	ldrh	r3, [r4, #6]
 80170de:	f9bd 8000 	ldrsh.w	r8, [sp]
 80170e2:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80170e6:	440b      	add	r3, r1
 80170e8:	b21b      	sxth	r3, r3
 80170ea:	4543      	cmp	r3, r8
 80170ec:	db31      	blt.n	8017152 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80170ee:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80170f2:	44c4      	add	ip, r8
 80170f4:	fa0f fc8c 	sxth.w	ip, ip
 80170f8:	4563      	cmp	r3, ip
 80170fa:	da2a      	bge.n	8017152 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80170fc:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80170fe:	8926      	ldrh	r6, [r4, #8]
 8017100:	4416      	add	r6, r2
 8017102:	b236      	sxth	r6, r6
 8017104:	42be      	cmp	r6, r7
 8017106:	db24      	blt.n	8017152 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017108:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801710c:	4438      	add	r0, r7
 801710e:	b200      	sxth	r0, r0
 8017110:	4286      	cmp	r6, r0
 8017112:	da1e      	bge.n	8017152 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017114:	8963      	ldrh	r3, [r4, #10]
 8017116:	4419      	add	r1, r3
 8017118:	b209      	sxth	r1, r1
 801711a:	4541      	cmp	r1, r8
 801711c:	db08      	blt.n	8017130 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801711e:	4561      	cmp	r1, ip
 8017120:	da06      	bge.n	8017130 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017122:	89a3      	ldrh	r3, [r4, #12]
 8017124:	441a      	add	r2, r3
 8017126:	b212      	sxth	r2, r2
 8017128:	42ba      	cmp	r2, r7
 801712a:	db01      	blt.n	8017130 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801712c:	4282      	cmp	r2, r0
 801712e:	db10      	blt.n	8017152 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017130:	4b21      	ldr	r3, [pc, #132]	; (80171b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8017132:	9304      	str	r3, [sp, #16]
 8017134:	2302      	movs	r3, #2
 8017136:	f88d 3014 	strb.w	r3, [sp, #20]
 801713a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801713c:	2300      	movs	r3, #0
 801713e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017142:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017146:	f8ad 301a 	strh.w	r3, [sp, #26]
 801714a:	6803      	ldr	r3, [r0, #0]
 801714c:	a904      	add	r1, sp, #16
 801714e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017150:	4798      	blx	r3
 8017152:	1d29      	adds	r1, r5, #4
 8017154:	a802      	add	r0, sp, #8
 8017156:	f7ff fe73 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801715a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801715e:	88e0      	ldrh	r0, [r4, #6]
 8017160:	7921      	ldrb	r1, [r4, #4]
 8017162:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8017166:	8922      	ldrh	r2, [r4, #8]
 8017168:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801716a:	f88d 1014 	strb.w	r1, [sp, #20]
 801716e:	eba3 0808 	sub.w	r8, r3, r8
 8017172:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017176:	1bdf      	subs	r7, r3, r7
 8017178:	b2bb      	uxth	r3, r7
 801717a:	fa1f f888 	uxth.w	r8, r8
 801717e:	8967      	ldrh	r7, [r4, #10]
 8017180:	89a4      	ldrh	r4, [r4, #12]
 8017182:	4440      	add	r0, r8
 8017184:	4460      	add	r0, ip
 8017186:	441a      	add	r2, r3
 8017188:	44b8      	add	r8, r7
 801718a:	4423      	add	r3, r4
 801718c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017190:	4433      	add	r3, r6
 8017192:	4432      	add	r2, r6
 8017194:	44e0      	add	r8, ip
 8017196:	4c09      	ldr	r4, [pc, #36]	; (80171bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017198:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801719a:	9404      	str	r4, [sp, #16]
 801719c:	f8ad 2018 	strh.w	r2, [sp, #24]
 80171a0:	f8ad 801a 	strh.w	r8, [sp, #26]
 80171a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80171a8:	6803      	ldr	r3, [r0, #0]
 80171aa:	a904      	add	r1, sp, #16
 80171ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171ae:	4798      	blx	r3
 80171b0:	b008      	add	sp, #32
 80171b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171b6:	bf00      	nop
 80171b8:	080298b4 	.word	0x080298b4
 80171bc:	080298c8 	.word	0x080298c8

080171c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80171c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171c2:	4604      	mov	r4, r0
 80171c4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80171c8:	3201      	adds	r2, #1
 80171ca:	d112      	bne.n	80171f2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80171cc:	6803      	ldr	r3, [r0, #0]
 80171ce:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80171d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80171d6:	f8ad 1004 	strh.w	r1, [sp, #4]
 80171da:	2500      	movs	r5, #0
 80171dc:	9500      	str	r5, [sp, #0]
 80171de:	466d      	mov	r5, sp
 80171e0:	4629      	mov	r1, r5
 80171e2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80171e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171e8:	4798      	blx	r3
 80171ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80171ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80171f2:	4620      	mov	r0, r4
 80171f4:	b003      	add	sp, #12
 80171f6:	bd30      	pop	{r4, r5, pc}

080171f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80171f8:	b513      	push	{r0, r1, r4, lr}
 80171fa:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80171fe:	3301      	adds	r3, #1
 8017200:	4604      	mov	r4, r0
 8017202:	d109      	bne.n	8017218 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017204:	4601      	mov	r1, r0
 8017206:	4668      	mov	r0, sp
 8017208:	f7ff fe1a 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801720c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017210:	8423      	strh	r3, [r4, #32]
 8017212:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017216:	8463      	strh	r3, [r4, #34]	; 0x22
 8017218:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801721c:	b002      	add	sp, #8
 801721e:	bd10      	pop	{r4, pc}

08017220 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8017220:	b513      	push	{r0, r1, r4, lr}
 8017222:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8017226:	3301      	adds	r3, #1
 8017228:	4604      	mov	r4, r0
 801722a:	d109      	bne.n	8017240 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801722c:	4601      	mov	r1, r0
 801722e:	4668      	mov	r0, sp
 8017230:	f7ff fe06 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017234:	f8bd 3000 	ldrh.w	r3, [sp]
 8017238:	8423      	strh	r3, [r4, #32]
 801723a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801723e:	8463      	strh	r3, [r4, #34]	; 0x22
 8017240:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8017244:	b002      	add	sp, #8
 8017246:	bd10      	pop	{r4, pc}

08017248 <_ZN8touchgfx6ScreenC1Ev>:
 8017248:	b570      	push	{r4, r5, r6, lr}
 801724a:	4605      	mov	r5, r0
 801724c:	4b16      	ldr	r3, [pc, #88]	; (80172a8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801724e:	f845 3b04 	str.w	r3, [r5], #4
 8017252:	2300      	movs	r3, #0
 8017254:	8103      	strh	r3, [r0, #8]
 8017256:	8143      	strh	r3, [r0, #10]
 8017258:	8183      	strh	r3, [r0, #12]
 801725a:	81c3      	strh	r3, [r0, #14]
 801725c:	8203      	strh	r3, [r0, #16]
 801725e:	8243      	strh	r3, [r0, #18]
 8017260:	8283      	strh	r3, [r0, #20]
 8017262:	82c3      	strh	r3, [r0, #22]
 8017264:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017268:	6203      	str	r3, [r0, #32]
 801726a:	8483      	strh	r3, [r0, #36]	; 0x24
 801726c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801726e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8017272:	4a0e      	ldr	r2, [pc, #56]	; (80172ac <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017274:	6343      	str	r3, [r0, #52]	; 0x34
 8017276:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801727a:	4b0d      	ldr	r3, [pc, #52]	; (80172b0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801727c:	6042      	str	r2, [r0, #4]
 801727e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017282:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8017284:	4a0b      	ldr	r2, [pc, #44]	; (80172b4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017286:	4604      	mov	r4, r0
 8017288:	2101      	movs	r1, #1
 801728a:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801728e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8017292:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017296:	4628      	mov	r0, r5
 8017298:	4798      	blx	r3
 801729a:	6863      	ldr	r3, [r4, #4]
 801729c:	4628      	mov	r0, r5
 801729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172a0:	4631      	mov	r1, r6
 80172a2:	4798      	blx	r3
 80172a4:	4620      	mov	r0, r4
 80172a6:	bd70      	pop	{r4, r5, r6, pc}
 80172a8:	080298f0 	.word	0x080298f0
 80172ac:	08029218 	.word	0x08029218
 80172b0:	20025852 	.word	0x20025852
 80172b4:	20025850 	.word	0x20025850

080172b8 <_ZN8touchgfx6Screen4drawEv>:
 80172b8:	b507      	push	{r0, r1, r2, lr}
 80172ba:	4b09      	ldr	r3, [pc, #36]	; (80172e0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80172bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80172c0:	4b08      	ldr	r3, [pc, #32]	; (80172e4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80172c2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80172c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 80172ce:	6803      	ldr	r3, [r0, #0]
 80172d0:	2100      	movs	r1, #0
 80172d2:	9100      	str	r1, [sp, #0]
 80172d4:	689b      	ldr	r3, [r3, #8]
 80172d6:	4669      	mov	r1, sp
 80172d8:	4798      	blx	r3
 80172da:	b003      	add	sp, #12
 80172dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80172e0:	20025850 	.word	0x20025850
 80172e4:	20025852 	.word	0x20025852

080172e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80172e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ec:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	b089      	sub	sp, #36	; 0x24
 80172f4:	4680      	mov	r8, r0
 80172f6:	460c      	mov	r4, r1
 80172f8:	4615      	mov	r5, r2
 80172fa:	dd0e      	ble.n	801731a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80172fc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017300:	2b00      	cmp	r3, #0
 8017302:	dd0a      	ble.n	801731a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017304:	4628      	mov	r0, r5
 8017306:	f7ff ff5b 	bl	80171c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801730a:	4621      	mov	r1, r4
 801730c:	f7fe fb5e 	bl	80159cc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017310:	69eb      	ldr	r3, [r5, #28]
 8017312:	b928      	cbnz	r0, 8017320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017314:	461d      	mov	r5, r3
 8017316:	2b00      	cmp	r3, #0
 8017318:	d1f4      	bne.n	8017304 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801731a:	b009      	add	sp, #36	; 0x24
 801731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017320:	ae04      	add	r6, sp, #16
 8017322:	2b00      	cmp	r3, #0
 8017324:	f000 80b5 	beq.w	8017492 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017328:	682b      	ldr	r3, [r5, #0]
 801732a:	4629      	mov	r1, r5
 801732c:	68db      	ldr	r3, [r3, #12]
 801732e:	a802      	add	r0, sp, #8
 8017330:	4798      	blx	r3
 8017332:	4628      	mov	r0, r5
 8017334:	f7ff ff60 	bl	80171f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017338:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801733c:	4407      	add	r7, r0
 801733e:	4628      	mov	r0, r5
 8017340:	f7ff ff6e 	bl	8017220 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017344:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017348:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801734c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017350:	4418      	add	r0, r3
 8017352:	4621      	mov	r1, r4
 8017354:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017358:	f8ad 0012 	strh.w	r0, [sp, #18]
 801735c:	b23f      	sxth	r7, r7
 801735e:	4630      	mov	r0, r6
 8017360:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017364:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017368:	f7fb f930 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 801736c:	4628      	mov	r0, r5
 801736e:	f7ff ff27 	bl	80171c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017372:	4602      	mov	r2, r0
 8017374:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017378:	ab06      	add	r3, sp, #24
 801737a:	e883 0003 	stmia.w	r3, {r0, r1}
 801737e:	4611      	mov	r1, r2
 8017380:	4618      	mov	r0, r3
 8017382:	f7fb f923 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 8017386:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801738a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801738e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017392:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017396:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801739a:	4299      	cmp	r1, r3
 801739c:	d10b      	bne.n	80173b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801739e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80173a2:	4552      	cmp	r2, sl
 80173a4:	d107      	bne.n	80173b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80173a6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80173aa:	455a      	cmp	r2, fp
 80173ac:	d103      	bne.n	80173b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80173ae:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80173b2:	454a      	cmp	r2, r9
 80173b4:	d06d      	beq.n	8017492 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80173b6:	f1bb 0f00 	cmp.w	fp, #0
 80173ba:	dd65      	ble.n	8017488 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80173bc:	f1b9 0f00 	cmp.w	r9, #0
 80173c0:	dd62      	ble.n	8017488 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80173c2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80173c6:	fa1f f08a 	uxth.w	r0, sl
 80173ca:	4552      	cmp	r2, sl
 80173cc:	9000      	str	r0, [sp, #0]
 80173ce:	da12      	bge.n	80173f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80173d0:	9301      	str	r3, [sp, #4]
 80173d2:	9b00      	ldr	r3, [sp, #0]
 80173d4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80173d8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80173dc:	1a9a      	subs	r2, r3, r2
 80173de:	f8ad 1010 	strh.w	r1, [sp, #16]
 80173e2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80173e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80173ea:	69ea      	ldr	r2, [r5, #28]
 80173ec:	4631      	mov	r1, r6
 80173ee:	4640      	mov	r0, r8
 80173f0:	f7ff ff7a 	bl	80172e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80173f4:	9b01      	ldr	r3, [sp, #4]
 80173f6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80173fa:	429a      	cmp	r2, r3
 80173fc:	b29f      	uxth	r7, r3
 80173fe:	da0d      	bge.n	801741c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8017400:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017404:	1aba      	subs	r2, r7, r2
 8017406:	f8ad a012 	strh.w	sl, [sp, #18]
 801740a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801740e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017412:	69ea      	ldr	r2, [r5, #28]
 8017414:	4631      	mov	r1, r6
 8017416:	4640      	mov	r0, r8
 8017418:	f7ff ff66 	bl	80172e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801741c:	8822      	ldrh	r2, [r4, #0]
 801741e:	88a3      	ldrh	r3, [r4, #4]
 8017420:	445f      	add	r7, fp
 8017422:	4413      	add	r3, r2
 8017424:	b29b      	uxth	r3, r3
 8017426:	b2bf      	uxth	r7, r7
 8017428:	b23a      	sxth	r2, r7
 801742a:	b219      	sxth	r1, r3
 801742c:	4291      	cmp	r1, r2
 801742e:	dd0d      	ble.n	801744c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017430:	1bdb      	subs	r3, r3, r7
 8017432:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017436:	f8ad a012 	strh.w	sl, [sp, #18]
 801743a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801743e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017442:	69ea      	ldr	r2, [r5, #28]
 8017444:	4631      	mov	r1, r6
 8017446:	4640      	mov	r0, r8
 8017448:	f7ff ff4e 	bl	80172e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801744c:	88e2      	ldrh	r2, [r4, #6]
 801744e:	8863      	ldrh	r3, [r4, #2]
 8017450:	4413      	add	r3, r2
 8017452:	9a00      	ldr	r2, [sp, #0]
 8017454:	444a      	add	r2, r9
 8017456:	b29b      	uxth	r3, r3
 8017458:	fa1f f982 	uxth.w	r9, r2
 801745c:	fa0f f289 	sxth.w	r2, r9
 8017460:	b219      	sxth	r1, r3
 8017462:	428a      	cmp	r2, r1
 8017464:	da15      	bge.n	8017492 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017466:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801746a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801746e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017472:	eba3 0309 	sub.w	r3, r3, r9
 8017476:	f8ad 0010 	strh.w	r0, [sp, #16]
 801747a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801747e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017482:	69ea      	ldr	r2, [r5, #28]
 8017484:	4631      	mov	r1, r6
 8017486:	e001      	b.n	801748c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017488:	69ea      	ldr	r2, [r5, #28]
 801748a:	4621      	mov	r1, r4
 801748c:	4640      	mov	r0, r8
 801748e:	f7ff ff2b 	bl	80172e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017492:	4628      	mov	r0, r5
 8017494:	f7ff fe94 	bl	80171c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017498:	6861      	ldr	r1, [r4, #4]
 801749a:	4602      	mov	r2, r0
 801749c:	6820      	ldr	r0, [r4, #0]
 801749e:	4633      	mov	r3, r6
 80174a0:	c303      	stmia	r3!, {r0, r1}
 80174a2:	4611      	mov	r1, r2
 80174a4:	4630      	mov	r0, r6
 80174a6:	f7fb f891 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 80174aa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	f77f af33 	ble.w	801731a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80174b4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	f77f af2e 	ble.w	801731a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80174be:	4628      	mov	r0, r5
 80174c0:	f7ff fe9a 	bl	80171f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80174c4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80174c8:	1a18      	subs	r0, r3, r0
 80174ca:	f8ad 0010 	strh.w	r0, [sp, #16]
 80174ce:	4628      	mov	r0, r5
 80174d0:	f7ff fea6 	bl	8017220 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80174d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80174d8:	1a18      	subs	r0, r3, r0
 80174da:	f8ad 0012 	strh.w	r0, [sp, #18]
 80174de:	682b      	ldr	r3, [r5, #0]
 80174e0:	4631      	mov	r1, r6
 80174e2:	689b      	ldr	r3, [r3, #8]
 80174e4:	4628      	mov	r0, r5
 80174e6:	4798      	blx	r3
 80174e8:	e717      	b.n	801731a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080174ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80174ea:	b570      	push	{r4, r5, r6, lr}
 80174ec:	460c      	mov	r4, r1
 80174ee:	b086      	sub	sp, #24
 80174f0:	1d06      	adds	r6, r0, #4
 80174f2:	2300      	movs	r3, #0
 80174f4:	4631      	mov	r1, r6
 80174f6:	4605      	mov	r5, r0
 80174f8:	a802      	add	r0, sp, #8
 80174fa:	9301      	str	r3, [sp, #4]
 80174fc:	f7ff fca0 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017500:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017504:	8822      	ldrh	r2, [r4, #0]
 8017506:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801750a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801750e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017512:	1ad2      	subs	r2, r2, r3
 8017514:	8863      	ldrh	r3, [r4, #2]
 8017516:	f8ad 2010 	strh.w	r2, [sp, #16]
 801751a:	1a5b      	subs	r3, r3, r1
 801751c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017520:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017524:	aa01      	add	r2, sp, #4
 8017526:	a904      	add	r1, sp, #16
 8017528:	4630      	mov	r0, r6
 801752a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801752e:	f7fb f925 	bl	801277c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017532:	9a01      	ldr	r2, [sp, #4]
 8017534:	b11a      	cbz	r2, 801753e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8017536:	4621      	mov	r1, r4
 8017538:	4628      	mov	r0, r5
 801753a:	f7ff fed5 	bl	80172e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801753e:	b006      	add	sp, #24
 8017540:	bd70      	pop	{r4, r5, r6, pc}

08017542 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017542:	b530      	push	{r4, r5, lr}
 8017544:	4602      	mov	r2, r0
 8017546:	4604      	mov	r4, r0
 8017548:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801754c:	b085      	sub	sp, #20
 801754e:	460d      	mov	r5, r1
 8017550:	6851      	ldr	r1, [r2, #4]
 8017552:	466b      	mov	r3, sp
 8017554:	c303      	stmia	r3!, {r0, r1}
 8017556:	4629      	mov	r1, r5
 8017558:	4668      	mov	r0, sp
 801755a:	f7fb f837 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 801755e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017562:	b12b      	cbz	r3, 8017570 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8017564:	4669      	mov	r1, sp
 8017566:	4620      	mov	r0, r4
 8017568:	f7ff ffbf 	bl	80174ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801756c:	b005      	add	sp, #20
 801756e:	bd30      	pop	{r4, r5, pc}
 8017570:	3404      	adds	r4, #4
 8017572:	4621      	mov	r1, r4
 8017574:	a802      	add	r0, sp, #8
 8017576:	f7ff fc63 	bl	8016e40 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801757a:	f8bd 3000 	ldrh.w	r3, [sp]
 801757e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017582:	1a9b      	subs	r3, r3, r2
 8017584:	f8ad 3000 	strh.w	r3, [sp]
 8017588:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801758c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017590:	4669      	mov	r1, sp
 8017592:	1a9b      	subs	r3, r3, r2
 8017594:	4620      	mov	r0, r4
 8017596:	f8ad 3002 	strh.w	r3, [sp, #2]
 801759a:	f7fb f8b6 	bl	801270a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801759e:	e7e5      	b.n	801756c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080175a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80175a0:	680a      	ldr	r2, [r1, #0]
 80175a2:	460b      	mov	r3, r1
 80175a4:	6992      	ldr	r2, [r2, #24]
 80175a6:	1d01      	adds	r1, r0, #4
 80175a8:	4618      	mov	r0, r3
 80175aa:	4710      	bx	r2

080175ac <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 80175ac:	4298      	cmp	r0, r3
 80175ae:	d200      	bcs.n	80175b2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 80175b0:	b913      	cbnz	r3, 80175b8 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 80175b2:	440a      	add	r2, r1
 80175b4:	b210      	sxth	r0, r2
 80175b6:	4770      	bx	lr
 80175b8:	ee07 2a90 	vmov	s15, r2
 80175bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80175c0:	ee07 0a90 	vmov	s15, r0
 80175c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80175c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80175cc:	ee07 3a10 	vmov	s14, r3
 80175d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80175d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80175d8:	ee07 1a90 	vmov	s15, r1
 80175dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80175e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80175e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80175ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175f0:	bfcc      	ite	gt
 80175f2:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80175f6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80175fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80175fe:	ee17 3a90 	vmov	r3, s15
 8017602:	b218      	sxth	r0, r3
 8017604:	4770      	bx	lr

08017606 <_ZN8touchgfx15EasingEquations13linearEaseOutEtsst>:
 8017606:	f7ff bfd1 	b.w	80175ac <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

0801760a <_ZN8touchgfx15EasingEquations11quadEaseOutEtsst>:
 801760a:	4298      	cmp	r0, r3
 801760c:	d200      	bcs.n	8017610 <_ZN8touchgfx15EasingEquations11quadEaseOutEtsst+0x6>
 801760e:	b913      	cbnz	r3, 8017616 <_ZN8touchgfx15EasingEquations11quadEaseOutEtsst+0xc>
 8017610:	1888      	adds	r0, r1, r2
 8017612:	b200      	sxth	r0, r0
 8017614:	4770      	bx	lr
 8017616:	ee07 0a90 	vmov	s15, r0
 801761a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801761e:	ee07 3a90 	vmov	s15, r3
 8017622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017626:	4253      	negs	r3, r2
 8017628:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801762c:	ee07 3a10 	vmov	s14, r3
 8017630:	ee07 1a90 	vmov	s15, r1
 8017634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017638:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801763c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017644:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8017648:	eee7 7a26 	vfma.f32	s15, s14, s13
 801764c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017650:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017658:	bfcc      	ite	gt
 801765a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801765e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8017662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017666:	ee17 3a90 	vmov	r3, s15
 801766a:	b218      	sxth	r0, r3
 801766c:	4770      	bx	lr

0801766e <_ZN8touchgfx12TextProviderC1Ev>:
 801766e:	b538      	push	{r3, r4, r5, lr}
 8017670:	2500      	movs	r5, #0
 8017672:	2302      	movs	r3, #2
 8017674:	4604      	mov	r4, r0
 8017676:	e9c0 5500 	strd	r5, r5, [r0]
 801767a:	7403      	strb	r3, [r0, #16]
 801767c:	6145      	str	r5, [r0, #20]
 801767e:	7605      	strb	r5, [r0, #24]
 8017680:	83c5      	strh	r5, [r0, #30]
 8017682:	8405      	strh	r5, [r0, #32]
 8017684:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017686:	8705      	strh	r5, [r0, #56]	; 0x38
 8017688:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801768a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801768e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8017692:	220e      	movs	r2, #14
 8017694:	4629      	mov	r1, r5
 8017696:	304c      	adds	r0, #76	; 0x4c
 8017698:	f00f f9d9 	bl	8026a4e <memset>
 801769c:	2301      	movs	r3, #1
 801769e:	4620      	mov	r0, r4
 80176a0:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80176a4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80176a8:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80176ac:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80176b0:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80176b4:	f7f8 fcfc 	bl	80100b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80176b8:	4620      	mov	r0, r4
 80176ba:	bd38      	pop	{r3, r4, r5, pc}

080176bc <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80176bc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80176be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80176c2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80176c4:	fab0 f080 	clz	r0, r0
 80176c8:	0940      	lsrs	r0, r0, #5
 80176ca:	4770      	bx	lr

080176cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80176cc:	b530      	push	{r4, r5, lr}
 80176ce:	2500      	movs	r5, #0
 80176d0:	2401      	movs	r4, #1
 80176d2:	6843      	ldr	r3, [r0, #4]
 80176d4:	b913      	cbnz	r3, 80176dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80176d6:	6803      	ldr	r3, [r0, #0]
 80176d8:	b313      	cbz	r3, 8017720 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80176da:	6043      	str	r3, [r0, #4]
 80176dc:	7e03      	ldrb	r3, [r0, #24]
 80176de:	b143      	cbz	r3, 80176f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80176e0:	6943      	ldr	r3, [r0, #20]
 80176e2:	b12b      	cbz	r3, 80176f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80176e4:	881a      	ldrh	r2, [r3, #0]
 80176e6:	b11a      	cbz	r2, 80176f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80176e8:	1c9a      	adds	r2, r3, #2
 80176ea:	6142      	str	r2, [r0, #20]
 80176ec:	8818      	ldrh	r0, [r3, #0]
 80176ee:	bd30      	pop	{r4, r5, pc}
 80176f0:	7605      	strb	r5, [r0, #24]
 80176f2:	6843      	ldr	r3, [r0, #4]
 80176f4:	8819      	ldrh	r1, [r3, #0]
 80176f6:	b199      	cbz	r1, 8017720 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80176f8:	1c9a      	adds	r2, r3, #2
 80176fa:	2902      	cmp	r1, #2
 80176fc:	6042      	str	r2, [r0, #4]
 80176fe:	d1f5      	bne.n	80176ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017700:	7c03      	ldrb	r3, [r0, #16]
 8017702:	2b01      	cmp	r3, #1
 8017704:	d8e5      	bhi.n	80176d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017706:	1c5a      	adds	r2, r3, #1
 8017708:	3302      	adds	r3, #2
 801770a:	7402      	strb	r2, [r0, #16]
 801770c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017710:	6143      	str	r3, [r0, #20]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d0dd      	beq.n	80176d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017716:	881b      	ldrh	r3, [r3, #0]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d0da      	beq.n	80176d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801771c:	7604      	strb	r4, [r0, #24]
 801771e:	e7d8      	b.n	80176d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017720:	2000      	movs	r0, #0
 8017722:	e7e4      	b.n	80176ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017724 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017724:	b430      	push	{r4, r5}
 8017726:	6001      	str	r1, [r0, #0]
 8017728:	2100      	movs	r1, #0
 801772a:	6041      	str	r1, [r0, #4]
 801772c:	6815      	ldr	r5, [r2, #0]
 801772e:	6085      	str	r5, [r0, #8]
 8017730:	6852      	ldr	r2, [r2, #4]
 8017732:	6443      	str	r3, [r0, #68]	; 0x44
 8017734:	9b02      	ldr	r3, [sp, #8]
 8017736:	60c2      	str	r2, [r0, #12]
 8017738:	7401      	strb	r1, [r0, #16]
 801773a:	6141      	str	r1, [r0, #20]
 801773c:	7601      	strb	r1, [r0, #24]
 801773e:	8701      	strh	r1, [r0, #56]	; 0x38
 8017740:	8401      	strh	r1, [r0, #32]
 8017742:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017746:	6483      	str	r3, [r0, #72]	; 0x48
 8017748:	bc30      	pop	{r4, r5}
 801774a:	f7f8 bcb1 	b.w	80100b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801774e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801774e:	b408      	push	{r3}
 8017750:	b510      	push	{r4, lr}
 8017752:	b085      	sub	sp, #20
 8017754:	ac07      	add	r4, sp, #28
 8017756:	f854 3b04 	ldr.w	r3, [r4], #4
 801775a:	9300      	str	r3, [sp, #0]
 801775c:	4613      	mov	r3, r2
 801775e:	4622      	mov	r2, r4
 8017760:	9403      	str	r4, [sp, #12]
 8017762:	f7ff ffdf 	bl	8017724 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017766:	b005      	add	sp, #20
 8017768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801776c:	b001      	add	sp, #4
 801776e:	4770      	bx	lr

08017770 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017772:	4605      	mov	r5, r0
 8017774:	4608      	mov	r0, r1
 8017776:	b1e9      	cbz	r1, 80177b4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8017778:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801777c:	460b      	mov	r3, r1
 801777e:	f101 0708 	add.w	r7, r1, #8
 8017782:	4622      	mov	r2, r4
 8017784:	6818      	ldr	r0, [r3, #0]
 8017786:	6859      	ldr	r1, [r3, #4]
 8017788:	4626      	mov	r6, r4
 801778a:	c603      	stmia	r6!, {r0, r1}
 801778c:	3308      	adds	r3, #8
 801778e:	42bb      	cmp	r3, r7
 8017790:	4634      	mov	r4, r6
 8017792:	d1f7      	bne.n	8017784 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017794:	6818      	ldr	r0, [r3, #0]
 8017796:	6030      	str	r0, [r6, #0]
 8017798:	889b      	ldrh	r3, [r3, #4]
 801779a:	80b3      	strh	r3, [r6, #4]
 801779c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80177a0:	015b      	lsls	r3, r3, #5
 80177a2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80177a6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80177aa:	430b      	orrs	r3, r1
 80177ac:	425b      	negs	r3, r3
 80177ae:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80177b2:	4610      	mov	r0, r2
 80177b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177b6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80177b6:	b538      	push	{r3, r4, r5, lr}
 80177b8:	460c      	mov	r4, r1
 80177ba:	6811      	ldr	r1, [r2, #0]
 80177bc:	4610      	mov	r0, r2
 80177be:	68cd      	ldr	r5, [r1, #12]
 80177c0:	4619      	mov	r1, r3
 80177c2:	47a8      	blx	r5
 80177c4:	2800      	cmp	r0, #0
 80177c6:	bf08      	it	eq
 80177c8:	4620      	moveq	r0, r4
 80177ca:	bd38      	pop	{r3, r4, r5, pc}

080177cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80177cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ce:	4604      	mov	r4, r0
 80177d0:	4615      	mov	r5, r2
 80177d2:	4608      	mov	r0, r1
 80177d4:	b93a      	cbnz	r2, 80177e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80177d6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80177da:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80177de:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80177e2:	4628      	mov	r0, r5
 80177e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177e6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80177ea:	8893      	ldrh	r3, [r2, #4]
 80177ec:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80177f0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80177f4:	79ee      	ldrb	r6, [r5, #7]
 80177f6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80177fa:	4316      	orrs	r6, r2
 80177fc:	19da      	adds	r2, r3, r7
 80177fe:	b291      	uxth	r1, r2
 8017800:	291d      	cmp	r1, #29
 8017802:	b2b7      	uxth	r7, r6
 8017804:	d87a      	bhi.n	80178fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 8017806:	2201      	movs	r2, #1
 8017808:	408a      	lsls	r2, r1
 801780a:	4975      	ldr	r1, [pc, #468]	; (80179e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801780c:	420a      	tst	r2, r1
 801780e:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8017812:	d12d      	bne.n	8017870 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8017814:	f412 7f60 	tst.w	r2, #896	; 0x380
 8017818:	d070      	beq.n	80178fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801781a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801781e:	462b      	mov	r3, r5
 8017820:	f105 0e08 	add.w	lr, r5, #8
 8017824:	4615      	mov	r5, r2
 8017826:	6818      	ldr	r0, [r3, #0]
 8017828:	6859      	ldr	r1, [r3, #4]
 801782a:	4694      	mov	ip, r2
 801782c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017830:	3308      	adds	r3, #8
 8017832:	4573      	cmp	r3, lr
 8017834:	4662      	mov	r2, ip
 8017836:	d1f6      	bne.n	8017826 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8017838:	6818      	ldr	r0, [r3, #0]
 801783a:	f8cc 0000 	str.w	r0, [ip]
 801783e:	889b      	ldrh	r3, [r3, #4]
 8017840:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017844:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017848:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801784c:	b2b3      	uxth	r3, r6
 801784e:	1aca      	subs	r2, r1, r3
 8017850:	b292      	uxth	r2, r2
 8017852:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8017856:	10d2      	asrs	r2, r2, #3
 8017858:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801785c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8017860:	4302      	orrs	r2, r0
 8017862:	1bcf      	subs	r7, r1, r7
 8017864:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017868:	1afb      	subs	r3, r7, r3
 801786a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801786e:	e7b8      	b.n	80177e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017870:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017872:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017876:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017878:	f640 6333 	movw	r3, #3635	; 0xe33
 801787c:	4299      	cmp	r1, r3
 801787e:	d110      	bne.n	80178a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8017880:	6803      	ldr	r3, [r0, #0]
 8017882:	68db      	ldr	r3, [r3, #12]
 8017884:	4798      	blx	r3
 8017886:	7b41      	ldrb	r1, [r0, #13]
 8017888:	00cb      	lsls	r3, r1, #3
 801788a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801788e:	7a03      	ldrb	r3, [r0, #8]
 8017890:	0648      	lsls	r0, r1, #25
 8017892:	ea43 0302 	orr.w	r3, r3, r2
 8017896:	bf44      	itt	mi
 8017898:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801789c:	b21b      	sxthmi	r3, r3
 801789e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80178a2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80178a6:	443b      	add	r3, r7
 80178a8:	4433      	add	r3, r6
 80178aa:	b29b      	uxth	r3, r3
 80178ac:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80178b0:	462a      	mov	r2, r5
 80178b2:	f105 0c08 	add.w	ip, r5, #8
 80178b6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80178ba:	4635      	mov	r5, r6
 80178bc:	6810      	ldr	r0, [r2, #0]
 80178be:	6851      	ldr	r1, [r2, #4]
 80178c0:	4637      	mov	r7, r6
 80178c2:	c703      	stmia	r7!, {r0, r1}
 80178c4:	3208      	adds	r2, #8
 80178c6:	4562      	cmp	r2, ip
 80178c8:	463e      	mov	r6, r7
 80178ca:	d1f7      	bne.n	80178bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80178cc:	6810      	ldr	r0, [r2, #0]
 80178ce:	6038      	str	r0, [r7, #0]
 80178d0:	8892      	ldrh	r2, [r2, #4]
 80178d2:	80ba      	strh	r2, [r7, #4]
 80178d4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80178d8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80178dc:	10db      	asrs	r3, r3, #3
 80178de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80178e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80178e6:	4313      	orrs	r3, r2
 80178e8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80178ec:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80178f0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80178f4:	1a9b      	subs	r3, r3, r2
 80178f6:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80178fa:	e772      	b.n	80177e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80178fc:	f023 0204 	bic.w	r2, r3, #4
 8017900:	f640 611b 	movw	r1, #3611	; 0xe1b
 8017904:	428a      	cmp	r2, r1
 8017906:	d003      	beq.n	8017910 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8017908:	f640 621d 	movw	r2, #3613	; 0xe1d
 801790c:	4293      	cmp	r3, r2
 801790e:	d120      	bne.n	8017952 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 8017910:	3b01      	subs	r3, #1
 8017912:	4602      	mov	r2, r0
 8017914:	b29b      	uxth	r3, r3
 8017916:	4629      	mov	r1, r5
 8017918:	4620      	mov	r0, r4
 801791a:	f7ff ff4c 	bl	80177b6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801791e:	7b41      	ldrb	r1, [r0, #13]
 8017920:	00cb      	lsls	r3, r1, #3
 8017922:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017926:	7a03      	ldrb	r3, [r0, #8]
 8017928:	0649      	lsls	r1, r1, #25
 801792a:	ea43 0302 	orr.w	r3, r3, r2
 801792e:	bf44      	itt	mi
 8017930:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017934:	b21b      	sxthmi	r3, r3
 8017936:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801793a:	7b6b      	ldrb	r3, [r5, #13]
 801793c:	7aaa      	ldrb	r2, [r5, #10]
 801793e:	005b      	lsls	r3, r3, #1
 8017940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017944:	4313      	orrs	r3, r2
 8017946:	115a      	asrs	r2, r3, #5
 8017948:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801794c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8017950:	e036      	b.n	80179c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8017952:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017956:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801795a:	7a2a      	ldrb	r2, [r5, #8]
 801795c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017960:	ea42 0201 	orr.w	r2, r2, r1
 8017964:	bf1c      	itt	ne
 8017966:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801796a:	b212      	sxthne	r2, r2
 801796c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017970:	f640 6109 	movw	r1, #3593	; 0xe09
 8017974:	f023 0210 	bic.w	r2, r3, #16
 8017978:	428a      	cmp	r2, r1
 801797a:	d003      	beq.n	8017984 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 801797c:	f640 6213 	movw	r2, #3603	; 0xe13
 8017980:	4293      	cmp	r3, r2
 8017982:	d12a      	bne.n	80179da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8017984:	7b6e      	ldrb	r6, [r5, #13]
 8017986:	0076      	lsls	r6, r6, #1
 8017988:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801798c:	7aae      	ldrb	r6, [r5, #10]
 801798e:	4316      	orrs	r6, r2
 8017990:	f640 6213 	movw	r2, #3603	; 0xe13
 8017994:	4293      	cmp	r3, r2
 8017996:	bf18      	it	ne
 8017998:	f103 33ff 	addne.w	r3, r3, #4294967295
 801799c:	4602      	mov	r2, r0
 801799e:	bf14      	ite	ne
 80179a0:	b29b      	uxthne	r3, r3
 80179a2:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80179a6:	4629      	mov	r1, r5
 80179a8:	4620      	mov	r0, r4
 80179aa:	f7ff ff04 	bl	80177b6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80179ae:	7b43      	ldrb	r3, [r0, #13]
 80179b0:	7a82      	ldrb	r2, [r0, #10]
 80179b2:	005b      	lsls	r3, r3, #1
 80179b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80179b8:	4313      	orrs	r3, r2
 80179ba:	1af6      	subs	r6, r6, r3
 80179bc:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80179c0:	7b69      	ldrb	r1, [r5, #13]
 80179c2:	00cb      	lsls	r3, r1, #3
 80179c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80179c8:	7a2b      	ldrb	r3, [r5, #8]
 80179ca:	4313      	orrs	r3, r2
 80179cc:	064a      	lsls	r2, r1, #25
 80179ce:	bf44      	itt	mi
 80179d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80179d4:	b21b      	sxthmi	r3, r3
 80179d6:	1bdb      	subs	r3, r3, r7
 80179d8:	e747      	b.n	801786a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80179da:	2300      	movs	r3, #0
 80179dc:	e7b6      	b.n	801794c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 80179de:	bf00      	nop
 80179e0:	3fc00079 	.word	0x3fc00079

080179e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80179e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179e8:	4604      	mov	r4, r0
 80179ea:	b942      	cbnz	r2, 80179fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80179ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80179f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80179f4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80179f8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80179fc:	e047      	b.n	8017a8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80179fe:	7b51      	ldrb	r1, [r2, #13]
 8017a00:	8893      	ldrh	r3, [r2, #4]
 8017a02:	010d      	lsls	r5, r1, #4
 8017a04:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8017a08:	79d5      	ldrb	r5, [r2, #7]
 8017a0a:	4305      	orrs	r5, r0
 8017a0c:	2d04      	cmp	r5, #4
 8017a0e:	bfcc      	ite	gt
 8017a10:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8017a14:	f04f 0e01 	movle.w	lr, #1
 8017a18:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8017a1c:	f200 80ab 	bhi.w	8017b76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8017a20:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8017a24:	4283      	cmp	r3, r0
 8017a26:	d216      	bcs.n	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017a28:	f240 605b 	movw	r0, #1627	; 0x65b
 8017a2c:	4283      	cmp	r3, r0
 8017a2e:	d859      	bhi.n	8017ae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8017a30:	f240 6057 	movw	r0, #1623	; 0x657
 8017a34:	4283      	cmp	r3, r0
 8017a36:	d20e      	bcs.n	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017a38:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017a3c:	d24a      	bcs.n	8017ad4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8017a3e:	f240 604e 	movw	r0, #1614	; 0x64e
 8017a42:	4283      	cmp	r3, r0
 8017a44:	d207      	bcs.n	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017a46:	f240 601a 	movw	r0, #1562	; 0x61a
 8017a4a:	4283      	cmp	r3, r0
 8017a4c:	d02a      	beq.n	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017a4e:	d821      	bhi.n	8017a94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8017a50:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8017a54:	d35b      	bcc.n	8017b0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017a56:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8017a5a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017a5e:	f040 80d0 	bne.w	8017c02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017a62:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8017a66:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017a6a:	f040 80ca 	bne.w	8017c02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017a6e:	00cb      	lsls	r3, r1, #3
 8017a70:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017a74:	7a13      	ldrb	r3, [r2, #8]
 8017a76:	0649      	lsls	r1, r1, #25
 8017a78:	ea43 0300 	orr.w	r3, r3, r0
 8017a7c:	bf44      	itt	mi
 8017a7e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017a82:	b21b      	sxthmi	r3, r3
 8017a84:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017a88:	1b5d      	subs	r5, r3, r5
 8017a8a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017a8e:	4610      	mov	r0, r2
 8017a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a94:	f240 604b 	movw	r0, #1611	; 0x64b
 8017a98:	4283      	cmp	r3, r0
 8017a9a:	d338      	bcc.n	8017b0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017a9c:	f240 604c 	movw	r0, #1612	; 0x64c
 8017aa0:	4283      	cmp	r3, r0
 8017aa2:	d9d8      	bls.n	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017aa4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8017aa8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8017aac:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017ab0:	f040 80f2 	bne.w	8017c98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8017ab4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017ab8:	f040 80ee 	bne.w	8017c98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8017abc:	00cb      	lsls	r3, r1, #3
 8017abe:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017ac2:	7a13      	ldrb	r3, [r2, #8]
 8017ac4:	064e      	lsls	r6, r1, #25
 8017ac6:	ea43 0300 	orr.w	r3, r3, r0
 8017aca:	bf44      	itt	mi
 8017acc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017ad0:	b21b      	sxthmi	r3, r3
 8017ad2:	e7d9      	b.n	8017a88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8017ad4:	f240 6054 	movw	r0, #1620	; 0x654
 8017ad8:	4283      	cmp	r3, r0
 8017ada:	d8e3      	bhi.n	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017adc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017ae0:	d9e0      	bls.n	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017ae2:	e7b8      	b.n	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017ae4:	f240 6074 	movw	r0, #1652	; 0x674
 8017ae8:	4283      	cmp	r3, r0
 8017aea:	d0b4      	beq.n	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017aec:	d82d      	bhi.n	8017b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8017aee:	f240 605e 	movw	r0, #1630	; 0x65e
 8017af2:	4283      	cmp	r3, r0
 8017af4:	d804      	bhi.n	8017b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8017af6:	f240 605d 	movw	r0, #1629	; 0x65d
 8017afa:	4283      	cmp	r3, r0
 8017afc:	d3d2      	bcc.n	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017afe:	e7aa      	b.n	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017b00:	f240 605f 	movw	r0, #1631	; 0x65f
 8017b04:	4283      	cmp	r3, r0
 8017b06:	d0cd      	beq.n	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017b08:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8017b0c:	d0a3      	beq.n	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017b0e:	00cb      	lsls	r3, r1, #3
 8017b10:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017b14:	7a13      	ldrb	r3, [r2, #8]
 8017b16:	0649      	lsls	r1, r1, #25
 8017b18:	ea43 0300 	orr.w	r3, r3, r0
 8017b1c:	bf44      	itt	mi
 8017b1e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017b22:	b21b      	sxthmi	r3, r3
 8017b24:	1b5d      	subs	r5, r3, r5
 8017b26:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017b2a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017b2e:	7b53      	ldrb	r3, [r2, #13]
 8017b30:	015b      	lsls	r3, r3, #5
 8017b32:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017b36:	7993      	ldrb	r3, [r2, #6]
 8017b38:	430b      	orrs	r3, r1
 8017b3a:	005b      	lsls	r3, r3, #1
 8017b3c:	2105      	movs	r1, #5
 8017b3e:	fb93 f3f1 	sdiv	r3, r3, r1
 8017b42:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8017b46:	440b      	add	r3, r1
 8017b48:	e756      	b.n	80179f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8017b4a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8017b4e:	4283      	cmp	r3, r0
 8017b50:	d809      	bhi.n	8017b66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8017b52:	f240 60df 	movw	r0, #1759	; 0x6df
 8017b56:	4283      	cmp	r3, r0
 8017b58:	f4bf af7d 	bcs.w	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017b5c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8017b60:	2b05      	cmp	r3, #5
 8017b62:	d8d4      	bhi.n	8017b0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017b64:	e777      	b.n	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017b66:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8017b6a:	4283      	cmp	r3, r0
 8017b6c:	d09a      	beq.n	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017b6e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8017b72:	4283      	cmp	r3, r0
 8017b74:	e7ca      	b.n	8017b0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017b76:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8017b7a:	d22b      	bcs.n	8017bd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8017b7c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8017b80:	4283      	cmp	r3, r0
 8017b82:	d28f      	bcs.n	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017b84:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017b88:	4283      	cmp	r3, r0
 8017b8a:	d816      	bhi.n	8017bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8017b8c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8017b90:	4283      	cmp	r3, r0
 8017b92:	f4bf af60 	bcs.w	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017b96:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8017b9a:	4283      	cmp	r3, r0
 8017b9c:	d80a      	bhi.n	8017bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8017b9e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8017ba2:	4283      	cmp	r3, r0
 8017ba4:	f4bf af57 	bcs.w	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017ba8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8017bac:	4283      	cmp	r3, r0
 8017bae:	f43f af79 	beq.w	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017bb2:	e7ac      	b.n	8017b0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017bb4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8017bb8:	e7f8      	b.n	8017bac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8017bba:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8017bbe:	4283      	cmp	r3, r0
 8017bc0:	d802      	bhi.n	8017bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8017bc2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8017bc6:	e798      	b.n	8017afa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8017bc8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8017bcc:	4283      	cmp	r3, r0
 8017bce:	f47f af42 	bne.w	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017bd2:	e767      	b.n	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017bd4:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8017bd8:	4283      	cmp	r3, r0
 8017bda:	f43f af63 	beq.w	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017bde:	d802      	bhi.n	8017be6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8017be0:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8017be4:	e7f2      	b.n	8017bcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8017be6:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8017bea:	4283      	cmp	r3, r0
 8017bec:	d805      	bhi.n	8017bfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8017bee:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8017bf2:	4283      	cmp	r3, r0
 8017bf4:	f4ff af2f 	bcc.w	8017a56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017bf8:	e754      	b.n	8017aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017bfa:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8017bfe:	4283      	cmp	r3, r0
 8017c00:	e7af      	b.n	8017b62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8017c02:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8017c06:	4617      	mov	r7, r2
 8017c08:	f102 0808 	add.w	r8, r2, #8
 8017c0c:	4666      	mov	r6, ip
 8017c0e:	6838      	ldr	r0, [r7, #0]
 8017c10:	6879      	ldr	r1, [r7, #4]
 8017c12:	46e6      	mov	lr, ip
 8017c14:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8017c18:	3708      	adds	r7, #8
 8017c1a:	4547      	cmp	r7, r8
 8017c1c:	46f4      	mov	ip, lr
 8017c1e:	d1f6      	bne.n	8017c0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8017c20:	6838      	ldr	r0, [r7, #0]
 8017c22:	f8ce 0000 	str.w	r0, [lr]
 8017c26:	88b9      	ldrh	r1, [r7, #4]
 8017c28:	f8ae 1004 	strh.w	r1, [lr, #4]
 8017c2c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017c30:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017c34:	d009      	beq.n	8017c4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8017c36:	7b51      	ldrb	r1, [r2, #13]
 8017c38:	7992      	ldrb	r2, [r2, #6]
 8017c3a:	0149      	lsls	r1, r1, #5
 8017c3c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017c40:	4311      	orrs	r1, r2
 8017c42:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017c46:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017c4a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017c4e:	b2ad      	uxth	r5, r5
 8017c50:	d00d      	beq.n	8017c6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8017c52:	442b      	add	r3, r5
 8017c54:	b29b      	uxth	r3, r3
 8017c56:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017c5a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017c5e:	10db      	asrs	r3, r3, #3
 8017c60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017c64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017c68:	4313      	orrs	r3, r2
 8017c6a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017c6e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017c72:	00cb      	lsls	r3, r1, #3
 8017c74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017c78:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017c7c:	064f      	lsls	r7, r1, #25
 8017c7e:	ea43 0302 	orr.w	r3, r3, r2
 8017c82:	bf44      	itt	mi
 8017c84:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017c88:	b21b      	sxthmi	r3, r3
 8017c8a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017c8e:	1b5b      	subs	r3, r3, r5
 8017c90:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017c94:	4632      	mov	r2, r6
 8017c96:	e6fa      	b.n	8017a8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017c98:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8017c9c:	4617      	mov	r7, r2
 8017c9e:	f102 0908 	add.w	r9, r2, #8
 8017ca2:	4666      	mov	r6, ip
 8017ca4:	6838      	ldr	r0, [r7, #0]
 8017ca6:	6879      	ldr	r1, [r7, #4]
 8017ca8:	46e0      	mov	r8, ip
 8017caa:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8017cae:	3708      	adds	r7, #8
 8017cb0:	454f      	cmp	r7, r9
 8017cb2:	46c4      	mov	ip, r8
 8017cb4:	d1f6      	bne.n	8017ca4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8017cb6:	6838      	ldr	r0, [r7, #0]
 8017cb8:	f8c8 0000 	str.w	r0, [r8]
 8017cbc:	88b9      	ldrh	r1, [r7, #4]
 8017cbe:	f8a8 1004 	strh.w	r1, [r8, #4]
 8017cc2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017cc6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017cca:	d009      	beq.n	8017ce0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8017ccc:	7b51      	ldrb	r1, [r2, #13]
 8017cce:	7992      	ldrb	r2, [r2, #6]
 8017cd0:	0149      	lsls	r1, r1, #5
 8017cd2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017cd6:	4311      	orrs	r1, r2
 8017cd8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017cdc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017ce0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017ce4:	d00e      	beq.n	8017d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8017ce6:	eba3 030e 	sub.w	r3, r3, lr
 8017cea:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017cf4:	10db      	asrs	r3, r3, #3
 8017cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017cfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017cfe:	4313      	orrs	r3, r2
 8017d00:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017d04:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017d08:	00cb      	lsls	r3, r1, #3
 8017d0a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017d0e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017d12:	0648      	lsls	r0, r1, #25
 8017d14:	ea43 0302 	orr.w	r3, r3, r2
 8017d18:	bf44      	itt	mi
 8017d1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017d1e:	b21b      	sxthmi	r3, r3
 8017d20:	1b5d      	subs	r5, r3, r5
 8017d22:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017d26:	e7b5      	b.n	8017c94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08017d28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d2c:	461e      	mov	r6, r3
 8017d2e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017d30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017d34:	4604      	mov	r4, r0
 8017d36:	4617      	mov	r7, r2
 8017d38:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017d3c:	f7f8 f912 	bl	800ff64 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017d40:	4605      	mov	r5, r0
 8017d42:	b918      	cbnz	r0, 8017d4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017d44:	6030      	str	r0, [r6, #0]
 8017d46:	4628      	mov	r0, r5
 8017d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d4c:	683b      	ldr	r3, [r7, #0]
 8017d4e:	4601      	mov	r1, r0
 8017d50:	68db      	ldr	r3, [r3, #12]
 8017d52:	4638      	mov	r0, r7
 8017d54:	4798      	blx	r3
 8017d56:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017d5e:	4602      	mov	r2, r0
 8017d60:	6030      	str	r0, [r6, #0]
 8017d62:	d213      	bcs.n	8017d8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8017d64:	4643      	mov	r3, r8
 8017d66:	4639      	mov	r1, r7
 8017d68:	4620      	mov	r0, r4
 8017d6a:	f7ff fe3b 	bl	80179e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017d6e:	6030      	str	r0, [r6, #0]
 8017d70:	6833      	ldr	r3, [r6, #0]
 8017d72:	b143      	cbz	r3, 8017d86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8017d74:	7b5a      	ldrb	r2, [r3, #13]
 8017d76:	7a9b      	ldrb	r3, [r3, #10]
 8017d78:	0052      	lsls	r2, r2, #1
 8017d7a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017d7e:	4313      	orrs	r3, r2
 8017d80:	bf0c      	ite	eq
 8017d82:	2301      	moveq	r3, #1
 8017d84:	2300      	movne	r3, #0
 8017d86:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017d8a:	e7dc      	b.n	8017d46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8017d8c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017d90:	b29b      	uxth	r3, r3
 8017d92:	2b7f      	cmp	r3, #127	; 0x7f
 8017d94:	d804      	bhi.n	8017da0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8017d96:	4639      	mov	r1, r7
 8017d98:	4620      	mov	r0, r4
 8017d9a:	f7ff fd17 	bl	80177cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017d9e:	e7e6      	b.n	8017d6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017da0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d0e3      	beq.n	8017d70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017da8:	f640 1302 	movw	r3, #2306	; 0x902
 8017dac:	429d      	cmp	r5, r3
 8017dae:	d1df      	bne.n	8017d70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017db0:	4601      	mov	r1, r0
 8017db2:	4620      	mov	r0, r4
 8017db4:	f7ff fcdc 	bl	8017770 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017db8:	e7d9      	b.n	8017d6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08017dba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8017dba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017dbe:	461e      	mov	r6, r3
 8017dc0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017dc2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017dc6:	4604      	mov	r4, r0
 8017dc8:	4617      	mov	r7, r2
 8017dca:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017dce:	f7f8 f8c9 	bl	800ff64 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017dd2:	4605      	mov	r5, r0
 8017dd4:	b918      	cbnz	r0, 8017dde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8017dd6:	6030      	str	r0, [r6, #0]
 8017dd8:	4628      	mov	r0, r5
 8017dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	4601      	mov	r1, r0
 8017de2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8017de6:	4638      	mov	r0, r7
 8017de8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017dec:	47c8      	blx	r9
 8017dee:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017df6:	4602      	mov	r2, r0
 8017df8:	6030      	str	r0, [r6, #0]
 8017dfa:	d213      	bcs.n	8017e24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8017dfc:	4643      	mov	r3, r8
 8017dfe:	4639      	mov	r1, r7
 8017e00:	4620      	mov	r0, r4
 8017e02:	f7ff fdef 	bl	80179e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017e06:	6030      	str	r0, [r6, #0]
 8017e08:	6833      	ldr	r3, [r6, #0]
 8017e0a:	b143      	cbz	r3, 8017e1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8017e0c:	7b5a      	ldrb	r2, [r3, #13]
 8017e0e:	7a9b      	ldrb	r3, [r3, #10]
 8017e10:	0052      	lsls	r2, r2, #1
 8017e12:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017e16:	4313      	orrs	r3, r2
 8017e18:	bf0c      	ite	eq
 8017e1a:	2301      	moveq	r3, #1
 8017e1c:	2300      	movne	r3, #0
 8017e1e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017e22:	e7d9      	b.n	8017dd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8017e24:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017e28:	b29b      	uxth	r3, r3
 8017e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8017e2c:	d804      	bhi.n	8017e38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8017e2e:	4639      	mov	r1, r7
 8017e30:	4620      	mov	r0, r4
 8017e32:	f7ff fccb 	bl	80177cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017e36:	e7e6      	b.n	8017e06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8017e38:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d0e3      	beq.n	8017e08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017e40:	f640 1302 	movw	r3, #2306	; 0x902
 8017e44:	429d      	cmp	r5, r3
 8017e46:	d1df      	bne.n	8017e08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017e48:	4601      	mov	r1, r0
 8017e4a:	4620      	mov	r0, r4
 8017e4c:	f7ff fc90 	bl	8017770 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017e50:	e7d9      	b.n	8017e06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08017e52 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017e52:	b510      	push	{r4, lr}
 8017e54:	4604      	mov	r4, r0
 8017e56:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8017e5a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017e5c:	b1f1      	cbz	r1, 8017e9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8017e5e:	2b0a      	cmp	r3, #10
 8017e60:	d02f      	beq.n	8017ec2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8017e62:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8017e64:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017e68:	3901      	subs	r1, #1
 8017e6a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8017e6c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8017e70:	1c51      	adds	r1, r2, #1
 8017e72:	b289      	uxth	r1, r1
 8017e74:	2901      	cmp	r1, #1
 8017e76:	bf84      	itt	hi
 8017e78:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017e7c:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8017e7e:	f103 0201 	add.w	r2, r3, #1
 8017e82:	8722      	strh	r2, [r4, #56]	; 0x38
 8017e84:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017e86:	bf98      	it	ls
 8017e88:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8017e8a:	4413      	add	r3, r2
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	2b09      	cmp	r3, #9
 8017e90:	bf88      	it	hi
 8017e92:	3b0a      	subhi	r3, #10
 8017e94:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017e98:	8458      	strh	r0, [r3, #34]	; 0x22
 8017e9a:	e7dc      	b.n	8017e56 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017e9c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017e9e:	2b0a      	cmp	r3, #10
 8017ea0:	d00f      	beq.n	8017ec2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	f7ff fc12 	bl	80176cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8017ea8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017eaa:	1c5a      	adds	r2, r3, #1
 8017eac:	8722      	strh	r2, [r4, #56]	; 0x38
 8017eae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017eb0:	4413      	add	r3, r2
 8017eb2:	b29b      	uxth	r3, r3
 8017eb4:	2b09      	cmp	r3, #9
 8017eb6:	bf88      	it	hi
 8017eb8:	3b0a      	subhi	r3, #10
 8017eba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017ebe:	8458      	strh	r0, [r3, #34]	; 0x22
 8017ec0:	e7ec      	b.n	8017e9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8017ec2:	bd10      	pop	{r4, pc}

08017ec4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017ec4:	b538      	push	{r3, r4, r5, lr}
 8017ec6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017ec8:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8017ecc:	4604      	mov	r4, r0
 8017ece:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8017ed0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8017ed2:	3a01      	subs	r2, #1
 8017ed4:	8702      	strh	r2, [r0, #56]	; 0x38
 8017ed6:	1c5a      	adds	r2, r3, #1
 8017ed8:	b292      	uxth	r2, r2
 8017eda:	2a09      	cmp	r2, #9
 8017edc:	bf86      	itte	hi
 8017ede:	3b09      	subhi	r3, #9
 8017ee0:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8017ee2:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8017ee4:	f7ff ffb5 	bl	8017e52 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017ee8:	8c23      	ldrh	r3, [r4, #32]
 8017eea:	2b01      	cmp	r3, #1
 8017eec:	bf9c      	itt	ls
 8017eee:	3301      	addls	r3, #1
 8017ef0:	8423      	strhls	r3, [r4, #32]
 8017ef2:	8be3      	ldrh	r3, [r4, #30]
 8017ef4:	b90b      	cbnz	r3, 8017efa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8017ef6:	2302      	movs	r3, #2
 8017ef8:	83e3      	strh	r3, [r4, #30]
 8017efa:	8be3      	ldrh	r3, [r4, #30]
 8017efc:	3b01      	subs	r3, #1
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	83e3      	strh	r3, [r4, #30]
 8017f02:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017f06:	4628      	mov	r0, r5
 8017f08:	8365      	strh	r5, [r4, #26]
 8017f0a:	bd38      	pop	{r3, r4, r5, pc}

08017f0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017f0c:	428a      	cmp	r2, r1
 8017f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f12:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8017f14:	d931      	bls.n	8017f7a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8017f16:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8017f18:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8017f1c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8017f20:	19ee      	adds	r6, r5, r7
 8017f22:	1a54      	subs	r4, r2, r1
 8017f24:	3e01      	subs	r6, #1
 8017f26:	fa1f fe84 	uxth.w	lr, r4
 8017f2a:	b2b4      	uxth	r4, r6
 8017f2c:	eba4 090e 	sub.w	r9, r4, lr
 8017f30:	fa1f f989 	uxth.w	r9, r9
 8017f34:	2c09      	cmp	r4, #9
 8017f36:	4626      	mov	r6, r4
 8017f38:	bf88      	it	hi
 8017f3a:	f1a4 060a 	subhi.w	r6, r4, #10
 8017f3e:	f1bc 0f00 	cmp.w	ip, #0
 8017f42:	bf08      	it	eq
 8017f44:	f04f 0c02 	moveq.w	ip, #2
 8017f48:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017f4c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017f50:	fa1f fc8c 	uxth.w	ip, ip
 8017f54:	3c01      	subs	r4, #1
 8017f56:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8017f5a:	b2a4      	uxth	r4, r4
 8017f5c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017f60:	454c      	cmp	r4, r9
 8017f62:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8017f66:	d1e5      	bne.n	8017f34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017f68:	eba5 050e 	sub.w	r5, r5, lr
 8017f6c:	eb0e 0408 	add.w	r4, lr, r8
 8017f70:	8705      	strh	r5, [r0, #56]	; 0x38
 8017f72:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8017f76:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8017f7a:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8017f7c:	1a64      	subs	r4, r4, r1
 8017f7e:	4439      	add	r1, r7
 8017f80:	b289      	uxth	r1, r1
 8017f82:	2909      	cmp	r1, #9
 8017f84:	bf88      	it	hi
 8017f86:	390a      	subhi	r1, #10
 8017f88:	8704      	strh	r4, [r0, #56]	; 0x38
 8017f8a:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017f8c:	250a      	movs	r5, #10
 8017f8e:	b18a      	cbz	r2, 8017fb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8017f90:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8017f92:	3a01      	subs	r2, #1
 8017f94:	b292      	uxth	r2, r2
 8017f96:	3101      	adds	r1, #1
 8017f98:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017f9c:	8701      	strh	r1, [r0, #56]	; 0x38
 8017f9e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017fa0:	b901      	cbnz	r1, 8017fa4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8017fa2:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017fa4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017fa6:	3901      	subs	r1, #1
 8017fa8:	b289      	uxth	r1, r1
 8017faa:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017fac:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017fb0:	844c      	strh	r4, [r1, #34]	; 0x22
 8017fb2:	e7ec      	b.n	8017f8e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8017fb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fb8:	f7ff bf4b 	b.w	8017e52 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08017fbc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017fbc:	b570      	push	{r4, r5, r6, lr}
 8017fbe:	2500      	movs	r5, #0
 8017fc0:	4295      	cmp	r5, r2
 8017fc2:	d011      	beq.n	8017fe8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8017fc4:	8bc4      	ldrh	r4, [r0, #30]
 8017fc6:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017fca:	4414      	add	r4, r2
 8017fcc:	3c01      	subs	r4, #1
 8017fce:	1b64      	subs	r4, r4, r5
 8017fd0:	b2a4      	uxth	r4, r4
 8017fd2:	2c01      	cmp	r4, #1
 8017fd4:	bf88      	it	hi
 8017fd6:	3c02      	subhi	r4, #2
 8017fd8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017fdc:	8b64      	ldrh	r4, [r4, #26]
 8017fde:	42b4      	cmp	r4, r6
 8017fe0:	d117      	bne.n	8018012 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017fe2:	3501      	adds	r5, #1
 8017fe4:	b2ad      	uxth	r5, r5
 8017fe6:	e7eb      	b.n	8017fc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8017fe8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017fec:	2400      	movs	r4, #0
 8017fee:	4413      	add	r3, r2
 8017ff0:	b2a2      	uxth	r2, r4
 8017ff2:	429a      	cmp	r2, r3
 8017ff4:	da0f      	bge.n	8018016 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017ff6:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8017ff8:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017ffc:	4432      	add	r2, r6
 8017ffe:	b292      	uxth	r2, r2
 8018000:	2a09      	cmp	r2, #9
 8018002:	bf88      	it	hi
 8018004:	3a0a      	subhi	r2, #10
 8018006:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801800a:	3401      	adds	r4, #1
 801800c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801800e:	42aa      	cmp	r2, r5
 8018010:	d0ee      	beq.n	8017ff0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018012:	2000      	movs	r0, #0
 8018014:	bd70      	pop	{r4, r5, r6, pc}
 8018016:	2001      	movs	r0, #1
 8018018:	e7fc      	b.n	8018014 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801801a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801801a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801801e:	4605      	mov	r5, r0
 8018020:	4616      	mov	r6, r2
 8018022:	1c8c      	adds	r4, r1, #2
 8018024:	8809      	ldrh	r1, [r1, #0]
 8018026:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801802a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801802e:	42b3      	cmp	r3, r6
 8018030:	d124      	bne.n	801807c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018032:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018036:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801803a:	f001 070f 	and.w	r7, r1, #15
 801803e:	f8cd 8000 	str.w	r8, [sp]
 8018042:	464b      	mov	r3, r9
 8018044:	4652      	mov	r2, sl
 8018046:	4621      	mov	r1, r4
 8018048:	4628      	mov	r0, r5
 801804a:	f7ff ffb7 	bl	8017fbc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801804e:	4683      	mov	fp, r0
 8018050:	b168      	cbz	r0, 801806e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018052:	eb0a 0109 	add.w	r1, sl, r9
 8018056:	4441      	add	r1, r8
 8018058:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801805c:	463a      	mov	r2, r7
 801805e:	4649      	mov	r1, r9
 8018060:	4628      	mov	r0, r5
 8018062:	f7ff ff53 	bl	8017f0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018066:	4658      	mov	r0, fp
 8018068:	b003      	add	sp, #12
 801806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801806e:	eb07 010a 	add.w	r1, r7, sl
 8018072:	4449      	add	r1, r9
 8018074:	4441      	add	r1, r8
 8018076:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801807a:	e7d2      	b.n	8018022 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801807c:	f04f 0b00 	mov.w	fp, #0
 8018080:	e7f1      	b.n	8018066 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018082 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018082:	b570      	push	{r4, r5, r6, lr}
 8018084:	8810      	ldrh	r0, [r2, #0]
 8018086:	4298      	cmp	r0, r3
 8018088:	d817      	bhi.n	80180ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801808a:	1e48      	subs	r0, r1, #1
 801808c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018090:	4298      	cmp	r0, r3
 8018092:	d312      	bcc.n	80180ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018094:	2400      	movs	r4, #0
 8018096:	428c      	cmp	r4, r1
 8018098:	d20f      	bcs.n	80180ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801809a:	1860      	adds	r0, r4, r1
 801809c:	1040      	asrs	r0, r0, #1
 801809e:	0085      	lsls	r5, r0, #2
 80180a0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80180a4:	42b3      	cmp	r3, r6
 80180a6:	d902      	bls.n	80180ae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80180a8:	3001      	adds	r0, #1
 80180aa:	b284      	uxth	r4, r0
 80180ac:	e7f3      	b.n	8018096 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80180ae:	d201      	bcs.n	80180b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80180b0:	b281      	uxth	r1, r0
 80180b2:	e7f0      	b.n	8018096 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80180b4:	442a      	add	r2, r5
 80180b6:	8850      	ldrh	r0, [r2, #2]
 80180b8:	bd70      	pop	{r4, r5, r6, pc}
 80180ba:	2000      	movs	r0, #0
 80180bc:	e7fc      	b.n	80180b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080180be <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80180be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180c2:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80180c4:	886f      	ldrh	r7, [r5, #2]
 80180c6:	4604      	mov	r4, r0
 80180c8:	087f      	lsrs	r7, r7, #1
 80180ca:	260b      	movs	r6, #11
 80180cc:	3e01      	subs	r6, #1
 80180ce:	d013      	beq.n	80180f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80180d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80180d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80180d6:	462a      	mov	r2, r5
 80180d8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80180dc:	4639      	mov	r1, r7
 80180de:	4643      	mov	r3, r8
 80180e0:	4620      	mov	r0, r4
 80180e2:	f7ff ffce 	bl	8018082 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80180e6:	b138      	cbz	r0, 80180f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80180e8:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80180ec:	4642      	mov	r2, r8
 80180ee:	4620      	mov	r0, r4
 80180f0:	f7ff ff93 	bl	801801a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80180f4:	2800      	cmp	r0, #0
 80180f6:	d1e9      	bne.n	80180cc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80180f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080180fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80180fc:	b570      	push	{r4, r5, r6, lr}
 80180fe:	694a      	ldr	r2, [r1, #20]
 8018100:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018102:	684b      	ldr	r3, [r1, #4]
 8018104:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8018106:	1b54      	subs	r4, r2, r5
 8018108:	f000 8106 	beq.w	8018318 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801810c:	1b9b      	subs	r3, r3, r6
 801810e:	d003      	beq.n	8018118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018110:	4363      	muls	r3, r4
 8018112:	2210      	movs	r2, #16
 8018114:	fb93 f3f2 	sdiv	r3, r3, r2
 8018118:	680c      	ldr	r4, [r1, #0]
 801811a:	698a      	ldr	r2, [r1, #24]
 801811c:	1b65      	subs	r5, r4, r5
 801811e:	f000 80fd 	beq.w	801831c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8018122:	1b92      	subs	r2, r2, r6
 8018124:	d003      	beq.n	801812e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018126:	436a      	muls	r2, r5
 8018128:	2410      	movs	r4, #16
 801812a:	fb92 f2f4 	sdiv	r2, r2, r4
 801812e:	1a9b      	subs	r3, r3, r2
 8018130:	ee07 3a90 	vmov	s15, r3
 8018134:	ed9f 4a88 	vldr	s8, [pc, #544]	; 8018358 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8018138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801813c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018140:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018144:	460a      	mov	r2, r1
 8018146:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801814a:	4603      	mov	r3, r0
 801814c:	f100 040c 	add.w	r4, r0, #12
 8018150:	eeb1 6a43 	vneg.f32	s12, s6
 8018154:	edd2 7a02 	vldr	s15, [r2, #8]
 8018158:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801815c:	3214      	adds	r2, #20
 801815e:	ece3 6a01 	vstmia	r3!, {s13}
 8018162:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018166:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801816a:	429c      	cmp	r4, r3
 801816c:	edc3 7a02 	vstr	s15, [r3, #8]
 8018170:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018174:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018178:	edc3 7a05 	vstr	s15, [r3, #20]
 801817c:	d1ea      	bne.n	8018154 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801817e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018180:	698b      	ldr	r3, [r1, #24]
 8018182:	edd0 4a02 	vldr	s9, [r0, #8]
 8018186:	edd0 3a00 	vldr	s7, [r0]
 801818a:	edd0 6a01 	vldr	s13, [r0, #4]
 801818e:	ed90 5a05 	vldr	s10, [r0, #20]
 8018192:	ed90 2a03 	vldr	s4, [r0, #12]
 8018196:	edd0 5a04 	vldr	s11, [r0, #16]
 801819a:	ed90 1a07 	vldr	s2, [r0, #28]
 801819e:	edd0 2a06 	vldr	s5, [r0, #24]
 80181a2:	1a9b      	subs	r3, r3, r2
 80181a4:	ee07 3a90 	vmov	s15, r3
 80181a8:	684b      	ldr	r3, [r1, #4]
 80181aa:	1a9b      	subs	r3, r3, r2
 80181ac:	ee07 3a10 	vmov	s14, r3
 80181b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181b4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80181b8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80181bc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80181c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80181c4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80181c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80181cc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80181d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80181d4:	ee32 5a45 	vsub.f32	s10, s4, s10
 80181d8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80181dc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80181e0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80181e2:	694a      	ldr	r2, [r1, #20]
 80181e4:	1b13      	subs	r3, r2, r4
 80181e6:	ee07 3a10 	vmov	s14, r3
 80181ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80181ee:	680b      	ldr	r3, [r1, #0]
 80181f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80181f4:	1b1b      	subs	r3, r3, r4
 80181f6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80181fa:	ee07 3a10 	vmov	s14, r3
 80181fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018202:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018206:	eee6 4a87 	vfma.f32	s9, s13, s14
 801820a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801820e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8018212:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018214:	698b      	ldr	r3, [r1, #24]
 8018216:	1a9b      	subs	r3, r3, r2
 8018218:	ee06 3a90 	vmov	s13, r3
 801821c:	684b      	ldr	r3, [r1, #4]
 801821e:	1a9b      	subs	r3, r3, r2
 8018220:	ee07 3a10 	vmov	s14, r3
 8018224:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018228:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801822c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018230:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018234:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018238:	eee5 6a87 	vfma.f32	s13, s11, s14
 801823c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8018240:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8018244:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018246:	694a      	ldr	r2, [r1, #20]
 8018248:	1b13      	subs	r3, r2, r4
 801824a:	ee07 3a10 	vmov	s14, r3
 801824e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018252:	680b      	ldr	r3, [r1, #0]
 8018254:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018258:	1b1b      	subs	r3, r3, r4
 801825a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801825e:	ee07 3a10 	vmov	s14, r3
 8018262:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018266:	ee27 7a04 	vmul.f32	s14, s14, s8
 801826a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801826e:	edd0 5a08 	vldr	s11, [r0, #32]
 8018272:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018276:	ee31 1a65 	vsub.f32	s2, s2, s11
 801827a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801827e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018280:	698b      	ldr	r3, [r1, #24]
 8018282:	1a9b      	subs	r3, r3, r2
 8018284:	ee07 3a10 	vmov	s14, r3
 8018288:	684b      	ldr	r3, [r1, #4]
 801828a:	1a9b      	subs	r3, r3, r2
 801828c:	ee01 3a90 	vmov	s3, r3
 8018290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018294:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018298:	ee27 7a04 	vmul.f32	s14, s14, s8
 801829c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80182a0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80182a4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80182a8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80182ac:	ee27 7a03 	vmul.f32	s14, s14, s6
 80182b0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80182b4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80182b6:	694a      	ldr	r2, [r1, #20]
 80182b8:	1b13      	subs	r3, r2, r4
 80182ba:	ee03 3a10 	vmov	s6, r3
 80182be:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80182c2:	680b      	ldr	r3, [r1, #0]
 80182c4:	ee23 3a04 	vmul.f32	s6, s6, s8
 80182c8:	1b1b      	subs	r3, r3, r4
 80182ca:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80182ce:	ee03 3a10 	vmov	s6, r3
 80182d2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80182d6:	ee23 4a04 	vmul.f32	s8, s6, s8
 80182da:	eee1 5a04 	vfma.f32	s11, s2, s8
 80182de:	ee25 6a86 	vmul.f32	s12, s11, s12
 80182e2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80182e6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80182ea:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80182ee:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80182f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182f6:	dd13      	ble.n	8018320 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80182f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80182fc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018300:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018302:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801830e:	dd15      	ble.n	801833c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8018310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018314:	6403      	str	r3, [r0, #64]	; 0x40
 8018316:	bd70      	pop	{r4, r5, r6, pc}
 8018318:	4623      	mov	r3, r4
 801831a:	e6fd      	b.n	8018118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801831c:	462a      	mov	r2, r5
 801831e:	e706      	b.n	801812e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018320:	d502      	bpl.n	8018328 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8018322:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018326:	e7e9      	b.n	80182fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018328:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801832c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8018330:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018338:	dade      	bge.n	80182f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801833a:	e7f2      	b.n	8018322 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801833c:	d502      	bpl.n	8018344 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801833e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018342:	e7e7      	b.n	8018314 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8018344:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018348:	eee3 4a86 	vfma.f32	s9, s7, s12
 801834c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8018350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018354:	dadc      	bge.n	8018310 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018356:	e7f2      	b.n	801833e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018358:	3d800000 	.word	0x3d800000

0801835c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018360:	2714      	movs	r7, #20
 8018362:	435f      	muls	r7, r3
 8018364:	eb02 0c07 	add.w	ip, r2, r7
 8018368:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801836c:	f115 0e0f 	adds.w	lr, r5, #15
 8018370:	f100 80a2 	bmi.w	80184b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018374:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018378:	9c08      	ldr	r4, [sp, #32]
 801837a:	f8c0 e014 	str.w	lr, [r0, #20]
 801837e:	2614      	movs	r6, #20
 8018380:	4366      	muls	r6, r4
 8018382:	eb02 0806 	add.w	r8, r2, r6
 8018386:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801838a:	f115 040f 	adds.w	r4, r5, #15
 801838e:	f100 809f 	bmi.w	80184d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8018392:	1124      	asrs	r4, r4, #4
 8018394:	eba4 040e 	sub.w	r4, r4, lr
 8018398:	6184      	str	r4, [r0, #24]
 801839a:	2c00      	cmp	r4, #0
 801839c:	f000 808a 	beq.w	80184b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80183a0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80183a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80183a8:	5995      	ldr	r5, [r2, r6]
 80183aa:	eba4 0809 	sub.w	r8, r4, r9
 80183ae:	59d4      	ldr	r4, [r2, r7]
 80183b0:	eba5 0a04 	sub.w	sl, r5, r4
 80183b4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80183b8:	fb0e fe05 	mul.w	lr, lr, r5
 80183bc:	fb0a ee19 	mls	lr, sl, r9, lr
 80183c0:	fb08 e404 	mla	r4, r8, r4, lr
 80183c4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80183c8:	3c01      	subs	r4, #1
 80183ca:	19a4      	adds	r4, r4, r6
 80183cc:	f100 808c 	bmi.w	80184e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80183d0:	fb94 fef6 	sdiv	lr, r4, r6
 80183d4:	f8c0 e000 	str.w	lr, [r0]
 80183d8:	fb06 441e 	mls	r4, r6, lr, r4
 80183dc:	6104      	str	r4, [r0, #16]
 80183de:	2d00      	cmp	r5, #0
 80183e0:	f2c0 8095 	blt.w	801850e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80183e4:	fb95 f4f6 	sdiv	r4, r5, r6
 80183e8:	6044      	str	r4, [r0, #4]
 80183ea:	fb06 5514 	mls	r5, r6, r4, r5
 80183ee:	6085      	str	r5, [r0, #8]
 80183f0:	60c6      	str	r6, [r0, #12]
 80183f2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80183f6:	6945      	ldr	r5, [r0, #20]
 80183f8:	59d2      	ldr	r2, [r2, r7]
 80183fa:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8018530 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80183fe:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018402:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8018406:	ee07 4a10 	vmov	s14, r4
 801840a:	6804      	ldr	r4, [r0, #0]
 801840c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018410:	ee07 2a90 	vmov	s15, r2
 8018414:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801841c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018420:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018424:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018428:	edd3 6a00 	vldr	s13, [r3]
 801842c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018430:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8018434:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018438:	edc0 6a07 	vstr	s13, [r0, #28]
 801843c:	edd0 6a01 	vldr	s13, [r0, #4]
 8018440:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8018444:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018448:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801844c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018450:	ed80 6a08 	vstr	s12, [r0, #32]
 8018454:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8018456:	6242      	str	r2, [r0, #36]	; 0x24
 8018458:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801845c:	ed93 6a03 	vldr	s12, [r3, #12]
 8018460:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018464:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018468:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801846c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8018470:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018474:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018478:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801847c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8018480:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018482:	6302      	str	r2, [r0, #48]	; 0x30
 8018484:	ed93 6a06 	vldr	s12, [r3, #24]
 8018488:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801848c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018490:	eeb0 7a46 	vmov.f32	s14, s12
 8018494:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018498:	eea6 7a27 	vfma.f32	s14, s12, s15
 801849c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80184a0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80184a4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80184a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80184ac:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80184b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80184b2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80184b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184b8:	f1c5 0501 	rsb	r5, r5, #1
 80184bc:	f015 050f 	ands.w	r5, r5, #15
 80184c0:	bf18      	it	ne
 80184c2:	2501      	movne	r5, #1
 80184c4:	2410      	movs	r4, #16
 80184c6:	fb9e fef4 	sdiv	lr, lr, r4
 80184ca:	ebae 0e05 	sub.w	lr, lr, r5
 80184ce:	e753      	b.n	8018378 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80184d0:	f1c5 0501 	rsb	r5, r5, #1
 80184d4:	f015 050f 	ands.w	r5, r5, #15
 80184d8:	bf18      	it	ne
 80184da:	2501      	movne	r5, #1
 80184dc:	f04f 0910 	mov.w	r9, #16
 80184e0:	fb94 f4f9 	sdiv	r4, r4, r9
 80184e4:	1b64      	subs	r4, r4, r5
 80184e6:	e755      	b.n	8018394 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80184e8:	4264      	negs	r4, r4
 80184ea:	fb94 fef6 	sdiv	lr, r4, r6
 80184ee:	f1ce 0800 	rsb	r8, lr, #0
 80184f2:	fb06 441e 	mls	r4, r6, lr, r4
 80184f6:	f8c0 8000 	str.w	r8, [r0]
 80184fa:	6104      	str	r4, [r0, #16]
 80184fc:	2c00      	cmp	r4, #0
 80184fe:	f43f af6e 	beq.w	80183de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8018502:	ea6f 0e0e 	mvn.w	lr, lr
 8018506:	f8c0 e000 	str.w	lr, [r0]
 801850a:	1b34      	subs	r4, r6, r4
 801850c:	e766      	b.n	80183dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801850e:	426d      	negs	r5, r5
 8018510:	fb95 f4f6 	sdiv	r4, r5, r6
 8018514:	f1c4 0e00 	rsb	lr, r4, #0
 8018518:	fb06 5514 	mls	r5, r6, r4, r5
 801851c:	f8c0 e004 	str.w	lr, [r0, #4]
 8018520:	6085      	str	r5, [r0, #8]
 8018522:	2d00      	cmp	r5, #0
 8018524:	f43f af64 	beq.w	80183f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018528:	43e4      	mvns	r4, r4
 801852a:	6044      	str	r4, [r0, #4]
 801852c:	1b75      	subs	r5, r6, r5
 801852e:	e75e      	b.n	80183ee <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8018530:	3d800000 	.word	0x3d800000

08018534 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018534:	4602      	mov	r2, r0
 8018536:	b148      	cbz	r0, 801854c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018538:	2300      	movs	r3, #0
 801853a:	b298      	uxth	r0, r3
 801853c:	3301      	adds	r3, #1
 801853e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018542:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018546:	2900      	cmp	r1, #0
 8018548:	d1f7      	bne.n	801853a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801854a:	4770      	bx	lr
 801854c:	4770      	bx	lr

0801854e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801854e:	b530      	push	{r4, r5, lr}
 8018550:	4604      	mov	r4, r0
 8018552:	b159      	cbz	r1, 801856c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018554:	b148      	cbz	r0, 801856a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018556:	2300      	movs	r3, #0
 8018558:	b298      	uxth	r0, r3
 801855a:	4282      	cmp	r2, r0
 801855c:	d905      	bls.n	801856a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801855e:	5ccd      	ldrb	r5, [r1, r3]
 8018560:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018564:	3301      	adds	r3, #1
 8018566:	2d00      	cmp	r5, #0
 8018568:	d1f6      	bne.n	8018558 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801856a:	bd30      	pop	{r4, r5, pc}
 801856c:	4608      	mov	r0, r1
 801856e:	e7fc      	b.n	801856a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018570 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8018570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018572:	b08b      	sub	sp, #44	; 0x2c
 8018574:	468c      	mov	ip, r1
 8018576:	2100      	movs	r1, #0
 8018578:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801857c:	4604      	mov	r4, r0
 801857e:	261f      	movs	r6, #31
 8018580:	af01      	add	r7, sp, #4
 8018582:	fb94 fef3 	sdiv	lr, r4, r3
 8018586:	fb03 441e 	mls	r4, r3, lr, r4
 801858a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801858e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018592:	b2ec      	uxtb	r4, r5
 8018594:	2d09      	cmp	r5, #9
 8018596:	bfd4      	ite	le
 8018598:	3430      	addle	r4, #48	; 0x30
 801859a:	3457      	addgt	r4, #87	; 0x57
 801859c:	b2e4      	uxtb	r4, r4
 801859e:	55bc      	strb	r4, [r7, r6]
 80185a0:	4674      	mov	r4, lr
 80185a2:	1e71      	subs	r1, r6, #1
 80185a4:	b974      	cbnz	r4, 80185c4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 80185a6:	2800      	cmp	r0, #0
 80185a8:	da05      	bge.n	80185b6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 80185aa:	ab0a      	add	r3, sp, #40	; 0x28
 80185ac:	4419      	add	r1, r3
 80185ae:	232d      	movs	r3, #45	; 0x2d
 80185b0:	f801 3c24 	strb.w	r3, [r1, #-36]
 80185b4:	1eb1      	subs	r1, r6, #2
 80185b6:	3101      	adds	r1, #1
 80185b8:	4439      	add	r1, r7
 80185ba:	4660      	mov	r0, ip
 80185bc:	f7ff ffc7 	bl	801854e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80185c0:	b00b      	add	sp, #44	; 0x2c
 80185c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185c4:	460e      	mov	r6, r1
 80185c6:	e7dc      	b.n	8018582 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

080185c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80185c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185ca:	b08b      	sub	sp, #44	; 0x2c
 80185cc:	468c      	mov	ip, r1
 80185ce:	2100      	movs	r1, #0
 80185d0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80185d4:	ae01      	add	r6, sp, #4
 80185d6:	211f      	movs	r1, #31
 80185d8:	fbb0 f7f3 	udiv	r7, r0, r3
 80185dc:	fb03 0517 	mls	r5, r3, r7, r0
 80185e0:	b2ec      	uxtb	r4, r5
 80185e2:	2d09      	cmp	r5, #9
 80185e4:	bfd4      	ite	le
 80185e6:	3430      	addle	r4, #48	; 0x30
 80185e8:	3457      	addgt	r4, #87	; 0x57
 80185ea:	b2e4      	uxtb	r4, r4
 80185ec:	558c      	strb	r4, [r1, r6]
 80185ee:	4638      	mov	r0, r7
 80185f0:	1e4c      	subs	r4, r1, #1
 80185f2:	b92f      	cbnz	r7, 8018600 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 80185f4:	4431      	add	r1, r6
 80185f6:	4660      	mov	r0, ip
 80185f8:	f7ff ffa9 	bl	801854e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80185fc:	b00b      	add	sp, #44	; 0x2c
 80185fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018600:	4621      	mov	r1, r4
 8018602:	e7e9      	b.n	80185d8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08018604 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8018604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018608:	4691      	mov	r9, r2
 801860a:	b085      	sub	sp, #20
 801860c:	6802      	ldr	r2, [r0, #0]
 801860e:	9201      	str	r2, [sp, #4]
 8018610:	4688      	mov	r8, r1
 8018612:	4683      	mov	fp, r0
 8018614:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8018618:	9103      	str	r1, [sp, #12]
 801861a:	4610      	mov	r0, r2
 801861c:	461c      	mov	r4, r3
 801861e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018622:	9302      	str	r3, [sp, #8]
 8018624:	f7ff ff86 	bl	8018534 <_ZN8touchgfx7Unicode6strlenEPKt>
 8018628:	f1b8 0f00 	cmp.w	r8, #0
 801862c:	bf0c      	ite	eq
 801862e:	4684      	moveq	ip, r0
 8018630:	f100 0c01 	addne.w	ip, r0, #1
 8018634:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8018638:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801863c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801863e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018640:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8018644:	9903      	ldr	r1, [sp, #12]
 8018646:	fa1f fc8c 	uxth.w	ip, ip
 801864a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801864e:	d041      	beq.n	80186d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018650:	d834      	bhi.n	80186bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8018652:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8018656:	d059      	beq.n	801870c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018658:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801865c:	d03a      	beq.n	80186d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801865e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8018662:	d034      	beq.n	80186ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018664:	2400      	movs	r4, #0
 8018666:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801866a:	3a01      	subs	r2, #1
 801866c:	b169      	cbz	r1, 801868a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801866e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018670:	458c      	cmp	ip, r1
 8018672:	da09      	bge.n	8018688 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018674:	eba1 010c 	sub.w	r1, r1, ip
 8018678:	b289      	uxth	r1, r1
 801867a:	b933      	cbnz	r3, 801868a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801867c:	2e00      	cmp	r6, #0
 801867e:	d051      	beq.n	8018724 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018680:	2800      	cmp	r0, #0
 8018682:	d04f      	beq.n	8018724 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018684:	440c      	add	r4, r1
 8018686:	b2a4      	uxth	r4, r4
 8018688:	2100      	movs	r1, #0
 801868a:	682b      	ldr	r3, [r5, #0]
 801868c:	4293      	cmp	r3, r2
 801868e:	da07      	bge.n	80186a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018690:	f1b8 0f00 	cmp.w	r8, #0
 8018694:	d004      	beq.n	80186a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018696:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801869a:	682b      	ldr	r3, [r5, #0]
 801869c:	3301      	adds	r3, #1
 801869e:	602b      	str	r3, [r5, #0]
 80186a0:	2730      	movs	r7, #48	; 0x30
 80186a2:	2c00      	cmp	r4, #0
 80186a4:	d04e      	beq.n	8018744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80186a6:	682e      	ldr	r6, [r5, #0]
 80186a8:	3c01      	subs	r4, #1
 80186aa:	42b2      	cmp	r2, r6
 80186ac:	b2a4      	uxth	r4, r4
 80186ae:	dd49      	ble.n	8018744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80186b0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80186b4:	682b      	ldr	r3, [r5, #0]
 80186b6:	3301      	adds	r3, #1
 80186b8:	602b      	str	r3, [r5, #0]
 80186ba:	e7f2      	b.n	80186a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80186bc:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 80186c0:	d01d      	beq.n	80186fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80186c2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80186c6:	d002      	beq.n	80186ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80186c8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80186cc:	e7c9      	b.n	8018662 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80186ce:	4684      	mov	ip, r0
 80186d0:	f04f 0800 	mov.w	r8, #0
 80186d4:	2c00      	cmp	r4, #0
 80186d6:	d0c6      	beq.n	8018666 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80186d8:	b947      	cbnz	r7, 80186ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80186da:	2801      	cmp	r0, #1
 80186dc:	d106      	bne.n	80186ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80186de:	8814      	ldrh	r4, [r2, #0]
 80186e0:	2c30      	cmp	r4, #48	; 0x30
 80186e2:	bf02      	ittt	eq
 80186e4:	3202      	addeq	r2, #2
 80186e6:	f8cb 2000 	streq.w	r2, [fp]
 80186ea:	4638      	moveq	r0, r7
 80186ec:	45bc      	cmp	ip, r7
 80186ee:	da14      	bge.n	801871a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80186f0:	b2bf      	uxth	r7, r7
 80186f2:	eba7 040c 	sub.w	r4, r7, ip
 80186f6:	b2a4      	uxth	r4, r4
 80186f8:	46bc      	mov	ip, r7
 80186fa:	2600      	movs	r6, #0
 80186fc:	e7b3      	b.n	8018666 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80186fe:	4684      	mov	ip, r0
 8018700:	b16c      	cbz	r4, 801871e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8018702:	42b8      	cmp	r0, r7
 8018704:	dd00      	ble.n	8018708 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8018706:	b2b8      	uxth	r0, r7
 8018708:	2400      	movs	r4, #0
 801870a:	e003      	b.n	8018714 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801870c:	f04f 0c01 	mov.w	ip, #1
 8018710:	2400      	movs	r4, #0
 8018712:	4660      	mov	r0, ip
 8018714:	4626      	mov	r6, r4
 8018716:	46a0      	mov	r8, r4
 8018718:	e7a5      	b.n	8018666 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801871a:	2400      	movs	r4, #0
 801871c:	e7ed      	b.n	80186fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801871e:	4626      	mov	r6, r4
 8018720:	46a0      	mov	r8, r4
 8018722:	e7a0      	b.n	8018666 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018724:	2900      	cmp	r1, #0
 8018726:	d0b0      	beq.n	801868a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018728:	2720      	movs	r7, #32
 801872a:	682e      	ldr	r6, [r5, #0]
 801872c:	2900      	cmp	r1, #0
 801872e:	d0ac      	beq.n	801868a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018730:	3901      	subs	r1, #1
 8018732:	4296      	cmp	r6, r2
 8018734:	b289      	uxth	r1, r1
 8018736:	daa7      	bge.n	8018688 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018738:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801873c:	682b      	ldr	r3, [r5, #0]
 801873e:	3301      	adds	r3, #1
 8018740:	602b      	str	r3, [r5, #0]
 8018742:	e7f2      	b.n	801872a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8018744:	b188      	cbz	r0, 801876a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018746:	682b      	ldr	r3, [r5, #0]
 8018748:	3801      	subs	r0, #1
 801874a:	429a      	cmp	r2, r3
 801874c:	b280      	uxth	r0, r0
 801874e:	dd0c      	ble.n	801876a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018750:	f8db 3000 	ldr.w	r3, [fp]
 8018754:	1c9c      	adds	r4, r3, #2
 8018756:	f8cb 4000 	str.w	r4, [fp]
 801875a:	881c      	ldrh	r4, [r3, #0]
 801875c:	682b      	ldr	r3, [r5, #0]
 801875e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8018762:	682b      	ldr	r3, [r5, #0]
 8018764:	3301      	adds	r3, #1
 8018766:	602b      	str	r3, [r5, #0]
 8018768:	e7ec      	b.n	8018744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801876a:	2620      	movs	r6, #32
 801876c:	b151      	cbz	r1, 8018784 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801876e:	6828      	ldr	r0, [r5, #0]
 8018770:	3901      	subs	r1, #1
 8018772:	4282      	cmp	r2, r0
 8018774:	b289      	uxth	r1, r1
 8018776:	dd05      	ble.n	8018784 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018778:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801877c:	682b      	ldr	r3, [r5, #0]
 801877e:	3301      	adds	r3, #1
 8018780:	602b      	str	r3, [r5, #0]
 8018782:	e7f3      	b.n	801876c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018784:	b005      	add	sp, #20
 8018786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801878a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801878a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801878e:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8018792:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8018796:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801879a:	2400      	movs	r4, #0
 801879c:	8014      	strh	r4, [r2, #0]
 801879e:	701c      	strb	r4, [r3, #0]
 80187a0:	f888 4000 	strb.w	r4, [r8]
 80187a4:	f88c 4000 	strb.w	r4, [ip]
 80187a8:	f88e 4000 	strb.w	r4, [lr]
 80187ac:	703c      	strb	r4, [r7, #0]
 80187ae:	6804      	ldr	r4, [r0, #0]
 80187b0:	b1a4      	cbz	r4, 80187dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80187b2:	8824      	ldrh	r4, [r4, #0]
 80187b4:	f04f 0901 	mov.w	r9, #1
 80187b8:	b314      	cbz	r4, 8018800 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80187ba:	2c2b      	cmp	r4, #43	; 0x2b
 80187bc:	d001      	beq.n	80187c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80187be:	2c20      	cmp	r4, #32
 80187c0:	d110      	bne.n	80187e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80187c2:	8014      	strh	r4, [r2, #0]
 80187c4:	6804      	ldr	r4, [r0, #0]
 80187c6:	b10c      	cbz	r4, 80187cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80187c8:	3402      	adds	r4, #2
 80187ca:	6004      	str	r4, [r0, #0]
 80187cc:	680c      	ldr	r4, [r1, #0]
 80187ce:	b10c      	cbz	r4, 80187d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80187d0:	3401      	adds	r4, #1
 80187d2:	600c      	str	r4, [r1, #0]
 80187d4:	6804      	ldr	r4, [r0, #0]
 80187d6:	b17c      	cbz	r4, 80187f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80187d8:	8824      	ldrh	r4, [r4, #0]
 80187da:	e7ed      	b.n	80187b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80187dc:	680c      	ldr	r4, [r1, #0]
 80187de:	b17c      	cbz	r4, 8018800 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80187e0:	7824      	ldrb	r4, [r4, #0]
 80187e2:	e7e7      	b.n	80187b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80187e4:	2c2d      	cmp	r4, #45	; 0x2d
 80187e6:	d102      	bne.n	80187ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80187e8:	f883 9000 	strb.w	r9, [r3]
 80187ec:	e7ea      	b.n	80187c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80187ee:	2c23      	cmp	r4, #35	; 0x23
 80187f0:	d107      	bne.n	8018802 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80187f2:	f888 9000 	strb.w	r9, [r8]
 80187f6:	e7e5      	b.n	80187c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80187f8:	680c      	ldr	r4, [r1, #0]
 80187fa:	b10c      	cbz	r4, 8018800 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80187fc:	7824      	ldrb	r4, [r4, #0]
 80187fe:	e7db      	b.n	80187b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018800:	2400      	movs	r4, #0
 8018802:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018806:	2b09      	cmp	r3, #9
 8018808:	d901      	bls.n	801880e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801880a:	2c2a      	cmp	r4, #42	; 0x2a
 801880c:	d122      	bne.n	8018854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801880e:	2301      	movs	r3, #1
 8018810:	2c30      	cmp	r4, #48	; 0x30
 8018812:	f88e 3000 	strb.w	r3, [lr]
 8018816:	d10d      	bne.n	8018834 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018818:	f88c 3000 	strb.w	r3, [ip]
 801881c:	6803      	ldr	r3, [r0, #0]
 801881e:	b10b      	cbz	r3, 8018824 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8018820:	3302      	adds	r3, #2
 8018822:	6003      	str	r3, [r0, #0]
 8018824:	680b      	ldr	r3, [r1, #0]
 8018826:	b10b      	cbz	r3, 801882c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018828:	3301      	adds	r3, #1
 801882a:	600b      	str	r3, [r1, #0]
 801882c:	6803      	ldr	r3, [r0, #0]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d02f      	beq.n	8018892 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8018832:	881c      	ldrh	r4, [r3, #0]
 8018834:	2c2a      	cmp	r4, #42	; 0x2a
 8018836:	d135      	bne.n	80188a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018838:	f04f 33ff 	mov.w	r3, #4294967295
 801883c:	6033      	str	r3, [r6, #0]
 801883e:	6803      	ldr	r3, [r0, #0]
 8018840:	b10b      	cbz	r3, 8018846 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8018842:	3302      	adds	r3, #2
 8018844:	6003      	str	r3, [r0, #0]
 8018846:	680b      	ldr	r3, [r1, #0]
 8018848:	b10b      	cbz	r3, 801884e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801884a:	3301      	adds	r3, #1
 801884c:	600b      	str	r3, [r1, #0]
 801884e:	6803      	ldr	r3, [r0, #0]
 8018850:	b31b      	cbz	r3, 801889a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8018852:	881c      	ldrh	r4, [r3, #0]
 8018854:	2c2e      	cmp	r4, #46	; 0x2e
 8018856:	d11a      	bne.n	801888e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018858:	2301      	movs	r3, #1
 801885a:	703b      	strb	r3, [r7, #0]
 801885c:	6803      	ldr	r3, [r0, #0]
 801885e:	b10b      	cbz	r3, 8018864 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8018860:	3302      	adds	r3, #2
 8018862:	6003      	str	r3, [r0, #0]
 8018864:	680b      	ldr	r3, [r1, #0]
 8018866:	b10b      	cbz	r3, 801886c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018868:	3301      	adds	r3, #1
 801886a:	600b      	str	r3, [r1, #0]
 801886c:	6803      	ldr	r3, [r0, #0]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d036      	beq.n	80188e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8018872:	881b      	ldrh	r3, [r3, #0]
 8018874:	2b2a      	cmp	r3, #42	; 0x2a
 8018876:	d137      	bne.n	80188e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018878:	f04f 33ff 	mov.w	r3, #4294967295
 801887c:	602b      	str	r3, [r5, #0]
 801887e:	6803      	ldr	r3, [r0, #0]
 8018880:	b10b      	cbz	r3, 8018886 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8018882:	3302      	adds	r3, #2
 8018884:	6003      	str	r3, [r0, #0]
 8018886:	680b      	ldr	r3, [r1, #0]
 8018888:	b10b      	cbz	r3, 801888e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801888a:	3301      	adds	r3, #1
 801888c:	600b      	str	r3, [r1, #0]
 801888e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018892:	680c      	ldr	r4, [r1, #0]
 8018894:	b134      	cbz	r4, 80188a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018896:	7824      	ldrb	r4, [r4, #0]
 8018898:	e7cc      	b.n	8018834 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801889a:	680b      	ldr	r3, [r1, #0]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d0f6      	beq.n	801888e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80188a0:	781c      	ldrb	r4, [r3, #0]
 80188a2:	e7d7      	b.n	8018854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80188a4:	2300      	movs	r3, #0
 80188a6:	6033      	str	r3, [r6, #0]
 80188a8:	220a      	movs	r2, #10
 80188aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80188ae:	fa1f f38c 	uxth.w	r3, ip
 80188b2:	2b09      	cmp	r3, #9
 80188b4:	d8ce      	bhi.n	8018854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80188b6:	6833      	ldr	r3, [r6, #0]
 80188b8:	fb02 c303 	mla	r3, r2, r3, ip
 80188bc:	6033      	str	r3, [r6, #0]
 80188be:	6803      	ldr	r3, [r0, #0]
 80188c0:	b10b      	cbz	r3, 80188c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80188c2:	3302      	adds	r3, #2
 80188c4:	6003      	str	r3, [r0, #0]
 80188c6:	680b      	ldr	r3, [r1, #0]
 80188c8:	b10b      	cbz	r3, 80188ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80188ca:	3301      	adds	r3, #1
 80188cc:	600b      	str	r3, [r1, #0]
 80188ce:	6803      	ldr	r3, [r0, #0]
 80188d0:	b10b      	cbz	r3, 80188d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80188d2:	881c      	ldrh	r4, [r3, #0]
 80188d4:	e7e9      	b.n	80188aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80188d6:	680c      	ldr	r4, [r1, #0]
 80188d8:	2c00      	cmp	r4, #0
 80188da:	d0e6      	beq.n	80188aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80188dc:	7824      	ldrb	r4, [r4, #0]
 80188de:	e7e4      	b.n	80188aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80188e0:	680b      	ldr	r3, [r1, #0]
 80188e2:	b10b      	cbz	r3, 80188e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80188e4:	781b      	ldrb	r3, [r3, #0]
 80188e6:	e7c5      	b.n	8018874 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80188e8:	2200      	movs	r2, #0
 80188ea:	602a      	str	r2, [r5, #0]
 80188ec:	240a      	movs	r4, #10
 80188ee:	3b30      	subs	r3, #48	; 0x30
 80188f0:	b29e      	uxth	r6, r3
 80188f2:	2e09      	cmp	r6, #9
 80188f4:	682a      	ldr	r2, [r5, #0]
 80188f6:	d813      	bhi.n	8018920 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80188f8:	fb04 3302 	mla	r3, r4, r2, r3
 80188fc:	602b      	str	r3, [r5, #0]
 80188fe:	6803      	ldr	r3, [r0, #0]
 8018900:	b10b      	cbz	r3, 8018906 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8018902:	3302      	adds	r3, #2
 8018904:	6003      	str	r3, [r0, #0]
 8018906:	680b      	ldr	r3, [r1, #0]
 8018908:	b10b      	cbz	r3, 801890e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801890a:	3301      	adds	r3, #1
 801890c:	600b      	str	r3, [r1, #0]
 801890e:	6803      	ldr	r3, [r0, #0]
 8018910:	b10b      	cbz	r3, 8018916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8018912:	881b      	ldrh	r3, [r3, #0]
 8018914:	e7eb      	b.n	80188ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018916:	680b      	ldr	r3, [r1, #0]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d0e8      	beq.n	80188ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801891c:	781b      	ldrb	r3, [r3, #0]
 801891e:	e7e6      	b.n	80188ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018920:	2a06      	cmp	r2, #6
 8018922:	bfa8      	it	ge
 8018924:	2206      	movge	r2, #6
 8018926:	602a      	str	r2, [r5, #0]
 8018928:	e7b1      	b.n	801888e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801892a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801892a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801892e:	b0a3      	sub	sp, #140	; 0x8c
 8018930:	2600      	movs	r6, #0
 8018932:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8018936:	4607      	mov	r7, r0
 8018938:	4688      	mov	r8, r1
 801893a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801893e:	4631      	mov	r1, r6
 8018940:	2242      	movs	r2, #66	; 0x42
 8018942:	4648      	mov	r0, r9
 8018944:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8018946:	960d      	str	r6, [sp, #52]	; 0x34
 8018948:	f00e f881 	bl	8026a4e <memset>
 801894c:	b15f      	cbz	r7, 8018966 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801894e:	f108 3aff 	add.w	sl, r8, #4294967295
 8018952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018956:	b152      	cbz	r2, 801896e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8018958:	8812      	ldrh	r2, [r2, #0]
 801895a:	b10a      	cbz	r2, 8018960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801895c:	459a      	cmp	sl, r3
 801895e:	dc2e      	bgt.n	80189be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8018960:	2200      	movs	r2, #0
 8018962:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018966:	4638      	mov	r0, r7
 8018968:	b023      	add	sp, #140	; 0x8c
 801896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801896e:	9a08      	ldr	r2, [sp, #32]
 8018970:	2a00      	cmp	r2, #0
 8018972:	d0f5      	beq.n	8018960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018974:	7812      	ldrb	r2, [r2, #0]
 8018976:	e7f0      	b.n	801895a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8018978:	2d00      	cmp	r5, #0
 801897a:	d0ea      	beq.n	8018952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801897c:	782a      	ldrb	r2, [r5, #0]
 801897e:	b142      	cbz	r2, 8018992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8018980:	2a25      	cmp	r2, #37	; 0x25
 8018982:	d001      	beq.n	8018988 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8018984:	459a      	cmp	sl, r3
 8018986:	dc08      	bgt.n	801899a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8018988:	f1bb 0f00 	cmp.w	fp, #0
 801898c:	d121      	bne.n	80189d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801898e:	2d00      	cmp	r5, #0
 8018990:	d0df      	beq.n	8018952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018992:	782a      	ldrb	r2, [r5, #0]
 8018994:	f04f 0b00 	mov.w	fp, #0
 8018998:	e01d      	b.n	80189d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801899a:	f1bb 0f00 	cmp.w	fp, #0
 801899e:	d078      	beq.n	8018a92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 80189a0:	f8bb 2000 	ldrh.w	r2, [fp]
 80189a4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80189a8:	f1bb 0f00 	cmp.w	fp, #0
 80189ac:	d002      	beq.n	80189b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80189ae:	f10b 0202 	add.w	r2, fp, #2
 80189b2:	9209      	str	r2, [sp, #36]	; 0x24
 80189b4:	b10d      	cbz	r5, 80189ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 80189b6:	3501      	adds	r5, #1
 80189b8:	9508      	str	r5, [sp, #32]
 80189ba:	3301      	adds	r3, #1
 80189bc:	930d      	str	r3, [sp, #52]	; 0x34
 80189be:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80189c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189c4:	f1bb 0f00 	cmp.w	fp, #0
 80189c8:	d0d6      	beq.n	8018978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80189ca:	f8bb 2000 	ldrh.w	r2, [fp]
 80189ce:	2a00      	cmp	r2, #0
 80189d0:	d1d6      	bne.n	8018980 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80189d2:	f8bb 2000 	ldrh.w	r2, [fp]
 80189d6:	2a00      	cmp	r2, #0
 80189d8:	d0bb      	beq.n	8018952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80189da:	459a      	cmp	sl, r3
 80189dc:	ddb9      	ble.n	8018952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80189de:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80189e2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80189e6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 80189ea:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 80189ee:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80189f2:	960e      	str	r6, [sp, #56]	; 0x38
 80189f4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 80189f8:	960f      	str	r6, [sp, #60]	; 0x3c
 80189fa:	f1bb 0f00 	cmp.w	fp, #0
 80189fe:	d002      	beq.n	8018a06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8018a00:	f10b 0302 	add.w	r3, fp, #2
 8018a04:	9309      	str	r3, [sp, #36]	; 0x24
 8018a06:	b10d      	cbz	r5, 8018a0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8018a08:	1c6b      	adds	r3, r5, #1
 8018a0a:	9308      	str	r3, [sp, #32]
 8018a0c:	ab0f      	add	r3, sp, #60	; 0x3c
 8018a0e:	9305      	str	r3, [sp, #20]
 8018a10:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8018a14:	9304      	str	r3, [sp, #16]
 8018a16:	ab0e      	add	r3, sp, #56	; 0x38
 8018a18:	9303      	str	r3, [sp, #12]
 8018a1a:	ab0c      	add	r3, sp, #48	; 0x30
 8018a1c:	9302      	str	r3, [sp, #8]
 8018a1e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8018a22:	9301      	str	r3, [sp, #4]
 8018a24:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8018a28:	9300      	str	r3, [sp, #0]
 8018a2a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8018a2e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8018a32:	a908      	add	r1, sp, #32
 8018a34:	a809      	add	r0, sp, #36	; 0x24
 8018a36:	f7ff fea8 	bl	801878a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8018a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	bfbe      	ittt	lt
 8018a40:	6823      	ldrlt	r3, [r4, #0]
 8018a42:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018a46:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018a48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a4a:	bfb8      	it	lt
 8018a4c:	3404      	addlt	r4, #4
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	bfb8      	it	lt
 8018a52:	6823      	ldrlt	r3, [r4, #0]
 8018a54:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018a58:	bfbe      	ittt	lt
 8018a5a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018a5e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8018a60:	3404      	addlt	r4, #4
 8018a62:	b1d9      	cbz	r1, 8018a9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 8018a64:	880b      	ldrh	r3, [r1, #0]
 8018a66:	2b69      	cmp	r3, #105	; 0x69
 8018a68:	d01f      	beq.n	8018aaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018a6a:	d82f      	bhi.n	8018acc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8018a6c:	2b58      	cmp	r3, #88	; 0x58
 8018a6e:	d01c      	beq.n	8018aaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018a70:	d818      	bhi.n	8018aa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 8018a72:	2b25      	cmp	r3, #37	; 0x25
 8018a74:	d034      	beq.n	8018ae0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 8018a76:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8018a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a7c:	f1bb 0f00 	cmp.w	fp, #0
 8018a80:	f000 80b8 	beq.w	8018bf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 8018a84:	f8bb 5000 	ldrh.w	r5, [fp]
 8018a88:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8018a8c:	3301      	adds	r3, #1
 8018a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8018a90:	e029      	b.n	8018ae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8018a92:	b10d      	cbz	r5, 8018a98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 8018a94:	782a      	ldrb	r2, [r5, #0]
 8018a96:	e785      	b.n	80189a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018a98:	462a      	mov	r2, r5
 8018a9a:	e783      	b.n	80189a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018a9c:	2a00      	cmp	r2, #0
 8018a9e:	d0ea      	beq.n	8018a76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8018aa0:	7813      	ldrb	r3, [r2, #0]
 8018aa2:	e7e0      	b.n	8018a66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 8018aa4:	3b63      	subs	r3, #99	; 0x63
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d8e5      	bhi.n	8018a76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8018aaa:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8018aae:	b329      	cbz	r1, 8018afc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8018ab0:	880b      	ldrh	r3, [r1, #0]
 8018ab2:	2b69      	cmp	r3, #105	; 0x69
 8018ab4:	d063      	beq.n	8018b7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8018ab6:	d825      	bhi.n	8018b04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8018ab8:	2b63      	cmp	r3, #99	; 0x63
 8018aba:	d038      	beq.n	8018b2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8018abc:	2b64      	cmp	r3, #100	; 0x64
 8018abe:	d05e      	beq.n	8018b7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8018ac0:	2b58      	cmp	r3, #88	; 0x58
 8018ac2:	d07b      	beq.n	8018bbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 8018ac4:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8018ac8:	4625      	mov	r5, r4
 8018aca:	e036      	b.n	8018b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018acc:	2b73      	cmp	r3, #115	; 0x73
 8018ace:	d0ec      	beq.n	8018aaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018ad0:	d802      	bhi.n	8018ad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 8018ad2:	2b6f      	cmp	r3, #111	; 0x6f
 8018ad4:	d1cf      	bne.n	8018a76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8018ad6:	e7e8      	b.n	8018aaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018ad8:	2b75      	cmp	r3, #117	; 0x75
 8018ada:	d0e6      	beq.n	8018aaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018adc:	2b78      	cmp	r3, #120	; 0x78
 8018ade:	e7f9      	b.n	8018ad4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8018ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018ae2:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8018ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ae8:	b10b      	cbz	r3, 8018aee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8018aea:	3302      	adds	r3, #2
 8018aec:	9309      	str	r3, [sp, #36]	; 0x24
 8018aee:	9b08      	ldr	r3, [sp, #32]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	f43f af2e 	beq.w	8018952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018af6:	3301      	adds	r3, #1
 8018af8:	9308      	str	r3, [sp, #32]
 8018afa:	e72a      	b.n	8018952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018afc:	2a00      	cmp	r2, #0
 8018afe:	d0e1      	beq.n	8018ac4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8018b00:	7813      	ldrb	r3, [r2, #0]
 8018b02:	e7d6      	b.n	8018ab2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 8018b04:	2b73      	cmp	r3, #115	; 0x73
 8018b06:	d036      	beq.n	8018b76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8018b08:	d807      	bhi.n	8018b1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 8018b0a:	2b6f      	cmp	r3, #111	; 0x6f
 8018b0c:	d1da      	bne.n	8018ac4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8018b0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018b10:	1d25      	adds	r5, r4, #4
 8018b12:	eba8 0202 	sub.w	r2, r8, r2
 8018b16:	2308      	movs	r3, #8
 8018b18:	e04a      	b.n	8018bb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8018b1a:	2b75      	cmp	r3, #117	; 0x75
 8018b1c:	d043      	beq.n	8018ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 8018b1e:	2b78      	cmp	r3, #120	; 0x78
 8018b20:	d1d0      	bne.n	8018ac4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8018b22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018b24:	1d25      	adds	r5, r4, #4
 8018b26:	eba8 0202 	sub.w	r2, r8, r2
 8018b2a:	2310      	movs	r3, #16
 8018b2c:	e040      	b.n	8018bb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8018b2e:	6823      	ldr	r3, [r4, #0]
 8018b30:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8018b34:	1d25      	adds	r5, r4, #4
 8018b36:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8018b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b3c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d052      	beq.n	8018bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 8018b44:	881a      	ldrh	r2, [r3, #0]
 8018b46:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8018b4a:	a80d      	add	r0, sp, #52	; 0x34
 8018b4c:	9005      	str	r0, [sp, #20]
 8018b4e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8018b52:	9004      	str	r0, [sp, #16]
 8018b54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018b56:	9003      	str	r0, [sp, #12]
 8018b58:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8018b5c:	9002      	str	r0, [sp, #8]
 8018b5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018b60:	9001      	str	r0, [sp, #4]
 8018b62:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8018b66:	9000      	str	r0, [sp, #0]
 8018b68:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8018b6c:	a810      	add	r0, sp, #64	; 0x40
 8018b6e:	f7ff fd49 	bl	8018604 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8018b72:	462c      	mov	r4, r5
 8018b74:	e7b7      	b.n	8018ae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8018b76:	6823      	ldr	r3, [r4, #0]
 8018b78:	1d25      	adds	r5, r4, #4
 8018b7a:	9310      	str	r3, [sp, #64]	; 0x40
 8018b7c:	e7dd      	b.n	8018b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018b7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018b80:	6820      	ldr	r0, [r4, #0]
 8018b82:	eba8 0202 	sub.w	r2, r8, r2
 8018b86:	230a      	movs	r3, #10
 8018b88:	b292      	uxth	r2, r2
 8018b8a:	4649      	mov	r1, r9
 8018b8c:	f7ff fcf0 	bl	8018570 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8018b90:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018b94:	2b2d      	cmp	r3, #45	; 0x2d
 8018b96:	f104 0504 	add.w	r5, r4, #4
 8018b9a:	d1ce      	bne.n	8018b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018b9c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018ba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ba2:	3302      	adds	r3, #2
 8018ba4:	e7e9      	b.n	8018b7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8018ba6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018ba8:	1d25      	adds	r5, r4, #4
 8018baa:	eba8 0202 	sub.w	r2, r8, r2
 8018bae:	230a      	movs	r3, #10
 8018bb0:	b292      	uxth	r2, r2
 8018bb2:	4649      	mov	r1, r9
 8018bb4:	6820      	ldr	r0, [r4, #0]
 8018bb6:	f7ff fd07 	bl	80185c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8018bba:	e7be      	b.n	8018b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018bbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018bbe:	6820      	ldr	r0, [r4, #0]
 8018bc0:	eba8 0202 	sub.w	r2, r8, r2
 8018bc4:	b292      	uxth	r2, r2
 8018bc6:	2310      	movs	r3, #16
 8018bc8:	4649      	mov	r1, r9
 8018bca:	f7ff fcfd 	bl	80185c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8018bce:	1d25      	adds	r5, r4, #4
 8018bd0:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8018bd4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d0ae      	beq.n	8018b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018bdc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8018be0:	2919      	cmp	r1, #25
 8018be2:	d8f7      	bhi.n	8018bd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8018be4:	3b20      	subs	r3, #32
 8018be6:	8013      	strh	r3, [r2, #0]
 8018be8:	e7f4      	b.n	8018bd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8018bea:	9a08      	ldr	r2, [sp, #32]
 8018bec:	2a00      	cmp	r2, #0
 8018bee:	d0aa      	beq.n	8018b46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8018bf0:	7812      	ldrb	r2, [r2, #0]
 8018bf2:	e7a8      	b.n	8018b46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8018bf4:	2d00      	cmp	r5, #0
 8018bf6:	f43f af47 	beq.w	8018a88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 8018bfa:	782d      	ldrb	r5, [r5, #0]
 8018bfc:	e744      	b.n	8018a88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

08018bfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8018bfe:	b507      	push	{r0, r1, r2, lr}
 8018c00:	9300      	str	r3, [sp, #0]
 8018c02:	4613      	mov	r3, r2
 8018c04:	2200      	movs	r2, #0
 8018c06:	f7ff fe90 	bl	801892a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8018c0a:	b003      	add	sp, #12
 8018c0c:	f85d fb04 	ldr.w	pc, [sp], #4

08018c10 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8018c10:	b40c      	push	{r2, r3}
 8018c12:	b507      	push	{r0, r1, r2, lr}
 8018c14:	ab04      	add	r3, sp, #16
 8018c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c1a:	9301      	str	r3, [sp, #4]
 8018c1c:	f7ff ffef 	bl	8018bfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8018c20:	b003      	add	sp, #12
 8018c22:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c26:	b002      	add	sp, #8
 8018c28:	4770      	bx	lr
	...

08018c2c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8018c2c:	4b01      	ldr	r3, [pc, #4]	; (8018c34 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8018c2e:	6018      	str	r0, [r3, #0]
 8018c30:	4770      	bx	lr
 8018c32:	bf00      	nop
 8018c34:	200258bc 	.word	0x200258bc

08018c38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8018c38:	4b06      	ldr	r3, [pc, #24]	; (8018c54 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8018c3a:	881a      	ldrh	r2, [r3, #0]
 8018c3c:	4282      	cmp	r2, r0
 8018c3e:	d807      	bhi.n	8018c50 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8018c40:	4b05      	ldr	r3, [pc, #20]	; (8018c58 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8018c42:	881b      	ldrh	r3, [r3, #0]
 8018c44:	4413      	add	r3, r2
 8018c46:	4298      	cmp	r0, r3
 8018c48:	bfac      	ite	ge
 8018c4a:	2000      	movge	r0, #0
 8018c4c:	2001      	movlt	r0, #1
 8018c4e:	4770      	bx	lr
 8018c50:	2000      	movs	r0, #0
 8018c52:	4770      	bx	lr
 8018c54:	200258dc 	.word	0x200258dc
 8018c58:	200258e0 	.word	0x200258e0

08018c5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8018c5c:	b508      	push	{r3, lr}
 8018c5e:	4601      	mov	r1, r0
 8018c60:	f7ff ffea 	bl	8018c38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8018c64:	b118      	cbz	r0, 8018c6e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8018c66:	4b02      	ldr	r3, [pc, #8]	; (8018c70 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8018c6e:	bd08      	pop	{r3, pc}
 8018c70:	200258c0 	.word	0x200258c0

08018c74 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c76:	4c24      	ldr	r4, [pc, #144]	; (8018d08 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8018c78:	6823      	ldr	r3, [r4, #0]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d042      	beq.n	8018d04 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018c7e:	4a23      	ldr	r2, [pc, #140]	; (8018d0c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8018c80:	4d23      	ldr	r5, [pc, #140]	; (8018d10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8018c82:	8811      	ldrh	r1, [r2, #0]
 8018c84:	f8b5 c000 	ldrh.w	ip, [r5]
 8018c88:	4822      	ldr	r0, [pc, #136]	; (8018d14 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8018c8a:	4461      	add	r1, ip
 8018c8c:	1c4a      	adds	r2, r1, #1
 8018c8e:	f022 0201 	bic.w	r2, r2, #1
 8018c92:	008f      	lsls	r7, r1, #2
 8018c94:	0412      	lsls	r2, r2, #16
 8018c96:	19de      	adds	r6, r3, r7
 8018c98:	0c12      	lsrs	r2, r2, #16
 8018c9a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8018c9e:	6006      	str	r6, [r0, #0]
 8018ca0:	4e1d      	ldr	r6, [pc, #116]	; (8018d18 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018ca2:	19da      	adds	r2, r3, r7
 8018ca4:	6032      	str	r2, [r6, #0]
 8018ca6:	220e      	movs	r2, #14
 8018ca8:	fb02 f20c 	mul.w	r2, r2, ip
 8018cac:	3203      	adds	r2, #3
 8018cae:	f022 0203 	bic.w	r2, r2, #3
 8018cb2:	443a      	add	r2, r7
 8018cb4:	4f19      	ldr	r7, [pc, #100]	; (8018d1c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8018cb6:	4413      	add	r3, r2
 8018cb8:	603b      	str	r3, [r7, #0]
 8018cba:	4f19      	ldr	r7, [pc, #100]	; (8018d20 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	803b      	strh	r3, [r7, #0]
 8018cc0:	4f18      	ldr	r7, [pc, #96]	; (8018d24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018cc2:	683f      	ldr	r7, [r7, #0]
 8018cc4:	1aba      	subs	r2, r7, r2
 8018cc6:	4f18      	ldr	r7, [pc, #96]	; (8018d28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8018cc8:	603a      	str	r2, [r7, #0]
 8018cca:	4a18      	ldr	r2, [pc, #96]	; (8018d2c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018ccc:	469c      	mov	ip, r3
 8018cce:	8013      	strh	r3, [r2, #0]
 8018cd0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8018cd4:	428b      	cmp	r3, r1
 8018cd6:	d10d      	bne.n	8018cf4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8018cd8:	882d      	ldrh	r5, [r5, #0]
 8018cda:	6830      	ldr	r0, [r6, #0]
 8018cdc:	2300      	movs	r3, #0
 8018cde:	240e      	movs	r4, #14
 8018ce0:	429d      	cmp	r5, r3
 8018ce2:	d90f      	bls.n	8018d04 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018ce4:	fb04 0203 	mla	r2, r4, r3, r0
 8018ce8:	3301      	adds	r3, #1
 8018cea:	7b11      	ldrb	r1, [r2, #12]
 8018cec:	f36f 1145 	bfc	r1, #5, #1
 8018cf0:	7311      	strb	r1, [r2, #12]
 8018cf2:	e7f5      	b.n	8018ce0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8018cf4:	6822      	ldr	r2, [r4, #0]
 8018cf6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8018cfa:	6802      	ldr	r2, [r0, #0]
 8018cfc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8018d00:	3301      	adds	r3, #1
 8018d02:	e7e7      	b.n	8018cd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8018d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d06:	bf00      	nop
 8018d08:	200258c0 	.word	0x200258c0
 8018d0c:	200258dc 	.word	0x200258dc
 8018d10:	200258e0 	.word	0x200258e0
 8018d14:	200258d4 	.word	0x200258d4
 8018d18:	200258c4 	.word	0x200258c4
 8018d1c:	200258cc 	.word	0x200258cc
 8018d20:	200258de 	.word	0x200258de
 8018d24:	200258c8 	.word	0x200258c8
 8018d28:	200258d8 	.word	0x200258d8
 8018d2c:	200258d0 	.word	0x200258d0

08018d30 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8018d30:	4b06      	ldr	r3, [pc, #24]	; (8018d4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	b943      	cbnz	r3, 8018d48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8018d36:	b139      	cbz	r1, 8018d48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8018d38:	4b05      	ldr	r3, [pc, #20]	; (8018d50 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8018d3a:	801a      	strh	r2, [r3, #0]
 8018d3c:	4b05      	ldr	r3, [pc, #20]	; (8018d54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8018d3e:	6019      	str	r1, [r3, #0]
 8018d40:	4b05      	ldr	r3, [pc, #20]	; (8018d58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8018d42:	6018      	str	r0, [r3, #0]
 8018d44:	f7ff bf96 	b.w	8018c74 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8018d48:	4770      	bx	lr
 8018d4a:	bf00      	nop
 8018d4c:	200258cc 	.word	0x200258cc
 8018d50:	200258e0 	.word	0x200258e0
 8018d54:	200258c8 	.word	0x200258c8
 8018d58:	200258c0 	.word	0x200258c0

08018d5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8018d5c:	b470      	push	{r4, r5, r6}
 8018d5e:	4c07      	ldr	r4, [pc, #28]	; (8018d7c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018d60:	6826      	ldr	r6, [r4, #0]
 8018d62:	4605      	mov	r5, r0
 8018d64:	4610      	mov	r0, r2
 8018d66:	9a03      	ldr	r2, [sp, #12]
 8018d68:	b936      	cbnz	r6, 8018d78 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018d6a:	6025      	str	r5, [r4, #0]
 8018d6c:	4c04      	ldr	r4, [pc, #16]	; (8018d80 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018d6e:	8021      	strh	r1, [r4, #0]
 8018d70:	bc70      	pop	{r4, r5, r6}
 8018d72:	4619      	mov	r1, r3
 8018d74:	f7ff bfdc 	b.w	8018d30 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018d78:	bc70      	pop	{r4, r5, r6}
 8018d7a:	4770      	bx	lr
 8018d7c:	200258e4 	.word	0x200258e4
 8018d80:	200258dc 	.word	0x200258dc

08018d84 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018d84:	4a12      	ldr	r2, [pc, #72]	; (8018dd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8018d86:	8803      	ldrh	r3, [r0, #0]
 8018d88:	8812      	ldrh	r2, [r2, #0]
 8018d8a:	4293      	cmp	r3, r2
 8018d8c:	d207      	bcs.n	8018d9e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8018d8e:	4a11      	ldr	r2, [pc, #68]	; (8018dd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018d90:	6812      	ldr	r2, [r2, #0]
 8018d92:	2114      	movs	r1, #20
 8018d94:	fb01 2303 	mla	r3, r1, r3, r2
 8018d98:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018d9c:	4770      	bx	lr
 8018d9e:	490e      	ldr	r1, [pc, #56]	; (8018dd8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018da0:	8809      	ldrh	r1, [r1, #0]
 8018da2:	4411      	add	r1, r2
 8018da4:	428b      	cmp	r3, r1
 8018da6:	da04      	bge.n	8018db2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018da8:	1a9b      	subs	r3, r3, r2
 8018daa:	4a0c      	ldr	r2, [pc, #48]	; (8018ddc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018dac:	210e      	movs	r1, #14
 8018dae:	6812      	ldr	r2, [r2, #0]
 8018db0:	e7f0      	b.n	8018d94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8018db2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018db6:	4293      	cmp	r3, r2
 8018db8:	d108      	bne.n	8018dcc <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8018dba:	4b09      	ldr	r3, [pc, #36]	; (8018de0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018dbc:	781b      	ldrb	r3, [r3, #0]
 8018dbe:	b91b      	cbnz	r3, 8018dc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018dc0:	4b08      	ldr	r3, [pc, #32]	; (8018de4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018dc2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018dc6:	4770      	bx	lr
 8018dc8:	4b07      	ldr	r3, [pc, #28]	; (8018de8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018dca:	e7fa      	b.n	8018dc2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018dcc:	2000      	movs	r0, #0
 8018dce:	4770      	bx	lr
 8018dd0:	200258dc 	.word	0x200258dc
 8018dd4:	200258e4 	.word	0x200258e4
 8018dd8:	200258e0 	.word	0x200258e0
 8018ddc:	200258c4 	.word	0x200258c4
 8018de0:	20025854 	.word	0x20025854
 8018de4:	20025856 	.word	0x20025856
 8018de8:	20025858 	.word	0x20025858

08018dec <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018dec:	4a12      	ldr	r2, [pc, #72]	; (8018e38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8018dee:	8803      	ldrh	r3, [r0, #0]
 8018df0:	8812      	ldrh	r2, [r2, #0]
 8018df2:	4293      	cmp	r3, r2
 8018df4:	d207      	bcs.n	8018e06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8018df6:	4a11      	ldr	r2, [pc, #68]	; (8018e3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8018df8:	6812      	ldr	r2, [r2, #0]
 8018dfa:	2114      	movs	r1, #20
 8018dfc:	fb01 2303 	mla	r3, r1, r3, r2
 8018e00:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8018e04:	4770      	bx	lr
 8018e06:	490e      	ldr	r1, [pc, #56]	; (8018e40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018e08:	8809      	ldrh	r1, [r1, #0]
 8018e0a:	4411      	add	r1, r2
 8018e0c:	428b      	cmp	r3, r1
 8018e0e:	da04      	bge.n	8018e1a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8018e10:	1a9b      	subs	r3, r3, r2
 8018e12:	4a0c      	ldr	r2, [pc, #48]	; (8018e44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8018e14:	210e      	movs	r1, #14
 8018e16:	6812      	ldr	r2, [r2, #0]
 8018e18:	e7f0      	b.n	8018dfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8018e1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018e1e:	4293      	cmp	r3, r2
 8018e20:	d108      	bne.n	8018e34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8018e22:	4b09      	ldr	r3, [pc, #36]	; (8018e48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	b91b      	cbnz	r3, 8018e30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8018e28:	4b08      	ldr	r3, [pc, #32]	; (8018e4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8018e2a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018e2e:	4770      	bx	lr
 8018e30:	4b07      	ldr	r3, [pc, #28]	; (8018e50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8018e32:	e7fa      	b.n	8018e2a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8018e34:	2000      	movs	r0, #0
 8018e36:	4770      	bx	lr
 8018e38:	200258dc 	.word	0x200258dc
 8018e3c:	200258e4 	.word	0x200258e4
 8018e40:	200258e0 	.word	0x200258e0
 8018e44:	200258c4 	.word	0x200258c4
 8018e48:	20025854 	.word	0x20025854
 8018e4c:	20025858 	.word	0x20025858
 8018e50:	20025856 	.word	0x20025856

08018e54 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018e54:	b510      	push	{r4, lr}
 8018e56:	4a1f      	ldr	r2, [pc, #124]	; (8018ed4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8018e58:	880b      	ldrh	r3, [r1, #0]
 8018e5a:	8812      	ldrh	r2, [r2, #0]
 8018e5c:	4293      	cmp	r3, r2
 8018e5e:	d213      	bcs.n	8018e88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8018e60:	4a1d      	ldr	r2, [pc, #116]	; (8018ed8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8018e62:	6812      	ldr	r2, [r2, #0]
 8018e64:	2114      	movs	r1, #20
 8018e66:	fb01 2303 	mla	r3, r1, r3, r2
 8018e6a:	8a1a      	ldrh	r2, [r3, #16]
 8018e6c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8018e70:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018e74:	8a5b      	ldrh	r3, [r3, #18]
 8018e76:	8004      	strh	r4, [r0, #0]
 8018e78:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e80:	8041      	strh	r1, [r0, #2]
 8018e82:	8082      	strh	r2, [r0, #4]
 8018e84:	80c3      	strh	r3, [r0, #6]
 8018e86:	e00e      	b.n	8018ea6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018e88:	4914      	ldr	r1, [pc, #80]	; (8018edc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8018e8a:	8809      	ldrh	r1, [r1, #0]
 8018e8c:	4411      	add	r1, r2
 8018e8e:	428b      	cmp	r3, r1
 8018e90:	da0a      	bge.n	8018ea8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8018e92:	1a9b      	subs	r3, r3, r2
 8018e94:	4a12      	ldr	r2, [pc, #72]	; (8018ee0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8018e96:	6812      	ldr	r2, [r2, #0]
 8018e98:	210e      	movs	r1, #14
 8018e9a:	fb01 2303 	mla	r3, r1, r3, r2
 8018e9e:	681a      	ldr	r2, [r3, #0]
 8018ea0:	6002      	str	r2, [r0, #0]
 8018ea2:	685a      	ldr	r2, [r3, #4]
 8018ea4:	6042      	str	r2, [r0, #4]
 8018ea6:	bd10      	pop	{r4, pc}
 8018ea8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018eac:	4293      	cmp	r3, r2
 8018eae:	d10b      	bne.n	8018ec8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8018eb0:	4b0c      	ldr	r3, [pc, #48]	; (8018ee4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018eb2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018eb6:	4b0c      	ldr	r3, [pc, #48]	; (8018ee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018eb8:	8081      	strh	r1, [r0, #4]
 8018eba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ebe:	80c2      	strh	r2, [r0, #6]
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	8003      	strh	r3, [r0, #0]
 8018ec4:	8043      	strh	r3, [r0, #2]
 8018ec6:	e7ee      	b.n	8018ea6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018ec8:	2300      	movs	r3, #0
 8018eca:	8003      	strh	r3, [r0, #0]
 8018ecc:	8043      	strh	r3, [r0, #2]
 8018ece:	8083      	strh	r3, [r0, #4]
 8018ed0:	e7d8      	b.n	8018e84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018ed2:	bf00      	nop
 8018ed4:	200258dc 	.word	0x200258dc
 8018ed8:	200258e4 	.word	0x200258e4
 8018edc:	200258e0 	.word	0x200258e0
 8018ee0:	200258c4 	.word	0x200258c4
 8018ee4:	20025850 	.word	0x20025850
 8018ee8:	20025852 	.word	0x20025852

08018eec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8018eec:	4a17      	ldr	r2, [pc, #92]	; (8018f4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8018eee:	8803      	ldrh	r3, [r0, #0]
 8018ef0:	8812      	ldrh	r2, [r2, #0]
 8018ef2:	4293      	cmp	r3, r2
 8018ef4:	d213      	bcs.n	8018f1e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8018ef6:	4a16      	ldr	r2, [pc, #88]	; (8018f50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8018ef8:	6812      	ldr	r2, [r2, #0]
 8018efa:	2114      	movs	r1, #20
 8018efc:	fb01 2303 	mla	r3, r1, r3, r2
 8018f00:	8a1a      	ldrh	r2, [r3, #16]
 8018f02:	8919      	ldrh	r1, [r3, #8]
 8018f04:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018f08:	428a      	cmp	r2, r1
 8018f0a:	db1d      	blt.n	8018f48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8018f0c:	8a58      	ldrh	r0, [r3, #18]
 8018f0e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018f12:	895b      	ldrh	r3, [r3, #10]
 8018f14:	4298      	cmp	r0, r3
 8018f16:	bfac      	ite	ge
 8018f18:	2000      	movge	r0, #0
 8018f1a:	2001      	movlt	r0, #1
 8018f1c:	4770      	bx	lr
 8018f1e:	490d      	ldr	r1, [pc, #52]	; (8018f54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8018f20:	8809      	ldrh	r1, [r1, #0]
 8018f22:	4411      	add	r1, r2
 8018f24:	428b      	cmp	r3, r1
 8018f26:	da0d      	bge.n	8018f44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8018f28:	1a9b      	subs	r3, r3, r2
 8018f2a:	4a0b      	ldr	r2, [pc, #44]	; (8018f58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8018f2c:	6812      	ldr	r2, [r2, #0]
 8018f2e:	210e      	movs	r1, #14
 8018f30:	fb01 2303 	mla	r3, r1, r3, r2
 8018f34:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018f38:	891a      	ldrh	r2, [r3, #8]
 8018f3a:	4291      	cmp	r1, r2
 8018f3c:	db04      	blt.n	8018f48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8018f3e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8018f42:	e7e6      	b.n	8018f12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8018f44:	2000      	movs	r0, #0
 8018f46:	4770      	bx	lr
 8018f48:	2001      	movs	r0, #1
 8018f4a:	4770      	bx	lr
 8018f4c:	200258dc 	.word	0x200258dc
 8018f50:	200258e4 	.word	0x200258e4
 8018f54:	200258e0 	.word	0x200258e0
 8018f58:	200258c4 	.word	0x200258c4

08018f5c <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018f5c:	4a12      	ldr	r2, [pc, #72]	; (8018fa8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018f5e:	8803      	ldrh	r3, [r0, #0]
 8018f60:	8811      	ldrh	r1, [r2, #0]
 8018f62:	428b      	cmp	r3, r1
 8018f64:	d20b      	bcs.n	8018f7e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8018f66:	4a11      	ldr	r2, [pc, #68]	; (8018fac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018f68:	6812      	ldr	r2, [r2, #0]
 8018f6a:	b112      	cbz	r2, 8018f72 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8018f6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018f70:	b9c0      	cbnz	r0, 8018fa4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8018f72:	4a0f      	ldr	r2, [pc, #60]	; (8018fb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8018f74:	6811      	ldr	r1, [r2, #0]
 8018f76:	2214      	movs	r2, #20
 8018f78:	4353      	muls	r3, r2
 8018f7a:	58c8      	ldr	r0, [r1, r3]
 8018f7c:	4770      	bx	lr
 8018f7e:	4a0d      	ldr	r2, [pc, #52]	; (8018fb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8018f80:	8812      	ldrh	r2, [r2, #0]
 8018f82:	440a      	add	r2, r1
 8018f84:	4293      	cmp	r3, r2
 8018f86:	da04      	bge.n	8018f92 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8018f88:	4a08      	ldr	r2, [pc, #32]	; (8018fac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018f8a:	6812      	ldr	r2, [r2, #0]
 8018f8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018f90:	4770      	bx	lr
 8018f92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018f96:	4293      	cmp	r3, r2
 8018f98:	d103      	bne.n	8018fa2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8018f9a:	4b07      	ldr	r3, [pc, #28]	; (8018fb8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018fa0:	4770      	bx	lr
 8018fa2:	2000      	movs	r0, #0
 8018fa4:	4770      	bx	lr
 8018fa6:	bf00      	nop
 8018fa8:	200258dc 	.word	0x200258dc
 8018fac:	200258c0 	.word	0x200258c0
 8018fb0:	200258e4 	.word	0x200258e4
 8018fb4:	200258e0 	.word	0x200258e0
 8018fb8:	2002585c 	.word	0x2002585c

08018fbc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018fbc:	4b24      	ldr	r3, [pc, #144]	; (8019050 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8018fbe:	8802      	ldrh	r2, [r0, #0]
 8018fc0:	8818      	ldrh	r0, [r3, #0]
 8018fc2:	4282      	cmp	r2, r0
 8018fc4:	d221      	bcs.n	801900a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8018fc6:	4b23      	ldr	r3, [pc, #140]	; (8019054 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018fc8:	6819      	ldr	r1, [r3, #0]
 8018fca:	2314      	movs	r3, #20
 8018fcc:	fb03 1302 	mla	r3, r3, r2, r1
 8018fd0:	6858      	ldr	r0, [r3, #4]
 8018fd2:	2800      	cmp	r0, #0
 8018fd4:	d03a      	beq.n	801904c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018fd6:	4920      	ldr	r1, [pc, #128]	; (8019058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018fd8:	6809      	ldr	r1, [r1, #0]
 8018fda:	2900      	cmp	r1, #0
 8018fdc:	d036      	beq.n	801904c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018fde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018fe2:	2900      	cmp	r1, #0
 8018fe4:	d032      	beq.n	801904c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018fe6:	891a      	ldrh	r2, [r3, #8]
 8018fe8:	8958      	ldrh	r0, [r3, #10]
 8018fea:	4350      	muls	r0, r2
 8018fec:	7c5a      	ldrb	r2, [r3, #17]
 8018fee:	7cdb      	ldrb	r3, [r3, #19]
 8018ff0:	0952      	lsrs	r2, r2, #5
 8018ff2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8018ff6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018ffa:	2b0b      	cmp	r3, #11
 8018ffc:	bf18      	it	ne
 8018ffe:	0040      	lslne	r0, r0, #1
 8019000:	3003      	adds	r0, #3
 8019002:	f020 0003 	bic.w	r0, r0, #3
 8019006:	4408      	add	r0, r1
 8019008:	4770      	bx	lr
 801900a:	4b14      	ldr	r3, [pc, #80]	; (801905c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801900c:	881b      	ldrh	r3, [r3, #0]
 801900e:	4403      	add	r3, r0
 8019010:	429a      	cmp	r2, r3
 8019012:	da1a      	bge.n	801904a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019014:	4b12      	ldr	r3, [pc, #72]	; (8019060 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	1a10      	subs	r0, r2, r0
 801901a:	210e      	movs	r1, #14
 801901c:	fb01 3000 	mla	r0, r1, r0, r3
 8019020:	7b03      	ldrb	r3, [r0, #12]
 8019022:	f003 031f 	and.w	r3, r3, #31
 8019026:	2b0b      	cmp	r3, #11
 8019028:	d10b      	bne.n	8019042 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801902a:	8903      	ldrh	r3, [r0, #8]
 801902c:	8940      	ldrh	r0, [r0, #10]
 801902e:	4358      	muls	r0, r3
 8019030:	4b09      	ldr	r3, [pc, #36]	; (8019058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019032:	6819      	ldr	r1, [r3, #0]
 8019034:	3003      	adds	r0, #3
 8019036:	f020 0303 	bic.w	r3, r0, #3
 801903a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801903e:	4418      	add	r0, r3
 8019040:	4770      	bx	lr
 8019042:	2b0d      	cmp	r3, #13
 8019044:	d101      	bne.n	801904a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019046:	300d      	adds	r0, #13
 8019048:	4770      	bx	lr
 801904a:	2000      	movs	r0, #0
 801904c:	4770      	bx	lr
 801904e:	bf00      	nop
 8019050:	200258dc 	.word	0x200258dc
 8019054:	200258e4 	.word	0x200258e4
 8019058:	200258c0 	.word	0x200258c0
 801905c:	200258e0 	.word	0x200258e0
 8019060:	200258c4 	.word	0x200258c4

08019064 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019064:	b510      	push	{r4, lr}
 8019066:	4a17      	ldr	r2, [pc, #92]	; (80190c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019068:	8803      	ldrh	r3, [r0, #0]
 801906a:	8812      	ldrh	r2, [r2, #0]
 801906c:	4293      	cmp	r3, r2
 801906e:	d20c      	bcs.n	801908a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019070:	4a15      	ldr	r2, [pc, #84]	; (80190c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019072:	6812      	ldr	r2, [r2, #0]
 8019074:	2114      	movs	r1, #20
 8019076:	fb01 2303 	mla	r3, r1, r3, r2
 801907a:	7c58      	ldrb	r0, [r3, #17]
 801907c:	0942      	lsrs	r2, r0, #5
 801907e:	7cd8      	ldrb	r0, [r3, #19]
 8019080:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019084:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019088:	bd10      	pop	{r4, pc}
 801908a:	4910      	ldr	r1, [pc, #64]	; (80190cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801908c:	8809      	ldrh	r1, [r1, #0]
 801908e:	4411      	add	r1, r2
 8019090:	428b      	cmp	r3, r1
 8019092:	da09      	bge.n	80190a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019094:	1a9b      	subs	r3, r3, r2
 8019096:	4a0e      	ldr	r2, [pc, #56]	; (80190d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019098:	6812      	ldr	r2, [r2, #0]
 801909a:	210e      	movs	r1, #14
 801909c:	fb01 2303 	mla	r3, r1, r3, r2
 80190a0:	7b18      	ldrb	r0, [r3, #12]
 80190a2:	f000 001f 	and.w	r0, r0, #31
 80190a6:	e7ef      	b.n	8019088 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80190a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80190ac:	4293      	cmp	r3, r2
 80190ae:	d106      	bne.n	80190be <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80190b0:	f7f4 ff26 	bl	800df00 <_ZN8touchgfx3HAL3lcdEv>
 80190b4:	6803      	ldr	r3, [r0, #0]
 80190b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190bc:	4718      	bx	r3
 80190be:	2000      	movs	r0, #0
 80190c0:	e7e2      	b.n	8019088 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80190c2:	bf00      	nop
 80190c4:	200258dc 	.word	0x200258dc
 80190c8:	200258e4 	.word	0x200258e4
 80190cc:	200258e0 	.word	0x200258e0
 80190d0:	200258c4 	.word	0x200258c4

080190d4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80190d4:	2010      	movs	r0, #16
 80190d6:	4770      	bx	lr

080190d8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80190d8:	2000      	movs	r0, #0
 80190da:	4770      	bx	lr

080190dc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80190dc:	4b02      	ldr	r3, [pc, #8]	; (80190e8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80190de:	8818      	ldrh	r0, [r3, #0]
 80190e0:	0040      	lsls	r0, r0, #1
 80190e2:	b280      	uxth	r0, r0
 80190e4:	4770      	bx	lr
 80190e6:	bf00      	nop
 80190e8:	20025856 	.word	0x20025856

080190ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80190ec:	2bff      	cmp	r3, #255	; 0xff
 80190ee:	d050      	beq.n	8019192 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80190f0:	2a0b      	cmp	r2, #11
 80190f2:	d04a      	beq.n	801918a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80190f4:	d80e      	bhi.n	8019114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80190f6:	2a03      	cmp	r2, #3
 80190f8:	d03f      	beq.n	801917a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80190fa:	d804      	bhi.n	8019106 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80190fc:	2a01      	cmp	r2, #1
 80190fe:	d03e      	beq.n	801917e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019100:	d93f      	bls.n	8019182 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019102:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019104:	4770      	bx	lr
 8019106:	2a09      	cmp	r2, #9
 8019108:	d03f      	beq.n	801918a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801910a:	d83c      	bhi.n	8019186 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801910c:	2a08      	cmp	r2, #8
 801910e:	d03a      	beq.n	8019186 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019110:	2000      	movs	r0, #0
 8019112:	4770      	bx	lr
 8019114:	2a2f      	cmp	r2, #47	; 0x2f
 8019116:	d024      	beq.n	8019162 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019118:	d80d      	bhi.n	8019136 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801911a:	2a2d      	cmp	r2, #45	; 0x2d
 801911c:	d014      	beq.n	8019148 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801911e:	d826      	bhi.n	801916e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019120:	2a2c      	cmp	r2, #44	; 0x2c
 8019122:	d1f5      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019124:	684b      	ldr	r3, [r1, #4]
 8019126:	781b      	ldrb	r3, [r3, #0]
 8019128:	2b01      	cmp	r3, #1
 801912a:	d018      	beq.n	801915e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801912c:	d323      	bcc.n	8019176 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801912e:	2b02      	cmp	r3, #2
 8019130:	d1ee      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019132:	6880      	ldr	r0, [r0, #8]
 8019134:	4770      	bx	lr
 8019136:	2a31      	cmp	r2, #49	; 0x31
 8019138:	d004      	beq.n	8019144 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801913a:	d328      	bcc.n	801918e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801913c:	2a32      	cmp	r2, #50	; 0x32
 801913e:	d026      	beq.n	801918e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019140:	2a33      	cmp	r2, #51	; 0x33
 8019142:	d1e5      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019144:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8019146:	4770      	bx	lr
 8019148:	684b      	ldr	r3, [r1, #4]
 801914a:	781b      	ldrb	r3, [r3, #0]
 801914c:	2b01      	cmp	r3, #1
 801914e:	d004      	beq.n	801915a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019150:	d30b      	bcc.n	801916a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019152:	2b02      	cmp	r3, #2
 8019154:	d1dc      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019156:	6900      	ldr	r0, [r0, #16]
 8019158:	4770      	bx	lr
 801915a:	6a00      	ldr	r0, [r0, #32]
 801915c:	4770      	bx	lr
 801915e:	6980      	ldr	r0, [r0, #24]
 8019160:	4770      	bx	lr
 8019162:	684b      	ldr	r3, [r1, #4]
 8019164:	781b      	ldrb	r3, [r3, #0]
 8019166:	2b00      	cmp	r3, #0
 8019168:	d1d2      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801916a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801916c:	4770      	bx	lr
 801916e:	684b      	ldr	r3, [r1, #4]
 8019170:	781b      	ldrb	r3, [r3, #0]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d1cc      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019176:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019178:	4770      	bx	lr
 801917a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801917c:	4770      	bx	lr
 801917e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019180:	4770      	bx	lr
 8019182:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019184:	4770      	bx	lr
 8019186:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019188:	4770      	bx	lr
 801918a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801918c:	4770      	bx	lr
 801918e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019190:	4770      	bx	lr
 8019192:	2a0b      	cmp	r2, #11
 8019194:	d049      	beq.n	801922a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019196:	d80e      	bhi.n	80191b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019198:	2a03      	cmp	r2, #3
 801919a:	d040      	beq.n	801921e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801919c:	d804      	bhi.n	80191a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801919e:	2a01      	cmp	r2, #1
 80191a0:	d03f      	beq.n	8019222 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80191a2:	d940      	bls.n	8019226 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80191a4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80191a6:	4770      	bx	lr
 80191a8:	2a09      	cmp	r2, #9
 80191aa:	d03e      	beq.n	801922a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80191ac:	d801      	bhi.n	80191b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 80191ae:	2a08      	cmp	r2, #8
 80191b0:	d1ae      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80191b2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80191b4:	4770      	bx	lr
 80191b6:	2a2f      	cmp	r2, #47	; 0x2f
 80191b8:	d024      	beq.n	8019204 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80191ba:	d80d      	bhi.n	80191d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80191bc:	2a2d      	cmp	r2, #45	; 0x2d
 80191be:	d014      	beq.n	80191ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80191c0:	d826      	bhi.n	8019210 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80191c2:	2a2c      	cmp	r2, #44	; 0x2c
 80191c4:	d1a4      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80191c6:	684b      	ldr	r3, [r1, #4]
 80191c8:	781b      	ldrb	r3, [r3, #0]
 80191ca:	2b01      	cmp	r3, #1
 80191cc:	d018      	beq.n	8019200 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80191ce:	d324      	bcc.n	801921a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80191d0:	2b02      	cmp	r3, #2
 80191d2:	d19d      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80191d4:	68c0      	ldr	r0, [r0, #12]
 80191d6:	4770      	bx	lr
 80191d8:	2a31      	cmp	r2, #49	; 0x31
 80191da:	d004      	beq.n	80191e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80191dc:	d327      	bcc.n	801922e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80191de:	2a32      	cmp	r2, #50	; 0x32
 80191e0:	d025      	beq.n	801922e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80191e2:	2a33      	cmp	r2, #51	; 0x33
 80191e4:	d194      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80191e6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80191e8:	4770      	bx	lr
 80191ea:	684b      	ldr	r3, [r1, #4]
 80191ec:	781b      	ldrb	r3, [r3, #0]
 80191ee:	2b01      	cmp	r3, #1
 80191f0:	d004      	beq.n	80191fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80191f2:	d30b      	bcc.n	801920c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80191f4:	2b02      	cmp	r3, #2
 80191f6:	d18b      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80191f8:	6940      	ldr	r0, [r0, #20]
 80191fa:	4770      	bx	lr
 80191fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80191fe:	4770      	bx	lr
 8019200:	69c0      	ldr	r0, [r0, #28]
 8019202:	4770      	bx	lr
 8019204:	684b      	ldr	r3, [r1, #4]
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	2b00      	cmp	r3, #0
 801920a:	d181      	bne.n	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801920c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801920e:	4770      	bx	lr
 8019210:	684b      	ldr	r3, [r1, #4]
 8019212:	781b      	ldrb	r3, [r3, #0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	f47f af7b 	bne.w	8019110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801921a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801921c:	4770      	bx	lr
 801921e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019220:	4770      	bx	lr
 8019222:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019224:	4770      	bx	lr
 8019226:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019228:	4770      	bx	lr
 801922a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801922c:	4770      	bx	lr
 801922e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8019230:	4770      	bx	lr

08019232 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019236:	b087      	sub	sp, #28
 8019238:	9815      	ldr	r0, [sp, #84]	; 0x54
 801923a:	9205      	str	r2, [sp, #20]
 801923c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019240:	9202      	str	r2, [sp, #8]
 8019242:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019246:	9101      	str	r1, [sp, #4]
 8019248:	6841      	ldr	r1, [r0, #4]
 801924a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801924e:	fb01 2404 	mla	r4, r1, r4, r2
 8019252:	6802      	ldr	r2, [r0, #0]
 8019254:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019258:	f8de 2000 	ldr.w	r2, [lr]
 801925c:	9203      	str	r2, [sp, #12]
 801925e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019262:	3204      	adds	r2, #4
 8019264:	9204      	str	r2, [sp, #16]
 8019266:	9a02      	ldr	r2, [sp, #8]
 8019268:	43d6      	mvns	r6, r2
 801926a:	b2f6      	uxtb	r6, r6
 801926c:	9a01      	ldr	r2, [sp, #4]
 801926e:	2a00      	cmp	r2, #0
 8019270:	dc03      	bgt.n	801927a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019272:	9a05      	ldr	r2, [sp, #20]
 8019274:	2a00      	cmp	r2, #0
 8019276:	f340 8129 	ble.w	80194cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801927a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801927c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019280:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019284:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019288:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801928a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801928e:	2b00      	cmp	r3, #0
 8019290:	dd0e      	ble.n	80192b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019292:	1408      	asrs	r0, r1, #16
 8019294:	d405      	bmi.n	80192a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019296:	4560      	cmp	r0, ip
 8019298:	da03      	bge.n	80192a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801929a:	1410      	asrs	r0, r2, #16
 801929c:	d401      	bmi.n	80192a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801929e:	42b8      	cmp	r0, r7
 80192a0:	db07      	blt.n	80192b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80192a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80192a4:	4401      	add	r1, r0
 80192a6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80192a8:	3b01      	subs	r3, #1
 80192aa:	4402      	add	r2, r0
 80192ac:	3402      	adds	r4, #2
 80192ae:	e7ee      	b.n	801928e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80192b0:	d071      	beq.n	8019396 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80192b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80192b4:	1e58      	subs	r0, r3, #1
 80192b6:	fb05 1500 	mla	r5, r5, r0, r1
 80192ba:	142d      	asrs	r5, r5, #16
 80192bc:	d45f      	bmi.n	801937e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80192be:	4565      	cmp	r5, ip
 80192c0:	da5d      	bge.n	801937e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80192c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80192c4:	fb05 2000 	mla	r0, r5, r0, r2
 80192c8:	1400      	asrs	r0, r0, #16
 80192ca:	d458      	bmi.n	801937e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80192cc:	42b8      	cmp	r0, r7
 80192ce:	da56      	bge.n	801937e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80192d0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 80192d4:	4699      	mov	r9, r3
 80192d6:	46a2      	mov	sl, r4
 80192d8:	f1b9 0f00 	cmp.w	r9, #0
 80192dc:	dd57      	ble.n	801938e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80192de:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80192e2:	9803      	ldr	r0, [sp, #12]
 80192e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80192e8:	140d      	asrs	r5, r1, #16
 80192ea:	fb07 000c 	mla	r0, r7, ip, r0
 80192ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80192f2:	5d40      	ldrb	r0, [r0, r5]
 80192f4:	9d04      	ldr	r5, [sp, #16]
 80192f6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80192fa:	f8ba 5000 	ldrh.w	r5, [sl]
 80192fe:	122f      	asrs	r7, r5, #8
 8019300:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019304:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019308:	fb17 f706 	smulbb	r7, r7, r6
 801930c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019310:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019314:	00ed      	lsls	r5, r5, #3
 8019316:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801931a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801931e:	10c7      	asrs	r7, r0, #3
 8019320:	b2ed      	uxtb	r5, r5
 8019322:	00c0      	lsls	r0, r0, #3
 8019324:	fb18 f806 	smulbb	r8, r8, r6
 8019328:	fb15 f506 	smulbb	r5, r5, r6
 801932c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019330:	b2c0      	uxtb	r0, r0
 8019332:	fa1f fc8c 	uxth.w	ip, ip
 8019336:	fb07 870b 	mla	r7, r7, fp, r8
 801933a:	fb00 500b 	mla	r0, r0, fp, r5
 801933e:	b280      	uxth	r0, r0
 8019340:	b2bf      	uxth	r7, r7
 8019342:	f10c 0501 	add.w	r5, ip, #1
 8019346:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801934a:	f107 0801 	add.w	r8, r7, #1
 801934e:	1c45      	adds	r5, r0, #1
 8019350:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019354:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019358:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801935a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801935e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019362:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019366:	ea45 0c0c 	orr.w	ip, r5, ip
 801936a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801936e:	4401      	add	r1, r0
 8019370:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019372:	ea4c 0c08 	orr.w	ip, ip, r8
 8019376:	f82a cb02 	strh.w	ip, [sl], #2
 801937a:	4402      	add	r2, r0
 801937c:	e7ac      	b.n	80192d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801937e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8019382:	f04f 0800 	mov.w	r8, #0
 8019386:	eb03 0008 	add.w	r0, r3, r8
 801938a:	2800      	cmp	r0, #0
 801938c:	dc41      	bgt.n	8019412 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801938e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019392:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019396:	9b01      	ldr	r3, [sp, #4]
 8019398:	2b00      	cmp	r3, #0
 801939a:	f340 8097 	ble.w	80194cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801939e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80193a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80193a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80193aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80193ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80193b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80193b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80193b8:	eef0 6a62 	vmov.f32	s13, s5
 80193bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80193c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80193c8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80193cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80193d0:	eef0 6a43 	vmov.f32	s13, s6
 80193d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80193d8:	ee12 2a90 	vmov	r2, s5
 80193dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80193e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80193e4:	ee13 2a10 	vmov	r2, s6
 80193e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80193ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80193ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80193f0:	9314      	str	r3, [sp, #80]	; 0x50
 80193f2:	9b01      	ldr	r3, [sp, #4]
 80193f4:	9a05      	ldr	r2, [sp, #20]
 80193f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193fa:	3b01      	subs	r3, #1
 80193fc:	9301      	str	r3, [sp, #4]
 80193fe:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019402:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019404:	eeb0 3a67 	vmov.f32	s6, s15
 8019408:	bf08      	it	eq
 801940a:	4613      	moveq	r3, r2
 801940c:	eef0 2a47 	vmov.f32	s5, s14
 8019410:	e72c      	b.n	801926c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019412:	140f      	asrs	r7, r1, #16
 8019414:	d453      	bmi.n	80194be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019416:	f8de 5008 	ldr.w	r5, [lr, #8]
 801941a:	42bd      	cmp	r5, r7
 801941c:	dd4f      	ble.n	80194be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801941e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019422:	d44c      	bmi.n	80194be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019424:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019428:	4560      	cmp	r0, ip
 801942a:	dd48      	ble.n	80194be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801942c:	9803      	ldr	r0, [sp, #12]
 801942e:	b22d      	sxth	r5, r5
 8019430:	fb0c 0505 	mla	r5, ip, r5, r0
 8019434:	5de8      	ldrb	r0, [r5, r7]
 8019436:	9d04      	ldr	r5, [sp, #16]
 8019438:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801943c:	f06f 0501 	mvn.w	r5, #1
 8019440:	fb05 fb08 	mul.w	fp, r5, r8
 8019444:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019448:	f834 500b 	ldrh.w	r5, [r4, fp]
 801944c:	122f      	asrs	r7, r5, #8
 801944e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019452:	fb17 f706 	smulbb	r7, r7, r6
 8019456:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801945a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801945e:	00ed      	lsls	r5, r5, #3
 8019460:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019464:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019468:	10c7      	asrs	r7, r0, #3
 801946a:	b2ed      	uxtb	r5, r5
 801946c:	00c0      	lsls	r0, r0, #3
 801946e:	fb19 f906 	smulbb	r9, r9, r6
 8019472:	fb15 f506 	smulbb	r5, r5, r6
 8019476:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801947a:	b2c0      	uxtb	r0, r0
 801947c:	fa1f fc8c 	uxth.w	ip, ip
 8019480:	fb07 970a 	mla	r7, r7, sl, r9
 8019484:	fb00 500a 	mla	r0, r0, sl, r5
 8019488:	b2bf      	uxth	r7, r7
 801948a:	b280      	uxth	r0, r0
 801948c:	f10c 0501 	add.w	r5, ip, #1
 8019490:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019494:	f107 0901 	add.w	r9, r7, #1
 8019498:	1c45      	adds	r5, r0, #1
 801949a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801949e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80194a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80194a6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80194aa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80194ae:	ea45 0c0c 	orr.w	ip, r5, ip
 80194b2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80194b6:	ea4c 0c09 	orr.w	ip, ip, r9
 80194ba:	f824 c00b 	strh.w	ip, [r4, fp]
 80194be:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80194c0:	4401      	add	r1, r0
 80194c2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80194c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80194c8:	4402      	add	r2, r0
 80194ca:	e75c      	b.n	8019386 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80194cc:	b007      	add	sp, #28
 80194ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80194d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194d6:	b085      	sub	sp, #20
 80194d8:	4693      	mov	fp, r2
 80194da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80194dc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80194de:	6870      	ldr	r0, [r6, #4]
 80194e0:	9100      	str	r1, [sp, #0]
 80194e2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80194e6:	fb00 2404 	mla	r4, r0, r4, r2
 80194ea:	6832      	ldr	r2, [r6, #0]
 80194ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80194f0:	682a      	ldr	r2, [r5, #0]
 80194f2:	9201      	str	r2, [sp, #4]
 80194f4:	686a      	ldr	r2, [r5, #4]
 80194f6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80194fa:	3204      	adds	r2, #4
 80194fc:	9202      	str	r2, [sp, #8]
 80194fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019502:	9a00      	ldr	r2, [sp, #0]
 8019504:	2a00      	cmp	r2, #0
 8019506:	dc03      	bgt.n	8019510 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019508:	f1bb 0f00 	cmp.w	fp, #0
 801950c:	f340 80a0 	ble.w	8019650 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019510:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019512:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019516:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801951a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801951e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019520:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019524:	2b00      	cmp	r3, #0
 8019526:	dd0c      	ble.n	8019542 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019528:	1406      	asrs	r6, r0, #16
 801952a:	d405      	bmi.n	8019538 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801952c:	454e      	cmp	r6, r9
 801952e:	da03      	bge.n	8019538 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019530:	1416      	asrs	r6, r2, #16
 8019532:	d401      	bmi.n	8019538 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019534:	4546      	cmp	r6, r8
 8019536:	db05      	blt.n	8019544 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019538:	4470      	add	r0, lr
 801953a:	4462      	add	r2, ip
 801953c:	3b01      	subs	r3, #1
 801953e:	3402      	adds	r4, #2
 8019540:	e7f0      	b.n	8019524 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019542:	d00f      	beq.n	8019564 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019544:	1e5e      	subs	r6, r3, #1
 8019546:	fb0e 0706 	mla	r7, lr, r6, r0
 801954a:	143f      	asrs	r7, r7, #16
 801954c:	d541      	bpl.n	80195d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801954e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019552:	4698      	mov	r8, r3
 8019554:	9603      	str	r6, [sp, #12]
 8019556:	f1b8 0f00 	cmp.w	r8, #0
 801955a:	dc59      	bgt.n	8019610 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801955c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019560:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019564:	9b00      	ldr	r3, [sp, #0]
 8019566:	2b00      	cmp	r3, #0
 8019568:	dd72      	ble.n	8019650 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801956a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801956e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019572:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019578:	ee31 1a05 	vadd.f32	s2, s2, s10
 801957c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019580:	eeb0 6a62 	vmov.f32	s12, s5
 8019584:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019588:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801958c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019590:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019594:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019598:	eeb0 6a43 	vmov.f32	s12, s6
 801959c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80195a0:	ee12 2a90 	vmov	r2, s5
 80195a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80195a8:	fb92 fef3 	sdiv	lr, r2, r3
 80195ac:	ee13 2a10 	vmov	r2, s6
 80195b0:	fb92 fcf3 	sdiv	ip, r2, r3
 80195b4:	9b00      	ldr	r3, [sp, #0]
 80195b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80195ba:	3b01      	subs	r3, #1
 80195bc:	9300      	str	r3, [sp, #0]
 80195be:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80195c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195c4:	eeb0 3a67 	vmov.f32	s6, s15
 80195c8:	bf08      	it	eq
 80195ca:	465b      	moveq	r3, fp
 80195cc:	eef0 2a47 	vmov.f32	s5, s14
 80195d0:	e797      	b.n	8019502 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80195d2:	454f      	cmp	r7, r9
 80195d4:	dabb      	bge.n	801954e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80195d6:	fb0c 2606 	mla	r6, ip, r6, r2
 80195da:	1436      	asrs	r6, r6, #16
 80195dc:	d4b7      	bmi.n	801954e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80195de:	4546      	cmp	r6, r8
 80195e0:	dab5      	bge.n	801954e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80195e2:	461e      	mov	r6, r3
 80195e4:	46a0      	mov	r8, r4
 80195e6:	2e00      	cmp	r6, #0
 80195e8:	ddb8      	ble.n	801955c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80195ea:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80195ee:	9901      	ldr	r1, [sp, #4]
 80195f0:	1417      	asrs	r7, r2, #16
 80195f2:	ea4f 4920 	mov.w	r9, r0, asr #16
 80195f6:	fb0a 1707 	mla	r7, sl, r7, r1
 80195fa:	9902      	ldr	r1, [sp, #8]
 80195fc:	f817 7009 	ldrb.w	r7, [r7, r9]
 8019600:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019604:	f828 7b02 	strh.w	r7, [r8], #2
 8019608:	4470      	add	r0, lr
 801960a:	4462      	add	r2, ip
 801960c:	3e01      	subs	r6, #1
 801960e:	e7ea      	b.n	80195e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019610:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019614:	d417      	bmi.n	8019646 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019616:	68ae      	ldr	r6, [r5, #8]
 8019618:	454e      	cmp	r6, r9
 801961a:	dd14      	ble.n	8019646 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801961c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019620:	d411      	bmi.n	8019646 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019622:	68ef      	ldr	r7, [r5, #12]
 8019624:	4557      	cmp	r7, sl
 8019626:	dd0e      	ble.n	8019646 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019628:	9f01      	ldr	r7, [sp, #4]
 801962a:	b236      	sxth	r6, r6
 801962c:	fb0a 7606 	mla	r6, sl, r6, r7
 8019630:	9f02      	ldr	r7, [sp, #8]
 8019632:	f816 6009 	ldrb.w	r6, [r6, r9]
 8019636:	f06f 0101 	mvn.w	r1, #1
 801963a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801963e:	fb01 f608 	mul.w	r6, r1, r8
 8019642:	9903      	ldr	r1, [sp, #12]
 8019644:	538f      	strh	r7, [r1, r6]
 8019646:	4470      	add	r0, lr
 8019648:	4462      	add	r2, ip
 801964a:	f108 38ff 	add.w	r8, r8, #4294967295
 801964e:	e782      	b.n	8019556 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019650:	b005      	add	sp, #20
 8019652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019656 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801965a:	b087      	sub	sp, #28
 801965c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801965e:	9205      	str	r2, [sp, #20]
 8019660:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019664:	9203      	str	r2, [sp, #12]
 8019666:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801966a:	9102      	str	r1, [sp, #8]
 801966c:	6861      	ldr	r1, [r4, #4]
 801966e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019672:	fb01 2000 	mla	r0, r1, r0, r2
 8019676:	6822      	ldr	r2, [r4, #0]
 8019678:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801967c:	9200      	str	r2, [sp, #0]
 801967e:	f8dc 2000 	ldr.w	r2, [ip]
 8019682:	9204      	str	r2, [sp, #16]
 8019684:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019688:	3204      	adds	r2, #4
 801968a:	9201      	str	r2, [sp, #4]
 801968c:	9a03      	ldr	r2, [sp, #12]
 801968e:	43d5      	mvns	r5, r2
 8019690:	b2ed      	uxtb	r5, r5
 8019692:	9a02      	ldr	r2, [sp, #8]
 8019694:	2a00      	cmp	r2, #0
 8019696:	dc03      	bgt.n	80196a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019698:	9a05      	ldr	r2, [sp, #20]
 801969a:	2a00      	cmp	r2, #0
 801969c:	f340 812c 	ble.w	80198f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80196a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80196a2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80196a6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80196aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80196ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80196b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	dd10      	ble.n	80196da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80196b8:	140c      	asrs	r4, r1, #16
 80196ba:	d405      	bmi.n	80196c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80196bc:	4574      	cmp	r4, lr
 80196be:	da03      	bge.n	80196c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80196c0:	1414      	asrs	r4, r2, #16
 80196c2:	d401      	bmi.n	80196c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80196c4:	42bc      	cmp	r4, r7
 80196c6:	db09      	blt.n	80196dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80196c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80196ca:	9800      	ldr	r0, [sp, #0]
 80196cc:	4421      	add	r1, r4
 80196ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80196d0:	3002      	adds	r0, #2
 80196d2:	4422      	add	r2, r4
 80196d4:	3b01      	subs	r3, #1
 80196d6:	9000      	str	r0, [sp, #0]
 80196d8:	e7ec      	b.n	80196b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80196da:	d071      	beq.n	80197c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80196dc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80196de:	1e5c      	subs	r4, r3, #1
 80196e0:	fb06 1604 	mla	r6, r6, r4, r1
 80196e4:	1436      	asrs	r6, r6, #16
 80196e6:	d45d      	bmi.n	80197a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80196e8:	4576      	cmp	r6, lr
 80196ea:	da5b      	bge.n	80197a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80196ec:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80196ee:	fb06 2404 	mla	r4, r6, r4, r2
 80196f2:	1424      	asrs	r4, r4, #16
 80196f4:	d456      	bmi.n	80197a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80196f6:	42bc      	cmp	r4, r7
 80196f8:	da54      	bge.n	80197a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80196fa:	f8dd 9000 	ldr.w	r9, [sp]
 80196fe:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8019702:	4698      	mov	r8, r3
 8019704:	f1b8 0f00 	cmp.w	r8, #0
 8019708:	dd54      	ble.n	80197b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801970a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801970e:	9804      	ldr	r0, [sp, #16]
 8019710:	1414      	asrs	r4, r2, #16
 8019712:	fb07 0404 	mla	r4, r7, r4, r0
 8019716:	140e      	asrs	r6, r1, #16
 8019718:	9801      	ldr	r0, [sp, #4]
 801971a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801971e:	f8b9 4000 	ldrh.w	r4, [r9]
 8019722:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019726:	eb00 0b0e 	add.w	fp, r0, lr
 801972a:	1227      	asrs	r7, r4, #8
 801972c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019730:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019734:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8019738:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801973a:	fb16 f60a 	smulbb	r6, r6, sl
 801973e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019742:	fb07 6705 	mla	r7, r7, r5, r6
 8019746:	10e6      	asrs	r6, r4, #3
 8019748:	00e4      	lsls	r4, r4, #3
 801974a:	b2e4      	uxtb	r4, r4
 801974c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019750:	fb14 f405 	smulbb	r4, r4, r5
 8019754:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019758:	b2bf      	uxth	r7, r7
 801975a:	fb06 b605 	mla	r6, r6, r5, fp
 801975e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8019762:	b2b6      	uxth	r6, r6
 8019764:	fa1f fe8e 	uxth.w	lr, lr
 8019768:	1c7c      	adds	r4, r7, #1
 801976a:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801976e:	f106 0b01 	add.w	fp, r6, #1
 8019772:	f10e 0401 	add.w	r4, lr, #1
 8019776:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801977a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801977e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019782:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8019786:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801978a:	4327      	orrs	r7, r4
 801978c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019790:	4401      	add	r1, r0
 8019792:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019794:	ea47 070b 	orr.w	r7, r7, fp
 8019798:	f829 7b02 	strh.w	r7, [r9], #2
 801979c:	4402      	add	r2, r0
 801979e:	f108 38ff 	add.w	r8, r8, #4294967295
 80197a2:	e7af      	b.n	8019704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80197a4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80197a8:	f04f 0e00 	mov.w	lr, #0
 80197ac:	eb03 040e 	add.w	r4, r3, lr
 80197b0:	2c00      	cmp	r4, #0
 80197b2:	dc43      	bgt.n	801983c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80197b4:	9a00      	ldr	r2, [sp, #0]
 80197b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80197ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80197be:	9300      	str	r3, [sp, #0]
 80197c0:	9b02      	ldr	r3, [sp, #8]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	f340 8098 	ble.w	80198f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80197c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80197cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80197d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80197d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80197d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80197da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80197de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80197e2:	eef0 6a62 	vmov.f32	s13, s5
 80197e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80197ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80197ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80197f2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80197f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80197fa:	eef0 6a43 	vmov.f32	s13, s6
 80197fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019802:	ee12 2a90 	vmov	r2, s5
 8019806:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801980a:	fb92 f3f3 	sdiv	r3, r2, r3
 801980e:	ee13 2a10 	vmov	r2, s6
 8019812:	9313      	str	r3, [sp, #76]	; 0x4c
 8019814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019816:	fb92 f3f3 	sdiv	r3, r2, r3
 801981a:	9314      	str	r3, [sp, #80]	; 0x50
 801981c:	9b02      	ldr	r3, [sp, #8]
 801981e:	9a05      	ldr	r2, [sp, #20]
 8019820:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019824:	3b01      	subs	r3, #1
 8019826:	9302      	str	r3, [sp, #8]
 8019828:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801982c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801982e:	eeb0 3a67 	vmov.f32	s6, s15
 8019832:	bf08      	it	eq
 8019834:	4613      	moveq	r3, r2
 8019836:	eef0 2a47 	vmov.f32	s5, s14
 801983a:	e72a      	b.n	8019692 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801983c:	140f      	asrs	r7, r1, #16
 801983e:	d454      	bmi.n	80198ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019840:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019844:	42be      	cmp	r6, r7
 8019846:	dd50      	ble.n	80198ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019848:	ea5f 4822 	movs.w	r8, r2, asr #16
 801984c:	d44d      	bmi.n	80198ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801984e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8019852:	4544      	cmp	r4, r8
 8019854:	dd49      	ble.n	80198ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019856:	9c04      	ldr	r4, [sp, #16]
 8019858:	b236      	sxth	r6, r6
 801985a:	fb08 4606 	mla	r6, r8, r6, r4
 801985e:	f06f 0001 	mvn.w	r0, #1
 8019862:	f816 8007 	ldrb.w	r8, [r6, r7]
 8019866:	9c01      	ldr	r4, [sp, #4]
 8019868:	fb00 fa0e 	mul.w	sl, r0, lr
 801986c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019870:	9800      	ldr	r0, [sp, #0]
 8019872:	eb04 0b08 	add.w	fp, r4, r8
 8019876:	f830 400a 	ldrh.w	r4, [r0, sl]
 801987a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801987e:	9801      	ldr	r0, [sp, #4]
 8019880:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019884:	f810 8008 	ldrb.w	r8, [r0, r8]
 8019888:	9800      	ldr	r0, [sp, #0]
 801988a:	1227      	asrs	r7, r4, #8
 801988c:	fb16 f609 	smulbb	r6, r6, r9
 8019890:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019894:	fb07 6705 	mla	r7, r7, r5, r6
 8019898:	10e6      	asrs	r6, r4, #3
 801989a:	00e4      	lsls	r4, r4, #3
 801989c:	b2e4      	uxtb	r4, r4
 801989e:	fb1b fb09 	smulbb	fp, fp, r9
 80198a2:	fb14 f405 	smulbb	r4, r4, r5
 80198a6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80198aa:	b2bf      	uxth	r7, r7
 80198ac:	fb06 b605 	mla	r6, r6, r5, fp
 80198b0:	fb08 4809 	mla	r8, r8, r9, r4
 80198b4:	b2b6      	uxth	r6, r6
 80198b6:	fa1f f888 	uxth.w	r8, r8
 80198ba:	1c7c      	adds	r4, r7, #1
 80198bc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80198c0:	f106 0b01 	add.w	fp, r6, #1
 80198c4:	f108 0401 	add.w	r4, r8, #1
 80198c8:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80198cc:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80198d0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80198d4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80198d8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80198dc:	4327      	orrs	r7, r4
 80198de:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80198e2:	ea47 070b 	orr.w	r7, r7, fp
 80198e6:	f820 700a 	strh.w	r7, [r0, sl]
 80198ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80198ec:	4401      	add	r1, r0
 80198ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 80198f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80198f4:	4402      	add	r2, r0
 80198f6:	e759      	b.n	80197ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80198f8:	b007      	add	sp, #28
 80198fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019900 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019904:	b085      	sub	sp, #20
 8019906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801990a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801990c:	9203      	str	r2, [sp, #12]
 801990e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019912:	6870      	ldr	r0, [r6, #4]
 8019914:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019916:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801991a:	686f      	ldr	r7, [r5, #4]
 801991c:	9101      	str	r1, [sp, #4]
 801991e:	fb00 2404 	mla	r4, r0, r4, r2
 8019922:	6832      	ldr	r2, [r6, #0]
 8019924:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019928:	682a      	ldr	r2, [r5, #0]
 801992a:	9202      	str	r2, [sp, #8]
 801992c:	3704      	adds	r7, #4
 801992e:	9a01      	ldr	r2, [sp, #4]
 8019930:	2a00      	cmp	r2, #0
 8019932:	dc03      	bgt.n	801993c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019934:	9a03      	ldr	r2, [sp, #12]
 8019936:	2a00      	cmp	r2, #0
 8019938:	f340 80cc 	ble.w	8019ad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801993c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801993e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019942:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019946:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801994a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801994c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019950:	2b00      	cmp	r3, #0
 8019952:	dd0d      	ble.n	8019970 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019954:	1406      	asrs	r6, r0, #16
 8019956:	d405      	bmi.n	8019964 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019958:	454e      	cmp	r6, r9
 801995a:	da03      	bge.n	8019964 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801995c:	1416      	asrs	r6, r2, #16
 801995e:	d401      	bmi.n	8019964 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019960:	4546      	cmp	r6, r8
 8019962:	db06      	blt.n	8019972 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019964:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019966:	4460      	add	r0, ip
 8019968:	4432      	add	r2, r6
 801996a:	3b01      	subs	r3, #1
 801996c:	3402      	adds	r4, #2
 801996e:	e7ef      	b.n	8019950 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019970:	d00f      	beq.n	8019992 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019972:	1e5e      	subs	r6, r3, #1
 8019974:	fb0c 0e06 	mla	lr, ip, r6, r0
 8019978:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801997c:	d543      	bpl.n	8019a06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801997e:	4698      	mov	r8, r3
 8019980:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8019984:	f1b8 0f00 	cmp.w	r8, #0
 8019988:	dc71      	bgt.n	8019a6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801998a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801998e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019992:	9b01      	ldr	r3, [sp, #4]
 8019994:	2b00      	cmp	r3, #0
 8019996:	f340 809d 	ble.w	8019ad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801999a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801999e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80199a2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80199a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80199ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80199b0:	eeb0 6a62 	vmov.f32	s12, s5
 80199b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80199b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80199bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80199c0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80199c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80199c8:	eeb0 6a43 	vmov.f32	s12, s6
 80199cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80199d0:	ee12 2a90 	vmov	r2, s5
 80199d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80199d8:	fb92 fcf3 	sdiv	ip, r2, r3
 80199dc:	ee13 2a10 	vmov	r2, s6
 80199e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80199e4:	9312      	str	r3, [sp, #72]	; 0x48
 80199e6:	9b01      	ldr	r3, [sp, #4]
 80199e8:	9a03      	ldr	r2, [sp, #12]
 80199ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80199ee:	3b01      	subs	r3, #1
 80199f0:	9301      	str	r3, [sp, #4]
 80199f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80199f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199f8:	eeb0 3a67 	vmov.f32	s6, s15
 80199fc:	bf08      	it	eq
 80199fe:	4613      	moveq	r3, r2
 8019a00:	eef0 2a47 	vmov.f32	s5, s14
 8019a04:	e793      	b.n	801992e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019a06:	45ce      	cmp	lr, r9
 8019a08:	dab9      	bge.n	801997e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019a0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019a0c:	fb01 2606 	mla	r6, r1, r6, r2
 8019a10:	1436      	asrs	r6, r6, #16
 8019a12:	d4b4      	bmi.n	801997e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019a14:	4546      	cmp	r6, r8
 8019a16:	dab2      	bge.n	801997e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019a18:	4698      	mov	r8, r3
 8019a1a:	46a2      	mov	sl, r4
 8019a1c:	f1b8 0f00 	cmp.w	r8, #0
 8019a20:	ddb3      	ble.n	801998a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019a22:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019a26:	9902      	ldr	r1, [sp, #8]
 8019a28:	1416      	asrs	r6, r2, #16
 8019a2a:	fb09 1606 	mla	r6, r9, r6, r1
 8019a2e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8019a32:	492a      	ldr	r1, [pc, #168]	; (8019adc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8019a34:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8019a38:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019a3c:	eb07 0b0e 	add.w	fp, r7, lr
 8019a40:	4460      	add	r0, ip
 8019a42:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8019a46:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019a4a:	00f6      	lsls	r6, r6, #3
 8019a4c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8019a50:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019a54:	ea49 0606 	orr.w	r6, r9, r6
 8019a58:	f817 900e 	ldrb.w	r9, [r7, lr]
 8019a5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019a5e:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8019a62:	f82a 6b02 	strh.w	r6, [sl], #2
 8019a66:	440a      	add	r2, r1
 8019a68:	f108 38ff 	add.w	r8, r8, #4294967295
 8019a6c:	e7d6      	b.n	8019a1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019a6e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019a72:	d429      	bmi.n	8019ac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019a74:	68ae      	ldr	r6, [r5, #8]
 8019a76:	454e      	cmp	r6, r9
 8019a78:	dd26      	ble.n	8019ac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019a7a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8019a7e:	d423      	bmi.n	8019ac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019a80:	68e9      	ldr	r1, [r5, #12]
 8019a82:	4559      	cmp	r1, fp
 8019a84:	dd20      	ble.n	8019ac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019a86:	9902      	ldr	r1, [sp, #8]
 8019a88:	fa0f fe86 	sxth.w	lr, r6
 8019a8c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8019a90:	f06f 0101 	mvn.w	r1, #1
 8019a94:	f81e e009 	ldrb.w	lr, [lr, r9]
 8019a98:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019a9c:	eb07 060e 	add.w	r6, r7, lr
 8019aa0:	fb01 f908 	mul.w	r9, r1, r8
 8019aa4:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019aa8:	7876      	ldrb	r6, [r6, #1]
 8019aaa:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8019aae:	00f6      	lsls	r6, r6, #3
 8019ab0:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8019ab4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019ab8:	ea4b 0606 	orr.w	r6, fp, r6
 8019abc:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8019ac0:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8019ac4:	f82a 6009 	strh.w	r6, [sl, r9]
 8019ac8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019aca:	4460      	add	r0, ip
 8019acc:	440a      	add	r2, r1
 8019ace:	f108 38ff 	add.w	r8, r8, #4294967295
 8019ad2:	e757      	b.n	8019984 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019ad4:	b005      	add	sp, #20
 8019ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ada:	bf00      	nop
 8019adc:	fffff800 	.word	0xfffff800

08019ae0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ae4:	b087      	sub	sp, #28
 8019ae6:	468b      	mov	fp, r1
 8019ae8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019aea:	9204      	str	r2, [sp, #16]
 8019aec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019af0:	9205      	str	r2, [sp, #20]
 8019af2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019af6:	6841      	ldr	r1, [r0, #4]
 8019af8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019afc:	fb01 2404 	mla	r4, r1, r4, r2
 8019b00:	6802      	ldr	r2, [r0, #0]
 8019b02:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019b06:	f8dc 2000 	ldr.w	r2, [ip]
 8019b0a:	9201      	str	r2, [sp, #4]
 8019b0c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019b10:	3204      	adds	r2, #4
 8019b12:	9202      	str	r2, [sp, #8]
 8019b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019b18:	f1bb 0f00 	cmp.w	fp, #0
 8019b1c:	dc03      	bgt.n	8019b26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8019b1e:	9a04      	ldr	r2, [sp, #16]
 8019b20:	2a00      	cmp	r2, #0
 8019b22:	f340 8138 	ble.w	8019d96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019b26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019b28:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8019b2c:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8019b30:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019b34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019b36:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	dd0e      	ble.n	8019b5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019b3e:	1402      	asrs	r2, r0, #16
 8019b40:	d405      	bmi.n	8019b4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019b42:	42ba      	cmp	r2, r7
 8019b44:	da03      	bge.n	8019b4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019b46:	140a      	asrs	r2, r1, #16
 8019b48:	d401      	bmi.n	8019b4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019b4a:	42b2      	cmp	r2, r6
 8019b4c:	db07      	blt.n	8019b5e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019b4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019b50:	4410      	add	r0, r2
 8019b52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b54:	3b01      	subs	r3, #1
 8019b56:	4411      	add	r1, r2
 8019b58:	3402      	adds	r4, #2
 8019b5a:	e7ee      	b.n	8019b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019b5c:	d019      	beq.n	8019b92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8019b5e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019b60:	1e5a      	subs	r2, r3, #1
 8019b62:	fb05 0502 	mla	r5, r5, r2, r0
 8019b66:	142d      	asrs	r5, r5, #16
 8019b68:	d409      	bmi.n	8019b7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019b6a:	42bd      	cmp	r5, r7
 8019b6c:	da07      	bge.n	8019b7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019b6e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019b70:	fb05 1202 	mla	r2, r5, r2, r1
 8019b74:	1412      	asrs	r2, r2, #16
 8019b76:	d402      	bmi.n	8019b7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019b78:	42b2      	cmp	r2, r6
 8019b7a:	f2c0 80ac 	blt.w	8019cd6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8019b7e:	f04f 0e00 	mov.w	lr, #0
 8019b82:	eb03 020e 	add.w	r2, r3, lr
 8019b86:	2a00      	cmp	r2, #0
 8019b88:	dc3e      	bgt.n	8019c08 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019b8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b8e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019b92:	f1bb 0f00 	cmp.w	fp, #0
 8019b96:	f340 80fe 	ble.w	8019d96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019b9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019b9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019ba2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019ba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ba8:	f1bb 0b01 	subs.w	fp, fp, #1
 8019bac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019bb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019bb4:	eeb0 6a62 	vmov.f32	s12, s5
 8019bb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019bbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019bc0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019bc4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019bc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019bcc:	eeb0 6a43 	vmov.f32	s12, s6
 8019bd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019bd4:	ee12 2a90 	vmov	r2, s5
 8019bd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019bdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8019be0:	ee13 2a10 	vmov	r2, s6
 8019be4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019be8:	9313      	str	r3, [sp, #76]	; 0x4c
 8019bea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019bec:	fb92 f3f3 	sdiv	r3, r2, r3
 8019bf0:	9a04      	ldr	r2, [sp, #16]
 8019bf2:	9314      	str	r3, [sp, #80]	; 0x50
 8019bf4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019bf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019bfa:	eeb0 3a67 	vmov.f32	s6, s15
 8019bfe:	bf08      	it	eq
 8019c00:	4613      	moveq	r3, r2
 8019c02:	eef0 2a47 	vmov.f32	s5, s14
 8019c06:	e787      	b.n	8019b18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019c08:	1406      	asrs	r6, r0, #16
 8019c0a:	d45d      	bmi.n	8019cc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019c0c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8019c10:	42b5      	cmp	r5, r6
 8019c12:	dd59      	ble.n	8019cc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019c14:	140f      	asrs	r7, r1, #16
 8019c16:	d457      	bmi.n	8019cc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019c18:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019c1c:	42ba      	cmp	r2, r7
 8019c1e:	dd53      	ble.n	8019cc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019c20:	9a01      	ldr	r2, [sp, #4]
 8019c22:	b22d      	sxth	r5, r5
 8019c24:	fb07 2505 	mla	r5, r7, r5, r2
 8019c28:	5daa      	ldrb	r2, [r5, r6]
 8019c2a:	9d02      	ldr	r5, [sp, #8]
 8019c2c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8019c30:	0e2e      	lsrs	r6, r5, #24
 8019c32:	d049      	beq.n	8019cc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019c34:	f06f 0201 	mvn.w	r2, #1
 8019c38:	fb02 f20e 	mul.w	r2, r2, lr
 8019c3c:	9203      	str	r2, [sp, #12]
 8019c3e:	f834 8002 	ldrh.w	r8, [r4, r2]
 8019c42:	9a05      	ldr	r2, [sp, #20]
 8019c44:	4356      	muls	r6, r2
 8019c46:	1c72      	adds	r2, r6, #1
 8019c48:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8019c4c:	1212      	asrs	r2, r2, #8
 8019c4e:	fa1f f982 	uxth.w	r9, r2
 8019c52:	ea4f 2728 	mov.w	r7, r8, asr #8
 8019c56:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019c5a:	43d2      	mvns	r2, r2
 8019c5c:	b2d2      	uxtb	r2, r2
 8019c5e:	fb16 f609 	smulbb	r6, r6, r9
 8019c62:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019c66:	fb07 6702 	mla	r7, r7, r2, r6
 8019c6a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019c6e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8019c72:	b2ed      	uxtb	r5, r5
 8019c74:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019c78:	fa5f f888 	uxtb.w	r8, r8
 8019c7c:	fb15 f509 	smulbb	r5, r5, r9
 8019c80:	fb08 5502 	mla	r5, r8, r2, r5
 8019c84:	b2bf      	uxth	r7, r7
 8019c86:	fb1a fa09 	smulbb	sl, sl, r9
 8019c8a:	b2ad      	uxth	r5, r5
 8019c8c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019c90:	fb06 a602 	mla	r6, r6, r2, sl
 8019c94:	1c7a      	adds	r2, r7, #1
 8019c96:	f105 0a01 	add.w	sl, r5, #1
 8019c9a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019c9e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019ca2:	b2b6      	uxth	r6, r6
 8019ca4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019ca8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019cac:	ea4a 0707 	orr.w	r7, sl, r7
 8019cb0:	f106 0a01 	add.w	sl, r6, #1
 8019cb4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019cb8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019cbc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019cc0:	9a03      	ldr	r2, [sp, #12]
 8019cc2:	ea47 070a 	orr.w	r7, r7, sl
 8019cc6:	52a7      	strh	r7, [r4, r2]
 8019cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019cca:	4410      	add	r0, r2
 8019ccc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019cce:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019cd2:	4411      	add	r1, r2
 8019cd4:	e755      	b.n	8019b82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019cd6:	f04f 0800 	mov.w	r8, #0
 8019cda:	eba3 0208 	sub.w	r2, r3, r8
 8019cde:	2a00      	cmp	r2, #0
 8019ce0:	f77f af53 	ble.w	8019b8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8019ce4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8019ce8:	9f01      	ldr	r7, [sp, #4]
 8019cea:	140a      	asrs	r2, r1, #16
 8019cec:	1405      	asrs	r5, r0, #16
 8019cee:	fb06 7202 	mla	r2, r6, r2, r7
 8019cf2:	5d52      	ldrb	r2, [r2, r5]
 8019cf4:	9d02      	ldr	r5, [sp, #8]
 8019cf6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8019cfa:	0e2e      	lsrs	r6, r5, #24
 8019cfc:	d044      	beq.n	8019d88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8019cfe:	9a05      	ldr	r2, [sp, #20]
 8019d00:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8019d04:	4356      	muls	r6, r2
 8019d06:	1c72      	adds	r2, r6, #1
 8019d08:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8019d0c:	1212      	asrs	r2, r2, #8
 8019d0e:	fa1f f982 	uxth.w	r9, r2
 8019d12:	ea4f 272e 	mov.w	r7, lr, asr #8
 8019d16:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019d1a:	43d2      	mvns	r2, r2
 8019d1c:	b2d2      	uxtb	r2, r2
 8019d1e:	fb16 f609 	smulbb	r6, r6, r9
 8019d22:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019d26:	fb07 6702 	mla	r7, r7, r2, r6
 8019d2a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019d2e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019d32:	b2ed      	uxtb	r5, r5
 8019d34:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019d38:	fa5f fe8e 	uxtb.w	lr, lr
 8019d3c:	fb15 f509 	smulbb	r5, r5, r9
 8019d40:	fb0e 5502 	mla	r5, lr, r2, r5
 8019d44:	b2bf      	uxth	r7, r7
 8019d46:	fb1a fa09 	smulbb	sl, sl, r9
 8019d4a:	b2ad      	uxth	r5, r5
 8019d4c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019d50:	fb06 a602 	mla	r6, r6, r2, sl
 8019d54:	1c7a      	adds	r2, r7, #1
 8019d56:	f105 0a01 	add.w	sl, r5, #1
 8019d5a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019d5e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019d62:	b2b6      	uxth	r6, r6
 8019d64:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019d68:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019d6c:	ea4a 0707 	orr.w	r7, sl, r7
 8019d70:	f106 0a01 	add.w	sl, r6, #1
 8019d74:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019d78:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019d7c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019d80:	ea47 070a 	orr.w	r7, r7, sl
 8019d84:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8019d88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019d8a:	4410      	add	r0, r2
 8019d8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019d8e:	f108 0801 	add.w	r8, r8, #1
 8019d92:	4411      	add	r1, r2
 8019d94:	e7a1      	b.n	8019cda <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8019d96:	b007      	add	sp, #28
 8019d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da0:	b085      	sub	sp, #20
 8019da2:	468b      	mov	fp, r1
 8019da4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019da6:	9203      	str	r2, [sp, #12]
 8019da8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019dac:	6841      	ldr	r1, [r0, #4]
 8019dae:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8019db2:	fb01 2404 	mla	r4, r1, r4, r2
 8019db6:	6802      	ldr	r2, [r0, #0]
 8019db8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019dbc:	f8de 2000 	ldr.w	r2, [lr]
 8019dc0:	9200      	str	r2, [sp, #0]
 8019dc2:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019dc6:	3204      	adds	r2, #4
 8019dc8:	9201      	str	r2, [sp, #4]
 8019dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019dce:	f1bb 0f00 	cmp.w	fp, #0
 8019dd2:	dc03      	bgt.n	8019ddc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8019dd4:	9a03      	ldr	r2, [sp, #12]
 8019dd6:	2a00      	cmp	r2, #0
 8019dd8:	f340 8153 	ble.w	801a082 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8019ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019dde:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019de2:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8019de6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019dea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019dec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	dd0e      	ble.n	8019e12 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019df4:	1408      	asrs	r0, r1, #16
 8019df6:	d405      	bmi.n	8019e04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019df8:	42b8      	cmp	r0, r7
 8019dfa:	da03      	bge.n	8019e04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019dfc:	1410      	asrs	r0, r2, #16
 8019dfe:	d401      	bmi.n	8019e04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019e00:	42b0      	cmp	r0, r6
 8019e02:	db07      	blt.n	8019e14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019e04:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019e06:	4401      	add	r1, r0
 8019e08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019e0a:	3b01      	subs	r3, #1
 8019e0c:	4402      	add	r2, r0
 8019e0e:	3402      	adds	r4, #2
 8019e10:	e7ee      	b.n	8019df0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8019e12:	d017      	beq.n	8019e44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019e14:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019e16:	1e58      	subs	r0, r3, #1
 8019e18:	fb05 1500 	mla	r5, r5, r0, r1
 8019e1c:	142d      	asrs	r5, r5, #16
 8019e1e:	d409      	bmi.n	8019e34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019e20:	42bd      	cmp	r5, r7
 8019e22:	da07      	bge.n	8019e34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019e24:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019e26:	fb05 2000 	mla	r0, r5, r0, r2
 8019e2a:	1400      	asrs	r0, r0, #16
 8019e2c:	d402      	bmi.n	8019e34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019e2e:	42b0      	cmp	r0, r6
 8019e30:	f2c0 80bc 	blt.w	8019fac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8019e34:	2600      	movs	r6, #0
 8019e36:	1998      	adds	r0, r3, r6
 8019e38:	2800      	cmp	r0, #0
 8019e3a:	dc3e      	bgt.n	8019eba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019e3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e40:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019e44:	f1bb 0f00 	cmp.w	fp, #0
 8019e48:	f340 811b 	ble.w	801a082 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8019e4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e54:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e5a:	f1bb 0b01 	subs.w	fp, fp, #1
 8019e5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e66:	eeb0 6a62 	vmov.f32	s12, s5
 8019e6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e72:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e76:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019e7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e7e:	eeb0 6a43 	vmov.f32	s12, s6
 8019e82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e86:	ee12 2a90 	vmov	r2, s5
 8019e8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e92:	ee13 2a10 	vmov	r2, s6
 8019e96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e9a:	9311      	str	r3, [sp, #68]	; 0x44
 8019e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ea2:	9a03      	ldr	r2, [sp, #12]
 8019ea4:	9312      	str	r3, [sp, #72]	; 0x48
 8019ea6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019eac:	eeb0 3a67 	vmov.f32	s6, s15
 8019eb0:	bf08      	it	eq
 8019eb2:	4613      	moveq	r3, r2
 8019eb4:	eef0 2a47 	vmov.f32	s5, s14
 8019eb8:	e789      	b.n	8019dce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8019eba:	140f      	asrs	r7, r1, #16
 8019ebc:	d426      	bmi.n	8019f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019ebe:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019ec2:	42bd      	cmp	r5, r7
 8019ec4:	dd22      	ble.n	8019f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019ec6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019eca:	d41f      	bmi.n	8019f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019ecc:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019ed0:	4560      	cmp	r0, ip
 8019ed2:	dd1b      	ble.n	8019f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019ed4:	9800      	ldr	r0, [sp, #0]
 8019ed6:	b22d      	sxth	r5, r5
 8019ed8:	fb0c 0505 	mla	r5, ip, r5, r0
 8019edc:	5de8      	ldrb	r0, [r5, r7]
 8019ede:	9d01      	ldr	r5, [sp, #4]
 8019ee0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8019ee4:	0e07      	lsrs	r7, r0, #24
 8019ee6:	2fff      	cmp	r7, #255	; 0xff
 8019ee8:	d116      	bne.n	8019f18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019eea:	f06f 0501 	mvn.w	r5, #1
 8019eee:	fb05 f706 	mul.w	r7, r5, r6
 8019ef2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8019ef6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8019efa:	0945      	lsrs	r5, r0, #5
 8019efc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019f00:	ea4c 0505 	orr.w	r5, ip, r5
 8019f04:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8019f08:	4305      	orrs	r5, r0
 8019f0a:	53e5      	strh	r5, [r4, r7]
 8019f0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019f0e:	4401      	add	r1, r0
 8019f10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019f12:	3e01      	subs	r6, #1
 8019f14:	4402      	add	r2, r0
 8019f16:	e78e      	b.n	8019e36 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019f18:	b2fd      	uxtb	r5, r7
 8019f1a:	2f00      	cmp	r7, #0
 8019f1c:	d0f6      	beq.n	8019f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019f1e:	f06f 0701 	mvn.w	r7, #1
 8019f22:	4377      	muls	r7, r6
 8019f24:	fa1f f985 	uxth.w	r9, r5
 8019f28:	f834 8007 	ldrh.w	r8, [r4, r7]
 8019f2c:	9702      	str	r7, [sp, #8]
 8019f2e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8019f32:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019f36:	43ed      	mvns	r5, r5
 8019f38:	b2ed      	uxtb	r5, r5
 8019f3a:	fb17 f709 	smulbb	r7, r7, r9
 8019f3e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019f42:	fb0c 7c05 	mla	ip, ip, r5, r7
 8019f46:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019f4a:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8019f4e:	b2c0      	uxtb	r0, r0
 8019f50:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019f54:	fa5f f888 	uxtb.w	r8, r8
 8019f58:	fb10 f009 	smulbb	r0, r0, r9
 8019f5c:	fb08 0005 	mla	r0, r8, r5, r0
 8019f60:	b280      	uxth	r0, r0
 8019f62:	fa1f fc8c 	uxth.w	ip, ip
 8019f66:	fb1a fa09 	smulbb	sl, sl, r9
 8019f6a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019f6e:	fb07 a705 	mla	r7, r7, r5, sl
 8019f72:	f100 0a01 	add.w	sl, r0, #1
 8019f76:	f10c 0501 	add.w	r5, ip, #1
 8019f7a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8019f7e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019f82:	b2bf      	uxth	r7, r7
 8019f84:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019f88:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019f8c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019f90:	f107 0a01 	add.w	sl, r7, #1
 8019f94:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019f98:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019f9c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019fa0:	9802      	ldr	r0, [sp, #8]
 8019fa2:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019fa6:	f824 c000 	strh.w	ip, [r4, r0]
 8019faa:	e7af      	b.n	8019f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019fac:	f04f 0800 	mov.w	r8, #0
 8019fb0:	eba3 0008 	sub.w	r0, r3, r8
 8019fb4:	2800      	cmp	r0, #0
 8019fb6:	f77f af41 	ble.w	8019e3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019fba:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8019fbe:	9f00      	ldr	r7, [sp, #0]
 8019fc0:	1410      	asrs	r0, r2, #16
 8019fc2:	140d      	asrs	r5, r1, #16
 8019fc4:	fb06 7000 	mla	r0, r6, r0, r7
 8019fc8:	5d40      	ldrb	r0, [r0, r5]
 8019fca:	9d01      	ldr	r5, [sp, #4]
 8019fcc:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8019fd0:	0e2e      	lsrs	r6, r5, #24
 8019fd2:	2eff      	cmp	r6, #255	; 0xff
 8019fd4:	d112      	bne.n	8019ffc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8019fd6:	482c      	ldr	r0, [pc, #176]	; (801a088 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8019fd8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8019fdc:	0968      	lsrs	r0, r5, #5
 8019fde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019fe2:	4330      	orrs	r0, r6
 8019fe4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019fe8:	4328      	orrs	r0, r5
 8019fea:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8019fee:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019ff0:	4401      	add	r1, r0
 8019ff2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019ff4:	f108 0801 	add.w	r8, r8, #1
 8019ff8:	4402      	add	r2, r0
 8019ffa:	e7d9      	b.n	8019fb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019ffc:	b2f0      	uxtb	r0, r6
 8019ffe:	2e00      	cmp	r6, #0
 801a000:	d0f5      	beq.n	8019fee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a002:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a006:	fa1f f980 	uxth.w	r9, r0
 801a00a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a00e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a012:	43c0      	mvns	r0, r0
 801a014:	b2c0      	uxtb	r0, r0
 801a016:	fb16 f609 	smulbb	r6, r6, r9
 801a01a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a01e:	fb07 6700 	mla	r7, r7, r0, r6
 801a022:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a026:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a02a:	b2ed      	uxtb	r5, r5
 801a02c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a030:	fa5f fc8c 	uxtb.w	ip, ip
 801a034:	fb15 f509 	smulbb	r5, r5, r9
 801a038:	fb0c 5500 	mla	r5, ip, r0, r5
 801a03c:	b2bf      	uxth	r7, r7
 801a03e:	fb1a fa09 	smulbb	sl, sl, r9
 801a042:	b2ad      	uxth	r5, r5
 801a044:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a048:	fb06 a600 	mla	r6, r6, r0, sl
 801a04c:	1c78      	adds	r0, r7, #1
 801a04e:	f105 0a01 	add.w	sl, r5, #1
 801a052:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801a056:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a05a:	b2b6      	uxth	r6, r6
 801a05c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a060:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a064:	ea4a 0707 	orr.w	r7, sl, r7
 801a068:	f106 0a01 	add.w	sl, r6, #1
 801a06c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a070:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a074:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a078:	ea47 070a 	orr.w	r7, r7, sl
 801a07c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a080:	e7b5      	b.n	8019fee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a082:	b005      	add	sp, #20
 801a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a088:	fffff800 	.word	0xfffff800

0801a08c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a090:	b087      	sub	sp, #28
 801a092:	468b      	mov	fp, r1
 801a094:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a096:	9204      	str	r2, [sp, #16]
 801a098:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a09c:	9205      	str	r2, [sp, #20]
 801a09e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a0a2:	6861      	ldr	r1, [r4, #4]
 801a0a4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a0a8:	fb01 2000 	mla	r0, r1, r0, r2
 801a0ac:	6822      	ldr	r2, [r4, #0]
 801a0ae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a0b2:	f8de 2000 	ldr.w	r2, [lr]
 801a0b6:	9201      	str	r2, [sp, #4]
 801a0b8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a0bc:	9202      	str	r2, [sp, #8]
 801a0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a0c2:	f1bb 0f00 	cmp.w	fp, #0
 801a0c6:	dc03      	bgt.n	801a0d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a0c8:	9a04      	ldr	r2, [sp, #16]
 801a0ca:	2a00      	cmp	r2, #0
 801a0cc:	f340 8142 	ble.w	801a354 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a0d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a0d2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a0d6:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a0da:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a0de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	dd0e      	ble.n	801a106 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a0e8:	140c      	asrs	r4, r1, #16
 801a0ea:	d405      	bmi.n	801a0f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a0ec:	42bc      	cmp	r4, r7
 801a0ee:	da03      	bge.n	801a0f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a0f0:	1414      	asrs	r4, r2, #16
 801a0f2:	d401      	bmi.n	801a0f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a0f4:	42b4      	cmp	r4, r6
 801a0f6:	db07      	blt.n	801a108 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a0f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a0fa:	4421      	add	r1, r4
 801a0fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a0fe:	3b01      	subs	r3, #1
 801a100:	4422      	add	r2, r4
 801a102:	3002      	adds	r0, #2
 801a104:	e7ee      	b.n	801a0e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801a106:	d019      	beq.n	801a13c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801a108:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a10a:	1e5c      	subs	r4, r3, #1
 801a10c:	fb05 1504 	mla	r5, r5, r4, r1
 801a110:	142d      	asrs	r5, r5, #16
 801a112:	d409      	bmi.n	801a128 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801a114:	42bd      	cmp	r5, r7
 801a116:	da07      	bge.n	801a128 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801a118:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a11a:	fb05 2404 	mla	r4, r5, r4, r2
 801a11e:	1424      	asrs	r4, r4, #16
 801a120:	d402      	bmi.n	801a128 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801a122:	42b4      	cmp	r4, r6
 801a124:	f2c0 80b1 	blt.w	801a28a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801a128:	f04f 0800 	mov.w	r8, #0
 801a12c:	eb03 0408 	add.w	r4, r3, r8
 801a130:	2c00      	cmp	r4, #0
 801a132:	dc3e      	bgt.n	801a1b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a134:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a138:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a13c:	f1bb 0f00 	cmp.w	fp, #0
 801a140:	f340 8108 	ble.w	801a354 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a144:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a148:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a14c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a150:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a152:	f1bb 0b01 	subs.w	fp, fp, #1
 801a156:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a15a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a15e:	eeb0 6a62 	vmov.f32	s12, s5
 801a162:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a166:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a16a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a16e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a172:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a176:	eeb0 6a43 	vmov.f32	s12, s6
 801a17a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a17e:	ee12 2a90 	vmov	r2, s5
 801a182:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a186:	fb92 f3f3 	sdiv	r3, r2, r3
 801a18a:	ee13 2a10 	vmov	r2, s6
 801a18e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a192:	9313      	str	r3, [sp, #76]	; 0x4c
 801a194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a196:	fb92 f3f3 	sdiv	r3, r2, r3
 801a19a:	9a04      	ldr	r2, [sp, #16]
 801a19c:	9314      	str	r3, [sp, #80]	; 0x50
 801a19e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a1a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a1a4:	eeb0 3a67 	vmov.f32	s6, s15
 801a1a8:	bf08      	it	eq
 801a1aa:	4613      	moveq	r3, r2
 801a1ac:	eef0 2a47 	vmov.f32	s5, s14
 801a1b0:	e787      	b.n	801a0c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a1b2:	140e      	asrs	r6, r1, #16
 801a1b4:	d462      	bmi.n	801a27c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a1b6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a1ba:	42b5      	cmp	r5, r6
 801a1bc:	dd5e      	ble.n	801a27c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a1be:	1417      	asrs	r7, r2, #16
 801a1c0:	d45c      	bmi.n	801a27c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a1c2:	f8de 400c 	ldr.w	r4, [lr, #12]
 801a1c6:	42bc      	cmp	r4, r7
 801a1c8:	dd58      	ble.n	801a27c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a1ca:	b22d      	sxth	r5, r5
 801a1cc:	fb07 6505 	mla	r5, r7, r5, r6
 801a1d0:	9c02      	ldr	r4, [sp, #8]
 801a1d2:	5d66      	ldrb	r6, [r4, r5]
 801a1d4:	2e00      	cmp	r6, #0
 801a1d6:	d051      	beq.n	801a27c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a1d8:	9c01      	ldr	r4, [sp, #4]
 801a1da:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801a1de:	f06f 0401 	mvn.w	r4, #1
 801a1e2:	fb04 f408 	mul.w	r4, r4, r8
 801a1e6:	9403      	str	r4, [sp, #12]
 801a1e8:	5b05      	ldrh	r5, [r0, r4]
 801a1ea:	9c05      	ldr	r4, [sp, #20]
 801a1ec:	4366      	muls	r6, r4
 801a1ee:	1c74      	adds	r4, r6, #1
 801a1f0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801a1f4:	1224      	asrs	r4, r4, #8
 801a1f6:	b2a7      	uxth	r7, r4
 801a1f8:	122e      	asrs	r6, r5, #8
 801a1fa:	43e4      	mvns	r4, r4
 801a1fc:	b2e4      	uxtb	r4, r4
 801a1fe:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801a202:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a206:	fb16 f604 	smulbb	r6, r6, r4
 801a20a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a20e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a212:	00ed      	lsls	r5, r5, #3
 801a214:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a218:	b2ed      	uxtb	r5, r5
 801a21a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801a21e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801a222:	fb15 f504 	smulbb	r5, r5, r4
 801a226:	fa5f f989 	uxtb.w	r9, r9
 801a22a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a22e:	fb09 5507 	mla	r5, r9, r7, r5
 801a232:	fb1a fa04 	smulbb	sl, sl, r4
 801a236:	fa1f fc8c 	uxth.w	ip, ip
 801a23a:	b2ad      	uxth	r5, r5
 801a23c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a240:	fb06 a607 	mla	r6, r6, r7, sl
 801a244:	f10c 0401 	add.w	r4, ip, #1
 801a248:	f105 0a01 	add.w	sl, r5, #1
 801a24c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a250:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a254:	b2b6      	uxth	r6, r6
 801a256:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a25a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a25e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a262:	f106 0a01 	add.w	sl, r6, #1
 801a266:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a26a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a26e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a272:	9c03      	ldr	r4, [sp, #12]
 801a274:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a278:	f820 c004 	strh.w	ip, [r0, r4]
 801a27c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a27e:	4421      	add	r1, r4
 801a280:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a282:	f108 38ff 	add.w	r8, r8, #4294967295
 801a286:	4422      	add	r2, r4
 801a288:	e750      	b.n	801a12c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a28a:	f04f 0900 	mov.w	r9, #0
 801a28e:	eba3 0409 	sub.w	r4, r3, r9
 801a292:	2c00      	cmp	r4, #0
 801a294:	f77f af4e 	ble.w	801a134 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a298:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a29c:	140d      	asrs	r5, r1, #16
 801a29e:	1414      	asrs	r4, r2, #16
 801a2a0:	fb06 5404 	mla	r4, r6, r4, r5
 801a2a4:	9d02      	ldr	r5, [sp, #8]
 801a2a6:	5d2e      	ldrb	r6, [r5, r4]
 801a2a8:	2e00      	cmp	r6, #0
 801a2aa:	d04c      	beq.n	801a346 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801a2ac:	9d01      	ldr	r5, [sp, #4]
 801a2ae:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801a2b2:	9c05      	ldr	r4, [sp, #20]
 801a2b4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801a2b8:	4366      	muls	r6, r4
 801a2ba:	1c74      	adds	r4, r6, #1
 801a2bc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801a2c0:	1224      	asrs	r4, r4, #8
 801a2c2:	b2a7      	uxth	r7, r4
 801a2c4:	122e      	asrs	r6, r5, #8
 801a2c6:	43e4      	mvns	r4, r4
 801a2c8:	b2e4      	uxtb	r4, r4
 801a2ca:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a2ce:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a2d2:	fb16 f604 	smulbb	r6, r6, r4
 801a2d6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a2da:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a2de:	00ed      	lsls	r5, r5, #3
 801a2e0:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a2e4:	b2ed      	uxtb	r5, r5
 801a2e6:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a2ea:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a2ee:	fb15 f504 	smulbb	r5, r5, r4
 801a2f2:	fa5f f888 	uxtb.w	r8, r8
 801a2f6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a2fa:	fb08 5507 	mla	r5, r8, r7, r5
 801a2fe:	fb1a fa04 	smulbb	sl, sl, r4
 801a302:	fa1f fc8c 	uxth.w	ip, ip
 801a306:	b2ad      	uxth	r5, r5
 801a308:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a30c:	fb06 a607 	mla	r6, r6, r7, sl
 801a310:	f10c 0401 	add.w	r4, ip, #1
 801a314:	f105 0a01 	add.w	sl, r5, #1
 801a318:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a31c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a320:	b2b6      	uxth	r6, r6
 801a322:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a326:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a32a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a32e:	f106 0a01 	add.w	sl, r6, #1
 801a332:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a336:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a33a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a33e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a342:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801a346:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a348:	4421      	add	r1, r4
 801a34a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a34c:	f109 0901 	add.w	r9, r9, #1
 801a350:	4422      	add	r2, r4
 801a352:	e79c      	b.n	801a28e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801a354:	b007      	add	sp, #28
 801a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a35a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a35a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a35e:	b085      	sub	sp, #20
 801a360:	468b      	mov	fp, r1
 801a362:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a364:	9203      	str	r2, [sp, #12]
 801a366:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801a36a:	6861      	ldr	r1, [r4, #4]
 801a36c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a370:	fb01 2000 	mla	r0, r1, r0, r2
 801a374:	6822      	ldr	r2, [r4, #0]
 801a376:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a37a:	f8d8 2000 	ldr.w	r2, [r8]
 801a37e:	9200      	str	r2, [sp, #0]
 801a380:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a384:	9201      	str	r2, [sp, #4]
 801a386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a38a:	f1bb 0f00 	cmp.w	fp, #0
 801a38e:	dc03      	bgt.n	801a398 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a390:	9a03      	ldr	r2, [sp, #12]
 801a392:	2a00      	cmp	r2, #0
 801a394:	f340 8146 	ble.w	801a624 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a39a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801a39e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801a3a2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a3a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a3a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	dd0e      	ble.n	801a3ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a3b0:	140c      	asrs	r4, r1, #16
 801a3b2:	d405      	bmi.n	801a3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a3b4:	42bc      	cmp	r4, r7
 801a3b6:	da03      	bge.n	801a3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a3b8:	1414      	asrs	r4, r2, #16
 801a3ba:	d401      	bmi.n	801a3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a3bc:	42b4      	cmp	r4, r6
 801a3be:	db07      	blt.n	801a3d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a3c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a3c2:	4421      	add	r1, r4
 801a3c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a3c6:	3b01      	subs	r3, #1
 801a3c8:	4422      	add	r2, r4
 801a3ca:	3002      	adds	r0, #2
 801a3cc:	e7ee      	b.n	801a3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a3ce:	d017      	beq.n	801a400 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a3d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a3d2:	1e5c      	subs	r4, r3, #1
 801a3d4:	fb05 1504 	mla	r5, r5, r4, r1
 801a3d8:	142d      	asrs	r5, r5, #16
 801a3da:	d409      	bmi.n	801a3f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a3dc:	42bd      	cmp	r5, r7
 801a3de:	da07      	bge.n	801a3f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a3e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a3e2:	fb05 2404 	mla	r4, r5, r4, r2
 801a3e6:	1424      	asrs	r4, r4, #16
 801a3e8:	d402      	bmi.n	801a3f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a3ea:	42b4      	cmp	r4, r6
 801a3ec:	f2c0 80b3 	blt.w	801a556 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801a3f0:	2600      	movs	r6, #0
 801a3f2:	199c      	adds	r4, r3, r6
 801a3f4:	2c00      	cmp	r4, #0
 801a3f6:	dc3e      	bgt.n	801a476 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a3f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a3fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a400:	f1bb 0f00 	cmp.w	fp, #0
 801a404:	f340 810e 	ble.w	801a624 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a408:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a40c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a410:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a416:	f1bb 0b01 	subs.w	fp, fp, #1
 801a41a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a41e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a422:	eeb0 6a62 	vmov.f32	s12, s5
 801a426:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a42a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a42e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a432:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a436:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a43a:	eeb0 6a43 	vmov.f32	s12, s6
 801a43e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a442:	ee12 2a90 	vmov	r2, s5
 801a446:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a44a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a44e:	ee13 2a10 	vmov	r2, s6
 801a452:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a456:	9311      	str	r3, [sp, #68]	; 0x44
 801a458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a45a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a45e:	9a03      	ldr	r2, [sp, #12]
 801a460:	9312      	str	r3, [sp, #72]	; 0x48
 801a462:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a468:	eeb0 3a67 	vmov.f32	s6, s15
 801a46c:	bf08      	it	eq
 801a46e:	4613      	moveq	r3, r2
 801a470:	eef0 2a47 	vmov.f32	s5, s14
 801a474:	e789      	b.n	801a38a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a476:	140f      	asrs	r7, r1, #16
 801a478:	d418      	bmi.n	801a4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a47a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a47e:	42bd      	cmp	r5, r7
 801a480:	dd14      	ble.n	801a4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a482:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a486:	d411      	bmi.n	801a4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a488:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801a48c:	4564      	cmp	r4, ip
 801a48e:	dd0d      	ble.n	801a4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a490:	b22d      	sxth	r5, r5
 801a492:	fb0c 7505 	mla	r5, ip, r5, r7
 801a496:	9c01      	ldr	r4, [sp, #4]
 801a498:	5d64      	ldrb	r4, [r4, r5]
 801a49a:	2cff      	cmp	r4, #255	; 0xff
 801a49c:	d10c      	bne.n	801a4b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a49e:	9c00      	ldr	r4, [sp, #0]
 801a4a0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801a4a4:	f06f 0401 	mvn.w	r4, #1
 801a4a8:	4374      	muls	r4, r6
 801a4aa:	5305      	strh	r5, [r0, r4]
 801a4ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a4ae:	4421      	add	r1, r4
 801a4b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a4b2:	3e01      	subs	r6, #1
 801a4b4:	4422      	add	r2, r4
 801a4b6:	e79c      	b.n	801a3f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a4b8:	2c00      	cmp	r4, #0
 801a4ba:	d0f7      	beq.n	801a4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a4bc:	9f00      	ldr	r7, [sp, #0]
 801a4be:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801a4c2:	f06f 0501 	mvn.w	r5, #1
 801a4c6:	4375      	muls	r5, r6
 801a4c8:	9502      	str	r5, [sp, #8]
 801a4ca:	5b45      	ldrh	r5, [r0, r5]
 801a4cc:	fa1f fc84 	uxth.w	ip, r4
 801a4d0:	122f      	asrs	r7, r5, #8
 801a4d2:	43e4      	mvns	r4, r4
 801a4d4:	b2e4      	uxtb	r4, r4
 801a4d6:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801a4da:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a4de:	fb17 f704 	smulbb	r7, r7, r4
 801a4e2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a4e6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a4ea:	00ed      	lsls	r5, r5, #3
 801a4ec:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801a4f0:	b2ed      	uxtb	r5, r5
 801a4f2:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801a4f6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801a4fa:	fb15 f504 	smulbb	r5, r5, r4
 801a4fe:	fa5f f989 	uxtb.w	r9, r9
 801a502:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a506:	fb09 550c 	mla	r5, r9, ip, r5
 801a50a:	fb1a fa04 	smulbb	sl, sl, r4
 801a50e:	fa1f fe8e 	uxth.w	lr, lr
 801a512:	b2ad      	uxth	r5, r5
 801a514:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a518:	fb07 a70c 	mla	r7, r7, ip, sl
 801a51c:	f10e 0401 	add.w	r4, lr, #1
 801a520:	f105 0a01 	add.w	sl, r5, #1
 801a524:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801a528:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a52c:	b2bf      	uxth	r7, r7
 801a52e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a532:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801a536:	ea4a 0e0e 	orr.w	lr, sl, lr
 801a53a:	f107 0a01 	add.w	sl, r7, #1
 801a53e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a542:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a546:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a54a:	9c02      	ldr	r4, [sp, #8]
 801a54c:	ea4e 0e0a 	orr.w	lr, lr, sl
 801a550:	f820 e004 	strh.w	lr, [r0, r4]
 801a554:	e7aa      	b.n	801a4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a556:	f04f 0900 	mov.w	r9, #0
 801a55a:	eba3 0409 	sub.w	r4, r3, r9
 801a55e:	2c00      	cmp	r4, #0
 801a560:	f77f af4a 	ble.w	801a3f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a564:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801a568:	1414      	asrs	r4, r2, #16
 801a56a:	140d      	asrs	r5, r1, #16
 801a56c:	fb06 5504 	mla	r5, r6, r4, r5
 801a570:	9c01      	ldr	r4, [sp, #4]
 801a572:	5d64      	ldrb	r4, [r4, r5]
 801a574:	2cff      	cmp	r4, #255	; 0xff
 801a576:	d10b      	bne.n	801a590 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801a578:	9c00      	ldr	r4, [sp, #0]
 801a57a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801a57e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801a582:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a584:	4421      	add	r1, r4
 801a586:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a588:	f109 0901 	add.w	r9, r9, #1
 801a58c:	4422      	add	r2, r4
 801a58e:	e7e4      	b.n	801a55a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801a590:	2c00      	cmp	r4, #0
 801a592:	d0f6      	beq.n	801a582 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801a594:	9e00      	ldr	r6, [sp, #0]
 801a596:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801a59a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801a59e:	b2a7      	uxth	r7, r4
 801a5a0:	122e      	asrs	r6, r5, #8
 801a5a2:	43e4      	mvns	r4, r4
 801a5a4:	b2e4      	uxtb	r4, r4
 801a5a6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a5aa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a5ae:	fb16 f604 	smulbb	r6, r6, r4
 801a5b2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a5b6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a5ba:	00ed      	lsls	r5, r5, #3
 801a5bc:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a5c0:	b2ed      	uxtb	r5, r5
 801a5c2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a5c6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a5ca:	fb15 f504 	smulbb	r5, r5, r4
 801a5ce:	fa5f fe8e 	uxtb.w	lr, lr
 801a5d2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a5d6:	fb0e 5507 	mla	r5, lr, r7, r5
 801a5da:	fb1a fa04 	smulbb	sl, sl, r4
 801a5de:	fa1f fc8c 	uxth.w	ip, ip
 801a5e2:	b2ad      	uxth	r5, r5
 801a5e4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a5e8:	fb06 a607 	mla	r6, r6, r7, sl
 801a5ec:	f10c 0401 	add.w	r4, ip, #1
 801a5f0:	f105 0a01 	add.w	sl, r5, #1
 801a5f4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a5f8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a5fc:	b2b6      	uxth	r6, r6
 801a5fe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a602:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a606:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a60a:	f106 0a01 	add.w	sl, r6, #1
 801a60e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a612:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a616:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a61a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a61e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801a622:	e7ae      	b.n	801a582 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801a624:	b005      	add	sp, #20
 801a626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a62a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a62a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a62e:	b085      	sub	sp, #20
 801a630:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a632:	9203      	str	r2, [sp, #12]
 801a634:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a638:	9201      	str	r2, [sp, #4]
 801a63a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a63e:	9100      	str	r1, [sp, #0]
 801a640:	6841      	ldr	r1, [r0, #4]
 801a642:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a646:	fb01 2404 	mla	r4, r1, r4, r2
 801a64a:	6802      	ldr	r2, [r0, #0]
 801a64c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a650:	f8de 2000 	ldr.w	r2, [lr]
 801a654:	9202      	str	r2, [sp, #8]
 801a656:	9a01      	ldr	r2, [sp, #4]
 801a658:	43d6      	mvns	r6, r2
 801a65a:	b2f6      	uxtb	r6, r6
 801a65c:	9a00      	ldr	r2, [sp, #0]
 801a65e:	2a00      	cmp	r2, #0
 801a660:	dc03      	bgt.n	801a66a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a662:	9a03      	ldr	r2, [sp, #12]
 801a664:	2a00      	cmp	r2, #0
 801a666:	f340 8124 	ble.w	801a8b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a66a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a66c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801a670:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801a674:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a678:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a67a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a67e:	2b00      	cmp	r3, #0
 801a680:	dd0e      	ble.n	801a6a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a682:	1408      	asrs	r0, r1, #16
 801a684:	d405      	bmi.n	801a692 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a686:	4560      	cmp	r0, ip
 801a688:	da03      	bge.n	801a692 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a68a:	1410      	asrs	r0, r2, #16
 801a68c:	d401      	bmi.n	801a692 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a68e:	42b8      	cmp	r0, r7
 801a690:	db07      	blt.n	801a6a2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a692:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a694:	4401      	add	r1, r0
 801a696:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a698:	3b01      	subs	r3, #1
 801a69a:	4402      	add	r2, r0
 801a69c:	3402      	adds	r4, #2
 801a69e:	e7ee      	b.n	801a67e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a6a0:	d06e      	beq.n	801a780 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a6a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a6a4:	1e58      	subs	r0, r3, #1
 801a6a6:	fb05 1500 	mla	r5, r5, r0, r1
 801a6aa:	142d      	asrs	r5, r5, #16
 801a6ac:	d45c      	bmi.n	801a768 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a6ae:	4565      	cmp	r5, ip
 801a6b0:	da5a      	bge.n	801a768 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a6b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a6b4:	fb05 2000 	mla	r0, r5, r0, r2
 801a6b8:	1400      	asrs	r0, r0, #16
 801a6ba:	d455      	bmi.n	801a768 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a6bc:	42b8      	cmp	r0, r7
 801a6be:	da53      	bge.n	801a768 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a6c0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801a6c4:	4699      	mov	r9, r3
 801a6c6:	46a2      	mov	sl, r4
 801a6c8:	f1b9 0f00 	cmp.w	r9, #0
 801a6cc:	dd54      	ble.n	801a778 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a6ce:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a6d2:	140d      	asrs	r5, r1, #16
 801a6d4:	1410      	asrs	r0, r2, #16
 801a6d6:	fb07 5000 	mla	r0, r7, r0, r5
 801a6da:	9d02      	ldr	r5, [sp, #8]
 801a6dc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a6e0:	f8ba 5000 	ldrh.w	r5, [sl]
 801a6e4:	122f      	asrs	r7, r5, #8
 801a6e6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a6ea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a6ee:	fb17 f706 	smulbb	r7, r7, r6
 801a6f2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a6f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a6fa:	00ed      	lsls	r5, r5, #3
 801a6fc:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a700:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a704:	10c7      	asrs	r7, r0, #3
 801a706:	b2ed      	uxtb	r5, r5
 801a708:	00c0      	lsls	r0, r0, #3
 801a70a:	fb18 f806 	smulbb	r8, r8, r6
 801a70e:	fb15 f506 	smulbb	r5, r5, r6
 801a712:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a716:	b2c0      	uxtb	r0, r0
 801a718:	fa1f fc8c 	uxth.w	ip, ip
 801a71c:	fb07 870b 	mla	r7, r7, fp, r8
 801a720:	fb00 500b 	mla	r0, r0, fp, r5
 801a724:	b280      	uxth	r0, r0
 801a726:	b2bf      	uxth	r7, r7
 801a728:	f10c 0501 	add.w	r5, ip, #1
 801a72c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a730:	f107 0801 	add.w	r8, r7, #1
 801a734:	1c45      	adds	r5, r0, #1
 801a736:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a73a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a73e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a740:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a744:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a748:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a74c:	ea45 0c0c 	orr.w	ip, r5, ip
 801a750:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a754:	4401      	add	r1, r0
 801a756:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a758:	ea4c 0c08 	orr.w	ip, ip, r8
 801a75c:	f82a cb02 	strh.w	ip, [sl], #2
 801a760:	4402      	add	r2, r0
 801a762:	f109 39ff 	add.w	r9, r9, #4294967295
 801a766:	e7af      	b.n	801a6c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a768:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801a76c:	f04f 0800 	mov.w	r8, #0
 801a770:	eb03 0008 	add.w	r0, r3, r8
 801a774:	2800      	cmp	r0, #0
 801a776:	dc41      	bgt.n	801a7fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801a778:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a77c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a780:	9b00      	ldr	r3, [sp, #0]
 801a782:	2b00      	cmp	r3, #0
 801a784:	f340 8095 	ble.w	801a8b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a788:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a78c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a790:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a796:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a79a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a79e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a7a2:	eef0 6a62 	vmov.f32	s13, s5
 801a7a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a7aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a7ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a7b2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801a7b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a7ba:	eef0 6a43 	vmov.f32	s13, s6
 801a7be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a7c2:	ee12 2a90 	vmov	r2, s5
 801a7c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a7ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7ce:	ee13 2a10 	vmov	r2, s6
 801a7d2:	9311      	str	r3, [sp, #68]	; 0x44
 801a7d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7da:	9312      	str	r3, [sp, #72]	; 0x48
 801a7dc:	9b00      	ldr	r3, [sp, #0]
 801a7de:	9a03      	ldr	r2, [sp, #12]
 801a7e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a7e4:	3b01      	subs	r3, #1
 801a7e6:	9300      	str	r3, [sp, #0]
 801a7e8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801a7ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7ee:	eeb0 3a67 	vmov.f32	s6, s15
 801a7f2:	bf08      	it	eq
 801a7f4:	4613      	moveq	r3, r2
 801a7f6:	eef0 2a47 	vmov.f32	s5, s14
 801a7fa:	e72f      	b.n	801a65c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a7fc:	140f      	asrs	r7, r1, #16
 801a7fe:	d451      	bmi.n	801a8a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a800:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a804:	42bd      	cmp	r5, r7
 801a806:	dd4d      	ble.n	801a8a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a808:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a80c:	d44a      	bmi.n	801a8a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a80e:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a812:	4560      	cmp	r0, ip
 801a814:	dd46      	ble.n	801a8a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a816:	b22d      	sxth	r5, r5
 801a818:	fb0c 7505 	mla	r5, ip, r5, r7
 801a81c:	9802      	ldr	r0, [sp, #8]
 801a81e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801a822:	f06f 0501 	mvn.w	r5, #1
 801a826:	fb05 fb08 	mul.w	fp, r5, r8
 801a82a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a82e:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a832:	122f      	asrs	r7, r5, #8
 801a834:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a838:	fb17 f706 	smulbb	r7, r7, r6
 801a83c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a840:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a844:	00ed      	lsls	r5, r5, #3
 801a846:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a84a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a84e:	10c7      	asrs	r7, r0, #3
 801a850:	b2ed      	uxtb	r5, r5
 801a852:	00c0      	lsls	r0, r0, #3
 801a854:	fb19 f906 	smulbb	r9, r9, r6
 801a858:	fb15 f506 	smulbb	r5, r5, r6
 801a85c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a860:	b2c0      	uxtb	r0, r0
 801a862:	fa1f fc8c 	uxth.w	ip, ip
 801a866:	fb07 970a 	mla	r7, r7, sl, r9
 801a86a:	fb00 500a 	mla	r0, r0, sl, r5
 801a86e:	b2bf      	uxth	r7, r7
 801a870:	b280      	uxth	r0, r0
 801a872:	f10c 0501 	add.w	r5, ip, #1
 801a876:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a87a:	f107 0901 	add.w	r9, r7, #1
 801a87e:	1c45      	adds	r5, r0, #1
 801a880:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a884:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a888:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a88c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a890:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a894:	ea45 0c0c 	orr.w	ip, r5, ip
 801a898:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a89c:	ea4c 0c09 	orr.w	ip, ip, r9
 801a8a0:	f824 c00b 	strh.w	ip, [r4, fp]
 801a8a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a8a6:	4401      	add	r1, r0
 801a8a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a8aa:	f108 38ff 	add.w	r8, r8, #4294967295
 801a8ae:	4402      	add	r2, r0
 801a8b0:	e75e      	b.n	801a770 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a8b2:	b005      	add	sp, #20
 801a8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a8b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8bc:	b085      	sub	sp, #20
 801a8be:	4693      	mov	fp, r2
 801a8c0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a8c2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a8c4:	6870      	ldr	r0, [r6, #4]
 801a8c6:	9101      	str	r1, [sp, #4]
 801a8c8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a8cc:	fb00 2404 	mla	r4, r0, r4, r2
 801a8d0:	6832      	ldr	r2, [r6, #0]
 801a8d2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801a8d6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a8da:	682a      	ldr	r2, [r5, #0]
 801a8dc:	9202      	str	r2, [sp, #8]
 801a8de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a8e2:	9a01      	ldr	r2, [sp, #4]
 801a8e4:	2a00      	cmp	r2, #0
 801a8e6:	dc03      	bgt.n	801a8f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a8e8:	f1bb 0f00 	cmp.w	fp, #0
 801a8ec:	f340 809a 	ble.w	801aa24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a8f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a8f2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a8f6:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a8fa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a8fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a900:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a904:	2b00      	cmp	r3, #0
 801a906:	dd0c      	ble.n	801a922 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a908:	1406      	asrs	r6, r0, #16
 801a90a:	d405      	bmi.n	801a918 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a90c:	454e      	cmp	r6, r9
 801a90e:	da03      	bge.n	801a918 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a910:	1416      	asrs	r6, r2, #16
 801a912:	d401      	bmi.n	801a918 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a914:	4546      	cmp	r6, r8
 801a916:	db05      	blt.n	801a924 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a918:	4470      	add	r0, lr
 801a91a:	4462      	add	r2, ip
 801a91c:	3b01      	subs	r3, #1
 801a91e:	3402      	adds	r4, #2
 801a920:	e7f0      	b.n	801a904 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a922:	d00f      	beq.n	801a944 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a924:	1e5e      	subs	r6, r3, #1
 801a926:	fb0e 0706 	mla	r7, lr, r6, r0
 801a92a:	143f      	asrs	r7, r7, #16
 801a92c:	d541      	bpl.n	801a9b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801a92e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801a932:	4698      	mov	r8, r3
 801a934:	9603      	str	r6, [sp, #12]
 801a936:	f1b8 0f00 	cmp.w	r8, #0
 801a93a:	dc56      	bgt.n	801a9ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801a93c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a940:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a944:	9b01      	ldr	r3, [sp, #4]
 801a946:	2b00      	cmp	r3, #0
 801a948:	dd6c      	ble.n	801aa24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a94a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a94e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a952:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a958:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a95c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a960:	eeb0 6a62 	vmov.f32	s12, s5
 801a964:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a968:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a96c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a970:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a974:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a978:	eeb0 6a43 	vmov.f32	s12, s6
 801a97c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a980:	ee12 2a90 	vmov	r2, s5
 801a984:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a988:	fb92 fef3 	sdiv	lr, r2, r3
 801a98c:	ee13 2a10 	vmov	r2, s6
 801a990:	fb92 fcf3 	sdiv	ip, r2, r3
 801a994:	9b01      	ldr	r3, [sp, #4]
 801a996:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a99a:	3b01      	subs	r3, #1
 801a99c:	9301      	str	r3, [sp, #4]
 801a99e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a9a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9a4:	eeb0 3a67 	vmov.f32	s6, s15
 801a9a8:	bf08      	it	eq
 801a9aa:	465b      	moveq	r3, fp
 801a9ac:	eef0 2a47 	vmov.f32	s5, s14
 801a9b0:	e797      	b.n	801a8e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801a9b2:	454f      	cmp	r7, r9
 801a9b4:	dabb      	bge.n	801a92e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a9b6:	fb0c 2606 	mla	r6, ip, r6, r2
 801a9ba:	1436      	asrs	r6, r6, #16
 801a9bc:	d4b7      	bmi.n	801a92e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a9be:	4546      	cmp	r6, r8
 801a9c0:	dab5      	bge.n	801a92e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a9c2:	461e      	mov	r6, r3
 801a9c4:	46a0      	mov	r8, r4
 801a9c6:	2e00      	cmp	r6, #0
 801a9c8:	ddb8      	ble.n	801a93c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a9ca:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a9ce:	9902      	ldr	r1, [sp, #8]
 801a9d0:	1417      	asrs	r7, r2, #16
 801a9d2:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a9d6:	fb0a 9707 	mla	r7, sl, r7, r9
 801a9da:	4470      	add	r0, lr
 801a9dc:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a9e0:	f828 7b02 	strh.w	r7, [r8], #2
 801a9e4:	4462      	add	r2, ip
 801a9e6:	3e01      	subs	r6, #1
 801a9e8:	e7ed      	b.n	801a9c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801a9ea:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a9ee:	d414      	bmi.n	801aa1a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a9f0:	68ae      	ldr	r6, [r5, #8]
 801a9f2:	454e      	cmp	r6, r9
 801a9f4:	dd11      	ble.n	801aa1a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a9f6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a9fa:	d40e      	bmi.n	801aa1a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a9fc:	68ef      	ldr	r7, [r5, #12]
 801a9fe:	4557      	cmp	r7, sl
 801aa00:	dd0b      	ble.n	801aa1a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801aa02:	b236      	sxth	r6, r6
 801aa04:	fb0a 9606 	mla	r6, sl, r6, r9
 801aa08:	9f02      	ldr	r7, [sp, #8]
 801aa0a:	f06f 0101 	mvn.w	r1, #1
 801aa0e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801aa12:	fb01 f608 	mul.w	r6, r1, r8
 801aa16:	9903      	ldr	r1, [sp, #12]
 801aa18:	538f      	strh	r7, [r1, r6]
 801aa1a:	4470      	add	r0, lr
 801aa1c:	4462      	add	r2, ip
 801aa1e:	f108 38ff 	add.w	r8, r8, #4294967295
 801aa22:	e788      	b.n	801a936 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801aa24:	b005      	add	sp, #20
 801aa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa2a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aa2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa2e:	b087      	sub	sp, #28
 801aa30:	468b      	mov	fp, r1
 801aa32:	9815      	ldr	r0, [sp, #84]	; 0x54
 801aa34:	9203      	str	r2, [sp, #12]
 801aa36:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801aa3a:	9204      	str	r2, [sp, #16]
 801aa3c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801aa40:	6841      	ldr	r1, [r0, #4]
 801aa42:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801aa46:	fb01 2505 	mla	r5, r1, r5, r2
 801aa4a:	6802      	ldr	r2, [r0, #0]
 801aa4c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801aa50:	f8d9 2000 	ldr.w	r2, [r9]
 801aa54:	9201      	str	r2, [sp, #4]
 801aa56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aa5a:	f1bb 0f00 	cmp.w	fp, #0
 801aa5e:	dc03      	bgt.n	801aa68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801aa60:	9a03      	ldr	r2, [sp, #12]
 801aa62:	2a00      	cmp	r2, #0
 801aa64:	f340 8159 	ble.w	801ad1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801aa68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aa6a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801aa6e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801aa72:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801aa76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aa78:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	dd0e      	ble.n	801aa9e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801aa80:	1402      	asrs	r2, r0, #16
 801aa82:	d405      	bmi.n	801aa90 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801aa84:	42ba      	cmp	r2, r7
 801aa86:	da03      	bge.n	801aa90 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801aa88:	140a      	asrs	r2, r1, #16
 801aa8a:	d401      	bmi.n	801aa90 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801aa8c:	42b2      	cmp	r2, r6
 801aa8e:	db07      	blt.n	801aaa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801aa90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aa92:	4410      	add	r0, r2
 801aa94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aa96:	3b01      	subs	r3, #1
 801aa98:	4411      	add	r1, r2
 801aa9a:	3502      	adds	r5, #2
 801aa9c:	e7ee      	b.n	801aa7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801aa9e:	d017      	beq.n	801aad0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801aaa0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aaa2:	1e5a      	subs	r2, r3, #1
 801aaa4:	fb04 0402 	mla	r4, r4, r2, r0
 801aaa8:	1424      	asrs	r4, r4, #16
 801aaaa:	d409      	bmi.n	801aac0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801aaac:	42bc      	cmp	r4, r7
 801aaae:	da07      	bge.n	801aac0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801aab0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aab2:	fb04 1202 	mla	r2, r4, r2, r1
 801aab6:	1412      	asrs	r2, r2, #16
 801aab8:	d402      	bmi.n	801aac0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801aaba:	42b2      	cmp	r2, r6
 801aabc:	f2c0 80bf 	blt.w	801ac3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801aac0:	2700      	movs	r7, #0
 801aac2:	19da      	adds	r2, r3, r7
 801aac4:	2a00      	cmp	r2, #0
 801aac6:	dc3e      	bgt.n	801ab46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801aac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aacc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801aad0:	f1bb 0f00 	cmp.w	fp, #0
 801aad4:	f340 8121 	ble.w	801ad1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801aad8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aadc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aae0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aae6:	f1bb 0b01 	subs.w	fp, fp, #1
 801aaea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aaee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aaf2:	eeb0 6a62 	vmov.f32	s12, s5
 801aaf6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aafa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aafe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab02:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ab06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab0a:	eeb0 6a43 	vmov.f32	s12, s6
 801ab0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab12:	ee12 2a90 	vmov	r2, s5
 801ab16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab1e:	ee13 2a10 	vmov	r2, s6
 801ab22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab26:	9313      	str	r3, [sp, #76]	; 0x4c
 801ab28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab2e:	9a03      	ldr	r2, [sp, #12]
 801ab30:	9314      	str	r3, [sp, #80]	; 0x50
 801ab32:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ab36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab38:	eeb0 3a67 	vmov.f32	s6, s15
 801ab3c:	bf08      	it	eq
 801ab3e:	4613      	moveq	r3, r2
 801ab40:	eef0 2a47 	vmov.f32	s5, s14
 801ab44:	e789      	b.n	801aa5a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ab46:	1406      	asrs	r6, r0, #16
 801ab48:	d42d      	bmi.n	801aba6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ab4a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801ab4e:	42b4      	cmp	r4, r6
 801ab50:	dd29      	ble.n	801aba6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ab52:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801ab56:	d426      	bmi.n	801aba6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ab58:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ab5c:	4562      	cmp	r2, ip
 801ab5e:	dd22      	ble.n	801aba6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ab60:	b224      	sxth	r4, r4
 801ab62:	9a01      	ldr	r2, [sp, #4]
 801ab64:	fb0c 6404 	mla	r4, ip, r4, r6
 801ab68:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801ab6c:	0e22      	lsrs	r2, r4, #24
 801ab6e:	d01a      	beq.n	801aba6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ab70:	9e04      	ldr	r6, [sp, #16]
 801ab72:	4372      	muls	r2, r6
 801ab74:	1c56      	adds	r6, r2, #1
 801ab76:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ab7a:	1212      	asrs	r2, r2, #8
 801ab7c:	0a26      	lsrs	r6, r4, #8
 801ab7e:	2aff      	cmp	r2, #255	; 0xff
 801ab80:	9605      	str	r6, [sp, #20]
 801ab82:	d116      	bne.n	801abb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ab84:	f06f 0201 	mvn.w	r2, #1
 801ab88:	fb02 fc07 	mul.w	ip, r2, r7
 801ab8c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ab90:	0962      	lsrs	r2, r4, #5
 801ab92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ab96:	f026 0607 	bic.w	r6, r6, #7
 801ab9a:	4316      	orrs	r6, r2
 801ab9c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801aba0:	4326      	orrs	r6, r4
 801aba2:	f825 600c 	strh.w	r6, [r5, ip]
 801aba6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aba8:	4410      	add	r0, r2
 801abaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801abac:	3f01      	subs	r7, #1
 801abae:	4411      	add	r1, r2
 801abb0:	e787      	b.n	801aac2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801abb2:	f06f 0601 	mvn.w	r6, #1
 801abb6:	437e      	muls	r6, r7
 801abb8:	fa1f fa82 	uxth.w	sl, r2
 801abbc:	f835 8006 	ldrh.w	r8, [r5, r6]
 801abc0:	9602      	str	r6, [sp, #8]
 801abc2:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801abc6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801abca:	43d2      	mvns	r2, r2
 801abcc:	b2d2      	uxtb	r2, r2
 801abce:	fb1c fc0a 	smulbb	ip, ip, sl
 801abd2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801abd6:	fb0e ce02 	mla	lr, lr, r2, ip
 801abda:	b2e4      	uxtb	r4, r4
 801abdc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801abe0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801abe4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801abe8:	fa5f f888 	uxtb.w	r8, r8
 801abec:	fb14 f40a 	smulbb	r4, r4, sl
 801abf0:	fb08 4402 	mla	r4, r8, r2, r4
 801abf4:	fa1f fe8e 	uxth.w	lr, lr
 801abf8:	fb16 f60a 	smulbb	r6, r6, sl
 801abfc:	b2a4      	uxth	r4, r4
 801abfe:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ac02:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ac06:	f10e 0201 	add.w	r2, lr, #1
 801ac0a:	1c66      	adds	r6, r4, #1
 801ac0c:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ac10:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ac14:	fa1f fc8c 	uxth.w	ip, ip
 801ac18:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ac1c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ac20:	ea46 0e0e 	orr.w	lr, r6, lr
 801ac24:	f10c 0601 	add.w	r6, ip, #1
 801ac28:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ac2c:	0976      	lsrs	r6, r6, #5
 801ac2e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ac32:	9a02      	ldr	r2, [sp, #8]
 801ac34:	ea4e 0e06 	orr.w	lr, lr, r6
 801ac38:	f825 e002 	strh.w	lr, [r5, r2]
 801ac3c:	e7b3      	b.n	801aba6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ac3e:	f04f 0800 	mov.w	r8, #0
 801ac42:	eba3 0208 	sub.w	r2, r3, r8
 801ac46:	2a00      	cmp	r2, #0
 801ac48:	f77f af3e 	ble.w	801aac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ac4c:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801ac50:	1404      	asrs	r4, r0, #16
 801ac52:	140a      	asrs	r2, r1, #16
 801ac54:	fb06 4202 	mla	r2, r6, r2, r4
 801ac58:	9c01      	ldr	r4, [sp, #4]
 801ac5a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801ac5e:	0e22      	lsrs	r2, r4, #24
 801ac60:	d016      	beq.n	801ac90 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ac62:	9e04      	ldr	r6, [sp, #16]
 801ac64:	4372      	muls	r2, r6
 801ac66:	1c56      	adds	r6, r2, #1
 801ac68:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ac6c:	1212      	asrs	r2, r2, #8
 801ac6e:	2aff      	cmp	r2, #255	; 0xff
 801ac70:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801ac74:	d113      	bne.n	801ac9e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801ac76:	0962      	lsrs	r2, r4, #5
 801ac78:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ac7c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ac80:	f026 0607 	bic.w	r6, r6, #7
 801ac84:	4316      	orrs	r6, r2
 801ac86:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ac8a:	4326      	orrs	r6, r4
 801ac8c:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801ac90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ac92:	4410      	add	r0, r2
 801ac94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac96:	f108 0801 	add.w	r8, r8, #1
 801ac9a:	4411      	add	r1, r2
 801ac9c:	e7d1      	b.n	801ac42 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801ac9e:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801aca2:	fa1f fa82 	uxth.w	sl, r2
 801aca6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801acaa:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801acae:	43d2      	mvns	r2, r2
 801acb0:	b2d2      	uxtb	r2, r2
 801acb2:	fb17 f70a 	smulbb	r7, r7, sl
 801acb6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801acba:	fb0c 7c02 	mla	ip, ip, r2, r7
 801acbe:	b2e4      	uxtb	r4, r4
 801acc0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801acc4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801acc8:	fa5f fe8e 	uxtb.w	lr, lr
 801accc:	fb14 f40a 	smulbb	r4, r4, sl
 801acd0:	fb0e 4402 	mla	r4, lr, r2, r4
 801acd4:	b2f6      	uxtb	r6, r6
 801acd6:	fa1f fc8c 	uxth.w	ip, ip
 801acda:	fb16 f60a 	smulbb	r6, r6, sl
 801acde:	b2a4      	uxth	r4, r4
 801ace0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ace4:	fb07 6702 	mla	r7, r7, r2, r6
 801ace8:	f10c 0201 	add.w	r2, ip, #1
 801acec:	1c66      	adds	r6, r4, #1
 801acee:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801acf2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801acf6:	b2bf      	uxth	r7, r7
 801acf8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801acfc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ad00:	ea46 0c0c 	orr.w	ip, r6, ip
 801ad04:	1c7e      	adds	r6, r7, #1
 801ad06:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ad0a:	0976      	lsrs	r6, r6, #5
 801ad0c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ad10:	ea4c 0c06 	orr.w	ip, ip, r6
 801ad14:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801ad18:	e7ba      	b.n	801ac90 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ad1a:	b007      	add	sp, #28
 801ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad24:	b085      	sub	sp, #20
 801ad26:	468b      	mov	fp, r1
 801ad28:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ad2a:	9203      	str	r2, [sp, #12]
 801ad2c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ad30:	6841      	ldr	r1, [r0, #4]
 801ad32:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801ad36:	fb01 2404 	mla	r4, r1, r4, r2
 801ad3a:	6802      	ldr	r2, [r0, #0]
 801ad3c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ad40:	f8d8 2000 	ldr.w	r2, [r8]
 801ad44:	9201      	str	r2, [sp, #4]
 801ad46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ad4a:	f1bb 0f00 	cmp.w	fp, #0
 801ad4e:	dc03      	bgt.n	801ad58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ad50:	9a03      	ldr	r2, [sp, #12]
 801ad52:	2a00      	cmp	r2, #0
 801ad54:	f340 814f 	ble.w	801aff6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ad58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad5a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ad5e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ad62:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ad66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad68:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	dd0e      	ble.n	801ad8e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ad70:	1408      	asrs	r0, r1, #16
 801ad72:	d405      	bmi.n	801ad80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ad74:	42b8      	cmp	r0, r7
 801ad76:	da03      	bge.n	801ad80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ad78:	1410      	asrs	r0, r2, #16
 801ad7a:	d401      	bmi.n	801ad80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ad7c:	42b0      	cmp	r0, r6
 801ad7e:	db07      	blt.n	801ad90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ad80:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ad82:	4401      	add	r1, r0
 801ad84:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ad86:	3b01      	subs	r3, #1
 801ad88:	4402      	add	r2, r0
 801ad8a:	3402      	adds	r4, #2
 801ad8c:	e7ee      	b.n	801ad6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ad8e:	d017      	beq.n	801adc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ad90:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ad92:	1e58      	subs	r0, r3, #1
 801ad94:	fb05 1500 	mla	r5, r5, r0, r1
 801ad98:	142d      	asrs	r5, r5, #16
 801ad9a:	d409      	bmi.n	801adb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ad9c:	42bd      	cmp	r5, r7
 801ad9e:	da07      	bge.n	801adb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ada0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ada2:	fb05 2000 	mla	r0, r5, r0, r2
 801ada6:	1400      	asrs	r0, r0, #16
 801ada8:	d402      	bmi.n	801adb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801adaa:	42b0      	cmp	r0, r6
 801adac:	f2c0 80ba 	blt.w	801af24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801adb0:	2600      	movs	r6, #0
 801adb2:	1998      	adds	r0, r3, r6
 801adb4:	2800      	cmp	r0, #0
 801adb6:	dc3e      	bgt.n	801ae36 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801adb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801adbc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801adc0:	f1bb 0f00 	cmp.w	fp, #0
 801adc4:	f340 8117 	ble.w	801aff6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801adc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801adcc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801add0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801add4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801add6:	f1bb 0b01 	subs.w	fp, fp, #1
 801adda:	ee31 1a05 	vadd.f32	s2, s2, s10
 801adde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ade2:	eeb0 6a62 	vmov.f32	s12, s5
 801ade6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801adea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801adee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801adf2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801adf6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801adfa:	eeb0 6a43 	vmov.f32	s12, s6
 801adfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ae02:	ee12 2a90 	vmov	r2, s5
 801ae06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ae0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae0e:	ee13 2a10 	vmov	r2, s6
 801ae12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae16:	9311      	str	r3, [sp, #68]	; 0x44
 801ae18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae1e:	9a03      	ldr	r2, [sp, #12]
 801ae20:	9312      	str	r3, [sp, #72]	; 0x48
 801ae22:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ae26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae28:	eeb0 3a67 	vmov.f32	s6, s15
 801ae2c:	bf08      	it	eq
 801ae2e:	4613      	moveq	r3, r2
 801ae30:	eef0 2a47 	vmov.f32	s5, s14
 801ae34:	e789      	b.n	801ad4a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ae36:	140f      	asrs	r7, r1, #16
 801ae38:	d424      	bmi.n	801ae84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae3a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ae3e:	42bd      	cmp	r5, r7
 801ae40:	dd20      	ble.n	801ae84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae42:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ae46:	d41d      	bmi.n	801ae84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae48:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801ae4c:	4560      	cmp	r0, ip
 801ae4e:	dd19      	ble.n	801ae84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae50:	b22d      	sxth	r5, r5
 801ae52:	fb0c 7505 	mla	r5, ip, r5, r7
 801ae56:	9801      	ldr	r0, [sp, #4]
 801ae58:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ae5c:	0e07      	lsrs	r7, r0, #24
 801ae5e:	2fff      	cmp	r7, #255	; 0xff
 801ae60:	d116      	bne.n	801ae90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ae62:	f06f 0501 	mvn.w	r5, #1
 801ae66:	fb05 f706 	mul.w	r7, r5, r6
 801ae6a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ae6e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ae72:	0945      	lsrs	r5, r0, #5
 801ae74:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ae78:	ea4c 0505 	orr.w	r5, ip, r5
 801ae7c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ae80:	4305      	orrs	r5, r0
 801ae82:	53e5      	strh	r5, [r4, r7]
 801ae84:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ae86:	4401      	add	r1, r0
 801ae88:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ae8a:	3e01      	subs	r6, #1
 801ae8c:	4402      	add	r2, r0
 801ae8e:	e790      	b.n	801adb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ae90:	b2fd      	uxtb	r5, r7
 801ae92:	2f00      	cmp	r7, #0
 801ae94:	d0f6      	beq.n	801ae84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae96:	f06f 0701 	mvn.w	r7, #1
 801ae9a:	4377      	muls	r7, r6
 801ae9c:	fa1f f985 	uxth.w	r9, r5
 801aea0:	f834 e007 	ldrh.w	lr, [r4, r7]
 801aea4:	9702      	str	r7, [sp, #8]
 801aea6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801aeaa:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801aeae:	43ed      	mvns	r5, r5
 801aeb0:	b2ed      	uxtb	r5, r5
 801aeb2:	fb17 f709 	smulbb	r7, r7, r9
 801aeb6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aeba:	fb0c 7c05 	mla	ip, ip, r5, r7
 801aebe:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801aec2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801aec6:	b2c0      	uxtb	r0, r0
 801aec8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aecc:	fa5f fe8e 	uxtb.w	lr, lr
 801aed0:	fb10 f009 	smulbb	r0, r0, r9
 801aed4:	fb0e 0005 	mla	r0, lr, r5, r0
 801aed8:	b280      	uxth	r0, r0
 801aeda:	fa1f fc8c 	uxth.w	ip, ip
 801aede:	fb1a fa09 	smulbb	sl, sl, r9
 801aee2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aee6:	fb07 a705 	mla	r7, r7, r5, sl
 801aeea:	f100 0a01 	add.w	sl, r0, #1
 801aeee:	f10c 0501 	add.w	r5, ip, #1
 801aef2:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801aef6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801aefa:	b2bf      	uxth	r7, r7
 801aefc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801af00:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801af04:	ea4a 0c0c 	orr.w	ip, sl, ip
 801af08:	f107 0a01 	add.w	sl, r7, #1
 801af0c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801af10:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801af14:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801af18:	9802      	ldr	r0, [sp, #8]
 801af1a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801af1e:	f824 c000 	strh.w	ip, [r4, r0]
 801af22:	e7af      	b.n	801ae84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af24:	f04f 0e00 	mov.w	lr, #0
 801af28:	eba3 000e 	sub.w	r0, r3, lr
 801af2c:	2800      	cmp	r0, #0
 801af2e:	f77f af43 	ble.w	801adb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801af32:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801af36:	140d      	asrs	r5, r1, #16
 801af38:	1410      	asrs	r0, r2, #16
 801af3a:	fb06 5000 	mla	r0, r6, r0, r5
 801af3e:	9d01      	ldr	r5, [sp, #4]
 801af40:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801af44:	0e2e      	lsrs	r6, r5, #24
 801af46:	2eff      	cmp	r6, #255	; 0xff
 801af48:	d112      	bne.n	801af70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801af4a:	482c      	ldr	r0, [pc, #176]	; (801affc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801af4c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801af50:	0968      	lsrs	r0, r5, #5
 801af52:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801af56:	4330      	orrs	r0, r6
 801af58:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801af5c:	4328      	orrs	r0, r5
 801af5e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801af62:	9811      	ldr	r0, [sp, #68]	; 0x44
 801af64:	4401      	add	r1, r0
 801af66:	9812      	ldr	r0, [sp, #72]	; 0x48
 801af68:	f10e 0e01 	add.w	lr, lr, #1
 801af6c:	4402      	add	r2, r0
 801af6e:	e7db      	b.n	801af28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801af70:	b2f0      	uxtb	r0, r6
 801af72:	2e00      	cmp	r6, #0
 801af74:	d0f5      	beq.n	801af62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801af76:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801af7a:	fa1f f980 	uxth.w	r9, r0
 801af7e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801af82:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801af86:	43c0      	mvns	r0, r0
 801af88:	b2c0      	uxtb	r0, r0
 801af8a:	fb16 f609 	smulbb	r6, r6, r9
 801af8e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801af92:	fb07 6700 	mla	r7, r7, r0, r6
 801af96:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801af9a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801af9e:	b2ed      	uxtb	r5, r5
 801afa0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801afa4:	fa5f fc8c 	uxtb.w	ip, ip
 801afa8:	fb15 f509 	smulbb	r5, r5, r9
 801afac:	fb0c 5500 	mla	r5, ip, r0, r5
 801afb0:	b2bf      	uxth	r7, r7
 801afb2:	fb1a fa09 	smulbb	sl, sl, r9
 801afb6:	b2ad      	uxth	r5, r5
 801afb8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801afbc:	fb06 a600 	mla	r6, r6, r0, sl
 801afc0:	1c78      	adds	r0, r7, #1
 801afc2:	f105 0a01 	add.w	sl, r5, #1
 801afc6:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801afca:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801afce:	b2b6      	uxth	r6, r6
 801afd0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801afd4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801afd8:	ea4a 0707 	orr.w	r7, sl, r7
 801afdc:	f106 0a01 	add.w	sl, r6, #1
 801afe0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801afe4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801afe8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801afec:	ea47 070a 	orr.w	r7, r7, sl
 801aff0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801aff4:	e7b5      	b.n	801af62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801aff6:	b005      	add	sp, #20
 801aff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801affc:	fffff800 	.word	0xfffff800

0801b000 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b004:	b087      	sub	sp, #28
 801b006:	468b      	mov	fp, r1
 801b008:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b00a:	9203      	str	r2, [sp, #12]
 801b00c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b010:	9204      	str	r2, [sp, #16]
 801b012:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b016:	6841      	ldr	r1, [r0, #4]
 801b018:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b01c:	fb01 2404 	mla	r4, r1, r4, r2
 801b020:	6802      	ldr	r2, [r0, #0]
 801b022:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b026:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b02a:	3201      	adds	r2, #1
 801b02c:	f022 0201 	bic.w	r2, r2, #1
 801b030:	9200      	str	r2, [sp, #0]
 801b032:	f8d9 2000 	ldr.w	r2, [r9]
 801b036:	9201      	str	r2, [sp, #4]
 801b038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b03c:	f1bb 0f00 	cmp.w	fp, #0
 801b040:	dc03      	bgt.n	801b04a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b042:	9a03      	ldr	r2, [sp, #12]
 801b044:	2a00      	cmp	r2, #0
 801b046:	f340 8169 	ble.w	801b31c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801b04a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b04c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b050:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b054:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b058:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b05a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b05e:	2b00      	cmp	r3, #0
 801b060:	dd0e      	ble.n	801b080 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b062:	1402      	asrs	r2, r0, #16
 801b064:	d405      	bmi.n	801b072 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b066:	42ba      	cmp	r2, r7
 801b068:	da03      	bge.n	801b072 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b06a:	140a      	asrs	r2, r1, #16
 801b06c:	d401      	bmi.n	801b072 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b06e:	42b2      	cmp	r2, r6
 801b070:	db07      	blt.n	801b082 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b072:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b074:	4410      	add	r0, r2
 801b076:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b078:	3b01      	subs	r3, #1
 801b07a:	4411      	add	r1, r2
 801b07c:	3402      	adds	r4, #2
 801b07e:	e7ee      	b.n	801b05e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b080:	d017      	beq.n	801b0b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b082:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b084:	1e5a      	subs	r2, r3, #1
 801b086:	fb05 0502 	mla	r5, r5, r2, r0
 801b08a:	142d      	asrs	r5, r5, #16
 801b08c:	d409      	bmi.n	801b0a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b08e:	42bd      	cmp	r5, r7
 801b090:	da07      	bge.n	801b0a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b092:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b094:	fb05 1202 	mla	r2, r5, r2, r1
 801b098:	1412      	asrs	r2, r2, #16
 801b09a:	d402      	bmi.n	801b0a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b09c:	42b2      	cmp	r2, r6
 801b09e:	f2c0 80c7 	blt.w	801b230 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b0a2:	2700      	movs	r7, #0
 801b0a4:	19da      	adds	r2, r3, r7
 801b0a6:	2a00      	cmp	r2, #0
 801b0a8:	dc3e      	bgt.n	801b128 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b0aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b0ae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b0b2:	f1bb 0f00 	cmp.w	fp, #0
 801b0b6:	f340 8131 	ble.w	801b31c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801b0ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b0c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0c8:	f1bb 0b01 	subs.w	fp, fp, #1
 801b0cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0d4:	eeb0 6a62 	vmov.f32	s12, s5
 801b0d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0e4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b0e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0ec:	eeb0 6a43 	vmov.f32	s12, s6
 801b0f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0f4:	ee12 2a90 	vmov	r2, s5
 801b0f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b100:	ee13 2a10 	vmov	r2, s6
 801b104:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b108:	9313      	str	r3, [sp, #76]	; 0x4c
 801b10a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b10c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b110:	9a03      	ldr	r2, [sp, #12]
 801b112:	9314      	str	r3, [sp, #80]	; 0x50
 801b114:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b118:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b11a:	eeb0 3a67 	vmov.f32	s6, s15
 801b11e:	bf08      	it	eq
 801b120:	4613      	moveq	r3, r2
 801b122:	eef0 2a47 	vmov.f32	s5, s14
 801b126:	e789      	b.n	801b03c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b128:	1405      	asrs	r5, r0, #16
 801b12a:	d435      	bmi.n	801b198 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b12c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b130:	42aa      	cmp	r2, r5
 801b132:	dd31      	ble.n	801b198 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b134:	140e      	asrs	r6, r1, #16
 801b136:	d42f      	bmi.n	801b198 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b138:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b13c:	42b2      	cmp	r2, r6
 801b13e:	dd2b      	ble.n	801b198 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b140:	9a00      	ldr	r2, [sp, #0]
 801b142:	fb06 5502 	mla	r5, r6, r2, r5
 801b146:	086a      	lsrs	r2, r5, #1
 801b148:	9e01      	ldr	r6, [sp, #4]
 801b14a:	5cb2      	ldrb	r2, [r6, r2]
 801b14c:	07ee      	lsls	r6, r5, #31
 801b14e:	bf54      	ite	pl
 801b150:	f002 020f 	andpl.w	r2, r2, #15
 801b154:	1112      	asrmi	r2, r2, #4
 801b156:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b15a:	b2d2      	uxtb	r2, r2
 801b15c:	b1e2      	cbz	r2, 801b198 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b15e:	9d04      	ldr	r5, [sp, #16]
 801b160:	436a      	muls	r2, r5
 801b162:	1c55      	adds	r5, r2, #1
 801b164:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801b168:	4d6e      	ldr	r5, [pc, #440]	; (801b324 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801b16a:	682d      	ldr	r5, [r5, #0]
 801b16c:	1212      	asrs	r2, r2, #8
 801b16e:	0a2e      	lsrs	r6, r5, #8
 801b170:	2aff      	cmp	r2, #255	; 0xff
 801b172:	9605      	str	r6, [sp, #20]
 801b174:	d116      	bne.n	801b1a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b176:	f06f 0201 	mvn.w	r2, #1
 801b17a:	fb02 fc07 	mul.w	ip, r2, r7
 801b17e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b182:	096a      	lsrs	r2, r5, #5
 801b184:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b188:	f026 0607 	bic.w	r6, r6, #7
 801b18c:	4316      	orrs	r6, r2
 801b18e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b192:	432e      	orrs	r6, r5
 801b194:	f824 600c 	strh.w	r6, [r4, ip]
 801b198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b19a:	4410      	add	r0, r2
 801b19c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b19e:	3f01      	subs	r7, #1
 801b1a0:	4411      	add	r1, r2
 801b1a2:	e77f      	b.n	801b0a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801b1a4:	f06f 0601 	mvn.w	r6, #1
 801b1a8:	437e      	muls	r6, r7
 801b1aa:	fa1f fa82 	uxth.w	sl, r2
 801b1ae:	f834 8006 	ldrh.w	r8, [r4, r6]
 801b1b2:	9602      	str	r6, [sp, #8]
 801b1b4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b1b8:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801b1bc:	43d2      	mvns	r2, r2
 801b1be:	b2d2      	uxtb	r2, r2
 801b1c0:	fb1c fc0a 	smulbb	ip, ip, sl
 801b1c4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b1c8:	fb0e ce02 	mla	lr, lr, r2, ip
 801b1cc:	b2ed      	uxtb	r5, r5
 801b1ce:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b1d2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b1d6:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b1da:	fa5f f888 	uxtb.w	r8, r8
 801b1de:	fb15 f50a 	smulbb	r5, r5, sl
 801b1e2:	fb08 5502 	mla	r5, r8, r2, r5
 801b1e6:	fa1f fe8e 	uxth.w	lr, lr
 801b1ea:	fb16 f60a 	smulbb	r6, r6, sl
 801b1ee:	b2ad      	uxth	r5, r5
 801b1f0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b1f4:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b1f8:	f10e 0201 	add.w	r2, lr, #1
 801b1fc:	1c6e      	adds	r6, r5, #1
 801b1fe:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b202:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801b206:	fa1f fc8c 	uxth.w	ip, ip
 801b20a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b20e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b212:	ea46 0e0e 	orr.w	lr, r6, lr
 801b216:	f10c 0601 	add.w	r6, ip, #1
 801b21a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b21e:	0976      	lsrs	r6, r6, #5
 801b220:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b224:	9a02      	ldr	r2, [sp, #8]
 801b226:	ea4e 0e06 	orr.w	lr, lr, r6
 801b22a:	f824 e002 	strh.w	lr, [r4, r2]
 801b22e:	e7b3      	b.n	801b198 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b230:	f04f 0800 	mov.w	r8, #0
 801b234:	eba3 0208 	sub.w	r2, r3, r8
 801b238:	2a00      	cmp	r2, #0
 801b23a:	f77f af36 	ble.w	801b0aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801b23e:	9e00      	ldr	r6, [sp, #0]
 801b240:	1402      	asrs	r2, r0, #16
 801b242:	140d      	asrs	r5, r1, #16
 801b244:	fb06 2505 	mla	r5, r6, r5, r2
 801b248:	086a      	lsrs	r2, r5, #1
 801b24a:	9e01      	ldr	r6, [sp, #4]
 801b24c:	5cb2      	ldrb	r2, [r6, r2]
 801b24e:	07ed      	lsls	r5, r5, #31
 801b250:	bf54      	ite	pl
 801b252:	f002 020f 	andpl.w	r2, r2, #15
 801b256:	1112      	asrmi	r2, r2, #4
 801b258:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b25c:	b2d2      	uxtb	r2, r2
 801b25e:	b1c2      	cbz	r2, 801b292 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b260:	9d04      	ldr	r5, [sp, #16]
 801b262:	436a      	muls	r2, r5
 801b264:	1c55      	adds	r5, r2, #1
 801b266:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801b26a:	4d2e      	ldr	r5, [pc, #184]	; (801b324 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801b26c:	1212      	asrs	r2, r2, #8
 801b26e:	682e      	ldr	r6, [r5, #0]
 801b270:	2aff      	cmp	r2, #255	; 0xff
 801b272:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801b276:	d113      	bne.n	801b2a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801b278:	0972      	lsrs	r2, r6, #5
 801b27a:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801b27e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b282:	f025 0507 	bic.w	r5, r5, #7
 801b286:	4315      	orrs	r5, r2
 801b288:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801b28c:	4335      	orrs	r5, r6
 801b28e:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801b292:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b294:	4410      	add	r0, r2
 801b296:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b298:	f108 0801 	add.w	r8, r8, #1
 801b29c:	4411      	add	r1, r2
 801b29e:	e7c9      	b.n	801b234 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801b2a0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801b2a4:	fa1f fa82 	uxth.w	sl, r2
 801b2a8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b2ac:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801b2b0:	43d2      	mvns	r2, r2
 801b2b2:	b2d2      	uxtb	r2, r2
 801b2b4:	fb17 f70a 	smulbb	r7, r7, sl
 801b2b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b2bc:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b2c0:	b2f6      	uxtb	r6, r6
 801b2c2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b2c6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b2ca:	fa5f fe8e 	uxtb.w	lr, lr
 801b2ce:	fb16 f60a 	smulbb	r6, r6, sl
 801b2d2:	fb0e 6602 	mla	r6, lr, r2, r6
 801b2d6:	b2ed      	uxtb	r5, r5
 801b2d8:	fa1f fc8c 	uxth.w	ip, ip
 801b2dc:	fb15 f50a 	smulbb	r5, r5, sl
 801b2e0:	b2b6      	uxth	r6, r6
 801b2e2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b2e6:	fb07 5702 	mla	r7, r7, r2, r5
 801b2ea:	f10c 0201 	add.w	r2, ip, #1
 801b2ee:	1c75      	adds	r5, r6, #1
 801b2f0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b2f4:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801b2f8:	b2bf      	uxth	r7, r7
 801b2fa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b2fe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b302:	ea45 0c0c 	orr.w	ip, r5, ip
 801b306:	1c7d      	adds	r5, r7, #1
 801b308:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801b30c:	096d      	lsrs	r5, r5, #5
 801b30e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b312:	ea4c 0c05 	orr.w	ip, ip, r5
 801b316:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801b31a:	e7ba      	b.n	801b292 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b31c:	b007      	add	sp, #28
 801b31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b322:	bf00      	nop
 801b324:	20025864 	.word	0x20025864

0801b328 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b32c:	b087      	sub	sp, #28
 801b32e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 801b63c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801b332:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b334:	9205      	str	r2, [sp, #20]
 801b336:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b33a:	9101      	str	r1, [sp, #4]
 801b33c:	6841      	ldr	r1, [r0, #4]
 801b33e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801b342:	fb01 2404 	mla	r4, r1, r4, r2
 801b346:	6802      	ldr	r2, [r0, #0]
 801b348:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b34c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b350:	3201      	adds	r2, #1
 801b352:	f022 0201 	bic.w	r2, r2, #1
 801b356:	9202      	str	r2, [sp, #8]
 801b358:	f8db 2000 	ldr.w	r2, [fp]
 801b35c:	9203      	str	r2, [sp, #12]
 801b35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b362:	9a01      	ldr	r2, [sp, #4]
 801b364:	2a00      	cmp	r2, #0
 801b366:	dc03      	bgt.n	801b370 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b368:	9a05      	ldr	r2, [sp, #20]
 801b36a:	2a00      	cmp	r2, #0
 801b36c:	f340 8162 	ble.w	801b634 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b370:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b372:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801b376:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801b37a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b37e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b380:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b384:	2b00      	cmp	r3, #0
 801b386:	dd0e      	ble.n	801b3a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b388:	1402      	asrs	r2, r0, #16
 801b38a:	d405      	bmi.n	801b398 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b38c:	42ba      	cmp	r2, r7
 801b38e:	da03      	bge.n	801b398 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b390:	140a      	asrs	r2, r1, #16
 801b392:	d401      	bmi.n	801b398 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b394:	42b2      	cmp	r2, r6
 801b396:	db07      	blt.n	801b3a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b398:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b39a:	4410      	add	r0, r2
 801b39c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b39e:	3b01      	subs	r3, #1
 801b3a0:	4411      	add	r1, r2
 801b3a2:	3402      	adds	r4, #2
 801b3a4:	e7ee      	b.n	801b384 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b3a6:	d017      	beq.n	801b3d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b3a8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b3aa:	1e5a      	subs	r2, r3, #1
 801b3ac:	fb05 0502 	mla	r5, r5, r2, r0
 801b3b0:	142d      	asrs	r5, r5, #16
 801b3b2:	d409      	bmi.n	801b3c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b3b4:	42bd      	cmp	r5, r7
 801b3b6:	da07      	bge.n	801b3c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b3b8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b3ba:	fb05 1202 	mla	r2, r5, r2, r1
 801b3be:	1412      	asrs	r2, r2, #16
 801b3c0:	d402      	bmi.n	801b3c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b3c2:	42b2      	cmp	r2, r6
 801b3c4:	f2c0 80c3 	blt.w	801b54e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801b3c8:	2500      	movs	r5, #0
 801b3ca:	195a      	adds	r2, r3, r5
 801b3cc:	2a00      	cmp	r2, #0
 801b3ce:	dc3f      	bgt.n	801b450 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b3d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3d4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b3d8:	9b01      	ldr	r3, [sp, #4]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	f340 812a 	ble.w	801b634 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b3e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b3ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b3ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b3f6:	eeb0 6a62 	vmov.f32	s12, s5
 801b3fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b3fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b402:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b406:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b40a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b40e:	eeb0 6a43 	vmov.f32	s12, s6
 801b412:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b416:	ee12 2a90 	vmov	r2, s5
 801b41a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b41e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b422:	ee13 2a10 	vmov	r2, s6
 801b426:	9313      	str	r3, [sp, #76]	; 0x4c
 801b428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b42a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b42e:	9314      	str	r3, [sp, #80]	; 0x50
 801b430:	9b01      	ldr	r3, [sp, #4]
 801b432:	9a05      	ldr	r2, [sp, #20]
 801b434:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b438:	3b01      	subs	r3, #1
 801b43a:	9301      	str	r3, [sp, #4]
 801b43c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b442:	eeb0 3a67 	vmov.f32	s6, s15
 801b446:	bf08      	it	eq
 801b448:	4613      	moveq	r3, r2
 801b44a:	eef0 2a47 	vmov.f32	s5, s14
 801b44e:	e788      	b.n	801b362 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b450:	1406      	asrs	r6, r0, #16
 801b452:	d42c      	bmi.n	801b4ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b454:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b458:	42b2      	cmp	r2, r6
 801b45a:	dd28      	ble.n	801b4ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b45c:	140f      	asrs	r7, r1, #16
 801b45e:	d426      	bmi.n	801b4ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b460:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b464:	42ba      	cmp	r2, r7
 801b466:	dd22      	ble.n	801b4ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b468:	9a02      	ldr	r2, [sp, #8]
 801b46a:	fb07 6602 	mla	r6, r7, r2, r6
 801b46e:	0872      	lsrs	r2, r6, #1
 801b470:	9f03      	ldr	r7, [sp, #12]
 801b472:	5cba      	ldrb	r2, [r7, r2]
 801b474:	07f6      	lsls	r6, r6, #31
 801b476:	bf54      	ite	pl
 801b478:	f002 020f 	andpl.w	r2, r2, #15
 801b47c:	1112      	asrmi	r2, r2, #4
 801b47e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b482:	b2d2      	uxtb	r2, r2
 801b484:	2aff      	cmp	r2, #255	; 0xff
 801b486:	d118      	bne.n	801b4ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b488:	f8d8 2000 	ldr.w	r2, [r8]
 801b48c:	f06f 0601 	mvn.w	r6, #1
 801b490:	fb06 f705 	mul.w	r7, r6, r5
 801b494:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801b498:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801b49c:	0956      	lsrs	r6, r2, #5
 801b49e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b4a2:	ea4c 0606 	orr.w	r6, ip, r6
 801b4a6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b4aa:	4316      	orrs	r6, r2
 801b4ac:	53e6      	strh	r6, [r4, r7]
 801b4ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b4b0:	4410      	add	r0, r2
 801b4b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b4b4:	3d01      	subs	r5, #1
 801b4b6:	4411      	add	r1, r2
 801b4b8:	e787      	b.n	801b3ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b4ba:	2a00      	cmp	r2, #0
 801b4bc:	d0f7      	beq.n	801b4ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b4be:	f06f 0601 	mvn.w	r6, #1
 801b4c2:	436e      	muls	r6, r5
 801b4c4:	f8d8 c000 	ldr.w	ip, [r8]
 801b4c8:	f834 e006 	ldrh.w	lr, [r4, r6]
 801b4cc:	9604      	str	r6, [sp, #16]
 801b4ce:	fa1f f982 	uxth.w	r9, r2
 801b4d2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b4d6:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801b4da:	43d2      	mvns	r2, r2
 801b4dc:	b2d2      	uxtb	r2, r2
 801b4de:	fb16 f609 	smulbb	r6, r6, r9
 801b4e2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b4e6:	fb07 6702 	mla	r7, r7, r2, r6
 801b4ea:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801b4ee:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b4f2:	fa5f fc8c 	uxtb.w	ip, ip
 801b4f6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b4fa:	fa5f fe8e 	uxtb.w	lr, lr
 801b4fe:	fb1c fc09 	smulbb	ip, ip, r9
 801b502:	fb0e cc02 	mla	ip, lr, r2, ip
 801b506:	b2bf      	uxth	r7, r7
 801b508:	fb1a fa09 	smulbb	sl, sl, r9
 801b50c:	fa1f fc8c 	uxth.w	ip, ip
 801b510:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b514:	fb06 a602 	mla	r6, r6, r2, sl
 801b518:	1c7a      	adds	r2, r7, #1
 801b51a:	f10c 0a01 	add.w	sl, ip, #1
 801b51e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b522:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801b526:	b2b6      	uxth	r6, r6
 801b528:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b52c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b530:	ea4a 0707 	orr.w	r7, sl, r7
 801b534:	f106 0a01 	add.w	sl, r6, #1
 801b538:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b53c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b540:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b544:	9a04      	ldr	r2, [sp, #16]
 801b546:	ea47 070a 	orr.w	r7, r7, sl
 801b54a:	52a7      	strh	r7, [r4, r2]
 801b54c:	e7af      	b.n	801b4ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b54e:	f04f 0e00 	mov.w	lr, #0
 801b552:	eba3 020e 	sub.w	r2, r3, lr
 801b556:	2a00      	cmp	r2, #0
 801b558:	f77f af3a 	ble.w	801b3d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b55c:	9e02      	ldr	r6, [sp, #8]
 801b55e:	1402      	asrs	r2, r0, #16
 801b560:	140d      	asrs	r5, r1, #16
 801b562:	fb06 2505 	mla	r5, r6, r5, r2
 801b566:	086a      	lsrs	r2, r5, #1
 801b568:	9e03      	ldr	r6, [sp, #12]
 801b56a:	5cb2      	ldrb	r2, [r6, r2]
 801b56c:	07ed      	lsls	r5, r5, #31
 801b56e:	bf54      	ite	pl
 801b570:	f002 020f 	andpl.w	r2, r2, #15
 801b574:	1112      	asrmi	r2, r2, #4
 801b576:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b57a:	b2d2      	uxtb	r2, r2
 801b57c:	2aff      	cmp	r2, #255	; 0xff
 801b57e:	d115      	bne.n	801b5ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b580:	f8d8 5000 	ldr.w	r5, [r8]
 801b584:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801b588:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801b58c:	096a      	lsrs	r2, r5, #5
 801b58e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b592:	4332      	orrs	r2, r6
 801b594:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b598:	432a      	orrs	r2, r5
 801b59a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801b59e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b5a0:	4410      	add	r0, r2
 801b5a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b5a4:	f10e 0e01 	add.w	lr, lr, #1
 801b5a8:	4411      	add	r1, r2
 801b5aa:	e7d2      	b.n	801b552 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b5ac:	2a00      	cmp	r2, #0
 801b5ae:	d0f6      	beq.n	801b59e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b5b0:	f8d8 7000 	ldr.w	r7, [r8]
 801b5b4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b5b8:	fa1f f982 	uxth.w	r9, r2
 801b5bc:	ea4f 262c 	mov.w	r6, ip, asr #8
 801b5c0:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801b5c4:	43d2      	mvns	r2, r2
 801b5c6:	b2d2      	uxtb	r2, r2
 801b5c8:	fb15 f509 	smulbb	r5, r5, r9
 801b5cc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b5d0:	fb06 5602 	mla	r6, r6, r2, r5
 801b5d4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801b5d8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b5dc:	b2ff      	uxtb	r7, r7
 801b5de:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b5e2:	fa5f fc8c 	uxtb.w	ip, ip
 801b5e6:	fb17 f709 	smulbb	r7, r7, r9
 801b5ea:	fb0c 7702 	mla	r7, ip, r2, r7
 801b5ee:	b2b6      	uxth	r6, r6
 801b5f0:	fb1a fa09 	smulbb	sl, sl, r9
 801b5f4:	b2bf      	uxth	r7, r7
 801b5f6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b5fa:	fb05 a502 	mla	r5, r5, r2, sl
 801b5fe:	1c72      	adds	r2, r6, #1
 801b600:	f107 0a01 	add.w	sl, r7, #1
 801b604:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801b608:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b60c:	b2ad      	uxth	r5, r5
 801b60e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b612:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801b616:	ea4a 0606 	orr.w	r6, sl, r6
 801b61a:	f105 0a01 	add.w	sl, r5, #1
 801b61e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b622:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b626:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b62a:	ea46 060a 	orr.w	r6, r6, sl
 801b62e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801b632:	e7b4      	b.n	801b59e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b634:	b007      	add	sp, #28
 801b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b63a:	bf00      	nop
 801b63c:	20025864 	.word	0x20025864

0801b640 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801b640:	4770      	bx	lr

0801b642 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801b642:	4770      	bx	lr

0801b644 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801b644:	4770      	bx	lr

0801b646 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b646:	4770      	bx	lr

0801b648 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b648:	4770      	bx	lr

0801b64a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b64a:	4770      	bx	lr

0801b64c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b64c:	4770      	bx	lr

0801b64e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b64e:	4770      	bx	lr

0801b650 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b650:	4770      	bx	lr

0801b652 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b652:	4770      	bx	lr

0801b654 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b654:	4770      	bx	lr

0801b656 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b656:	4770      	bx	lr

0801b658 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801b658:	4770      	bx	lr

0801b65a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b65a:	4770      	bx	lr

0801b65c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b65c:	4770      	bx	lr

0801b65e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b65e:	4770      	bx	lr

0801b660 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801b660:	4770      	bx	lr

0801b662 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b662:	4770      	bx	lr

0801b664 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b664:	4770      	bx	lr

0801b666 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b666:	4770      	bx	lr

0801b668 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b668:	4770      	bx	lr

0801b66a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b66a:	4770      	bx	lr

0801b66c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b66c:	4770      	bx	lr

0801b66e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b66e:	4770      	bx	lr

0801b670 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b670:	4770      	bx	lr

0801b672 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b672:	4770      	bx	lr

0801b674 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b674:	4770      	bx	lr

0801b676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b676:	4770      	bx	lr

0801b678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801b678:	4770      	bx	lr

0801b67a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b67a:	4770      	bx	lr

0801b67c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801b67c:	4770      	bx	lr

0801b67e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b67e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b682:	b088      	sub	sp, #32
 801b684:	ac08      	add	r4, sp, #32
 801b686:	4606      	mov	r6, r0
 801b688:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801b68c:	4620      	mov	r0, r4
 801b68e:	4688      	mov	r8, r1
 801b690:	4691      	mov	r9, r2
 801b692:	f7fd fc63 	bl	8018f5c <_ZNK8touchgfx6Bitmap7getDataEv>
 801b696:	6833      	ldr	r3, [r6, #0]
 801b698:	4605      	mov	r5, r0
 801b69a:	4620      	mov	r0, r4
 801b69c:	699f      	ldr	r7, [r3, #24]
 801b69e:	f7fd fb71 	bl	8018d84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b6a2:	4682      	mov	sl, r0
 801b6a4:	4620      	mov	r0, r4
 801b6a6:	f7fd fba1 	bl	8018dec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b6aa:	9500      	str	r5, [sp, #0]
 801b6ac:	e9cd a001 	strd	sl, r0, [sp, #4]
 801b6b0:	464b      	mov	r3, r9
 801b6b2:	a806      	add	r0, sp, #24
 801b6b4:	4642      	mov	r2, r8
 801b6b6:	4631      	mov	r1, r6
 801b6b8:	47b8      	blx	r7
 801b6ba:	4628      	mov	r0, r5
 801b6bc:	b008      	add	sp, #32
 801b6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b6c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b6c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b6c8:	2300      	movs	r3, #0
 801b6ca:	9300      	str	r3, [sp, #0]
 801b6cc:	4b3d      	ldr	r3, [pc, #244]	; (801b7c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801b6ce:	781b      	ldrb	r3, [r3, #0]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d137      	bne.n	801b744 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801b6d4:	4a3c      	ldr	r2, [pc, #240]	; (801b7c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b6d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b6da:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d132      	bne.n	801b748 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801b6e2:	4b3a      	ldr	r3, [pc, #232]	; (801b7cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b6e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b6e8:	6808      	ldr	r0, [r1, #0]
 801b6ea:	6849      	ldr	r1, [r1, #4]
 801b6ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b6f0:	ac02      	add	r4, sp, #8
 801b6f2:	ab02      	add	r3, sp, #8
 801b6f4:	c303      	stmia	r3!, {r0, r1}
 801b6f6:	4669      	mov	r1, sp
 801b6f8:	4620      	mov	r0, r4
 801b6fa:	f7fa f8df 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b6fe:	4668      	mov	r0, sp
 801b700:	f7fa f8b4 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b704:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b708:	f8bd 2000 	ldrh.w	r2, [sp]
 801b70c:	4d30      	ldr	r5, [pc, #192]	; (801b7d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801b70e:	4413      	add	r3, r2
 801b710:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b714:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b718:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b71c:	6828      	ldr	r0, [r5, #0]
 801b71e:	4413      	add	r3, r2
 801b720:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b724:	6803      	ldr	r3, [r0, #0]
 801b726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b728:	4798      	blx	r3
 801b72a:	f010 0f01 	tst.w	r0, #1
 801b72e:	462f      	mov	r7, r5
 801b730:	d00c      	beq.n	801b74c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801b732:	6828      	ldr	r0, [r5, #0]
 801b734:	6803      	ldr	r3, [r0, #0]
 801b736:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b73c:	4798      	blx	r3
 801b73e:	b004      	add	sp, #16
 801b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b744:	4a21      	ldr	r2, [pc, #132]	; (801b7cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b746:	e7c6      	b.n	801b6d6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b748:	4b1f      	ldr	r3, [pc, #124]	; (801b7c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b74a:	e7cb      	b.n	801b6e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b74c:	6838      	ldr	r0, [r7, #0]
 801b74e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801b752:	6803      	ldr	r3, [r0, #0]
 801b754:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b75a:	4798      	blx	r3
 801b75c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b760:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b764:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801b768:	fb16 3602 	smlabb	r6, r6, r2, r3
 801b76c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b770:	6838      	ldr	r0, [r7, #0]
 801b772:	6803      	ldr	r3, [r0, #0]
 801b774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b776:	4798      	blx	r3
 801b778:	4a13      	ldr	r2, [pc, #76]	; (801b7c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b77a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801b77e:	8813      	ldrh	r3, [r2, #0]
 801b780:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801b784:	fb03 1404 	mla	r4, r3, r4, r1
 801b788:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b78c:	435d      	muls	r5, r3
 801b78e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b792:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b796:	4691      	mov	r9, r2
 801b798:	6838      	ldr	r0, [r7, #0]
 801b79a:	42ac      	cmp	r4, r5
 801b79c:	6803      	ldr	r3, [r0, #0]
 801b79e:	d20e      	bcs.n	801b7be <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801b7a0:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801b7a4:	4632      	mov	r2, r6
 801b7a6:	4643      	mov	r3, r8
 801b7a8:	4621      	mov	r1, r4
 801b7aa:	47d0      	blx	sl
 801b7ac:	f8b9 3000 	ldrh.w	r3, [r9]
 801b7b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b7b4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b7b8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b7bc:	e7ec      	b.n	801b798 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7c0:	4798      	blx	r3
 801b7c2:	e7bc      	b.n	801b73e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801b7c4:	20025854 	.word	0x20025854
 801b7c8:	20025856 	.word	0x20025856
 801b7cc:	20025858 	.word	0x20025858
 801b7d0:	2002585c 	.word	0x2002585c

0801b7d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7d8:	b08b      	sub	sp, #44	; 0x2c
 801b7da:	460f      	mov	r7, r1
 801b7dc:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801b7e0:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801b7e4:	4616      	mov	r6, r2
 801b7e6:	f1bb 0f00 	cmp.w	fp, #0
 801b7ea:	d04a      	beq.n	801b882 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801b7ec:	6810      	ldr	r0, [r2, #0]
 801b7ee:	6851      	ldr	r1, [r2, #4]
 801b7f0:	ad06      	add	r5, sp, #24
 801b7f2:	c503      	stmia	r5!, {r0, r1}
 801b7f4:	6818      	ldr	r0, [r3, #0]
 801b7f6:	6859      	ldr	r1, [r3, #4]
 801b7f8:	ad08      	add	r5, sp, #32
 801b7fa:	c503      	stmia	r5!, {r0, r1}
 801b7fc:	a806      	add	r0, sp, #24
 801b7fe:	f7fa f835 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b802:	4631      	mov	r1, r6
 801b804:	a808      	add	r0, sp, #32
 801b806:	f7fa f859 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b80a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b80e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b812:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b816:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801b81a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801b81e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801b822:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801b826:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b82a:	4f5f      	ldr	r7, [pc, #380]	; (801b9a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b82c:	440a      	add	r2, r1
 801b82e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b832:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b836:	6838      	ldr	r0, [r7, #0]
 801b838:	4413      	add	r3, r2
 801b83a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b83e:	6803      	ldr	r3, [r0, #0]
 801b840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b842:	4798      	blx	r3
 801b844:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b848:	46b9      	mov	r9, r7
 801b84a:	d11d      	bne.n	801b888 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801b84c:	b9fc      	cbnz	r4, 801b88e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b84e:	f010 0f01 	tst.w	r0, #1
 801b852:	d01c      	beq.n	801b88e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b854:	f8d9 0000 	ldr.w	r0, [r9]
 801b858:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b85c:	6801      	ldr	r1, [r0, #0]
 801b85e:	f8cd b00c 	str.w	fp, [sp, #12]
 801b862:	2700      	movs	r7, #0
 801b864:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801b868:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801b86c:	9402      	str	r4, [sp, #8]
 801b86e:	b2ad      	uxth	r5, r5
 801b870:	fa1f f488 	uxth.w	r4, r8
 801b874:	9501      	str	r5, [sp, #4]
 801b876:	9400      	str	r4, [sp, #0]
 801b878:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801b87a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b87e:	4631      	mov	r1, r6
 801b880:	47a0      	blx	r4
 801b882:	b00b      	add	sp, #44	; 0x2c
 801b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b888:	f010 0f04 	tst.w	r0, #4
 801b88c:	e7e1      	b.n	801b852 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801b88e:	f8d9 0000 	ldr.w	r0, [r9]
 801b892:	6803      	ldr	r3, [r0, #0]
 801b894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b896:	4798      	blx	r3
 801b898:	4b44      	ldr	r3, [pc, #272]	; (801b9ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801b89a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801b89e:	881a      	ldrh	r2, [r3, #0]
 801b8a0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801b8a4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b8a8:	fb02 1404 	mla	r4, r2, r4, r1
 801b8ac:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b8b0:	469a      	mov	sl, r3
 801b8b2:	fb05 f502 	mul.w	r5, r5, r2
 801b8b6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801b8ba:	d059      	beq.n	801b970 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801b8bc:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801b8c0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b8c4:	fa1f f28b 	uxth.w	r2, fp
 801b8c8:	fa1f f989 	uxth.w	r9, r9
 801b8cc:	469e      	mov	lr, r3
 801b8ce:	42ac      	cmp	r4, r5
 801b8d0:	d264      	bcs.n	801b99c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b8d2:	eb04 0a07 	add.w	sl, r4, r7
 801b8d6:	4554      	cmp	r4, sl
 801b8d8:	d23d      	bcs.n	801b956 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801b8da:	8821      	ldrh	r1, [r4, #0]
 801b8dc:	f836 3b02 	ldrh.w	r3, [r6], #2
 801b8e0:	1208      	asrs	r0, r1, #8
 801b8e2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b8e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b8ea:	fb10 f009 	smulbb	r0, r0, r9
 801b8ee:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801b8f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b8f6:	00c9      	lsls	r1, r1, #3
 801b8f8:	fb0c 0c02 	mla	ip, ip, r2, r0
 801b8fc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801b900:	10d8      	asrs	r0, r3, #3
 801b902:	b2c9      	uxtb	r1, r1
 801b904:	00db      	lsls	r3, r3, #3
 801b906:	fa1f fc8c 	uxth.w	ip, ip
 801b90a:	fb1b fb09 	smulbb	fp, fp, r9
 801b90e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b912:	b2db      	uxtb	r3, r3
 801b914:	fb11 f109 	smulbb	r1, r1, r9
 801b918:	fb00 b002 	mla	r0, r0, r2, fp
 801b91c:	fb03 1302 	mla	r3, r3, r2, r1
 801b920:	f10c 0b01 	add.w	fp, ip, #1
 801b924:	b29b      	uxth	r3, r3
 801b926:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b92a:	b280      	uxth	r0, r0
 801b92c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801b930:	f103 0c01 	add.w	ip, r3, #1
 801b934:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b938:	1c43      	adds	r3, r0, #1
 801b93a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b93e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b942:	0940      	lsrs	r0, r0, #5
 801b944:	ea4c 0c0b 	orr.w	ip, ip, fp
 801b948:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b94c:	ea4c 0c00 	orr.w	ip, ip, r0
 801b950:	f824 cb02 	strh.w	ip, [r4], #2
 801b954:	e7bf      	b.n	801b8d6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801b956:	f8be 3000 	ldrh.w	r3, [lr]
 801b95a:	eba3 0308 	sub.w	r3, r3, r8
 801b95e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b962:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b966:	eba3 0308 	sub.w	r3, r3, r8
 801b96a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b96e:	e7ae      	b.n	801b8ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801b970:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b974:	f8d9 0000 	ldr.w	r0, [r9]
 801b978:	42ac      	cmp	r4, r5
 801b97a:	6803      	ldr	r3, [r0, #0]
 801b97c:	d20e      	bcs.n	801b99c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b97e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801b982:	4632      	mov	r2, r6
 801b984:	463b      	mov	r3, r7
 801b986:	4621      	mov	r1, r4
 801b988:	47c0      	blx	r8
 801b98a:	f8ba 3000 	ldrh.w	r3, [sl]
 801b98e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b992:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b996:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b99a:	e7eb      	b.n	801b974 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801b99c:	4b02      	ldr	r3, [pc, #8]	; (801b9a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b99e:	6818      	ldr	r0, [r3, #0]
 801b9a0:	6803      	ldr	r3, [r0, #0]
 801b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9a4:	4798      	blx	r3
 801b9a6:	e76c      	b.n	801b882 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801b9a8:	2002585c 	.word	0x2002585c
 801b9ac:	20025856 	.word	0x20025856

0801b9b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801b9b0:	b510      	push	{r4, lr}
 801b9b2:	2104      	movs	r1, #4
 801b9b4:	4604      	mov	r4, r0
 801b9b6:	f00a fe16 	bl	80265e6 <_ZdlPvj>
 801b9ba:	4620      	mov	r0, r4
 801b9bc:	bd10      	pop	{r4, pc}

0801b9be <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801b9be:	b510      	push	{r4, lr}
 801b9c0:	2104      	movs	r1, #4
 801b9c2:	4604      	mov	r4, r0
 801b9c4:	f00a fe0f 	bl	80265e6 <_ZdlPvj>
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	bd10      	pop	{r4, pc}

0801b9cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801b9cc:	b510      	push	{r4, lr}
 801b9ce:	f640 0144 	movw	r1, #2116	; 0x844
 801b9d2:	4604      	mov	r4, r0
 801b9d4:	f00a fe07 	bl	80265e6 <_ZdlPvj>
 801b9d8:	4620      	mov	r0, r4
 801b9da:	bd10      	pop	{r4, pc}

0801b9dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b9dc:	b510      	push	{r4, lr}
 801b9de:	2104      	movs	r1, #4
 801b9e0:	4604      	mov	r4, r0
 801b9e2:	f00a fe00 	bl	80265e6 <_ZdlPvj>
 801b9e6:	4620      	mov	r0, r4
 801b9e8:	bd10      	pop	{r4, pc}

0801b9ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801b9ea:	b510      	push	{r4, lr}
 801b9ec:	2104      	movs	r1, #4
 801b9ee:	4604      	mov	r4, r0
 801b9f0:	f00a fdf9 	bl	80265e6 <_ZdlPvj>
 801b9f4:	4620      	mov	r0, r4
 801b9f6:	bd10      	pop	{r4, pc}

0801b9f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b9f8:	b510      	push	{r4, lr}
 801b9fa:	2104      	movs	r1, #4
 801b9fc:	4604      	mov	r4, r0
 801b9fe:	f00a fdf2 	bl	80265e6 <_ZdlPvj>
 801ba02:	4620      	mov	r0, r4
 801ba04:	bd10      	pop	{r4, pc}

0801ba06 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ba06:	b510      	push	{r4, lr}
 801ba08:	2104      	movs	r1, #4
 801ba0a:	4604      	mov	r4, r0
 801ba0c:	f00a fdeb 	bl	80265e6 <_ZdlPvj>
 801ba10:	4620      	mov	r0, r4
 801ba12:	bd10      	pop	{r4, pc}

0801ba14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ba14:	b510      	push	{r4, lr}
 801ba16:	2104      	movs	r1, #4
 801ba18:	4604      	mov	r4, r0
 801ba1a:	f00a fde4 	bl	80265e6 <_ZdlPvj>
 801ba1e:	4620      	mov	r0, r4
 801ba20:	bd10      	pop	{r4, pc}

0801ba22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ba22:	b510      	push	{r4, lr}
 801ba24:	2104      	movs	r1, #4
 801ba26:	4604      	mov	r4, r0
 801ba28:	f00a fddd 	bl	80265e6 <_ZdlPvj>
 801ba2c:	4620      	mov	r0, r4
 801ba2e:	bd10      	pop	{r4, pc}

0801ba30 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ba30:	b510      	push	{r4, lr}
 801ba32:	2104      	movs	r1, #4
 801ba34:	4604      	mov	r4, r0
 801ba36:	f00a fdd6 	bl	80265e6 <_ZdlPvj>
 801ba3a:	4620      	mov	r0, r4
 801ba3c:	bd10      	pop	{r4, pc}

0801ba3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ba3e:	b510      	push	{r4, lr}
 801ba40:	2104      	movs	r1, #4
 801ba42:	4604      	mov	r4, r0
 801ba44:	f00a fdcf 	bl	80265e6 <_ZdlPvj>
 801ba48:	4620      	mov	r0, r4
 801ba4a:	bd10      	pop	{r4, pc}

0801ba4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ba4c:	b510      	push	{r4, lr}
 801ba4e:	2104      	movs	r1, #4
 801ba50:	4604      	mov	r4, r0
 801ba52:	f00a fdc8 	bl	80265e6 <_ZdlPvj>
 801ba56:	4620      	mov	r0, r4
 801ba58:	bd10      	pop	{r4, pc}

0801ba5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ba5a:	b510      	push	{r4, lr}
 801ba5c:	2104      	movs	r1, #4
 801ba5e:	4604      	mov	r4, r0
 801ba60:	f00a fdc1 	bl	80265e6 <_ZdlPvj>
 801ba64:	4620      	mov	r0, r4
 801ba66:	bd10      	pop	{r4, pc}

0801ba68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ba68:	b510      	push	{r4, lr}
 801ba6a:	2104      	movs	r1, #4
 801ba6c:	4604      	mov	r4, r0
 801ba6e:	f00a fdba 	bl	80265e6 <_ZdlPvj>
 801ba72:	4620      	mov	r0, r4
 801ba74:	bd10      	pop	{r4, pc}

0801ba76 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ba76:	b510      	push	{r4, lr}
 801ba78:	2104      	movs	r1, #4
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	f00a fdb3 	bl	80265e6 <_ZdlPvj>
 801ba80:	4620      	mov	r0, r4
 801ba82:	bd10      	pop	{r4, pc}

0801ba84 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ba84:	b510      	push	{r4, lr}
 801ba86:	2104      	movs	r1, #4
 801ba88:	4604      	mov	r4, r0
 801ba8a:	f00a fdac 	bl	80265e6 <_ZdlPvj>
 801ba8e:	4620      	mov	r0, r4
 801ba90:	bd10      	pop	{r4, pc}

0801ba92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801ba92:	b510      	push	{r4, lr}
 801ba94:	2104      	movs	r1, #4
 801ba96:	4604      	mov	r4, r0
 801ba98:	f00a fda5 	bl	80265e6 <_ZdlPvj>
 801ba9c:	4620      	mov	r0, r4
 801ba9e:	bd10      	pop	{r4, pc}

0801baa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801baa0:	b510      	push	{r4, lr}
 801baa2:	2104      	movs	r1, #4
 801baa4:	4604      	mov	r4, r0
 801baa6:	f00a fd9e 	bl	80265e6 <_ZdlPvj>
 801baaa:	4620      	mov	r0, r4
 801baac:	bd10      	pop	{r4, pc}

0801baae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801baae:	b510      	push	{r4, lr}
 801bab0:	2104      	movs	r1, #4
 801bab2:	4604      	mov	r4, r0
 801bab4:	f00a fd97 	bl	80265e6 <_ZdlPvj>
 801bab8:	4620      	mov	r0, r4
 801baba:	bd10      	pop	{r4, pc}

0801babc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801babc:	b510      	push	{r4, lr}
 801babe:	2104      	movs	r1, #4
 801bac0:	4604      	mov	r4, r0
 801bac2:	f00a fd90 	bl	80265e6 <_ZdlPvj>
 801bac6:	4620      	mov	r0, r4
 801bac8:	bd10      	pop	{r4, pc}

0801baca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801baca:	b510      	push	{r4, lr}
 801bacc:	2104      	movs	r1, #4
 801bace:	4604      	mov	r4, r0
 801bad0:	f00a fd89 	bl	80265e6 <_ZdlPvj>
 801bad4:	4620      	mov	r0, r4
 801bad6:	bd10      	pop	{r4, pc}

0801bad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bad8:	b510      	push	{r4, lr}
 801bada:	2104      	movs	r1, #4
 801badc:	4604      	mov	r4, r0
 801bade:	f00a fd82 	bl	80265e6 <_ZdlPvj>
 801bae2:	4620      	mov	r0, r4
 801bae4:	bd10      	pop	{r4, pc}

0801bae6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bae6:	b510      	push	{r4, lr}
 801bae8:	2104      	movs	r1, #4
 801baea:	4604      	mov	r4, r0
 801baec:	f00a fd7b 	bl	80265e6 <_ZdlPvj>
 801baf0:	4620      	mov	r0, r4
 801baf2:	bd10      	pop	{r4, pc}

0801baf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801baf4:	b510      	push	{r4, lr}
 801baf6:	2104      	movs	r1, #4
 801baf8:	4604      	mov	r4, r0
 801bafa:	f00a fd74 	bl	80265e6 <_ZdlPvj>
 801bafe:	4620      	mov	r0, r4
 801bb00:	bd10      	pop	{r4, pc}

0801bb02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bb02:	b510      	push	{r4, lr}
 801bb04:	2104      	movs	r1, #4
 801bb06:	4604      	mov	r4, r0
 801bb08:	f00a fd6d 	bl	80265e6 <_ZdlPvj>
 801bb0c:	4620      	mov	r0, r4
 801bb0e:	bd10      	pop	{r4, pc}

0801bb10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bb10:	b510      	push	{r4, lr}
 801bb12:	2104      	movs	r1, #4
 801bb14:	4604      	mov	r4, r0
 801bb16:	f00a fd66 	bl	80265e6 <_ZdlPvj>
 801bb1a:	4620      	mov	r0, r4
 801bb1c:	bd10      	pop	{r4, pc}

0801bb1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bb1e:	b510      	push	{r4, lr}
 801bb20:	2104      	movs	r1, #4
 801bb22:	4604      	mov	r4, r0
 801bb24:	f00a fd5f 	bl	80265e6 <_ZdlPvj>
 801bb28:	4620      	mov	r0, r4
 801bb2a:	bd10      	pop	{r4, pc}

0801bb2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801bb2c:	b510      	push	{r4, lr}
 801bb2e:	2104      	movs	r1, #4
 801bb30:	4604      	mov	r4, r0
 801bb32:	f00a fd58 	bl	80265e6 <_ZdlPvj>
 801bb36:	4620      	mov	r0, r4
 801bb38:	bd10      	pop	{r4, pc}

0801bb3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801bb3a:	b510      	push	{r4, lr}
 801bb3c:	2104      	movs	r1, #4
 801bb3e:	4604      	mov	r4, r0
 801bb40:	f00a fd51 	bl	80265e6 <_ZdlPvj>
 801bb44:	4620      	mov	r0, r4
 801bb46:	bd10      	pop	{r4, pc}

0801bb48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801bb48:	b510      	push	{r4, lr}
 801bb4a:	2104      	movs	r1, #4
 801bb4c:	4604      	mov	r4, r0
 801bb4e:	f00a fd4a 	bl	80265e6 <_ZdlPvj>
 801bb52:	4620      	mov	r0, r4
 801bb54:	bd10      	pop	{r4, pc}

0801bb56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801bb56:	b510      	push	{r4, lr}
 801bb58:	2104      	movs	r1, #4
 801bb5a:	4604      	mov	r4, r0
 801bb5c:	f00a fd43 	bl	80265e6 <_ZdlPvj>
 801bb60:	4620      	mov	r0, r4
 801bb62:	bd10      	pop	{r4, pc}

0801bb64 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb68:	b08f      	sub	sp, #60	; 0x3c
 801bb6a:	461c      	mov	r4, r3
 801bb6c:	9205      	str	r2, [sp, #20]
 801bb6e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bb72:	9100      	str	r1, [sp, #0]
 801bb74:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bb76:	9201      	str	r2, [sp, #4]
 801bb78:	2a00      	cmp	r2, #0
 801bb7a:	f000 8115 	beq.w	801bda8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x244>
 801bb7e:	6820      	ldr	r0, [r4, #0]
 801bb80:	6861      	ldr	r1, [r4, #4]
 801bb82:	aa0a      	add	r2, sp, #40	; 0x28
 801bb84:	c203      	stmia	r2!, {r0, r1}
 801bb86:	6818      	ldr	r0, [r3, #0]
 801bb88:	6859      	ldr	r1, [r3, #4]
 801bb8a:	aa0c      	add	r2, sp, #48	; 0x30
 801bb8c:	c203      	stmia	r2!, {r0, r1}
 801bb8e:	a80a      	add	r0, sp, #40	; 0x28
 801bb90:	f7f9 fe6c 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb94:	4621      	mov	r1, r4
 801bb96:	a80c      	add	r0, sp, #48	; 0x30
 801bb98:	f7f9 fe90 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bb9c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801bba0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801bba4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801bba8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801bbac:	bfde      	ittt	le
 801bbae:	b2b3      	uxthle	r3, r6
 801bbb0:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801bbb4:	fb92 f3f3 	sdivle	r3, r2, r3
 801bbb8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801bbbc:	bfc8      	it	gt
 801bbbe:	2301      	movgt	r3, #1
 801bbc0:	fb92 f1f3 	sdiv	r1, r2, r3
 801bbc4:	fa1f fc81 	uxth.w	ip, r1
 801bbc8:	fb0c 2413 	mls	r4, ip, r3, r2
 801bbcc:	fb14 f406 	smulbb	r4, r4, r6
 801bbd0:	441d      	add	r5, r3
 801bbd2:	4404      	add	r4, r0
 801bbd4:	4661      	mov	r1, ip
 801bbd6:	3d01      	subs	r5, #1
 801bbd8:	b2a4      	uxth	r4, r4
 801bbda:	fb95 f5f3 	sdiv	r5, r5, r3
 801bbde:	b131      	cbz	r1, 801bbee <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x8a>
 801bbe0:	9b05      	ldr	r3, [sp, #20]
 801bbe2:	9900      	ldr	r1, [sp, #0]
 801bbe4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bbe8:	ba1b      	rev	r3, r3
 801bbea:	4419      	add	r1, r3
 801bbec:	9100      	str	r1, [sp, #0]
 801bbee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801bbf2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801bbf6:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801bbfa:	4418      	add	r0, r3
 801bbfc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801bc00:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801bc04:	441a      	add	r2, r3
 801bc06:	4b6a      	ldr	r3, [pc, #424]	; (801bdb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801bc08:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801bc0c:	6818      	ldr	r0, [r3, #0]
 801bc0e:	6803      	ldr	r3, [r0, #0]
 801bc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc12:	4798      	blx	r3
 801bc14:	4967      	ldr	r1, [pc, #412]	; (801bdb4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801bc16:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801bc1a:	880b      	ldrh	r3, [r1, #0]
 801bc1c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801bc20:	9109      	str	r1, [sp, #36]	; 0x24
 801bc22:	fb03 c202 	mla	r2, r3, r2, ip
 801bc26:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bc2a:	4373      	muls	r3, r6
 801bc2c:	b2ad      	uxth	r5, r5
 801bc2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bc32:	00ad      	lsls	r5, r5, #2
 801bc34:	9306      	str	r3, [sp, #24]
 801bc36:	1d2b      	adds	r3, r5, #4
 801bc38:	9307      	str	r3, [sp, #28]
 801bc3a:	9b01      	ldr	r3, [sp, #4]
 801bc3c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801bc40:	9103      	str	r1, [sp, #12]
 801bc42:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 801bc46:	2c00      	cmp	r4, #0
 801bc48:	bf0c      	ite	eq
 801bc4a:	46c6      	moveq	lr, r8
 801bc4c:	f04f 0e00 	movne.w	lr, #0
 801bc50:	2300      	movs	r3, #0
 801bc52:	b292      	uxth	r2, r2
 801bc54:	fa1f fe8e 	uxth.w	lr, lr
 801bc58:	9302      	str	r3, [sp, #8]
 801bc5a:	9204      	str	r2, [sp, #16]
 801bc5c:	9a06      	ldr	r2, [sp, #24]
 801bc5e:	4282      	cmp	r2, r0
 801bc60:	f240 809d 	bls.w	801bd9e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23a>
 801bc64:	b963      	cbnz	r3, 801bc80 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 801bc66:	9b00      	ldr	r3, [sp, #0]
 801bc68:	781a      	ldrb	r2, [r3, #0]
 801bc6a:	0993      	lsrs	r3, r2, #6
 801bc6c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801bc70:	9202      	str	r2, [sp, #8]
 801bc72:	1e5a      	subs	r2, r3, #1
 801bc74:	2a02      	cmp	r2, #2
 801bc76:	d815      	bhi.n	801bca4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x140>
 801bc78:	9a00      	ldr	r2, [sp, #0]
 801bc7a:	3201      	adds	r2, #1
 801bc7c:	9200      	str	r2, [sp, #0]
 801bc7e:	b29b      	uxth	r3, r3
 801bc80:	b1b4      	cbz	r4, 801bcb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14c>
 801bc82:	429c      	cmp	r4, r3
 801bc84:	bf95      	itete	ls
 801bc86:	1b1c      	subls	r4, r3, r4
 801bc88:	1ae4      	subhi	r4, r4, r3
 801bc8a:	fa1f fa84 	uxthls.w	sl, r4
 801bc8e:	b2a4      	uxthhi	r4, r4
 801bc90:	bf87      	ittee	hi
 801bc92:	4671      	movhi	r1, lr
 801bc94:	f04f 0a00 	movhi.w	sl, #0
 801bc98:	fa1f f188 	uxthls.w	r1, r8
 801bc9c:	2400      	movls	r4, #0
 801bc9e:	4653      	mov	r3, sl
 801bca0:	468e      	mov	lr, r1
 801bca2:	e7db      	b.n	801bc5c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf8>
 801bca4:	9a00      	ldr	r2, [sp, #0]
 801bca6:	9b00      	ldr	r3, [sp, #0]
 801bca8:	3202      	adds	r2, #2
 801bcaa:	785b      	ldrb	r3, [r3, #1]
 801bcac:	9200      	str	r2, [sp, #0]
 801bcae:	e7e7      	b.n	801bc80 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 801bcb0:	2202      	movs	r2, #2
 801bcb2:	4615      	mov	r5, r2
 801bcb4:	9907      	ldr	r1, [sp, #28]
 801bcb6:	9a02      	ldr	r2, [sp, #8]
 801bcb8:	fb15 1202 	smlabb	r2, r5, r2, r1
 801bcbc:	9905      	ldr	r1, [sp, #20]
 801bcbe:	4573      	cmp	r3, lr
 801bcc0:	f831 c002 	ldrh.w	ip, [r1, r2]
 801bcc4:	9a01      	ldr	r2, [sp, #4]
 801bcc6:	bf2b      	itete	cs
 801bcc8:	eba3 0a0e 	subcs.w	sl, r3, lr
 801bccc:	ebae 0103 	subcc.w	r1, lr, r3
 801bcd0:	46f1      	movcs	r9, lr
 801bcd2:	4699      	movcc	r9, r3
 801bcd4:	bf27      	ittee	cs
 801bcd6:	fa1f fa8a 	uxthcs.w	sl, sl
 801bcda:	4621      	movcs	r1, r4
 801bcdc:	b289      	uxthcc	r1, r1
 801bcde:	46a2      	movcc	sl, r4
 801bce0:	2aff      	cmp	r2, #255	; 0xff
 801bce2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801bce6:	d105      	bne.n	801bcf4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801bce8:	4481      	add	r9, r0
 801bcea:	4581      	cmp	r9, r0
 801bcec:	d045      	beq.n	801bd7a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 801bcee:	f820 cb02 	strh.w	ip, [r0], #2
 801bcf2:	e7fa      	b.n	801bcea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 801bcf4:	9d03      	ldr	r5, [sp, #12]
 801bcf6:	ea4f 222c 	mov.w	r2, ip, asr #8
 801bcfa:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801bcfe:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801bd02:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bd06:	436a      	muls	r2, r5
 801bd08:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801bd0c:	fa5f fc8c 	uxtb.w	ip, ip
 801bd10:	9208      	str	r2, [sp, #32]
 801bd12:	fb0b fb05 	mul.w	fp, fp, r5
 801bd16:	fb0c fc05 	mul.w	ip, ip, r5
 801bd1a:	4481      	add	r9, r0
 801bd1c:	4581      	cmp	r9, r0
 801bd1e:	d02c      	beq.n	801bd7a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 801bd20:	8802      	ldrh	r2, [r0, #0]
 801bd22:	9d04      	ldr	r5, [sp, #16]
 801bd24:	9f04      	ldr	r7, [sp, #16]
 801bd26:	1216      	asrs	r6, r2, #8
 801bd28:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bd2c:	fb16 f605 	smulbb	r6, r6, r5
 801bd30:	9d08      	ldr	r5, [sp, #32]
 801bd32:	442e      	add	r6, r5
 801bd34:	10d5      	asrs	r5, r2, #3
 801bd36:	00d2      	lsls	r2, r2, #3
 801bd38:	b2d2      	uxtb	r2, r2
 801bd3a:	fb12 f207 	smulbb	r2, r2, r7
 801bd3e:	b2b6      	uxth	r6, r6
 801bd40:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bd44:	4462      	add	r2, ip
 801bd46:	fb15 f507 	smulbb	r5, r5, r7
 801bd4a:	b292      	uxth	r2, r2
 801bd4c:	1c77      	adds	r7, r6, #1
 801bd4e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801bd52:	1c57      	adds	r7, r2, #1
 801bd54:	445d      	add	r5, fp
 801bd56:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801bd5a:	b2ad      	uxth	r5, r5
 801bd5c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bd60:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801bd64:	4316      	orrs	r6, r2
 801bd66:	1c6a      	adds	r2, r5, #1
 801bd68:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801bd6c:	096d      	lsrs	r5, r5, #5
 801bd6e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bd72:	432e      	orrs	r6, r5
 801bd74:	f820 6b02 	strh.w	r6, [r0], #2
 801bd78:	e7d0      	b.n	801bd1c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1b8>
 801bd7a:	4573      	cmp	r3, lr
 801bd7c:	d38f      	bcc.n	801bc9e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 801bd7e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801bd82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd84:	fa1f f188 	uxth.w	r1, r8
 801bd88:	1a64      	subs	r4, r4, r1
 801bd8a:	881b      	ldrh	r3, [r3, #0]
 801bd8c:	b2a4      	uxth	r4, r4
 801bd8e:	2c00      	cmp	r4, #0
 801bd90:	eba3 0308 	sub.w	r3, r3, r8
 801bd94:	bf18      	it	ne
 801bd96:	2100      	movne	r1, #0
 801bd98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bd9c:	e77f      	b.n	801bc9e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 801bd9e:	4b04      	ldr	r3, [pc, #16]	; (801bdb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801bda0:	6818      	ldr	r0, [r3, #0]
 801bda2:	6803      	ldr	r3, [r0, #0]
 801bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bda6:	4798      	blx	r3
 801bda8:	b00f      	add	sp, #60	; 0x3c
 801bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdae:	bf00      	nop
 801bdb0:	2002585c 	.word	0x2002585c
 801bdb4:	20025856 	.word	0x20025856

0801bdb8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdbc:	b09f      	sub	sp, #124	; 0x7c
 801bdbe:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801bdc2:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801bdc6:	9209      	str	r2, [sp, #36]	; 0x24
 801bdc8:	461d      	mov	r5, r3
 801bdca:	4604      	mov	r4, r0
 801bdcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bdce:	2a00      	cmp	r2, #0
 801bdd0:	f000 81eb 	beq.w	801c1aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f2>
 801bdd4:	6828      	ldr	r0, [r5, #0]
 801bdd6:	6869      	ldr	r1, [r5, #4]
 801bdd8:	aa1a      	add	r2, sp, #104	; 0x68
 801bdda:	c203      	stmia	r2!, {r0, r1}
 801bddc:	6818      	ldr	r0, [r3, #0]
 801bdde:	6859      	ldr	r1, [r3, #4]
 801bde0:	aa1c      	add	r2, sp, #112	; 0x70
 801bde2:	c203      	stmia	r2!, {r0, r1}
 801bde4:	a81a      	add	r0, sp, #104	; 0x68
 801bde6:	f7f9 fd41 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bdea:	4629      	mov	r1, r5
 801bdec:	a81c      	add	r0, sp, #112	; 0x70
 801bdee:	f7f9 fd65 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bdf2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801bdf6:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 801bdfa:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 801bdfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801be02:	bfd7      	itett	le
 801be04:	b29a      	uxthle	r2, r3
 801be06:	2201      	movgt	r2, #1
 801be08:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801be0c:	fb91 f2f2 	sdivle	r2, r1, r2
 801be10:	9202      	str	r2, [sp, #8]
 801be12:	9802      	ldr	r0, [sp, #8]
 801be14:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801be18:	fb92 f0f0 	sdiv	r0, r2, r0
 801be1c:	b280      	uxth	r0, r0
 801be1e:	9010      	str	r0, [sp, #64]	; 0x40
 801be20:	9902      	ldr	r1, [sp, #8]
 801be22:	9802      	ldr	r0, [sp, #8]
 801be24:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801be26:	4488      	add	r8, r1
 801be28:	fb05 2510 	mls	r5, r5, r0, r2
 801be2c:	fb15 f503 	smulbb	r5, r5, r3
 801be30:	f108 38ff 	add.w	r8, r8, #4294967295
 801be34:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801be38:	fb98 f8f1 	sdiv	r8, r8, r1
 801be3c:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801be40:	440d      	add	r5, r1
 801be42:	4419      	add	r1, r3
 801be44:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801be48:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801be4c:	441a      	add	r2, r3
 801be4e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801be52:	9304      	str	r3, [sp, #16]
 801be54:	4b95      	ldr	r3, [pc, #596]	; (801c0ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801be56:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801be5a:	6818      	ldr	r0, [r3, #0]
 801be5c:	6803      	ldr	r3, [r0, #0]
 801be5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be60:	4798      	blx	r3
 801be62:	4b93      	ldr	r3, [pc, #588]	; (801c0b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801be64:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801be68:	881a      	ldrh	r2, [r3, #0]
 801be6a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801be6e:	9318      	str	r3, [sp, #96]	; 0x60
 801be70:	fb02 7101 	mla	r1, r2, r1, r7
 801be74:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801be78:	4356      	muls	r6, r2
 801be7a:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801be7e:	f108 0801 	add.w	r8, r8, #1
 801be82:	920a      	str	r2, [sp, #40]	; 0x28
 801be84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801be86:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801be8a:	930f      	str	r3, [sp, #60]	; 0x3c
 801be8c:	fa1f f888 	uxth.w	r8, r8
 801be90:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801be94:	f108 0204 	add.w	r2, r8, #4
 801be98:	9211      	str	r2, [sp, #68]	; 0x44
 801be9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be9c:	4b85      	ldr	r3, [pc, #532]	; (801c0b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801be9e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801bea2:	b2ad      	uxth	r5, r5
 801bea4:	9215      	str	r2, [sp, #84]	; 0x54
 801bea6:	2d00      	cmp	r5, #0
 801bea8:	9a04      	ldr	r2, [sp, #16]
 801beaa:	f04f 0100 	mov.w	r1, #0
 801beae:	bf18      	it	ne
 801beb0:	2200      	movne	r2, #0
 801beb2:	1b1b      	subs	r3, r3, r4
 801beb4:	b292      	uxth	r2, r2
 801beb6:	910d      	str	r1, [sp, #52]	; 0x34
 801beb8:	9319      	str	r3, [sp, #100]	; 0x64
 801beba:	9910      	ldr	r1, [sp, #64]	; 0x40
 801bebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bebe:	fa11 f383 	uxtah	r3, r1, r3
 801bec2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801bec4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bec8:	3304      	adds	r3, #4
 801beca:	9306      	str	r3, [sp, #24]
 801becc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bece:	4283      	cmp	r3, r0
 801bed0:	f240 8166 	bls.w	801c1a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e8>
 801bed4:	9902      	ldr	r1, [sp, #8]
 801bed6:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801beda:	fbb5 f3f3 	udiv	r3, r5, r3
 801bede:	1acb      	subs	r3, r1, r3
 801bee0:	b29b      	uxth	r3, r3
 801bee2:	9316      	str	r3, [sp, #88]	; 0x58
 801bee4:	9b06      	ldr	r3, [sp, #24]
 801bee6:	9e06      	ldr	r6, [sp, #24]
 801bee8:	7859      	ldrb	r1, [r3, #1]
 801beea:	789b      	ldrb	r3, [r3, #2]
 801beec:	7836      	ldrb	r6, [r6, #0]
 801beee:	9612      	str	r6, [sp, #72]	; 0x48
 801bef0:	021b      	lsls	r3, r3, #8
 801bef2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801bef6:	9906      	ldr	r1, [sp, #24]
 801bef8:	78c9      	ldrb	r1, [r1, #3]
 801befa:	430b      	orrs	r3, r1
 801befc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801befe:	3601      	adds	r6, #1
 801bf00:	4419      	add	r1, r3
 801bf02:	9605      	str	r6, [sp, #20]
 801bf04:	1c4e      	adds	r6, r1, #1
 801bf06:	9603      	str	r6, [sp, #12]
 801bf08:	7849      	ldrb	r1, [r1, #1]
 801bf0a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bf0c:	0209      	lsls	r1, r1, #8
 801bf0e:	5cf3      	ldrb	r3, [r6, r3]
 801bf10:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801bf14:	4319      	orrs	r1, r3
 801bf16:	b28b      	uxth	r3, r1
 801bf18:	930c      	str	r3, [sp, #48]	; 0x30
 801bf1a:	2300      	movs	r3, #0
 801bf1c:	f04f 0a01 	mov.w	sl, #1
 801bf20:	9307      	str	r3, [sp, #28]
 801bf22:	469c      	mov	ip, r3
 801bf24:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801bf28:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801bf2c:	46d3      	mov	fp, sl
 801bf2e:	4657      	mov	r7, sl
 801bf30:	930e      	str	r3, [sp, #56]	; 0x38
 801bf32:	2d00      	cmp	r5, #0
 801bf34:	d07e      	beq.n	801c034 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801bf36:	42af      	cmp	r7, r5
 801bf38:	d26e      	bcs.n	801c018 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 801bf3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf3c:	9201      	str	r2, [sp, #4]
 801bf3e:	1bed      	subs	r5, r5, r7
 801bf40:	4283      	cmp	r3, r0
 801bf42:	b2ad      	uxth	r5, r5
 801bf44:	d802      	bhi.n	801bf4c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801bf46:	e073      	b.n	801c030 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d15f      	bne.n	801c00c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 801bf4c:	9b03      	ldr	r3, [sp, #12]
 801bf4e:	785b      	ldrb	r3, [r3, #1]
 801bf50:	f1cb 0207 	rsb	r2, fp, #7
 801bf54:	4093      	lsls	r3, r2
 801bf56:	005b      	lsls	r3, r3, #1
 801bf58:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801bf5c:	9b03      	ldr	r3, [sp, #12]
 801bf5e:	781b      	ldrb	r3, [r3, #0]
 801bf60:	fa43 f30b 	asr.w	r3, r3, fp
 801bf64:	b2db      	uxtb	r3, r3
 801bf66:	4313      	orrs	r3, r2
 801bf68:	f10b 0201 	add.w	r2, fp, #1
 801bf6c:	fa5f fb82 	uxtb.w	fp, r2
 801bf70:	9a03      	ldr	r2, [sp, #12]
 801bf72:	f1bb 0f08 	cmp.w	fp, #8
 801bf76:	bf15      	itete	ne
 801bf78:	3201      	addne	r2, #1
 801bf7a:	3202      	addeq	r2, #2
 801bf7c:	9203      	strne	r2, [sp, #12]
 801bf7e:	9203      	streq	r2, [sp, #12]
 801bf80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bf82:	b29f      	uxth	r7, r3
 801bf84:	bf08      	it	eq
 801bf86:	f04f 0b00 	moveq.w	fp, #0
 801bf8a:	42ba      	cmp	r2, r7
 801bf8c:	d309      	bcc.n	801bfa2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 801bf8e:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801bf92:	2301      	movs	r3, #1
 801bf94:	9a05      	ldr	r2, [sp, #20]
 801bf96:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801bf9a:	d30e      	bcc.n	801bfba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 801bf9c:	469a      	mov	sl, r3
 801bf9e:	2600      	movs	r6, #0
 801bfa0:	e035      	b.n	801c00e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 801bfa2:	9b05      	ldr	r3, [sp, #20]
 801bfa4:	429f      	cmp	r7, r3
 801bfa6:	d318      	bcc.n	801bfda <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 801bfa8:	eb04 030a 	add.w	r3, r4, sl
 801bfac:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801bfb0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801bfb4:	f10a 0301 	add.w	r3, sl, #1
 801bfb8:	b29b      	uxth	r3, r3
 801bfba:	9a05      	ldr	r2, [sp, #20]
 801bfbc:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801bfc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bfc2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bfc6:	7116      	strb	r6, [r2, #4]
 801bfc8:	f10a 0601 	add.w	r6, sl, #1
 801bfcc:	80d1      	strh	r1, [r2, #6]
 801bfce:	7156      	strb	r6, [r2, #5]
 801bfd0:	9a05      	ldr	r2, [sp, #20]
 801bfd2:	3201      	adds	r2, #1
 801bfd4:	b292      	uxth	r2, r2
 801bfd6:	9205      	str	r2, [sp, #20]
 801bfd8:	e7e0      	b.n	801bf9c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 801bfda:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801bfde:	463a      	mov	r2, r7
 801bfe0:	795b      	ldrb	r3, [r3, #5]
 801bfe2:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801bfe6:	4426      	add	r6, r4
 801bfe8:	9919      	ldr	r1, [sp, #100]	; 0x64
 801bfea:	eb01 0c06 	add.w	ip, r1, r6
 801bfee:	f1bc 0f00 	cmp.w	ip, #0
 801bff2:	dd07      	ble.n	801c004 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 801bff4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bff8:	f892 c004 	ldrb.w	ip, [r2, #4]
 801bffc:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801c000:	88d2      	ldrh	r2, [r2, #6]
 801c002:	e7f1      	b.n	801bfe8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 801c004:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801c008:	b29b      	uxth	r3, r3
 801c00a:	e7c3      	b.n	801bf94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 801c00c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c00e:	970c      	str	r7, [sp, #48]	; 0x30
 801c010:	9a01      	ldr	r2, [sp, #4]
 801c012:	46b4      	mov	ip, r6
 801c014:	461f      	mov	r7, r3
 801c016:	e78c      	b.n	801bf32 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 801c018:	1b7b      	subs	r3, r7, r5
 801c01a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c01e:	9201      	str	r2, [sp, #4]
 801c020:	eb0c 0605 	add.w	r6, ip, r5
 801c024:	b29b      	uxth	r3, r3
 801c026:	b2b6      	uxth	r6, r6
 801c028:	2500      	movs	r5, #0
 801c02a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c02c:	4282      	cmp	r2, r0
 801c02e:	d88b      	bhi.n	801bf48 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801c030:	9a01      	ldr	r2, [sp, #4]
 801c032:	e74b      	b.n	801becc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 801c034:	4297      	cmp	r7, r2
 801c036:	d332      	bcc.n	801c09e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e6>
 801c038:	1abb      	subs	r3, r7, r2
 801c03a:	b29b      	uxth	r3, r3
 801c03c:	9208      	str	r2, [sp, #32]
 801c03e:	9501      	str	r5, [sp, #4]
 801c040:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c042:	29ff      	cmp	r1, #255	; 0xff
 801c044:	9908      	ldr	r1, [sp, #32]
 801c046:	eb0c 0601 	add.w	r6, ip, r1
 801c04a:	d135      	bne.n	801c0b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 801c04c:	f1a0 0e02 	sub.w	lr, r0, #2
 801c050:	b2b6      	uxth	r6, r6
 801c052:	45b4      	cmp	ip, r6
 801c054:	f040 808c 	bne.w	801c170 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b8>
 801c058:	9908      	ldr	r1, [sp, #32]
 801c05a:	4297      	cmp	r7, r2
 801c05c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c060:	d3e2      	bcc.n	801c028 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 801c062:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c064:	9904      	ldr	r1, [sp, #16]
 801c066:	8812      	ldrh	r2, [r2, #0]
 801c068:	1a52      	subs	r2, r2, r1
 801c06a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c06e:	9a07      	ldr	r2, [sp, #28]
 801c070:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c072:	3201      	adds	r2, #1
 801c074:	428a      	cmp	r2, r1
 801c076:	9207      	str	r2, [sp, #28]
 801c078:	f040 8087 	bne.w	801c18a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d2>
 801c07c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801c080:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 801c084:	9b04      	ldr	r3, [sp, #16]
 801c086:	1bed      	subs	r5, r5, r7
 801c088:	b2ad      	uxth	r5, r5
 801c08a:	2d00      	cmp	r5, #0
 801c08c:	bf08      	it	eq
 801c08e:	461a      	moveq	r2, r3
 801c090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c092:	bf18      	it	ne
 801c094:	2200      	movne	r2, #0
 801c096:	3301      	adds	r3, #1
 801c098:	930d      	str	r3, [sp, #52]	; 0x34
 801c09a:	b292      	uxth	r2, r2
 801c09c:	e70d      	b.n	801beba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 801c09e:	1bd1      	subs	r1, r2, r7
 801c0a0:	b28b      	uxth	r3, r1
 801c0a2:	9301      	str	r3, [sp, #4]
 801c0a4:	9708      	str	r7, [sp, #32]
 801c0a6:	462b      	mov	r3, r5
 801c0a8:	e7ca      	b.n	801c040 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 801c0aa:	bf00      	nop
 801c0ac:	2002585c 	.word	0x2002585c
 801c0b0:	20025856 	.word	0x20025856
 801c0b4:	fffff7fb 	.word	0xfffff7fb
 801c0b8:	b2b6      	uxth	r6, r6
 801c0ba:	900b      	str	r0, [sp, #44]	; 0x2c
 801c0bc:	45b4      	cmp	ip, r6
 801c0be:	d0cb      	beq.n	801c058 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 801c0c0:	f10c 0101 	add.w	r1, ip, #1
 801c0c4:	44a4      	add	ip, r4
 801c0c6:	9117      	str	r1, [sp, #92]	; 0x5c
 801c0c8:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801c0cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c0ce:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801c0d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c0d4:	f8b1 c000 	ldrh.w	ip, [r1]
 801c0d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c0da:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801c0de:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c0e2:	fb1e fe01 	smulbb	lr, lr, r1
 801c0e6:	ea4f 2825 	mov.w	r8, r5, asr #8
 801c0ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c0ec:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801c0f0:	fb08 e801 	mla	r8, r8, r1, lr
 801c0f4:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801c0f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c0fa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801c0fe:	fb19 f901 	smulbb	r9, r9, r1
 801c102:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801c106:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c108:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c10c:	fb0e 9e01 	mla	lr, lr, r1, r9
 801c110:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c114:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c116:	fa5f fc8c 	uxtb.w	ip, ip
 801c11a:	fb1c fc01 	smulbb	ip, ip, r1
 801c11e:	00ed      	lsls	r5, r5, #3
 801c120:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c122:	b2ed      	uxtb	r5, r5
 801c124:	fb05 c501 	mla	r5, r5, r1, ip
 801c128:	fa1f f888 	uxth.w	r8, r8
 801c12c:	fa1f fe8e 	uxth.w	lr, lr
 801c130:	b2ad      	uxth	r5, r5
 801c132:	f108 0c01 	add.w	ip, r8, #1
 801c136:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801c13a:	f10e 0901 	add.w	r9, lr, #1
 801c13e:	f105 0c01 	add.w	ip, r5, #1
 801c142:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801c146:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801c14a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c14e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801c152:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c156:	ea4c 0808 	orr.w	r8, ip, r8
 801c15a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c15c:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 801c160:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c164:	ea48 0809 	orr.w	r8, r8, r9
 801c168:	f821 8b02 	strh.w	r8, [r1], #2
 801c16c:	910b      	str	r1, [sp, #44]	; 0x2c
 801c16e:	e7a5      	b.n	801c0bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801c170:	f10c 0801 	add.w	r8, ip, #1
 801c174:	44a4      	add	ip, r4
 801c176:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c178:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801c17c:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801c180:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801c184:	fa1f fc88 	uxth.w	ip, r8
 801c188:	e763      	b.n	801c052 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 801c18a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c18e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801c192:	1aad      	subs	r5, r5, r2
 801c194:	b2ad      	uxth	r5, r5
 801c196:	2d00      	cmp	r5, #0
 801c198:	bf18      	it	ne
 801c19a:	2200      	movne	r2, #0
 801c19c:	9201      	str	r2, [sp, #4]
 801c19e:	e744      	b.n	801c02a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 801c1a0:	4b03      	ldr	r3, [pc, #12]	; (801c1b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f8>)
 801c1a2:	6818      	ldr	r0, [r3, #0]
 801c1a4:	6803      	ldr	r3, [r0, #0]
 801c1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1a8:	4798      	blx	r3
 801c1aa:	b01f      	add	sp, #124	; 0x7c
 801c1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1b0:	2002585c 	.word	0x2002585c

0801c1b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1b8:	b08f      	sub	sp, #60	; 0x3c
 801c1ba:	461c      	mov	r4, r3
 801c1bc:	9203      	str	r2, [sp, #12]
 801c1be:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c1c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c1c4:	9202      	str	r2, [sp, #8]
 801c1c6:	460f      	mov	r7, r1
 801c1c8:	2a00      	cmp	r2, #0
 801c1ca:	f000 8128 	beq.w	801c41e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801c1ce:	6820      	ldr	r0, [r4, #0]
 801c1d0:	6861      	ldr	r1, [r4, #4]
 801c1d2:	aa0a      	add	r2, sp, #40	; 0x28
 801c1d4:	c203      	stmia	r2!, {r0, r1}
 801c1d6:	6818      	ldr	r0, [r3, #0]
 801c1d8:	6859      	ldr	r1, [r3, #4]
 801c1da:	aa0c      	add	r2, sp, #48	; 0x30
 801c1dc:	c203      	stmia	r2!, {r0, r1}
 801c1de:	a80a      	add	r0, sp, #40	; 0x28
 801c1e0:	f7f9 fb44 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c1e4:	4621      	mov	r1, r4
 801c1e6:	a80c      	add	r0, sp, #48	; 0x30
 801c1e8:	f7f9 fb68 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c1ec:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c1f0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801c1f4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801c1f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c1fc:	bfde      	ittt	le
 801c1fe:	b2b3      	uxthle	r3, r6
 801c200:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801c204:	fb92 f3f3 	sdivle	r3, r2, r3
 801c208:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801c20c:	bfc8      	it	gt
 801c20e:	2301      	movgt	r3, #1
 801c210:	fb92 f1f3 	sdiv	r1, r2, r3
 801c214:	fa1f fc81 	uxth.w	ip, r1
 801c218:	fb0c 2413 	mls	r4, ip, r3, r2
 801c21c:	fb14 f406 	smulbb	r4, r4, r6
 801c220:	441d      	add	r5, r3
 801c222:	4404      	add	r4, r0
 801c224:	4661      	mov	r1, ip
 801c226:	3d01      	subs	r5, #1
 801c228:	b2a4      	uxth	r4, r4
 801c22a:	fb95 f5f3 	sdiv	r5, r5, r3
 801c22e:	b121      	cbz	r1, 801c23a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x86>
 801c230:	9b03      	ldr	r3, [sp, #12]
 801c232:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c236:	ba1b      	rev	r3, r3
 801c238:	441f      	add	r7, r3
 801c23a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801c23e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801c242:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801c246:	4418      	add	r0, r3
 801c248:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c24c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801c250:	441a      	add	r2, r3
 801c252:	4b74      	ldr	r3, [pc, #464]	; (801c424 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c254:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801c258:	6818      	ldr	r0, [r3, #0]
 801c25a:	6803      	ldr	r3, [r0, #0]
 801c25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c25e:	4798      	blx	r3
 801c260:	4a71      	ldr	r2, [pc, #452]	; (801c428 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801c262:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801c266:	8813      	ldrh	r3, [r2, #0]
 801c268:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801c26c:	9209      	str	r2, [sp, #36]	; 0x24
 801c26e:	fb03 c101 	mla	r1, r3, r1, ip
 801c272:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c276:	4373      	muls	r3, r6
 801c278:	b2ad      	uxth	r5, r5
 801c27a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c27e:	00ad      	lsls	r5, r5, #2
 801c280:	2c00      	cmp	r4, #0
 801c282:	9304      	str	r3, [sp, #16]
 801c284:	f105 0304 	add.w	r3, r5, #4
 801c288:	9305      	str	r3, [sp, #20]
 801c28a:	bf0c      	ite	eq
 801c28c:	46c8      	moveq	r8, r9
 801c28e:	f04f 0800 	movne.w	r8, #0
 801c292:	2300      	movs	r3, #0
 801c294:	fa1f f888 	uxth.w	r8, r8
 801c298:	9301      	str	r3, [sp, #4]
 801c29a:	9a04      	ldr	r2, [sp, #16]
 801c29c:	4282      	cmp	r2, r0
 801c29e:	f240 80b9 	bls.w	801c414 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801c2a2:	b95b      	cbnz	r3, 801c2bc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x108>
 801c2a4:	783a      	ldrb	r2, [r7, #0]
 801c2a6:	0993      	lsrs	r3, r2, #6
 801c2a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c2ac:	9201      	str	r2, [sp, #4]
 801c2ae:	1e5a      	subs	r2, r3, #1
 801c2b0:	2a02      	cmp	r2, #2
 801c2b2:	bf8d      	iteet	hi
 801c2b4:	787b      	ldrbhi	r3, [r7, #1]
 801c2b6:	3701      	addls	r7, #1
 801c2b8:	b29b      	uxthls	r3, r3
 801c2ba:	3702      	addhi	r7, #2
 801c2bc:	b184      	cbz	r4, 801c2e0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801c2be:	429c      	cmp	r4, r3
 801c2c0:	bf95      	itete	ls
 801c2c2:	1b1c      	subls	r4, r3, r4
 801c2c4:	1ae4      	subhi	r4, r4, r3
 801c2c6:	fa1f fa84 	uxthls.w	sl, r4
 801c2ca:	b2a4      	uxthhi	r4, r4
 801c2cc:	bf87      	ittee	hi
 801c2ce:	46c4      	movhi	ip, r8
 801c2d0:	f04f 0a00 	movhi.w	sl, #0
 801c2d4:	fa1f fc89 	uxthls.w	ip, r9
 801c2d8:	2400      	movls	r4, #0
 801c2da:	4653      	mov	r3, sl
 801c2dc:	46e0      	mov	r8, ip
 801c2de:	e7dc      	b.n	801c29a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe6>
 801c2e0:	2204      	movs	r2, #4
 801c2e2:	4615      	mov	r5, r2
 801c2e4:	9905      	ldr	r1, [sp, #20]
 801c2e6:	9a01      	ldr	r2, [sp, #4]
 801c2e8:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c2ec:	9903      	ldr	r1, [sp, #12]
 801c2ee:	588a      	ldr	r2, [r1, r2]
 801c2f0:	4543      	cmp	r3, r8
 801c2f2:	bf27      	ittee	cs
 801c2f4:	eba3 0a08 	subcs.w	sl, r3, r8
 801c2f8:	46c6      	movcs	lr, r8
 801c2fa:	eba8 0c03 	subcc.w	ip, r8, r3
 801c2fe:	469e      	movcc	lr, r3
 801c300:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801c304:	bf27      	ittee	cs
 801c306:	fa1f fa8a 	uxthcs.w	sl, sl
 801c30a:	46a4      	movcs	ip, r4
 801c30c:	fa1f fc8c 	uxthcc.w	ip, ip
 801c310:	46a2      	movcc	sl, r4
 801c312:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801c316:	2900      	cmp	r1, #0
 801c318:	d066      	beq.n	801c3e8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801c31a:	29ff      	cmp	r1, #255	; 0xff
 801c31c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801c320:	d114      	bne.n	801c34c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801c322:	9d02      	ldr	r5, [sp, #8]
 801c324:	2dff      	cmp	r5, #255	; 0xff
 801c326:	d111      	bne.n	801c34c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801c328:	0951      	lsrs	r1, r2, #5
 801c32a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c32e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c332:	f026 0607 	bic.w	r6, r6, #7
 801c336:	430e      	orrs	r6, r1
 801c338:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c33c:	4316      	orrs	r6, r2
 801c33e:	b2b6      	uxth	r6, r6
 801c340:	4486      	add	lr, r0
 801c342:	4586      	cmp	lr, r0
 801c344:	d051      	beq.n	801c3ea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801c346:	f820 6b02 	strh.w	r6, [r0], #2
 801c34a:	e7fa      	b.n	801c342 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801c34c:	9d02      	ldr	r5, [sp, #8]
 801c34e:	4369      	muls	r1, r5
 801c350:	1c4d      	adds	r5, r1, #1
 801c352:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801c356:	122d      	asrs	r5, r5, #8
 801c358:	ea6f 0b05 	mvn.w	fp, r5
 801c35c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801c360:	b2ad      	uxth	r5, r5
 801c362:	b2f6      	uxtb	r6, r6
 801c364:	b2d2      	uxtb	r2, r2
 801c366:	fb11 f105 	smulbb	r1, r1, r5
 801c36a:	fb16 f605 	smulbb	r6, r6, r5
 801c36e:	fb12 f205 	smulbb	r2, r2, r5
 801c372:	b289      	uxth	r1, r1
 801c374:	b2b6      	uxth	r6, r6
 801c376:	b292      	uxth	r2, r2
 801c378:	9106      	str	r1, [sp, #24]
 801c37a:	9607      	str	r6, [sp, #28]
 801c37c:	9208      	str	r2, [sp, #32]
 801c37e:	4486      	add	lr, r0
 801c380:	fa5f fb8b 	uxtb.w	fp, fp
 801c384:	4586      	cmp	lr, r0
 801c386:	d030      	beq.n	801c3ea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801c388:	8802      	ldrh	r2, [r0, #0]
 801c38a:	9906      	ldr	r1, [sp, #24]
 801c38c:	1216      	asrs	r6, r2, #8
 801c38e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c392:	10d5      	asrs	r5, r2, #3
 801c394:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801c398:	fb06 160b 	mla	r6, r6, fp, r1
 801c39c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c3a0:	9907      	ldr	r1, [sp, #28]
 801c3a2:	00d2      	lsls	r2, r2, #3
 801c3a4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801c3a8:	fb05 150b 	mla	r5, r5, fp, r1
 801c3ac:	b2d2      	uxtb	r2, r2
 801c3ae:	9908      	ldr	r1, [sp, #32]
 801c3b0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c3b4:	b2b6      	uxth	r6, r6
 801c3b6:	fb02 120b 	mla	r2, r2, fp, r1
 801c3ba:	b292      	uxth	r2, r2
 801c3bc:	1c71      	adds	r1, r6, #1
 801c3be:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801c3c2:	1c51      	adds	r1, r2, #1
 801c3c4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c3c8:	b2ad      	uxth	r5, r5
 801c3ca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c3ce:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c3d2:	4316      	orrs	r6, r2
 801c3d4:	1c6a      	adds	r2, r5, #1
 801c3d6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801c3da:	096d      	lsrs	r5, r5, #5
 801c3dc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c3e0:	432e      	orrs	r6, r5
 801c3e2:	f820 6b02 	strh.w	r6, [r0], #2
 801c3e6:	e7cd      	b.n	801c384 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801c3e8:	4470      	add	r0, lr
 801c3ea:	4543      	cmp	r3, r8
 801c3ec:	f4ff af75 	bcc.w	801c2da <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 801c3f0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801c3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3f6:	fa1f fc89 	uxth.w	ip, r9
 801c3fa:	eba4 040c 	sub.w	r4, r4, ip
 801c3fe:	881b      	ldrh	r3, [r3, #0]
 801c400:	b2a4      	uxth	r4, r4
 801c402:	2c00      	cmp	r4, #0
 801c404:	eba3 0309 	sub.w	r3, r3, r9
 801c408:	bf18      	it	ne
 801c40a:	f04f 0c00 	movne.w	ip, #0
 801c40e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c412:	e762      	b.n	801c2da <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 801c414:	4b03      	ldr	r3, [pc, #12]	; (801c424 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c416:	6818      	ldr	r0, [r3, #0]
 801c418:	6803      	ldr	r3, [r0, #0]
 801c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c41c:	4798      	blx	r3
 801c41e:	b00f      	add	sp, #60	; 0x3c
 801c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c424:	2002585c 	.word	0x2002585c
 801c428:	20025856 	.word	0x20025856

0801c42c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c430:	b093      	sub	sp, #76	; 0x4c
 801c432:	461c      	mov	r4, r3
 801c434:	9205      	str	r2, [sp, #20]
 801c436:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801c43a:	9101      	str	r1, [sp, #4]
 801c43c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c43e:	9202      	str	r2, [sp, #8]
 801c440:	2a00      	cmp	r2, #0
 801c442:	f000 812c 	beq.w	801c69e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801c446:	6820      	ldr	r0, [r4, #0]
 801c448:	6861      	ldr	r1, [r4, #4]
 801c44a:	aa0e      	add	r2, sp, #56	; 0x38
 801c44c:	c203      	stmia	r2!, {r0, r1}
 801c44e:	6818      	ldr	r0, [r3, #0]
 801c450:	6859      	ldr	r1, [r3, #4]
 801c452:	aa10      	add	r2, sp, #64	; 0x40
 801c454:	c203      	stmia	r2!, {r0, r1}
 801c456:	a80e      	add	r0, sp, #56	; 0x38
 801c458:	f7f9 fa08 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c45c:	4621      	mov	r1, r4
 801c45e:	a810      	add	r0, sp, #64	; 0x40
 801c460:	f7f9 fa2c 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c464:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801c468:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801c46c:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801c470:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c474:	bfde      	ittt	le
 801c476:	b2b3      	uxthle	r3, r6
 801c478:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801c47c:	fb92 f3f3 	sdivle	r3, r2, r3
 801c480:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801c484:	bfc8      	it	gt
 801c486:	2301      	movgt	r3, #1
 801c488:	fb92 f1f3 	sdiv	r1, r2, r3
 801c48c:	fa1f fc81 	uxth.w	ip, r1
 801c490:	fb0c 2413 	mls	r4, ip, r3, r2
 801c494:	fb14 f406 	smulbb	r4, r4, r6
 801c498:	441d      	add	r5, r3
 801c49a:	4404      	add	r4, r0
 801c49c:	4661      	mov	r1, ip
 801c49e:	3d01      	subs	r5, #1
 801c4a0:	b2a4      	uxth	r4, r4
 801c4a2:	fb95 f5f3 	sdiv	r5, r5, r3
 801c4a6:	b131      	cbz	r1, 801c4b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x8a>
 801c4a8:	9b05      	ldr	r3, [sp, #20]
 801c4aa:	9901      	ldr	r1, [sp, #4]
 801c4ac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c4b0:	ba1b      	rev	r3, r3
 801c4b2:	4419      	add	r1, r3
 801c4b4:	9101      	str	r1, [sp, #4]
 801c4b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c4ba:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c4be:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 801c4c2:	4418      	add	r0, r3
 801c4c4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801c4c8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801c4cc:	441a      	add	r2, r3
 801c4ce:	4b75      	ldr	r3, [pc, #468]	; (801c6a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801c4d0:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801c4d4:	6818      	ldr	r0, [r3, #0]
 801c4d6:	6803      	ldr	r3, [r0, #0]
 801c4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c4da:	4798      	blx	r3
 801c4dc:	4972      	ldr	r1, [pc, #456]	; (801c6a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801c4de:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 801c4e2:	880b      	ldrh	r3, [r1, #0]
 801c4e4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801c4e8:	910d      	str	r1, [sp, #52]	; 0x34
 801c4ea:	fb03 c202 	mla	r2, r3, r2, ip
 801c4ee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c4f2:	4373      	muls	r3, r6
 801c4f4:	b2ad      	uxth	r5, r5
 801c4f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c4fa:	00ad      	lsls	r5, r5, #2
 801c4fc:	9308      	str	r3, [sp, #32]
 801c4fe:	1d2b      	adds	r3, r5, #4
 801c500:	9309      	str	r3, [sp, #36]	; 0x24
 801c502:	9b02      	ldr	r3, [sp, #8]
 801c504:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c508:	9106      	str	r1, [sp, #24]
 801c50a:	43da      	mvns	r2, r3
 801c50c:	2c00      	cmp	r4, #0
 801c50e:	bf0c      	ite	eq
 801c510:	46dc      	moveq	ip, fp
 801c512:	f04f 0c00 	movne.w	ip, #0
 801c516:	2300      	movs	r3, #0
 801c518:	b2d2      	uxtb	r2, r2
 801c51a:	fa1f fc8c 	uxth.w	ip, ip
 801c51e:	9303      	str	r3, [sp, #12]
 801c520:	9207      	str	r2, [sp, #28]
 801c522:	9a08      	ldr	r2, [sp, #32]
 801c524:	4282      	cmp	r2, r0
 801c526:	f240 80b5 	bls.w	801c694 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801c52a:	b963      	cbnz	r3, 801c546 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801c52c:	9b01      	ldr	r3, [sp, #4]
 801c52e:	781a      	ldrb	r2, [r3, #0]
 801c530:	0993      	lsrs	r3, r2, #6
 801c532:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c536:	9203      	str	r2, [sp, #12]
 801c538:	1e5a      	subs	r2, r3, #1
 801c53a:	2a02      	cmp	r2, #2
 801c53c:	d815      	bhi.n	801c56a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 801c53e:	9a01      	ldr	r2, [sp, #4]
 801c540:	3201      	adds	r2, #1
 801c542:	9201      	str	r2, [sp, #4]
 801c544:	b29b      	uxth	r3, r3
 801c546:	b1b4      	cbz	r4, 801c576 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 801c548:	429c      	cmp	r4, r3
 801c54a:	bf95      	itete	ls
 801c54c:	1b1c      	subls	r4, r3, r4
 801c54e:	1ae4      	subhi	r4, r4, r3
 801c550:	fa1f f884 	uxthls.w	r8, r4
 801c554:	b2a4      	uxthhi	r4, r4
 801c556:	bf87      	ittee	hi
 801c558:	4666      	movhi	r6, ip
 801c55a:	f04f 0800 	movhi.w	r8, #0
 801c55e:	fa1f f68b 	uxthls.w	r6, fp
 801c562:	2400      	movls	r4, #0
 801c564:	4643      	mov	r3, r8
 801c566:	46b4      	mov	ip, r6
 801c568:	e7db      	b.n	801c522 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801c56a:	9a01      	ldr	r2, [sp, #4]
 801c56c:	9b01      	ldr	r3, [sp, #4]
 801c56e:	3202      	adds	r2, #2
 801c570:	785b      	ldrb	r3, [r3, #1]
 801c572:	9201      	str	r2, [sp, #4]
 801c574:	e7e7      	b.n	801c546 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801c576:	2203      	movs	r2, #3
 801c578:	4615      	mov	r5, r2
 801c57a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c57c:	9a03      	ldr	r2, [sp, #12]
 801c57e:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c582:	9905      	ldr	r1, [sp, #20]
 801c584:	4563      	cmp	r3, ip
 801c586:	eb01 0502 	add.w	r5, r1, r2
 801c58a:	9902      	ldr	r1, [sp, #8]
 801c58c:	bf29      	itett	cs
 801c58e:	eba3 080c 	subcs.w	r8, r3, ip
 801c592:	ebac 0603 	subcc.w	r6, ip, r3
 801c596:	fa1f f888 	uxthcs.w	r8, r8
 801c59a:	46e1      	movcs	r9, ip
 801c59c:	bf2f      	iteee	cs
 801c59e:	4626      	movcs	r6, r4
 801c5a0:	b2b6      	uxthcc	r6, r6
 801c5a2:	4699      	movcc	r9, r3
 801c5a4:	46a0      	movcc	r8, r4
 801c5a6:	29ff      	cmp	r1, #255	; 0xff
 801c5a8:	d04a      	beq.n	801c640 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x214>
 801c5aa:	9f06      	ldr	r7, [sp, #24]
 801c5ac:	78a9      	ldrb	r1, [r5, #2]
 801c5ae:	9004      	str	r0, [sp, #16]
 801c5b0:	4379      	muls	r1, r7
 801c5b2:	910a      	str	r1, [sp, #40]	; 0x28
 801c5b4:	7869      	ldrb	r1, [r5, #1]
 801c5b6:	4379      	muls	r1, r7
 801c5b8:	910b      	str	r1, [sp, #44]	; 0x2c
 801c5ba:	9905      	ldr	r1, [sp, #20]
 801c5bc:	5c8a      	ldrb	r2, [r1, r2]
 801c5be:	437a      	muls	r2, r7
 801c5c0:	920c      	str	r2, [sp, #48]	; 0x30
 801c5c2:	46ca      	mov	sl, r9
 801c5c4:	f1ba 0f00 	cmp.w	sl, #0
 801c5c8:	d03d      	beq.n	801c646 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 801c5ca:	9a04      	ldr	r2, [sp, #16]
 801c5cc:	9f07      	ldr	r7, [sp, #28]
 801c5ce:	8812      	ldrh	r2, [r2, #0]
 801c5d0:	1215      	asrs	r5, r2, #8
 801c5d2:	46be      	mov	lr, r7
 801c5d4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c5d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c5da:	10d1      	asrs	r1, r2, #3
 801c5dc:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801c5e0:	fb05 750e 	mla	r5, r5, lr, r7
 801c5e4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c5e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c5ea:	00d2      	lsls	r2, r2, #3
 801c5ec:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801c5f0:	fb01 710e 	mla	r1, r1, lr, r7
 801c5f4:	b2d2      	uxtb	r2, r2
 801c5f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c5f8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c5fc:	b2ad      	uxth	r5, r5
 801c5fe:	fb02 720e 	mla	r2, r2, lr, r7
 801c602:	b292      	uxth	r2, r2
 801c604:	f105 0e01 	add.w	lr, r5, #1
 801c608:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801c60c:	f102 0e01 	add.w	lr, r2, #1
 801c610:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801c614:	b289      	uxth	r1, r1
 801c616:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c61a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c61e:	4315      	orrs	r5, r2
 801c620:	1c4a      	adds	r2, r1, #1
 801c622:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c626:	0949      	lsrs	r1, r1, #5
 801c628:	9a04      	ldr	r2, [sp, #16]
 801c62a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c62e:	430d      	orrs	r5, r1
 801c630:	f822 5b02 	strh.w	r5, [r2], #2
 801c634:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c638:	9204      	str	r2, [sp, #16]
 801c63a:	fa1f fa8a 	uxth.w	sl, sl
 801c63e:	e7c1      	b.n	801c5c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801c640:	4649      	mov	r1, r9
 801c642:	4686      	mov	lr, r0
 801c644:	b999      	cbnz	r1, 801c66e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 801c646:	4563      	cmp	r3, ip
 801c648:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801c64c:	d38a      	bcc.n	801c564 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801c64e:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 801c652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c654:	fa1f f68b 	uxth.w	r6, fp
 801c658:	1ba4      	subs	r4, r4, r6
 801c65a:	881b      	ldrh	r3, [r3, #0]
 801c65c:	b2a4      	uxth	r4, r4
 801c65e:	2c00      	cmp	r4, #0
 801c660:	eba3 030b 	sub.w	r3, r3, fp
 801c664:	bf18      	it	ne
 801c666:	2600      	movne	r6, #0
 801c668:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c66c:	e77a      	b.n	801c564 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801c66e:	78aa      	ldrb	r2, [r5, #2]
 801c670:	4f0e      	ldr	r7, [pc, #56]	; (801c6ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801c672:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801c676:	786a      	ldrb	r2, [r5, #1]
 801c678:	00d2      	lsls	r2, r2, #3
 801c67a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c67e:	ea4a 0202 	orr.w	r2, sl, r2
 801c682:	f895 a000 	ldrb.w	sl, [r5]
 801c686:	3901      	subs	r1, #1
 801c688:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801c68c:	f82e 2b02 	strh.w	r2, [lr], #2
 801c690:	b289      	uxth	r1, r1
 801c692:	e7d7      	b.n	801c644 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801c694:	4b03      	ldr	r3, [pc, #12]	; (801c6a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801c696:	6818      	ldr	r0, [r3, #0]
 801c698:	6803      	ldr	r3, [r0, #0]
 801c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c69c:	4798      	blx	r3
 801c69e:	b013      	add	sp, #76	; 0x4c
 801c6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6a4:	2002585c 	.word	0x2002585c
 801c6a8:	20025856 	.word	0x20025856
 801c6ac:	fffff800 	.word	0xfffff800

0801c6b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6b4:	b09d      	sub	sp, #116	; 0x74
 801c6b6:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 801c6ba:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 801c6be:	920e      	str	r2, [sp, #56]	; 0x38
 801c6c0:	461c      	mov	r4, r3
 801c6c2:	4683      	mov	fp, r0
 801c6c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c6c6:	2a00      	cmp	r2, #0
 801c6c8:	f000 81e0 	beq.w	801ca8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3dc>
 801c6cc:	6820      	ldr	r0, [r4, #0]
 801c6ce:	6861      	ldr	r1, [r4, #4]
 801c6d0:	aa18      	add	r2, sp, #96	; 0x60
 801c6d2:	c203      	stmia	r2!, {r0, r1}
 801c6d4:	6818      	ldr	r0, [r3, #0]
 801c6d6:	6859      	ldr	r1, [r3, #4]
 801c6d8:	aa1a      	add	r2, sp, #104	; 0x68
 801c6da:	c203      	stmia	r2!, {r0, r1}
 801c6dc:	a818      	add	r0, sp, #96	; 0x60
 801c6de:	f7f9 f8c5 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c6e2:	4621      	mov	r1, r4
 801c6e4:	a81a      	add	r0, sp, #104	; 0x68
 801c6e6:	f7f9 f8e9 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c6ea:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801c6ee:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 801c6f2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801c6f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c6fa:	bfd7      	itett	le
 801c6fc:	b29a      	uxthle	r2, r3
 801c6fe:	2201      	movgt	r2, #1
 801c700:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801c704:	fb91 f2f2 	sdivle	r2, r1, r2
 801c708:	9202      	str	r2, [sp, #8]
 801c70a:	9802      	ldr	r0, [sp, #8]
 801c70c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801c710:	fb92 f0f0 	sdiv	r0, r2, r0
 801c714:	b280      	uxth	r0, r0
 801c716:	900f      	str	r0, [sp, #60]	; 0x3c
 801c718:	9902      	ldr	r1, [sp, #8]
 801c71a:	9802      	ldr	r0, [sp, #8]
 801c71c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c71e:	440c      	add	r4, r1
 801c720:	fb05 2510 	mls	r5, r5, r0, r2
 801c724:	fb15 f503 	smulbb	r5, r5, r3
 801c728:	3c01      	subs	r4, #1
 801c72a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801c72e:	fb94 f4f1 	sdiv	r4, r4, r1
 801c732:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 801c736:	440d      	add	r5, r1
 801c738:	4419      	add	r1, r3
 801c73a:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801c73e:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 801c742:	441a      	add	r2, r3
 801c744:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801c748:	9306      	str	r3, [sp, #24]
 801c74a:	4bb3      	ldr	r3, [pc, #716]	; (801ca18 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801c74c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 801c750:	6818      	ldr	r0, [r3, #0]
 801c752:	6803      	ldr	r3, [r0, #0]
 801c754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c756:	4798      	blx	r3
 801c758:	4bb0      	ldr	r3, [pc, #704]	; (801ca1c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801c75a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801c75e:	881a      	ldrh	r2, [r3, #0]
 801c760:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 801c764:	9316      	str	r3, [sp, #88]	; 0x58
 801c766:	fb02 7101 	mla	r1, r2, r1, r7
 801c76a:	3401      	adds	r4, #1
 801c76c:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801c770:	b2a4      	uxth	r4, r4
 801c772:	4356      	muls	r6, r2
 801c774:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801c778:	00a4      	lsls	r4, r4, #2
 801c77a:	920a      	str	r2, [sp, #40]	; 0x28
 801c77c:	1d22      	adds	r2, r4, #4
 801c77e:	b2ad      	uxth	r5, r5
 801c780:	9213      	str	r2, [sp, #76]	; 0x4c
 801c782:	4ba7      	ldr	r3, [pc, #668]	; (801ca20 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801c784:	9a06      	ldr	r2, [sp, #24]
 801c786:	2d00      	cmp	r5, #0
 801c788:	bf0c      	ite	eq
 801c78a:	4611      	moveq	r1, r2
 801c78c:	2100      	movne	r1, #0
 801c78e:	2200      	movs	r2, #0
 801c790:	eba3 030b 	sub.w	r3, r3, fp
 801c794:	b289      	uxth	r1, r1
 801c796:	920d      	str	r2, [sp, #52]	; 0x34
 801c798:	9317      	str	r3, [sp, #92]	; 0x5c
 801c79a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c79c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c79e:	fa12 f383 	uxtah	r3, r2, r3
 801c7a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c7a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c7a8:	3304      	adds	r3, #4
 801c7aa:	9308      	str	r3, [sp, #32]
 801c7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7ae:	4543      	cmp	r3, r8
 801c7b0:	f240 8167 	bls.w	801ca82 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d2>
 801c7b4:	9a02      	ldr	r2, [sp, #8]
 801c7b6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c7ba:	fbb5 f3f3 	udiv	r3, r5, r3
 801c7be:	1ad3      	subs	r3, r2, r3
 801c7c0:	b29b      	uxth	r3, r3
 801c7c2:	9314      	str	r3, [sp, #80]	; 0x50
 801c7c4:	9b08      	ldr	r3, [sp, #32]
 801c7c6:	9808      	ldr	r0, [sp, #32]
 801c7c8:	785a      	ldrb	r2, [r3, #1]
 801c7ca:	789b      	ldrb	r3, [r3, #2]
 801c7cc:	7800      	ldrb	r0, [r0, #0]
 801c7ce:	9010      	str	r0, [sp, #64]	; 0x40
 801c7d0:	021b      	lsls	r3, r3, #8
 801c7d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c7d6:	9a08      	ldr	r2, [sp, #32]
 801c7d8:	78d2      	ldrb	r2, [r2, #3]
 801c7da:	4313      	orrs	r3, r2
 801c7dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c7de:	3001      	adds	r0, #1
 801c7e0:	441a      	add	r2, r3
 801c7e2:	9007      	str	r0, [sp, #28]
 801c7e4:	1c50      	adds	r0, r2, #1
 801c7e6:	9005      	str	r0, [sp, #20]
 801c7e8:	7852      	ldrb	r2, [r2, #1]
 801c7ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c7ec:	0212      	lsls	r2, r2, #8
 801c7ee:	5cc3      	ldrb	r3, [r0, r3]
 801c7f0:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801c7f4:	431a      	orrs	r2, r3
 801c7f6:	b293      	uxth	r3, r2
 801c7f8:	930b      	str	r3, [sp, #44]	; 0x2c
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	9309      	str	r3, [sp, #36]	; 0x24
 801c7fe:	2301      	movs	r3, #1
 801c800:	9301      	str	r3, [sp, #4]
 801c802:	9304      	str	r3, [sp, #16]
 801c804:	2300      	movs	r3, #0
 801c806:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 801c80a:	9303      	str	r3, [sp, #12]
 801c80c:	f04f 0e01 	mov.w	lr, #1
 801c810:	2d00      	cmp	r5, #0
 801c812:	d07c      	beq.n	801c90e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c814:	45ae      	cmp	lr, r5
 801c816:	d26b      	bcs.n	801c8f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801c818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c81a:	eba5 050e 	sub.w	r5, r5, lr
 801c81e:	4543      	cmp	r3, r8
 801c820:	b2ad      	uxth	r5, r5
 801c822:	460c      	mov	r4, r1
 801c824:	d802      	bhi.n	801c82c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 801c826:	e070      	b.n	801c90a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d15c      	bne.n	801c8e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801c82c:	9b05      	ldr	r3, [sp, #20]
 801c82e:	9a04      	ldr	r2, [sp, #16]
 801c830:	785b      	ldrb	r3, [r3, #1]
 801c832:	9904      	ldr	r1, [sp, #16]
 801c834:	f1c2 0207 	rsb	r2, r2, #7
 801c838:	4093      	lsls	r3, r2
 801c83a:	005b      	lsls	r3, r3, #1
 801c83c:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801c840:	9b05      	ldr	r3, [sp, #20]
 801c842:	781b      	ldrb	r3, [r3, #0]
 801c844:	410b      	asrs	r3, r1
 801c846:	3101      	adds	r1, #1
 801c848:	b2c9      	uxtb	r1, r1
 801c84a:	2908      	cmp	r1, #8
 801c84c:	9104      	str	r1, [sp, #16]
 801c84e:	9905      	ldr	r1, [sp, #20]
 801c850:	bf0a      	itet	eq
 801c852:	3102      	addeq	r1, #2
 801c854:	3101      	addne	r1, #1
 801c856:	9105      	streq	r1, [sp, #20]
 801c858:	b2db      	uxtb	r3, r3
 801c85a:	bf0a      	itet	eq
 801c85c:	2100      	moveq	r1, #0
 801c85e:	9105      	strne	r1, [sp, #20]
 801c860:	9104      	streq	r1, [sp, #16]
 801c862:	4313      	orrs	r3, r2
 801c864:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c866:	b29a      	uxth	r2, r3
 801c868:	4291      	cmp	r1, r2
 801c86a:	d30a      	bcc.n	801c882 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801c86c:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 801c870:	2301      	movs	r3, #1
 801c872:	9907      	ldr	r1, [sp, #28]
 801c874:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801c878:	d30f      	bcc.n	801c89a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801c87a:	2100      	movs	r1, #0
 801c87c:	9301      	str	r3, [sp, #4]
 801c87e:	9103      	str	r1, [sp, #12]
 801c880:	e032      	b.n	801c8e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 801c882:	9b07      	ldr	r3, [sp, #28]
 801c884:	429a      	cmp	r2, r3
 801c886:	d318      	bcc.n	801c8ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c888:	9b01      	ldr	r3, [sp, #4]
 801c88a:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 801c88e:	445b      	add	r3, fp
 801c890:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801c894:	9b01      	ldr	r3, [sp, #4]
 801c896:	3301      	adds	r3, #1
 801c898:	b29b      	uxth	r3, r3
 801c89a:	9907      	ldr	r1, [sp, #28]
 801c89c:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 801c8a0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801c8a4:	7108      	strb	r0, [r1, #4]
 801c8a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c8a8:	80c8      	strh	r0, [r1, #6]
 801c8aa:	9801      	ldr	r0, [sp, #4]
 801c8ac:	3001      	adds	r0, #1
 801c8ae:	7148      	strb	r0, [r1, #5]
 801c8b0:	9907      	ldr	r1, [sp, #28]
 801c8b2:	3101      	adds	r1, #1
 801c8b4:	b289      	uxth	r1, r1
 801c8b6:	9107      	str	r1, [sp, #28]
 801c8b8:	e7df      	b.n	801c87a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801c8ba:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801c8be:	4611      	mov	r1, r2
 801c8c0:	795b      	ldrb	r3, [r3, #5]
 801c8c2:	f603 0004 	addw	r0, r3, #2052	; 0x804
 801c8c6:	4458      	add	r0, fp
 801c8c8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c8ca:	4406      	add	r6, r0
 801c8cc:	2e00      	cmp	r6, #0
 801c8ce:	dd06      	ble.n	801c8de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 801c8d0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801c8d4:	790e      	ldrb	r6, [r1, #4]
 801c8d6:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801c8da:	88c9      	ldrh	r1, [r1, #6]
 801c8dc:	e7f4      	b.n	801c8c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 801c8de:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 801c8e2:	b29b      	uxth	r3, r3
 801c8e4:	e7c5      	b.n	801c872 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 801c8e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c8e8:	920b      	str	r2, [sp, #44]	; 0x2c
 801c8ea:	4621      	mov	r1, r4
 801c8ec:	469e      	mov	lr, r3
 801c8ee:	e78f      	b.n	801c810 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 801c8f0:	9a03      	ldr	r2, [sp, #12]
 801c8f2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801c8f6:	442a      	add	r2, r5
 801c8f8:	ebae 0305 	sub.w	r3, lr, r5
 801c8fc:	b292      	uxth	r2, r2
 801c8fe:	b29b      	uxth	r3, r3
 801c900:	9203      	str	r2, [sp, #12]
 801c902:	2500      	movs	r5, #0
 801c904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c906:	4542      	cmp	r2, r8
 801c908:	d88e      	bhi.n	801c828 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 801c90a:	4621      	mov	r1, r4
 801c90c:	e74e      	b.n	801c7ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801c90e:	458e      	cmp	lr, r1
 801c910:	bf29      	itett	cs
 801c912:	ebae 0301 	subcs.w	r3, lr, r1
 801c916:	eba1 040e 	subcc.w	r4, r1, lr
 801c91a:	b29b      	uxthcs	r3, r3
 801c91c:	910c      	strcs	r1, [sp, #48]	; 0x30
 801c91e:	bf2f      	iteee	cs
 801c920:	462c      	movcs	r4, r5
 801c922:	b2a4      	uxthcc	r4, r4
 801c924:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 801c928:	462b      	movcc	r3, r5
 801c92a:	f04f 0900 	mov.w	r9, #0
 801c92e:	9a03      	ldr	r2, [sp, #12]
 801c930:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c932:	444a      	add	r2, r9
 801c934:	4548      	cmp	r0, r9
 801c936:	b292      	uxth	r2, r2
 801c938:	d074      	beq.n	801ca24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>
 801c93a:	445a      	add	r2, fp
 801c93c:	2004      	movs	r0, #4
 801c93e:	4605      	mov	r5, r0
 801c940:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801c944:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c946:	fb15 0202 	smlabb	r2, r5, r2, r0
 801c94a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c94c:	5880      	ldr	r0, [r0, r2]
 801c94e:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801c952:	d014      	beq.n	801c97e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 801c954:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c958:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801c95c:	d112      	bne.n	801c984 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 801c95e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c960:	2aff      	cmp	r2, #255	; 0xff
 801c962:	d10f      	bne.n	801c984 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 801c964:	0942      	lsrs	r2, r0, #5
 801c966:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801c96a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c96e:	f025 0507 	bic.w	r5, r5, #7
 801c972:	4315      	orrs	r5, r2
 801c974:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c978:	4305      	orrs	r5, r0
 801c97a:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801c97e:	f109 0901 	add.w	r9, r9, #1
 801c982:	e7d4      	b.n	801c92e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x27e>
 801c984:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801c988:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c98c:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 801c990:	9215      	str	r2, [sp, #84]	; 0x54
 801c992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c994:	fb02 fa0a 	mul.w	sl, r2, sl
 801c998:	f10a 0201 	add.w	r2, sl, #1
 801c99c:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801c9a0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c9a4:	1212      	asrs	r2, r2, #8
 801c9a6:	fa1f fa82 	uxth.w	sl, r2
 801c9aa:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801c9ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c9b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c9b6:	43d2      	mvns	r2, r2
 801c9b8:	b2d2      	uxtb	r2, r2
 801c9ba:	fb16 f60a 	smulbb	r6, r6, sl
 801c9be:	fa5f fc8c 	uxtb.w	ip, ip
 801c9c2:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801c9c6:	b2c0      	uxtb	r0, r0
 801c9c8:	fb07 6702 	mla	r7, r7, r2, r6
 801c9cc:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801c9d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c9d2:	fb10 f00a 	smulbb	r0, r0, sl
 801c9d6:	fb0c 0002 	mla	r0, ip, r2, r0
 801c9da:	b2ed      	uxtb	r5, r5
 801c9dc:	b2bf      	uxth	r7, r7
 801c9de:	fb15 f50a 	smulbb	r5, r5, sl
 801c9e2:	b280      	uxth	r0, r0
 801c9e4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801c9e8:	fb06 5602 	mla	r6, r6, r2, r5
 801c9ec:	1c7a      	adds	r2, r7, #1
 801c9ee:	1c45      	adds	r5, r0, #1
 801c9f0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c9f4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c9f8:	b2b6      	uxth	r6, r6
 801c9fa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c9fe:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ca02:	432f      	orrs	r7, r5
 801ca04:	1c75      	adds	r5, r6, #1
 801ca06:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801ca0a:	096d      	lsrs	r5, r5, #5
 801ca0c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ca10:	432f      	orrs	r7, r5
 801ca12:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801ca16:	e7b2      	b.n	801c97e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 801ca18:	2002585c 	.word	0x2002585c
 801ca1c:	20025856 	.word	0x20025856
 801ca20:	fffff7fb 	.word	0xfffff7fb
 801ca24:	9203      	str	r2, [sp, #12]
 801ca26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca28:	458e      	cmp	lr, r1
 801ca2a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801ca2e:	f4ff af68 	bcc.w	801c902 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 801ca32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ca34:	9906      	ldr	r1, [sp, #24]
 801ca36:	8812      	ldrh	r2, [r2, #0]
 801ca38:	1a52      	subs	r2, r2, r1
 801ca3a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801ca3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ca40:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ca42:	3201      	adds	r2, #1
 801ca44:	428a      	cmp	r2, r1
 801ca46:	9209      	str	r2, [sp, #36]	; 0x24
 801ca48:	d111      	bne.n	801ca6e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3be>
 801ca4a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801ca4e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801ca52:	9b06      	ldr	r3, [sp, #24]
 801ca54:	eba5 0509 	sub.w	r5, r5, r9
 801ca58:	b2ad      	uxth	r5, r5
 801ca5a:	2d00      	cmp	r5, #0
 801ca5c:	bf08      	it	eq
 801ca5e:	4619      	moveq	r1, r3
 801ca60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca62:	bf18      	it	ne
 801ca64:	2100      	movne	r1, #0
 801ca66:	3301      	adds	r3, #1
 801ca68:	930d      	str	r3, [sp, #52]	; 0x34
 801ca6a:	b289      	uxth	r1, r1
 801ca6c:	e695      	b.n	801c79a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801ca6e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801ca72:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801ca76:	1b2d      	subs	r5, r5, r4
 801ca78:	b2ad      	uxth	r5, r5
 801ca7a:	2d00      	cmp	r5, #0
 801ca7c:	bf18      	it	ne
 801ca7e:	2400      	movne	r4, #0
 801ca80:	e740      	b.n	801c904 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 801ca82:	4b04      	ldr	r3, [pc, #16]	; (801ca94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 801ca84:	6818      	ldr	r0, [r3, #0]
 801ca86:	6803      	ldr	r3, [r0, #0]
 801ca88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca8a:	4798      	blx	r3
 801ca8c:	b01d      	add	sp, #116	; 0x74
 801ca8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca92:	bf00      	nop
 801ca94:	2002585c 	.word	0x2002585c

0801ca98 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca9c:	b09f      	sub	sp, #124	; 0x7c
 801ca9e:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801caa2:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801caa6:	920a      	str	r2, [sp, #40]	; 0x28
 801caa8:	461d      	mov	r5, r3
 801caaa:	4604      	mov	r4, r0
 801caac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801caae:	2a00      	cmp	r2, #0
 801cab0:	f000 81fa 	beq.w	801cea8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x410>
 801cab4:	6828      	ldr	r0, [r5, #0]
 801cab6:	6869      	ldr	r1, [r5, #4]
 801cab8:	aa1a      	add	r2, sp, #104	; 0x68
 801caba:	c203      	stmia	r2!, {r0, r1}
 801cabc:	6818      	ldr	r0, [r3, #0]
 801cabe:	6859      	ldr	r1, [r3, #4]
 801cac0:	aa1c      	add	r2, sp, #112	; 0x70
 801cac2:	c203      	stmia	r2!, {r0, r1}
 801cac4:	a81a      	add	r0, sp, #104	; 0x68
 801cac6:	f7f8 fed1 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801caca:	4629      	mov	r1, r5
 801cacc:	a81c      	add	r0, sp, #112	; 0x70
 801cace:	f7f8 fef5 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cad2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801cad6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801cada:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 801cade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cae2:	bfd7      	itett	le
 801cae4:	b29a      	uxthle	r2, r3
 801cae6:	2201      	movgt	r2, #1
 801cae8:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801caec:	fb91 f2f2 	sdivle	r2, r1, r2
 801caf0:	9201      	str	r2, [sp, #4]
 801caf2:	9801      	ldr	r0, [sp, #4]
 801caf4:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801caf8:	fb92 f0f0 	sdiv	r0, r2, r0
 801cafc:	b280      	uxth	r0, r0
 801cafe:	9010      	str	r0, [sp, #64]	; 0x40
 801cb00:	9901      	ldr	r1, [sp, #4]
 801cb02:	9801      	ldr	r0, [sp, #4]
 801cb04:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801cb06:	440e      	add	r6, r1
 801cb08:	fb05 2510 	mls	r5, r5, r0, r2
 801cb0c:	fb15 f503 	smulbb	r5, r5, r3
 801cb10:	3e01      	subs	r6, #1
 801cb12:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801cb16:	fb96 f6f1 	sdiv	r6, r6, r1
 801cb1a:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801cb1e:	440d      	add	r5, r1
 801cb20:	4419      	add	r1, r3
 801cb22:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801cb26:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801cb2a:	441a      	add	r2, r3
 801cb2c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801cb30:	9304      	str	r3, [sp, #16]
 801cb32:	4b96      	ldr	r3, [pc, #600]	; (801cd8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801cb34:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801cb38:	6818      	ldr	r0, [r3, #0]
 801cb3a:	6803      	ldr	r3, [r0, #0]
 801cb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb3e:	4798      	blx	r3
 801cb40:	4b93      	ldr	r3, [pc, #588]	; (801cd90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801cb42:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801cb46:	881a      	ldrh	r2, [r3, #0]
 801cb48:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 801cb4c:	9318      	str	r3, [sp, #96]	; 0x60
 801cb4e:	fb02 c101 	mla	r1, r2, r1, ip
 801cb52:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801cb56:	4357      	muls	r7, r2
 801cb58:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801cb5c:	3601      	adds	r6, #1
 801cb5e:	920b      	str	r2, [sp, #44]	; 0x2c
 801cb60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb62:	4b8c      	ldr	r3, [pc, #560]	; (801cd94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801cb64:	b2b6      	uxth	r6, r6
 801cb66:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cb6a:	1d32      	adds	r2, r6, #4
 801cb6c:	9206      	str	r2, [sp, #24]
 801cb6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cb70:	43d2      	mvns	r2, r2
 801cb72:	b2d2      	uxtb	r2, r2
 801cb74:	b2ad      	uxth	r5, r5
 801cb76:	9215      	str	r2, [sp, #84]	; 0x54
 801cb78:	9a04      	ldr	r2, [sp, #16]
 801cb7a:	2d00      	cmp	r5, #0
 801cb7c:	bf0c      	ite	eq
 801cb7e:	4611      	moveq	r1, r2
 801cb80:	2100      	movne	r1, #0
 801cb82:	2200      	movs	r2, #0
 801cb84:	1b1b      	subs	r3, r3, r4
 801cb86:	b289      	uxth	r1, r1
 801cb88:	920d      	str	r2, [sp, #52]	; 0x34
 801cb8a:	9319      	str	r3, [sp, #100]	; 0x64
 801cb8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb90:	fa12 f383 	uxtah	r3, r2, r3
 801cb94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cb9a:	3304      	adds	r3, #4
 801cb9c:	9307      	str	r3, [sp, #28]
 801cb9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cba0:	455b      	cmp	r3, fp
 801cba2:	f240 817c 	bls.w	801ce9e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x406>
 801cba6:	9a01      	ldr	r2, [sp, #4]
 801cba8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801cbac:	fbb5 f3f3 	udiv	r3, r5, r3
 801cbb0:	1ad3      	subs	r3, r2, r3
 801cbb2:	b29b      	uxth	r3, r3
 801cbb4:	9316      	str	r3, [sp, #88]	; 0x58
 801cbb6:	9b07      	ldr	r3, [sp, #28]
 801cbb8:	9807      	ldr	r0, [sp, #28]
 801cbba:	785a      	ldrb	r2, [r3, #1]
 801cbbc:	789b      	ldrb	r3, [r3, #2]
 801cbbe:	7800      	ldrb	r0, [r0, #0]
 801cbc0:	9011      	str	r0, [sp, #68]	; 0x44
 801cbc2:	021b      	lsls	r3, r3, #8
 801cbc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cbc8:	9a07      	ldr	r2, [sp, #28]
 801cbca:	78d2      	ldrb	r2, [r2, #3]
 801cbcc:	4313      	orrs	r3, r2
 801cbce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cbd0:	3001      	adds	r0, #1
 801cbd2:	441a      	add	r2, r3
 801cbd4:	9005      	str	r0, [sp, #20]
 801cbd6:	1c50      	adds	r0, r2, #1
 801cbd8:	9003      	str	r0, [sp, #12]
 801cbda:	7852      	ldrb	r2, [r2, #1]
 801cbdc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cbde:	0212      	lsls	r2, r2, #8
 801cbe0:	5cc3      	ldrb	r3, [r0, r3]
 801cbe2:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801cbe6:	431a      	orrs	r2, r3
 801cbe8:	b293      	uxth	r3, r2
 801cbea:	930c      	str	r3, [sp, #48]	; 0x30
 801cbec:	2300      	movs	r3, #0
 801cbee:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801cbf2:	9308      	str	r3, [sp, #32]
 801cbf4:	461a      	mov	r2, r3
 801cbf6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801cbfa:	930e      	str	r3, [sp, #56]	; 0x38
 801cbfc:	f04f 0801 	mov.w	r8, #1
 801cc00:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801cc04:	f8cd 8008 	str.w	r8, [sp, #8]
 801cc08:	46c4      	mov	ip, r8
 801cc0a:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc0c:	2d00      	cmp	r5, #0
 801cc0e:	d07c      	beq.n	801cd0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801cc10:	45ac      	cmp	ip, r5
 801cc12:	d26c      	bcs.n	801ccee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801cc14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc16:	eba5 050c 	sub.w	r5, r5, ip
 801cc1a:	455b      	cmp	r3, fp
 801cc1c:	b2ad      	uxth	r5, r5
 801cc1e:	4608      	mov	r0, r1
 801cc20:	d802      	bhi.n	801cc28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 801cc22:	e070      	b.n	801cd06 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d15c      	bne.n	801cce2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 801cc28:	9b03      	ldr	r3, [sp, #12]
 801cc2a:	9a02      	ldr	r2, [sp, #8]
 801cc2c:	785b      	ldrb	r3, [r3, #1]
 801cc2e:	9902      	ldr	r1, [sp, #8]
 801cc30:	f1c2 0207 	rsb	r2, r2, #7
 801cc34:	4093      	lsls	r3, r2
 801cc36:	005b      	lsls	r3, r3, #1
 801cc38:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801cc3c:	9b03      	ldr	r3, [sp, #12]
 801cc3e:	781b      	ldrb	r3, [r3, #0]
 801cc40:	410b      	asrs	r3, r1
 801cc42:	3101      	adds	r1, #1
 801cc44:	b2c9      	uxtb	r1, r1
 801cc46:	2908      	cmp	r1, #8
 801cc48:	9102      	str	r1, [sp, #8]
 801cc4a:	9903      	ldr	r1, [sp, #12]
 801cc4c:	bf0a      	itet	eq
 801cc4e:	3102      	addeq	r1, #2
 801cc50:	3101      	addne	r1, #1
 801cc52:	9103      	streq	r1, [sp, #12]
 801cc54:	b2db      	uxtb	r3, r3
 801cc56:	bf0a      	itet	eq
 801cc58:	2100      	moveq	r1, #0
 801cc5a:	9103      	strne	r1, [sp, #12]
 801cc5c:	9102      	streq	r1, [sp, #8]
 801cc5e:	4313      	orrs	r3, r2
 801cc60:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cc62:	b29a      	uxth	r2, r3
 801cc64:	4291      	cmp	r1, r2
 801cc66:	d30a      	bcc.n	801cc7e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e6>
 801cc68:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801cc6c:	2301      	movs	r3, #1
 801cc6e:	9905      	ldr	r1, [sp, #20]
 801cc70:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801cc74:	d30f      	bcc.n	801cc96 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1fe>
 801cc76:	2100      	movs	r1, #0
 801cc78:	4698      	mov	r8, r3
 801cc7a:	9100      	str	r1, [sp, #0]
 801cc7c:	e032      	b.n	801cce4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24c>
 801cc7e:	9b05      	ldr	r3, [sp, #20]
 801cc80:	429a      	cmp	r2, r3
 801cc82:	d318      	bcc.n	801ccb6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801cc84:	eb04 0308 	add.w	r3, r4, r8
 801cc88:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 801cc8c:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801cc90:	f108 0301 	add.w	r3, r8, #1
 801cc94:	b29b      	uxth	r3, r3
 801cc96:	9905      	ldr	r1, [sp, #20]
 801cc98:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801cc9c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801cca0:	710e      	strb	r6, [r1, #4]
 801cca2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801cca4:	80ce      	strh	r6, [r1, #6]
 801cca6:	f108 0601 	add.w	r6, r8, #1
 801ccaa:	714e      	strb	r6, [r1, #5]
 801ccac:	9905      	ldr	r1, [sp, #20]
 801ccae:	3101      	adds	r1, #1
 801ccb0:	b289      	uxth	r1, r1
 801ccb2:	9105      	str	r1, [sp, #20]
 801ccb4:	e7df      	b.n	801cc76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1de>
 801ccb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ccba:	4611      	mov	r1, r2
 801ccbc:	795b      	ldrb	r3, [r3, #5]
 801ccbe:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801ccc2:	4426      	add	r6, r4
 801ccc4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801ccc6:	4437      	add	r7, r6
 801ccc8:	2f00      	cmp	r7, #0
 801ccca:	dd06      	ble.n	801ccda <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 801cccc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ccd0:	790f      	ldrb	r7, [r1, #4]
 801ccd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ccd6:	88c9      	ldrh	r1, [r1, #6]
 801ccd8:	e7f4      	b.n	801ccc4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22c>
 801ccda:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801ccde:	b29b      	uxth	r3, r3
 801cce0:	e7c5      	b.n	801cc6e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801cce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cce4:	920c      	str	r2, [sp, #48]	; 0x30
 801cce6:	4601      	mov	r1, r0
 801cce8:	9a00      	ldr	r2, [sp, #0]
 801ccea:	469c      	mov	ip, r3
 801ccec:	e78e      	b.n	801cc0c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801ccee:	1957      	adds	r7, r2, r5
 801ccf0:	ebac 0305 	sub.w	r3, ip, r5
 801ccf4:	b2ba      	uxth	r2, r7
 801ccf6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801ccfa:	9200      	str	r2, [sp, #0]
 801ccfc:	b29b      	uxth	r3, r3
 801ccfe:	2500      	movs	r5, #0
 801cd00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cd02:	455a      	cmp	r2, fp
 801cd04:	d88e      	bhi.n	801cc24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 801cd06:	4601      	mov	r1, r0
 801cd08:	e749      	b.n	801cb9e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x106>
 801cd0a:	458c      	cmp	ip, r1
 801cd0c:	bf2c      	ite	cs
 801cd0e:	4628      	movcs	r0, r5
 801cd10:	462b      	movcc	r3, r5
 801cd12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801cd14:	bf27      	ittee	cs
 801cd16:	9109      	strcs	r1, [sp, #36]	; 0x24
 801cd18:	ebac 0301 	subcs.w	r3, ip, r1
 801cd1c:	eba1 000c 	subcc.w	r0, r1, ip
 801cd20:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 801cd24:	bf2c      	ite	cs
 801cd26:	b29b      	uxthcs	r3, r3
 801cd28:	b280      	uxthcc	r0, r0
 801cd2a:	2dff      	cmp	r5, #255	; 0xff
 801cd2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801cd2e:	eb02 0705 	add.w	r7, r2, r5
 801cd32:	b2bd      	uxth	r5, r7
 801cd34:	9500      	str	r5, [sp, #0]
 801cd36:	d12f      	bne.n	801cd98 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>
 801cd38:	465e      	mov	r6, fp
 801cd3a:	9d00      	ldr	r5, [sp, #0]
 801cd3c:	42aa      	cmp	r2, r5
 801cd3e:	f040 8084 	bne.w	801ce4a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b2>
 801cd42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd44:	458c      	cmp	ip, r1
 801cd46:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801cd4a:	d3d8      	bcc.n	801ccfe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x266>
 801cd4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cd4e:	9904      	ldr	r1, [sp, #16]
 801cd50:	8812      	ldrh	r2, [r2, #0]
 801cd52:	1a52      	subs	r2, r2, r1
 801cd54:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801cd58:	9a08      	ldr	r2, [sp, #32]
 801cd5a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cd5c:	3201      	adds	r2, #1
 801cd5e:	428a      	cmp	r2, r1
 801cd60:	9208      	str	r2, [sp, #32]
 801cd62:	f040 8092 	bne.w	801ce8a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f2>
 801cd66:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801cd6a:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 801cd6e:	9b04      	ldr	r3, [sp, #16]
 801cd70:	eba5 050c 	sub.w	r5, r5, ip
 801cd74:	b2ad      	uxth	r5, r5
 801cd76:	2d00      	cmp	r5, #0
 801cd78:	bf08      	it	eq
 801cd7a:	4619      	moveq	r1, r3
 801cd7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd7e:	bf18      	it	ne
 801cd80:	2100      	movne	r1, #0
 801cd82:	3301      	adds	r3, #1
 801cd84:	930d      	str	r3, [sp, #52]	; 0x34
 801cd86:	b289      	uxth	r1, r1
 801cd88:	e700      	b.n	801cb8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 801cd8a:	bf00      	nop
 801cd8c:	2002585c 	.word	0x2002585c
 801cd90:	20025856 	.word	0x20025856
 801cd94:	fffff7fb 	.word	0xfffff7fb
 801cd98:	46d9      	mov	r9, fp
 801cd9a:	9d00      	ldr	r5, [sp, #0]
 801cd9c:	42aa      	cmp	r2, r5
 801cd9e:	d0d0      	beq.n	801cd42 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2aa>
 801cda0:	1c55      	adds	r5, r2, #1
 801cda2:	4422      	add	r2, r4
 801cda4:	9517      	str	r5, [sp, #92]	; 0x5c
 801cda6:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 801cdaa:	9a06      	ldr	r2, [sp, #24]
 801cdac:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cdb0:	4472      	add	r2, lr
 801cdb2:	9212      	str	r2, [sp, #72]	; 0x48
 801cdb4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801cdb6:	f8b9 2000 	ldrh.w	r2, [r9]
 801cdba:	f897 a002 	ldrb.w	sl, [r7, #2]
 801cdbe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801cdc0:	1216      	asrs	r6, r2, #8
 801cdc2:	fb1a fa07 	smulbb	sl, sl, r7
 801cdc6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cdca:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cdcc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cdd0:	fb06 a607 	mla	r6, r6, r7, sl
 801cdd4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801cdd6:	f897 a001 	ldrb.w	sl, [r7, #1]
 801cdda:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801cddc:	10d5      	asrs	r5, r2, #3
 801cdde:	fb1a fa07 	smulbb	sl, sl, r7
 801cde2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cde6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cde8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801cdec:	fb05 a507 	mla	r5, r5, r7, sl
 801cdf0:	9f06      	ldr	r7, [sp, #24]
 801cdf2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801cdf6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801cdf8:	00d2      	lsls	r2, r2, #3
 801cdfa:	fb1e fe07 	smulbb	lr, lr, r7
 801cdfe:	b2d2      	uxtb	r2, r2
 801ce00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ce02:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ce06:	b2b6      	uxth	r6, r6
 801ce08:	fb02 e207 	mla	r2, r2, r7, lr
 801ce0c:	b292      	uxth	r2, r2
 801ce0e:	b2ad      	uxth	r5, r5
 801ce10:	f106 0a01 	add.w	sl, r6, #1
 801ce14:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801ce18:	f102 0e01 	add.w	lr, r2, #1
 801ce1c:	f105 0a01 	add.w	sl, r5, #1
 801ce20:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801ce24:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ce28:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ce2c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801ce30:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ce34:	ea4e 0606 	orr.w	r6, lr, r6
 801ce38:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ce3c:	ea46 060a 	orr.w	r6, r6, sl
 801ce40:	f829 6b02 	strh.w	r6, [r9], #2
 801ce44:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801ce48:	e7a7      	b.n	801cd9a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x302>
 801ce4a:	f102 0e01 	add.w	lr, r2, #1
 801ce4e:	4422      	add	r2, r4
 801ce50:	9f06      	ldr	r7, [sp, #24]
 801ce52:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 801ce56:	9a06      	ldr	r2, [sp, #24]
 801ce58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce5c:	eb02 0a05 	add.w	sl, r2, r5
 801ce60:	4a13      	ldr	r2, [pc, #76]	; (801ceb0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>)
 801ce62:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ce66:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801ce6a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ce6e:	00d2      	lsls	r2, r2, #3
 801ce70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ce74:	ea49 0202 	orr.w	r2, r9, r2
 801ce78:	f817 9005 	ldrb.w	r9, [r7, r5]
 801ce7c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801ce80:	f826 2b02 	strh.w	r2, [r6], #2
 801ce84:	fa1f f28e 	uxth.w	r2, lr
 801ce88:	e757      	b.n	801cd3a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a2>
 801ce8a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801ce8e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801ce92:	1a2d      	subs	r5, r5, r0
 801ce94:	b2ad      	uxth	r5, r5
 801ce96:	2d00      	cmp	r5, #0
 801ce98:	bf18      	it	ne
 801ce9a:	2000      	movne	r0, #0
 801ce9c:	e730      	b.n	801cd00 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801ce9e:	4b05      	ldr	r3, [pc, #20]	; (801ceb4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 801cea0:	6818      	ldr	r0, [r3, #0]
 801cea2:	6803      	ldr	r3, [r0, #0]
 801cea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cea6:	4798      	blx	r3
 801cea8:	b01f      	add	sp, #124	; 0x7c
 801ceaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceae:	bf00      	nop
 801ceb0:	fffff800 	.word	0xfffff800
 801ceb4:	2002585c 	.word	0x2002585c

0801ceb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801ceb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cebc:	b091      	sub	sp, #68	; 0x44
 801cebe:	469b      	mov	fp, r3
 801cec0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801cec4:	4616      	mov	r6, r2
 801cec6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801ceca:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cece:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801ced2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ced6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ceda:	4604      	mov	r4, r0
 801cedc:	460d      	mov	r5, r1
 801cede:	4640      	mov	r0, r8
 801cee0:	4659      	mov	r1, fp
 801cee2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801cee6:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801ceea:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801ceee:	f7f5 fb6d 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 801cef2:	4631      	mov	r1, r6
 801cef4:	4640      	mov	r0, r8
 801cef6:	f7f5 fb69 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 801cefa:	4b74      	ldr	r3, [pc, #464]	; (801d0cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801cefc:	8818      	ldrh	r0, [r3, #0]
 801cefe:	4b74      	ldr	r3, [pc, #464]	; (801d0d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801cf00:	8819      	ldrh	r1, [r3, #0]
 801cf02:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	b202      	sxth	r2, r0
 801cf0a:	b20e      	sxth	r6, r1
 801cf0c:	da07      	bge.n	801cf1e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801cf0e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801cf12:	4463      	add	r3, ip
 801cf14:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801cf18:	2300      	movs	r3, #0
 801cf1a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801cf1e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801cf22:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cf26:	1ad2      	subs	r2, r2, r3
 801cf28:	4594      	cmp	ip, r2
 801cf2a:	bfc4      	itt	gt
 801cf2c:	1ac2      	subgt	r2, r0, r3
 801cf2e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801cf32:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801cf36:	2a00      	cmp	r2, #0
 801cf38:	da07      	bge.n	801cf4a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801cf3a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801cf3e:	4462      	add	r2, ip
 801cf40:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801cf44:	2200      	movs	r2, #0
 801cf46:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801cf4a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801cf4e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801cf52:	eba6 060a 	sub.w	r6, r6, sl
 801cf56:	42b2      	cmp	r2, r6
 801cf58:	bfc4      	itt	gt
 801cf5a:	eba1 020a 	subgt.w	r2, r1, sl
 801cf5e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801cf62:	4a5c      	ldr	r2, [pc, #368]	; (801d0d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801cf64:	7812      	ldrb	r2, [r2, #0]
 801cf66:	b9a2      	cbnz	r2, 801cf92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801cf68:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801cf6c:	4286      	cmp	r6, r0
 801cf6e:	4640      	mov	r0, r8
 801cf70:	9303      	str	r3, [sp, #12]
 801cf72:	bf14      	ite	ne
 801cf74:	2600      	movne	r6, #0
 801cf76:	2601      	moveq	r6, #1
 801cf78:	f7f5 fb6b 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf7c:	9b03      	ldr	r3, [sp, #12]
 801cf7e:	b160      	cbz	r0, 801cf9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801cf80:	2300      	movs	r3, #0
 801cf82:	8023      	strh	r3, [r4, #0]
 801cf84:	8063      	strh	r3, [r4, #2]
 801cf86:	80a3      	strh	r3, [r4, #4]
 801cf88:	4620      	mov	r0, r4
 801cf8a:	80e3      	strh	r3, [r4, #6]
 801cf8c:	b011      	add	sp, #68	; 0x44
 801cf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf92:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801cf96:	428e      	cmp	r6, r1
 801cf98:	e7e9      	b.n	801cf6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801cf9a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801cf9e:	9205      	str	r2, [sp, #20]
 801cfa0:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801cfa4:	9206      	str	r2, [sp, #24]
 801cfa6:	f8bb 2000 	ldrh.w	r2, [fp]
 801cfaa:	900e      	str	r0, [sp, #56]	; 0x38
 801cfac:	1a9b      	subs	r3, r3, r2
 801cfae:	b21b      	sxth	r3, r3
 801cfb0:	9303      	str	r3, [sp, #12]
 801cfb2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801cfb6:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801cfba:	ebaa 0a03 	sub.w	sl, sl, r3
 801cfbe:	fa0f f38a 	sxth.w	r3, sl
 801cfc2:	9304      	str	r3, [sp, #16]
 801cfc4:	9b03      	ldr	r3, [sp, #12]
 801cfc6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801cfca:	9b04      	ldr	r3, [sp, #16]
 801cfcc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cfd0:	9b05      	ldr	r3, [sp, #20]
 801cfd2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801cfd6:	a90e      	add	r1, sp, #56	; 0x38
 801cfd8:	9b06      	ldr	r3, [sp, #24]
 801cfda:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801cfde:	a80c      	add	r0, sp, #48	; 0x30
 801cfe0:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801cfe4:	f7f8 fc6a 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cfe8:	4640      	mov	r0, r8
 801cfea:	f7f8 fc3f 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cfee:	a80e      	add	r0, sp, #56	; 0x38
 801cff0:	f7f8 fc3c 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cff4:	4b38      	ldr	r3, [pc, #224]	; (801d0d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801cff6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801cffa:	881b      	ldrh	r3, [r3, #0]
 801cffc:	9307      	str	r3, [sp, #28]
 801cffe:	682b      	ldr	r3, [r5, #0]
 801d000:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801d0dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801d004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d006:	4628      	mov	r0, r5
 801d008:	4798      	blx	r3
 801d00a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801d00e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d012:	4681      	mov	r9, r0
 801d014:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801d018:	f8db 0000 	ldr.w	r0, [fp]
 801d01c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801d01e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d022:	6803      	ldr	r3, [r0, #0]
 801d024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d026:	4798      	blx	r3
 801d028:	4607      	mov	r7, r0
 801d02a:	f8db 0000 	ldr.w	r0, [fp]
 801d02e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d032:	6803      	ldr	r3, [r0, #0]
 801d034:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d038:	9109      	str	r1, [sp, #36]	; 0x24
 801d03a:	9208      	str	r2, [sp, #32]
 801d03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d03e:	4798      	blx	r3
 801d040:	f010 0f01 	tst.w	r0, #1
 801d044:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d048:	d012      	beq.n	801d070 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801d04a:	f8db 0000 	ldr.w	r0, [fp]
 801d04e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d052:	6803      	ldr	r3, [r0, #0]
 801d054:	9200      	str	r2, [sp, #0]
 801d056:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801d058:	e898 0006 	ldmia.w	r8, {r1, r2}
 801d05c:	462b      	mov	r3, r5
 801d05e:	47b0      	blx	r6
 801d060:	9b03      	ldr	r3, [sp, #12]
 801d062:	8023      	strh	r3, [r4, #0]
 801d064:	9b04      	ldr	r3, [sp, #16]
 801d066:	8063      	strh	r3, [r4, #2]
 801d068:	9b05      	ldr	r3, [sp, #20]
 801d06a:	80a3      	strh	r3, [r4, #4]
 801d06c:	9b06      	ldr	r3, [sp, #24]
 801d06e:	e78b      	b.n	801cf88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801d070:	fb09 f202 	mul.w	r2, r9, r2
 801d074:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d078:	440f      	add	r7, r1
 801d07a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801d07e:	b166      	cbz	r6, 801d09a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801d080:	9a07      	ldr	r2, [sp, #28]
 801d082:	4592      	cmp	sl, r2
 801d084:	d109      	bne.n	801d09a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801d086:	f8db 0000 	ldr.w	r0, [fp]
 801d08a:	6802      	ldr	r2, [r0, #0]
 801d08c:	fb09 f303 	mul.w	r3, r9, r3
 801d090:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801d092:	4629      	mov	r1, r5
 801d094:	463a      	mov	r2, r7
 801d096:	47b0      	blx	r6
 801d098:	e7e2      	b.n	801d060 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801d09a:	fb0a f303 	mul.w	r3, sl, r3
 801d09e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801d0dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801d0a2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801d0a6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801d0aa:	4545      	cmp	r5, r8
 801d0ac:	d2d8      	bcs.n	801d060 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801d0ae:	f8db 0000 	ldr.w	r0, [fp]
 801d0b2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d0b6:	6802      	ldr	r2, [r0, #0]
 801d0b8:	4629      	mov	r1, r5
 801d0ba:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801d0be:	005b      	lsls	r3, r3, #1
 801d0c0:	463a      	mov	r2, r7
 801d0c2:	47d0      	blx	sl
 801d0c4:	444f      	add	r7, r9
 801d0c6:	4435      	add	r5, r6
 801d0c8:	e7ef      	b.n	801d0aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801d0ca:	bf00      	nop
 801d0cc:	20025850 	.word	0x20025850
 801d0d0:	20025852 	.word	0x20025852
 801d0d4:	20025854 	.word	0x20025854
 801d0d8:	20025856 	.word	0x20025856
 801d0dc:	2002585c 	.word	0x2002585c

0801d0e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0e2:	4606      	mov	r6, r0
 801d0e4:	b087      	sub	sp, #28
 801d0e6:	460c      	mov	r4, r1
 801d0e8:	4617      	mov	r7, r2
 801d0ea:	461d      	mov	r5, r3
 801d0ec:	b333      	cbz	r3, 801d13c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d0ee:	4608      	mov	r0, r1
 801d0f0:	f7f5 faaf 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d0f4:	bb10      	cbnz	r0, 801d13c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d0f6:	6820      	ldr	r0, [r4, #0]
 801d0f8:	6861      	ldr	r1, [r4, #4]
 801d0fa:	4c1c      	ldr	r4, [pc, #112]	; (801d16c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801d0fc:	ab04      	add	r3, sp, #16
 801d0fe:	c303      	stmia	r3!, {r0, r1}
 801d100:	a804      	add	r0, sp, #16
 801d102:	f7f8 fbb3 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d106:	6820      	ldr	r0, [r4, #0]
 801d108:	6803      	ldr	r3, [r0, #0]
 801d10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d10c:	4798      	blx	r3
 801d10e:	2dff      	cmp	r5, #255	; 0xff
 801d110:	d016      	beq.n	801d140 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d112:	f010 0f08 	tst.w	r0, #8
 801d116:	6820      	ldr	r0, [r4, #0]
 801d118:	d015      	beq.n	801d146 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801d11a:	2400      	movs	r4, #0
 801d11c:	6801      	ldr	r1, [r0, #0]
 801d11e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d122:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d126:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801d12a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d12e:	9401      	str	r4, [sp, #4]
 801d130:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d134:	9400      	str	r4, [sp, #0]
 801d136:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801d138:	4639      	mov	r1, r7
 801d13a:	47a0      	blx	r4
 801d13c:	b007      	add	sp, #28
 801d13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d140:	f010 0f02 	tst.w	r0, #2
 801d144:	e7e7      	b.n	801d116 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801d146:	6803      	ldr	r3, [r0, #0]
 801d148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d14a:	4798      	blx	r3
 801d14c:	4b08      	ldr	r3, [pc, #32]	; (801d170 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801d14e:	881a      	ldrh	r2, [r3, #0]
 801d150:	6833      	ldr	r3, [r6, #0]
 801d152:	e9cd 7500 	strd	r7, r5, [sp]
 801d156:	4601      	mov	r1, r0
 801d158:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801d15a:	4630      	mov	r0, r6
 801d15c:	ab04      	add	r3, sp, #16
 801d15e:	47a8      	blx	r5
 801d160:	6820      	ldr	r0, [r4, #0]
 801d162:	6803      	ldr	r3, [r0, #0]
 801d164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d166:	4798      	blx	r3
 801d168:	e7e8      	b.n	801d13c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d16a:	bf00      	nop
 801d16c:	2002585c 	.word	0x2002585c
 801d170:	20025856 	.word	0x20025856

0801d174 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d178:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801d17c:	9e08      	ldr	r6, [sp, #32]
 801d17e:	4688      	mov	r8, r1
 801d180:	4614      	mov	r4, r2
 801d182:	461d      	mov	r5, r3
 801d184:	2f00      	cmp	r7, #0
 801d186:	f000 80a9 	beq.w	801d2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d18a:	4618      	mov	r0, r3
 801d18c:	f7f5 fa61 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d190:	2800      	cmp	r0, #0
 801d192:	f040 80a3 	bne.w	801d2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d196:	f9b5 1000 	ldrsh.w	r1, [r5]
 801d19a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801d19e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801d1a2:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801d1a6:	fb04 1303 	mla	r3, r4, r3, r1
 801d1aa:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801d1ae:	4365      	muls	r5, r4
 801d1b0:	2fff      	cmp	r7, #255	; 0xff
 801d1b2:	eba4 0200 	sub.w	r2, r4, r0
 801d1b6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801d1ba:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801d1be:	d04a      	beq.n	801d256 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801d1c0:	b2bc      	uxth	r4, r7
 801d1c2:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801d1c6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801d1ca:	fa5f f788 	uxtb.w	r7, r8
 801d1ce:	b2f3      	uxtb	r3, r6
 801d1d0:	0040      	lsls	r0, r0, #1
 801d1d2:	fb0e fe04 	mul.w	lr, lr, r4
 801d1d6:	4367      	muls	r7, r4
 801d1d8:	4363      	muls	r3, r4
 801d1da:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801d1de:	fa1f fc8c 	uxth.w	ip, ip
 801d1e2:	42a9      	cmp	r1, r5
 801d1e4:	d27a      	bcs.n	801d2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d1e6:	eb01 0900 	add.w	r9, r1, r0
 801d1ea:	4549      	cmp	r1, r9
 801d1ec:	d231      	bcs.n	801d252 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801d1ee:	880a      	ldrh	r2, [r1, #0]
 801d1f0:	1214      	asrs	r4, r2, #8
 801d1f2:	10d6      	asrs	r6, r2, #3
 801d1f4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d1f8:	00d2      	lsls	r2, r2, #3
 801d1fa:	b2d2      	uxtb	r2, r2
 801d1fc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801d200:	fb14 f40c 	smulbb	r4, r4, ip
 801d204:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d208:	4474      	add	r4, lr
 801d20a:	fb12 f20c 	smulbb	r2, r2, ip
 801d20e:	b2a4      	uxth	r4, r4
 801d210:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d214:	441a      	add	r2, r3
 801d216:	b292      	uxth	r2, r2
 801d218:	f104 0a01 	add.w	sl, r4, #1
 801d21c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801d220:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d224:	fb16 f60c 	smulbb	r6, r6, ip
 801d228:	f102 0a01 	add.w	sl, r2, #1
 801d22c:	443e      	add	r6, r7
 801d22e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801d232:	b2b6      	uxth	r6, r6
 801d234:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d238:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d23c:	4322      	orrs	r2, r4
 801d23e:	1c74      	adds	r4, r6, #1
 801d240:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801d244:	0976      	lsrs	r6, r6, #5
 801d246:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d24a:	4332      	orrs	r2, r6
 801d24c:	f821 2b02 	strh.w	r2, [r1], #2
 801d250:	e7cb      	b.n	801d1ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801d252:	4441      	add	r1, r8
 801d254:	e7c5      	b.n	801d1e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801d256:	4f22      	ldr	r7, [pc, #136]	; (801d2e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801d258:	0973      	lsrs	r3, r6, #5
 801d25a:	ea08 0707 	and.w	r7, r8, r7
 801d25e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d262:	433b      	orrs	r3, r7
 801d264:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d268:	4333      	orrs	r3, r6
 801d26a:	07e7      	lsls	r7, r4, #31
 801d26c:	b29b      	uxth	r3, r3
 801d26e:	d50b      	bpl.n	801d288 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801d270:	0040      	lsls	r0, r0, #1
 801d272:	0052      	lsls	r2, r2, #1
 801d274:	42a9      	cmp	r1, r5
 801d276:	d231      	bcs.n	801d2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d278:	180c      	adds	r4, r1, r0
 801d27a:	42a1      	cmp	r1, r4
 801d27c:	d202      	bcs.n	801d284 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801d27e:	f821 3b02 	strh.w	r3, [r1], #2
 801d282:	e7fa      	b.n	801d27a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801d284:	4411      	add	r1, r2
 801d286:	e7f5      	b.n	801d274 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801d288:	078e      	lsls	r6, r1, #30
 801d28a:	d008      	beq.n	801d29e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801d28c:	0066      	lsls	r6, r4, #1
 801d28e:	460a      	mov	r2, r1
 801d290:	42aa      	cmp	r2, r5
 801d292:	d202      	bcs.n	801d29a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801d294:	8013      	strh	r3, [r2, #0]
 801d296:	4432      	add	r2, r6
 801d298:	e7fa      	b.n	801d290 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801d29a:	3102      	adds	r1, #2
 801d29c:	3801      	subs	r0, #1
 801d29e:	07c2      	lsls	r2, r0, #31
 801d2a0:	d50b      	bpl.n	801d2ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801d2a2:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801d2a6:	3a01      	subs	r2, #1
 801d2a8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801d2ac:	0066      	lsls	r6, r4, #1
 801d2ae:	42aa      	cmp	r2, r5
 801d2b0:	d202      	bcs.n	801d2b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801d2b2:	8013      	strh	r3, [r2, #0]
 801d2b4:	4432      	add	r2, r6
 801d2b6:	e7fa      	b.n	801d2ae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801d2b8:	3801      	subs	r0, #1
 801d2ba:	b178      	cbz	r0, 801d2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d2bc:	1040      	asrs	r0, r0, #1
 801d2be:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801d2c2:	0080      	lsls	r0, r0, #2
 801d2c4:	0064      	lsls	r4, r4, #1
 801d2c6:	42a9      	cmp	r1, r5
 801d2c8:	d208      	bcs.n	801d2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d2ca:	180e      	adds	r6, r1, r0
 801d2cc:	460a      	mov	r2, r1
 801d2ce:	42b2      	cmp	r2, r6
 801d2d0:	d202      	bcs.n	801d2d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801d2d2:	f842 3b04 	str.w	r3, [r2], #4
 801d2d6:	e7fa      	b.n	801d2ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801d2d8:	4421      	add	r1, r4
 801d2da:	e7f4      	b.n	801d2c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801d2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2e0:	00fff800 	.word	0x00fff800

0801d2e4 <_ZN8touchgfx8LCD16bppC1Ev>:
 801d2e4:	2200      	movs	r2, #0
 801d2e6:	4912      	ldr	r1, [pc, #72]	; (801d330 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801d2e8:	6042      	str	r2, [r0, #4]
 801d2ea:	6001      	str	r1, [r0, #0]
 801d2ec:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d2f0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d2f4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d2f8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d2fc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d300:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d304:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d308:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d30c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d310:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d314:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801d318:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801d31c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801d320:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801d324:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 801d328:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801d32c:	4770      	bx	lr
 801d32e:	bf00      	nop
 801d330:	08029ba8 	.word	0x08029ba8

0801d334 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d338:	460d      	mov	r5, r1
 801d33a:	b08d      	sub	sp, #52	; 0x34
 801d33c:	4604      	mov	r4, r0
 801d33e:	6808      	ldr	r0, [r1, #0]
 801d340:	6849      	ldr	r1, [r1, #4]
 801d342:	4699      	mov	r9, r3
 801d344:	ab08      	add	r3, sp, #32
 801d346:	c303      	stmia	r3!, {r0, r1}
 801d348:	6810      	ldr	r0, [r2, #0]
 801d34a:	6851      	ldr	r1, [r2, #4]
 801d34c:	ab0a      	add	r3, sp, #40	; 0x28
 801d34e:	c303      	stmia	r3!, {r0, r1}
 801d350:	a808      	add	r0, sp, #32
 801d352:	f7f8 fa8b 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d356:	4629      	mov	r1, r5
 801d358:	a80a      	add	r0, sp, #40	; 0x28
 801d35a:	f7f8 faaf 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d35e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d362:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d366:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d36a:	4d63      	ldr	r5, [pc, #396]	; (801d4f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d36c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801d370:	6828      	ldr	r0, [r5, #0]
 801d372:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d376:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d37a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d37e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d382:	440a      	add	r2, r1
 801d384:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d388:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d38c:	4413      	add	r3, r2
 801d38e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d392:	6803      	ldr	r3, [r0, #0]
 801d394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d396:	4798      	blx	r3
 801d398:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d39c:	d119      	bne.n	801d3d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801d39e:	f010 0f20 	tst.w	r0, #32
 801d3a2:	6828      	ldr	r0, [r5, #0]
 801d3a4:	d018      	beq.n	801d3d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801d3a6:	2500      	movs	r5, #0
 801d3a8:	6801      	ldr	r1, [r0, #0]
 801d3aa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d3ae:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d3b2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801d3b6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d3ba:	9502      	str	r5, [sp, #8]
 801d3bc:	b2b6      	uxth	r6, r6
 801d3be:	fa1f f588 	uxth.w	r5, r8
 801d3c2:	9601      	str	r6, [sp, #4]
 801d3c4:	9500      	str	r5, [sp, #0]
 801d3c6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801d3c8:	4621      	mov	r1, r4
 801d3ca:	47a8      	blx	r5
 801d3cc:	b00d      	add	sp, #52	; 0x34
 801d3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d3d6:	e7e4      	b.n	801d3a2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d3d8:	6803      	ldr	r3, [r0, #0]
 801d3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3dc:	4798      	blx	r3
 801d3de:	4947      	ldr	r1, [pc, #284]	; (801d4fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801d3e0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d3e4:	880b      	ldrh	r3, [r1, #0]
 801d3e6:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801d3ea:	fb03 5202 	mla	r2, r3, r2, r5
 801d3ee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d3f2:	4373      	muls	r3, r6
 801d3f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d3f8:	9307      	str	r3, [sp, #28]
 801d3fa:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d3fe:	9306      	str	r3, [sp, #24]
 801d400:	468a      	mov	sl, r1
 801d402:	9b07      	ldr	r3, [sp, #28]
 801d404:	4298      	cmp	r0, r3
 801d406:	d270      	bcs.n	801d4ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801d408:	9b06      	ldr	r3, [sp, #24]
 801d40a:	4621      	mov	r1, r4
 801d40c:	eb00 0b03 	add.w	fp, r0, r3
 801d410:	4558      	cmp	r0, fp
 801d412:	d25d      	bcs.n	801d4d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801d414:	f851 4b04 	ldr.w	r4, [r1], #4
 801d418:	0e23      	lsrs	r3, r4, #24
 801d41a:	d014      	beq.n	801d446 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d41c:	2bff      	cmp	r3, #255	; 0xff
 801d41e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801d422:	d112      	bne.n	801d44a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d424:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d428:	d10f      	bne.n	801d44a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d42a:	0963      	lsrs	r3, r4, #5
 801d42c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801d430:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d434:	f02c 0c07 	bic.w	ip, ip, #7
 801d438:	ea43 0c0c 	orr.w	ip, r3, ip
 801d43c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d440:	ea4c 0404 	orr.w	r4, ip, r4
 801d444:	8004      	strh	r4, [r0, #0]
 801d446:	3002      	adds	r0, #2
 801d448:	e7e2      	b.n	801d410 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801d44a:	fb09 f303 	mul.w	r3, r9, r3
 801d44e:	8807      	ldrh	r7, [r0, #0]
 801d450:	1c5a      	adds	r2, r3, #1
 801d452:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801d456:	1212      	asrs	r2, r2, #8
 801d458:	123e      	asrs	r6, r7, #8
 801d45a:	b293      	uxth	r3, r2
 801d45c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801d460:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d464:	43d2      	mvns	r2, r2
 801d466:	b2d2      	uxtb	r2, r2
 801d468:	10fd      	asrs	r5, r7, #3
 801d46a:	fb1e fe03 	smulbb	lr, lr, r3
 801d46e:	00ff      	lsls	r7, r7, #3
 801d470:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d474:	fb06 e602 	mla	r6, r6, r2, lr
 801d478:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d47c:	b2ff      	uxtb	r7, r7
 801d47e:	fa5f fc8c 	uxtb.w	ip, ip
 801d482:	b2e4      	uxtb	r4, r4
 801d484:	b2b6      	uxth	r6, r6
 801d486:	fb1c fc03 	smulbb	ip, ip, r3
 801d48a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d48e:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d492:	fb14 f403 	smulbb	r4, r4, r3
 801d496:	fb05 c502 	mla	r5, r5, r2, ip
 801d49a:	f106 0e01 	add.w	lr, r6, #1
 801d49e:	fb07 4702 	mla	r7, r7, r2, r4
 801d4a2:	b2ad      	uxth	r5, r5
 801d4a4:	b2bf      	uxth	r7, r7
 801d4a6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801d4aa:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801d4ae:	f105 0c01 	add.w	ip, r5, #1
 801d4b2:	1c7e      	adds	r6, r7, #1
 801d4b4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d4b8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d4bc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d4c0:	096d      	lsrs	r5, r5, #5
 801d4c2:	ea46 060e 	orr.w	r6, r6, lr
 801d4c6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d4ca:	432e      	orrs	r6, r5
 801d4cc:	8006      	strh	r6, [r0, #0]
 801d4ce:	e7ba      	b.n	801d446 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d4d0:	f8ba 3000 	ldrh.w	r3, [sl]
 801d4d4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801d4d8:	eba3 0308 	sub.w	r3, r3, r8
 801d4dc:	eba4 0408 	sub.w	r4, r4, r8
 801d4e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d4e4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d4e8:	e78b      	b.n	801d402 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801d4ea:	4b03      	ldr	r3, [pc, #12]	; (801d4f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d4ec:	6818      	ldr	r0, [r3, #0]
 801d4ee:	6803      	ldr	r3, [r0, #0]
 801d4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4f2:	4798      	blx	r3
 801d4f4:	e76a      	b.n	801d3cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801d4f6:	bf00      	nop
 801d4f8:	2002585c 	.word	0x2002585c
 801d4fc:	20025856 	.word	0x20025856

0801d500 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801d500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d504:	460c      	mov	r4, r1
 801d506:	b085      	sub	sp, #20
 801d508:	6810      	ldr	r0, [r2, #0]
 801d50a:	6851      	ldr	r1, [r2, #4]
 801d50c:	466d      	mov	r5, sp
 801d50e:	c503      	stmia	r5!, {r0, r1}
 801d510:	6818      	ldr	r0, [r3, #0]
 801d512:	6859      	ldr	r1, [r3, #4]
 801d514:	4616      	mov	r6, r2
 801d516:	c503      	stmia	r5!, {r0, r1}
 801d518:	4668      	mov	r0, sp
 801d51a:	f7f8 f9a7 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d51e:	4631      	mov	r1, r6
 801d520:	a802      	add	r0, sp, #8
 801d522:	f7f8 f9cb 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d526:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801d52a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801d52e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d532:	4d28      	ldr	r5, [pc, #160]	; (801d5d4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801d534:	4e28      	ldr	r6, [pc, #160]	; (801d5d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801d536:	6828      	ldr	r0, [r5, #0]
 801d538:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d53c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801d540:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d544:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d548:	f8bd 1000 	ldrh.w	r1, [sp]
 801d54c:	440a      	add	r2, r1
 801d54e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d552:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d556:	4413      	add	r3, r2
 801d558:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d55c:	6803      	ldr	r3, [r0, #0]
 801d55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d560:	4798      	blx	r3
 801d562:	8833      	ldrh	r3, [r6, #0]
 801d564:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d568:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d56c:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801d5dc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801d570:	fb03 1202 	mla	r2, r3, r2, r1
 801d574:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d578:	fb08 f303 	mul.w	r3, r8, r3
 801d57c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d580:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801d584:	4298      	cmp	r0, r3
 801d586:	d21d      	bcs.n	801d5c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801d588:	eb00 080c 	add.w	r8, r0, ip
 801d58c:	4540      	cmp	r0, r8
 801d58e:	d20f      	bcs.n	801d5b0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801d590:	f854 1b04 	ldr.w	r1, [r4], #4
 801d594:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801d598:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801d59c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d5a0:	ea42 0209 	orr.w	r2, r2, r9
 801d5a4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d5a8:	430a      	orrs	r2, r1
 801d5aa:	f820 2b02 	strh.w	r2, [r0], #2
 801d5ae:	e7ed      	b.n	801d58c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801d5b0:	8832      	ldrh	r2, [r6, #0]
 801d5b2:	1bd2      	subs	r2, r2, r7
 801d5b4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d5b8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d5bc:	1bd2      	subs	r2, r2, r7
 801d5be:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801d5c2:	e7df      	b.n	801d584 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801d5c4:	6828      	ldr	r0, [r5, #0]
 801d5c6:	6803      	ldr	r3, [r0, #0]
 801d5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5ca:	4798      	blx	r3
 801d5cc:	b005      	add	sp, #20
 801d5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5d2:	bf00      	nop
 801d5d4:	2002585c 	.word	0x2002585c
 801d5d8:	20025856 	.word	0x20025856
 801d5dc:	fffff800 	.word	0xfffff800

0801d5e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801d5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d5e4:	460e      	mov	r6, r1
 801d5e6:	b08e      	sub	sp, #56	; 0x38
 801d5e8:	4604      	mov	r4, r0
 801d5ea:	6808      	ldr	r0, [r1, #0]
 801d5ec:	6849      	ldr	r1, [r1, #4]
 801d5ee:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801d7c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801d5f2:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801d7cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801d5f6:	461d      	mov	r5, r3
 801d5f8:	ab0a      	add	r3, sp, #40	; 0x28
 801d5fa:	c303      	stmia	r3!, {r0, r1}
 801d5fc:	6810      	ldr	r0, [r2, #0]
 801d5fe:	6851      	ldr	r1, [r2, #4]
 801d600:	ab0c      	add	r3, sp, #48	; 0x30
 801d602:	c303      	stmia	r3!, {r0, r1}
 801d604:	a80a      	add	r0, sp, #40	; 0x28
 801d606:	f7f8 f931 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d60a:	4631      	mov	r1, r6
 801d60c:	a80c      	add	r0, sp, #48	; 0x30
 801d60e:	f7f8 f955 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d612:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d616:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d61a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d61e:	f8d8 0000 	ldr.w	r0, [r8]
 801d622:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d626:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801d62a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d62e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d632:	440c      	add	r4, r1
 801d634:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d638:	440a      	add	r2, r1
 801d63a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d63e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d642:	4413      	add	r3, r2
 801d644:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d648:	6803      	ldr	r3, [r0, #0]
 801d64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d64c:	4798      	blx	r3
 801d64e:	2dff      	cmp	r5, #255	; 0xff
 801d650:	d124      	bne.n	801d69c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801d652:	f010 0f01 	tst.w	r0, #1
 801d656:	f8d8 0000 	ldr.w	r0, [r8]
 801d65a:	d022      	beq.n	801d6a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801d65c:	2100      	movs	r1, #0
 801d65e:	f8d0 c000 	ldr.w	ip, [r0]
 801d662:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d666:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d66a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801d66e:	f04f 0e01 	mov.w	lr, #1
 801d672:	f8cd e018 	str.w	lr, [sp, #24]
 801d676:	f8b9 e000 	ldrh.w	lr, [r9]
 801d67a:	9503      	str	r5, [sp, #12]
 801d67c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d680:	b2b6      	uxth	r6, r6
 801d682:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d686:	9102      	str	r1, [sp, #8]
 801d688:	b2bf      	uxth	r7, r7
 801d68a:	9601      	str	r6, [sp, #4]
 801d68c:	9700      	str	r7, [sp, #0]
 801d68e:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801d692:	4621      	mov	r1, r4
 801d694:	47a8      	blx	r5
 801d696:	b00e      	add	sp, #56	; 0x38
 801d698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d69c:	f010 0f04 	tst.w	r0, #4
 801d6a0:	e7d9      	b.n	801d656 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801d6a2:	6803      	ldr	r3, [r0, #0]
 801d6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6a6:	4798      	blx	r3
 801d6a8:	f8b9 3000 	ldrh.w	r3, [r9]
 801d6ac:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d6b0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d6b4:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d6b8:	fb03 1202 	mla	r2, r3, r2, r1
 801d6bc:	ebac 0c07 	sub.w	ip, ip, r7
 801d6c0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d6c4:	435e      	muls	r6, r3
 801d6c6:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801d6ca:	2dff      	cmp	r5, #255	; 0xff
 801d6cc:	eba3 0707 	sub.w	r7, r3, r7
 801d6d0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d6d4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d6d8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801d6dc:	d049      	beq.n	801d772 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801d6de:	43eb      	mvns	r3, r5
 801d6e0:	fa1f f985 	uxth.w	r9, r5
 801d6e4:	b2db      	uxtb	r3, r3
 801d6e6:	42b0      	cmp	r0, r6
 801d6e8:	d266      	bcs.n	801d7b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d6ea:	eb00 0a0e 	add.w	sl, r0, lr
 801d6ee:	4550      	cmp	r0, sl
 801d6f0:	4621      	mov	r1, r4
 801d6f2:	f104 0403 	add.w	r4, r4, #3
 801d6f6:	d25b      	bcs.n	801d7b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801d6f8:	8802      	ldrh	r2, [r0, #0]
 801d6fa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d6fe:	ea4f 2822 	mov.w	r8, r2, asr #8
 801d702:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801d706:	fb11 f109 	smulbb	r1, r1, r9
 801d70a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801d70e:	10d5      	asrs	r5, r2, #3
 801d710:	fb08 1803 	mla	r8, r8, r3, r1
 801d714:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801d718:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d71c:	fb11 f109 	smulbb	r1, r1, r9
 801d720:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d724:	fb05 1503 	mla	r5, r5, r3, r1
 801d728:	00d2      	lsls	r2, r2, #3
 801d72a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d72e:	b2d2      	uxtb	r2, r2
 801d730:	fb11 f109 	smulbb	r1, r1, r9
 801d734:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d738:	fa1f f888 	uxth.w	r8, r8
 801d73c:	fb02 1203 	mla	r2, r2, r3, r1
 801d740:	b292      	uxth	r2, r2
 801d742:	f108 0101 	add.w	r1, r8, #1
 801d746:	b2ad      	uxth	r5, r5
 801d748:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d74c:	1c51      	adds	r1, r2, #1
 801d74e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d752:	1c69      	adds	r1, r5, #1
 801d754:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d758:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801d75c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d760:	096d      	lsrs	r5, r5, #5
 801d762:	ea42 0208 	orr.w	r2, r2, r8
 801d766:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d76a:	432a      	orrs	r2, r5
 801d76c:	f820 2b02 	strh.w	r2, [r0], #2
 801d770:	e7bd      	b.n	801d6ee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801d772:	4a14      	ldr	r2, [pc, #80]	; (801d7c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801d774:	42b0      	cmp	r0, r6
 801d776:	d21f      	bcs.n	801d7b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d778:	eb00 050e 	add.w	r5, r0, lr
 801d77c:	42a8      	cmp	r0, r5
 801d77e:	4621      	mov	r1, r4
 801d780:	f104 0403 	add.w	r4, r4, #3
 801d784:	d210      	bcs.n	801d7a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801d786:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801d78a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d78e:	00db      	lsls	r3, r3, #3
 801d790:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801d794:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d798:	430b      	orrs	r3, r1
 801d79a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d79e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801d7a2:	f820 3b02 	strh.w	r3, [r0], #2
 801d7a6:	e7e9      	b.n	801d77c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801d7a8:	4438      	add	r0, r7
 801d7aa:	eb01 040c 	add.w	r4, r1, ip
 801d7ae:	e7e1      	b.n	801d774 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801d7b0:	4438      	add	r0, r7
 801d7b2:	eb01 040c 	add.w	r4, r1, ip
 801d7b6:	e796      	b.n	801d6e6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801d7b8:	4b03      	ldr	r3, [pc, #12]	; (801d7c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801d7ba:	6818      	ldr	r0, [r3, #0]
 801d7bc:	6803      	ldr	r3, [r0, #0]
 801d7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7c0:	4798      	blx	r3
 801d7c2:	e768      	b.n	801d696 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801d7c4:	fffff800 	.word	0xfffff800
 801d7c8:	2002585c 	.word	0x2002585c
 801d7cc:	20025856 	.word	0x20025856

0801d7d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d7d0:	b4f0      	push	{r4, r5, r6, r7}
 801d7d2:	4616      	mov	r6, r2
 801d7d4:	2e01      	cmp	r6, #1
 801d7d6:	461c      	mov	r4, r3
 801d7d8:	460d      	mov	r5, r1
 801d7da:	9a04      	ldr	r2, [sp, #16]
 801d7dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d7e0:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801d7e4:	d012      	beq.n	801d80c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801d7e6:	d303      	bcc.n	801d7f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801d7e8:	2e02      	cmp	r6, #2
 801d7ea:	d00a      	beq.n	801d802 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801d7ec:	bcf0      	pop	{r4, r5, r6, r7}
 801d7ee:	4770      	bx	lr
 801d7f0:	6805      	ldr	r5, [r0, #0]
 801d7f2:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801d7f6:	68ed      	ldr	r5, [r5, #12]
 801d7f8:	4613      	mov	r3, r2
 801d7fa:	46ac      	mov	ip, r5
 801d7fc:	4622      	mov	r2, r4
 801d7fe:	bcf0      	pop	{r4, r5, r6, r7}
 801d800:	4760      	bx	ip
 801d802:	4621      	mov	r1, r4
 801d804:	4628      	mov	r0, r5
 801d806:	bcf0      	pop	{r4, r5, r6, r7}
 801d808:	f7ff bd94 	b.w	801d334 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d80c:	4621      	mov	r1, r4
 801d80e:	4628      	mov	r0, r5
 801d810:	bcf0      	pop	{r4, r5, r6, r7}
 801d812:	f7ff bee5 	b.w	801d5e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801d818 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d81c:	4681      	mov	r9, r0
 801d81e:	b093      	sub	sp, #76	; 0x4c
 801d820:	6810      	ldr	r0, [r2, #0]
 801d822:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801d826:	4f6d      	ldr	r7, [pc, #436]	; (801d9dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801d828:	4688      	mov	r8, r1
 801d82a:	6851      	ldr	r1, [r2, #4]
 801d82c:	ac0e      	add	r4, sp, #56	; 0x38
 801d82e:	c403      	stmia	r4!, {r0, r1}
 801d830:	6818      	ldr	r0, [r3, #0]
 801d832:	6859      	ldr	r1, [r3, #4]
 801d834:	ac10      	add	r4, sp, #64	; 0x40
 801d836:	4616      	mov	r6, r2
 801d838:	c403      	stmia	r4!, {r0, r1}
 801d83a:	a80e      	add	r0, sp, #56	; 0x38
 801d83c:	f7f8 f816 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d840:	4631      	mov	r1, r6
 801d842:	a810      	add	r0, sp, #64	; 0x40
 801d844:	f7f8 f83a 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d848:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d84c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d850:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d854:	4e62      	ldr	r6, [pc, #392]	; (801d9e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d856:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801d85a:	6830      	ldr	r0, [r6, #0]
 801d85c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801d860:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d864:	4489      	add	r9, r1
 801d866:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d86a:	440a      	add	r2, r1
 801d86c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d870:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d874:	4413      	add	r3, r2
 801d876:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d87a:	6803      	ldr	r3, [r0, #0]
 801d87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d87e:	4798      	blx	r3
 801d880:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d884:	6830      	ldr	r0, [r6, #0]
 801d886:	d01d      	beq.n	801d8c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d888:	2200      	movs	r2, #0
 801d88a:	6801      	ldr	r1, [r0, #0]
 801d88c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d890:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d894:	220b      	movs	r2, #11
 801d896:	9207      	str	r2, [sp, #28]
 801d898:	883a      	ldrh	r2, [r7, #0]
 801d89a:	9206      	str	r2, [sp, #24]
 801d89c:	2201      	movs	r2, #1
 801d89e:	e9cd a204 	strd	sl, r2, [sp, #16]
 801d8a2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d8a6:	9203      	str	r2, [sp, #12]
 801d8a8:	b2a4      	uxth	r4, r4
 801d8aa:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d8ae:	9200      	str	r2, [sp, #0]
 801d8b0:	b2ad      	uxth	r5, r5
 801d8b2:	9502      	str	r5, [sp, #8]
 801d8b4:	9401      	str	r4, [sp, #4]
 801d8b6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d8b8:	4642      	mov	r2, r8
 801d8ba:	4649      	mov	r1, r9
 801d8bc:	47a0      	blx	r4
 801d8be:	b013      	add	sp, #76	; 0x4c
 801d8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8c4:	6803      	ldr	r3, [r0, #0]
 801d8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d8c8:	4798      	blx	r3
 801d8ca:	883b      	ldrh	r3, [r7, #0]
 801d8cc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801d8d0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801d8d4:	fb03 1202 	mla	r2, r3, r2, r1
 801d8d8:	435d      	muls	r5, r3
 801d8da:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d8de:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801d8e2:	920c      	str	r2, [sp, #48]	; 0x30
 801d8e4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d8e8:	1b12      	subs	r2, r2, r4
 801d8ea:	920d      	str	r2, [sp, #52]	; 0x34
 801d8ec:	0062      	lsls	r2, r4, #1
 801d8ee:	1b1c      	subs	r4, r3, r4
 801d8f0:	0063      	lsls	r3, r4, #1
 801d8f2:	920a      	str	r2, [sp, #40]	; 0x28
 801d8f4:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8f6:	f04f 0e04 	mov.w	lr, #4
 801d8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8fc:	4298      	cmp	r0, r3
 801d8fe:	d266      	bcs.n	801d9ce <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801d900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d902:	eb00 0b03 	add.w	fp, r0, r3
 801d906:	4558      	cmp	r0, fp
 801d908:	d25c      	bcs.n	801d9c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d90a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d90e:	fb1e e303 	smlabb	r3, lr, r3, lr
 801d912:	f858 2003 	ldr.w	r2, [r8, r3]
 801d916:	0e11      	lsrs	r1, r2, #24
 801d918:	d012      	beq.n	801d940 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d91a:	29ff      	cmp	r1, #255	; 0xff
 801d91c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801d920:	d110      	bne.n	801d944 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d922:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d926:	d10d      	bne.n	801d944 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d928:	0953      	lsrs	r3, r2, #5
 801d92a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801d92e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d932:	f027 0707 	bic.w	r7, r7, #7
 801d936:	431f      	orrs	r7, r3
 801d938:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d93c:	433a      	orrs	r2, r7
 801d93e:	8002      	strh	r2, [r0, #0]
 801d940:	3002      	adds	r0, #2
 801d942:	e7e0      	b.n	801d906 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801d944:	fb0a f101 	mul.w	r1, sl, r1
 801d948:	8806      	ldrh	r6, [r0, #0]
 801d94a:	1c4b      	adds	r3, r1, #1
 801d94c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801d950:	1235      	asrs	r5, r6, #8
 801d952:	10f4      	asrs	r4, r6, #3
 801d954:	121b      	asrs	r3, r3, #8
 801d956:	00f6      	lsls	r6, r6, #3
 801d958:	b299      	uxth	r1, r3
 801d95a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d95e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d962:	b2f6      	uxtb	r6, r6
 801d964:	43db      	mvns	r3, r3
 801d966:	b2d2      	uxtb	r2, r2
 801d968:	b2db      	uxtb	r3, r3
 801d96a:	fb1c fc01 	smulbb	ip, ip, r1
 801d96e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d972:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d976:	fb12 f201 	smulbb	r2, r2, r1
 801d97a:	fb05 c503 	mla	r5, r5, r3, ip
 801d97e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d982:	b2ff      	uxtb	r7, r7
 801d984:	fb06 2203 	mla	r2, r6, r3, r2
 801d988:	b2ad      	uxth	r5, r5
 801d98a:	fb17 f701 	smulbb	r7, r7, r1
 801d98e:	b292      	uxth	r2, r2
 801d990:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d994:	fb04 7403 	mla	r4, r4, r3, r7
 801d998:	f105 0c01 	add.w	ip, r5, #1
 801d99c:	1c57      	adds	r7, r2, #1
 801d99e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d9a2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d9a6:	b2a4      	uxth	r4, r4
 801d9a8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d9ac:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d9b0:	433d      	orrs	r5, r7
 801d9b2:	1c67      	adds	r7, r4, #1
 801d9b4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d9b8:	0964      	lsrs	r4, r4, #5
 801d9ba:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d9be:	4325      	orrs	r5, r4
 801d9c0:	8005      	strh	r5, [r0, #0]
 801d9c2:	e7bd      	b.n	801d940 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9c6:	4418      	add	r0, r3
 801d9c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d9ca:	4499      	add	r9, r3
 801d9cc:	e795      	b.n	801d8fa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801d9ce:	4b04      	ldr	r3, [pc, #16]	; (801d9e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d9d0:	6818      	ldr	r0, [r3, #0]
 801d9d2:	6803      	ldr	r3, [r0, #0]
 801d9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9d6:	4798      	blx	r3
 801d9d8:	e771      	b.n	801d8be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801d9da:	bf00      	nop
 801d9dc:	20025856 	.word	0x20025856
 801d9e0:	2002585c 	.word	0x2002585c

0801d9e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9e8:	b087      	sub	sp, #28
 801d9ea:	4680      	mov	r8, r0
 801d9ec:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d9f0:	460d      	mov	r5, r1
 801d9f2:	4614      	mov	r4, r2
 801d9f4:	2e00      	cmp	r6, #0
 801d9f6:	f000 80b9 	beq.w	801db6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801d9fa:	6810      	ldr	r0, [r2, #0]
 801d9fc:	6851      	ldr	r1, [r2, #4]
 801d9fe:	af02      	add	r7, sp, #8
 801da00:	c703      	stmia	r7!, {r0, r1}
 801da02:	6818      	ldr	r0, [r3, #0]
 801da04:	6859      	ldr	r1, [r3, #4]
 801da06:	af04      	add	r7, sp, #16
 801da08:	c703      	stmia	r7!, {r0, r1}
 801da0a:	a802      	add	r0, sp, #8
 801da0c:	f7f7 ff2e 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da10:	4621      	mov	r1, r4
 801da12:	a804      	add	r0, sp, #16
 801da14:	f7f7 ff52 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da18:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801da1c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801da20:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801da24:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801da28:	fb14 2103 	smlabb	r1, r4, r3, r2
 801da2c:	eb08 0401 	add.w	r4, r8, r1
 801da30:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801da34:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801da38:	440a      	add	r2, r1
 801da3a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801da3e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801da42:	4413      	add	r3, r2
 801da44:	f8ad 3012 	strh.w	r3, [sp, #18]
 801da48:	4b4a      	ldr	r3, [pc, #296]	; (801db74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801da4a:	6818      	ldr	r0, [r3, #0]
 801da4c:	6803      	ldr	r3, [r0, #0]
 801da4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da50:	4798      	blx	r3
 801da52:	4b49      	ldr	r3, [pc, #292]	; (801db78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801da54:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801da58:	881a      	ldrh	r2, [r3, #0]
 801da5a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801da5e:	2eff      	cmp	r6, #255	; 0xff
 801da60:	fb02 c101 	mla	r1, r2, r1, ip
 801da64:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801da68:	fb02 f207 	mul.w	r2, r2, r7
 801da6c:	f105 0104 	add.w	r1, r5, #4
 801da70:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801da74:	461d      	mov	r5, r3
 801da76:	d05a      	beq.n	801db2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801da78:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801da7c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801da80:	b2b6      	uxth	r6, r6
 801da82:	fa1f fe8e 	uxth.w	lr, lr
 801da86:	9301      	str	r3, [sp, #4]
 801da88:	4282      	cmp	r2, r0
 801da8a:	d96a      	bls.n	801db62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801da8c:	eb00 0b0a 	add.w	fp, r0, sl
 801da90:	4583      	cmp	fp, r0
 801da92:	d940      	bls.n	801db16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801da94:	f814 3b01 	ldrb.w	r3, [r4], #1
 801da98:	8805      	ldrh	r5, [r0, #0]
 801da9a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801da9e:	122f      	asrs	r7, r5, #8
 801daa0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801daa4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801daa8:	fb17 f70e 	smulbb	r7, r7, lr
 801daac:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801dab0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dab4:	00ed      	lsls	r5, r5, #3
 801dab6:	fb0c 7c06 	mla	ip, ip, r6, r7
 801daba:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801dabe:	10df      	asrs	r7, r3, #3
 801dac0:	b2ed      	uxtb	r5, r5
 801dac2:	00db      	lsls	r3, r3, #3
 801dac4:	fa1f fc8c 	uxth.w	ip, ip
 801dac8:	fb19 f90e 	smulbb	r9, r9, lr
 801dacc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dad0:	b2db      	uxtb	r3, r3
 801dad2:	fb15 f50e 	smulbb	r5, r5, lr
 801dad6:	fb07 9706 	mla	r7, r7, r6, r9
 801dada:	fb03 5306 	mla	r3, r3, r6, r5
 801dade:	f10c 0901 	add.w	r9, ip, #1
 801dae2:	b29b      	uxth	r3, r3
 801dae4:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801dae8:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801daec:	f103 0c01 	add.w	ip, r3, #1
 801daf0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801daf4:	b2bf      	uxth	r7, r7
 801daf6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801dafa:	ea4c 0c09 	orr.w	ip, ip, r9
 801dafe:	f107 0901 	add.w	r9, r7, #1
 801db02:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801db06:	097f      	lsrs	r7, r7, #5
 801db08:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801db0c:	ea4c 0c07 	orr.w	ip, ip, r7
 801db10:	f820 cb02 	strh.w	ip, [r0], #2
 801db14:	e7bc      	b.n	801da90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801db16:	9b01      	ldr	r3, [sp, #4]
 801db18:	881b      	ldrh	r3, [r3, #0]
 801db1a:	eba3 0308 	sub.w	r3, r3, r8
 801db1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801db22:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801db26:	eba3 0308 	sub.w	r3, r3, r8
 801db2a:	441c      	add	r4, r3
 801db2c:	e7ac      	b.n	801da88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801db2e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801db32:	4282      	cmp	r2, r0
 801db34:	d915      	bls.n	801db62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801db36:	eb00 060a 	add.w	r6, r0, sl
 801db3a:	4286      	cmp	r6, r0
 801db3c:	d906      	bls.n	801db4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801db3e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801db42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801db46:	f820 3b02 	strh.w	r3, [r0], #2
 801db4a:	e7f6      	b.n	801db3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801db4c:	882b      	ldrh	r3, [r5, #0]
 801db4e:	eba3 0308 	sub.w	r3, r3, r8
 801db52:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801db56:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801db5a:	eba3 0308 	sub.w	r3, r3, r8
 801db5e:	441c      	add	r4, r3
 801db60:	e7e7      	b.n	801db32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801db62:	4b04      	ldr	r3, [pc, #16]	; (801db74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801db64:	6818      	ldr	r0, [r3, #0]
 801db66:	6803      	ldr	r3, [r0, #0]
 801db68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db6a:	4798      	blx	r3
 801db6c:	b007      	add	sp, #28
 801db6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db72:	bf00      	nop
 801db74:	2002585c 	.word	0x2002585c
 801db78:	20025856 	.word	0x20025856

0801db7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801db7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db80:	b091      	sub	sp, #68	; 0x44
 801db82:	4680      	mov	r8, r0
 801db84:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801db88:	460f      	mov	r7, r1
 801db8a:	4614      	mov	r4, r2
 801db8c:	2d00      	cmp	r5, #0
 801db8e:	d051      	beq.n	801dc34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801db90:	6810      	ldr	r0, [r2, #0]
 801db92:	6851      	ldr	r1, [r2, #4]
 801db94:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801dd98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801db98:	ae0c      	add	r6, sp, #48	; 0x30
 801db9a:	c603      	stmia	r6!, {r0, r1}
 801db9c:	6818      	ldr	r0, [r3, #0]
 801db9e:	6859      	ldr	r1, [r3, #4]
 801dba0:	ae0e      	add	r6, sp, #56	; 0x38
 801dba2:	c603      	stmia	r6!, {r0, r1}
 801dba4:	a80c      	add	r0, sp, #48	; 0x30
 801dba6:	f7f7 fe61 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dbaa:	4621      	mov	r1, r4
 801dbac:	a80e      	add	r0, sp, #56	; 0x38
 801dbae:	f7f7 fe85 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dbb2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801dbb6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801dbba:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801dbbe:	f8d9 0000 	ldr.w	r0, [r9]
 801dbc2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801dbc6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801dbca:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dbce:	eb08 0401 	add.w	r4, r8, r1
 801dbd2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801dbd6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801dd9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801dbda:	440a      	add	r2, r1
 801dbdc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801dbe0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801dbe4:	4413      	add	r3, r2
 801dbe6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801dbea:	6803      	ldr	r3, [r0, #0]
 801dbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbee:	4798      	blx	r3
 801dbf0:	f010 0f80 	tst.w	r0, #128	; 0x80
 801dbf4:	f8d9 0000 	ldr.w	r0, [r9]
 801dbf8:	d01f      	beq.n	801dc3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	6801      	ldr	r1, [r0, #0]
 801dbfe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801dc02:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801dc06:	220b      	movs	r2, #11
 801dc08:	9207      	str	r2, [sp, #28]
 801dc0a:	f8b8 2000 	ldrh.w	r2, [r8]
 801dc0e:	9206      	str	r2, [sp, #24]
 801dc10:	2201      	movs	r2, #1
 801dc12:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801dc16:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801dc1a:	9203      	str	r2, [sp, #12]
 801dc1c:	fa1f f28a 	uxth.w	r2, sl
 801dc20:	9202      	str	r2, [sp, #8]
 801dc22:	b2b6      	uxth	r6, r6
 801dc24:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801dc28:	9200      	str	r2, [sp, #0]
 801dc2a:	9601      	str	r6, [sp, #4]
 801dc2c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801dc2e:	463a      	mov	r2, r7
 801dc30:	4621      	mov	r1, r4
 801dc32:	47a8      	blx	r5
 801dc34:	b011      	add	sp, #68	; 0x44
 801dc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc3a:	6803      	ldr	r3, [r0, #0]
 801dc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc3e:	4798      	blx	r3
 801dc40:	f8b8 2000 	ldrh.w	r2, [r8]
 801dc44:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801dc48:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801dc4c:	2dff      	cmp	r5, #255	; 0xff
 801dc4e:	fb02 1303 	mla	r3, r2, r3, r1
 801dc52:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dc56:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801dc5a:	fb0a fa02 	mul.w	sl, sl, r2
 801dc5e:	d062      	beq.n	801dd26 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801dc60:	ea6f 0c05 	mvn.w	ip, r5
 801dc64:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801dc68:	930a      	str	r3, [sp, #40]	; 0x28
 801dc6a:	b2ad      	uxth	r5, r5
 801dc6c:	fa5f fc8c 	uxtb.w	ip, ip
 801dc70:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801dc74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc76:	4298      	cmp	r0, r3
 801dc78:	f080 8085 	bcs.w	801dd86 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801dc7c:	eb00 0b09 	add.w	fp, r0, r9
 801dc80:	4558      	cmp	r0, fp
 801dc82:	d246      	bcs.n	801dd12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801dc84:	f814 eb01 	ldrb.w	lr, [r4], #1
 801dc88:	2303      	movs	r3, #3
 801dc8a:	2204      	movs	r2, #4
 801dc8c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801dc90:	eb07 0a0e 	add.w	sl, r7, lr
 801dc94:	8803      	ldrh	r3, [r0, #0]
 801dc96:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801dc9a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801dc9e:	1219      	asrs	r1, r3, #8
 801dca0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801dca4:	fb18 f805 	smulbb	r8, r8, r5
 801dca8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801dcac:	10da      	asrs	r2, r3, #3
 801dcae:	fb01 810c 	mla	r1, r1, ip, r8
 801dcb2:	00db      	lsls	r3, r3, #3
 801dcb4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801dcb8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801dcbc:	b2db      	uxtb	r3, r3
 801dcbe:	fb18 f805 	smulbb	r8, r8, r5
 801dcc2:	fb1e fe05 	smulbb	lr, lr, r5
 801dcc6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801dcca:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801dcce:	b289      	uxth	r1, r1
 801dcd0:	fb02 820c 	mla	r2, r2, ip, r8
 801dcd4:	fb03 e30c 	mla	r3, r3, ip, lr
 801dcd8:	b292      	uxth	r2, r2
 801dcda:	b29b      	uxth	r3, r3
 801dcdc:	f101 0801 	add.w	r8, r1, #1
 801dce0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dce4:	f103 0e01 	add.w	lr, r3, #1
 801dce8:	f102 0801 	add.w	r8, r2, #1
 801dcec:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801dcf0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801dcf4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801dcf8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801dcfc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801dd00:	ea4e 0101 	orr.w	r1, lr, r1
 801dd04:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801dd08:	ea41 0108 	orr.w	r1, r1, r8
 801dd0c:	f820 1b02 	strh.w	r1, [r0], #2
 801dd10:	e7b6      	b.n	801dc80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801dd12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd14:	881b      	ldrh	r3, [r3, #0]
 801dd16:	1b9b      	subs	r3, r3, r6
 801dd18:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dd1c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dd20:	1b9b      	subs	r3, r3, r6
 801dd22:	441c      	add	r4, r3
 801dd24:	e7a6      	b.n	801dc74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801dd26:	491b      	ldr	r1, [pc, #108]	; (801dd94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801dd28:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801dd2c:	2203      	movs	r2, #3
 801dd2e:	2504      	movs	r5, #4
 801dd30:	4550      	cmp	r0, sl
 801dd32:	d228      	bcs.n	801dd86 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801dd34:	eb00 0c09 	add.w	ip, r0, r9
 801dd38:	4560      	cmp	r0, ip
 801dd3a:	4623      	mov	r3, r4
 801dd3c:	d219      	bcs.n	801dd72 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801dd3e:	f893 e000 	ldrb.w	lr, [r3]
 801dd42:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801dd46:	eb07 0b0e 	add.w	fp, r7, lr
 801dd4a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801dd4e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801dd52:	f89b b001 	ldrb.w	fp, [fp, #1]
 801dd56:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801dd5a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801dd5e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801dd62:	ea43 030b 	orr.w	r3, r3, fp
 801dd66:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801dd6a:	3401      	adds	r4, #1
 801dd6c:	f820 3b02 	strh.w	r3, [r0], #2
 801dd70:	e7e2      	b.n	801dd38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801dd72:	f8b8 3000 	ldrh.w	r3, [r8]
 801dd76:	1b9b      	subs	r3, r3, r6
 801dd78:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dd7c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dd80:	1b9b      	subs	r3, r3, r6
 801dd82:	441c      	add	r4, r3
 801dd84:	e7d4      	b.n	801dd30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801dd86:	4b04      	ldr	r3, [pc, #16]	; (801dd98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801dd88:	6818      	ldr	r0, [r3, #0]
 801dd8a:	6803      	ldr	r3, [r0, #0]
 801dd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd8e:	4798      	blx	r3
 801dd90:	e750      	b.n	801dc34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801dd92:	bf00      	nop
 801dd94:	fffff800 	.word	0xfffff800
 801dd98:	2002585c 	.word	0x2002585c
 801dd9c:	20025856 	.word	0x20025856

0801dda0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801dda0:	b4f0      	push	{r4, r5, r6, r7}
 801dda2:	460c      	mov	r4, r1
 801dda4:	4611      	mov	r1, r2
 801dda6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801ddaa:	780f      	ldrb	r7, [r1, #0]
 801ddac:	784e      	ldrb	r6, [r1, #1]
 801ddae:	2f01      	cmp	r7, #1
 801ddb0:	461a      	mov	r2, r3
 801ddb2:	9b04      	ldr	r3, [sp, #16]
 801ddb4:	d036      	beq.n	801de24 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 801ddb6:	d31e      	bcc.n	801ddf6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 801ddb8:	2f02      	cmp	r7, #2
 801ddba:	d14a      	bne.n	801de52 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801ddbc:	2e03      	cmp	r6, #3
 801ddbe:	d848      	bhi.n	801de52 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801ddc0:	e8df f006 	tbb	[pc, r6]
 801ddc4:	16140702 	.word	0x16140702
 801ddc8:	9504      	str	r5, [sp, #16]
 801ddca:	4620      	mov	r0, r4
 801ddcc:	bcf0      	pop	{r4, r5, r6, r7}
 801ddce:	f7ff be09 	b.w	801d9e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801ddd2:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801ddd4:	2800      	cmp	r0, #0
 801ddd6:	d03c      	beq.n	801de52 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801ddd8:	6806      	ldr	r6, [r0, #0]
 801ddda:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801ddde:	68b5      	ldr	r5, [r6, #8]
 801dde0:	4613      	mov	r3, r2
 801dde2:	46ac      	mov	ip, r5
 801dde4:	460a      	mov	r2, r1
 801dde6:	4621      	mov	r1, r4
 801dde8:	bcf0      	pop	{r4, r5, r6, r7}
 801ddea:	4760      	bx	ip
 801ddec:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801ddee:	e7f1      	b.n	801ddd4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801ddf0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801ddf4:	e7ee      	b.n	801ddd4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801ddf6:	2e03      	cmp	r6, #3
 801ddf8:	d82b      	bhi.n	801de52 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801ddfa:	e8df f006 	tbb	[pc, r6]
 801ddfe:	0702      	.short	0x0702
 801de00:	100e      	.short	0x100e
 801de02:	9504      	str	r5, [sp, #16]
 801de04:	4620      	mov	r0, r4
 801de06:	bcf0      	pop	{r4, r5, r6, r7}
 801de08:	f7ff bd06 	b.w	801d818 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801de0c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801de0e:	b300      	cbz	r0, 801de52 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801de10:	6806      	ldr	r6, [r0, #0]
 801de12:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801de16:	68f5      	ldr	r5, [r6, #12]
 801de18:	e7e2      	b.n	801dde0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801de1a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801de1c:	e7f7      	b.n	801de0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 801de1e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801de22:	e7f4      	b.n	801de0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 801de24:	2e03      	cmp	r6, #3
 801de26:	d814      	bhi.n	801de52 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801de28:	e8df f006 	tbb	[pc, r6]
 801de2c:	100e0702 	.word	0x100e0702
 801de30:	9504      	str	r5, [sp, #16]
 801de32:	4620      	mov	r0, r4
 801de34:	bcf0      	pop	{r4, r5, r6, r7}
 801de36:	f7ff bea1 	b.w	801db7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801de3a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801de3c:	b148      	cbz	r0, 801de52 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801de3e:	6806      	ldr	r6, [r0, #0]
 801de40:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801de44:	6935      	ldr	r5, [r6, #16]
 801de46:	e7cb      	b.n	801dde0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801de48:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801de4a:	e7f7      	b.n	801de3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 801de4c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801de50:	e7f4      	b.n	801de3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 801de52:	bcf0      	pop	{r4, r5, r6, r7}
 801de54:	4770      	bx	lr
	...

0801de58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de5c:	4604      	mov	r4, r0
 801de5e:	b087      	sub	sp, #28
 801de60:	6810      	ldr	r0, [r2, #0]
 801de62:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801de66:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801e0a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801de6a:	460e      	mov	r6, r1
 801de6c:	6851      	ldr	r1, [r2, #4]
 801de6e:	ad02      	add	r5, sp, #8
 801de70:	c503      	stmia	r5!, {r0, r1}
 801de72:	6818      	ldr	r0, [r3, #0]
 801de74:	6859      	ldr	r1, [r3, #4]
 801de76:	ad04      	add	r5, sp, #16
 801de78:	4617      	mov	r7, r2
 801de7a:	c503      	stmia	r5!, {r0, r1}
 801de7c:	a802      	add	r0, sp, #8
 801de7e:	f7f7 fcf5 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de82:	4639      	mov	r1, r7
 801de84:	a804      	add	r0, sp, #16
 801de86:	f7f7 fd19 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de8a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801de8e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801de92:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801de96:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801de9a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801de9e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dea2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801dea6:	440e      	add	r6, r1
 801dea8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801deac:	440a      	add	r2, r1
 801deae:	f8ad 2010 	strh.w	r2, [sp, #16]
 801deb2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801deb6:	4413      	add	r3, r2
 801deb8:	f8ad 3012 	strh.w	r3, [sp, #18]
 801debc:	4b77      	ldr	r3, [pc, #476]	; (801e09c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801debe:	6818      	ldr	r0, [r3, #0]
 801dec0:	6803      	ldr	r3, [r0, #0]
 801dec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dec4:	4798      	blx	r3
 801dec6:	f8b9 b000 	ldrh.w	fp, [r9]
 801deca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dece:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ded2:	fb0b 2303 	mla	r3, fp, r3, r2
 801ded6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801deda:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dede:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dee2:	fb05 f50b 	mul.w	r5, r5, fp
 801dee6:	9300      	str	r3, [sp, #0]
 801dee8:	d069      	beq.n	801dfbe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801deea:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801deee:	4558      	cmp	r0, fp
 801def0:	f080 80cc 	bcs.w	801e08c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801def4:	9b00      	ldr	r3, [sp, #0]
 801def6:	18c3      	adds	r3, r0, r3
 801def8:	9301      	str	r3, [sp, #4]
 801defa:	4631      	mov	r1, r6
 801defc:	9b01      	ldr	r3, [sp, #4]
 801defe:	4298      	cmp	r0, r3
 801df00:	d24f      	bcs.n	801dfa2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801df02:	f811 2b01 	ldrb.w	r2, [r1], #1
 801df06:	2a00      	cmp	r2, #0
 801df08:	d048      	beq.n	801df9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801df0a:	fb0a f202 	mul.w	r2, sl, r2
 801df0e:	1c53      	adds	r3, r2, #1
 801df10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801df14:	121b      	asrs	r3, r3, #8
 801df16:	d041      	beq.n	801df9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801df18:	8802      	ldrh	r2, [r0, #0]
 801df1a:	f8b4 c000 	ldrh.w	ip, [r4]
 801df1e:	b29e      	uxth	r6, r3
 801df20:	1215      	asrs	r5, r2, #8
 801df22:	43db      	mvns	r3, r3
 801df24:	b2db      	uxtb	r3, r3
 801df26:	ea4f 272c 	mov.w	r7, ip, asr #8
 801df2a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801df2e:	fb15 f503 	smulbb	r5, r5, r3
 801df32:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801df36:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801df3a:	00d2      	lsls	r2, r2, #3
 801df3c:	fb07 5706 	mla	r7, r7, r6, r5
 801df40:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801df44:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801df48:	b2d2      	uxtb	r2, r2
 801df4a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801df4e:	b2bf      	uxth	r7, r7
 801df50:	fb1e fe03 	smulbb	lr, lr, r3
 801df54:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801df58:	fa5f fc8c 	uxtb.w	ip, ip
 801df5c:	fb12 f203 	smulbb	r2, r2, r3
 801df60:	fb05 e506 	mla	r5, r5, r6, lr
 801df64:	fb0c 2c06 	mla	ip, ip, r6, r2
 801df68:	f107 0e01 	add.w	lr, r7, #1
 801df6c:	fa1f fc8c 	uxth.w	ip, ip
 801df70:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801df74:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801df78:	f10c 0701 	add.w	r7, ip, #1
 801df7c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801df80:	b2ad      	uxth	r5, r5
 801df82:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801df86:	ea47 070e 	orr.w	r7, r7, lr
 801df8a:	f105 0e01 	add.w	lr, r5, #1
 801df8e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801df92:	096d      	lsrs	r5, r5, #5
 801df94:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801df98:	432f      	orrs	r7, r5
 801df9a:	8007      	strh	r7, [r0, #0]
 801df9c:	3002      	adds	r0, #2
 801df9e:	3402      	adds	r4, #2
 801dfa0:	e7ac      	b.n	801defc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801dfa2:	f8b9 3000 	ldrh.w	r3, [r9]
 801dfa6:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801dfaa:	eba3 0308 	sub.w	r3, r3, r8
 801dfae:	eba6 0608 	sub.w	r6, r6, r8
 801dfb2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801dfb6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dfba:	440e      	add	r6, r1
 801dfbc:	e797      	b.n	801deee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801dfbe:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801dfc2:	42a8      	cmp	r0, r5
 801dfc4:	d262      	bcs.n	801e08c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801dfc6:	9b00      	ldr	r3, [sp, #0]
 801dfc8:	4631      	mov	r1, r6
 801dfca:	eb00 0b03 	add.w	fp, r0, r3
 801dfce:	4558      	cmp	r0, fp
 801dfd0:	d24e      	bcs.n	801e070 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801dfd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dfd6:	b12b      	cbz	r3, 801dfe4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801dfd8:	2bff      	cmp	r3, #255	; 0xff
 801dfda:	f8b4 e000 	ldrh.w	lr, [r4]
 801dfde:	d104      	bne.n	801dfea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801dfe0:	f8a0 e000 	strh.w	lr, [r0]
 801dfe4:	3002      	adds	r0, #2
 801dfe6:	3402      	adds	r4, #2
 801dfe8:	e7f1      	b.n	801dfce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801dfea:	8802      	ldrh	r2, [r0, #0]
 801dfec:	b29f      	uxth	r7, r3
 801dfee:	1216      	asrs	r6, r2, #8
 801dff0:	43db      	mvns	r3, r3
 801dff2:	b2db      	uxtb	r3, r3
 801dff4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801dff8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dffc:	fb16 f603 	smulbb	r6, r6, r3
 801e000:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801e004:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e008:	00d2      	lsls	r2, r2, #3
 801e00a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e00e:	b2d2      	uxtb	r2, r2
 801e010:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e014:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e018:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e01c:	fb1a fa03 	smulbb	sl, sl, r3
 801e020:	fa1f fc8c 	uxth.w	ip, ip
 801e024:	fb12 f303 	smulbb	r3, r2, r3
 801e028:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e02c:	fa5f fe8e 	uxtb.w	lr, lr
 801e030:	fb06 a607 	mla	r6, r6, r7, sl
 801e034:	f10c 0201 	add.w	r2, ip, #1
 801e038:	fb0e 3307 	mla	r3, lr, r7, r3
 801e03c:	b2b6      	uxth	r6, r6
 801e03e:	b29b      	uxth	r3, r3
 801e040:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e044:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801e048:	f106 0a01 	add.w	sl, r6, #1
 801e04c:	f103 0c01 	add.w	ip, r3, #1
 801e050:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e054:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801e058:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e05c:	0976      	lsrs	r6, r6, #5
 801e05e:	ea4c 0c02 	orr.w	ip, ip, r2
 801e062:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e066:	ea4c 0c06 	orr.w	ip, ip, r6
 801e06a:	f8a0 c000 	strh.w	ip, [r0]
 801e06e:	e7b9      	b.n	801dfe4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801e070:	f8b9 3000 	ldrh.w	r3, [r9]
 801e074:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e078:	eba3 0308 	sub.w	r3, r3, r8
 801e07c:	eba6 0608 	sub.w	r6, r6, r8
 801e080:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e084:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e088:	440e      	add	r6, r1
 801e08a:	e79a      	b.n	801dfc2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801e08c:	4b03      	ldr	r3, [pc, #12]	; (801e09c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801e08e:	6818      	ldr	r0, [r3, #0]
 801e090:	6803      	ldr	r3, [r0, #0]
 801e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e094:	4798      	blx	r3
 801e096:	b007      	add	sp, #28
 801e098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e09c:	2002585c 	.word	0x2002585c
 801e0a0:	20025856 	.word	0x20025856

0801e0a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0a8:	b089      	sub	sp, #36	; 0x24
 801e0aa:	4682      	mov	sl, r0
 801e0ac:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801e0b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e0b2:	460f      	mov	r7, r1
 801e0b4:	4691      	mov	r9, r2
 801e0b6:	4698      	mov	r8, r3
 801e0b8:	2e00      	cmp	r6, #0
 801e0ba:	d03d      	beq.n	801e138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e0bc:	4608      	mov	r0, r1
 801e0be:	f7fa fe61 	bl	8018d84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e0c2:	4605      	mov	r5, r0
 801e0c4:	4638      	mov	r0, r7
 801e0c6:	f7fa fe91 	bl	8018dec <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e0ca:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e0ce:	4638      	mov	r0, r7
 801e0d0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e0d4:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e0d8:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e0dc:	f7fa ff3e 	bl	8018f5c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e0e0:	4605      	mov	r5, r0
 801e0e2:	4638      	mov	r0, r7
 801e0e4:	f7fa ff6a 	bl	8018fbc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e0e8:	4681      	mov	r9, r0
 801e0ea:	4638      	mov	r0, r7
 801e0ec:	f7fa ffba 	bl	8019064 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e0f0:	280b      	cmp	r0, #11
 801e0f2:	d821      	bhi.n	801e138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e0f4:	e8df f000 	tbb	[pc, r0]
 801e0f8:	2006aebe 	.word	0x2006aebe
 801e0fc:	20202020 	.word	0x20202020
 801e100:	b5202020 	.word	0xb5202020
 801e104:	4bb0      	ldr	r3, [pc, #704]	; (801e3c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801e106:	6818      	ldr	r0, [r3, #0]
 801e108:	6803      	ldr	r3, [r0, #0]
 801e10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e10c:	4798      	blx	r3
 801e10e:	2eff      	cmp	r6, #255	; 0xff
 801e110:	d101      	bne.n	801e116 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801e112:	0683      	lsls	r3, r0, #26
 801e114:	d506      	bpl.n	801e124 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 801e116:	4633      	mov	r3, r6
 801e118:	4622      	mov	r2, r4
 801e11a:	a902      	add	r1, sp, #8
 801e11c:	4628      	mov	r0, r5
 801e11e:	f7ff f909 	bl	801d334 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e122:	e009      	b.n	801e138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e124:	4638      	mov	r0, r7
 801e126:	f7fa fee1 	bl	8018eec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e12a:	b940      	cbnz	r0, 801e13e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801e12c:	4623      	mov	r3, r4
 801e12e:	aa02      	add	r2, sp, #8
 801e130:	4629      	mov	r1, r5
 801e132:	4650      	mov	r0, sl
 801e134:	f7ff f9e4 	bl	801d500 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801e138:	b009      	add	sp, #36	; 0x24
 801e13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e13e:	f10d 0818 	add.w	r8, sp, #24
 801e142:	4639      	mov	r1, r7
 801e144:	4640      	mov	r0, r8
 801e146:	f7fa fe85 	bl	8018e54 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e14a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e14e:	af04      	add	r7, sp, #16
 801e150:	e887 0003 	stmia.w	r7, {r0, r1}
 801e154:	4638      	mov	r0, r7
 801e156:	4621      	mov	r1, r4
 801e158:	f7f4 fa38 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 801e15c:	4638      	mov	r0, r7
 801e15e:	f7f4 fa78 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e162:	2800      	cmp	r0, #0
 801e164:	d1d7      	bne.n	801e116 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801e166:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e16a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e16e:	4293      	cmp	r3, r2
 801e170:	dd12      	ble.n	801e198 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 801e172:	1a9b      	subs	r3, r3, r2
 801e174:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e178:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e17c:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e180:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e184:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e188:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e18c:	4642      	mov	r2, r8
 801e18e:	4633      	mov	r3, r6
 801e190:	a902      	add	r1, sp, #8
 801e192:	4628      	mov	r0, r5
 801e194:	f7ff f8ce 	bl	801d334 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e198:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e19c:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e1a0:	4293      	cmp	r3, r2
 801e1a2:	dd12      	ble.n	801e1ca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 801e1a4:	1a9b      	subs	r3, r3, r2
 801e1a6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e1aa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e1ae:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e1b2:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e1b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e1ba:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e1be:	23ff      	movs	r3, #255	; 0xff
 801e1c0:	4642      	mov	r2, r8
 801e1c2:	a902      	add	r1, sp, #8
 801e1c4:	4628      	mov	r0, r5
 801e1c6:	f7ff f8b5 	bl	801d334 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e1ca:	463b      	mov	r3, r7
 801e1cc:	aa02      	add	r2, sp, #8
 801e1ce:	4629      	mov	r1, r5
 801e1d0:	4650      	mov	r0, sl
 801e1d2:	f7ff f995 	bl	801d500 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801e1d6:	88a2      	ldrh	r2, [r4, #4]
 801e1d8:	8823      	ldrh	r3, [r4, #0]
 801e1da:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e1de:	4413      	add	r3, r2
 801e1e0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e1e4:	440a      	add	r2, r1
 801e1e6:	b29b      	uxth	r3, r3
 801e1e8:	b292      	uxth	r2, r2
 801e1ea:	b211      	sxth	r1, r2
 801e1ec:	b218      	sxth	r0, r3
 801e1ee:	4288      	cmp	r0, r1
 801e1f0:	dd12      	ble.n	801e218 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801e1f2:	1a9b      	subs	r3, r3, r2
 801e1f4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e1f8:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801e1fc:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e200:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e204:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e208:	23ff      	movs	r3, #255	; 0xff
 801e20a:	4642      	mov	r2, r8
 801e20c:	a902      	add	r1, sp, #8
 801e20e:	4628      	mov	r0, r5
 801e210:	f8ad 601a 	strh.w	r6, [sp, #26]
 801e214:	f7ff f88e 	bl	801d334 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e218:	88e2      	ldrh	r2, [r4, #6]
 801e21a:	8863      	ldrh	r3, [r4, #2]
 801e21c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e220:	4413      	add	r3, r2
 801e222:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e226:	440a      	add	r2, r1
 801e228:	b29b      	uxth	r3, r3
 801e22a:	b292      	uxth	r2, r2
 801e22c:	b211      	sxth	r1, r2
 801e22e:	b218      	sxth	r0, r3
 801e230:	4288      	cmp	r0, r1
 801e232:	dd81      	ble.n	801e138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e234:	1a9b      	subs	r3, r3, r2
 801e236:	f9b4 6000 	ldrsh.w	r6, [r4]
 801e23a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e23e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e242:	f8ad 6018 	strh.w	r6, [sp, #24]
 801e246:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e24a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e24e:	23ff      	movs	r3, #255	; 0xff
 801e250:	4642      	mov	r2, r8
 801e252:	e762      	b.n	801e11a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e254:	4633      	mov	r3, r6
 801e256:	4622      	mov	r2, r4
 801e258:	a902      	add	r1, sp, #8
 801e25a:	4628      	mov	r0, r5
 801e25c:	f7ff f9c0 	bl	801d5e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801e260:	e76a      	b.n	801e138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e262:	e9cd 4600 	strd	r4, r6, [sp]
 801e266:	ab02      	add	r3, sp, #8
 801e268:	464a      	mov	r2, r9
 801e26a:	4629      	mov	r1, r5
 801e26c:	4650      	mov	r0, sl
 801e26e:	f7ff fd97 	bl	801dda0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e272:	e761      	b.n	801e138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e274:	4638      	mov	r0, r7
 801e276:	f7fa fe39 	bl	8018eec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e27a:	b950      	cbnz	r0, 801e292 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 801e27c:	e9cd 6000 	strd	r6, r0, [sp]
 801e280:	f8da 3000 	ldr.w	r3, [sl]
 801e284:	aa02      	add	r2, sp, #8
 801e286:	68de      	ldr	r6, [r3, #12]
 801e288:	4629      	mov	r1, r5
 801e28a:	4623      	mov	r3, r4
 801e28c:	4650      	mov	r0, sl
 801e28e:	47b0      	blx	r6
 801e290:	e752      	b.n	801e138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e292:	f10d 0818 	add.w	r8, sp, #24
 801e296:	4639      	mov	r1, r7
 801e298:	4640      	mov	r0, r8
 801e29a:	f7fa fddb 	bl	8018e54 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e29e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e2a2:	af04      	add	r7, sp, #16
 801e2a4:	e887 0003 	stmia.w	r7, {r0, r1}
 801e2a8:	4638      	mov	r0, r7
 801e2aa:	4621      	mov	r1, r4
 801e2ac:	f7f4 f98e 	bl	80125cc <_ZN8touchgfx4RectaNERKS0_>
 801e2b0:	4638      	mov	r0, r7
 801e2b2:	f7f4 f9ce 	bl	8012652 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e2b6:	b138      	cbz	r0, 801e2c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801e2b8:	9600      	str	r6, [sp, #0]
 801e2ba:	4623      	mov	r3, r4
 801e2bc:	aa02      	add	r2, sp, #8
 801e2be:	4649      	mov	r1, r9
 801e2c0:	4628      	mov	r0, r5
 801e2c2:	f7ff fdc9 	bl	801de58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e2c6:	e737      	b.n	801e138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e2c8:	e9cd 6000 	strd	r6, r0, [sp]
 801e2cc:	f8da 3000 	ldr.w	r3, [sl]
 801e2d0:	aa02      	add	r2, sp, #8
 801e2d2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801e2d6:	4629      	mov	r1, r5
 801e2d8:	463b      	mov	r3, r7
 801e2da:	4650      	mov	r0, sl
 801e2dc:	47d8      	blx	fp
 801e2de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e2e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e2e6:	4293      	cmp	r3, r2
 801e2e8:	dd13      	ble.n	801e312 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 801e2ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e2ee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e2f2:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e2f6:	1a9b      	subs	r3, r3, r2
 801e2f8:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e2fc:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e300:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e304:	9600      	str	r6, [sp, #0]
 801e306:	4643      	mov	r3, r8
 801e308:	aa02      	add	r2, sp, #8
 801e30a:	4649      	mov	r1, r9
 801e30c:	4628      	mov	r0, r5
 801e30e:	f7ff fda3 	bl	801de58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e312:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e316:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e31a:	4293      	cmp	r3, r2
 801e31c:	dd13      	ble.n	801e346 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 801e31e:	1a9b      	subs	r3, r3, r2
 801e320:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e324:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e328:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e32c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e330:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e334:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e338:	9600      	str	r6, [sp, #0]
 801e33a:	4643      	mov	r3, r8
 801e33c:	aa02      	add	r2, sp, #8
 801e33e:	4649      	mov	r1, r9
 801e340:	4628      	mov	r0, r5
 801e342:	f7ff fd89 	bl	801de58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e346:	88a2      	ldrh	r2, [r4, #4]
 801e348:	8823      	ldrh	r3, [r4, #0]
 801e34a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e34e:	4413      	add	r3, r2
 801e350:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e354:	440a      	add	r2, r1
 801e356:	b29b      	uxth	r3, r3
 801e358:	b292      	uxth	r2, r2
 801e35a:	b211      	sxth	r1, r2
 801e35c:	b218      	sxth	r0, r3
 801e35e:	4288      	cmp	r0, r1
 801e360:	dd13      	ble.n	801e38a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 801e362:	1a9b      	subs	r3, r3, r2
 801e364:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e368:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801e36c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e370:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e374:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e378:	9600      	str	r6, [sp, #0]
 801e37a:	4643      	mov	r3, r8
 801e37c:	aa02      	add	r2, sp, #8
 801e37e:	4649      	mov	r1, r9
 801e380:	4628      	mov	r0, r5
 801e382:	f8ad 701a 	strh.w	r7, [sp, #26]
 801e386:	f7ff fd67 	bl	801de58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e38a:	88e2      	ldrh	r2, [r4, #6]
 801e38c:	8863      	ldrh	r3, [r4, #2]
 801e38e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e392:	4413      	add	r3, r2
 801e394:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e398:	440a      	add	r2, r1
 801e39a:	b29b      	uxth	r3, r3
 801e39c:	b292      	uxth	r2, r2
 801e39e:	b211      	sxth	r1, r2
 801e3a0:	b218      	sxth	r0, r3
 801e3a2:	4288      	cmp	r0, r1
 801e3a4:	f77f aec8 	ble.w	801e138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e3a8:	f9b4 7000 	ldrsh.w	r7, [r4]
 801e3ac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e3b0:	f8ad 7018 	strh.w	r7, [sp, #24]
 801e3b4:	1a9b      	subs	r3, r3, r2
 801e3b6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e3ba:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e3be:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e3c2:	9600      	str	r6, [sp, #0]
 801e3c4:	4643      	mov	r3, r8
 801e3c6:	e779      	b.n	801e2bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 801e3c8:	2002585c 	.word	0x2002585c

0801e3cc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801e3cc:	b180      	cbz	r0, 801e3f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e3ce:	2903      	cmp	r1, #3
 801e3d0:	d81c      	bhi.n	801e40c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e3d2:	e8df f001 	tbb	[pc, r1]
 801e3d6:	1d02      	.short	0x1d02
 801e3d8:	1f08      	.short	0x1f08
 801e3da:	4b10      	ldr	r3, [pc, #64]	; (801e41c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e3dc:	8818      	ldrh	r0, [r3, #0]
 801e3de:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e3e2:	4240      	negs	r0, r0
 801e3e4:	4770      	bx	lr
 801e3e6:	4b0d      	ldr	r3, [pc, #52]	; (801e41c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e3e8:	8818      	ldrh	r0, [r3, #0]
 801e3ea:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e3ee:	4770      	bx	lr
 801e3f0:	2903      	cmp	r1, #3
 801e3f2:	d80b      	bhi.n	801e40c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e3f4:	a301      	add	r3, pc, #4	; (adr r3, 801e3fc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801e3f6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e3fa:	bf00      	nop
 801e3fc:	0801e411 	.word	0x0801e411
 801e400:	0801e3e7 	.word	0x0801e3e7
 801e404:	0801e415 	.word	0x0801e415
 801e408:	0801e3db 	.word	0x0801e3db
 801e40c:	2000      	movs	r0, #0
 801e40e:	4770      	bx	lr
 801e410:	2001      	movs	r0, #1
 801e412:	4770      	bx	lr
 801e414:	f04f 30ff 	mov.w	r0, #4294967295
 801e418:	4770      	bx	lr
 801e41a:	bf00      	nop
 801e41c:	20025856 	.word	0x20025856

0801e420 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801e420:	b180      	cbz	r0, 801e444 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801e422:	2903      	cmp	r1, #3
 801e424:	d81c      	bhi.n	801e460 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e426:	e8df f001 	tbb	[pc, r1]
 801e42a:	021d      	.short	0x021d
 801e42c:	071f      	.short	0x071f
 801e42e:	4b10      	ldr	r3, [pc, #64]	; (801e470 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e430:	8818      	ldrh	r0, [r3, #0]
 801e432:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e436:	4770      	bx	lr
 801e438:	4b0d      	ldr	r3, [pc, #52]	; (801e470 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e43a:	8818      	ldrh	r0, [r3, #0]
 801e43c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e440:	4240      	negs	r0, r0
 801e442:	4770      	bx	lr
 801e444:	2903      	cmp	r1, #3
 801e446:	d80b      	bhi.n	801e460 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e448:	a301      	add	r3, pc, #4	; (adr r3, 801e450 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801e44a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e44e:	bf00      	nop
 801e450:	0801e42f 	.word	0x0801e42f
 801e454:	0801e469 	.word	0x0801e469
 801e458:	0801e439 	.word	0x0801e439
 801e45c:	0801e465 	.word	0x0801e465
 801e460:	2000      	movs	r0, #0
 801e462:	4770      	bx	lr
 801e464:	2001      	movs	r0, #1
 801e466:	4770      	bx	lr
 801e468:	f04f 30ff 	mov.w	r0, #4294967295
 801e46c:	4770      	bx	lr
 801e46e:	bf00      	nop
 801e470:	20025856 	.word	0x20025856

0801e474 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e478:	b099      	sub	sp, #100	; 0x64
 801e47a:	910b      	str	r1, [sp, #44]	; 0x2c
 801e47c:	a914      	add	r1, sp, #80	; 0x50
 801e47e:	e881 000c 	stmia.w	r1, {r2, r3}
 801e482:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801e486:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801e48a:	f891 900d 	ldrb.w	r9, [r1, #13]
 801e48e:	9309      	str	r3, [sp, #36]	; 0x24
 801e490:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e494:	9310      	str	r3, [sp, #64]	; 0x40
 801e496:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801e49a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801e49e:	930c      	str	r3, [sp, #48]	; 0x30
 801e4a0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801e4a4:	798f      	ldrb	r7, [r1, #6]
 801e4a6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801e4aa:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801e4ae:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801e4b2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801e4b6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801e4ba:	431f      	orrs	r7, r3
 801e4bc:	f000 8195 	beq.w	801e7ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e4c0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801e4c4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801e4c8:	f891 9007 	ldrb.w	r9, [r1, #7]
 801e4cc:	ea59 0903 	orrs.w	r9, r9, r3
 801e4d0:	f000 818b 	beq.w	801e7ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e4d4:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e4d8:	b29b      	uxth	r3, r3
 801e4da:	2d00      	cmp	r5, #0
 801e4dc:	f000 812e 	beq.w	801e73c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801e4e0:	1aed      	subs	r5, r5, r3
 801e4e2:	b2ad      	uxth	r5, r5
 801e4e4:	042b      	lsls	r3, r5, #16
 801e4e6:	d502      	bpl.n	801e4ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e4e8:	1b64      	subs	r4, r4, r5
 801e4ea:	b224      	sxth	r4, r4
 801e4ec:	2500      	movs	r5, #0
 801e4ee:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e4f2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e4f6:	428c      	cmp	r4, r1
 801e4f8:	b28b      	uxth	r3, r1
 801e4fa:	bfbf      	itttt	lt
 801e4fc:	18ed      	addlt	r5, r5, r3
 801e4fe:	1b2c      	sublt	r4, r5, r4
 801e500:	b2a5      	uxthlt	r5, r4
 801e502:	460c      	movlt	r4, r1
 801e504:	8891      	ldrh	r1, [r2, #4]
 801e506:	440b      	add	r3, r1
 801e508:	b21b      	sxth	r3, r3
 801e50a:	930f      	str	r3, [sp, #60]	; 0x3c
 801e50c:	88d3      	ldrh	r3, [r2, #6]
 801e50e:	8852      	ldrh	r2, [r2, #2]
 801e510:	4413      	add	r3, r2
 801e512:	b21b      	sxth	r3, r3
 801e514:	930d      	str	r3, [sp, #52]	; 0x34
 801e516:	4bbe      	ldr	r3, [pc, #760]	; (801e810 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801e518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e51a:	f893 b000 	ldrb.w	fp, [r3]
 801e51e:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e522:	f1dc 0300 	rsbs	r3, ip, #0
 801e526:	eb43 030c 	adc.w	r3, r3, ip
 801e52a:	930e      	str	r3, [sp, #56]	; 0x38
 801e52c:	4621      	mov	r1, r4
 801e52e:	4653      	mov	r3, sl
 801e530:	a814      	add	r0, sp, #80	; 0x50
 801e532:	f7f7 f810 	bl	8015556 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e536:	4621      	mov	r1, r4
 801e538:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801e53c:	4653      	mov	r3, sl
 801e53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e540:	a814      	add	r0, sp, #80	; 0x50
 801e542:	f7f7 f825 	bl	8015590 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e546:	a918      	add	r1, sp, #96	; 0x60
 801e548:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e54c:	a817      	add	r0, sp, #92	; 0x5c
 801e54e:	f7f7 f94b 	bl	80157e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e552:	f1ba 0f00 	cmp.w	sl, #0
 801e556:	f040 80f4 	bne.w	801e742 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801e55a:	f1bb 0f01 	cmp.w	fp, #1
 801e55e:	f040 80f8 	bne.w	801e752 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801e562:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e564:	2b00      	cmp	r3, #0
 801e566:	f040 8145 	bne.w	801e7f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801e56a:	b2ba      	uxth	r2, r7
 801e56c:	b905      	cbnz	r5, 801e570 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801e56e:	b16e      	cbz	r6, 801e58c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801e570:	fb06 5302 	mla	r3, r6, r2, r5
 801e574:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801e576:	fb08 f303 	mul.w	r3, r8, r3
 801e57a:	4631      	mov	r1, r6
 801e57c:	f003 0607 	and.w	r6, r3, #7
 801e580:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801e584:	9328      	str	r3, [sp, #160]	; 0xa0
 801e586:	eba9 0301 	sub.w	r3, r9, r1
 801e58a:	930a      	str	r3, [sp, #40]	; 0x28
 801e58c:	4651      	mov	r1, sl
 801e58e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e590:	f7ff ff1c 	bl	801e3cc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801e594:	4681      	mov	r9, r0
 801e596:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e598:	f7ff ff42 	bl	801e420 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801e59c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e59e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e5a0:	eba3 0a01 	sub.w	sl, r3, r1
 801e5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5a6:	459a      	cmp	sl, r3
 801e5a8:	bfa8      	it	ge
 801e5aa:	469a      	movge	sl, r3
 801e5ac:	f1ba 0f00 	cmp.w	sl, #0
 801e5b0:	4683      	mov	fp, r0
 801e5b2:	f340 811a 	ble.w	801e7ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e5b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e5b8:	1b64      	subs	r4, r4, r5
 801e5ba:	1b1c      	subs	r4, r3, r4
 801e5bc:	42bc      	cmp	r4, r7
 801e5be:	bfd4      	ite	le
 801e5c0:	ebc5 0504 	rsble	r5, r5, r4
 801e5c4:	ebc5 0507 	rsbgt	r5, r5, r7
 801e5c8:	2d00      	cmp	r5, #0
 801e5ca:	f340 810e 	ble.w	801e7ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e5ce:	1b52      	subs	r2, r2, r5
 801e5d0:	fb08 f302 	mul.w	r3, r8, r2
 801e5d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801e5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	f040 8116 	bne.w	801e80a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801e5de:	4b8d      	ldr	r3, [pc, #564]	; (801e814 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801e5e0:	6818      	ldr	r0, [r3, #0]
 801e5e2:	6803      	ldr	r3, [r0, #0]
 801e5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e5e6:	4798      	blx	r3
 801e5e8:	2301      	movs	r3, #1
 801e5ea:	fa03 f308 	lsl.w	r3, r3, r8
 801e5ee:	4a8a      	ldr	r2, [pc, #552]	; (801e818 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801e5f0:	3b01      	subs	r3, #1
 801e5f2:	b2db      	uxtb	r3, r3
 801e5f4:	8811      	ldrh	r1, [r2, #0]
 801e5f6:	930e      	str	r3, [sp, #56]	; 0x38
 801e5f8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e5fc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e600:	fb01 2303 	mla	r3, r1, r3, r2
 801e604:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e608:	930a      	str	r3, [sp, #40]	; 0x28
 801e60a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e60c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e610:	9313      	str	r3, [sp, #76]	; 0x4c
 801e612:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e614:	0a19      	lsrs	r1, r3, #8
 801e616:	b2cb      	uxtb	r3, r1
 801e618:	9312      	str	r3, [sp, #72]	; 0x48
 801e61a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e61c:	b2db      	uxtb	r3, r3
 801e61e:	9311      	str	r3, [sp, #68]	; 0x44
 801e620:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e622:	095a      	lsrs	r2, r3, #5
 801e624:	4b7d      	ldr	r3, [pc, #500]	; (801e81c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e626:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e62a:	400b      	ands	r3, r1
 801e62c:	4313      	orrs	r3, r2
 801e62e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e630:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e634:	4313      	orrs	r3, r2
 801e636:	b29b      	uxth	r3, r3
 801e638:	9310      	str	r3, [sp, #64]	; 0x40
 801e63a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e63c:	781a      	ldrb	r2, [r3, #0]
 801e63e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e642:	4132      	asrs	r2, r6
 801e644:	fb05 b919 	mls	r9, r5, r9, fp
 801e648:	fb03 fb05 	mul.w	fp, r3, r5
 801e64c:	b2d2      	uxtb	r2, r2
 801e64e:	930d      	str	r3, [sp, #52]	; 0x34
 801e650:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801e654:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e658:	f0c0 80f5 	bcc.w	801e846 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801e65c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801e660:	46ae      	mov	lr, r5
 801e662:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e666:	f0c0 80dd 	bcc.w	801e824 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801e66a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e66c:	4013      	ands	r3, r2
 801e66e:	d055      	beq.n	801e71c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801e670:	20ff      	movs	r0, #255	; 0xff
 801e672:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e674:	fb90 f1f1 	sdiv	r1, r0, r1
 801e678:	434b      	muls	r3, r1
 801e67a:	2bfe      	cmp	r3, #254	; 0xfe
 801e67c:	dd03      	ble.n	801e686 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801e67e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e680:	4281      	cmp	r1, r0
 801e682:	f000 80cd 	beq.w	801e820 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801e686:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e688:	f8bc 4000 	ldrh.w	r4, [ip]
 801e68c:	fb11 f303 	smulbb	r3, r1, r3
 801e690:	b29b      	uxth	r3, r3
 801e692:	1c59      	adds	r1, r3, #1
 801e694:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e698:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e69c:	b29f      	uxth	r7, r3
 801e69e:	43db      	mvns	r3, r3
 801e6a0:	b2db      	uxtb	r3, r3
 801e6a2:	9309      	str	r3, [sp, #36]	; 0x24
 801e6a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e6a6:	1220      	asrs	r0, r4, #8
 801e6a8:	fb13 f907 	smulbb	r9, r3, r7
 801e6ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6b2:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e6b6:	fb00 9003 	mla	r0, r0, r3, r9
 801e6ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e6bc:	10e1      	asrs	r1, r4, #3
 801e6be:	fb13 f907 	smulbb	r9, r3, r7
 801e6c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6c8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e6cc:	fb01 9103 	mla	r1, r1, r3, r9
 801e6d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6d2:	00e4      	lsls	r4, r4, #3
 801e6d4:	fb13 f707 	smulbb	r7, r3, r7
 801e6d8:	b2e4      	uxtb	r4, r4
 801e6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6dc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e6e0:	fb04 7403 	mla	r4, r4, r3, r7
 801e6e4:	b280      	uxth	r0, r0
 801e6e6:	b2a4      	uxth	r4, r4
 801e6e8:	1c43      	adds	r3, r0, #1
 801e6ea:	f104 0901 	add.w	r9, r4, #1
 801e6ee:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e6f2:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801e6f6:	b289      	uxth	r1, r1
 801e6f8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801e6fc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e700:	ea49 0000 	orr.w	r0, r9, r0
 801e704:	f101 0901 	add.w	r9, r1, #1
 801e708:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801e70c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e710:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e714:	ea40 0009 	orr.w	r0, r0, r9
 801e718:	f8ac 0000 	strh.w	r0, [ip]
 801e71c:	4446      	add	r6, r8
 801e71e:	b2b6      	uxth	r6, r6
 801e720:	2e07      	cmp	r6, #7
 801e722:	bf81      	itttt	hi
 801e724:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801e726:	785a      	ldrbhi	r2, [r3, #1]
 801e728:	3301      	addhi	r3, #1
 801e72a:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801e72c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e72e:	bf9a      	itte	ls
 801e730:	fa42 f208 	asrls.w	r2, r2, r8
 801e734:	b2d2      	uxtbls	r2, r2
 801e736:	2600      	movhi	r6, #0
 801e738:	449c      	add	ip, r3
 801e73a:	e792      	b.n	801e662 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801e73c:	441c      	add	r4, r3
 801e73e:	b224      	sxth	r4, r4
 801e740:	e6d5      	b.n	801e4ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e742:	f1ba 0f01 	cmp.w	sl, #1
 801e746:	f47f af0c 	bne.w	801e562 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e74a:	f1bb 0f01 	cmp.w	fp, #1
 801e74e:	f47f af08 	bne.w	801e562 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e752:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 801e814 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801e756:	f8db 0000 	ldr.w	r0, [fp]
 801e75a:	6803      	ldr	r3, [r0, #0]
 801e75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e75e:	4798      	blx	r3
 801e760:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e764:	465a      	mov	r2, fp
 801e766:	d006      	beq.n	801e776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801e768:	f1b8 0f04 	cmp.w	r8, #4
 801e76c:	d140      	bne.n	801e7f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801e76e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e770:	3300      	adds	r3, #0
 801e772:	bf18      	it	ne
 801e774:	2301      	movne	r3, #1
 801e776:	0580      	lsls	r0, r0, #22
 801e778:	d56e      	bpl.n	801e858 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801e77a:	f1b8 0f08 	cmp.w	r8, #8
 801e77e:	d16b      	bne.n	801e858 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801e780:	2b00      	cmp	r3, #0
 801e782:	bf0c      	ite	eq
 801e784:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e788:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e78c:	2d00      	cmp	r5, #0
 801e78e:	f47f aee8 	bne.w	801e562 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e792:	2e00      	cmp	r6, #0
 801e794:	f47f aee5 	bne.w	801e562 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e798:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e79a:	19e3      	adds	r3, r4, r7
 801e79c:	4283      	cmp	r3, r0
 801e79e:	f73f aee0 	bgt.w	801e562 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e7a6:	444b      	add	r3, r9
 801e7a8:	4283      	cmp	r3, r0
 801e7aa:	f73f aeda 	bgt.w	801e562 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e7ae:	6810      	ldr	r0, [r2, #0]
 801e7b0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801e7b4:	6804      	ldr	r4, [r0, #0]
 801e7b6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801e7ba:	b2bf      	uxth	r7, r7
 801e7bc:	f1b8 0f08 	cmp.w	r8, #8
 801e7c0:	f04f 0500 	mov.w	r5, #0
 801e7c4:	bf18      	it	ne
 801e7c6:	3701      	addne	r7, #1
 801e7c8:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e7cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e7ce:	9104      	str	r1, [sp, #16]
 801e7d0:	bf18      	it	ne
 801e7d2:	f027 0701 	bicne.w	r7, r7, #1
 801e7d6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e7d8:	bf18      	it	ne
 801e7da:	b2bf      	uxthne	r7, r7
 801e7dc:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e7e0:	e9cd 7900 	strd	r7, r9, [sp]
 801e7e4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e7e6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801e7e8:	47a0      	blx	r4
 801e7ea:	b019      	add	sp, #100	; 0x64
 801e7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7f0:	2300      	movs	r3, #0
 801e7f2:	e7c0      	b.n	801e776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801e7f4:	2208      	movs	r2, #8
 801e7f6:	fb92 f3f8 	sdiv	r3, r2, r8
 801e7fa:	1e5a      	subs	r2, r3, #1
 801e7fc:	443a      	add	r2, r7
 801e7fe:	fb92 f2f3 	sdiv	r2, r2, r3
 801e802:	fb12 f203 	smulbb	r2, r2, r3
 801e806:	b292      	uxth	r2, r2
 801e808:	e6b0      	b.n	801e56c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801e80a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e80c:	e6ec      	b.n	801e5e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801e80e:	bf00      	nop
 801e810:	20025854 	.word	0x20025854
 801e814:	2002585c 	.word	0x2002585c
 801e818:	20025856 	.word	0x20025856
 801e81c:	00fff800 	.word	0x00fff800
 801e820:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e822:	e779      	b.n	801e718 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801e824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e826:	b153      	cbz	r3, 801e83e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801e828:	441e      	add	r6, r3
 801e82a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e82c:	b2b6      	uxth	r6, r6
 801e82e:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801e832:	f006 0607 	and.w	r6, r6, #7
 801e836:	781a      	ldrb	r2, [r3, #0]
 801e838:	9328      	str	r3, [sp, #160]	; 0xa0
 801e83a:	4132      	asrs	r2, r6
 801e83c:	b2d2      	uxtb	r2, r2
 801e83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e840:	445b      	add	r3, fp
 801e842:	930a      	str	r3, [sp, #40]	; 0x28
 801e844:	e706      	b.n	801e654 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801e846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e848:	2b00      	cmp	r3, #0
 801e84a:	d1ce      	bne.n	801e7ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e84c:	4b05      	ldr	r3, [pc, #20]	; (801e864 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801e84e:	6818      	ldr	r0, [r3, #0]
 801e850:	6803      	ldr	r3, [r0, #0]
 801e852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e854:	4798      	blx	r3
 801e856:	e7c8      	b.n	801e7ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e858:	2b00      	cmp	r3, #0
 801e85a:	f43f ae82 	beq.w	801e562 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e85e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e862:	e793      	b.n	801e78c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801e864:	2002585c 	.word	0x2002585c

0801e868 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801e868:	b538      	push	{r3, r4, r5, lr}
 801e86a:	4c15      	ldr	r4, [pc, #84]	; (801e8c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e86c:	7823      	ldrb	r3, [r4, #0]
 801e86e:	f3bf 8f5b 	dmb	ish
 801e872:	07da      	lsls	r2, r3, #31
 801e874:	4605      	mov	r5, r0
 801e876:	d40b      	bmi.n	801e890 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e878:	4620      	mov	r0, r4
 801e87a:	f007 feb6 	bl	80265ea <__cxa_guard_acquire>
 801e87e:	b138      	cbz	r0, 801e890 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e880:	4620      	mov	r0, r4
 801e882:	f007 febe 	bl	8026602 <__cxa_guard_release>
 801e886:	4a0f      	ldr	r2, [pc, #60]	; (801e8c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e888:	490f      	ldr	r1, [pc, #60]	; (801e8c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e88a:	4810      	ldr	r0, [pc, #64]	; (801e8cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e88c:	f007 fea6 	bl	80265dc <__aeabi_atexit>
 801e890:	4c0f      	ldr	r4, [pc, #60]	; (801e8d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801e892:	7823      	ldrb	r3, [r4, #0]
 801e894:	f3bf 8f5b 	dmb	ish
 801e898:	07db      	lsls	r3, r3, #31
 801e89a:	d40b      	bmi.n	801e8b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e89c:	4620      	mov	r0, r4
 801e89e:	f007 fea4 	bl	80265ea <__cxa_guard_acquire>
 801e8a2:	b138      	cbz	r0, 801e8b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e8a4:	4620      	mov	r0, r4
 801e8a6:	f007 feac 	bl	8026602 <__cxa_guard_release>
 801e8aa:	4a06      	ldr	r2, [pc, #24]	; (801e8c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e8ac:	4909      	ldr	r1, [pc, #36]	; (801e8d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e8ae:	480a      	ldr	r0, [pc, #40]	; (801e8d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e8b0:	f007 fe94 	bl	80265dc <__aeabi_atexit>
 801e8b4:	4b05      	ldr	r3, [pc, #20]	; (801e8cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e8b6:	612b      	str	r3, [r5, #16]
 801e8b8:	4b07      	ldr	r3, [pc, #28]	; (801e8d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e8ba:	616b      	str	r3, [r5, #20]
 801e8bc:	bd38      	pop	{r3, r4, r5, pc}
 801e8be:	bf00      	nop
 801e8c0:	20025934 	.word	0x20025934
 801e8c4:	20000000 	.word	0x20000000
 801e8c8:	0801b679 	.word	0x0801b679
 801e8cc:	200002f0 	.word	0x200002f0
 801e8d0:	20025938 	.word	0x20025938
 801e8d4:	0801b677 	.word	0x0801b677
 801e8d8:	200002f4 	.word	0x200002f4

0801e8dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801e8dc:	b538      	push	{r3, r4, r5, lr}
 801e8de:	4c15      	ldr	r4, [pc, #84]	; (801e934 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e8e0:	7823      	ldrb	r3, [r4, #0]
 801e8e2:	f3bf 8f5b 	dmb	ish
 801e8e6:	07da      	lsls	r2, r3, #31
 801e8e8:	4605      	mov	r5, r0
 801e8ea:	d40b      	bmi.n	801e904 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e8ec:	4620      	mov	r0, r4
 801e8ee:	f007 fe7c 	bl	80265ea <__cxa_guard_acquire>
 801e8f2:	b138      	cbz	r0, 801e904 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	f007 fe84 	bl	8026602 <__cxa_guard_release>
 801e8fa:	4a0f      	ldr	r2, [pc, #60]	; (801e938 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e8fc:	490f      	ldr	r1, [pc, #60]	; (801e93c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e8fe:	4810      	ldr	r0, [pc, #64]	; (801e940 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e900:	f007 fe6c 	bl	80265dc <__aeabi_atexit>
 801e904:	4c0f      	ldr	r4, [pc, #60]	; (801e944 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801e906:	7823      	ldrb	r3, [r4, #0]
 801e908:	f3bf 8f5b 	dmb	ish
 801e90c:	07db      	lsls	r3, r3, #31
 801e90e:	d40b      	bmi.n	801e928 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e910:	4620      	mov	r0, r4
 801e912:	f007 fe6a 	bl	80265ea <__cxa_guard_acquire>
 801e916:	b138      	cbz	r0, 801e928 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e918:	4620      	mov	r0, r4
 801e91a:	f007 fe72 	bl	8026602 <__cxa_guard_release>
 801e91e:	4a06      	ldr	r2, [pc, #24]	; (801e938 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e920:	4909      	ldr	r1, [pc, #36]	; (801e948 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e922:	480a      	ldr	r0, [pc, #40]	; (801e94c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e924:	f007 fe5a 	bl	80265dc <__aeabi_atexit>
 801e928:	4b05      	ldr	r3, [pc, #20]	; (801e940 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e92a:	60ab      	str	r3, [r5, #8]
 801e92c:	4b07      	ldr	r3, [pc, #28]	; (801e94c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e92e:	60eb      	str	r3, [r5, #12]
 801e930:	bd38      	pop	{r3, r4, r5, pc}
 801e932:	bf00      	nop
 801e934:	2002590c 	.word	0x2002590c
 801e938:	20000000 	.word	0x20000000
 801e93c:	0801b67d 	.word	0x0801b67d
 801e940:	200002c8 	.word	0x200002c8
 801e944:	20025910 	.word	0x20025910
 801e948:	0801b67b 	.word	0x0801b67b
 801e94c:	200002cc 	.word	0x200002cc

0801e950 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801e950:	b510      	push	{r4, lr}
 801e952:	4604      	mov	r4, r0
 801e954:	f7ff ff88 	bl	801e868 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801e958:	4620      	mov	r0, r4
 801e95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e95e:	f7ff bfbd 	b.w	801e8dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801e964 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e964:	b538      	push	{r3, r4, r5, lr}
 801e966:	4c15      	ldr	r4, [pc, #84]	; (801e9bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e968:	7823      	ldrb	r3, [r4, #0]
 801e96a:	f3bf 8f5b 	dmb	ish
 801e96e:	07da      	lsls	r2, r3, #31
 801e970:	4605      	mov	r5, r0
 801e972:	d40b      	bmi.n	801e98c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e974:	4620      	mov	r0, r4
 801e976:	f007 fe38 	bl	80265ea <__cxa_guard_acquire>
 801e97a:	b138      	cbz	r0, 801e98c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e97c:	4620      	mov	r0, r4
 801e97e:	f007 fe40 	bl	8026602 <__cxa_guard_release>
 801e982:	4a0f      	ldr	r2, [pc, #60]	; (801e9c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e984:	490f      	ldr	r1, [pc, #60]	; (801e9c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e986:	4810      	ldr	r0, [pc, #64]	; (801e9c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e988:	f007 fe28 	bl	80265dc <__aeabi_atexit>
 801e98c:	4c0f      	ldr	r4, [pc, #60]	; (801e9cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e98e:	7823      	ldrb	r3, [r4, #0]
 801e990:	f3bf 8f5b 	dmb	ish
 801e994:	07db      	lsls	r3, r3, #31
 801e996:	d40b      	bmi.n	801e9b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e998:	4620      	mov	r0, r4
 801e99a:	f007 fe26 	bl	80265ea <__cxa_guard_acquire>
 801e99e:	b138      	cbz	r0, 801e9b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e9a0:	4620      	mov	r0, r4
 801e9a2:	f007 fe2e 	bl	8026602 <__cxa_guard_release>
 801e9a6:	4a06      	ldr	r2, [pc, #24]	; (801e9c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e9a8:	4909      	ldr	r1, [pc, #36]	; (801e9d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e9aa:	480a      	ldr	r0, [pc, #40]	; (801e9d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e9ac:	f007 fe16 	bl	80265dc <__aeabi_atexit>
 801e9b0:	4b05      	ldr	r3, [pc, #20]	; (801e9c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e9b2:	622b      	str	r3, [r5, #32]
 801e9b4:	4b07      	ldr	r3, [pc, #28]	; (801e9d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e9b6:	626b      	str	r3, [r5, #36]	; 0x24
 801e9b8:	bd38      	pop	{r3, r4, r5, pc}
 801e9ba:	bf00      	nop
 801e9bc:	2002593c 	.word	0x2002593c
 801e9c0:	20000000 	.word	0x20000000
 801e9c4:	0801b671 	.word	0x0801b671
 801e9c8:	200002f8 	.word	0x200002f8
 801e9cc:	20025940 	.word	0x20025940
 801e9d0:	0801b66f 	.word	0x0801b66f
 801e9d4:	200002fc 	.word	0x200002fc

0801e9d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e9d8:	b538      	push	{r3, r4, r5, lr}
 801e9da:	4c15      	ldr	r4, [pc, #84]	; (801ea30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e9dc:	7823      	ldrb	r3, [r4, #0]
 801e9de:	f3bf 8f5b 	dmb	ish
 801e9e2:	07da      	lsls	r2, r3, #31
 801e9e4:	4605      	mov	r5, r0
 801e9e6:	d40b      	bmi.n	801ea00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	f007 fdfe 	bl	80265ea <__cxa_guard_acquire>
 801e9ee:	b138      	cbz	r0, 801ea00 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	f007 fe06 	bl	8026602 <__cxa_guard_release>
 801e9f6:	4a0f      	ldr	r2, [pc, #60]	; (801ea34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e9f8:	490f      	ldr	r1, [pc, #60]	; (801ea38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e9fa:	4810      	ldr	r0, [pc, #64]	; (801ea3c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e9fc:	f007 fdee 	bl	80265dc <__aeabi_atexit>
 801ea00:	4c0f      	ldr	r4, [pc, #60]	; (801ea40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ea02:	7823      	ldrb	r3, [r4, #0]
 801ea04:	f3bf 8f5b 	dmb	ish
 801ea08:	07db      	lsls	r3, r3, #31
 801ea0a:	d40b      	bmi.n	801ea24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ea0c:	4620      	mov	r0, r4
 801ea0e:	f007 fdec 	bl	80265ea <__cxa_guard_acquire>
 801ea12:	b138      	cbz	r0, 801ea24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ea14:	4620      	mov	r0, r4
 801ea16:	f007 fdf4 	bl	8026602 <__cxa_guard_release>
 801ea1a:	4a06      	ldr	r2, [pc, #24]	; (801ea34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ea1c:	4909      	ldr	r1, [pc, #36]	; (801ea44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ea1e:	480a      	ldr	r0, [pc, #40]	; (801ea48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ea20:	f007 fddc 	bl	80265dc <__aeabi_atexit>
 801ea24:	4b05      	ldr	r3, [pc, #20]	; (801ea3c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ea26:	61ab      	str	r3, [r5, #24]
 801ea28:	4b07      	ldr	r3, [pc, #28]	; (801ea48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ea2a:	61eb      	str	r3, [r5, #28]
 801ea2c:	bd38      	pop	{r3, r4, r5, pc}
 801ea2e:	bf00      	nop
 801ea30:	20025914 	.word	0x20025914
 801ea34:	20000000 	.word	0x20000000
 801ea38:	0801b675 	.word	0x0801b675
 801ea3c:	200002d0 	.word	0x200002d0
 801ea40:	20025918 	.word	0x20025918
 801ea44:	0801b673 	.word	0x0801b673
 801ea48:	200002d4 	.word	0x200002d4

0801ea4c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801ea4c:	b510      	push	{r4, lr}
 801ea4e:	4604      	mov	r4, r0
 801ea50:	f7ff ff88 	bl	801e964 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ea54:	4620      	mov	r0, r4
 801ea56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea5a:	f7ff bfbd 	b.w	801e9d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ea60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ea60:	b538      	push	{r3, r4, r5, lr}
 801ea62:	4c15      	ldr	r4, [pc, #84]	; (801eab8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ea64:	7823      	ldrb	r3, [r4, #0]
 801ea66:	f3bf 8f5b 	dmb	ish
 801ea6a:	07da      	lsls	r2, r3, #31
 801ea6c:	4605      	mov	r5, r0
 801ea6e:	d40b      	bmi.n	801ea88 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ea70:	4620      	mov	r0, r4
 801ea72:	f007 fdba 	bl	80265ea <__cxa_guard_acquire>
 801ea76:	b138      	cbz	r0, 801ea88 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ea78:	4620      	mov	r0, r4
 801ea7a:	f007 fdc2 	bl	8026602 <__cxa_guard_release>
 801ea7e:	4a0f      	ldr	r2, [pc, #60]	; (801eabc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ea80:	490f      	ldr	r1, [pc, #60]	; (801eac0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ea82:	4810      	ldr	r0, [pc, #64]	; (801eac4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ea84:	f007 fdaa 	bl	80265dc <__aeabi_atexit>
 801ea88:	4c0f      	ldr	r4, [pc, #60]	; (801eac8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801ea8a:	7823      	ldrb	r3, [r4, #0]
 801ea8c:	f3bf 8f5b 	dmb	ish
 801ea90:	07db      	lsls	r3, r3, #31
 801ea92:	d40b      	bmi.n	801eaac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ea94:	4620      	mov	r0, r4
 801ea96:	f007 fda8 	bl	80265ea <__cxa_guard_acquire>
 801ea9a:	b138      	cbz	r0, 801eaac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ea9c:	4620      	mov	r0, r4
 801ea9e:	f007 fdb0 	bl	8026602 <__cxa_guard_release>
 801eaa2:	4a06      	ldr	r2, [pc, #24]	; (801eabc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801eaa4:	4909      	ldr	r1, [pc, #36]	; (801eacc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801eaa6:	480a      	ldr	r0, [pc, #40]	; (801ead0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801eaa8:	f007 fd98 	bl	80265dc <__aeabi_atexit>
 801eaac:	4b05      	ldr	r3, [pc, #20]	; (801eac4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801eaae:	632b      	str	r3, [r5, #48]	; 0x30
 801eab0:	4b07      	ldr	r3, [pc, #28]	; (801ead0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801eab2:	636b      	str	r3, [r5, #52]	; 0x34
 801eab4:	bd38      	pop	{r3, r4, r5, pc}
 801eab6:	bf00      	nop
 801eab8:	2002594c 	.word	0x2002594c
 801eabc:	20000000 	.word	0x20000000
 801eac0:	0801b669 	.word	0x0801b669
 801eac4:	20000308 	.word	0x20000308
 801eac8:	20025950 	.word	0x20025950
 801eacc:	0801b667 	.word	0x0801b667
 801ead0:	2000030c 	.word	0x2000030c

0801ead4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ead4:	b538      	push	{r3, r4, r5, lr}
 801ead6:	4c15      	ldr	r4, [pc, #84]	; (801eb2c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ead8:	7823      	ldrb	r3, [r4, #0]
 801eada:	f3bf 8f5b 	dmb	ish
 801eade:	07da      	lsls	r2, r3, #31
 801eae0:	4605      	mov	r5, r0
 801eae2:	d40b      	bmi.n	801eafc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801eae4:	4620      	mov	r0, r4
 801eae6:	f007 fd80 	bl	80265ea <__cxa_guard_acquire>
 801eaea:	b138      	cbz	r0, 801eafc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801eaec:	4620      	mov	r0, r4
 801eaee:	f007 fd88 	bl	8026602 <__cxa_guard_release>
 801eaf2:	4a0f      	ldr	r2, [pc, #60]	; (801eb30 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801eaf4:	490f      	ldr	r1, [pc, #60]	; (801eb34 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801eaf6:	4810      	ldr	r0, [pc, #64]	; (801eb38 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801eaf8:	f007 fd70 	bl	80265dc <__aeabi_atexit>
 801eafc:	4c0f      	ldr	r4, [pc, #60]	; (801eb3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801eafe:	7823      	ldrb	r3, [r4, #0]
 801eb00:	f3bf 8f5b 	dmb	ish
 801eb04:	07db      	lsls	r3, r3, #31
 801eb06:	d40b      	bmi.n	801eb20 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801eb08:	4620      	mov	r0, r4
 801eb0a:	f007 fd6e 	bl	80265ea <__cxa_guard_acquire>
 801eb0e:	b138      	cbz	r0, 801eb20 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801eb10:	4620      	mov	r0, r4
 801eb12:	f007 fd76 	bl	8026602 <__cxa_guard_release>
 801eb16:	4a06      	ldr	r2, [pc, #24]	; (801eb30 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801eb18:	4909      	ldr	r1, [pc, #36]	; (801eb40 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801eb1a:	480a      	ldr	r0, [pc, #40]	; (801eb44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801eb1c:	f007 fd5e 	bl	80265dc <__aeabi_atexit>
 801eb20:	4b05      	ldr	r3, [pc, #20]	; (801eb38 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801eb22:	62ab      	str	r3, [r5, #40]	; 0x28
 801eb24:	4b07      	ldr	r3, [pc, #28]	; (801eb44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801eb26:	62eb      	str	r3, [r5, #44]	; 0x2c
 801eb28:	bd38      	pop	{r3, r4, r5, pc}
 801eb2a:	bf00      	nop
 801eb2c:	2002591c 	.word	0x2002591c
 801eb30:	20000000 	.word	0x20000000
 801eb34:	0801b66d 	.word	0x0801b66d
 801eb38:	200002d8 	.word	0x200002d8
 801eb3c:	20025920 	.word	0x20025920
 801eb40:	0801b66b 	.word	0x0801b66b
 801eb44:	200002dc 	.word	0x200002dc

0801eb48 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801eb48:	b510      	push	{r4, lr}
 801eb4a:	4604      	mov	r4, r0
 801eb4c:	f7ff ff88 	bl	801ea60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801eb50:	4620      	mov	r0, r4
 801eb52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb56:	f7ff bfbd 	b.w	801ead4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801eb5c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801eb5c:	b538      	push	{r3, r4, r5, lr}
 801eb5e:	4c15      	ldr	r4, [pc, #84]	; (801ebb4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801eb60:	7823      	ldrb	r3, [r4, #0]
 801eb62:	f3bf 8f5b 	dmb	ish
 801eb66:	07da      	lsls	r2, r3, #31
 801eb68:	4605      	mov	r5, r0
 801eb6a:	d40b      	bmi.n	801eb84 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801eb6c:	4620      	mov	r0, r4
 801eb6e:	f007 fd3c 	bl	80265ea <__cxa_guard_acquire>
 801eb72:	b138      	cbz	r0, 801eb84 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801eb74:	4620      	mov	r0, r4
 801eb76:	f007 fd44 	bl	8026602 <__cxa_guard_release>
 801eb7a:	4a0f      	ldr	r2, [pc, #60]	; (801ebb8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801eb7c:	490f      	ldr	r1, [pc, #60]	; (801ebbc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801eb7e:	4810      	ldr	r0, [pc, #64]	; (801ebc0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801eb80:	f007 fd2c 	bl	80265dc <__aeabi_atexit>
 801eb84:	4c0f      	ldr	r4, [pc, #60]	; (801ebc4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801eb86:	7823      	ldrb	r3, [r4, #0]
 801eb88:	f3bf 8f5b 	dmb	ish
 801eb8c:	07db      	lsls	r3, r3, #31
 801eb8e:	d40b      	bmi.n	801eba8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801eb90:	4620      	mov	r0, r4
 801eb92:	f007 fd2a 	bl	80265ea <__cxa_guard_acquire>
 801eb96:	b138      	cbz	r0, 801eba8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801eb98:	4620      	mov	r0, r4
 801eb9a:	f007 fd32 	bl	8026602 <__cxa_guard_release>
 801eb9e:	4a06      	ldr	r2, [pc, #24]	; (801ebb8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801eba0:	4909      	ldr	r1, [pc, #36]	; (801ebc8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801eba2:	480a      	ldr	r0, [pc, #40]	; (801ebcc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801eba4:	f007 fd1a 	bl	80265dc <__aeabi_atexit>
 801eba8:	4b05      	ldr	r3, [pc, #20]	; (801ebc0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801ebaa:	652b      	str	r3, [r5, #80]	; 0x50
 801ebac:	4b07      	ldr	r3, [pc, #28]	; (801ebcc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801ebae:	656b      	str	r3, [r5, #84]	; 0x54
 801ebb0:	bd38      	pop	{r3, r4, r5, pc}
 801ebb2:	bf00      	nop
 801ebb4:	20025954 	.word	0x20025954
 801ebb8:	20000000 	.word	0x20000000
 801ebbc:	0801b659 	.word	0x0801b659
 801ebc0:	20000310 	.word	0x20000310
 801ebc4:	20025958 	.word	0x20025958
 801ebc8:	0801b657 	.word	0x0801b657
 801ebcc:	20000314 	.word	0x20000314

0801ebd0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801ebd0:	b538      	push	{r3, r4, r5, lr}
 801ebd2:	4c15      	ldr	r4, [pc, #84]	; (801ec28 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801ebd4:	7823      	ldrb	r3, [r4, #0]
 801ebd6:	f3bf 8f5b 	dmb	ish
 801ebda:	07da      	lsls	r2, r3, #31
 801ebdc:	4605      	mov	r5, r0
 801ebde:	d40b      	bmi.n	801ebf8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801ebe0:	4620      	mov	r0, r4
 801ebe2:	f007 fd02 	bl	80265ea <__cxa_guard_acquire>
 801ebe6:	b138      	cbz	r0, 801ebf8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801ebe8:	4620      	mov	r0, r4
 801ebea:	f007 fd0a 	bl	8026602 <__cxa_guard_release>
 801ebee:	4a0f      	ldr	r2, [pc, #60]	; (801ec2c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801ebf0:	490f      	ldr	r1, [pc, #60]	; (801ec30 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801ebf2:	4810      	ldr	r0, [pc, #64]	; (801ec34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801ebf4:	f007 fcf2 	bl	80265dc <__aeabi_atexit>
 801ebf8:	4c0f      	ldr	r4, [pc, #60]	; (801ec38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801ebfa:	7823      	ldrb	r3, [r4, #0]
 801ebfc:	f3bf 8f5b 	dmb	ish
 801ec00:	07db      	lsls	r3, r3, #31
 801ec02:	d40b      	bmi.n	801ec1c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801ec04:	4620      	mov	r0, r4
 801ec06:	f007 fcf0 	bl	80265ea <__cxa_guard_acquire>
 801ec0a:	b138      	cbz	r0, 801ec1c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801ec0c:	4620      	mov	r0, r4
 801ec0e:	f007 fcf8 	bl	8026602 <__cxa_guard_release>
 801ec12:	4a06      	ldr	r2, [pc, #24]	; (801ec2c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801ec14:	4909      	ldr	r1, [pc, #36]	; (801ec3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801ec16:	480a      	ldr	r0, [pc, #40]	; (801ec40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801ec18:	f007 fce0 	bl	80265dc <__aeabi_atexit>
 801ec1c:	4b05      	ldr	r3, [pc, #20]	; (801ec34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801ec1e:	64ab      	str	r3, [r5, #72]	; 0x48
 801ec20:	4b07      	ldr	r3, [pc, #28]	; (801ec40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801ec22:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ec24:	bd38      	pop	{r3, r4, r5, pc}
 801ec26:	bf00      	nop
 801ec28:	2002595c 	.word	0x2002595c
 801ec2c:	20000000 	.word	0x20000000
 801ec30:	0801b65d 	.word	0x0801b65d
 801ec34:	20000318 	.word	0x20000318
 801ec38:	20025960 	.word	0x20025960
 801ec3c:	0801b65b 	.word	0x0801b65b
 801ec40:	2000031c 	.word	0x2000031c

0801ec44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801ec44:	b538      	push	{r3, r4, r5, lr}
 801ec46:	4c15      	ldr	r4, [pc, #84]	; (801ec9c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801ec48:	7823      	ldrb	r3, [r4, #0]
 801ec4a:	f3bf 8f5b 	dmb	ish
 801ec4e:	07da      	lsls	r2, r3, #31
 801ec50:	4605      	mov	r5, r0
 801ec52:	d40b      	bmi.n	801ec6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801ec54:	4620      	mov	r0, r4
 801ec56:	f007 fcc8 	bl	80265ea <__cxa_guard_acquire>
 801ec5a:	b138      	cbz	r0, 801ec6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801ec5c:	4620      	mov	r0, r4
 801ec5e:	f007 fcd0 	bl	8026602 <__cxa_guard_release>
 801ec62:	4a0f      	ldr	r2, [pc, #60]	; (801eca0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ec64:	490f      	ldr	r1, [pc, #60]	; (801eca4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801ec66:	4810      	ldr	r0, [pc, #64]	; (801eca8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801ec68:	f007 fcb8 	bl	80265dc <__aeabi_atexit>
 801ec6c:	4c0f      	ldr	r4, [pc, #60]	; (801ecac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801ec6e:	7823      	ldrb	r3, [r4, #0]
 801ec70:	f3bf 8f5b 	dmb	ish
 801ec74:	07db      	lsls	r3, r3, #31
 801ec76:	d40b      	bmi.n	801ec90 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801ec78:	4620      	mov	r0, r4
 801ec7a:	f007 fcb6 	bl	80265ea <__cxa_guard_acquire>
 801ec7e:	b138      	cbz	r0, 801ec90 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801ec80:	4620      	mov	r0, r4
 801ec82:	f007 fcbe 	bl	8026602 <__cxa_guard_release>
 801ec86:	4a06      	ldr	r2, [pc, #24]	; (801eca0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ec88:	4909      	ldr	r1, [pc, #36]	; (801ecb0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801ec8a:	480a      	ldr	r0, [pc, #40]	; (801ecb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801ec8c:	f007 fca6 	bl	80265dc <__aeabi_atexit>
 801ec90:	4b05      	ldr	r3, [pc, #20]	; (801eca8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801ec92:	642b      	str	r3, [r5, #64]	; 0x40
 801ec94:	4b07      	ldr	r3, [pc, #28]	; (801ecb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801ec96:	646b      	str	r3, [r5, #68]	; 0x44
 801ec98:	bd38      	pop	{r3, r4, r5, pc}
 801ec9a:	bf00      	nop
 801ec9c:	20025924 	.word	0x20025924
 801eca0:	20000000 	.word	0x20000000
 801eca4:	0801b661 	.word	0x0801b661
 801eca8:	200002e0 	.word	0x200002e0
 801ecac:	20025928 	.word	0x20025928
 801ecb0:	0801b65f 	.word	0x0801b65f
 801ecb4:	200002e4 	.word	0x200002e4

0801ecb8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801ecb8:	b538      	push	{r3, r4, r5, lr}
 801ecba:	4c15      	ldr	r4, [pc, #84]	; (801ed10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801ecbc:	7823      	ldrb	r3, [r4, #0]
 801ecbe:	f3bf 8f5b 	dmb	ish
 801ecc2:	07da      	lsls	r2, r3, #31
 801ecc4:	4605      	mov	r5, r0
 801ecc6:	d40b      	bmi.n	801ece0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801ecc8:	4620      	mov	r0, r4
 801ecca:	f007 fc8e 	bl	80265ea <__cxa_guard_acquire>
 801ecce:	b138      	cbz	r0, 801ece0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801ecd0:	4620      	mov	r0, r4
 801ecd2:	f007 fc96 	bl	8026602 <__cxa_guard_release>
 801ecd6:	4a0f      	ldr	r2, [pc, #60]	; (801ed14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801ecd8:	490f      	ldr	r1, [pc, #60]	; (801ed18 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801ecda:	4810      	ldr	r0, [pc, #64]	; (801ed1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801ecdc:	f007 fc7e 	bl	80265dc <__aeabi_atexit>
 801ece0:	4c0f      	ldr	r4, [pc, #60]	; (801ed20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801ece2:	7823      	ldrb	r3, [r4, #0]
 801ece4:	f3bf 8f5b 	dmb	ish
 801ece8:	07db      	lsls	r3, r3, #31
 801ecea:	d40b      	bmi.n	801ed04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801ecec:	4620      	mov	r0, r4
 801ecee:	f007 fc7c 	bl	80265ea <__cxa_guard_acquire>
 801ecf2:	b138      	cbz	r0, 801ed04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801ecf4:	4620      	mov	r0, r4
 801ecf6:	f007 fc84 	bl	8026602 <__cxa_guard_release>
 801ecfa:	4a06      	ldr	r2, [pc, #24]	; (801ed14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801ecfc:	4909      	ldr	r1, [pc, #36]	; (801ed24 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801ecfe:	480a      	ldr	r0, [pc, #40]	; (801ed28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801ed00:	f007 fc6c 	bl	80265dc <__aeabi_atexit>
 801ed04:	4b05      	ldr	r3, [pc, #20]	; (801ed1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801ed06:	63ab      	str	r3, [r5, #56]	; 0x38
 801ed08:	4b07      	ldr	r3, [pc, #28]	; (801ed28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801ed0a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ed0c:	bd38      	pop	{r3, r4, r5, pc}
 801ed0e:	bf00      	nop
 801ed10:	20025944 	.word	0x20025944
 801ed14:	20000000 	.word	0x20000000
 801ed18:	0801b665 	.word	0x0801b665
 801ed1c:	20000300 	.word	0x20000300
 801ed20:	20025948 	.word	0x20025948
 801ed24:	0801b663 	.word	0x0801b663
 801ed28:	20000304 	.word	0x20000304

0801ed2c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801ed2c:	b510      	push	{r4, lr}
 801ed2e:	4604      	mov	r4, r0
 801ed30:	f7ff ff14 	bl	801eb5c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801ed34:	4620      	mov	r0, r4
 801ed36:	f7ff ff85 	bl	801ec44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801ed3a:	4620      	mov	r0, r4
 801ed3c:	f7ff ff48 	bl	801ebd0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801ed40:	4620      	mov	r0, r4
 801ed42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed46:	f7ff bfb7 	b.w	801ecb8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801ed4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ed4c:	b538      	push	{r3, r4, r5, lr}
 801ed4e:	4c15      	ldr	r4, [pc, #84]	; (801eda4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ed50:	7823      	ldrb	r3, [r4, #0]
 801ed52:	f3bf 8f5b 	dmb	ish
 801ed56:	07da      	lsls	r2, r3, #31
 801ed58:	4605      	mov	r5, r0
 801ed5a:	d40b      	bmi.n	801ed74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ed5c:	4620      	mov	r0, r4
 801ed5e:	f007 fc44 	bl	80265ea <__cxa_guard_acquire>
 801ed62:	b138      	cbz	r0, 801ed74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ed64:	4620      	mov	r0, r4
 801ed66:	f007 fc4c 	bl	8026602 <__cxa_guard_release>
 801ed6a:	4a0f      	ldr	r2, [pc, #60]	; (801eda8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ed6c:	490f      	ldr	r1, [pc, #60]	; (801edac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ed6e:	4810      	ldr	r0, [pc, #64]	; (801edb0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ed70:	f007 fc34 	bl	80265dc <__aeabi_atexit>
 801ed74:	4c0f      	ldr	r4, [pc, #60]	; (801edb4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801ed76:	7823      	ldrb	r3, [r4, #0]
 801ed78:	f3bf 8f5b 	dmb	ish
 801ed7c:	07db      	lsls	r3, r3, #31
 801ed7e:	d40b      	bmi.n	801ed98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ed80:	4620      	mov	r0, r4
 801ed82:	f007 fc32 	bl	80265ea <__cxa_guard_acquire>
 801ed86:	b138      	cbz	r0, 801ed98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ed88:	4620      	mov	r0, r4
 801ed8a:	f007 fc3a 	bl	8026602 <__cxa_guard_release>
 801ed8e:	4a06      	ldr	r2, [pc, #24]	; (801eda8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ed90:	4909      	ldr	r1, [pc, #36]	; (801edb8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ed92:	480a      	ldr	r0, [pc, #40]	; (801edbc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ed94:	f007 fc22 	bl	80265dc <__aeabi_atexit>
 801ed98:	4b05      	ldr	r3, [pc, #20]	; (801edb0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ed9a:	662b      	str	r3, [r5, #96]	; 0x60
 801ed9c:	4b07      	ldr	r3, [pc, #28]	; (801edbc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ed9e:	666b      	str	r3, [r5, #100]	; 0x64
 801eda0:	bd38      	pop	{r3, r4, r5, pc}
 801eda2:	bf00      	nop
 801eda4:	2002592c 	.word	0x2002592c
 801eda8:	20000000 	.word	0x20000000
 801edac:	0801b651 	.word	0x0801b651
 801edb0:	200002e8 	.word	0x200002e8
 801edb4:	20025930 	.word	0x20025930
 801edb8:	0801b64f 	.word	0x0801b64f
 801edbc:	200002ec 	.word	0x200002ec

0801edc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801edc0:	b538      	push	{r3, r4, r5, lr}
 801edc2:	4c15      	ldr	r4, [pc, #84]	; (801ee18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801edc4:	7823      	ldrb	r3, [r4, #0]
 801edc6:	f3bf 8f5b 	dmb	ish
 801edca:	07da      	lsls	r2, r3, #31
 801edcc:	4605      	mov	r5, r0
 801edce:	d40b      	bmi.n	801ede8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801edd0:	4620      	mov	r0, r4
 801edd2:	f007 fc0a 	bl	80265ea <__cxa_guard_acquire>
 801edd6:	b138      	cbz	r0, 801ede8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801edd8:	4620      	mov	r0, r4
 801edda:	f007 fc12 	bl	8026602 <__cxa_guard_release>
 801edde:	4a0f      	ldr	r2, [pc, #60]	; (801ee1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ede0:	490f      	ldr	r1, [pc, #60]	; (801ee20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ede2:	4810      	ldr	r0, [pc, #64]	; (801ee24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ede4:	f007 fbfa 	bl	80265dc <__aeabi_atexit>
 801ede8:	4c0f      	ldr	r4, [pc, #60]	; (801ee28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801edea:	7823      	ldrb	r3, [r4, #0]
 801edec:	f3bf 8f5b 	dmb	ish
 801edf0:	07db      	lsls	r3, r3, #31
 801edf2:	d40b      	bmi.n	801ee0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801edf4:	4620      	mov	r0, r4
 801edf6:	f007 fbf8 	bl	80265ea <__cxa_guard_acquire>
 801edfa:	b138      	cbz	r0, 801ee0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801edfc:	4620      	mov	r0, r4
 801edfe:	f007 fc00 	bl	8026602 <__cxa_guard_release>
 801ee02:	4a06      	ldr	r2, [pc, #24]	; (801ee1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ee04:	4909      	ldr	r1, [pc, #36]	; (801ee2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ee06:	480a      	ldr	r0, [pc, #40]	; (801ee30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ee08:	f007 fbe8 	bl	80265dc <__aeabi_atexit>
 801ee0c:	4b05      	ldr	r3, [pc, #20]	; (801ee24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ee0e:	65ab      	str	r3, [r5, #88]	; 0x58
 801ee10:	4b07      	ldr	r3, [pc, #28]	; (801ee30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ee12:	65eb      	str	r3, [r5, #92]	; 0x5c
 801ee14:	bd38      	pop	{r3, r4, r5, pc}
 801ee16:	bf00      	nop
 801ee18:	20025904 	.word	0x20025904
 801ee1c:	20000000 	.word	0x20000000
 801ee20:	0801b655 	.word	0x0801b655
 801ee24:	200002c0 	.word	0x200002c0
 801ee28:	20025908 	.word	0x20025908
 801ee2c:	0801b653 	.word	0x0801b653
 801ee30:	200002c4 	.word	0x200002c4

0801ee34 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801ee34:	b510      	push	{r4, lr}
 801ee36:	4604      	mov	r4, r0
 801ee38:	f7ff ff88 	bl	801ed4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ee3c:	4620      	mov	r0, r4
 801ee3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee42:	f7ff bfbd 	b.w	801edc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ee48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ee48:	b538      	push	{r3, r4, r5, lr}
 801ee4a:	4c15      	ldr	r4, [pc, #84]	; (801eea0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ee4c:	7823      	ldrb	r3, [r4, #0]
 801ee4e:	f3bf 8f5b 	dmb	ish
 801ee52:	07da      	lsls	r2, r3, #31
 801ee54:	4605      	mov	r5, r0
 801ee56:	d40b      	bmi.n	801ee70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ee58:	4620      	mov	r0, r4
 801ee5a:	f007 fbc6 	bl	80265ea <__cxa_guard_acquire>
 801ee5e:	b138      	cbz	r0, 801ee70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ee60:	4620      	mov	r0, r4
 801ee62:	f007 fbce 	bl	8026602 <__cxa_guard_release>
 801ee66:	4a0f      	ldr	r2, [pc, #60]	; (801eea4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ee68:	490f      	ldr	r1, [pc, #60]	; (801eea8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ee6a:	4810      	ldr	r0, [pc, #64]	; (801eeac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ee6c:	f007 fbb6 	bl	80265dc <__aeabi_atexit>
 801ee70:	4c0f      	ldr	r4, [pc, #60]	; (801eeb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ee72:	7823      	ldrb	r3, [r4, #0]
 801ee74:	f3bf 8f5b 	dmb	ish
 801ee78:	07db      	lsls	r3, r3, #31
 801ee7a:	d40b      	bmi.n	801ee94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ee7c:	4620      	mov	r0, r4
 801ee7e:	f007 fbb4 	bl	80265ea <__cxa_guard_acquire>
 801ee82:	b138      	cbz	r0, 801ee94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ee84:	4620      	mov	r0, r4
 801ee86:	f007 fbbc 	bl	8026602 <__cxa_guard_release>
 801ee8a:	4a06      	ldr	r2, [pc, #24]	; (801eea4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ee8c:	4909      	ldr	r1, [pc, #36]	; (801eeb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ee8e:	480a      	ldr	r0, [pc, #40]	; (801eeb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ee90:	f007 fba4 	bl	80265dc <__aeabi_atexit>
 801ee94:	4b05      	ldr	r3, [pc, #20]	; (801eeac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ee96:	672b      	str	r3, [r5, #112]	; 0x70
 801ee98:	4b07      	ldr	r3, [pc, #28]	; (801eeb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ee9a:	676b      	str	r3, [r5, #116]	; 0x74
 801ee9c:	bd38      	pop	{r3, r4, r5, pc}
 801ee9e:	bf00      	nop
 801eea0:	200258fc 	.word	0x200258fc
 801eea4:	20000000 	.word	0x20000000
 801eea8:	0801b649 	.word	0x0801b649
 801eeac:	200002b8 	.word	0x200002b8
 801eeb0:	20025900 	.word	0x20025900
 801eeb4:	0801b647 	.word	0x0801b647
 801eeb8:	200002bc 	.word	0x200002bc

0801eebc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801eebc:	b538      	push	{r3, r4, r5, lr}
 801eebe:	4c15      	ldr	r4, [pc, #84]	; (801ef14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801eec0:	7823      	ldrb	r3, [r4, #0]
 801eec2:	f3bf 8f5b 	dmb	ish
 801eec6:	07da      	lsls	r2, r3, #31
 801eec8:	4605      	mov	r5, r0
 801eeca:	d40b      	bmi.n	801eee4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801eecc:	4620      	mov	r0, r4
 801eece:	f007 fb8c 	bl	80265ea <__cxa_guard_acquire>
 801eed2:	b138      	cbz	r0, 801eee4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801eed4:	4620      	mov	r0, r4
 801eed6:	f007 fb94 	bl	8026602 <__cxa_guard_release>
 801eeda:	4a0f      	ldr	r2, [pc, #60]	; (801ef18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801eedc:	490f      	ldr	r1, [pc, #60]	; (801ef1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801eede:	4810      	ldr	r0, [pc, #64]	; (801ef20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801eee0:	f007 fb7c 	bl	80265dc <__aeabi_atexit>
 801eee4:	4c0f      	ldr	r4, [pc, #60]	; (801ef24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801eee6:	7823      	ldrb	r3, [r4, #0]
 801eee8:	f3bf 8f5b 	dmb	ish
 801eeec:	07db      	lsls	r3, r3, #31
 801eeee:	d40b      	bmi.n	801ef08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801eef0:	4620      	mov	r0, r4
 801eef2:	f007 fb7a 	bl	80265ea <__cxa_guard_acquire>
 801eef6:	b138      	cbz	r0, 801ef08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801eef8:	4620      	mov	r0, r4
 801eefa:	f007 fb82 	bl	8026602 <__cxa_guard_release>
 801eefe:	4a06      	ldr	r2, [pc, #24]	; (801ef18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ef00:	4909      	ldr	r1, [pc, #36]	; (801ef28 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ef02:	480a      	ldr	r0, [pc, #40]	; (801ef2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ef04:	f007 fb6a 	bl	80265dc <__aeabi_atexit>
 801ef08:	4b05      	ldr	r3, [pc, #20]	; (801ef20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ef0a:	66ab      	str	r3, [r5, #104]	; 0x68
 801ef0c:	4b07      	ldr	r3, [pc, #28]	; (801ef2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ef0e:	66eb      	str	r3, [r5, #108]	; 0x6c
 801ef10:	bd38      	pop	{r3, r4, r5, pc}
 801ef12:	bf00      	nop
 801ef14:	200258f4 	.word	0x200258f4
 801ef18:	20000000 	.word	0x20000000
 801ef1c:	0801b64d 	.word	0x0801b64d
 801ef20:	200002b0 	.word	0x200002b0
 801ef24:	200258f8 	.word	0x200258f8
 801ef28:	0801b64b 	.word	0x0801b64b
 801ef2c:	200002b4 	.word	0x200002b4

0801ef30 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801ef30:	b510      	push	{r4, lr}
 801ef32:	4604      	mov	r4, r0
 801ef34:	f7ff ff88 	bl	801ee48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ef38:	4620      	mov	r0, r4
 801ef3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef3e:	f7ff bfbd 	b.w	801eebc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801ef42 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801ef42:	b510      	push	{r4, lr}
 801ef44:	4604      	mov	r4, r0
 801ef46:	f7ff fff3 	bl	801ef30 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801ef4a:	4620      	mov	r0, r4
 801ef4c:	f7ff ff72 	bl	801ee34 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801ef50:	4620      	mov	r0, r4
 801ef52:	f7ff fdf9 	bl	801eb48 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801ef56:	4620      	mov	r0, r4
 801ef58:	f7ff fcfa 	bl	801e950 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801ef5c:	4620      	mov	r0, r4
 801ef5e:	f7ff fd75 	bl	801ea4c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801ef62:	4620      	mov	r0, r4
 801ef64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef68:	f7ff bee0 	b.w	801ed2c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801ef6c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 801ef6c:	b538      	push	{r3, r4, r5, lr}
 801ef6e:	4c0b      	ldr	r4, [pc, #44]	; (801ef9c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 801ef70:	7823      	ldrb	r3, [r4, #0]
 801ef72:	f3bf 8f5b 	dmb	ish
 801ef76:	07db      	lsls	r3, r3, #31
 801ef78:	4605      	mov	r5, r0
 801ef7a:	d40b      	bmi.n	801ef94 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801ef7c:	4620      	mov	r0, r4
 801ef7e:	f007 fb34 	bl	80265ea <__cxa_guard_acquire>
 801ef82:	b138      	cbz	r0, 801ef94 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801ef84:	4620      	mov	r0, r4
 801ef86:	f007 fb3c 	bl	8026602 <__cxa_guard_release>
 801ef8a:	4a05      	ldr	r2, [pc, #20]	; (801efa0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 801ef8c:	4905      	ldr	r1, [pc, #20]	; (801efa4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801ef8e:	4806      	ldr	r0, [pc, #24]	; (801efa8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801ef90:	f007 fb24 	bl	80265dc <__aeabi_atexit>
 801ef94:	4b04      	ldr	r3, [pc, #16]	; (801efa8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801ef96:	67ab      	str	r3, [r5, #120]	; 0x78
 801ef98:	bd38      	pop	{r3, r4, r5, pc}
 801ef9a:	bf00      	nop
 801ef9c:	200258e8 	.word	0x200258e8
 801efa0:	20000000 	.word	0x20000000
 801efa4:	0801b645 	.word	0x0801b645
 801efa8:	200002a8 	.word	0x200002a8

0801efac <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 801efac:	b538      	push	{r3, r4, r5, lr}
 801efae:	4c0b      	ldr	r4, [pc, #44]	; (801efdc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 801efb0:	7823      	ldrb	r3, [r4, #0]
 801efb2:	f3bf 8f5b 	dmb	ish
 801efb6:	07db      	lsls	r3, r3, #31
 801efb8:	4605      	mov	r5, r0
 801efba:	d40b      	bmi.n	801efd4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801efbc:	4620      	mov	r0, r4
 801efbe:	f007 fb14 	bl	80265ea <__cxa_guard_acquire>
 801efc2:	b138      	cbz	r0, 801efd4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801efc4:	4620      	mov	r0, r4
 801efc6:	f007 fb1c 	bl	8026602 <__cxa_guard_release>
 801efca:	4a05      	ldr	r2, [pc, #20]	; (801efe0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 801efcc:	4905      	ldr	r1, [pc, #20]	; (801efe4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 801efce:	4806      	ldr	r0, [pc, #24]	; (801efe8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801efd0:	f007 fb04 	bl	80265dc <__aeabi_atexit>
 801efd4:	4b04      	ldr	r3, [pc, #16]	; (801efe8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801efd6:	67eb      	str	r3, [r5, #124]	; 0x7c
 801efd8:	bd38      	pop	{r3, r4, r5, pc}
 801efda:	bf00      	nop
 801efdc:	200258ec 	.word	0x200258ec
 801efe0:	20000000 	.word	0x20000000
 801efe4:	0801b643 	.word	0x0801b643
 801efe8:	200002ac 	.word	0x200002ac

0801efec <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 801efec:	b570      	push	{r4, r5, r6, lr}
 801efee:	4d0d      	ldr	r5, [pc, #52]	; (801f024 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801eff0:	4c0d      	ldr	r4, [pc, #52]	; (801f028 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801eff2:	782b      	ldrb	r3, [r5, #0]
 801eff4:	f3bf 8f5b 	dmb	ish
 801eff8:	f013 0f01 	tst.w	r3, #1
 801effc:	4606      	mov	r6, r0
 801effe:	d10d      	bne.n	801f01c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801f000:	4628      	mov	r0, r5
 801f002:	f007 faf2 	bl	80265ea <__cxa_guard_acquire>
 801f006:	b148      	cbz	r0, 801f01c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801f008:	4b08      	ldr	r3, [pc, #32]	; (801f02c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801f00a:	6023      	str	r3, [r4, #0]
 801f00c:	4628      	mov	r0, r5
 801f00e:	f007 faf8 	bl	8026602 <__cxa_guard_release>
 801f012:	4a07      	ldr	r2, [pc, #28]	; (801f030 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801f014:	4907      	ldr	r1, [pc, #28]	; (801f034 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 801f016:	4620      	mov	r0, r4
 801f018:	f007 fae0 	bl	80265dc <__aeabi_atexit>
 801f01c:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 801f020:	bd70      	pop	{r4, r5, r6, pc}
 801f022:	bf00      	nop
 801f024:	200258f0 	.word	0x200258f0
 801f028:	20025964 	.word	0x20025964
 801f02c:	0802995c 	.word	0x0802995c
 801f030:	20000000 	.word	0x20000000
 801f034:	0801b641 	.word	0x0801b641

0801f038 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 801f038:	b510      	push	{r4, lr}
 801f03a:	4604      	mov	r4, r0
 801f03c:	f7ff ff96 	bl	801ef6c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 801f040:	4620      	mov	r0, r4
 801f042:	f7ff ffb3 	bl	801efac <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 801f046:	4620      	mov	r0, r4
 801f048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f04c:	f7ff bfce 	b.w	801efec <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

0801f050 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801f050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f054:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801f058:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801f05c:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801f060:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801f064:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801f068:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801f06c:	8808      	ldrh	r0, [r1, #0]
 801f06e:	fb05 4c0e 	mla	ip, r5, lr, r4
 801f072:	2d00      	cmp	r5, #0
 801f074:	eb02 0a0c 	add.w	sl, r2, ip
 801f078:	f2c0 80b0 	blt.w	801f1dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801f07c:	45ab      	cmp	fp, r5
 801f07e:	f340 80ad 	ble.w	801f1dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801f082:	2c00      	cmp	r4, #0
 801f084:	f2c0 80a8 	blt.w	801f1d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f088:	45a6      	cmp	lr, r4
 801f08a:	f340 80a5 	ble.w	801f1d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f08e:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f092:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801f096:	1c62      	adds	r2, r4, #1
 801f098:	f100 80a3 	bmi.w	801f1e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f09c:	4596      	cmp	lr, r2
 801f09e:	f340 80a0 	ble.w	801f1e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f0a2:	f1b9 0f00 	cmp.w	r9, #0
 801f0a6:	f000 809c 	beq.w	801f1e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f0aa:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f0ae:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f0b2:	3501      	adds	r5, #1
 801f0b4:	f100 8099 	bmi.w	801f1ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f0b8:	45ab      	cmp	fp, r5
 801f0ba:	f340 8096 	ble.w	801f1ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f0be:	2f00      	cmp	r7, #0
 801f0c0:	f000 8093 	beq.w	801f1ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f0c4:	2c00      	cmp	r4, #0
 801f0c6:	f2c0 808e 	blt.w	801f1e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801f0ca:	45a6      	cmp	lr, r4
 801f0cc:	f340 808b 	ble.w	801f1e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801f0d0:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801f0d4:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801f0d8:	3401      	adds	r4, #1
 801f0da:	f100 8089 	bmi.w	801f1f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f0de:	45a6      	cmp	lr, r4
 801f0e0:	f340 8086 	ble.w	801f1f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f0e4:	f1b9 0f00 	cmp.w	r9, #0
 801f0e8:	f000 8082 	beq.w	801f1f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f0ec:	44d6      	add	lr, sl
 801f0ee:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f0f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801f0f6:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801f0fa:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f0fe:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801f102:	fb19 fe07 	smulbb	lr, r9, r7
 801f106:	ea44 0808 	orr.w	r8, r4, r8
 801f10a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801f10e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801f112:	f1c7 0210 	rsb	r2, r7, #16
 801f116:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f11a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f11e:	ea44 0c0c 	orr.w	ip, r4, ip
 801f122:	eba2 0209 	sub.w	r2, r2, r9
 801f126:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801f12a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801f12e:	fb04 f40c 	mul.w	r4, r4, ip
 801f132:	fb02 4808 	mla	r8, r2, r8, r4
 801f136:	041a      	lsls	r2, r3, #16
 801f138:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f13c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f140:	4313      	orrs	r3, r2
 801f142:	042a      	lsls	r2, r5, #16
 801f144:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f148:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f14c:	fb0e 8303 	mla	r3, lr, r3, r8
 801f150:	432a      	orrs	r2, r5
 801f152:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801f156:	fb07 3202 	mla	r2, r7, r2, r3
 801f15a:	0d53      	lsrs	r3, r2, #21
 801f15c:	0952      	lsrs	r2, r2, #5
 801f15e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f162:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f166:	431a      	orrs	r2, r3
 801f168:	b293      	uxth	r3, r2
 801f16a:	b2b4      	uxth	r4, r6
 801f16c:	1202      	asrs	r2, r0, #8
 801f16e:	43f6      	mvns	r6, r6
 801f170:	b2f6      	uxtb	r6, r6
 801f172:	121d      	asrs	r5, r3, #8
 801f174:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f178:	fb12 f206 	smulbb	r2, r2, r6
 801f17c:	10c7      	asrs	r7, r0, #3
 801f17e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f182:	00c0      	lsls	r0, r0, #3
 801f184:	fb05 2504 	mla	r5, r5, r4, r2
 801f188:	b2c0      	uxtb	r0, r0
 801f18a:	10da      	asrs	r2, r3, #3
 801f18c:	00db      	lsls	r3, r3, #3
 801f18e:	b2db      	uxtb	r3, r3
 801f190:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f194:	fb10 f006 	smulbb	r0, r0, r6
 801f198:	b2ad      	uxth	r5, r5
 801f19a:	fb03 0004 	mla	r0, r3, r4, r0
 801f19e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f1a2:	fb17 f706 	smulbb	r7, r7, r6
 801f1a6:	b280      	uxth	r0, r0
 801f1a8:	1c6b      	adds	r3, r5, #1
 801f1aa:	fb02 7204 	mla	r2, r2, r4, r7
 801f1ae:	b292      	uxth	r2, r2
 801f1b0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f1b4:	1c43      	adds	r3, r0, #1
 801f1b6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f1ba:	1c50      	adds	r0, r2, #1
 801f1bc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f1c0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f1c4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f1c8:	0952      	lsrs	r2, r2, #5
 801f1ca:	432b      	orrs	r3, r5
 801f1cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f1d0:	4313      	orrs	r3, r2
 801f1d2:	800b      	strh	r3, [r1, #0]
 801f1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1d8:	4680      	mov	r8, r0
 801f1da:	e75c      	b.n	801f096 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801f1dc:	4684      	mov	ip, r0
 801f1de:	4680      	mov	r8, r0
 801f1e0:	e767      	b.n	801f0b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801f1e2:	4684      	mov	ip, r0
 801f1e4:	e765      	b.n	801f0b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801f1e6:	4605      	mov	r5, r0
 801f1e8:	e776      	b.n	801f0d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801f1ea:	4603      	mov	r3, r0
 801f1ec:	4605      	mov	r5, r0
 801f1ee:	e782      	b.n	801f0f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801f1f0:	4603      	mov	r3, r0
 801f1f2:	e780      	b.n	801f0f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801f1f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1f8:	b099      	sub	sp, #100	; 0x64
 801f1fa:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801f1fe:	9215      	str	r2, [sp, #84]	; 0x54
 801f200:	9309      	str	r3, [sp, #36]	; 0x24
 801f202:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f204:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801f208:	930d      	str	r3, [sp, #52]	; 0x34
 801f20a:	910c      	str	r1, [sp, #48]	; 0x30
 801f20c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f210:	9016      	str	r0, [sp, #88]	; 0x58
 801f212:	6850      	ldr	r0, [r2, #4]
 801f214:	6812      	ldr	r2, [r2, #0]
 801f216:	fb00 1303 	mla	r3, r0, r3, r1
 801f21a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801f21e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f220:	681b      	ldr	r3, [r3, #0]
 801f222:	930b      	str	r3, [sp, #44]	; 0x2c
 801f224:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f226:	685e      	ldr	r6, [r3, #4]
 801f228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f22a:	43db      	mvns	r3, r3
 801f22c:	b2db      	uxtb	r3, r3
 801f22e:	3604      	adds	r6, #4
 801f230:	930a      	str	r3, [sp, #40]	; 0x28
 801f232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f234:	2b00      	cmp	r3, #0
 801f236:	dc03      	bgt.n	801f240 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	f340 8225 	ble.w	801f68a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f240:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f242:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f246:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f24a:	1e48      	subs	r0, r1, #1
 801f24c:	1e57      	subs	r7, r2, #1
 801f24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f250:	2b00      	cmp	r3, #0
 801f252:	f340 80e3 	ble.w	801f41c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f256:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801f25a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f25e:	d406      	bmi.n	801f26e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f260:	4584      	cmp	ip, r0
 801f262:	da04      	bge.n	801f26e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f264:	2b00      	cmp	r3, #0
 801f266:	db02      	blt.n	801f26e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f268:	42bb      	cmp	r3, r7
 801f26a:	f2c0 80d8 	blt.w	801f41e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f26e:	f11c 0c01 	adds.w	ip, ip, #1
 801f272:	f100 80c9 	bmi.w	801f408 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f276:	4561      	cmp	r1, ip
 801f278:	f2c0 80c6 	blt.w	801f408 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f27c:	3301      	adds	r3, #1
 801f27e:	f100 80c3 	bmi.w	801f408 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f282:	429a      	cmp	r2, r3
 801f284:	f2c0 80c0 	blt.w	801f408 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f288:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f28c:	4647      	mov	r7, r8
 801f28e:	f1bb 0f00 	cmp.w	fp, #0
 801f292:	f340 80e3 	ble.w	801f45c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801f296:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f298:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f29a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f29e:	689b      	ldr	r3, [r3, #8]
 801f2a0:	ea5f 422a 	movs.w	r2, sl, asr #16
 801f2a4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f2a8:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801f2ac:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f2b0:	f100 8121 	bmi.w	801f4f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f2b4:	f103 39ff 	add.w	r9, r3, #4294967295
 801f2b8:	454a      	cmp	r2, r9
 801f2ba:	f280 811c 	bge.w	801f4f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f2be:	f1bc 0f00 	cmp.w	ip, #0
 801f2c2:	f2c0 8118 	blt.w	801f4f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f2c6:	f10e 39ff 	add.w	r9, lr, #4294967295
 801f2ca:	45cc      	cmp	ip, r9
 801f2cc:	f280 8113 	bge.w	801f4f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f2d0:	b21b      	sxth	r3, r3
 801f2d2:	fb0c 2203 	mla	r2, ip, r3, r2
 801f2d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f2d8:	eb04 0902 	add.w	r9, r4, r2
 801f2dc:	5ca2      	ldrb	r2, [r4, r2]
 801f2de:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801f2e2:	2800      	cmp	r0, #0
 801f2e4:	f000 80fe 	beq.w	801f4e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801f2e8:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f2ec:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801f2f0:	9211      	str	r2, [sp, #68]	; 0x44
 801f2f2:	b151      	cbz	r1, 801f30a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f2f4:	eb09 0203 	add.w	r2, r9, r3
 801f2f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f2fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f300:	930f      	str	r3, [sp, #60]	; 0x3c
 801f302:	7853      	ldrb	r3, [r2, #1]
 801f304:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f308:	9312      	str	r3, [sp, #72]	; 0x48
 801f30a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f30c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f30e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f312:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f316:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f31a:	ea4c 0c03 	orr.w	ip, ip, r3
 801f31e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f320:	041b      	lsls	r3, r3, #16
 801f322:	fb10 f201 	smulbb	r2, r0, r1
 801f326:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f32a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f32e:	10d2      	asrs	r2, r2, #3
 801f330:	4323      	orrs	r3, r4
 801f332:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801f336:	4353      	muls	r3, r2
 801f338:	fb09 330c 	mla	r3, r9, ip, r3
 801f33c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f340:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f344:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f348:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f34c:	f1c1 0c10 	rsb	ip, r1, #16
 801f350:	ebac 0c00 	sub.w	ip, ip, r0
 801f354:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f358:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f35e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f360:	0418      	lsls	r0, r3, #16
 801f362:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f366:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f36a:	4318      	orrs	r0, r3
 801f36c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f370:	fb02 c200 	mla	r2, r2, r0, ip
 801f374:	0d53      	lsrs	r3, r2, #21
 801f376:	0952      	lsrs	r2, r2, #5
 801f378:	8838      	ldrh	r0, [r7, #0]
 801f37a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f37e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f382:	431a      	orrs	r2, r3
 801f384:	b292      	uxth	r2, r2
 801f386:	1201      	asrs	r1, r0, #8
 801f388:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801f38c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f390:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f394:	fb11 f104 	smulbb	r1, r1, r4
 801f398:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801f39c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f3a0:	00c0      	lsls	r0, r0, #3
 801f3a2:	fb0c 1c03 	mla	ip, ip, r3, r1
 801f3a6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f3aa:	10d1      	asrs	r1, r2, #3
 801f3ac:	b2c0      	uxtb	r0, r0
 801f3ae:	00d2      	lsls	r2, r2, #3
 801f3b0:	b2d2      	uxtb	r2, r2
 801f3b2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f3b6:	fb1e fe04 	smulbb	lr, lr, r4
 801f3ba:	fb10 f004 	smulbb	r0, r0, r4
 801f3be:	fa1f fc8c 	uxth.w	ip, ip
 801f3c2:	fb01 e103 	mla	r1, r1, r3, lr
 801f3c6:	fb02 0303 	mla	r3, r2, r3, r0
 801f3ca:	b29a      	uxth	r2, r3
 801f3cc:	f10c 0301 	add.w	r3, ip, #1
 801f3d0:	b289      	uxth	r1, r1
 801f3d2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f3d6:	1c53      	adds	r3, r2, #1
 801f3d8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f3dc:	1c4a      	adds	r2, r1, #1
 801f3de:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f3e2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f3e6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f3ea:	0949      	lsrs	r1, r1, #5
 801f3ec:	ea43 030c 	orr.w	r3, r3, ip
 801f3f0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f3f4:	430b      	orrs	r3, r1
 801f3f6:	803b      	strh	r3, [r7, #0]
 801f3f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f3fa:	449a      	add	sl, r3
 801f3fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f3fe:	3702      	adds	r7, #2
 801f400:	441d      	add	r5, r3
 801f402:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f406:	e742      	b.n	801f28e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f408:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f40a:	449a      	add	sl, r3
 801f40c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f40e:	441d      	add	r5, r3
 801f410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f412:	3b01      	subs	r3, #1
 801f414:	9309      	str	r3, [sp, #36]	; 0x24
 801f416:	f108 0802 	add.w	r8, r8, #2
 801f41a:	e718      	b.n	801f24e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f41c:	d023      	beq.n	801f466 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801f41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f420:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f422:	3b01      	subs	r3, #1
 801f424:	fb00 a003 	mla	r0, r0, r3, sl
 801f428:	1400      	asrs	r0, r0, #16
 801f42a:	f53f af2d 	bmi.w	801f288 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f42e:	3901      	subs	r1, #1
 801f430:	4288      	cmp	r0, r1
 801f432:	f6bf af29 	bge.w	801f288 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f436:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f438:	fb01 5303 	mla	r3, r1, r3, r5
 801f43c:	141b      	asrs	r3, r3, #16
 801f43e:	f53f af23 	bmi.w	801f288 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f442:	3a01      	subs	r2, #1
 801f444:	4293      	cmp	r3, r2
 801f446:	f6bf af1f 	bge.w	801f288 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f44a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f44e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801f452:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801f456:	f1be 0f00 	cmp.w	lr, #0
 801f45a:	dc6c      	bgt.n	801f536 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801f45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f45e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f462:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801f466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f468:	2b00      	cmp	r3, #0
 801f46a:	f340 810e 	ble.w	801f68a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f46e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f476:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f47a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f47c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f480:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f484:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f488:	eef0 6a62 	vmov.f32	s13, s5
 801f48c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f490:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f494:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f498:	ee16 aa90 	vmov	sl, s13
 801f49c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f4a0:	eef0 6a43 	vmov.f32	s13, s6
 801f4a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f4a8:	ee12 2a90 	vmov	r2, s5
 801f4ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f4b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4b4:	ee13 2a10 	vmov	r2, s6
 801f4b8:	9325      	str	r3, [sp, #148]	; 0x94
 801f4ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f4bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4c0:	9326      	str	r3, [sp, #152]	; 0x98
 801f4c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f4c6:	3b01      	subs	r3, #1
 801f4c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4cc:	930c      	str	r3, [sp, #48]	; 0x30
 801f4ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f4d0:	bf08      	it	eq
 801f4d2:	4613      	moveq	r3, r2
 801f4d4:	ee16 5a90 	vmov	r5, s13
 801f4d8:	9309      	str	r3, [sp, #36]	; 0x24
 801f4da:	eeb0 3a67 	vmov.f32	s6, s15
 801f4de:	eef0 2a47 	vmov.f32	s5, s14
 801f4e2:	e6a6      	b.n	801f232 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f4e4:	2900      	cmp	r1, #0
 801f4e6:	f43f af10 	beq.w	801f30a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f4ea:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f4ee:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f4f2:	930f      	str	r3, [sp, #60]	; 0x3c
 801f4f4:	e709      	b.n	801f30a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f4f6:	f112 0901 	adds.w	r9, r2, #1
 801f4fa:	f53f af7d 	bmi.w	801f3f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f4fe:	454b      	cmp	r3, r9
 801f500:	f6ff af7a 	blt.w	801f3f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f504:	f11c 0901 	adds.w	r9, ip, #1
 801f508:	f53f af76 	bmi.w	801f3f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f50c:	45ce      	cmp	lr, r9
 801f50e:	f6ff af73 	blt.w	801f3f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f512:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f514:	9202      	str	r2, [sp, #8]
 801f516:	b21b      	sxth	r3, r3
 801f518:	fa0f f28e 	sxth.w	r2, lr
 801f51c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f520:	e9cd c003 	strd	ip, r0, [sp, #12]
 801f524:	9201      	str	r2, [sp, #4]
 801f526:	9300      	str	r3, [sp, #0]
 801f528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f52a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f52c:	4633      	mov	r3, r6
 801f52e:	4639      	mov	r1, r7
 801f530:	f7ff fd8e 	bl	801f050 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801f534:	e760      	b.n	801f3f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f536:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f538:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f53a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f53e:	ea4f 422a 	mov.w	r2, sl, asr #16
 801f542:	1429      	asrs	r1, r5, #16
 801f544:	fb03 2101 	mla	r1, r3, r1, r2
 801f548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f54a:	440a      	add	r2, r1
 801f54c:	5c61      	ldrb	r1, [r4, r1]
 801f54e:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801f552:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f556:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801f55a:	f1bc 0f00 	cmp.w	ip, #0
 801f55e:	f000 808c 	beq.w	801f67a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801f562:	7857      	ldrb	r7, [r2, #1]
 801f564:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801f568:	9413      	str	r4, [sp, #76]	; 0x4c
 801f56a:	b140      	cbz	r0, 801f57e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f56c:	18d7      	adds	r7, r2, r3
 801f56e:	5cd3      	ldrb	r3, [r2, r3]
 801f570:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f574:	9310      	str	r3, [sp, #64]	; 0x40
 801f576:	787b      	ldrb	r3, [r7, #1]
 801f578:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f57c:	9314      	str	r3, [sp, #80]	; 0x50
 801f57e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f580:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f582:	fb1c f200 	smulbb	r2, ip, r0
 801f586:	041f      	lsls	r7, r3, #16
 801f588:	10d2      	asrs	r2, r2, #3
 801f58a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f58e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801f592:	431f      	orrs	r7, r3
 801f594:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801f598:	9317      	str	r3, [sp, #92]	; 0x5c
 801f59a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f59c:	041b      	lsls	r3, r3, #16
 801f59e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801f5a2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f5a6:	ea43 030b 	orr.w	r3, r3, fp
 801f5aa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f5ac:	4353      	muls	r3, r2
 801f5ae:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f5b2:	fb04 3707 	mla	r7, r4, r7, r3
 801f5b6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f5ba:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f5be:	ea43 0b01 	orr.w	fp, r3, r1
 801f5c2:	f1c0 0110 	rsb	r1, r0, #16
 801f5c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f5c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f5ca:	eba1 0c0c 	sub.w	ip, r1, ip
 801f5ce:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f5d2:	fb0c 770b 	mla	r7, ip, fp, r7
 801f5d6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f5da:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801f5de:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f5e2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f5e6:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f5ea:	fb02 770c 	mla	r7, r2, ip, r7
 801f5ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f5f0:	0d79      	lsrs	r1, r7, #21
 801f5f2:	097f      	lsrs	r7, r7, #5
 801f5f4:	8812      	ldrh	r2, [r2, #0]
 801f5f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f5fa:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f5fe:	430f      	orrs	r7, r1
 801f600:	b2bb      	uxth	r3, r7
 801f602:	1211      	asrs	r1, r2, #8
 801f604:	1218      	asrs	r0, r3, #8
 801f606:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f60a:	fb11 f104 	smulbb	r1, r1, r4
 801f60e:	10d7      	asrs	r7, r2, #3
 801f610:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f614:	00d2      	lsls	r2, r2, #3
 801f616:	fb00 1009 	mla	r0, r0, r9, r1
 801f61a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f61e:	10d9      	asrs	r1, r3, #3
 801f620:	b2d2      	uxtb	r2, r2
 801f622:	00db      	lsls	r3, r3, #3
 801f624:	fb17 f704 	smulbb	r7, r7, r4
 801f628:	fb12 f204 	smulbb	r2, r2, r4
 801f62c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f630:	b2db      	uxtb	r3, r3
 801f632:	b280      	uxth	r0, r0
 801f634:	fb01 7109 	mla	r1, r1, r9, r7
 801f638:	fb03 2309 	mla	r3, r3, r9, r2
 801f63c:	b29b      	uxth	r3, r3
 801f63e:	b289      	uxth	r1, r1
 801f640:	1c42      	adds	r2, r0, #1
 801f642:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f646:	1c4f      	adds	r7, r1, #1
 801f648:	1c5a      	adds	r2, r3, #1
 801f64a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f64e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801f652:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f656:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f65a:	0949      	lsrs	r1, r1, #5
 801f65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f65e:	4310      	orrs	r0, r2
 801f660:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f664:	4308      	orrs	r0, r1
 801f666:	f823 0b02 	strh.w	r0, [r3], #2
 801f66a:	930e      	str	r3, [sp, #56]	; 0x38
 801f66c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f66e:	449a      	add	sl, r3
 801f670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f672:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f676:	441d      	add	r5, r3
 801f678:	e6ed      	b.n	801f456 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801f67a:	2800      	cmp	r0, #0
 801f67c:	f43f af7f 	beq.w	801f57e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f680:	5cd3      	ldrb	r3, [r2, r3]
 801f682:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f686:	9310      	str	r3, [sp, #64]	; 0x40
 801f688:	e779      	b.n	801f57e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f68a:	b019      	add	sp, #100	; 0x64
 801f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f690 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f694:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801f698:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801f69c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801f6a0:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801f6a4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801f6a8:	8808      	ldrh	r0, [r1, #0]
 801f6aa:	fb08 470e 	mla	r7, r8, lr, r4
 801f6ae:	f1b8 0f00 	cmp.w	r8, #0
 801f6b2:	eb02 0907 	add.w	r9, r2, r7
 801f6b6:	db67      	blt.n	801f788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f6b8:	45c2      	cmp	sl, r8
 801f6ba:	dd65      	ble.n	801f788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f6bc:	2c00      	cmp	r4, #0
 801f6be:	db61      	blt.n	801f784 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f6c0:	45a6      	cmp	lr, r4
 801f6c2:	dd5f      	ble.n	801f784 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f6c4:	5dd2      	ldrb	r2, [r2, r7]
 801f6c6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f6ca:	1c62      	adds	r2, r4, #1
 801f6cc:	d45f      	bmi.n	801f78e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f6ce:	4596      	cmp	lr, r2
 801f6d0:	dd5d      	ble.n	801f78e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f6d2:	2d00      	cmp	r5, #0
 801f6d4:	d05b      	beq.n	801f78e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f6d6:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f6da:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801f6de:	f118 0801 	adds.w	r8, r8, #1
 801f6e2:	d458      	bmi.n	801f796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f6e4:	45c2      	cmp	sl, r8
 801f6e6:	dd56      	ble.n	801f796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f6e8:	2e00      	cmp	r6, #0
 801f6ea:	d054      	beq.n	801f796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f6ec:	2c00      	cmp	r4, #0
 801f6ee:	db50      	blt.n	801f792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f6f0:	45a6      	cmp	lr, r4
 801f6f2:	dd4e      	ble.n	801f792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f6f4:	f819 200e 	ldrb.w	r2, [r9, lr]
 801f6f8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f6fc:	3401      	adds	r4, #1
 801f6fe:	d407      	bmi.n	801f710 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f700:	45a6      	cmp	lr, r4
 801f702:	dd05      	ble.n	801f710 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f704:	b125      	cbz	r5, 801f710 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f706:	44ce      	add	lr, r9
 801f708:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f70c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801f710:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801f714:	fb15 f406 	smulbb	r4, r5, r6
 801f718:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f71c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801f720:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f724:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801f728:	ea43 0c0c 	orr.w	ip, r3, ip
 801f72c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f730:	f1c6 0310 	rsb	r3, r6, #16
 801f734:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f738:	1b5b      	subs	r3, r3, r5
 801f73a:	ea4e 0707 	orr.w	r7, lr, r7
 801f73e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801f742:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f746:	437d      	muls	r5, r7
 801f748:	fb03 5c0c 	mla	ip, r3, ip, r5
 801f74c:	0403      	lsls	r3, r0, #16
 801f74e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f752:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f756:	4318      	orrs	r0, r3
 801f758:	0413      	lsls	r3, r2, #16
 801f75a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f75e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f762:	4313      	orrs	r3, r2
 801f764:	fb04 c000 	mla	r0, r4, r0, ip
 801f768:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801f76c:	fb06 0003 	mla	r0, r6, r3, r0
 801f770:	0d43      	lsrs	r3, r0, #21
 801f772:	0940      	lsrs	r0, r0, #5
 801f774:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f778:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f77c:	4318      	orrs	r0, r3
 801f77e:	8008      	strh	r0, [r1, #0]
 801f780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f784:	4684      	mov	ip, r0
 801f786:	e7a0      	b.n	801f6ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801f788:	4607      	mov	r7, r0
 801f78a:	4684      	mov	ip, r0
 801f78c:	e7a7      	b.n	801f6de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f78e:	4607      	mov	r7, r0
 801f790:	e7a5      	b.n	801f6de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f792:	4602      	mov	r2, r0
 801f794:	e7b2      	b.n	801f6fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801f796:	4602      	mov	r2, r0
 801f798:	e7ba      	b.n	801f710 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801f79a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f79a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f79e:	b093      	sub	sp, #76	; 0x4c
 801f7a0:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801f7a4:	920f      	str	r2, [sp, #60]	; 0x3c
 801f7a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f7a8:	9108      	str	r1, [sp, #32]
 801f7aa:	9306      	str	r3, [sp, #24]
 801f7ac:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801f7b0:	9010      	str	r0, [sp, #64]	; 0x40
 801f7b2:	6850      	ldr	r0, [r2, #4]
 801f7b4:	6812      	ldr	r2, [r2, #0]
 801f7b6:	fb00 1303 	mla	r3, r0, r3, r1
 801f7ba:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801f7be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f7c0:	681b      	ldr	r3, [r3, #0]
 801f7c2:	9307      	str	r3, [sp, #28]
 801f7c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f7c6:	685f      	ldr	r7, [r3, #4]
 801f7c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f7cc:	3704      	adds	r7, #4
 801f7ce:	9b08      	ldr	r3, [sp, #32]
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	dc03      	bgt.n	801f7dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f7d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	f340 81b2 	ble.w	801fb40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f7dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f7de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f7e6:	1e48      	subs	r0, r1, #1
 801f7e8:	f102 3cff 	add.w	ip, r2, #4294967295
 801f7ec:	9b06      	ldr	r3, [sp, #24]
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	f340 80a9 	ble.w	801f946 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f7f4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f7f8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f7fc:	d406      	bmi.n	801f80c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f7fe:	4586      	cmp	lr, r0
 801f800:	da04      	bge.n	801f80c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f802:	2b00      	cmp	r3, #0
 801f804:	db02      	blt.n	801f80c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f806:	4563      	cmp	r3, ip
 801f808:	f2c0 809e 	blt.w	801f948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f80c:	f11e 0e01 	adds.w	lr, lr, #1
 801f810:	f100 808f 	bmi.w	801f932 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f814:	4571      	cmp	r1, lr
 801f816:	f2c0 808c 	blt.w	801f932 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f81a:	3301      	adds	r3, #1
 801f81c:	f100 8089 	bmi.w	801f932 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f820:	429a      	cmp	r2, r3
 801f822:	f2c0 8086 	blt.w	801f932 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f826:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f82a:	46c8      	mov	r8, r9
 801f82c:	f1bb 0f00 	cmp.w	fp, #0
 801f830:	f340 80a6 	ble.w	801f980 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f834:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f836:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f838:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f83c:	689b      	ldr	r3, [r3, #8]
 801f83e:	1422      	asrs	r2, r4, #16
 801f840:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f844:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f848:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f84c:	f100 80e3 	bmi.w	801fa16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f850:	f103 3aff 	add.w	sl, r3, #4294967295
 801f854:	4552      	cmp	r2, sl
 801f856:	f280 80de 	bge.w	801fa16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f85a:	f1bc 0f00 	cmp.w	ip, #0
 801f85e:	f2c0 80da 	blt.w	801fa16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f862:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f866:	45d4      	cmp	ip, sl
 801f868:	f280 80d5 	bge.w	801fa16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f86c:	b21b      	sxth	r3, r3
 801f86e:	fb0c 2203 	mla	r2, ip, r3, r2
 801f872:	9d07      	ldr	r5, [sp, #28]
 801f874:	eb05 0a02 	add.w	sl, r5, r2
 801f878:	5caa      	ldrb	r2, [r5, r2]
 801f87a:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801f87e:	2800      	cmp	r0, #0
 801f880:	f000 80c0 	beq.w	801fa04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f884:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f888:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801f88c:	920b      	str	r2, [sp, #44]	; 0x2c
 801f88e:	b151      	cbz	r1, 801f8a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f890:	eb0a 0203 	add.w	r2, sl, r3
 801f894:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f898:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f89c:	9309      	str	r3, [sp, #36]	; 0x24
 801f89e:	7853      	ldrb	r3, [r2, #1]
 801f8a0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f8a4:	930c      	str	r3, [sp, #48]	; 0x30
 801f8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f8aa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f8ae:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f8b2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f8b6:	ea4c 0c03 	orr.w	ip, ip, r3
 801f8ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f8bc:	041b      	lsls	r3, r3, #16
 801f8be:	fb10 f201 	smulbb	r2, r0, r1
 801f8c2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f8c6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f8ca:	10d2      	asrs	r2, r2, #3
 801f8cc:	432b      	orrs	r3, r5
 801f8ce:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801f8d2:	4353      	muls	r3, r2
 801f8d4:	fb0a 330c 	mla	r3, sl, ip, r3
 801f8d8:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f8dc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f8e0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f8e4:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f8e8:	f1c1 0c10 	rsb	ip, r1, #16
 801f8ec:	ebac 0c00 	sub.w	ip, ip, r0
 801f8f0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f8f4:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8fa:	0418      	lsls	r0, r3, #16
 801f8fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f900:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f904:	4318      	orrs	r0, r3
 801f906:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f90a:	fb02 c200 	mla	r2, r2, r0, ip
 801f90e:	0d53      	lsrs	r3, r2, #21
 801f910:	0952      	lsrs	r2, r2, #5
 801f912:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f916:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f91a:	431a      	orrs	r2, r3
 801f91c:	f8a8 2000 	strh.w	r2, [r8]
 801f920:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f922:	441c      	add	r4, r3
 801f924:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f926:	f108 0802 	add.w	r8, r8, #2
 801f92a:	441e      	add	r6, r3
 801f92c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f930:	e77c      	b.n	801f82c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f932:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f934:	441c      	add	r4, r3
 801f936:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f938:	441e      	add	r6, r3
 801f93a:	9b06      	ldr	r3, [sp, #24]
 801f93c:	3b01      	subs	r3, #1
 801f93e:	9306      	str	r3, [sp, #24]
 801f940:	f109 0902 	add.w	r9, r9, #2
 801f944:	e752      	b.n	801f7ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f946:	d020      	beq.n	801f98a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f948:	9b06      	ldr	r3, [sp, #24]
 801f94a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f94c:	3b01      	subs	r3, #1
 801f94e:	fb00 4003 	mla	r0, r0, r3, r4
 801f952:	1400      	asrs	r0, r0, #16
 801f954:	f53f af67 	bmi.w	801f826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f958:	3901      	subs	r1, #1
 801f95a:	4288      	cmp	r0, r1
 801f95c:	f6bf af63 	bge.w	801f826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f960:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f962:	fb01 6303 	mla	r3, r1, r3, r6
 801f966:	141b      	asrs	r3, r3, #16
 801f968:	f53f af5d 	bmi.w	801f826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f96c:	3a01      	subs	r2, #1
 801f96e:	4293      	cmp	r3, r2
 801f970:	f6bf af59 	bge.w	801f826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f974:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f978:	46ca      	mov	sl, r9
 801f97a:	f1b8 0f00 	cmp.w	r8, #0
 801f97e:	dc67      	bgt.n	801fa50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f980:	9b06      	ldr	r3, [sp, #24]
 801f982:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f986:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801f98a:	9b08      	ldr	r3, [sp, #32]
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	f340 80d7 	ble.w	801fb40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f992:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f996:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f99a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f99e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f9a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9a8:	eeb0 6a62 	vmov.f32	s12, s5
 801f9ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9b8:	ee16 4a10 	vmov	r4, s12
 801f9bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9c0:	eeb0 6a43 	vmov.f32	s12, s6
 801f9c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9c8:	ee12 2a90 	vmov	r2, s5
 801f9cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9d4:	ee13 2a10 	vmov	r2, s6
 801f9d8:	931f      	str	r3, [sp, #124]	; 0x7c
 801f9da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f9dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9e0:	9320      	str	r3, [sp, #128]	; 0x80
 801f9e2:	9b08      	ldr	r3, [sp, #32]
 801f9e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f9e6:	3b01      	subs	r3, #1
 801f9e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9ec:	9308      	str	r3, [sp, #32]
 801f9ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f9f0:	bf08      	it	eq
 801f9f2:	4613      	moveq	r3, r2
 801f9f4:	ee16 6a10 	vmov	r6, s12
 801f9f8:	9306      	str	r3, [sp, #24]
 801f9fa:	eeb0 3a67 	vmov.f32	s6, s15
 801f9fe:	eef0 2a47 	vmov.f32	s5, s14
 801fa02:	e6e4      	b.n	801f7ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801fa04:	2900      	cmp	r1, #0
 801fa06:	f43f af4e 	beq.w	801f8a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801fa0a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801fa0e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fa12:	9309      	str	r3, [sp, #36]	; 0x24
 801fa14:	e747      	b.n	801f8a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801fa16:	f112 0a01 	adds.w	sl, r2, #1
 801fa1a:	d481      	bmi.n	801f920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fa1c:	4553      	cmp	r3, sl
 801fa1e:	f6ff af7f 	blt.w	801f920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fa22:	f11c 0a01 	adds.w	sl, ip, #1
 801fa26:	f53f af7b 	bmi.w	801f920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fa2a:	45d6      	cmp	lr, sl
 801fa2c:	f6ff af78 	blt.w	801f920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fa30:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801fa34:	b21b      	sxth	r3, r3
 801fa36:	fa0f f28e 	sxth.w	r2, lr
 801fa3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fa3e:	9201      	str	r2, [sp, #4]
 801fa40:	9300      	str	r3, [sp, #0]
 801fa42:	9a07      	ldr	r2, [sp, #28]
 801fa44:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fa46:	463b      	mov	r3, r7
 801fa48:	4641      	mov	r1, r8
 801fa4a:	f7ff fe21 	bl	801f690 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801fa4e:	e767      	b.n	801f920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fa50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa52:	9d07      	ldr	r5, [sp, #28]
 801fa54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801fa58:	1422      	asrs	r2, r4, #16
 801fa5a:	1431      	asrs	r1, r6, #16
 801fa5c:	fb03 2101 	mla	r1, r3, r1, r2
 801fa60:	9a07      	ldr	r2, [sp, #28]
 801fa62:	440a      	add	r2, r1
 801fa64:	5c69      	ldrb	r1, [r5, r1]
 801fa66:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801fa6a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fa6e:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801fa72:	f1be 0f00 	cmp.w	lr, #0
 801fa76:	d05c      	beq.n	801fb32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801fa78:	f892 c001 	ldrb.w	ip, [r2, #1]
 801fa7c:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801fa80:	950d      	str	r5, [sp, #52]	; 0x34
 801fa82:	b150      	cbz	r0, 801fa9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801fa84:	eb02 0c03 	add.w	ip, r2, r3
 801fa88:	5cd3      	ldrb	r3, [r2, r3]
 801fa8a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fa8e:	930a      	str	r3, [sp, #40]	; 0x28
 801fa90:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801fa94:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fa98:	930e      	str	r3, [sp, #56]	; 0x38
 801fa9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fa9e:	fb1e f200 	smulbb	r2, lr, r0
 801faa2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801faa6:	10d2      	asrs	r2, r2, #3
 801faa8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801faac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fab0:	ea4c 0c03 	orr.w	ip, ip, r3
 801fab4:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801fab8:	9311      	str	r3, [sp, #68]	; 0x44
 801faba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fabc:	041b      	lsls	r3, r3, #16
 801fabe:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801fac2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fac6:	ea43 030b 	orr.w	r3, r3, fp
 801faca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801facc:	4353      	muls	r3, r2
 801face:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801fad2:	fb05 3c0c 	mla	ip, r5, ip, r3
 801fad6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fada:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801fade:	ea43 0b01 	orr.w	fp, r3, r1
 801fae2:	f1c0 0110 	rsb	r1, r0, #16
 801fae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fae8:	eba1 0e0e 	sub.w	lr, r1, lr
 801faec:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801faf0:	fb0e cc0b 	mla	ip, lr, fp, ip
 801faf4:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801faf8:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801fafc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fb00:	ea4b 0e0e 	orr.w	lr, fp, lr
 801fb04:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801fb08:	fb02 cc0e 	mla	ip, r2, lr, ip
 801fb0c:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801fb10:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fb14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb18:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801fb1c:	ea43 0c0c 	orr.w	ip, r3, ip
 801fb20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fb22:	f82a cb02 	strh.w	ip, [sl], #2
 801fb26:	441c      	add	r4, r3
 801fb28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fb2a:	f108 38ff 	add.w	r8, r8, #4294967295
 801fb2e:	441e      	add	r6, r3
 801fb30:	e723      	b.n	801f97a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fb32:	2800      	cmp	r0, #0
 801fb34:	d0b1      	beq.n	801fa9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801fb36:	5cd3      	ldrb	r3, [r2, r3]
 801fb38:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fb3c:	930a      	str	r3, [sp, #40]	; 0x28
 801fb3e:	e7ac      	b.n	801fa9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801fb40:	b013      	add	sp, #76	; 0x4c
 801fb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb46 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801fb46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb4a:	880d      	ldrh	r5, [r1, #0]
 801fb4c:	b087      	sub	sp, #28
 801fb4e:	10ef      	asrs	r7, r5, #3
 801fb50:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801fb54:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fb58:	00ed      	lsls	r5, r5, #3
 801fb5a:	9701      	str	r7, [sp, #4]
 801fb5c:	b2ed      	uxtb	r5, r5
 801fb5e:	9502      	str	r5, [sp, #8]
 801fb60:	9d01      	ldr	r5, [sp, #4]
 801fb62:	9103      	str	r1, [sp, #12]
 801fb64:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801fb68:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801fb6c:	9902      	ldr	r1, [sp, #8]
 801fb6e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801fb72:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801fb76:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801fb7a:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801fb7e:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801fb82:	022d      	lsls	r5, r5, #8
 801fb84:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801fb88:	fb06 0709 	mla	r7, r6, r9, r0
 801fb8c:	430d      	orrs	r5, r1
 801fb8e:	2e00      	cmp	r6, #0
 801fb90:	eb02 0c07 	add.w	ip, r2, r7
 801fb94:	9505      	str	r5, [sp, #20]
 801fb96:	f2c0 80b6 	blt.w	801fd06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801fb9a:	45b3      	cmp	fp, r6
 801fb9c:	f340 80b3 	ble.w	801fd06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801fba0:	2800      	cmp	r0, #0
 801fba2:	f2c0 80ae 	blt.w	801fd02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801fba6:	4581      	cmp	r9, r0
 801fba8:	f340 80ab 	ble.w	801fd02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801fbac:	5dd7      	ldrb	r7, [r2, r7]
 801fbae:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fbb2:	441f      	add	r7, r3
 801fbb4:	1c42      	adds	r2, r0, #1
 801fbb6:	f100 80a9 	bmi.w	801fd0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801fbba:	4591      	cmp	r9, r2
 801fbbc:	f340 80a6 	ble.w	801fd0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801fbc0:	2c00      	cmp	r4, #0
 801fbc2:	f000 80a3 	beq.w	801fd0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801fbc6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fbca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fbce:	441d      	add	r5, r3
 801fbd0:	3601      	adds	r6, #1
 801fbd2:	f100 809f 	bmi.w	801fd14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801fbd6:	45b3      	cmp	fp, r6
 801fbd8:	f340 809c 	ble.w	801fd14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801fbdc:	f1be 0f00 	cmp.w	lr, #0
 801fbe0:	f000 8098 	beq.w	801fd14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801fbe4:	2800      	cmp	r0, #0
 801fbe6:	f2c0 8093 	blt.w	801fd10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801fbea:	4581      	cmp	r9, r0
 801fbec:	f340 8090 	ble.w	801fd10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801fbf0:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801fbf4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fbf8:	441e      	add	r6, r3
 801fbfa:	3001      	adds	r0, #1
 801fbfc:	f100 808d 	bmi.w	801fd1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801fc00:	4581      	cmp	r9, r0
 801fc02:	f340 808a 	ble.w	801fd1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801fc06:	2c00      	cmp	r4, #0
 801fc08:	f000 8087 	beq.w	801fd1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801fc0c:	44e1      	add	r9, ip
 801fc0e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fc12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc16:	4413      	add	r3, r2
 801fc18:	b2a4      	uxth	r4, r4
 801fc1a:	fa1f fe8e 	uxth.w	lr, lr
 801fc1e:	fb04 fb0e 	mul.w	fp, r4, lr
 801fc22:	0124      	lsls	r4, r4, #4
 801fc24:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801fc28:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801fc2c:	eba4 040b 	sub.w	r4, r4, fp
 801fc30:	fa1f f08e 	uxth.w	r0, lr
 801fc34:	b2a2      	uxth	r2, r4
 801fc36:	78ac      	ldrb	r4, [r5, #2]
 801fc38:	f897 c002 	ldrb.w	ip, [r7, #2]
 801fc3c:	9901      	ldr	r1, [sp, #4]
 801fc3e:	eba9 0900 	sub.w	r9, r9, r0
 801fc42:	fa1f f989 	uxth.w	r9, r9
 801fc46:	4354      	muls	r4, r2
 801fc48:	fb09 440c 	mla	r4, r9, ip, r4
 801fc4c:	f896 c002 	ldrb.w	ip, [r6, #2]
 801fc50:	fb00 440c 	mla	r4, r0, ip, r4
 801fc54:	f893 c002 	ldrb.w	ip, [r3, #2]
 801fc58:	fa1f fe88 	uxth.w	lr, r8
 801fc5c:	ea6f 0808 	mvn.w	r8, r8
 801fc60:	fa5f f888 	uxtb.w	r8, r8
 801fc64:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801fc68:	fb1a fa08 	smulbb	sl, sl, r8
 801fc6c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fc70:	fb0c ac0e 	mla	ip, ip, lr, sl
 801fc74:	f895 a001 	ldrb.w	sl, [r5, #1]
 801fc78:	787c      	ldrb	r4, [r7, #1]
 801fc7a:	782d      	ldrb	r5, [r5, #0]
 801fc7c:	783f      	ldrb	r7, [r7, #0]
 801fc7e:	fb02 fa0a 	mul.w	sl, r2, sl
 801fc82:	fb09 aa04 	mla	sl, r9, r4, sl
 801fc86:	7874      	ldrb	r4, [r6, #1]
 801fc88:	436a      	muls	r2, r5
 801fc8a:	7835      	ldrb	r5, [r6, #0]
 801fc8c:	fb00 aa04 	mla	sl, r0, r4, sl
 801fc90:	fb09 2207 	mla	r2, r9, r7, r2
 801fc94:	785c      	ldrb	r4, [r3, #1]
 801fc96:	781b      	ldrb	r3, [r3, #0]
 801fc98:	fb00 2005 	mla	r0, r0, r5, r2
 801fc9c:	fb0b a404 	mla	r4, fp, r4, sl
 801fca0:	fb0b 0b03 	mla	fp, fp, r3, r0
 801fca4:	9b02      	ldr	r3, [sp, #8]
 801fca6:	fb11 fa08 	smulbb	sl, r1, r8
 801fcaa:	fa1f fc8c 	uxth.w	ip, ip
 801fcae:	fb13 f808 	smulbb	r8, r3, r8
 801fcb2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801fcb6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801fcba:	fb04 a40e 	mla	r4, r4, lr, sl
 801fcbe:	f10c 0301 	add.w	r3, ip, #1
 801fcc2:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801fcc6:	fa1f fe8e 	uxth.w	lr, lr
 801fcca:	b2a4      	uxth	r4, r4
 801fccc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fcd0:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801fcd4:	f104 0a01 	add.w	sl, r4, #1
 801fcd8:	f10e 0c01 	add.w	ip, lr, #1
 801fcdc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fce0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801fce4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fce8:	0964      	lsrs	r4, r4, #5
 801fcea:	ea4c 0c03 	orr.w	ip, ip, r3
 801fcee:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801fcf2:	9b03      	ldr	r3, [sp, #12]
 801fcf4:	ea4c 0c04 	orr.w	ip, ip, r4
 801fcf8:	f8a3 c000 	strh.w	ip, [r3]
 801fcfc:	b007      	add	sp, #28
 801fcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd02:	af05      	add	r7, sp, #20
 801fd04:	e756      	b.n	801fbb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801fd06:	ad05      	add	r5, sp, #20
 801fd08:	462f      	mov	r7, r5
 801fd0a:	e761      	b.n	801fbd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801fd0c:	ad05      	add	r5, sp, #20
 801fd0e:	e75f      	b.n	801fbd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801fd10:	ae05      	add	r6, sp, #20
 801fd12:	e772      	b.n	801fbfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801fd14:	ab05      	add	r3, sp, #20
 801fd16:	461e      	mov	r6, r3
 801fd18:	e77e      	b.n	801fc18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801fd1a:	ab05      	add	r3, sp, #20
 801fd1c:	e77c      	b.n	801fc18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801fd1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd22:	b095      	sub	sp, #84	; 0x54
 801fd24:	9212      	str	r2, [sp, #72]	; 0x48
 801fd26:	9309      	str	r3, [sp, #36]	; 0x24
 801fd28:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fd2a:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801fd2e:	930f      	str	r3, [sp, #60]	; 0x3c
 801fd30:	910e      	str	r1, [sp, #56]	; 0x38
 801fd32:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801fd36:	9013      	str	r0, [sp, #76]	; 0x4c
 801fd38:	6850      	ldr	r0, [r2, #4]
 801fd3a:	6812      	ldr	r2, [r2, #0]
 801fd3c:	fb00 1303 	mla	r3, r0, r3, r1
 801fd40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fd44:	930a      	str	r3, [sp, #40]	; 0x28
 801fd46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	930d      	str	r3, [sp, #52]	; 0x34
 801fd4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fd4e:	685c      	ldr	r4, [r3, #4]
 801fd50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fd52:	43db      	mvns	r3, r3
 801fd54:	b2db      	uxtb	r3, r3
 801fd56:	3404      	adds	r4, #4
 801fd58:	930b      	str	r3, [sp, #44]	; 0x2c
 801fd5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	dc03      	bgt.n	801fd68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fd60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	f340 8255 	ble.w	8020212 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801fd68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fd6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fd6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fd72:	1e48      	subs	r0, r1, #1
 801fd74:	1e55      	subs	r5, r2, #1
 801fd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd78:	2b00      	cmp	r3, #0
 801fd7a:	f340 80f9 	ble.w	801ff70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fd7e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801fd80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fd82:	1436      	asrs	r6, r6, #16
 801fd84:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fd88:	d406      	bmi.n	801fd98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fd8a:	4286      	cmp	r6, r0
 801fd8c:	da04      	bge.n	801fd98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	db02      	blt.n	801fd98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fd92:	42ab      	cmp	r3, r5
 801fd94:	f2c0 80ed 	blt.w	801ff72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801fd98:	3601      	adds	r6, #1
 801fd9a:	f100 80da 	bmi.w	801ff52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fd9e:	42b1      	cmp	r1, r6
 801fda0:	f2c0 80d7 	blt.w	801ff52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fda4:	3301      	adds	r3, #1
 801fda6:	f100 80d4 	bmi.w	801ff52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fdaa:	429a      	cmp	r2, r3
 801fdac:	f2c0 80d1 	blt.w	801ff52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdb2:	9311      	str	r3, [sp, #68]	; 0x44
 801fdb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdb6:	930c      	str	r3, [sp, #48]	; 0x30
 801fdb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fdba:	2b00      	cmp	r3, #0
 801fdbc:	f340 80fa 	ble.w	801ffb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fdc0:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fdc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fdc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fdc6:	68c6      	ldr	r6, [r0, #12]
 801fdc8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fdca:	141d      	asrs	r5, r3, #16
 801fdcc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fdd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fdd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fdd4:	1400      	asrs	r0, r0, #16
 801fdd6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fdda:	6892      	ldr	r2, [r2, #8]
 801fddc:	f100 813e 	bmi.w	802005c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fde0:	1e57      	subs	r7, r2, #1
 801fde2:	42b8      	cmp	r0, r7
 801fde4:	f280 813a 	bge.w	802005c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fde8:	2d00      	cmp	r5, #0
 801fdea:	f2c0 8137 	blt.w	802005c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fdee:	1e77      	subs	r7, r6, #1
 801fdf0:	42bd      	cmp	r5, r7
 801fdf2:	f280 8133 	bge.w	802005c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fdf6:	b212      	sxth	r2, r2
 801fdf8:	fb05 0002 	mla	r0, r5, r2, r0
 801fdfc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fdfe:	f815 a000 	ldrb.w	sl, [r5, r0]
 801fe02:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801fe06:	182e      	adds	r6, r5, r0
 801fe08:	eb04 050a 	add.w	r5, r4, sl
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	f000 8117 	beq.w	8020040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fe12:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fe16:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fe1a:	44a4      	add	ip, r4
 801fe1c:	2900      	cmp	r1, #0
 801fe1e:	f000 8117 	beq.w	8020050 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801fe22:	18b0      	adds	r0, r6, r2
 801fe24:	5cb2      	ldrb	r2, [r6, r2]
 801fe26:	7840      	ldrb	r0, [r0, #1]
 801fe28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fe30:	4422      	add	r2, r4
 801fe32:	4420      	add	r0, r4
 801fe34:	b29b      	uxth	r3, r3
 801fe36:	b289      	uxth	r1, r1
 801fe38:	fb03 f901 	mul.w	r9, r3, r1
 801fe3c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fe40:	011b      	lsls	r3, r3, #4
 801fe42:	b289      	uxth	r1, r1
 801fe44:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801fe48:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fe4c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fe4e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801fe52:	f8b6 e000 	ldrh.w	lr, [r6]
 801fe56:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801fe5a:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801fe5e:	eba3 0309 	sub.w	r3, r3, r9
 801fe62:	b29b      	uxth	r3, r3
 801fe64:	eba8 0801 	sub.w	r8, r8, r1
 801fe68:	fa1f f888 	uxth.w	r8, r8
 801fe6c:	435f      	muls	r7, r3
 801fe6e:	fb08 770b 	mla	r7, r8, fp, r7
 801fe72:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fe76:	9310      	str	r3, [sp, #64]	; 0x40
 801fe78:	fb01 770b 	mla	r7, r1, fp, r7
 801fe7c:	f890 b002 	ldrb.w	fp, [r0, #2]
 801fe80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe82:	fb09 770b 	mla	r7, r9, fp, r7
 801fe86:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801fe8a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fe8e:	fb1b fb03 	smulbb	fp, fp, r3
 801fe92:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fe96:	fb07 b706 	mla	r7, r7, r6, fp
 801fe9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe9c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801fea0:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fea4:	f89c c000 	ldrb.w	ip, [ip]
 801fea8:	435d      	muls	r5, r3
 801feaa:	fb08 550b 	mla	r5, r8, fp, r5
 801feae:	f892 b001 	ldrb.w	fp, [r2, #1]
 801feb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801feb4:	fb01 550b 	mla	r5, r1, fp, r5
 801feb8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801febc:	fb09 550b 	mla	r5, r9, fp, r5
 801fec0:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801fec4:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fec8:	fb1b fb03 	smulbb	fp, fp, r3
 801fecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fece:	fb03 f30c 	mul.w	r3, r3, ip
 801fed2:	f892 c000 	ldrb.w	ip, [r2]
 801fed6:	fb08 330a 	mla	r3, r8, sl, r3
 801feda:	fb01 330c 	mla	r3, r1, ip, r3
 801fede:	f890 c000 	ldrb.w	ip, [r0]
 801fee2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fee6:	fb09 3c0c 	mla	ip, r9, ip, r3
 801feea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801feec:	fa5f fe8e 	uxtb.w	lr, lr
 801fef0:	b2bf      	uxth	r7, r7
 801fef2:	fb1e fe03 	smulbb	lr, lr, r3
 801fef6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fefa:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fefe:	fb05 b506 	mla	r5, r5, r6, fp
 801ff02:	1c7b      	adds	r3, r7, #1
 801ff04:	fb0c e606 	mla	r6, ip, r6, lr
 801ff08:	b2ad      	uxth	r5, r5
 801ff0a:	b2b6      	uxth	r6, r6
 801ff0c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ff10:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801ff14:	f105 0b01 	add.w	fp, r5, #1
 801ff18:	1c77      	adds	r7, r6, #1
 801ff1a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801ff1e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801ff22:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ff26:	096d      	lsrs	r5, r5, #5
 801ff28:	431f      	orrs	r7, r3
 801ff2a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ff2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff30:	433d      	orrs	r5, r7
 801ff32:	801d      	strh	r5, [r3, #0]
 801ff34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff36:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ff38:	3302      	adds	r3, #2
 801ff3a:	930c      	str	r3, [sp, #48]	; 0x30
 801ff3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ff3e:	4413      	add	r3, r2
 801ff40:	931f      	str	r3, [sp, #124]	; 0x7c
 801ff42:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ff44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ff46:	4413      	add	r3, r2
 801ff48:	9320      	str	r3, [sp, #128]	; 0x80
 801ff4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ff4c:	3b01      	subs	r3, #1
 801ff4e:	9311      	str	r3, [sp, #68]	; 0x44
 801ff50:	e732      	b.n	801fdb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ff52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ff54:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801ff56:	4433      	add	r3, r6
 801ff58:	931f      	str	r3, [sp, #124]	; 0x7c
 801ff5a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801ff5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ff5e:	4433      	add	r3, r6
 801ff60:	9320      	str	r3, [sp, #128]	; 0x80
 801ff62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff64:	3b01      	subs	r3, #1
 801ff66:	9309      	str	r3, [sp, #36]	; 0x24
 801ff68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff6a:	3302      	adds	r3, #2
 801ff6c:	930a      	str	r3, [sp, #40]	; 0x28
 801ff6e:	e702      	b.n	801fd76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ff70:	d027      	beq.n	801ffc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801ff72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff74:	9821      	ldr	r0, [sp, #132]	; 0x84
 801ff76:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801ff78:	3b01      	subs	r3, #1
 801ff7a:	fb00 5003 	mla	r0, r0, r3, r5
 801ff7e:	1400      	asrs	r0, r0, #16
 801ff80:	f53f af16 	bmi.w	801fdb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ff84:	3901      	subs	r1, #1
 801ff86:	4288      	cmp	r0, r1
 801ff88:	f6bf af12 	bge.w	801fdb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ff8c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801ff8e:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ff90:	fb01 0303 	mla	r3, r1, r3, r0
 801ff94:	141b      	asrs	r3, r3, #16
 801ff96:	f53f af0b 	bmi.w	801fdb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ff9a:	3a01      	subs	r2, #1
 801ff9c:	4293      	cmp	r3, r2
 801ff9e:	f6bf af07 	bge.w	801fdb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ffa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffa4:	9311      	str	r3, [sp, #68]	; 0x44
 801ffa6:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801ffaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffac:	930c      	str	r3, [sp, #48]	; 0x30
 801ffae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	dc70      	bgt.n	8020096 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801ffb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ffb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffbc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ffc0:	930a      	str	r3, [sp, #40]	; 0x28
 801ffc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	f340 8124 	ble.w	8020212 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801ffca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ffce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ffd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ffd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ffd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ffdc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ffe0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ffe4:	eef0 6a62 	vmov.f32	s13, s5
 801ffe8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ffec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fff0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fff4:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801fff8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fffc:	eef0 6a43 	vmov.f32	s13, s6
 8020000:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020004:	ee12 2a90 	vmov	r2, s5
 8020008:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802000c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020010:	ee13 2a10 	vmov	r2, s6
 8020014:	9321      	str	r3, [sp, #132]	; 0x84
 8020016:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020018:	fb92 f3f3 	sdiv	r3, r2, r3
 802001c:	9322      	str	r3, [sp, #136]	; 0x88
 802001e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020020:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020022:	3b01      	subs	r3, #1
 8020024:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020028:	930e      	str	r3, [sp, #56]	; 0x38
 802002a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802002c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8020030:	bf08      	it	eq
 8020032:	4613      	moveq	r3, r2
 8020034:	9309      	str	r3, [sp, #36]	; 0x24
 8020036:	eeb0 3a67 	vmov.f32	s6, s15
 802003a:	eef0 2a47 	vmov.f32	s5, s14
 802003e:	e68c      	b.n	801fd5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020040:	b149      	cbz	r1, 8020056 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8020042:	5cb2      	ldrb	r2, [r6, r2]
 8020044:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020048:	4422      	add	r2, r4
 802004a:	4628      	mov	r0, r5
 802004c:	46ac      	mov	ip, r5
 802004e:	e6f1      	b.n	801fe34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020050:	4628      	mov	r0, r5
 8020052:	462a      	mov	r2, r5
 8020054:	e6ee      	b.n	801fe34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020056:	4628      	mov	r0, r5
 8020058:	462a      	mov	r2, r5
 802005a:	e7f7      	b.n	802004c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802005c:	1c47      	adds	r7, r0, #1
 802005e:	f53f af69 	bmi.w	801ff34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8020062:	42ba      	cmp	r2, r7
 8020064:	f6ff af66 	blt.w	801ff34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8020068:	1c6f      	adds	r7, r5, #1
 802006a:	f53f af63 	bmi.w	801ff34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802006e:	42be      	cmp	r6, r7
 8020070:	f6ff af60 	blt.w	801ff34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8020074:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020076:	9002      	str	r0, [sp, #8]
 8020078:	b236      	sxth	r6, r6
 802007a:	b212      	sxth	r2, r2
 802007c:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8020080:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8020084:	9200      	str	r2, [sp, #0]
 8020086:	9601      	str	r6, [sp, #4]
 8020088:	4623      	mov	r3, r4
 802008a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 802008e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020090:	f7ff fd59 	bl	801fb46 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8020094:	e74e      	b.n	801ff34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8020096:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020098:	9820      	ldr	r0, [sp, #128]	; 0x80
 802009a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802009c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802009e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80200a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80200a4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80200a8:	142d      	asrs	r5, r5, #16
 80200aa:	1400      	asrs	r0, r0, #16
 80200ac:	fb02 5000 	mla	r0, r2, r0, r5
 80200b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80200b2:	f815 9000 	ldrb.w	r9, [r5, r0]
 80200b6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80200ba:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80200be:	182e      	adds	r6, r5, r0
 80200c0:	eb04 0509 	add.w	r5, r4, r9
 80200c4:	2b00      	cmp	r3, #0
 80200c6:	f000 8096 	beq.w	80201f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80200ca:	7877      	ldrb	r7, [r6, #1]
 80200cc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80200d0:	4427      	add	r7, r4
 80200d2:	2900      	cmp	r1, #0
 80200d4:	f000 8097 	beq.w	8020206 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 80200d8:	18b0      	adds	r0, r6, r2
 80200da:	5cb2      	ldrb	r2, [r6, r2]
 80200dc:	7840      	ldrb	r0, [r0, #1]
 80200de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80200e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80200e6:	4422      	add	r2, r4
 80200e8:	4420      	add	r0, r4
 80200ea:	b29b      	uxth	r3, r3
 80200ec:	b289      	uxth	r1, r1
 80200ee:	fb03 f801 	mul.w	r8, r3, r1
 80200f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80200f4:	f895 b002 	ldrb.w	fp, [r5, #2]
 80200f8:	f8b6 c000 	ldrh.w	ip, [r6]
 80200fc:	78be      	ldrb	r6, [r7, #2]
 80200fe:	f814 9009 	ldrb.w	r9, [r4, r9]
 8020102:	011b      	lsls	r3, r3, #4
 8020104:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8020108:	b289      	uxth	r1, r1
 802010a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802010e:	eba3 0308 	sub.w	r3, r3, r8
 8020112:	b29b      	uxth	r3, r3
 8020114:	ebae 0e01 	sub.w	lr, lr, r1
 8020118:	fa1f fe8e 	uxth.w	lr, lr
 802011c:	435e      	muls	r6, r3
 802011e:	fb0e 660b 	mla	r6, lr, fp, r6
 8020122:	f892 b002 	ldrb.w	fp, [r2, #2]
 8020126:	9310      	str	r3, [sp, #64]	; 0x40
 8020128:	fb01 660b 	mla	r6, r1, fp, r6
 802012c:	f890 b002 	ldrb.w	fp, [r0, #2]
 8020130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020132:	fb08 660b 	mla	r6, r8, fp, r6
 8020136:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 802013a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802013e:	fb1b fb03 	smulbb	fp, fp, r3
 8020142:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020146:	fb06 b60a 	mla	r6, r6, sl, fp
 802014a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802014c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8020150:	787d      	ldrb	r5, [r7, #1]
 8020152:	783f      	ldrb	r7, [r7, #0]
 8020154:	435d      	muls	r5, r3
 8020156:	fb0e 550b 	mla	r5, lr, fp, r5
 802015a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802015e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020160:	fb01 550b 	mla	r5, r1, fp, r5
 8020164:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020168:	fb08 550b 	mla	r5, r8, fp, r5
 802016c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8020170:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020174:	fb1b fb03 	smulbb	fp, fp, r3
 8020178:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802017a:	437b      	muls	r3, r7
 802017c:	7817      	ldrb	r7, [r2, #0]
 802017e:	fb0e 3309 	mla	r3, lr, r9, r3
 8020182:	fb01 3307 	mla	r3, r1, r7, r3
 8020186:	7807      	ldrb	r7, [r0, #0]
 8020188:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802018c:	fb08 3707 	mla	r7, r8, r7, r3
 8020190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020192:	fa5f fc8c 	uxtb.w	ip, ip
 8020196:	fb1c fc03 	smulbb	ip, ip, r3
 802019a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802019e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80201a2:	fb05 b50a 	mla	r5, r5, sl, fp
 80201a6:	fb07 c70a 	mla	r7, r7, sl, ip
 80201aa:	b2b6      	uxth	r6, r6
 80201ac:	b2ad      	uxth	r5, r5
 80201ae:	b2bf      	uxth	r7, r7
 80201b0:	1c73      	adds	r3, r6, #1
 80201b2:	1c7a      	adds	r2, r7, #1
 80201b4:	f105 0b01 	add.w	fp, r5, #1
 80201b8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80201bc:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80201c0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80201c4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80201c8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80201cc:	096d      	lsrs	r5, r5, #5
 80201ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201d0:	4316      	orrs	r6, r2
 80201d2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80201d6:	432e      	orrs	r6, r5
 80201d8:	f823 6b02 	strh.w	r6, [r3], #2
 80201dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80201de:	930c      	str	r3, [sp, #48]	; 0x30
 80201e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80201e2:	4413      	add	r3, r2
 80201e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80201e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80201e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80201ea:	4413      	add	r3, r2
 80201ec:	9320      	str	r3, [sp, #128]	; 0x80
 80201ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80201f0:	3b01      	subs	r3, #1
 80201f2:	9311      	str	r3, [sp, #68]	; 0x44
 80201f4:	e6db      	b.n	801ffae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80201f6:	b149      	cbz	r1, 802020c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 80201f8:	5cb2      	ldrb	r2, [r6, r2]
 80201fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80201fe:	4422      	add	r2, r4
 8020200:	4628      	mov	r0, r5
 8020202:	462f      	mov	r7, r5
 8020204:	e771      	b.n	80200ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8020206:	4628      	mov	r0, r5
 8020208:	462a      	mov	r2, r5
 802020a:	e76e      	b.n	80200ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802020c:	4628      	mov	r0, r5
 802020e:	462a      	mov	r2, r5
 8020210:	e7f7      	b.n	8020202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8020212:	b015      	add	sp, #84	; 0x54
 8020214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020218 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8020218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802021c:	880f      	ldrh	r7, [r1, #0]
 802021e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020222:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020226:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 802022a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802022e:	023c      	lsls	r4, r7, #8
 8020230:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8020234:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8020238:	017c      	lsls	r4, r7, #5
 802023a:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 802023e:	00ff      	lsls	r7, r7, #3
 8020240:	ea4b 0404 	orr.w	r4, fp, r4
 8020244:	b2ff      	uxtb	r7, r7
 8020246:	fb05 ca0e 	mla	sl, r5, lr, ip
 802024a:	4327      	orrs	r7, r4
 802024c:	2d00      	cmp	r5, #0
 802024e:	eb02 080a 	add.w	r8, r2, sl
 8020252:	9701      	str	r7, [sp, #4]
 8020254:	db7e      	blt.n	8020354 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8020256:	45a9      	cmp	r9, r5
 8020258:	dd7c      	ble.n	8020354 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 802025a:	f1bc 0f00 	cmp.w	ip, #0
 802025e:	db77      	blt.n	8020350 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8020260:	45e6      	cmp	lr, ip
 8020262:	dd75      	ble.n	8020350 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8020264:	f812 700a 	ldrb.w	r7, [r2, sl]
 8020268:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802026c:	441f      	add	r7, r3
 802026e:	f11c 0201 	adds.w	r2, ip, #1
 8020272:	d472      	bmi.n	802035a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020274:	4596      	cmp	lr, r2
 8020276:	dd70      	ble.n	802035a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020278:	2800      	cmp	r0, #0
 802027a:	d06e      	beq.n	802035a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 802027c:	f898 4001 	ldrb.w	r4, [r8, #1]
 8020280:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020284:	441c      	add	r4, r3
 8020286:	3501      	adds	r5, #1
 8020288:	d46b      	bmi.n	8020362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802028a:	45a9      	cmp	r9, r5
 802028c:	dd69      	ble.n	8020362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802028e:	2e00      	cmp	r6, #0
 8020290:	d067      	beq.n	8020362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020292:	f1bc 0f00 	cmp.w	ip, #0
 8020296:	db62      	blt.n	802035e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020298:	45e6      	cmp	lr, ip
 802029a:	dd60      	ble.n	802035e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 802029c:	f818 500e 	ldrb.w	r5, [r8, lr]
 80202a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80202a4:	441d      	add	r5, r3
 80202a6:	f11c 0201 	adds.w	r2, ip, #1
 80202aa:	d45d      	bmi.n	8020368 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80202ac:	4596      	cmp	lr, r2
 80202ae:	dd5b      	ble.n	8020368 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80202b0:	2800      	cmp	r0, #0
 80202b2:	d059      	beq.n	8020368 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80202b4:	44c6      	add	lr, r8
 80202b6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80202ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80202be:	4413      	add	r3, r2
 80202c0:	b280      	uxth	r0, r0
 80202c2:	b2b2      	uxth	r2, r6
 80202c4:	fb00 f602 	mul.w	r6, r0, r2
 80202c8:	0100      	lsls	r0, r0, #4
 80202ca:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80202ce:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 80202d2:	1b80      	subs	r0, r0, r6
 80202d4:	fa1f fc82 	uxth.w	ip, r2
 80202d8:	b282      	uxth	r2, r0
 80202da:	78a0      	ldrb	r0, [r4, #2]
 80202dc:	f897 e002 	ldrb.w	lr, [r7, #2]
 80202e0:	f897 9000 	ldrb.w	r9, [r7]
 80202e4:	787f      	ldrb	r7, [r7, #1]
 80202e6:	eba8 080c 	sub.w	r8, r8, ip
 80202ea:	fa1f f888 	uxth.w	r8, r8
 80202ee:	4350      	muls	r0, r2
 80202f0:	fb08 0e0e 	mla	lr, r8, lr, r0
 80202f4:	78a8      	ldrb	r0, [r5, #2]
 80202f6:	fb0c e000 	mla	r0, ip, r0, lr
 80202fa:	f893 e002 	ldrb.w	lr, [r3, #2]
 80202fe:	fb06 0e0e 	mla	lr, r6, lr, r0
 8020302:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8020306:	f894 e000 	ldrb.w	lr, [r4]
 802030a:	fb02 fe0e 	mul.w	lr, r2, lr
 802030e:	fb08 e909 	mla	r9, r8, r9, lr
 8020312:	f895 e000 	ldrb.w	lr, [r5]
 8020316:	fb0c 990e 	mla	r9, ip, lr, r9
 802031a:	f893 e000 	ldrb.w	lr, [r3]
 802031e:	785b      	ldrb	r3, [r3, #1]
 8020320:	fb06 9e0e 	mla	lr, r6, lr, r9
 8020324:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020328:	ea4e 0e00 	orr.w	lr, lr, r0
 802032c:	7860      	ldrb	r0, [r4, #1]
 802032e:	4350      	muls	r0, r2
 8020330:	786a      	ldrb	r2, [r5, #1]
 8020332:	fb08 0007 	mla	r0, r8, r7, r0
 8020336:	fb0c 0202 	mla	r2, ip, r2, r0
 802033a:	fb06 2303 	mla	r3, r6, r3, r2
 802033e:	095b      	lsrs	r3, r3, #5
 8020340:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020344:	ea4e 0303 	orr.w	r3, lr, r3
 8020348:	800b      	strh	r3, [r1, #0]
 802034a:	b003      	add	sp, #12
 802034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020350:	af01      	add	r7, sp, #4
 8020352:	e78c      	b.n	802026e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8020354:	ac01      	add	r4, sp, #4
 8020356:	4627      	mov	r7, r4
 8020358:	e795      	b.n	8020286 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802035a:	ac01      	add	r4, sp, #4
 802035c:	e793      	b.n	8020286 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802035e:	ad01      	add	r5, sp, #4
 8020360:	e7a1      	b.n	80202a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8020362:	ab01      	add	r3, sp, #4
 8020364:	461d      	mov	r5, r3
 8020366:	e7ab      	b.n	80202c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8020368:	ab01      	add	r3, sp, #4
 802036a:	e7a9      	b.n	80202c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0802036c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020370:	b08f      	sub	sp, #60	; 0x3c
 8020372:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8020376:	920c      	str	r2, [sp, #48]	; 0x30
 8020378:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802037a:	910a      	str	r1, [sp, #40]	; 0x28
 802037c:	9306      	str	r3, [sp, #24]
 802037e:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8020382:	900d      	str	r0, [sp, #52]	; 0x34
 8020384:	6850      	ldr	r0, [r2, #4]
 8020386:	6812      	ldr	r2, [r2, #0]
 8020388:	fb00 1303 	mla	r3, r0, r3, r1
 802038c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020390:	9307      	str	r3, [sp, #28]
 8020392:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020394:	681b      	ldr	r3, [r3, #0]
 8020396:	9308      	str	r3, [sp, #32]
 8020398:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802039a:	685c      	ldr	r4, [r3, #4]
 802039c:	3404      	adds	r4, #4
 802039e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	dc03      	bgt.n	80203ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80203a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	f340 81d6 	ble.w	8020758 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80203ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80203ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80203b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80203b6:	1e48      	subs	r0, r1, #1
 80203b8:	1e56      	subs	r6, r2, #1
 80203ba:	9b06      	ldr	r3, [sp, #24]
 80203bc:	2b00      	cmp	r3, #0
 80203be:	f340 80b7 	ble.w	8020530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80203c2:	ea5f 472b 	movs.w	r7, fp, asr #16
 80203c6:	ea4f 4325 	mov.w	r3, r5, asr #16
 80203ca:	d406      	bmi.n	80203da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80203cc:	4287      	cmp	r7, r0
 80203ce:	da04      	bge.n	80203da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	db02      	blt.n	80203da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80203d4:	42b3      	cmp	r3, r6
 80203d6:	f2c0 80ac 	blt.w	8020532 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80203da:	3701      	adds	r7, #1
 80203dc:	f100 809d 	bmi.w	802051a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80203e0:	42b9      	cmp	r1, r7
 80203e2:	f2c0 809a 	blt.w	802051a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80203e6:	3301      	adds	r3, #1
 80203e8:	f100 8097 	bmi.w	802051a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80203ec:	429a      	cmp	r2, r3
 80203ee:	f2c0 8094 	blt.w	802051a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80203f2:	9b06      	ldr	r3, [sp, #24]
 80203f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80203f6:	9b07      	ldr	r3, [sp, #28]
 80203f8:	9309      	str	r3, [sp, #36]	; 0x24
 80203fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	f340 80b5 	ble.w	802056c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020402:	9820      	ldr	r0, [sp, #128]	; 0x80
 8020404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020406:	68c7      	ldr	r7, [r0, #12]
 8020408:	6892      	ldr	r2, [r2, #8]
 802040a:	ea5f 402b 	movs.w	r0, fp, asr #16
 802040e:	ea4f 4625 	mov.w	r6, r5, asr #16
 8020412:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020416:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802041a:	f100 80fb 	bmi.w	8020614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802041e:	f102 3cff 	add.w	ip, r2, #4294967295
 8020422:	4560      	cmp	r0, ip
 8020424:	f280 80f6 	bge.w	8020614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020428:	2e00      	cmp	r6, #0
 802042a:	f2c0 80f3 	blt.w	8020614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802042e:	f107 3cff 	add.w	ip, r7, #4294967295
 8020432:	4566      	cmp	r6, ip
 8020434:	f280 80ee 	bge.w	8020614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020438:	b212      	sxth	r2, r2
 802043a:	fb06 0002 	mla	r0, r6, r2, r0
 802043e:	9e08      	ldr	r6, [sp, #32]
 8020440:	1837      	adds	r7, r6, r0
 8020442:	5c30      	ldrb	r0, [r6, r0]
 8020444:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8020448:	eb04 0c08 	add.w	ip, r4, r8
 802044c:	2b00      	cmp	r3, #0
 802044e:	f000 80d3 	beq.w	80205f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8020452:	787e      	ldrb	r6, [r7, #1]
 8020454:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020458:	4426      	add	r6, r4
 802045a:	2900      	cmp	r1, #0
 802045c:	f000 80d4 	beq.w	8020608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8020460:	18b8      	adds	r0, r7, r2
 8020462:	5cba      	ldrb	r2, [r7, r2]
 8020464:	7840      	ldrb	r0, [r0, #1]
 8020466:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802046a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802046e:	4422      	add	r2, r4
 8020470:	4420      	add	r0, r4
 8020472:	b29b      	uxth	r3, r3
 8020474:	b289      	uxth	r1, r1
 8020476:	fb03 f901 	mul.w	r9, r3, r1
 802047a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802047e:	011b      	lsls	r3, r3, #4
 8020480:	b289      	uxth	r1, r1
 8020482:	78b7      	ldrb	r7, [r6, #2]
 8020484:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020488:	f89c c001 	ldrb.w	ip, [ip, #1]
 802048c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020490:	eba3 0309 	sub.w	r3, r3, r9
 8020494:	b29b      	uxth	r3, r3
 8020496:	ebae 0e01 	sub.w	lr, lr, r1
 802049a:	fa1f fe8e 	uxth.w	lr, lr
 802049e:	435f      	muls	r7, r3
 80204a0:	fb0e 770a 	mla	r7, lr, sl, r7
 80204a4:	f892 a002 	ldrb.w	sl, [r2, #2]
 80204a8:	fb01 770a 	mla	r7, r1, sl, r7
 80204ac:	f890 a002 	ldrb.w	sl, [r0, #2]
 80204b0:	fb09 7a0a 	mla	sl, r9, sl, r7
 80204b4:	f814 7008 	ldrb.w	r7, [r4, r8]
 80204b8:	f896 8000 	ldrb.w	r8, [r6]
 80204bc:	7876      	ldrb	r6, [r6, #1]
 80204be:	fb03 f808 	mul.w	r8, r3, r8
 80204c2:	fb0e 8807 	mla	r8, lr, r7, r8
 80204c6:	7817      	ldrb	r7, [r2, #0]
 80204c8:	fb01 8807 	mla	r8, r1, r7, r8
 80204cc:	7807      	ldrb	r7, [r0, #0]
 80204ce:	fb09 8707 	mla	r7, r9, r7, r8
 80204d2:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80204d6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80204da:	ea47 070a 	orr.w	r7, r7, sl
 80204de:	4373      	muls	r3, r6
 80204e0:	f892 a001 	ldrb.w	sl, [r2, #1]
 80204e4:	fb0e 330c 	mla	r3, lr, ip, r3
 80204e8:	fb01 310a 	mla	r1, r1, sl, r3
 80204ec:	f890 a001 	ldrb.w	sl, [r0, #1]
 80204f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204f2:	fb09 1a0a 	mla	sl, r9, sl, r1
 80204f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80204fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80204fe:	ea47 070a 	orr.w	r7, r7, sl
 8020502:	801f      	strh	r7, [r3, #0]
 8020504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020506:	3302      	adds	r3, #2
 8020508:	9309      	str	r3, [sp, #36]	; 0x24
 802050a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802050c:	449b      	add	fp, r3
 802050e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020510:	441d      	add	r5, r3
 8020512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020514:	3b01      	subs	r3, #1
 8020516:	930b      	str	r3, [sp, #44]	; 0x2c
 8020518:	e76f      	b.n	80203fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802051a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802051c:	449b      	add	fp, r3
 802051e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020520:	441d      	add	r5, r3
 8020522:	9b06      	ldr	r3, [sp, #24]
 8020524:	3b01      	subs	r3, #1
 8020526:	9306      	str	r3, [sp, #24]
 8020528:	9b07      	ldr	r3, [sp, #28]
 802052a:	3302      	adds	r3, #2
 802052c:	9307      	str	r3, [sp, #28]
 802052e:	e744      	b.n	80203ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020530:	d023      	beq.n	802057a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8020532:	9b06      	ldr	r3, [sp, #24]
 8020534:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020536:	3b01      	subs	r3, #1
 8020538:	fb00 b003 	mla	r0, r0, r3, fp
 802053c:	1400      	asrs	r0, r0, #16
 802053e:	f53f af58 	bmi.w	80203f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020542:	3901      	subs	r1, #1
 8020544:	4288      	cmp	r0, r1
 8020546:	f6bf af54 	bge.w	80203f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802054a:	991c      	ldr	r1, [sp, #112]	; 0x70
 802054c:	fb01 5303 	mla	r3, r1, r3, r5
 8020550:	141b      	asrs	r3, r3, #16
 8020552:	f53f af4e 	bmi.w	80203f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020556:	3a01      	subs	r2, #1
 8020558:	4293      	cmp	r3, r2
 802055a:	f6bf af4a 	bge.w	80203f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802055e:	9b06      	ldr	r3, [sp, #24]
 8020560:	9309      	str	r3, [sp, #36]	; 0x24
 8020562:	9b07      	ldr	r3, [sp, #28]
 8020564:	930b      	str	r3, [sp, #44]	; 0x2c
 8020566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020568:	2b00      	cmp	r3, #0
 802056a:	dc70      	bgt.n	802064e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802056c:	9b06      	ldr	r3, [sp, #24]
 802056e:	9a07      	ldr	r2, [sp, #28]
 8020570:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020574:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020578:	9307      	str	r3, [sp, #28]
 802057a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802057c:	2b00      	cmp	r3, #0
 802057e:	f340 80eb 	ble.w	8020758 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8020582:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802058a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802058e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020590:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020594:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020598:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802059c:	eef0 6a62 	vmov.f32	s13, s5
 80205a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205ac:	ee16 ba90 	vmov	fp, s13
 80205b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80205b4:	eef0 6a43 	vmov.f32	s13, s6
 80205b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80205bc:	ee12 2a90 	vmov	r2, s5
 80205c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80205c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80205c8:	ee13 2a10 	vmov	r2, s6
 80205cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80205ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80205d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80205d4:	931c      	str	r3, [sp, #112]	; 0x70
 80205d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80205da:	3b01      	subs	r3, #1
 80205dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205e0:	930a      	str	r3, [sp, #40]	; 0x28
 80205e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80205e4:	bf08      	it	eq
 80205e6:	4613      	moveq	r3, r2
 80205e8:	ee16 5a90 	vmov	r5, s13
 80205ec:	9306      	str	r3, [sp, #24]
 80205ee:	eeb0 3a67 	vmov.f32	s6, s15
 80205f2:	eef0 2a47 	vmov.f32	s5, s14
 80205f6:	e6d2      	b.n	802039e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80205f8:	b149      	cbz	r1, 802060e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80205fa:	5cba      	ldrb	r2, [r7, r2]
 80205fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020600:	4422      	add	r2, r4
 8020602:	4660      	mov	r0, ip
 8020604:	4666      	mov	r6, ip
 8020606:	e734      	b.n	8020472 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8020608:	4660      	mov	r0, ip
 802060a:	4662      	mov	r2, ip
 802060c:	e731      	b.n	8020472 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802060e:	4660      	mov	r0, ip
 8020610:	4662      	mov	r2, ip
 8020612:	e7f7      	b.n	8020604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8020614:	f110 0c01 	adds.w	ip, r0, #1
 8020618:	f53f af74 	bmi.w	8020504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802061c:	4562      	cmp	r2, ip
 802061e:	f6ff af71 	blt.w	8020504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020622:	f116 0c01 	adds.w	ip, r6, #1
 8020626:	f53f af6d 	bmi.w	8020504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802062a:	4567      	cmp	r7, ip
 802062c:	f6ff af6a 	blt.w	8020504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020630:	b23f      	sxth	r7, r7
 8020632:	b212      	sxth	r2, r2
 8020634:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020638:	e9cd 0602 	strd	r0, r6, [sp, #8]
 802063c:	9200      	str	r2, [sp, #0]
 802063e:	9701      	str	r7, [sp, #4]
 8020640:	4623      	mov	r3, r4
 8020642:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020646:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020648:	f7ff fde6 	bl	8020218 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802064c:	e75a      	b.n	8020504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802064e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020650:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020654:	ea4f 462b 	mov.w	r6, fp, asr #16
 8020658:	1428      	asrs	r0, r5, #16
 802065a:	fb02 6000 	mla	r0, r2, r0, r6
 802065e:	9e08      	ldr	r6, [sp, #32]
 8020660:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020664:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020668:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802066c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020670:	1837      	adds	r7, r6, r0
 8020672:	eb04 0c08 	add.w	ip, r4, r8
 8020676:	2b00      	cmp	r3, #0
 8020678:	d060      	beq.n	802073c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 802067a:	787e      	ldrb	r6, [r7, #1]
 802067c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020680:	4426      	add	r6, r4
 8020682:	2900      	cmp	r1, #0
 8020684:	d062      	beq.n	802074c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8020686:	18b8      	adds	r0, r7, r2
 8020688:	5cba      	ldrb	r2, [r7, r2]
 802068a:	7840      	ldrb	r0, [r0, #1]
 802068c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020690:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020694:	4422      	add	r2, r4
 8020696:	4420      	add	r0, r4
 8020698:	b29b      	uxth	r3, r3
 802069a:	b289      	uxth	r1, r1
 802069c:	fb03 f901 	mul.w	r9, r3, r1
 80206a0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80206a4:	011b      	lsls	r3, r3, #4
 80206a6:	b289      	uxth	r1, r1
 80206a8:	78b7      	ldrb	r7, [r6, #2]
 80206aa:	f89c a002 	ldrb.w	sl, [ip, #2]
 80206ae:	f89c c001 	ldrb.w	ip, [ip, #1]
 80206b2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80206b6:	eba3 0309 	sub.w	r3, r3, r9
 80206ba:	b29b      	uxth	r3, r3
 80206bc:	ebae 0e01 	sub.w	lr, lr, r1
 80206c0:	fa1f fe8e 	uxth.w	lr, lr
 80206c4:	435f      	muls	r7, r3
 80206c6:	fb0e 770a 	mla	r7, lr, sl, r7
 80206ca:	f892 a002 	ldrb.w	sl, [r2, #2]
 80206ce:	fb01 770a 	mla	r7, r1, sl, r7
 80206d2:	f890 a002 	ldrb.w	sl, [r0, #2]
 80206d6:	fb09 7a0a 	mla	sl, r9, sl, r7
 80206da:	f814 7008 	ldrb.w	r7, [r4, r8]
 80206de:	f896 8000 	ldrb.w	r8, [r6]
 80206e2:	7876      	ldrb	r6, [r6, #1]
 80206e4:	fb03 f808 	mul.w	r8, r3, r8
 80206e8:	fb0e 8807 	mla	r8, lr, r7, r8
 80206ec:	7817      	ldrb	r7, [r2, #0]
 80206ee:	fb01 8807 	mla	r8, r1, r7, r8
 80206f2:	7807      	ldrb	r7, [r0, #0]
 80206f4:	fb09 8707 	mla	r7, r9, r7, r8
 80206f8:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80206fc:	4373      	muls	r3, r6
 80206fe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020702:	7856      	ldrb	r6, [r2, #1]
 8020704:	ea47 070a 	orr.w	r7, r7, sl
 8020708:	fb0e 330c 	mla	r3, lr, ip, r3
 802070c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020710:	fb01 3306 	mla	r3, r1, r6, r3
 8020714:	fb09 3a0a 	mla	sl, r9, sl, r3
 8020718:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802071c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802071e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020722:	ea47 070a 	orr.w	r7, r7, sl
 8020726:	f823 7b02 	strh.w	r7, [r3], #2
 802072a:	930b      	str	r3, [sp, #44]	; 0x2c
 802072c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802072e:	449b      	add	fp, r3
 8020730:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020732:	441d      	add	r5, r3
 8020734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020736:	3b01      	subs	r3, #1
 8020738:	9309      	str	r3, [sp, #36]	; 0x24
 802073a:	e714      	b.n	8020566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802073c:	b149      	cbz	r1, 8020752 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802073e:	5cba      	ldrb	r2, [r7, r2]
 8020740:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020744:	4422      	add	r2, r4
 8020746:	4660      	mov	r0, ip
 8020748:	4666      	mov	r6, ip
 802074a:	e7a5      	b.n	8020698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802074c:	4660      	mov	r0, ip
 802074e:	4662      	mov	r2, ip
 8020750:	e7a2      	b.n	8020698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020752:	4660      	mov	r0, ip
 8020754:	4662      	mov	r2, ip
 8020756:	e7f7      	b.n	8020748 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8020758:	b00f      	add	sp, #60	; 0x3c
 802075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802075e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802075e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020762:	b085      	sub	sp, #20
 8020764:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8020768:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802076c:	9102      	str	r1, [sp, #8]
 802076e:	2c00      	cmp	r4, #0
 8020770:	fb04 710c 	mla	r1, r4, ip, r7
 8020774:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020778:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 802077c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8020780:	eb02 0e01 	add.w	lr, r2, r1
 8020784:	f2c0 8122 	blt.w	80209cc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8020788:	45a0      	cmp	r8, r4
 802078a:	f340 811f 	ble.w	80209cc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802078e:	2f00      	cmp	r7, #0
 8020790:	f2c0 811a 	blt.w	80209c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8020794:	45bc      	cmp	ip, r7
 8020796:	f340 8117 	ble.w	80209c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802079a:	5c52      	ldrb	r2, [r2, r1]
 802079c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80207a0:	1c7a      	adds	r2, r7, #1
 80207a2:	f100 8116 	bmi.w	80209d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80207a6:	4594      	cmp	ip, r2
 80207a8:	f340 8113 	ble.w	80209d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80207ac:	2e00      	cmp	r6, #0
 80207ae:	f000 8112 	beq.w	80209d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80207b2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80207b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80207ba:	3401      	adds	r4, #1
 80207bc:	f100 810f 	bmi.w	80209de <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80207c0:	45a0      	cmp	r8, r4
 80207c2:	f340 810c 	ble.w	80209de <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80207c6:	2800      	cmp	r0, #0
 80207c8:	f000 810c 	beq.w	80209e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80207cc:	2f00      	cmp	r7, #0
 80207ce:	f2c0 8104 	blt.w	80209da <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80207d2:	45bc      	cmp	ip, r7
 80207d4:	f340 8101 	ble.w	80209da <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80207d8:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80207dc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80207e0:	3701      	adds	r7, #1
 80207e2:	f100 8102 	bmi.w	80209ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80207e6:	45bc      	cmp	ip, r7
 80207e8:	f340 80ff 	ble.w	80209ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80207ec:	2e00      	cmp	r6, #0
 80207ee:	f000 80fe 	beq.w	80209ee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80207f2:	44f4      	add	ip, lr
 80207f4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80207f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80207fc:	b2b6      	uxth	r6, r6
 80207fe:	b280      	uxth	r0, r0
 8020800:	fb00 fe06 	mul.w	lr, r0, r6
 8020804:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020808:	0136      	lsls	r6, r6, #4
 802080a:	eba6 070e 	sub.w	r7, r6, lr
 802080e:	b280      	uxth	r0, r0
 8020810:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8020814:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020818:	b2bf      	uxth	r7, r7
 802081a:	1a1b      	subs	r3, r3, r0
 802081c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020820:	b29b      	uxth	r3, r3
 8020822:	fb0a f607 	mul.w	r6, sl, r7
 8020826:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802082a:	fb0b 6603 	mla	r6, fp, r3, r6
 802082e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020832:	fb00 6609 	mla	r6, r0, r9, r6
 8020836:	fb0e 6608 	mla	r6, lr, r8, r6
 802083a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802083e:	9600      	str	r6, [sp, #0]
 8020840:	2e00      	cmp	r6, #0
 8020842:	f000 80be 	beq.w	80209c2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8020846:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802084a:	fb0b fc0c 	mul.w	ip, fp, ip
 802084e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020852:	fb0b f505 	mul.w	r5, fp, r5
 8020856:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802085a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802085e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020862:	44dc      	add	ip, fp
 8020864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020868:	9501      	str	r5, [sp, #4]
 802086a:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802086e:	9503      	str	r5, [sp, #12]
 8020870:	9d01      	ldr	r5, [sp, #4]
 8020872:	9e02      	ldr	r6, [sp, #8]
 8020874:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020878:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802087c:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8020880:	fb0a fc0c 	mul.w	ip, sl, ip
 8020884:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020888:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802088c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020890:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020894:	4465      	add	r5, ip
 8020896:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802089a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802089e:	fb09 fc0c 	mul.w	ip, r9, ip
 80208a2:	fb09 f904 	mul.w	r9, r9, r4
 80208a6:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80208aa:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80208ae:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80208b2:	fb08 f404 	mul.w	r4, r8, r4
 80208b6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80208ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80208be:	fb08 f802 	mul.w	r8, r8, r2
 80208c2:	fb0a fa01 	mul.w	sl, sl, r1
 80208c6:	0a22      	lsrs	r2, r4, #8
 80208c8:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80208cc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80208d0:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80208d4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80208d8:	4414      	add	r4, r2
 80208da:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80208de:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80208e2:	0a2d      	lsrs	r5, r5, #8
 80208e4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80208e8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80208ec:	9a03      	ldr	r2, [sp, #12]
 80208ee:	8836      	ldrh	r6, [r6, #0]
 80208f0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80208f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80208f8:	437d      	muls	r5, r7
 80208fa:	4461      	add	r1, ip
 80208fc:	0a24      	lsrs	r4, r4, #8
 80208fe:	fb02 5503 	mla	r5, r2, r3, r5
 8020902:	0a09      	lsrs	r1, r1, #8
 8020904:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020908:	fb04 540e 	mla	r4, r4, lr, r5
 802090c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020910:	fb01 4100 	mla	r1, r1, r0, r4
 8020914:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020918:	0a09      	lsrs	r1, r1, #8
 802091a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802091e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8020922:	fb07 f70a 	mul.w	r7, r7, sl
 8020926:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802092a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802092e:	fb03 7101 	mla	r1, r3, r1, r7
 8020932:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020936:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802093a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802093e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8020942:	fb00 e101 	mla	r1, r0, r1, lr
 8020946:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 802094a:	9a00      	ldr	r2, [sp, #0]
 802094c:	b287      	uxth	r7, r0
 802094e:	437a      	muls	r2, r7
 8020950:	0a09      	lsrs	r1, r1, #8
 8020952:	1c53      	adds	r3, r2, #1
 8020954:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020958:	4321      	orrs	r1, r4
 802095a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802095e:	1235      	asrs	r5, r6, #8
 8020960:	0c0a      	lsrs	r2, r1, #16
 8020962:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020966:	b2db      	uxtb	r3, r3
 8020968:	fb12 f207 	smulbb	r2, r2, r7
 802096c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020970:	fb05 2503 	mla	r5, r5, r3, r2
 8020974:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8020978:	10f2      	asrs	r2, r6, #3
 802097a:	b2c8      	uxtb	r0, r1
 802097c:	00f6      	lsls	r6, r6, #3
 802097e:	fb14 f407 	smulbb	r4, r4, r7
 8020982:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020986:	b2f6      	uxtb	r6, r6
 8020988:	fb10 f007 	smulbb	r0, r0, r7
 802098c:	fb02 4203 	mla	r2, r2, r3, r4
 8020990:	b2ad      	uxth	r5, r5
 8020992:	fb06 0303 	mla	r3, r6, r3, r0
 8020996:	b299      	uxth	r1, r3
 8020998:	b294      	uxth	r4, r2
 802099a:	1c6b      	adds	r3, r5, #1
 802099c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80209a0:	1c62      	adds	r2, r4, #1
 80209a2:	1c4b      	adds	r3, r1, #1
 80209a4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80209a8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80209ac:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80209b0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80209b4:	0952      	lsrs	r2, r2, #5
 80209b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80209ba:	432b      	orrs	r3, r5
 80209bc:	4313      	orrs	r3, r2
 80209be:	9a02      	ldr	r2, [sp, #8]
 80209c0:	8013      	strh	r3, [r2, #0]
 80209c2:	b005      	add	sp, #20
 80209c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209c8:	2500      	movs	r5, #0
 80209ca:	e6e9      	b.n	80207a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80209cc:	2100      	movs	r1, #0
 80209ce:	460d      	mov	r5, r1
 80209d0:	e6f3      	b.n	80207ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80209d2:	2100      	movs	r1, #0
 80209d4:	e6f1      	b.n	80207ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80209d6:	4631      	mov	r1, r6
 80209d8:	e6ef      	b.n	80207ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80209da:	2400      	movs	r4, #0
 80209dc:	e700      	b.n	80207e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80209de:	2200      	movs	r2, #0
 80209e0:	4614      	mov	r4, r2
 80209e2:	e70b      	b.n	80207fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80209e4:	4602      	mov	r2, r0
 80209e6:	4604      	mov	r4, r0
 80209e8:	e708      	b.n	80207fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80209ea:	2200      	movs	r2, #0
 80209ec:	e706      	b.n	80207fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80209ee:	4632      	mov	r2, r6
 80209f0:	e704      	b.n	80207fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080209f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80209f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209f6:	b09f      	sub	sp, #124	; 0x7c
 80209f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80209fa:	9309      	str	r3, [sp, #36]	; 0x24
 80209fc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80209fe:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020a02:	931c      	str	r3, [sp, #112]	; 0x70
 8020a04:	9119      	str	r1, [sp, #100]	; 0x64
 8020a06:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020a0a:	901d      	str	r0, [sp, #116]	; 0x74
 8020a0c:	6850      	ldr	r0, [r2, #4]
 8020a0e:	6812      	ldr	r2, [r2, #0]
 8020a10:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8020a12:	fb00 1303 	mla	r3, r0, r3, r1
 8020a16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020a1a:	930c      	str	r3, [sp, #48]	; 0x30
 8020a1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a1e:	681b      	ldr	r3, [r3, #0]
 8020a20:	9312      	str	r3, [sp, #72]	; 0x48
 8020a22:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a24:	685e      	ldr	r6, [r3, #4]
 8020a26:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020a2a:	930d      	str	r3, [sp, #52]	; 0x34
 8020a2c:	3604      	adds	r6, #4
 8020a2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020a30:	2b00      	cmp	r3, #0
 8020a32:	dc03      	bgt.n	8020a3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	f340 8388 	ble.w	802114c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8020a3c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020a42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020a46:	1e48      	subs	r0, r1, #1
 8020a48:	1e57      	subs	r7, r2, #1
 8020a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	f340 8195 	ble.w	8020d7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020a52:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020a54:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020a58:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020a5c:	d406      	bmi.n	8020a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020a5e:	4584      	cmp	ip, r0
 8020a60:	da04      	bge.n	8020a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	db02      	blt.n	8020a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020a66:	42bb      	cmp	r3, r7
 8020a68:	f2c0 8189 	blt.w	8020d7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8020a6c:	f11c 0c01 	adds.w	ip, ip, #1
 8020a70:	f100 8177 	bmi.w	8020d62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020a74:	4561      	cmp	r1, ip
 8020a76:	f2c0 8174 	blt.w	8020d62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020a7a:	3301      	adds	r3, #1
 8020a7c:	f100 8171 	bmi.w	8020d62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020a80:	429a      	cmp	r2, r3
 8020a82:	f2c0 816e 	blt.w	8020d62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a88:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8020a8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020a8e:	2b00      	cmp	r3, #0
 8020a90:	f340 8193 	ble.w	8020dba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8020a94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a96:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020a9a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020a9c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8020aa0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020aa2:	141b      	asrs	r3, r3, #16
 8020aa4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020aa8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020aac:	f100 81d6 	bmi.w	8020e5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020ab0:	f100 38ff 	add.w	r8, r0, #4294967295
 8020ab4:	4543      	cmp	r3, r8
 8020ab6:	f280 81d1 	bge.w	8020e5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020aba:	f1bc 0f00 	cmp.w	ip, #0
 8020abe:	f2c0 81cd 	blt.w	8020e5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020ac2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020ac6:	45c4      	cmp	ip, r8
 8020ac8:	f280 81c8 	bge.w	8020e5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020acc:	b200      	sxth	r0, r0
 8020ace:	fb0c 3300 	mla	r3, ip, r0, r3
 8020ad2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020ad4:	eb04 0803 	add.w	r8, r4, r3
 8020ad8:	5ce3      	ldrb	r3, [r4, r3]
 8020ada:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020ade:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020ae2:	2a00      	cmp	r2, #0
 8020ae4:	f000 81af 	beq.w	8020e46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8020ae8:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020aec:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020af0:	940e      	str	r4, [sp, #56]	; 0x38
 8020af2:	0e24      	lsrs	r4, r4, #24
 8020af4:	9415      	str	r4, [sp, #84]	; 0x54
 8020af6:	b179      	cbz	r1, 8020b18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020af8:	eb08 0c00 	add.w	ip, r8, r0
 8020afc:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020b00:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020b04:	900a      	str	r0, [sp, #40]	; 0x28
 8020b06:	0e00      	lsrs	r0, r0, #24
 8020b08:	9013      	str	r0, [sp, #76]	; 0x4c
 8020b0a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020b0e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020b12:	900f      	str	r0, [sp, #60]	; 0x3c
 8020b14:	0e00      	lsrs	r0, r0, #24
 8020b16:	9016      	str	r0, [sp, #88]	; 0x58
 8020b18:	b292      	uxth	r2, r2
 8020b1a:	b289      	uxth	r1, r1
 8020b1c:	fb02 f901 	mul.w	r9, r2, r1
 8020b20:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020b24:	0112      	lsls	r2, r2, #4
 8020b26:	eba2 0809 	sub.w	r8, r2, r9
 8020b2a:	b289      	uxth	r1, r1
 8020b2c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020b30:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020b32:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b34:	fa1f f888 	uxth.w	r8, r8
 8020b38:	1a52      	subs	r2, r2, r1
 8020b3a:	b292      	uxth	r2, r2
 8020b3c:	fb08 f000 	mul.w	r0, r8, r0
 8020b40:	fb02 000e 	mla	r0, r2, lr, r0
 8020b44:	fb01 0004 	mla	r0, r1, r4, r0
 8020b48:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020b4a:	fb09 0004 	mla	r0, r9, r4, r0
 8020b4e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020b52:	2800      	cmp	r0, #0
 8020b54:	f000 80fa 	beq.w	8020d4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020b58:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020b5c:	d01b      	beq.n	8020b96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020b5e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020b62:	fb0e fa0a 	mul.w	sl, lr, sl
 8020b66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020b6a:	fb0e fe03 	mul.w	lr, lr, r3
 8020b6e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020b72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b76:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020b7a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020b7e:	4453      	add	r3, sl
 8020b80:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020b84:	0a1b      	lsrs	r3, r3, #8
 8020b86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b8e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020b92:	ea43 030c 	orr.w	r3, r3, ip
 8020b96:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020b98:	2cff      	cmp	r4, #255	; 0xff
 8020b9a:	d021      	beq.n	8020be0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020b9c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020b9e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020ba2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020ba4:	fb04 fb0b 	mul.w	fp, r4, fp
 8020ba8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020baa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020bae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020bb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020bb4:	fb04 fa0a 	mul.w	sl, r4, sl
 8020bb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bbc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020bc0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020bc4:	44de      	add	lr, fp
 8020bc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020bca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020bce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020bd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020bda:	ea4e 040a 	orr.w	r4, lr, sl
 8020bde:	940e      	str	r4, [sp, #56]	; 0x38
 8020be0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020be2:	2cff      	cmp	r4, #255	; 0xff
 8020be4:	d021      	beq.n	8020c2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020be6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020be8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020bec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020bee:	fb04 fb0b 	mul.w	fp, r4, fp
 8020bf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020bf4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020bf8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020bfa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020bfe:	fb04 fa0a 	mul.w	sl, r4, sl
 8020c02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c06:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020c0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020c0e:	44de      	add	lr, fp
 8020c10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020c14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c24:	ea4e 040a 	orr.w	r4, lr, sl
 8020c28:	940a      	str	r4, [sp, #40]	; 0x28
 8020c2a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020c2c:	2cff      	cmp	r4, #255	; 0xff
 8020c2e:	d021      	beq.n	8020c74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020c30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c32:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020c36:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020c38:	fb04 fb0b 	mul.w	fp, r4, fp
 8020c3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c3e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020c42:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020c44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020c48:	fb04 fa0a 	mul.w	sl, r4, sl
 8020c4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c50:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020c54:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020c58:	44de      	add	lr, fp
 8020c5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020c5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c6e:	ea4e 040a 	orr.w	r4, lr, sl
 8020c72:	940f      	str	r4, [sp, #60]	; 0x3c
 8020c74:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020c76:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020c7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020c7c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020c80:	fb08 fc0c 	mul.w	ip, r8, ip
 8020c84:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020c88:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020c8c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c8e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020c92:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020c96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020c98:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020c9c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020ca0:	fb08 f80e 	mul.w	r8, r8, lr
 8020ca4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ca8:	fb02 8303 	mla	r3, r2, r3, r8
 8020cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020cae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020cb0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020cb6:	fb01 330a 	mla	r3, r1, sl, r3
 8020cba:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8020cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020cc0:	fb09 3901 	mla	r9, r9, r1, r3
 8020cc4:	4342      	muls	r2, r0
 8020cc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020cca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020cce:	883b      	ldrh	r3, [r7, #0]
 8020cd0:	1c50      	adds	r0, r2, #1
 8020cd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020cd6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020cda:	ea4c 0c09 	orr.w	ip, ip, r9
 8020cde:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020ce2:	1219      	asrs	r1, r3, #8
 8020ce4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020ce8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020cec:	b2c0      	uxtb	r0, r0
 8020cee:	fb12 f204 	smulbb	r2, r2, r4
 8020cf2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020cf6:	fb01 2100 	mla	r1, r1, r0, r2
 8020cfa:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8020cfe:	10da      	asrs	r2, r3, #3
 8020d00:	fa5f fc8c 	uxtb.w	ip, ip
 8020d04:	00db      	lsls	r3, r3, #3
 8020d06:	fb1c fc04 	smulbb	ip, ip, r4
 8020d0a:	b2db      	uxtb	r3, r3
 8020d0c:	b289      	uxth	r1, r1
 8020d0e:	fb03 c300 	mla	r3, r3, r0, ip
 8020d12:	fa1f fc83 	uxth.w	ip, r3
 8020d16:	1c4b      	adds	r3, r1, #1
 8020d18:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020d1c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020d20:	fb1e fe04 	smulbb	lr, lr, r4
 8020d24:	f10c 0301 	add.w	r3, ip, #1
 8020d28:	fb02 e200 	mla	r2, r2, r0, lr
 8020d2c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020d30:	b292      	uxth	r2, r2
 8020d32:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020d36:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020d3a:	430b      	orrs	r3, r1
 8020d3c:	1c51      	adds	r1, r2, #1
 8020d3e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020d42:	0952      	lsrs	r2, r2, #5
 8020d44:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020d48:	4313      	orrs	r3, r2
 8020d4a:	803b      	strh	r3, [r7, #0]
 8020d4c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020d4e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020d50:	441a      	add	r2, r3
 8020d52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d54:	9229      	str	r2, [sp, #164]	; 0xa4
 8020d56:	441d      	add	r5, r3
 8020d58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020d5a:	3b01      	subs	r3, #1
 8020d5c:	3702      	adds	r7, #2
 8020d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8020d60:	e694      	b.n	8020a8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020d62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020d64:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020d66:	441c      	add	r4, r3
 8020d68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d6a:	9429      	str	r4, [sp, #164]	; 0xa4
 8020d6c:	441d      	add	r5, r3
 8020d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d70:	3b01      	subs	r3, #1
 8020d72:	9309      	str	r3, [sp, #36]	; 0x24
 8020d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d76:	3302      	adds	r3, #2
 8020d78:	930c      	str	r3, [sp, #48]	; 0x30
 8020d7a:	e666      	b.n	8020a4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020d7c:	d024      	beq.n	8020dc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8020d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d80:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020d82:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020d84:	3b01      	subs	r3, #1
 8020d86:	fb00 4003 	mla	r0, r0, r3, r4
 8020d8a:	1400      	asrs	r0, r0, #16
 8020d8c:	f53f ae7b 	bmi.w	8020a86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020d90:	3901      	subs	r1, #1
 8020d92:	4288      	cmp	r0, r1
 8020d94:	f6bf ae77 	bge.w	8020a86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020d98:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020d9a:	fb01 5303 	mla	r3, r1, r3, r5
 8020d9e:	141b      	asrs	r3, r3, #16
 8020da0:	f53f ae71 	bmi.w	8020a86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020da4:	3a01      	subs	r2, #1
 8020da6:	4293      	cmp	r3, r2
 8020da8:	f6bf ae6d 	bge.w	8020a86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020dac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020db0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020db4:	f1bb 0f00 	cmp.w	fp, #0
 8020db8:	dc70      	bgt.n	8020e9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8020dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dbc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020dc2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8020dc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020dca:	2b00      	cmp	r3, #0
 8020dcc:	f340 81be 	ble.w	802114c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8020dd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020dd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020ddc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020dde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020de2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020de6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020dea:	eef0 6a62 	vmov.f32	s13, s5
 8020dee:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020df2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020df6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020dfa:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020dfe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e02:	eef0 6a43 	vmov.f32	s13, s6
 8020e06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e0a:	ee12 2a90 	vmov	r2, s5
 8020e0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e12:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e16:	ee13 2a10 	vmov	r2, s6
 8020e1a:	932b      	str	r3, [sp, #172]	; 0xac
 8020e1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e22:	932c      	str	r3, [sp, #176]	; 0xb0
 8020e24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020e26:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020e28:	3b01      	subs	r3, #1
 8020e2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e2e:	9319      	str	r3, [sp, #100]	; 0x64
 8020e30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e32:	bf08      	it	eq
 8020e34:	4613      	moveq	r3, r2
 8020e36:	ee16 5a90 	vmov	r5, s13
 8020e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8020e3c:	eeb0 3a67 	vmov.f32	s6, s15
 8020e40:	eef0 2a47 	vmov.f32	s5, s14
 8020e44:	e5f3      	b.n	8020a2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020e46:	2900      	cmp	r1, #0
 8020e48:	f43f ae66 	beq.w	8020b18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020e4c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020e50:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020e54:	900a      	str	r0, [sp, #40]	; 0x28
 8020e56:	0e00      	lsrs	r0, r0, #24
 8020e58:	9013      	str	r0, [sp, #76]	; 0x4c
 8020e5a:	e65d      	b.n	8020b18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020e5c:	f113 0801 	adds.w	r8, r3, #1
 8020e60:	f53f af74 	bmi.w	8020d4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e64:	4540      	cmp	r0, r8
 8020e66:	f6ff af71 	blt.w	8020d4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e6a:	f11c 0801 	adds.w	r8, ip, #1
 8020e6e:	f53f af6d 	bmi.w	8020d4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e72:	45c6      	cmp	lr, r8
 8020e74:	f6ff af6a 	blt.w	8020d4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e78:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020e7a:	9302      	str	r3, [sp, #8]
 8020e7c:	b200      	sxth	r0, r0
 8020e7e:	fa0f f38e 	sxth.w	r3, lr
 8020e82:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020e86:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020e8a:	9301      	str	r3, [sp, #4]
 8020e8c:	9000      	str	r0, [sp, #0]
 8020e8e:	4633      	mov	r3, r6
 8020e90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020e92:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020e94:	4639      	mov	r1, r7
 8020e96:	f7ff fc62 	bl	802075e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8020e9a:	e757      	b.n	8020d4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e9c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020e9e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020ea0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020ea4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020ea6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020eaa:	1427      	asrs	r7, r4, #16
 8020eac:	142b      	asrs	r3, r5, #16
 8020eae:	fb01 7303 	mla	r3, r1, r3, r7
 8020eb2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020eb4:	18e7      	adds	r7, r4, r3
 8020eb6:	5ce3      	ldrb	r3, [r4, r3]
 8020eb8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020ebc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020ec0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020ec4:	2a00      	cmp	r2, #0
 8020ec6:	f000 8137 	beq.w	8021138 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8020eca:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020ece:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020ed2:	9410      	str	r4, [sp, #64]	; 0x40
 8020ed4:	0e24      	lsrs	r4, r4, #24
 8020ed6:	9417      	str	r4, [sp, #92]	; 0x5c
 8020ed8:	b170      	cbz	r0, 8020ef8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020eda:	eb07 0e01 	add.w	lr, r7, r1
 8020ede:	5c79      	ldrb	r1, [r7, r1]
 8020ee0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020ee4:	910b      	str	r1, [sp, #44]	; 0x2c
 8020ee6:	0e09      	lsrs	r1, r1, #24
 8020ee8:	9114      	str	r1, [sp, #80]	; 0x50
 8020eea:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020eee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020ef2:	9111      	str	r1, [sp, #68]	; 0x44
 8020ef4:	0e09      	lsrs	r1, r1, #24
 8020ef6:	9118      	str	r1, [sp, #96]	; 0x60
 8020ef8:	b292      	uxth	r2, r2
 8020efa:	b280      	uxth	r0, r0
 8020efc:	fb02 f800 	mul.w	r8, r2, r0
 8020f00:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020f04:	0112      	lsls	r2, r2, #4
 8020f06:	eba2 0e08 	sub.w	lr, r2, r8
 8020f0a:	b280      	uxth	r0, r0
 8020f0c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020f10:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020f12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020f14:	fa1f fe8e 	uxth.w	lr, lr
 8020f18:	1a12      	subs	r2, r2, r0
 8020f1a:	b292      	uxth	r2, r2
 8020f1c:	fb0e f101 	mul.w	r1, lr, r1
 8020f20:	fb02 110c 	mla	r1, r2, ip, r1
 8020f24:	fb00 1104 	mla	r1, r0, r4, r1
 8020f28:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020f2a:	fb08 1104 	mla	r1, r8, r4, r1
 8020f2e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f32:	2900      	cmp	r1, #0
 8020f34:	f000 80f5 	beq.w	8021122 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8020f38:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020f3c:	d019      	beq.n	8020f72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8020f3e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020f42:	fb0c fa0a 	mul.w	sl, ip, sl
 8020f46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f4a:	fb0c fc03 	mul.w	ip, ip, r3
 8020f4e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020f52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f56:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020f5a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020f5e:	4453      	add	r3, sl
 8020f60:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020f64:	0a1b      	lsrs	r3, r3, #8
 8020f66:	0a3f      	lsrs	r7, r7, #8
 8020f68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f6c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020f70:	433b      	orrs	r3, r7
 8020f72:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020f74:	2cff      	cmp	r4, #255	; 0xff
 8020f76:	d020      	beq.n	8020fba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8020f78:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020f7a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020f7e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020f80:	4367      	muls	r7, r4
 8020f82:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020f84:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020f88:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020f8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020f8e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f92:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020f96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f9a:	44bc      	add	ip, r7
 8020f9c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020fa0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020fa4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fa8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fb4:	ea4c 040a 	orr.w	r4, ip, sl
 8020fb8:	9410      	str	r4, [sp, #64]	; 0x40
 8020fba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020fbc:	2cff      	cmp	r4, #255	; 0xff
 8020fbe:	d020      	beq.n	8021002 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8020fc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fc2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020fc6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020fc8:	4367      	muls	r7, r4
 8020fca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fcc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020fd0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020fd2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020fd6:	fb04 fa0a 	mul.w	sl, r4, sl
 8020fda:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020fde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fe2:	44bc      	add	ip, r7
 8020fe4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020fe8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020fec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ff0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ff4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ff8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020ffc:	ea4c 040a 	orr.w	r4, ip, sl
 8021000:	940b      	str	r4, [sp, #44]	; 0x2c
 8021002:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021004:	2cff      	cmp	r4, #255	; 0xff
 8021006:	d020      	beq.n	802104a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8021008:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802100a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802100e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021010:	4367      	muls	r7, r4
 8021012:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021014:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021018:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802101a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802101e:	fb04 fa0a 	mul.w	sl, r4, sl
 8021022:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021026:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802102a:	44bc      	add	ip, r7
 802102c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021030:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021034:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021038:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802103c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021040:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021044:	ea4c 040a 	orr.w	r4, ip, sl
 8021048:	9411      	str	r4, [sp, #68]	; 0x44
 802104a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802104c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021050:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021052:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021056:	fb0e f707 	mul.w	r7, lr, r7
 802105a:	fb02 770c 	mla	r7, r2, ip, r7
 802105e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021062:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021064:	fb00 770c 	mla	r7, r0, ip, r7
 8021068:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802106c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802106e:	fb08 770c 	mla	r7, r8, ip, r7
 8021072:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021076:	fb0e fe0c 	mul.w	lr, lr, ip
 802107a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802107e:	fb02 e303 	mla	r3, r2, r3, lr
 8021082:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021084:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021086:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802108a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802108c:	fb00 330a 	mla	r3, r0, sl, r3
 8021090:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021094:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802109a:	f8b9 0000 	ldrh.w	r0, [r9]
 802109e:	434b      	muls	r3, r1
 80210a0:	0a3f      	lsrs	r7, r7, #8
 80210a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210a6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80210aa:	1c59      	adds	r1, r3, #1
 80210ac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80210b0:	ea47 070c 	orr.w	r7, r7, ip
 80210b4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80210b8:	1202      	asrs	r2, r0, #8
 80210ba:	0c3b      	lsrs	r3, r7, #16
 80210bc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80210c0:	b2c9      	uxtb	r1, r1
 80210c2:	fb13 f304 	smulbb	r3, r3, r4
 80210c6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80210ca:	fb02 3201 	mla	r2, r2, r1, r3
 80210ce:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80210d2:	10c3      	asrs	r3, r0, #3
 80210d4:	b2ff      	uxtb	r7, r7
 80210d6:	00c0      	lsls	r0, r0, #3
 80210d8:	b292      	uxth	r2, r2
 80210da:	fb1c fc04 	smulbb	ip, ip, r4
 80210de:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80210e2:	b2c0      	uxtb	r0, r0
 80210e4:	fb17 f704 	smulbb	r7, r7, r4
 80210e8:	fb03 c301 	mla	r3, r3, r1, ip
 80210ec:	fb00 7001 	mla	r0, r0, r1, r7
 80210f0:	f102 0c01 	add.w	ip, r2, #1
 80210f4:	b280      	uxth	r0, r0
 80210f6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80210fa:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80210fe:	1c42      	adds	r2, r0, #1
 8021100:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021104:	b29b      	uxth	r3, r3
 8021106:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802110a:	ea42 020c 	orr.w	r2, r2, ip
 802110e:	f103 0c01 	add.w	ip, r3, #1
 8021112:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021116:	095b      	lsrs	r3, r3, #5
 8021118:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802111c:	431a      	orrs	r2, r3
 802111e:	f8a9 2000 	strh.w	r2, [r9]
 8021122:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021124:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021126:	441a      	add	r2, r3
 8021128:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802112a:	9229      	str	r2, [sp, #164]	; 0xa4
 802112c:	f109 0902 	add.w	r9, r9, #2
 8021130:	441d      	add	r5, r3
 8021132:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021136:	e63d      	b.n	8020db4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8021138:	2800      	cmp	r0, #0
 802113a:	f43f aedd 	beq.w	8020ef8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802113e:	5c79      	ldrb	r1, [r7, r1]
 8021140:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021144:	910b      	str	r1, [sp, #44]	; 0x2c
 8021146:	0e09      	lsrs	r1, r1, #24
 8021148:	9114      	str	r1, [sp, #80]	; 0x50
 802114a:	e6d5      	b.n	8020ef8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802114c:	b01f      	add	sp, #124	; 0x7c
 802114e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021152 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8021152:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021156:	b089      	sub	sp, #36	; 0x24
 8021158:	9101      	str	r1, [sp, #4]
 802115a:	9801      	ldr	r0, [sp, #4]
 802115c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8021160:	8800      	ldrh	r0, [r0, #0]
 8021162:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8021166:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 802116a:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 802116e:	1206      	asrs	r6, r0, #8
 8021170:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8021174:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021178:	9602      	str	r6, [sp, #8]
 802117a:	10c6      	asrs	r6, r0, #3
 802117c:	00c0      	lsls	r0, r0, #3
 802117e:	b2c0      	uxtb	r0, r0
 8021180:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021184:	9004      	str	r0, [sp, #16]
 8021186:	2f00      	cmp	r7, #0
 8021188:	fb07 100c 	mla	r0, r7, ip, r1
 802118c:	9603      	str	r6, [sp, #12]
 802118e:	eb02 0e00 	add.w	lr, r2, r0
 8021192:	f2c0 810a 	blt.w	80213aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8021196:	45b8      	cmp	r8, r7
 8021198:	f340 8107 	ble.w	80213aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802119c:	2900      	cmp	r1, #0
 802119e:	f2c0 8102 	blt.w	80213a6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80211a2:	458c      	cmp	ip, r1
 80211a4:	f340 80ff 	ble.w	80213a6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80211a8:	5c12      	ldrb	r2, [r2, r0]
 80211aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80211ae:	1c4a      	adds	r2, r1, #1
 80211b0:	f100 80fe 	bmi.w	80213b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80211b4:	4594      	cmp	ip, r2
 80211b6:	f340 80fb 	ble.w	80213b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80211ba:	2d00      	cmp	r5, #0
 80211bc:	f000 80fa 	beq.w	80213b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 80211c0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80211c4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80211c8:	3701      	adds	r7, #1
 80211ca:	f100 80f7 	bmi.w	80213bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80211ce:	45b8      	cmp	r8, r7
 80211d0:	f340 80f4 	ble.w	80213bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80211d4:	2c00      	cmp	r4, #0
 80211d6:	f000 80f4 	beq.w	80213c2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 80211da:	2900      	cmp	r1, #0
 80211dc:	eb0e 020c 	add.w	r2, lr, ip
 80211e0:	f2c0 80ea 	blt.w	80213b8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80211e4:	458c      	cmp	ip, r1
 80211e6:	f340 80e7 	ble.w	80213b8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80211ea:	f81e 700c 	ldrb.w	r7, [lr, ip]
 80211ee:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80211f2:	3101      	adds	r1, #1
 80211f4:	f100 80e8 	bmi.w	80213c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80211f8:	458c      	cmp	ip, r1
 80211fa:	f340 80e5 	ble.w	80213c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 80211fe:	2d00      	cmp	r5, #0
 8021200:	f000 80e4 	beq.w	80213cc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8021204:	7852      	ldrb	r2, [r2, #1]
 8021206:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802120a:	0e0b      	lsrs	r3, r1, #24
 802120c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8021210:	9300      	str	r3, [sp, #0]
 8021212:	b2a4      	uxth	r4, r4
 8021214:	b2ab      	uxth	r3, r5
 8021216:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 802121a:	fb03 f904 	mul.w	r9, r3, r4
 802121e:	fb0a f505 	mul.w	r5, sl, r5
 8021222:	011b      	lsls	r3, r3, #4
 8021224:	eba3 0e09 	sub.w	lr, r3, r9
 8021228:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 802122c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8021230:	0a28      	lsrs	r0, r5, #8
 8021232:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021236:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802123a:	4405      	add	r5, r0
 802123c:	0a2d      	lsrs	r5, r5, #8
 802123e:	fb0a f303 	mul.w	r3, sl, r3
 8021242:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8021246:	9005      	str	r0, [sp, #20]
 8021248:	f503 7080 	add.w	r0, r3, #256	; 0x100
 802124c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021250:	0a1b      	lsrs	r3, r3, #8
 8021252:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021256:	9306      	str	r3, [sp, #24]
 8021258:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802125c:	fb0b f303 	mul.w	r3, fp, r3
 8021260:	0a1d      	lsrs	r5, r3, #8
 8021262:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021266:	ea4f 6817 	mov.w	r8, r7, lsr #24
 802126a:	fb0b f606 	mul.w	r6, fp, r6
 802126e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021272:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021276:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802127a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802127e:	fb08 f707 	mul.w	r7, r8, r7
 8021282:	441d      	add	r5, r3
 8021284:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8021288:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802128c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021290:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021294:	fb08 fc0c 	mul.w	ip, r8, ip
 8021298:	0a1b      	lsrs	r3, r3, #8
 802129a:	9307      	str	r3, [sp, #28]
 802129c:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80212a0:	0e0b      	lsrs	r3, r1, #24
 80212a2:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 80212a6:	435f      	muls	r7, r3
 80212a8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80212ac:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80212b0:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80212b4:	4460      	add	r0, ip
 80212b6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80212ba:	b2a4      	uxth	r4, r4
 80212bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80212c0:	0a2d      	lsrs	r5, r5, #8
 80212c2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80212c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212ca:	fa1f fe8e 	uxth.w	lr, lr
 80212ce:	4359      	muls	r1, r3
 80212d0:	1b12      	subs	r2, r2, r4
 80212d2:	9b05      	ldr	r3, [sp, #20]
 80212d4:	44bc      	add	ip, r7
 80212d6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80212da:	b292      	uxth	r2, r2
 80212dc:	fb05 f50e 	mul.w	r5, r5, lr
 80212e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212e4:	fb03 5502 	mla	r5, r3, r2, r5
 80212e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212ec:	9b06      	ldr	r3, [sp, #24]
 80212ee:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80212f2:	0a36      	lsrs	r6, r6, #8
 80212f4:	0a00      	lsrs	r0, r0, #8
 80212f6:	fb0c 5509 	mla	r5, ip, r9, r5
 80212fa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80212fe:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021302:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021306:	fb00 5504 	mla	r5, r0, r4, r5
 802130a:	fb0e f606 	mul.w	r6, lr, r6
 802130e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8021312:	0a09      	lsrs	r1, r1, #8
 8021314:	9b07      	ldr	r3, [sp, #28]
 8021316:	fb02 6000 	mla	r0, r2, r0, r6
 802131a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802131e:	fb09 0001 	mla	r0, r9, r1, r0
 8021322:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021326:	fb0e fe0b 	mul.w	lr, lr, fp
 802132a:	fb04 0003 	mla	r0, r4, r3, r0
 802132e:	fb02 e20a 	mla	r2, r2, sl, lr
 8021332:	9b00      	ldr	r3, [sp, #0]
 8021334:	fb04 2408 	mla	r4, r4, r8, r2
 8021338:	fb09 4903 	mla	r9, r9, r3, r4
 802133c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8021340:	9b02      	ldr	r3, [sp, #8]
 8021342:	9a04      	ldr	r2, [sp, #16]
 8021344:	fa5f f989 	uxtb.w	r9, r9
 8021348:	fb03 f109 	mul.w	r1, r3, r9
 802134c:	9b03      	ldr	r3, [sp, #12]
 802134e:	0a2d      	lsrs	r5, r5, #8
 8021350:	0a00      	lsrs	r0, r0, #8
 8021352:	fb03 f309 	mul.w	r3, r3, r9
 8021356:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802135a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802135e:	4305      	orrs	r5, r0
 8021360:	fb02 f909 	mul.w	r9, r2, r9
 8021364:	1c58      	adds	r0, r3, #1
 8021366:	1c4a      	adds	r2, r1, #1
 8021368:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802136c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021370:	0a2b      	lsrs	r3, r5, #8
 8021372:	0c2a      	lsrs	r2, r5, #16
 8021374:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021378:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802137c:	00db      	lsls	r3, r3, #3
 802137e:	0212      	lsls	r2, r2, #8
 8021380:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021384:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021388:	4313      	orrs	r3, r2
 802138a:	f109 0201 	add.w	r2, r9, #1
 802138e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021392:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8021396:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802139a:	431d      	orrs	r5, r3
 802139c:	9b01      	ldr	r3, [sp, #4]
 802139e:	801d      	strh	r5, [r3, #0]
 80213a0:	b009      	add	sp, #36	; 0x24
 80213a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213a6:	2000      	movs	r0, #0
 80213a8:	e701      	b.n	80211ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80213aa:	2600      	movs	r6, #0
 80213ac:	4630      	mov	r0, r6
 80213ae:	e70b      	b.n	80211c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80213b0:	2600      	movs	r6, #0
 80213b2:	e709      	b.n	80211c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80213b4:	462e      	mov	r6, r5
 80213b6:	e707      	b.n	80211c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80213b8:	2700      	movs	r7, #0
 80213ba:	e71a      	b.n	80211f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 80213bc:	2100      	movs	r1, #0
 80213be:	460f      	mov	r7, r1
 80213c0:	e723      	b.n	802120a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80213c2:	4621      	mov	r1, r4
 80213c4:	4627      	mov	r7, r4
 80213c6:	e720      	b.n	802120a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80213c8:	2100      	movs	r1, #0
 80213ca:	e71e      	b.n	802120a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80213cc:	4629      	mov	r1, r5
 80213ce:	e71c      	b.n	802120a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

080213d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80213d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213d4:	b09b      	sub	sp, #108	; 0x6c
 80213d6:	9218      	str	r2, [sp, #96]	; 0x60
 80213d8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80213da:	9116      	str	r1, [sp, #88]	; 0x58
 80213dc:	9307      	str	r3, [sp, #28]
 80213de:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80213e2:	9019      	str	r0, [sp, #100]	; 0x64
 80213e4:	6850      	ldr	r0, [r2, #4]
 80213e6:	6812      	ldr	r2, [r2, #0]
 80213e8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80213ea:	fb00 1303 	mla	r3, r0, r3, r1
 80213ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80213f2:	930a      	str	r3, [sp, #40]	; 0x28
 80213f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80213fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80213fc:	685e      	ldr	r6, [r3, #4]
 80213fe:	3604      	adds	r6, #4
 8021400:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021402:	2b00      	cmp	r3, #0
 8021404:	dc03      	bgt.n	802140e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021406:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021408:	2b00      	cmp	r3, #0
 802140a:	f340 8373 	ble.w	8021af4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802140e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021410:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021414:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021418:	1e48      	subs	r0, r1, #1
 802141a:	1e57      	subs	r7, r2, #1
 802141c:	9b07      	ldr	r3, [sp, #28]
 802141e:	2b00      	cmp	r3, #0
 8021420:	f340 8190 	ble.w	8021744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021424:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021426:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802142a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802142e:	d406      	bmi.n	802143e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021430:	4584      	cmp	ip, r0
 8021432:	da04      	bge.n	802143e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021434:	2b00      	cmp	r3, #0
 8021436:	db02      	blt.n	802143e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021438:	42bb      	cmp	r3, r7
 802143a:	f2c0 8184 	blt.w	8021746 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802143e:	f11c 0c01 	adds.w	ip, ip, #1
 8021442:	f100 8172 	bmi.w	802172a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021446:	4561      	cmp	r1, ip
 8021448:	f2c0 816f 	blt.w	802172a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802144c:	3301      	adds	r3, #1
 802144e:	f100 816c 	bmi.w	802172a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021452:	429a      	cmp	r2, r3
 8021454:	f2c0 8169 	blt.w	802172a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021458:	9b07      	ldr	r3, [sp, #28]
 802145a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802145c:	9317      	str	r3, [sp, #92]	; 0x5c
 802145e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021460:	2b00      	cmp	r3, #0
 8021462:	f340 818e 	ble.w	8021782 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 8021466:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021468:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802146c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802146e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021472:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021474:	141b      	asrs	r3, r3, #16
 8021476:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802147a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802147e:	f100 81d1 	bmi.w	8021824 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8021482:	f101 38ff 	add.w	r8, r1, #4294967295
 8021486:	4543      	cmp	r3, r8
 8021488:	f280 81cc 	bge.w	8021824 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 802148c:	f1bc 0f00 	cmp.w	ip, #0
 8021490:	f2c0 81c8 	blt.w	8021824 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8021494:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021498:	45c4      	cmp	ip, r8
 802149a:	f280 81c3 	bge.w	8021824 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 802149e:	b209      	sxth	r1, r1
 80214a0:	fb0c 3301 	mla	r3, ip, r1, r3
 80214a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80214a6:	eb04 0803 	add.w	r8, r4, r3
 80214aa:	5ce3      	ldrb	r3, [r4, r3]
 80214ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80214b0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80214b4:	2a00      	cmp	r2, #0
 80214b6:	f000 81aa 	beq.w	802180e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 80214ba:	f898 c001 	ldrb.w	ip, [r8, #1]
 80214be:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80214c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80214c4:	0e24      	lsrs	r4, r4, #24
 80214c6:	9412      	str	r4, [sp, #72]	; 0x48
 80214c8:	b178      	cbz	r0, 80214ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80214ca:	eb08 0c01 	add.w	ip, r8, r1
 80214ce:	f818 1001 	ldrb.w	r1, [r8, r1]
 80214d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80214d6:	9108      	str	r1, [sp, #32]
 80214d8:	0e09      	lsrs	r1, r1, #24
 80214da:	9110      	str	r1, [sp, #64]	; 0x40
 80214dc:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80214e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80214e4:	910c      	str	r1, [sp, #48]	; 0x30
 80214e6:	0e09      	lsrs	r1, r1, #24
 80214e8:	9113      	str	r1, [sp, #76]	; 0x4c
 80214ea:	b292      	uxth	r2, r2
 80214ec:	b280      	uxth	r0, r0
 80214ee:	fb02 f900 	mul.w	r9, r2, r0
 80214f2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80214f6:	0112      	lsls	r2, r2, #4
 80214f8:	eba2 0809 	sub.w	r8, r2, r9
 80214fc:	b280      	uxth	r0, r0
 80214fe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021502:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021504:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021506:	fa1f f888 	uxth.w	r8, r8
 802150a:	1a12      	subs	r2, r2, r0
 802150c:	b292      	uxth	r2, r2
 802150e:	fb08 f101 	mul.w	r1, r8, r1
 8021512:	fb02 110e 	mla	r1, r2, lr, r1
 8021516:	fb00 1104 	mla	r1, r0, r4, r1
 802151a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802151c:	fb09 1104 	mla	r1, r9, r4, r1
 8021520:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021524:	2900      	cmp	r1, #0
 8021526:	f000 80f5 	beq.w	8021714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802152a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802152e:	d01b      	beq.n	8021568 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021530:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021534:	fb0e fa0a 	mul.w	sl, lr, sl
 8021538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802153c:	fb0e fe03 	mul.w	lr, lr, r3
 8021540:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021544:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021548:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802154c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021550:	4453      	add	r3, sl
 8021552:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021556:	0a1b      	lsrs	r3, r3, #8
 8021558:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802155c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021560:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021564:	ea43 030c 	orr.w	r3, r3, ip
 8021568:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802156a:	2cff      	cmp	r4, #255	; 0xff
 802156c:	d021      	beq.n	80215b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802156e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021570:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021574:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021576:	fb04 fb0b 	mul.w	fp, r4, fp
 802157a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802157c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021580:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021582:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021586:	fb04 fa0a 	mul.w	sl, r4, sl
 802158a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802158e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021592:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021596:	44de      	add	lr, fp
 8021598:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802159c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80215ac:	ea4e 040a 	orr.w	r4, lr, sl
 80215b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80215b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80215b4:	2cff      	cmp	r4, #255	; 0xff
 80215b6:	d021      	beq.n	80215fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80215b8:	9c08      	ldr	r4, [sp, #32]
 80215ba:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80215be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80215c0:	fb04 fb0b 	mul.w	fp, r4, fp
 80215c4:	9c08      	ldr	r4, [sp, #32]
 80215c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80215ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80215cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80215d0:	fb04 fa0a 	mul.w	sl, r4, sl
 80215d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80215dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80215e0:	44de      	add	lr, fp
 80215e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80215e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80215f6:	ea4e 040a 	orr.w	r4, lr, sl
 80215fa:	9408      	str	r4, [sp, #32]
 80215fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80215fe:	2cff      	cmp	r4, #255	; 0xff
 8021600:	d021      	beq.n	8021646 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021602:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021604:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021608:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802160a:	fb04 fb0b 	mul.w	fp, r4, fp
 802160e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021610:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021614:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021616:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802161a:	fb04 fa0a 	mul.w	sl, r4, sl
 802161e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021622:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021626:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802162a:	44de      	add	lr, fp
 802162c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021630:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021634:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021638:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802163c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021640:	ea4e 040a 	orr.w	r4, lr, sl
 8021644:	940c      	str	r4, [sp, #48]	; 0x30
 8021646:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021648:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802164c:	9c08      	ldr	r4, [sp, #32]
 802164e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021652:	fb08 fc0c 	mul.w	ip, r8, ip
 8021656:	fb02 cc0e 	mla	ip, r2, lr, ip
 802165a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802165e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021660:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021664:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021668:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802166a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802166e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021672:	fb08 f80e 	mul.w	r8, r8, lr
 8021676:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802167a:	fb02 8303 	mla	r3, r2, r3, r8
 802167e:	9a08      	ldr	r2, [sp, #32]
 8021680:	f8b7 8000 	ldrh.w	r8, [r7]
 8021684:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802168a:	fb00 330a 	mla	r3, r0, sl, r3
 802168e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021692:	fb09 3900 	mla	r9, r9, r0, r3
 8021696:	43c9      	mvns	r1, r1
 8021698:	ea4f 2228 	mov.w	r2, r8, asr #8
 802169c:	fa5f fe81 	uxtb.w	lr, r1
 80216a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80216a8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80216ac:	fb02 f20e 	mul.w	r2, r2, lr
 80216b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216b4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80216b8:	ea4c 0c09 	orr.w	ip, ip, r9
 80216bc:	1c53      	adds	r3, r2, #1
 80216be:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80216c2:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80216c6:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80216ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80216ce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80216d2:	4a63      	ldr	r2, [pc, #396]	; (8021860 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80216d4:	fb00 f00e 	mul.w	r0, r0, lr
 80216d8:	b2db      	uxtb	r3, r3
 80216da:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80216de:	1c43      	adds	r3, r0, #1
 80216e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80216e4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80216e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80216ec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80216f0:	b2c9      	uxtb	r1, r1
 80216f2:	00db      	lsls	r3, r3, #3
 80216f4:	fb01 f10e 	mul.w	r1, r1, lr
 80216f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80216fc:	4313      	orrs	r3, r2
 80216fe:	1c4a      	adds	r2, r1, #1
 8021700:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021704:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021708:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802170c:	ea4c 0c03 	orr.w	ip, ip, r3
 8021710:	f8a7 c000 	strh.w	ip, [r7]
 8021714:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021716:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021718:	441a      	add	r2, r3
 802171a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802171c:	9225      	str	r2, [sp, #148]	; 0x94
 802171e:	441d      	add	r5, r3
 8021720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021722:	3b01      	subs	r3, #1
 8021724:	3702      	adds	r7, #2
 8021726:	9317      	str	r3, [sp, #92]	; 0x5c
 8021728:	e699      	b.n	802145e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802172a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802172c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802172e:	441c      	add	r4, r3
 8021730:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021732:	9425      	str	r4, [sp, #148]	; 0x94
 8021734:	441d      	add	r5, r3
 8021736:	9b07      	ldr	r3, [sp, #28]
 8021738:	3b01      	subs	r3, #1
 802173a:	9307      	str	r3, [sp, #28]
 802173c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802173e:	3302      	adds	r3, #2
 8021740:	930a      	str	r3, [sp, #40]	; 0x28
 8021742:	e66b      	b.n	802141c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021744:	d024      	beq.n	8021790 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021746:	9b07      	ldr	r3, [sp, #28]
 8021748:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802174a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802174c:	3b01      	subs	r3, #1
 802174e:	fb00 4003 	mla	r0, r0, r3, r4
 8021752:	1400      	asrs	r0, r0, #16
 8021754:	f53f ae80 	bmi.w	8021458 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021758:	3901      	subs	r1, #1
 802175a:	4288      	cmp	r0, r1
 802175c:	f6bf ae7c 	bge.w	8021458 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021760:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021762:	fb01 5303 	mla	r3, r1, r3, r5
 8021766:	141b      	asrs	r3, r3, #16
 8021768:	f53f ae76 	bmi.w	8021458 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802176c:	3a01      	subs	r2, #1
 802176e:	4293      	cmp	r3, r2
 8021770:	f6bf ae72 	bge.w	8021458 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021774:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021778:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802177c:	f1bb 0f00 	cmp.w	fp, #0
 8021780:	dc70      	bgt.n	8021864 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021782:	9b07      	ldr	r3, [sp, #28]
 8021784:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802178a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802178e:	930a      	str	r3, [sp, #40]	; 0x28
 8021790:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021792:	2b00      	cmp	r3, #0
 8021794:	f340 81ae 	ble.w	8021af4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8021798:	ee30 0a04 	vadd.f32	s0, s0, s8
 802179c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80217a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80217a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80217a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80217aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80217ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80217b2:	eef0 6a62 	vmov.f32	s13, s5
 80217b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80217ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80217c2:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80217c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80217ca:	eef0 6a43 	vmov.f32	s13, s6
 80217ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80217d2:	ee12 2a90 	vmov	r2, s5
 80217d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80217da:	fb92 f3f3 	sdiv	r3, r2, r3
 80217de:	ee13 2a10 	vmov	r2, s6
 80217e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80217e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80217e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80217ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80217ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80217ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80217f0:	3b01      	subs	r3, #1
 80217f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217f6:	9316      	str	r3, [sp, #88]	; 0x58
 80217f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80217fa:	bf08      	it	eq
 80217fc:	4613      	moveq	r3, r2
 80217fe:	ee16 5a90 	vmov	r5, s13
 8021802:	9307      	str	r3, [sp, #28]
 8021804:	eeb0 3a67 	vmov.f32	s6, s15
 8021808:	eef0 2a47 	vmov.f32	s5, s14
 802180c:	e5f8      	b.n	8021400 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802180e:	2800      	cmp	r0, #0
 8021810:	f43f ae6b 	beq.w	80214ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8021814:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021818:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802181c:	9108      	str	r1, [sp, #32]
 802181e:	0e09      	lsrs	r1, r1, #24
 8021820:	9110      	str	r1, [sp, #64]	; 0x40
 8021822:	e662      	b.n	80214ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8021824:	f113 0801 	adds.w	r8, r3, #1
 8021828:	f53f af74 	bmi.w	8021714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802182c:	4541      	cmp	r1, r8
 802182e:	f6ff af71 	blt.w	8021714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021832:	f11c 0801 	adds.w	r8, ip, #1
 8021836:	f53f af6d 	bmi.w	8021714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802183a:	45c6      	cmp	lr, r8
 802183c:	f6ff af6a 	blt.w	8021714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021840:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021844:	b209      	sxth	r1, r1
 8021846:	fa0f f38e 	sxth.w	r3, lr
 802184a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802184e:	9301      	str	r3, [sp, #4]
 8021850:	9100      	str	r1, [sp, #0]
 8021852:	4633      	mov	r3, r6
 8021854:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021856:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021858:	4639      	mov	r1, r7
 802185a:	f7ff fc7a 	bl	8021152 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802185e:	e759      	b.n	8021714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021860:	fffff800 	.word	0xfffff800
 8021864:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021866:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021868:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802186c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802186e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021872:	1427      	asrs	r7, r4, #16
 8021874:	142b      	asrs	r3, r5, #16
 8021876:	fb01 7303 	mla	r3, r1, r3, r7
 802187a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802187c:	18e7      	adds	r7, r4, r3
 802187e:	5ce3      	ldrb	r3, [r4, r3]
 8021880:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021884:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021888:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802188c:	2a00      	cmp	r2, #0
 802188e:	f000 8127 	beq.w	8021ae0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8021892:	f897 e001 	ldrb.w	lr, [r7, #1]
 8021896:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802189a:	940d      	str	r4, [sp, #52]	; 0x34
 802189c:	0e24      	lsrs	r4, r4, #24
 802189e:	9414      	str	r4, [sp, #80]	; 0x50
 80218a0:	b170      	cbz	r0, 80218c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80218a2:	eb07 0e01 	add.w	lr, r7, r1
 80218a6:	5c79      	ldrb	r1, [r7, r1]
 80218a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80218ac:	9109      	str	r1, [sp, #36]	; 0x24
 80218ae:	0e09      	lsrs	r1, r1, #24
 80218b0:	9111      	str	r1, [sp, #68]	; 0x44
 80218b2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80218b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80218ba:	910e      	str	r1, [sp, #56]	; 0x38
 80218bc:	0e09      	lsrs	r1, r1, #24
 80218be:	9115      	str	r1, [sp, #84]	; 0x54
 80218c0:	b292      	uxth	r2, r2
 80218c2:	b280      	uxth	r0, r0
 80218c4:	fb02 f800 	mul.w	r8, r2, r0
 80218c8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80218cc:	0112      	lsls	r2, r2, #4
 80218ce:	eba2 0e08 	sub.w	lr, r2, r8
 80218d2:	b280      	uxth	r0, r0
 80218d4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80218d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80218da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80218dc:	fa1f fe8e 	uxth.w	lr, lr
 80218e0:	1a09      	subs	r1, r1, r0
 80218e2:	b289      	uxth	r1, r1
 80218e4:	fb0e f202 	mul.w	r2, lr, r2
 80218e8:	fb01 220c 	mla	r2, r1, ip, r2
 80218ec:	fb00 2204 	mla	r2, r0, r4, r2
 80218f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80218f2:	fb08 2204 	mla	r2, r8, r4, r2
 80218f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80218fa:	2a00      	cmp	r2, #0
 80218fc:	f000 80e5 	beq.w	8021aca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8021900:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021904:	d019      	beq.n	802193a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8021906:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802190a:	fb0c fa0a 	mul.w	sl, ip, sl
 802190e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021912:	fb0c fc03 	mul.w	ip, ip, r3
 8021916:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802191a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802191e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021922:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021926:	4453      	add	r3, sl
 8021928:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802192c:	0a1b      	lsrs	r3, r3, #8
 802192e:	0a3f      	lsrs	r7, r7, #8
 8021930:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021934:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021938:	433b      	orrs	r3, r7
 802193a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802193c:	2cff      	cmp	r4, #255	; 0xff
 802193e:	d020      	beq.n	8021982 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8021940:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021942:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021946:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021948:	4367      	muls	r7, r4
 802194a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802194c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021950:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021952:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021956:	fb04 fa0a 	mul.w	sl, r4, sl
 802195a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802195e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021962:	44bc      	add	ip, r7
 8021964:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021968:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802196c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021970:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021974:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021978:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802197c:	ea4c 040a 	orr.w	r4, ip, sl
 8021980:	940d      	str	r4, [sp, #52]	; 0x34
 8021982:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021984:	2cff      	cmp	r4, #255	; 0xff
 8021986:	d020      	beq.n	80219ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8021988:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802198a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802198e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021990:	4367      	muls	r7, r4
 8021992:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021994:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021998:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802199a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802199e:	fb04 fa0a 	mul.w	sl, r4, sl
 80219a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80219a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219aa:	44bc      	add	ip, r7
 80219ac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80219b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80219b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80219bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80219c4:	ea4c 040a 	orr.w	r4, ip, sl
 80219c8:	9409      	str	r4, [sp, #36]	; 0x24
 80219ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80219cc:	2cff      	cmp	r4, #255	; 0xff
 80219ce:	d020      	beq.n	8021a12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80219d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80219d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80219d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80219d8:	4367      	muls	r7, r4
 80219da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80219dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80219e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80219e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80219e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80219ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80219ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219f2:	44bc      	add	ip, r7
 80219f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80219f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80219fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a0c:	ea4c 040a 	orr.w	r4, ip, sl
 8021a10:	940e      	str	r4, [sp, #56]	; 0x38
 8021a12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021a14:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021a18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021a1a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021a1e:	fb0e f707 	mul.w	r7, lr, r7
 8021a22:	fb01 770c 	mla	r7, r1, ip, r7
 8021a26:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021a2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021a2c:	fb00 770c 	mla	r7, r0, ip, r7
 8021a30:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021a34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021a36:	fb08 770c 	mla	r7, r8, ip, r7
 8021a3a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021a3e:	fb0e fe0c 	mul.w	lr, lr, ip
 8021a42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a46:	fb01 e303 	mla	r3, r1, r3, lr
 8021a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021a4c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021a50:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021a52:	fb00 330a 	mla	r3, r0, sl, r3
 8021a56:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021a5a:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021a5e:	f8b9 3000 	ldrh.w	r3, [r9]
 8021a62:	43d2      	mvns	r2, r2
 8021a64:	1218      	asrs	r0, r3, #8
 8021a66:	b2d2      	uxtb	r2, r2
 8021a68:	10d9      	asrs	r1, r3, #3
 8021a6a:	0a3f      	lsrs	r7, r7, #8
 8021a6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a70:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021a74:	00db      	lsls	r3, r3, #3
 8021a76:	4350      	muls	r0, r2
 8021a78:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a7c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a80:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021a84:	b2db      	uxtb	r3, r3
 8021a86:	ea47 070c 	orr.w	r7, r7, ip
 8021a8a:	4351      	muls	r1, r2
 8021a8c:	4353      	muls	r3, r2
 8021a8e:	1c42      	adds	r2, r0, #1
 8021a90:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021a94:	0c3a      	lsrs	r2, r7, #16
 8021a96:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021a9a:	4a18      	ldr	r2, [pc, #96]	; (8021afc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8021a9c:	b2c0      	uxtb	r0, r0
 8021a9e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8021aa2:	1c4a      	adds	r2, r1, #1
 8021aa4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021aa8:	0a3a      	lsrs	r2, r7, #8
 8021aaa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021aae:	00c9      	lsls	r1, r1, #3
 8021ab0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021ab4:	4301      	orrs	r1, r0
 8021ab6:	1c58      	adds	r0, r3, #1
 8021ab8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021abc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8021ac0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8021ac4:	4308      	orrs	r0, r1
 8021ac6:	f8a9 0000 	strh.w	r0, [r9]
 8021aca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021acc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021ace:	441a      	add	r2, r3
 8021ad0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ad2:	9225      	str	r2, [sp, #148]	; 0x94
 8021ad4:	f109 0902 	add.w	r9, r9, #2
 8021ad8:	441d      	add	r5, r3
 8021ada:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021ade:	e64d      	b.n	802177c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8021ae0:	2800      	cmp	r0, #0
 8021ae2:	f43f aeed 	beq.w	80218c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021ae6:	5c79      	ldrb	r1, [r7, r1]
 8021ae8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021aec:	9109      	str	r1, [sp, #36]	; 0x24
 8021aee:	0e09      	lsrs	r1, r1, #24
 8021af0:	9111      	str	r1, [sp, #68]	; 0x44
 8021af2:	e6e5      	b.n	80218c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021af4:	b01b      	add	sp, #108	; 0x6c
 8021af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021afa:	bf00      	nop
 8021afc:	fffff800 	.word	0xfffff800

08021b00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8021b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b04:	b085      	sub	sp, #20
 8021b06:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8021b0a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8021b0e:	9103      	str	r1, [sp, #12]
 8021b10:	fb00 7406 	mla	r4, r0, r6, r7
 8021b14:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8021b18:	2800      	cmp	r0, #0
 8021b1a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8021b1e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8021b22:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021b26:	9501      	str	r5, [sp, #4]
 8021b28:	eb03 0904 	add.w	r9, r3, r4
 8021b2c:	f2c0 8150 	blt.w	8021dd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021b30:	4583      	cmp	fp, r0
 8021b32:	f340 814d 	ble.w	8021dd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021b36:	2f00      	cmp	r7, #0
 8021b38:	f2c0 8146 	blt.w	8021dc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021b3c:	42be      	cmp	r6, r7
 8021b3e:	f340 8143 	ble.w	8021dc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021b42:	f813 c004 	ldrb.w	ip, [r3, r4]
 8021b46:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8021b4a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021b4e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8021b52:	4355      	muls	r5, r2
 8021b54:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021b58:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8021b5c:	fb0c f203 	mul.w	r2, ip, r3
 8021b60:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021b64:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021b68:	441d      	add	r5, r3
 8021b6a:	f102 0320 	add.w	r3, r2, #32
 8021b6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021b72:	0a1b      	lsrs	r3, r3, #8
 8021b74:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021b78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021b7c:	431c      	orrs	r4, r3
 8021b7e:	1c7b      	adds	r3, r7, #1
 8021b80:	f100 812b 	bmi.w	8021dda <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021b84:	429e      	cmp	r6, r3
 8021b86:	f340 8128 	ble.w	8021dda <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021b8a:	2900      	cmp	r1, #0
 8021b8c:	f000 8128 	beq.w	8021de0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8021b90:	9a01      	ldr	r2, [sp, #4]
 8021b92:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021b96:	8855      	ldrh	r5, [r2, #2]
 8021b98:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021b9c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021ba0:	fb08 f802 	mul.w	r8, r8, r2
 8021ba4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021ba8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021bac:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8021bb0:	435d      	muls	r5, r3
 8021bb2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021bb6:	44d0      	add	r8, sl
 8021bb8:	f105 0a20 	add.w	sl, r5, #32
 8021bbc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021bc0:	0a2d      	lsrs	r5, r5, #8
 8021bc2:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021bc6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021bca:	432a      	orrs	r2, r5
 8021bcc:	3001      	adds	r0, #1
 8021bce:	f100 810d 	bmi.w	8021dec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021bd2:	4583      	cmp	fp, r0
 8021bd4:	f340 810a 	ble.w	8021dec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021bd8:	f1be 0f00 	cmp.w	lr, #0
 8021bdc:	f000 810b 	beq.w	8021df6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8021be0:	2f00      	cmp	r7, #0
 8021be2:	f2c0 8100 	blt.w	8021de6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8021be6:	42be      	cmp	r6, r7
 8021be8:	f340 80fd 	ble.w	8021de6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8021bec:	9801      	ldr	r0, [sp, #4]
 8021bee:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021bf2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021bf6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021bfa:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8021bfe:	fb0a fa00 	mul.w	sl, sl, r0
 8021c02:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021c06:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021c0a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021c0e:	fb05 f808 	mul.w	r8, r5, r8
 8021c12:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021c16:	4482      	add	sl, r0
 8021c18:	f108 0020 	add.w	r0, r8, #32
 8021c1c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021c20:	0a00      	lsrs	r0, r0, #8
 8021c22:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021c26:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021c2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8021c2e:	3701      	adds	r7, #1
 8021c30:	f100 80e6 	bmi.w	8021e00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021c34:	42be      	cmp	r6, r7
 8021c36:	f340 80e3 	ble.w	8021e00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021c3a:	2900      	cmp	r1, #0
 8021c3c:	f000 80e3 	beq.w	8021e06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8021c40:	3601      	adds	r6, #1
 8021c42:	9801      	ldr	r0, [sp, #4]
 8021c44:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021c48:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021c4c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021c50:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021c54:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021c58:	fb09 f906 	mul.w	r9, r9, r6
 8021c5c:	fb07 f800 	mul.w	r8, r7, r0
 8021c60:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021c64:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021c68:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021c6c:	44d1      	add	r9, sl
 8021c6e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021c72:	f108 0020 	add.w	r0, r8, #32
 8021c76:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021c7a:	0a00      	lsrs	r0, r0, #8
 8021c7c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021c80:	4330      	orrs	r0, r6
 8021c82:	b28e      	uxth	r6, r1
 8021c84:	fa1f f98e 	uxth.w	r9, lr
 8021c88:	fb06 f809 	mul.w	r8, r6, r9
 8021c8c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021c90:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021c94:	0136      	lsls	r6, r6, #4
 8021c96:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021c9a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021c9e:	9601      	str	r6, [sp, #4]
 8021ca0:	ea4a 0404 	orr.w	r4, sl, r4
 8021ca4:	fa1f f689 	uxth.w	r6, r9
 8021ca8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021cac:	fb11 f90e 	smulbb	r9, r1, lr
 8021cb0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021cb4:	9602      	str	r6, [sp, #8]
 8021cb6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021cba:	4626      	mov	r6, r4
 8021cbc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021cc0:	f1ce 0410 	rsb	r4, lr, #16
 8021cc4:	1a64      	subs	r4, r4, r1
 8021cc6:	ea4a 0202 	orr.w	r2, sl, r2
 8021cca:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021cce:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021cd2:	434a      	muls	r2, r1
 8021cd4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021cd8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021cdc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021ce0:	fb04 2406 	mla	r4, r4, r6, r2
 8021ce4:	ea4a 0000 	orr.w	r0, sl, r0
 8021ce8:	fb09 4200 	mla	r2, r9, r0, r4
 8021cec:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021cf0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021cf4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021cf8:	ea44 0b0b 	orr.w	fp, r4, fp
 8021cfc:	9c01      	ldr	r4, [sp, #4]
 8021cfe:	9e02      	ldr	r6, [sp, #8]
 8021d00:	9903      	ldr	r1, [sp, #12]
 8021d02:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8021d06:	1ba4      	subs	r4, r4, r6
 8021d08:	9e01      	ldr	r6, [sp, #4]
 8021d0a:	8808      	ldrh	r0, [r1, #0]
 8021d0c:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8021d10:	eba6 0608 	sub.w	r6, r6, r8
 8021d14:	b2b6      	uxth	r6, r6
 8021d16:	b2a4      	uxth	r4, r4
 8021d18:	4373      	muls	r3, r6
 8021d1a:	fb0c 3304 	mla	r3, ip, r4, r3
 8021d1e:	9c02      	ldr	r4, [sp, #8]
 8021d20:	fb04 3505 	mla	r5, r4, r5, r3
 8021d24:	fb08 5707 	mla	r7, r8, r7, r5
 8021d28:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021d2c:	b289      	uxth	r1, r1
 8021d2e:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021d32:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021d36:	434f      	muls	r7, r1
 8021d38:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021d3c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021d40:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d44:	1c7b      	adds	r3, r7, #1
 8021d46:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021d4a:	ea42 0e0e 	orr.w	lr, r2, lr
 8021d4e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021d52:	fa1f f28e 	uxth.w	r2, lr
 8021d56:	1203      	asrs	r3, r0, #8
 8021d58:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8021d5c:	b2ff      	uxtb	r7, r7
 8021d5e:	1215      	asrs	r5, r2, #8
 8021d60:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021d64:	fb13 f307 	smulbb	r3, r3, r7
 8021d68:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021d6c:	fb05 3501 	mla	r5, r5, r1, r3
 8021d70:	10c3      	asrs	r3, r0, #3
 8021d72:	10d4      	asrs	r4, r2, #3
 8021d74:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021d78:	fb13 f307 	smulbb	r3, r3, r7
 8021d7c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021d80:	fb04 3401 	mla	r4, r4, r1, r3
 8021d84:	00c3      	lsls	r3, r0, #3
 8021d86:	00d2      	lsls	r2, r2, #3
 8021d88:	b2db      	uxtb	r3, r3
 8021d8a:	fb13 f307 	smulbb	r3, r3, r7
 8021d8e:	b2d2      	uxtb	r2, r2
 8021d90:	fb02 3101 	mla	r1, r2, r1, r3
 8021d94:	b2ad      	uxth	r5, r5
 8021d96:	b289      	uxth	r1, r1
 8021d98:	b2a4      	uxth	r4, r4
 8021d9a:	1c6b      	adds	r3, r5, #1
 8021d9c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021da0:	1c62      	adds	r2, r4, #1
 8021da2:	1c4b      	adds	r3, r1, #1
 8021da4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021da8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8021dac:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021db0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021db4:	0964      	lsrs	r4, r4, #5
 8021db6:	432b      	orrs	r3, r5
 8021db8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021dbc:	9a03      	ldr	r2, [sp, #12]
 8021dbe:	4323      	orrs	r3, r4
 8021dc0:	8013      	strh	r3, [r2, #0]
 8021dc2:	b005      	add	sp, #20
 8021dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dc8:	f04f 0c00 	mov.w	ip, #0
 8021dcc:	4664      	mov	r4, ip
 8021dce:	e6d6      	b.n	8021b7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8021dd0:	2300      	movs	r3, #0
 8021dd2:	469c      	mov	ip, r3
 8021dd4:	461a      	mov	r2, r3
 8021dd6:	461c      	mov	r4, r3
 8021dd8:	e6f8      	b.n	8021bcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021dda:	2300      	movs	r3, #0
 8021ddc:	461a      	mov	r2, r3
 8021dde:	e6f5      	b.n	8021bcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021de0:	460b      	mov	r3, r1
 8021de2:	460a      	mov	r2, r1
 8021de4:	e6f2      	b.n	8021bcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021de6:	2500      	movs	r5, #0
 8021de8:	46ab      	mov	fp, r5
 8021dea:	e720      	b.n	8021c2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8021dec:	2700      	movs	r7, #0
 8021dee:	463d      	mov	r5, r7
 8021df0:	4638      	mov	r0, r7
 8021df2:	46bb      	mov	fp, r7
 8021df4:	e745      	b.n	8021c82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021df6:	4677      	mov	r7, lr
 8021df8:	4675      	mov	r5, lr
 8021dfa:	4670      	mov	r0, lr
 8021dfc:	46f3      	mov	fp, lr
 8021dfe:	e740      	b.n	8021c82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021e00:	2700      	movs	r7, #0
 8021e02:	4638      	mov	r0, r7
 8021e04:	e73d      	b.n	8021c82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021e06:	460f      	mov	r7, r1
 8021e08:	4608      	mov	r0, r1
 8021e0a:	e73a      	b.n	8021c82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08021e0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e10:	b097      	sub	sp, #92	; 0x5c
 8021e12:	9214      	str	r2, [sp, #80]	; 0x50
 8021e14:	9308      	str	r3, [sp, #32]
 8021e16:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021e18:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021e1c:	9312      	str	r3, [sp, #72]	; 0x48
 8021e1e:	9111      	str	r1, [sp, #68]	; 0x44
 8021e20:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021e24:	9015      	str	r0, [sp, #84]	; 0x54
 8021e26:	6850      	ldr	r0, [r2, #4]
 8021e28:	6812      	ldr	r2, [r2, #0]
 8021e2a:	fb00 1303 	mla	r3, r0, r3, r1
 8021e2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021e32:	9309      	str	r3, [sp, #36]	; 0x24
 8021e34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e36:	681b      	ldr	r3, [r3, #0]
 8021e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8021e3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e3c:	685b      	ldr	r3, [r3, #4]
 8021e3e:	930c      	str	r3, [sp, #48]	; 0x30
 8021e40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021e44:	930a      	str	r3, [sp, #40]	; 0x28
 8021e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	dc03      	bgt.n	8021e54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021e4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	f340 83cb 	ble.w	80225ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021e54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021e5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021e5e:	1e48      	subs	r0, r1, #1
 8021e60:	1e55      	subs	r5, r2, #1
 8021e62:	9b08      	ldr	r3, [sp, #32]
 8021e64:	2b00      	cmp	r3, #0
 8021e66:	f340 81a3 	ble.w	80221b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8021e6a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8021e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021e6e:	1436      	asrs	r6, r6, #16
 8021e70:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021e74:	d406      	bmi.n	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021e76:	4286      	cmp	r6, r0
 8021e78:	da04      	bge.n	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	db02      	blt.n	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021e7e:	42ab      	cmp	r3, r5
 8021e80:	f2c0 8197 	blt.w	80221b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021e84:	3601      	adds	r6, #1
 8021e86:	f100 8184 	bmi.w	8022192 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021e8a:	42b1      	cmp	r1, r6
 8021e8c:	f2c0 8181 	blt.w	8022192 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021e90:	3301      	adds	r3, #1
 8021e92:	f100 817e 	bmi.w	8022192 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021e96:	429a      	cmp	r2, r3
 8021e98:	f2c0 817b 	blt.w	8022192 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021e9c:	9b08      	ldr	r3, [sp, #32]
 8021e9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021ea0:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ea2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021ea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	f340 81a4 	ble.w	80221f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021eae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021eb0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021eb2:	1418      	asrs	r0, r3, #16
 8021eb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021eb6:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021eba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021ebc:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021ec0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ec2:	142d      	asrs	r5, r5, #16
 8021ec4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021ec8:	f100 81f8 	bmi.w	80222bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021ecc:	f102 3eff 	add.w	lr, r2, #4294967295
 8021ed0:	4575      	cmp	r5, lr
 8021ed2:	f280 81f3 	bge.w	80222bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021ed6:	2800      	cmp	r0, #0
 8021ed8:	f2c0 81f0 	blt.w	80222bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021edc:	f103 3eff 	add.w	lr, r3, #4294967295
 8021ee0:	4570      	cmp	r0, lr
 8021ee2:	f280 81eb 	bge.w	80222bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021ee8:	b212      	sxth	r2, r2
 8021eea:	fb00 5002 	mla	r0, r0, r2, r5
 8021eee:	fa1f fe81 	uxth.w	lr, r1
 8021ef2:	eb03 0a00 	add.w	sl, r3, r0
 8021ef6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021efa:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021efe:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021f02:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021f06:	b29b      	uxth	r3, r3
 8021f08:	f1bc 0f00 	cmp.w	ip, #0
 8021f0c:	f000 81b9 	beq.w	8022282 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8021f10:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021f14:	940d      	str	r4, [sp, #52]	; 0x34
 8021f16:	eb0a 0b02 	add.w	fp, sl, r2
 8021f1a:	fa1f fa8c 	uxth.w	sl, ip
 8021f1e:	fb0a fe0e 	mul.w	lr, sl, lr
 8021f22:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021f26:	fa1f fa8a 	uxth.w	sl, sl
 8021f2a:	eba5 050e 	sub.w	r5, r5, lr
 8021f2e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021f32:	940e      	str	r4, [sp, #56]	; 0x38
 8021f34:	eba3 030a 	sub.w	r3, r3, sl
 8021f38:	b2ad      	uxth	r5, r5
 8021f3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021f3c:	b29b      	uxth	r3, r3
 8021f3e:	fb08 f505 	mul.w	r5, r8, r5
 8021f42:	fb09 5303 	mla	r3, r9, r3, r5
 8021f46:	fb0a 3304 	mla	r3, sl, r4, r3
 8021f4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f4c:	fb0e 3304 	mla	r3, lr, r4, r3
 8021f50:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	f000 810f 	beq.w	8022178 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021f5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021f60:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021f64:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021f68:	f000 8190 	beq.w	802228c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021f6c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021f70:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021f74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021f78:	fb09 f000 	mul.w	r0, r9, r0
 8021f7c:	fb0a fe0e 	mul.w	lr, sl, lr
 8021f80:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021f84:	f100 0b20 	add.w	fp, r0, #32
 8021f88:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021f8c:	44ce      	add	lr, r9
 8021f8e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021f92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021f96:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021f9a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021f9e:	ea4e 0909 	orr.w	r9, lr, r9
 8021fa2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021fa6:	8868      	ldrh	r0, [r5, #2]
 8021fa8:	d019      	beq.n	8021fde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021faa:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021fae:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021fb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021fb6:	fb08 f800 	mul.w	r8, r8, r0
 8021fba:	fb0a fe0e 	mul.w	lr, sl, lr
 8021fbe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021fc2:	f108 0b20 	add.w	fp, r8, #32
 8021fc6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021fca:	4486      	add	lr, r0
 8021fcc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021fd0:	0a00      	lsrs	r0, r0, #8
 8021fd2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021fd6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021fda:	ea4e 0000 	orr.w	r0, lr, r0
 8021fde:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021fe2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021fe6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021fea:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021fee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021ff2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021ff6:	ea4e 0909 	orr.w	r9, lr, r9
 8021ffa:	ea4a 0000 	orr.w	r0, sl, r0
 8021ffe:	f1bc 0f00 	cmp.w	ip, #0
 8022002:	f000 8145 	beq.w	8022290 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8022006:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802200a:	3a01      	subs	r2, #1
 802200c:	0052      	lsls	r2, r2, #1
 802200e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022010:	3202      	adds	r2, #2
 8022012:	2cff      	cmp	r4, #255	; 0xff
 8022014:	eb05 0e02 	add.w	lr, r5, r2
 8022018:	5aaa      	ldrh	r2, [r5, r2]
 802201a:	d018      	beq.n	802204e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802201c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8022020:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022024:	fb04 fa02 	mul.w	sl, r4, r2
 8022028:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802202c:	fb08 f805 	mul.w	r8, r8, r5
 8022030:	f10a 0520 	add.w	r5, sl, #32
 8022034:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8022038:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802203c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022040:	4442      	add	r2, r8
 8022042:	0a2d      	lsrs	r5, r5, #8
 8022044:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8022048:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802204c:	432a      	orrs	r2, r5
 802204e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022050:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8022054:	2cff      	cmp	r4, #255	; 0xff
 8022056:	d01a      	beq.n	802208e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8022058:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802205c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022060:	fb04 fa05 	mul.w	sl, r4, r5
 8022064:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022068:	fb08 f80e 	mul.w	r8, r8, lr
 802206c:	f10a 0e20 	add.w	lr, sl, #32
 8022070:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8022074:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022078:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802207c:	4445      	add	r5, r8
 802207e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022082:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8022086:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802208a:	ea45 050e 	orr.w	r5, r5, lr
 802208e:	fb1c fe01 	smulbb	lr, ip, r1
 8022092:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8022096:	f1cc 0810 	rsb	r8, ip, #16
 802209a:	eba8 0801 	sub.w	r8, r8, r1
 802209e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80220a2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80220a6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80220aa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80220ae:	4341      	muls	r1, r0
 80220b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80220b4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80220b8:	ea4a 0202 	orr.w	r2, sl, r2
 80220bc:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80220c0:	fb09 1108 	mla	r1, r9, r8, r1
 80220c4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80220c8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80220cc:	fb0c 1102 	mla	r1, ip, r2, r1
 80220d0:	ea4b 0505 	orr.w	r5, fp, r5
 80220d4:	fb0e 1e05 	mla	lr, lr, r5, r1
 80220d8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80220dc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80220e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220e4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80220e8:	ea42 0e0e 	orr.w	lr, r2, lr
 80220ec:	fa1f f28e 	uxth.w	r2, lr
 80220f0:	2bff      	cmp	r3, #255	; 0xff
 80220f2:	d103      	bne.n	80220fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80220f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80220f6:	29ff      	cmp	r1, #255	; 0xff
 80220f8:	f000 80de 	beq.w	80222b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80220fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80220fe:	8838      	ldrh	r0, [r7, #0]
 8022100:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022102:	434b      	muls	r3, r1
 8022104:	f103 0c01 	add.w	ip, r3, #1
 8022108:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 802210c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8022110:	fa5f fc83 	uxtb.w	ip, r3
 8022114:	1203      	asrs	r3, r0, #8
 8022116:	1215      	asrs	r5, r2, #8
 8022118:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802211c:	fb13 f30c 	smulbb	r3, r3, ip
 8022120:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022124:	fb05 3501 	mla	r5, r5, r1, r3
 8022128:	10c3      	asrs	r3, r0, #3
 802212a:	10d1      	asrs	r1, r2, #3
 802212c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8022130:	fb13 f30c 	smulbb	r3, r3, ip
 8022134:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022138:	fb01 3104 	mla	r1, r1, r4, r3
 802213c:	00c3      	lsls	r3, r0, #3
 802213e:	00d2      	lsls	r2, r2, #3
 8022140:	b2db      	uxtb	r3, r3
 8022142:	b2d2      	uxtb	r2, r2
 8022144:	fb13 f30c 	smulbb	r3, r3, ip
 8022148:	b2ad      	uxth	r5, r5
 802214a:	fb02 3304 	mla	r3, r2, r4, r3
 802214e:	b29a      	uxth	r2, r3
 8022150:	1c6b      	adds	r3, r5, #1
 8022152:	b289      	uxth	r1, r1
 8022154:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022158:	1c53      	adds	r3, r2, #1
 802215a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802215e:	1c4a      	adds	r2, r1, #1
 8022160:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022164:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022168:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802216c:	0949      	lsrs	r1, r1, #5
 802216e:	432b      	orrs	r3, r5
 8022170:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022174:	430b      	orrs	r3, r1
 8022176:	803b      	strh	r3, [r7, #0]
 8022178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802217a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802217c:	4413      	add	r3, r2
 802217e:	9321      	str	r3, [sp, #132]	; 0x84
 8022180:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022182:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022184:	441a      	add	r2, r3
 8022186:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022188:	9222      	str	r2, [sp, #136]	; 0x88
 802218a:	3b01      	subs	r3, #1
 802218c:	3702      	adds	r7, #2
 802218e:	9313      	str	r3, [sp, #76]	; 0x4c
 8022190:	e689      	b.n	8021ea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022194:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8022196:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8022198:	4433      	add	r3, r6
 802219a:	9321      	str	r3, [sp, #132]	; 0x84
 802219c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802219e:	441c      	add	r4, r3
 80221a0:	9b08      	ldr	r3, [sp, #32]
 80221a2:	9422      	str	r4, [sp, #136]	; 0x88
 80221a4:	3b01      	subs	r3, #1
 80221a6:	9308      	str	r3, [sp, #32]
 80221a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221aa:	3302      	adds	r3, #2
 80221ac:	9309      	str	r3, [sp, #36]	; 0x24
 80221ae:	e658      	b.n	8021e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80221b0:	d028      	beq.n	8022204 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80221b2:	9b08      	ldr	r3, [sp, #32]
 80221b4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80221b6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80221b8:	3b01      	subs	r3, #1
 80221ba:	fb00 5003 	mla	r0, r0, r3, r5
 80221be:	1400      	asrs	r0, r0, #16
 80221c0:	f53f ae6c 	bmi.w	8021e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80221c4:	3901      	subs	r1, #1
 80221c6:	4288      	cmp	r0, r1
 80221c8:	f6bf ae68 	bge.w	8021e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80221cc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80221ce:	9822      	ldr	r0, [sp, #136]	; 0x88
 80221d0:	fb01 0303 	mla	r3, r1, r3, r0
 80221d4:	141b      	asrs	r3, r3, #16
 80221d6:	f53f ae61 	bmi.w	8021e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80221da:	3a01      	subs	r2, #1
 80221dc:	4293      	cmp	r3, r2
 80221de:	f6bf ae5d 	bge.w	8021e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80221e2:	9b08      	ldr	r3, [sp, #32]
 80221e4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80221e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80221ea:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80221ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	f300 8082 	bgt.w	80222fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 80221f6:	9b08      	ldr	r3, [sp, #32]
 80221f8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80221fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221fe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022202:	9309      	str	r3, [sp, #36]	; 0x24
 8022204:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022206:	2b00      	cmp	r3, #0
 8022208:	f340 81ef 	ble.w	80225ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 802220c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022214:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022218:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802221a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802221e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022222:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022226:	eef0 6a62 	vmov.f32	s13, s5
 802222a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802222e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022232:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022236:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 802223a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802223e:	eef0 6a43 	vmov.f32	s13, s6
 8022242:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022246:	ee12 2a90 	vmov	r2, s5
 802224a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802224e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022252:	ee13 2a10 	vmov	r2, s6
 8022256:	9323      	str	r3, [sp, #140]	; 0x8c
 8022258:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802225a:	fb92 f3f3 	sdiv	r3, r2, r3
 802225e:	9324      	str	r3, [sp, #144]	; 0x90
 8022260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022262:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022264:	3b01      	subs	r3, #1
 8022266:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802226a:	9311      	str	r3, [sp, #68]	; 0x44
 802226c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802226e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8022272:	bf08      	it	eq
 8022274:	4613      	moveq	r3, r2
 8022276:	9308      	str	r3, [sp, #32]
 8022278:	eeb0 3a67 	vmov.f32	s6, s15
 802227c:	eef0 2a47 	vmov.f32	s5, s14
 8022280:	e5e1      	b.n	8021e46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022282:	fb08 f505 	mul.w	r5, r8, r5
 8022286:	fb09 5303 	mla	r3, r9, r3, r5
 802228a:	e661      	b.n	8021f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802228c:	4681      	mov	r9, r0
 802228e:	e688      	b.n	8021fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022290:	f1c1 0210 	rsb	r2, r1, #16
 8022294:	4341      	muls	r1, r0
 8022296:	fb09 1902 	mla	r9, r9, r2, r1
 802229a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802229e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80222a2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80222a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80222aa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80222ae:	ea42 0909 	orr.w	r9, r2, r9
 80222b2:	fa1f f289 	uxth.w	r2, r9
 80222b6:	e71b      	b.n	80220f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80222b8:	803a      	strh	r2, [r7, #0]
 80222ba:	e75d      	b.n	8022178 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80222bc:	f115 0e01 	adds.w	lr, r5, #1
 80222c0:	f53f af5a 	bmi.w	8022178 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80222c4:	4572      	cmp	r2, lr
 80222c6:	f6ff af57 	blt.w	8022178 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80222ca:	f110 0e01 	adds.w	lr, r0, #1
 80222ce:	f53f af53 	bmi.w	8022178 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80222d2:	4573      	cmp	r3, lr
 80222d4:	f6ff af50 	blt.w	8022178 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80222d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80222da:	9502      	str	r5, [sp, #8]
 80222dc:	b21b      	sxth	r3, r3
 80222de:	b212      	sxth	r2, r2
 80222e0:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80222e4:	9301      	str	r3, [sp, #4]
 80222e6:	9200      	str	r2, [sp, #0]
 80222e8:	e9cd c405 	strd	ip, r4, [sp, #20]
 80222ec:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80222f0:	4639      	mov	r1, r7
 80222f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80222f4:	f7ff fc04 	bl	8021b00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80222f8:	e73e      	b.n	8022178 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80222fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80222fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022300:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022302:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022306:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022308:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802230c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802230e:	141f      	asrs	r7, r3, #16
 8022310:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022312:	141b      	asrs	r3, r3, #16
 8022314:	fb01 3707 	mla	r7, r1, r7, r3
 8022318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802231a:	fa1f fc82 	uxth.w	ip, r2
 802231e:	eb03 0a07 	add.w	sl, r3, r7
 8022322:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022326:	f813 9007 	ldrb.w	r9, [r3, r7]
 802232a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802232e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022332:	b29b      	uxth	r3, r3
 8022334:	2d00      	cmp	r5, #0
 8022336:	f000 813d 	beq.w	80225b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802233a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802233e:	940f      	str	r4, [sp, #60]	; 0x3c
 8022340:	eb0a 0b01 	add.w	fp, sl, r1
 8022344:	fa1f fa85 	uxth.w	sl, r5
 8022348:	fb0a fc0c 	mul.w	ip, sl, ip
 802234c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022350:	fa1f fa8a 	uxth.w	sl, sl
 8022354:	eba0 000c 	sub.w	r0, r0, ip
 8022358:	eba3 030a 	sub.w	r3, r3, sl
 802235c:	b280      	uxth	r0, r0
 802235e:	fb08 f000 	mul.w	r0, r8, r0
 8022362:	b29b      	uxth	r3, r3
 8022364:	fb09 0303 	mla	r3, r9, r3, r0
 8022368:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802236a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802236e:	9410      	str	r4, [sp, #64]	; 0x40
 8022370:	fb0a 3300 	mla	r3, sl, r0, r3
 8022374:	fb0c 3304 	mla	r3, ip, r4, r3
 8022378:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802237c:	2b00      	cmp	r3, #0
 802237e:	f000 810b 	beq.w	8022598 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8022382:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022384:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022386:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802238a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802238e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022392:	f000 8114 	beq.w	80225be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8022396:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802239a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802239e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80223a2:	fb09 f707 	mul.w	r7, r9, r7
 80223a6:	fb0a fc0c 	mul.w	ip, sl, ip
 80223aa:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80223ae:	f107 0b20 	add.w	fp, r7, #32
 80223b2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80223b6:	44cc      	add	ip, r9
 80223b8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80223bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80223c0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80223c4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80223c8:	ea4c 0909 	orr.w	r9, ip, r9
 80223cc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80223d0:	8847      	ldrh	r7, [r0, #2]
 80223d2:	d019      	beq.n	8022408 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 80223d4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80223d8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80223dc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80223e0:	fb08 f807 	mul.w	r8, r8, r7
 80223e4:	fb0a fc0c 	mul.w	ip, sl, ip
 80223e8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80223ec:	f108 0b20 	add.w	fp, r8, #32
 80223f0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80223f4:	44bc      	add	ip, r7
 80223f6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80223fa:	0a3f      	lsrs	r7, r7, #8
 80223fc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022400:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022404:	ea4c 0707 	orr.w	r7, ip, r7
 8022408:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802240c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022410:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022414:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022418:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802241c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022420:	ea4c 0909 	orr.w	r9, ip, r9
 8022424:	ea4a 0707 	orr.w	r7, sl, r7
 8022428:	2d00      	cmp	r5, #0
 802242a:	f000 80ca 	beq.w	80225c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802242e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022432:	3901      	subs	r1, #1
 8022434:	0049      	lsls	r1, r1, #1
 8022436:	3102      	adds	r1, #2
 8022438:	eb00 0c01 	add.w	ip, r0, r1
 802243c:	5a41      	ldrh	r1, [r0, r1]
 802243e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022440:	28ff      	cmp	r0, #255	; 0xff
 8022442:	d019      	beq.n	8022478 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8022444:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022446:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802244a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802244e:	fb04 fa01 	mul.w	sl, r4, r1
 8022452:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022456:	fb08 f800 	mul.w	r8, r8, r0
 802245a:	f10a 0020 	add.w	r0, sl, #32
 802245e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022462:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022466:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802246a:	4441      	add	r1, r8
 802246c:	0a00      	lsrs	r0, r0, #8
 802246e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022472:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022476:	4301      	orrs	r1, r0
 8022478:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802247a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802247e:	2cff      	cmp	r4, #255	; 0xff
 8022480:	d01a      	beq.n	80224b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8022482:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022486:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802248a:	fb04 fa00 	mul.w	sl, r4, r0
 802248e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022492:	fb08 f80c 	mul.w	r8, r8, ip
 8022496:	f10a 0c20 	add.w	ip, sl, #32
 802249a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802249e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80224a2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80224a6:	4440      	add	r0, r8
 80224a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80224ac:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80224b0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80224b4:	ea40 000c 	orr.w	r0, r0, ip
 80224b8:	fb15 fc02 	smulbb	ip, r5, r2
 80224bc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80224c0:	f1c5 0810 	rsb	r8, r5, #16
 80224c4:	eba8 0802 	sub.w	r8, r8, r2
 80224c8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80224cc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80224d0:	437a      	muls	r2, r7
 80224d2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80224d6:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80224da:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80224de:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80224e2:	fb09 2208 	mla	r2, r9, r8, r2
 80224e6:	ea4a 0101 	orr.w	r1, sl, r1
 80224ea:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80224ee:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80224f2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80224f6:	fb05 2201 	mla	r2, r5, r1, r2
 80224fa:	ea4b 0000 	orr.w	r0, fp, r0
 80224fe:	fb0c 2200 	mla	r2, ip, r0, r2
 8022502:	0d57      	lsrs	r7, r2, #21
 8022504:	0952      	lsrs	r2, r2, #5
 8022506:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802250a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802250e:	433a      	orrs	r2, r7
 8022510:	2bff      	cmp	r3, #255	; 0xff
 8022512:	b292      	uxth	r2, r2
 8022514:	d102      	bne.n	802251c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022516:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022518:	29ff      	cmp	r1, #255	; 0xff
 802251a:	d063      	beq.n	80225e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 802251c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802251e:	f8be 1000 	ldrh.w	r1, [lr]
 8022522:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022524:	4343      	muls	r3, r0
 8022526:	1c58      	adds	r0, r3, #1
 8022528:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802252c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8022530:	1208      	asrs	r0, r1, #8
 8022532:	b2db      	uxtb	r3, r3
 8022534:	1215      	asrs	r5, r2, #8
 8022536:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802253a:	fb10 f003 	smulbb	r0, r0, r3
 802253e:	10cf      	asrs	r7, r1, #3
 8022540:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022544:	00c9      	lsls	r1, r1, #3
 8022546:	fb05 0504 	mla	r5, r5, r4, r0
 802254a:	b2c9      	uxtb	r1, r1
 802254c:	10d0      	asrs	r0, r2, #3
 802254e:	00d2      	lsls	r2, r2, #3
 8022550:	fb11 f103 	smulbb	r1, r1, r3
 8022554:	b2d2      	uxtb	r2, r2
 8022556:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802255a:	fb02 1204 	mla	r2, r2, r4, r1
 802255e:	fb17 f703 	smulbb	r7, r7, r3
 8022562:	b2ad      	uxth	r5, r5
 8022564:	b292      	uxth	r2, r2
 8022566:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802256a:	fb00 7004 	mla	r0, r0, r4, r7
 802256e:	1c6b      	adds	r3, r5, #1
 8022570:	1c57      	adds	r7, r2, #1
 8022572:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022576:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802257a:	b280      	uxth	r0, r0
 802257c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022580:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022584:	433d      	orrs	r5, r7
 8022586:	1c47      	adds	r7, r0, #1
 8022588:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802258c:	097f      	lsrs	r7, r7, #5
 802258e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022592:	433d      	orrs	r5, r7
 8022594:	f8ae 5000 	strh.w	r5, [lr]
 8022598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802259a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802259c:	4413      	add	r3, r2
 802259e:	9321      	str	r3, [sp, #132]	; 0x84
 80225a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80225a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80225a4:	441a      	add	r2, r3
 80225a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80225a8:	9222      	str	r2, [sp, #136]	; 0x88
 80225aa:	3b01      	subs	r3, #1
 80225ac:	f10e 0e02 	add.w	lr, lr, #2
 80225b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80225b2:	e61c      	b.n	80221ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80225b4:	fb08 f000 	mul.w	r0, r8, r0
 80225b8:	fb09 0303 	mla	r3, r9, r3, r0
 80225bc:	e6dc      	b.n	8022378 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 80225be:	46b9      	mov	r9, r7
 80225c0:	e704      	b.n	80223cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 80225c2:	f1c2 0110 	rsb	r1, r2, #16
 80225c6:	437a      	muls	r2, r7
 80225c8:	fb09 2901 	mla	r9, r9, r1, r2
 80225cc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80225d0:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80225d4:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80225d8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80225dc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80225e0:	4302      	orrs	r2, r0
 80225e2:	e795      	b.n	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80225e4:	f8ae 2000 	strh.w	r2, [lr]
 80225e8:	e7d6      	b.n	8022598 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80225ea:	b017      	add	sp, #92	; 0x5c
 80225ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080225f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80225f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225f4:	b085      	sub	sp, #20
 80225f6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80225fa:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80225fe:	9103      	str	r1, [sp, #12]
 8022600:	fb00 7406 	mla	r4, r0, r6, r7
 8022604:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8022608:	2800      	cmp	r0, #0
 802260a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802260e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8022612:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8022616:	9501      	str	r5, [sp, #4]
 8022618:	eb02 0904 	add.w	r9, r2, r4
 802261c:	f2c0 8141 	blt.w	80228a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022620:	4583      	cmp	fp, r0
 8022622:	f340 813e 	ble.w	80228a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022626:	2f00      	cmp	r7, #0
 8022628:	f2c0 8137 	blt.w	802289a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802262c:	42be      	cmp	r6, r7
 802262e:	f340 8134 	ble.w	802289a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8022632:	f812 c004 	ldrb.w	ip, [r2, r4]
 8022636:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 802263a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802263e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8022642:	4355      	muls	r5, r2
 8022644:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022648:	f64f 041f 	movw	r4, #63519	; 0xf81f
 802264c:	fb0c f203 	mul.w	r2, ip, r3
 8022650:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8022654:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8022658:	441d      	add	r5, r3
 802265a:	f102 0320 	add.w	r3, r2, #32
 802265e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022662:	0a1b      	lsrs	r3, r3, #8
 8022664:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8022668:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802266c:	431c      	orrs	r4, r3
 802266e:	1c7b      	adds	r3, r7, #1
 8022670:	f100 811c 	bmi.w	80228ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022674:	429e      	cmp	r6, r3
 8022676:	f340 8119 	ble.w	80228ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802267a:	2900      	cmp	r1, #0
 802267c:	f000 8119 	beq.w	80228b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8022680:	9a01      	ldr	r2, [sp, #4]
 8022682:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022686:	8855      	ldrh	r5, [r2, #2]
 8022688:	ea4f 08e3 	mov.w	r8, r3, asr #3
 802268c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8022690:	fb08 f802 	mul.w	r8, r8, r2
 8022694:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022698:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802269c:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80226a0:	435d      	muls	r5, r3
 80226a2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80226a6:	44d0      	add	r8, sl
 80226a8:	f105 0a20 	add.w	sl, r5, #32
 80226ac:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80226b0:	0a2d      	lsrs	r5, r5, #8
 80226b2:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80226b6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80226ba:	432a      	orrs	r2, r5
 80226bc:	3001      	adds	r0, #1
 80226be:	f100 80fe 	bmi.w	80228be <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80226c2:	4583      	cmp	fp, r0
 80226c4:	f340 80fb 	ble.w	80228be <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80226c8:	f1be 0f00 	cmp.w	lr, #0
 80226cc:	f000 80fc 	beq.w	80228c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80226d0:	2f00      	cmp	r7, #0
 80226d2:	f2c0 80f1 	blt.w	80228b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80226d6:	42be      	cmp	r6, r7
 80226d8:	f340 80ee 	ble.w	80228b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80226dc:	9801      	ldr	r0, [sp, #4]
 80226de:	f819 5006 	ldrb.w	r5, [r9, r6]
 80226e2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80226e6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80226ea:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80226ee:	fb0a fa00 	mul.w	sl, sl, r0
 80226f2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80226f6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80226fa:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80226fe:	fb05 f808 	mul.w	r8, r5, r8
 8022702:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8022706:	4482      	add	sl, r0
 8022708:	f108 0020 	add.w	r0, r8, #32
 802270c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022710:	0a00      	lsrs	r0, r0, #8
 8022712:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8022716:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802271a:	ea4b 0b00 	orr.w	fp, fp, r0
 802271e:	3701      	adds	r7, #1
 8022720:	f100 80d7 	bmi.w	80228d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022724:	42be      	cmp	r6, r7
 8022726:	f340 80d4 	ble.w	80228d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802272a:	2900      	cmp	r1, #0
 802272c:	f000 80d4 	beq.w	80228d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8022730:	3601      	adds	r6, #1
 8022732:	9801      	ldr	r0, [sp, #4]
 8022734:	f819 7006 	ldrb.w	r7, [r9, r6]
 8022738:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802273c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8022740:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8022744:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022748:	fb09 f906 	mul.w	r9, r9, r6
 802274c:	fb07 f800 	mul.w	r8, r7, r0
 8022750:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8022754:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8022758:	f609 0901 	addw	r9, r9, #2049	; 0x801
 802275c:	44d1      	add	r9, sl
 802275e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8022762:	f108 0020 	add.w	r0, r8, #32
 8022766:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802276a:	0a00      	lsrs	r0, r0, #8
 802276c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022770:	4330      	orrs	r0, r6
 8022772:	b28e      	uxth	r6, r1
 8022774:	fa1f f98e 	uxth.w	r9, lr
 8022778:	fb06 f809 	mul.w	r8, r6, r9
 802277c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8022780:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8022784:	0136      	lsls	r6, r6, #4
 8022786:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802278a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802278e:	9601      	str	r6, [sp, #4]
 8022790:	ea4a 0404 	orr.w	r4, sl, r4
 8022794:	fa1f f689 	uxth.w	r6, r9
 8022798:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802279c:	fb11 f90e 	smulbb	r9, r1, lr
 80227a0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80227a4:	9602      	str	r6, [sp, #8]
 80227a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80227aa:	4626      	mov	r6, r4
 80227ac:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80227b0:	f1ce 0410 	rsb	r4, lr, #16
 80227b4:	1a64      	subs	r4, r4, r1
 80227b6:	ea4a 0202 	orr.w	r2, sl, r2
 80227ba:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80227be:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80227c2:	434a      	muls	r2, r1
 80227c4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80227c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80227cc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80227d0:	fb04 2406 	mla	r4, r4, r6, r2
 80227d4:	ea4a 0000 	orr.w	r0, sl, r0
 80227d8:	fb09 4200 	mla	r2, r9, r0, r4
 80227dc:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80227e0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80227e4:	9801      	ldr	r0, [sp, #4]
 80227e6:	9903      	ldr	r1, [sp, #12]
 80227e8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80227ec:	ea44 0b0b 	orr.w	fp, r4, fp
 80227f0:	9c02      	ldr	r4, [sp, #8]
 80227f2:	8809      	ldrh	r1, [r1, #0]
 80227f4:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80227f8:	1b00      	subs	r0, r0, r4
 80227fa:	9c01      	ldr	r4, [sp, #4]
 80227fc:	eba4 0608 	sub.w	r6, r4, r8
 8022800:	b2b6      	uxth	r6, r6
 8022802:	b280      	uxth	r0, r0
 8022804:	4373      	muls	r3, r6
 8022806:	fb0c 3300 	mla	r3, ip, r0, r3
 802280a:	9802      	ldr	r0, [sp, #8]
 802280c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8022810:	fb00 3505 	mla	r5, r0, r5, r3
 8022814:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8022818:	fb08 5707 	mla	r7, r8, r7, r5
 802281c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022820:	120b      	asrs	r3, r1, #8
 8022822:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022826:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802282a:	b2ff      	uxtb	r7, r7
 802282c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022830:	10c8      	asrs	r0, r1, #3
 8022832:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022836:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802283a:	00c9      	lsls	r1, r1, #3
 802283c:	437b      	muls	r3, r7
 802283e:	ea42 0e0e 	orr.w	lr, r2, lr
 8022842:	b2c9      	uxtb	r1, r1
 8022844:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022848:	fa1f f28e 	uxth.w	r2, lr
 802284c:	4378      	muls	r0, r7
 802284e:	434f      	muls	r7, r1
 8022850:	1c59      	adds	r1, r3, #1
 8022852:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022856:	1213      	asrs	r3, r2, #8
 8022858:	f023 0307 	bic.w	r3, r3, #7
 802285c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022860:	1c41      	adds	r1, r0, #1
 8022862:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022866:	10d1      	asrs	r1, r2, #3
 8022868:	f021 0103 	bic.w	r1, r1, #3
 802286c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022870:	021b      	lsls	r3, r3, #8
 8022872:	00c9      	lsls	r1, r1, #3
 8022874:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022878:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802287c:	430b      	orrs	r3, r1
 802287e:	1c79      	adds	r1, r7, #1
 8022880:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022884:	00d2      	lsls	r2, r2, #3
 8022886:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802288a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802288e:	431a      	orrs	r2, r3
 8022890:	9b03      	ldr	r3, [sp, #12]
 8022892:	801a      	strh	r2, [r3, #0]
 8022894:	b005      	add	sp, #20
 8022896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802289a:	f04f 0c00 	mov.w	ip, #0
 802289e:	4664      	mov	r4, ip
 80228a0:	e6e5      	b.n	802266e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80228a2:	2300      	movs	r3, #0
 80228a4:	469c      	mov	ip, r3
 80228a6:	461a      	mov	r2, r3
 80228a8:	461c      	mov	r4, r3
 80228aa:	e707      	b.n	80226bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80228ac:	2300      	movs	r3, #0
 80228ae:	461a      	mov	r2, r3
 80228b0:	e704      	b.n	80226bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80228b2:	460b      	mov	r3, r1
 80228b4:	460a      	mov	r2, r1
 80228b6:	e701      	b.n	80226bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80228b8:	2500      	movs	r5, #0
 80228ba:	46ab      	mov	fp, r5
 80228bc:	e72f      	b.n	802271e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80228be:	2700      	movs	r7, #0
 80228c0:	463d      	mov	r5, r7
 80228c2:	4638      	mov	r0, r7
 80228c4:	46bb      	mov	fp, r7
 80228c6:	e754      	b.n	8022772 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80228c8:	4677      	mov	r7, lr
 80228ca:	4675      	mov	r5, lr
 80228cc:	4670      	mov	r0, lr
 80228ce:	46f3      	mov	fp, lr
 80228d0:	e74f      	b.n	8022772 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80228d2:	2700      	movs	r7, #0
 80228d4:	4638      	mov	r0, r7
 80228d6:	e74c      	b.n	8022772 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80228d8:	460f      	mov	r7, r1
 80228da:	4608      	mov	r0, r1
 80228dc:	e749      	b.n	8022772 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080228e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80228e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228e4:	b093      	sub	sp, #76	; 0x4c
 80228e6:	9210      	str	r2, [sp, #64]	; 0x40
 80228e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80228ea:	910e      	str	r1, [sp, #56]	; 0x38
 80228ec:	9306      	str	r3, [sp, #24]
 80228ee:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80228f2:	9011      	str	r0, [sp, #68]	; 0x44
 80228f4:	6850      	ldr	r0, [r2, #4]
 80228f6:	6812      	ldr	r2, [r2, #0]
 80228f8:	fb00 1303 	mla	r3, r0, r3, r1
 80228fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022900:	9307      	str	r3, [sp, #28]
 8022902:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022904:	681b      	ldr	r3, [r3, #0]
 8022906:	9308      	str	r3, [sp, #32]
 8022908:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802290a:	685b      	ldr	r3, [r3, #4]
 802290c:	9309      	str	r3, [sp, #36]	; 0x24
 802290e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022910:	2b00      	cmp	r3, #0
 8022912:	dc03      	bgt.n	802291c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022916:	2b00      	cmp	r3, #0
 8022918:	f340 83b4 	ble.w	8023084 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 802291c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802291e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022922:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022926:	1e48      	subs	r0, r1, #1
 8022928:	1e55      	subs	r5, r2, #1
 802292a:	9b06      	ldr	r3, [sp, #24]
 802292c:	2b00      	cmp	r3, #0
 802292e:	f340 8163 	ble.w	8022bf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022932:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8022934:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022936:	1436      	asrs	r6, r6, #16
 8022938:	ea4f 4323 	mov.w	r3, r3, asr #16
 802293c:	d406      	bmi.n	802294c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802293e:	4286      	cmp	r6, r0
 8022940:	da04      	bge.n	802294c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022942:	2b00      	cmp	r3, #0
 8022944:	db02      	blt.n	802294c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022946:	42ab      	cmp	r3, r5
 8022948:	f2c0 8157 	blt.w	8022bfa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802294c:	3601      	adds	r6, #1
 802294e:	f100 8144 	bmi.w	8022bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022952:	42b1      	cmp	r1, r6
 8022954:	f2c0 8141 	blt.w	8022bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022958:	3301      	adds	r3, #1
 802295a:	f100 813e 	bmi.w	8022bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802295e:	429a      	cmp	r2, r3
 8022960:	f2c0 813b 	blt.w	8022bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022964:	9b06      	ldr	r3, [sp, #24]
 8022966:	9f07      	ldr	r7, [sp, #28]
 8022968:	930f      	str	r3, [sp, #60]	; 0x3c
 802296a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802296e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022970:	2b00      	cmp	r3, #0
 8022972:	f340 8164 	ble.w	8022c3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8022976:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022978:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802297a:	1418      	asrs	r0, r3, #16
 802297c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802297e:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022982:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022984:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802298a:	142d      	asrs	r5, r5, #16
 802298c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8022990:	f100 81ee 	bmi.w	8022d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022994:	f102 3eff 	add.w	lr, r2, #4294967295
 8022998:	4575      	cmp	r5, lr
 802299a:	f280 81e9 	bge.w	8022d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802299e:	2800      	cmp	r0, #0
 80229a0:	f2c0 81e6 	blt.w	8022d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80229a4:	f103 3eff 	add.w	lr, r3, #4294967295
 80229a8:	4570      	cmp	r0, lr
 80229aa:	f280 81e1 	bge.w	8022d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80229ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229b0:	b212      	sxth	r2, r2
 80229b2:	fb00 5002 	mla	r0, r0, r2, r5
 80229b6:	fa1f fe81 	uxth.w	lr, r1
 80229ba:	eb03 0a00 	add.w	sl, r3, r0
 80229be:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80229c2:	f813 9000 	ldrb.w	r9, [r3, r0]
 80229c6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80229ca:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80229ce:	b29b      	uxth	r3, r3
 80229d0:	f1bc 0f00 	cmp.w	ip, #0
 80229d4:	f000 8179 	beq.w	8022cca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80229d8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80229dc:	940a      	str	r4, [sp, #40]	; 0x28
 80229de:	eb0a 0b02 	add.w	fp, sl, r2
 80229e2:	fa1f fa8c 	uxth.w	sl, ip
 80229e6:	fb0a fe0e 	mul.w	lr, sl, lr
 80229ea:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80229ee:	fa1f fa8a 	uxth.w	sl, sl
 80229f2:	eba5 050e 	sub.w	r5, r5, lr
 80229f6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80229fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80229fc:	eba3 030a 	sub.w	r3, r3, sl
 8022a00:	b2ad      	uxth	r5, r5
 8022a02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022a04:	b29b      	uxth	r3, r3
 8022a06:	fb08 f505 	mul.w	r5, r8, r5
 8022a0a:	fb09 5303 	mla	r3, r9, r3, r5
 8022a0e:	fb0a 3304 	mla	r3, sl, r4, r3
 8022a12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022a14:	fb0e 3304 	mla	r3, lr, r4, r3
 8022a18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	f000 80cf 	beq.w	8022bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022a22:	9c08      	ldr	r4, [sp, #32]
 8022a24:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022a28:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8022a2c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8022a30:	f000 8150 	beq.w	8022cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022a34:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022a38:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022a3c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022a40:	fb09 f000 	mul.w	r0, r9, r0
 8022a44:	fb0a fe0e 	mul.w	lr, sl, lr
 8022a48:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8022a4c:	f100 0b20 	add.w	fp, r0, #32
 8022a50:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022a54:	44ce      	add	lr, r9
 8022a56:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8022a5a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022a5e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022a62:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022a66:	ea4e 0909 	orr.w	r9, lr, r9
 8022a6a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022a6e:	8868      	ldrh	r0, [r5, #2]
 8022a70:	d019      	beq.n	8022aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022a72:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022a76:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022a7a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022a7e:	fb08 f800 	mul.w	r8, r8, r0
 8022a82:	fb0a fe0e 	mul.w	lr, sl, lr
 8022a86:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8022a8a:	f108 0b20 	add.w	fp, r8, #32
 8022a8e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022a92:	4486      	add	lr, r0
 8022a94:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8022a98:	0a00      	lsrs	r0, r0, #8
 8022a9a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022a9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022aa2:	ea4e 0000 	orr.w	r0, lr, r0
 8022aa6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8022aaa:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8022aae:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022ab2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022ab6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022aba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022abe:	ea4e 0909 	orr.w	r9, lr, r9
 8022ac2:	ea4a 0000 	orr.w	r0, sl, r0
 8022ac6:	f1bc 0f00 	cmp.w	ip, #0
 8022aca:	f000 8105 	beq.w	8022cd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8022ace:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8022ad2:	3a01      	subs	r2, #1
 8022ad4:	0052      	lsls	r2, r2, #1
 8022ad6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022ad8:	3202      	adds	r2, #2
 8022ada:	2cff      	cmp	r4, #255	; 0xff
 8022adc:	eb05 0e02 	add.w	lr, r5, r2
 8022ae0:	5aaa      	ldrh	r2, [r5, r2]
 8022ae2:	d018      	beq.n	8022b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022ae4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8022ae8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022aec:	fb04 fa02 	mul.w	sl, r4, r2
 8022af0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022af4:	fb08 f805 	mul.w	r8, r8, r5
 8022af8:	f10a 0520 	add.w	r5, sl, #32
 8022afc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8022b00:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8022b04:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022b08:	4442      	add	r2, r8
 8022b0a:	0a2d      	lsrs	r5, r5, #8
 8022b0c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8022b10:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022b14:	432a      	orrs	r2, r5
 8022b16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022b18:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8022b1c:	2cff      	cmp	r4, #255	; 0xff
 8022b1e:	d01a      	beq.n	8022b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022b20:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022b24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022b28:	fb04 fa05 	mul.w	sl, r4, r5
 8022b2c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022b30:	fb08 f80e 	mul.w	r8, r8, lr
 8022b34:	f10a 0e20 	add.w	lr, sl, #32
 8022b38:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8022b3c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022b40:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022b44:	4445      	add	r5, r8
 8022b46:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b4a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8022b4e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022b52:	ea45 050e 	orr.w	r5, r5, lr
 8022b56:	fb1c fe01 	smulbb	lr, ip, r1
 8022b5a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8022b5e:	f1cc 0810 	rsb	r8, ip, #16
 8022b62:	eba8 0801 	sub.w	r8, r8, r1
 8022b66:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022b6a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8022b6e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8022b72:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022b76:	4341      	muls	r1, r0
 8022b78:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022b7c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022b80:	ea4a 0202 	orr.w	r2, sl, r2
 8022b84:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022b88:	fb09 1108 	mla	r1, r9, r8, r1
 8022b8c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022b90:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022b94:	fb0c 1102 	mla	r1, ip, r2, r1
 8022b98:	ea4b 0505 	orr.w	r5, fp, r5
 8022b9c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8022ba0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022ba4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022ba8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022bac:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022bb0:	ea42 0e0e 	orr.w	lr, r2, lr
 8022bb4:	fa1f f28e 	uxth.w	r2, lr
 8022bb8:	2bff      	cmp	r3, #255	; 0xff
 8022bba:	f040 80a1 	bne.w	8022d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8022bbe:	803a      	strh	r2, [r7, #0]
 8022bc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022bc2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022bc4:	4413      	add	r3, r2
 8022bc6:	931d      	str	r3, [sp, #116]	; 0x74
 8022bc8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022bca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022bcc:	441a      	add	r2, r3
 8022bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022bd0:	921e      	str	r2, [sp, #120]	; 0x78
 8022bd2:	3b01      	subs	r3, #1
 8022bd4:	3702      	adds	r7, #2
 8022bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8022bd8:	e6c9      	b.n	802296e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022bda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022bdc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8022bde:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8022be0:	4433      	add	r3, r6
 8022be2:	931d      	str	r3, [sp, #116]	; 0x74
 8022be4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022be6:	441c      	add	r4, r3
 8022be8:	9b06      	ldr	r3, [sp, #24]
 8022bea:	941e      	str	r4, [sp, #120]	; 0x78
 8022bec:	3b01      	subs	r3, #1
 8022bee:	9306      	str	r3, [sp, #24]
 8022bf0:	9b07      	ldr	r3, [sp, #28]
 8022bf2:	3302      	adds	r3, #2
 8022bf4:	9307      	str	r3, [sp, #28]
 8022bf6:	e698      	b.n	802292a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022bf8:	d028      	beq.n	8022c4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022bfa:	9b06      	ldr	r3, [sp, #24]
 8022bfc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022bfe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022c00:	3b01      	subs	r3, #1
 8022c02:	fb00 5003 	mla	r0, r0, r3, r5
 8022c06:	1400      	asrs	r0, r0, #16
 8022c08:	f53f aeac 	bmi.w	8022964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022c0c:	3901      	subs	r1, #1
 8022c0e:	4288      	cmp	r0, r1
 8022c10:	f6bf aea8 	bge.w	8022964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022c14:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022c16:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022c18:	fb01 0303 	mla	r3, r1, r3, r0
 8022c1c:	141b      	asrs	r3, r3, #16
 8022c1e:	f53f aea1 	bmi.w	8022964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022c22:	3a01      	subs	r2, #1
 8022c24:	4293      	cmp	r3, r2
 8022c26:	f6bf ae9d 	bge.w	8022964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022c2a:	9b06      	ldr	r3, [sp, #24]
 8022c2c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022c30:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c32:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c38:	2b00      	cmp	r3, #0
 8022c3a:	f300 80b6 	bgt.w	8022daa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8022c3e:	9b06      	ldr	r3, [sp, #24]
 8022c40:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022c44:	9b07      	ldr	r3, [sp, #28]
 8022c46:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022c4a:	9307      	str	r3, [sp, #28]
 8022c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022c4e:	2b00      	cmp	r3, #0
 8022c50:	f340 8218 	ble.w	8023084 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022c54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022c5c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022c60:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022c62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022c66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022c6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022c6e:	eef0 6a62 	vmov.f32	s13, s5
 8022c72:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022c76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022c7e:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022c82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022c86:	eef0 6a43 	vmov.f32	s13, s6
 8022c8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022c8e:	ee12 2a90 	vmov	r2, s5
 8022c92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022c96:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c9a:	ee13 2a10 	vmov	r2, s6
 8022c9e:	931f      	str	r3, [sp, #124]	; 0x7c
 8022ca0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022ca2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ca6:	9320      	str	r3, [sp, #128]	; 0x80
 8022ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022caa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022cac:	3b01      	subs	r3, #1
 8022cae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022cb2:	930e      	str	r3, [sp, #56]	; 0x38
 8022cb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022cb6:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8022cba:	bf08      	it	eq
 8022cbc:	4613      	moveq	r3, r2
 8022cbe:	9306      	str	r3, [sp, #24]
 8022cc0:	eeb0 3a67 	vmov.f32	s6, s15
 8022cc4:	eef0 2a47 	vmov.f32	s5, s14
 8022cc8:	e621      	b.n	802290e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022cca:	fb08 f505 	mul.w	r5, r8, r5
 8022cce:	fb09 5303 	mla	r3, r9, r3, r5
 8022cd2:	e6a1      	b.n	8022a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022cd4:	4681      	mov	r9, r0
 8022cd6:	e6c8      	b.n	8022a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022cd8:	f1c1 0210 	rsb	r2, r1, #16
 8022cdc:	4341      	muls	r1, r0
 8022cde:	fb09 1902 	mla	r9, r9, r2, r1
 8022ce2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022ce6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8022cea:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022cee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022cf2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022cf6:	ea42 0909 	orr.w	r9, r2, r9
 8022cfa:	fa1f f289 	uxth.w	r2, r9
 8022cfe:	e75b      	b.n	8022bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022d00:	f8b7 c000 	ldrh.w	ip, [r7]
 8022d04:	43db      	mvns	r3, r3
 8022d06:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022d0a:	fa5f fe83 	uxtb.w	lr, r3
 8022d0e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022d12:	fb00 f00e 	mul.w	r0, r0, lr
 8022d16:	1c41      	adds	r1, r0, #1
 8022d18:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022d1c:	1211      	asrs	r1, r2, #8
 8022d1e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022d22:	f021 0107 	bic.w	r1, r1, #7
 8022d26:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022d2a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022d2e:	48d7      	ldr	r0, [pc, #860]	; (802308c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022d30:	fb05 f50e 	mul.w	r5, r5, lr
 8022d34:	b2c9      	uxtb	r1, r1
 8022d36:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8022d3a:	1c69      	adds	r1, r5, #1
 8022d3c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022d40:	10d1      	asrs	r1, r2, #3
 8022d42:	f021 0103 	bic.w	r1, r1, #3
 8022d46:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022d4a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022d4e:	b2db      	uxtb	r3, r3
 8022d50:	00c9      	lsls	r1, r1, #3
 8022d52:	fb03 f30e 	mul.w	r3, r3, lr
 8022d56:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022d5a:	4301      	orrs	r1, r0
 8022d5c:	1c58      	adds	r0, r3, #1
 8022d5e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022d62:	00d2      	lsls	r2, r2, #3
 8022d64:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022d68:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022d6c:	430a      	orrs	r2, r1
 8022d6e:	e726      	b.n	8022bbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8022d70:	f115 0e01 	adds.w	lr, r5, #1
 8022d74:	f53f af24 	bmi.w	8022bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022d78:	4572      	cmp	r2, lr
 8022d7a:	f6ff af21 	blt.w	8022bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022d7e:	f110 0e01 	adds.w	lr, r0, #1
 8022d82:	f53f af1d 	bmi.w	8022bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022d86:	4573      	cmp	r3, lr
 8022d88:	f6ff af1a 	blt.w	8022bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022d8c:	b21b      	sxth	r3, r3
 8022d8e:	b212      	sxth	r2, r2
 8022d90:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022d94:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8022d98:	9301      	str	r3, [sp, #4]
 8022d9a:	9200      	str	r2, [sp, #0]
 8022d9c:	4639      	mov	r1, r7
 8022d9e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8022da2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022da4:	f7ff fc24 	bl	80225f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022da8:	e70a      	b.n	8022bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022daa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022dac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022db0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022db2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022db6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022db8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022dbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022dbe:	141f      	asrs	r7, r3, #16
 8022dc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022dc2:	141b      	asrs	r3, r3, #16
 8022dc4:	fb01 3707 	mla	r7, r1, r7, r3
 8022dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dca:	fa1f fc82 	uxth.w	ip, r2
 8022dce:	eb03 0a07 	add.w	sl, r3, r7
 8022dd2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022dd6:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022dda:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022dde:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022de2:	b29b      	uxth	r3, r3
 8022de4:	2d00      	cmp	r5, #0
 8022de6:	f000 80fe 	beq.w	8022fe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022dea:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8022dee:	940c      	str	r4, [sp, #48]	; 0x30
 8022df0:	eb0a 0b01 	add.w	fp, sl, r1
 8022df4:	fa1f fa85 	uxth.w	sl, r5
 8022df8:	fb0a fc0c 	mul.w	ip, sl, ip
 8022dfc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022e00:	fa1f fa8a 	uxth.w	sl, sl
 8022e04:	eba0 000c 	sub.w	r0, r0, ip
 8022e08:	eba3 030a 	sub.w	r3, r3, sl
 8022e0c:	b280      	uxth	r0, r0
 8022e0e:	fb08 f000 	mul.w	r0, r8, r0
 8022e12:	b29b      	uxth	r3, r3
 8022e14:	fb09 0303 	mla	r3, r9, r3, r0
 8022e18:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022e1a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022e1e:	940d      	str	r4, [sp, #52]	; 0x34
 8022e20:	fb0a 3300 	mla	r3, sl, r0, r3
 8022e24:	fb0c 3304 	mla	r3, ip, r4, r3
 8022e28:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022e2c:	2b00      	cmp	r3, #0
 8022e2e:	f000 80cc 	beq.w	8022fca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022e32:	9808      	ldr	r0, [sp, #32]
 8022e34:	9c08      	ldr	r4, [sp, #32]
 8022e36:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022e3a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022e3e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022e42:	f000 80d5 	beq.w	8022ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022e46:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022e4a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022e4e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022e52:	fb09 f707 	mul.w	r7, r9, r7
 8022e56:	fb0a fc0c 	mul.w	ip, sl, ip
 8022e5a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022e5e:	f107 0b20 	add.w	fp, r7, #32
 8022e62:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022e66:	44cc      	add	ip, r9
 8022e68:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022e6c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022e70:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022e74:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022e78:	ea4c 0909 	orr.w	r9, ip, r9
 8022e7c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022e80:	8847      	ldrh	r7, [r0, #2]
 8022e82:	d019      	beq.n	8022eb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8022e84:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022e88:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022e8c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022e90:	fb08 f807 	mul.w	r8, r8, r7
 8022e94:	fb0a fc0c 	mul.w	ip, sl, ip
 8022e98:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022e9c:	f108 0b20 	add.w	fp, r8, #32
 8022ea0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022ea4:	44bc      	add	ip, r7
 8022ea6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022eaa:	0a3f      	lsrs	r7, r7, #8
 8022eac:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022eb0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022eb4:	ea4c 0707 	orr.w	r7, ip, r7
 8022eb8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022ebc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022ec0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022ec4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022ec8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022ecc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022ed0:	ea4c 0909 	orr.w	r9, ip, r9
 8022ed4:	ea4a 0707 	orr.w	r7, sl, r7
 8022ed8:	2d00      	cmp	r5, #0
 8022eda:	f000 808b 	beq.w	8022ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8022ede:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022ee2:	3901      	subs	r1, #1
 8022ee4:	0049      	lsls	r1, r1, #1
 8022ee6:	3102      	adds	r1, #2
 8022ee8:	eb00 0c01 	add.w	ip, r0, r1
 8022eec:	5a41      	ldrh	r1, [r0, r1]
 8022eee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022ef0:	28ff      	cmp	r0, #255	; 0xff
 8022ef2:	d019      	beq.n	8022f28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8022ef4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022ef6:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022efa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022efe:	fb04 fa01 	mul.w	sl, r4, r1
 8022f02:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022f06:	fb08 f800 	mul.w	r8, r8, r0
 8022f0a:	f10a 0020 	add.w	r0, sl, #32
 8022f0e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022f12:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022f16:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022f1a:	4441      	add	r1, r8
 8022f1c:	0a00      	lsrs	r0, r0, #8
 8022f1e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022f22:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022f26:	4301      	orrs	r1, r0
 8022f28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022f2a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022f2e:	2cff      	cmp	r4, #255	; 0xff
 8022f30:	d01a      	beq.n	8022f68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8022f32:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022f36:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022f3a:	fb04 fa00 	mul.w	sl, r4, r0
 8022f3e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022f42:	fb08 f80c 	mul.w	r8, r8, ip
 8022f46:	f10a 0c20 	add.w	ip, sl, #32
 8022f4a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022f4e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022f52:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022f56:	4440      	add	r0, r8
 8022f58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f5c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022f60:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022f64:	ea40 000c 	orr.w	r0, r0, ip
 8022f68:	fb15 fc02 	smulbb	ip, r5, r2
 8022f6c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022f70:	f1c5 0810 	rsb	r8, r5, #16
 8022f74:	eba8 0802 	sub.w	r8, r8, r2
 8022f78:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022f7c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022f80:	437a      	muls	r2, r7
 8022f82:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022f86:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022f8a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022f8e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022f92:	fb09 2208 	mla	r2, r9, r8, r2
 8022f96:	ea4a 0101 	orr.w	r1, sl, r1
 8022f9a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022f9e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022fa2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022fa6:	fb05 2201 	mla	r2, r5, r1, r2
 8022faa:	ea4b 0000 	orr.w	r0, fp, r0
 8022fae:	fb0c 2200 	mla	r2, ip, r0, r2
 8022fb2:	0d57      	lsrs	r7, r2, #21
 8022fb4:	0952      	lsrs	r2, r2, #5
 8022fb6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022fba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022fbe:	433a      	orrs	r2, r7
 8022fc0:	2bff      	cmp	r3, #255	; 0xff
 8022fc2:	b292      	uxth	r2, r2
 8022fc4:	d127      	bne.n	8023016 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8022fc6:	f8ae 2000 	strh.w	r2, [lr]
 8022fca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022fcc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022fce:	4413      	add	r3, r2
 8022fd0:	931d      	str	r3, [sp, #116]	; 0x74
 8022fd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022fd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022fd6:	441a      	add	r2, r3
 8022fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022fda:	921e      	str	r2, [sp, #120]	; 0x78
 8022fdc:	3b01      	subs	r3, #1
 8022fde:	f10e 0e02 	add.w	lr, lr, #2
 8022fe2:	930f      	str	r3, [sp, #60]	; 0x3c
 8022fe4:	e627      	b.n	8022c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022fe6:	fb08 f000 	mul.w	r0, r8, r0
 8022fea:	fb09 0303 	mla	r3, r9, r3, r0
 8022fee:	e71b      	b.n	8022e28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8022ff0:	46b9      	mov	r9, r7
 8022ff2:	e743      	b.n	8022e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8022ff4:	f1c2 0110 	rsb	r1, r2, #16
 8022ff8:	437a      	muls	r2, r7
 8022ffa:	fb09 2901 	mla	r9, r9, r1, r2
 8022ffe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023002:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8023006:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802300a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802300e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023012:	4302      	orrs	r2, r0
 8023014:	e7d4      	b.n	8022fc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8023016:	f8be 7000 	ldrh.w	r7, [lr]
 802301a:	4c1c      	ldr	r4, [pc, #112]	; (802308c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802301c:	43db      	mvns	r3, r3
 802301e:	1238      	asrs	r0, r7, #8
 8023020:	fa5f fc83 	uxtb.w	ip, r3
 8023024:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023028:	10fd      	asrs	r5, r7, #3
 802302a:	fb00 f00c 	mul.w	r0, r0, ip
 802302e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023032:	fb05 f10c 	mul.w	r1, r5, ip
 8023036:	1c45      	adds	r5, r0, #1
 8023038:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802303c:	1215      	asrs	r5, r2, #8
 802303e:	f025 0507 	bic.w	r5, r5, #7
 8023042:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023046:	1c4d      	adds	r5, r1, #1
 8023048:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802304c:	10d1      	asrs	r1, r2, #3
 802304e:	f021 0103 	bic.w	r1, r1, #3
 8023052:	00fb      	lsls	r3, r7, #3
 8023054:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8023058:	b2db      	uxtb	r3, r3
 802305a:	b2c0      	uxtb	r0, r0
 802305c:	00c9      	lsls	r1, r1, #3
 802305e:	fb03 f30c 	mul.w	r3, r3, ip
 8023062:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023066:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802306a:	4308      	orrs	r0, r1
 802306c:	1c59      	adds	r1, r3, #1
 802306e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023072:	00d2      	lsls	r2, r2, #3
 8023074:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023078:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802307c:	4318      	orrs	r0, r3
 802307e:	f8ae 0000 	strh.w	r0, [lr]
 8023082:	e7a2      	b.n	8022fca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8023084:	b013      	add	sp, #76	; 0x4c
 8023086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802308a:	bf00      	nop
 802308c:	fffff800 	.word	0xfffff800

08023090 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8023090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023094:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8023098:	fb05 4c03 	mla	ip, r5, r3, r4
 802309c:	2d00      	cmp	r5, #0
 802309e:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80230a2:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80230a6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80230aa:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80230ae:	8808      	ldrh	r0, [r1, #0]
 80230b0:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80230b4:	f2c0 80a7 	blt.w	8023206 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80230b8:	45aa      	cmp	sl, r5
 80230ba:	f340 80a4 	ble.w	8023206 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80230be:	2c00      	cmp	r4, #0
 80230c0:	f2c0 809f 	blt.w	8023202 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80230c4:	42a3      	cmp	r3, r4
 80230c6:	f340 809c 	ble.w	8023202 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80230ca:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80230ce:	1c62      	adds	r2, r4, #1
 80230d0:	f100 809c 	bmi.w	802320c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80230d4:	4293      	cmp	r3, r2
 80230d6:	f340 8099 	ble.w	802320c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80230da:	f1b9 0f00 	cmp.w	r9, #0
 80230de:	f000 8095 	beq.w	802320c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80230e2:	f8be c002 	ldrh.w	ip, [lr, #2]
 80230e6:	3501      	adds	r5, #1
 80230e8:	f100 8094 	bmi.w	8023214 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80230ec:	45aa      	cmp	sl, r5
 80230ee:	f340 8091 	ble.w	8023214 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80230f2:	2f00      	cmp	r7, #0
 80230f4:	f000 808e 	beq.w	8023214 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80230f8:	2c00      	cmp	r4, #0
 80230fa:	f2c0 8089 	blt.w	8023210 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80230fe:	42a3      	cmp	r3, r4
 8023100:	f340 8086 	ble.w	8023210 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8023104:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8023108:	3401      	adds	r4, #1
 802310a:	f100 8086 	bmi.w	802321a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802310e:	42a3      	cmp	r3, r4
 8023110:	f340 8083 	ble.w	802321a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8023114:	f1b9 0f00 	cmp.w	r9, #0
 8023118:	d07f      	beq.n	802321a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802311a:	3301      	adds	r3, #1
 802311c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8023120:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8023124:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023128:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802312c:	fb19 fe07 	smulbb	lr, r9, r7
 8023130:	ea44 0808 	orr.w	r8, r4, r8
 8023134:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023138:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 802313c:	f1c7 0210 	rsb	r2, r7, #16
 8023140:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023144:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023148:	ea44 0c0c 	orr.w	ip, r4, ip
 802314c:	eba2 0209 	sub.w	r2, r2, r9
 8023150:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023154:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023158:	fb04 f40c 	mul.w	r4, r4, ip
 802315c:	fb02 4808 	mla	r8, r2, r8, r4
 8023160:	041a      	lsls	r2, r3, #16
 8023162:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023166:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802316a:	4313      	orrs	r3, r2
 802316c:	042a      	lsls	r2, r5, #16
 802316e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023172:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023176:	fb0e 8303 	mla	r3, lr, r3, r8
 802317a:	432a      	orrs	r2, r5
 802317c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023180:	fb07 3202 	mla	r2, r7, r2, r3
 8023184:	0d53      	lsrs	r3, r2, #21
 8023186:	0952      	lsrs	r2, r2, #5
 8023188:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802318c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023190:	431a      	orrs	r2, r3
 8023192:	b293      	uxth	r3, r2
 8023194:	b2b4      	uxth	r4, r6
 8023196:	1202      	asrs	r2, r0, #8
 8023198:	43f6      	mvns	r6, r6
 802319a:	b2f6      	uxtb	r6, r6
 802319c:	121d      	asrs	r5, r3, #8
 802319e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80231a2:	fb12 f206 	smulbb	r2, r2, r6
 80231a6:	10c7      	asrs	r7, r0, #3
 80231a8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80231ac:	00c0      	lsls	r0, r0, #3
 80231ae:	fb05 2504 	mla	r5, r5, r4, r2
 80231b2:	b2c0      	uxtb	r0, r0
 80231b4:	10da      	asrs	r2, r3, #3
 80231b6:	00db      	lsls	r3, r3, #3
 80231b8:	b2db      	uxtb	r3, r3
 80231ba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80231be:	fb10 f006 	smulbb	r0, r0, r6
 80231c2:	b2ad      	uxth	r5, r5
 80231c4:	fb03 0004 	mla	r0, r3, r4, r0
 80231c8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80231cc:	fb17 f706 	smulbb	r7, r7, r6
 80231d0:	b280      	uxth	r0, r0
 80231d2:	1c6b      	adds	r3, r5, #1
 80231d4:	fb02 7204 	mla	r2, r2, r4, r7
 80231d8:	b292      	uxth	r2, r2
 80231da:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80231de:	1c43      	adds	r3, r0, #1
 80231e0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80231e4:	1c50      	adds	r0, r2, #1
 80231e6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80231ea:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80231ee:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80231f2:	0952      	lsrs	r2, r2, #5
 80231f4:	432b      	orrs	r3, r5
 80231f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80231fa:	4313      	orrs	r3, r2
 80231fc:	800b      	strh	r3, [r1, #0]
 80231fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023202:	4680      	mov	r8, r0
 8023204:	e763      	b.n	80230ce <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8023206:	4684      	mov	ip, r0
 8023208:	4680      	mov	r8, r0
 802320a:	e76c      	b.n	80230e6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802320c:	4684      	mov	ip, r0
 802320e:	e76a      	b.n	80230e6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8023210:	4605      	mov	r5, r0
 8023212:	e779      	b.n	8023108 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8023214:	4603      	mov	r3, r0
 8023216:	4605      	mov	r5, r0
 8023218:	e782      	b.n	8023120 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 802321a:	4603      	mov	r3, r0
 802321c:	e780      	b.n	8023120 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802321e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802321e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023222:	b093      	sub	sp, #76	; 0x4c
 8023224:	461d      	mov	r5, r3
 8023226:	9210      	str	r2, [sp, #64]	; 0x40
 8023228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802322a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802322e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023230:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8023234:	910a      	str	r1, [sp, #40]	; 0x28
 8023236:	6859      	ldr	r1, [r3, #4]
 8023238:	681b      	ldr	r3, [r3, #0]
 802323a:	9011      	str	r0, [sp, #68]	; 0x44
 802323c:	fb01 2707 	mla	r7, r1, r7, r2
 8023240:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8023244:	9307      	str	r3, [sp, #28]
 8023246:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023248:	681b      	ldr	r3, [r3, #0]
 802324a:	9309      	str	r3, [sp, #36]	; 0x24
 802324c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802324e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8023252:	43db      	mvns	r3, r3
 8023254:	b2db      	uxtb	r3, r3
 8023256:	9308      	str	r3, [sp, #32]
 8023258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802325a:	2b00      	cmp	r3, #0
 802325c:	dc03      	bgt.n	8023266 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802325e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023260:	2b00      	cmp	r3, #0
 8023262:	f340 8203 	ble.w	802366c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023266:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023268:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802326c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023270:	1e48      	subs	r0, r1, #1
 8023272:	f102 3cff 	add.w	ip, r2, #4294967295
 8023276:	2d00      	cmp	r5, #0
 8023278:	f340 80da 	ble.w	8023430 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802327c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023280:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023284:	d406      	bmi.n	8023294 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023286:	4586      	cmp	lr, r0
 8023288:	da04      	bge.n	8023294 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802328a:	2b00      	cmp	r3, #0
 802328c:	db02      	blt.n	8023294 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802328e:	4563      	cmp	r3, ip
 8023290:	f2c0 80cf 	blt.w	8023432 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023294:	f11e 0e01 	adds.w	lr, lr, #1
 8023298:	f100 80c1 	bmi.w	802341e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802329c:	4571      	cmp	r1, lr
 802329e:	f2c0 80be 	blt.w	802341e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80232a2:	3301      	adds	r3, #1
 80232a4:	f100 80bb 	bmi.w	802341e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80232a8:	429a      	cmp	r2, r3
 80232aa:	f2c0 80b8 	blt.w	802341e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80232ae:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80232b2:	46a9      	mov	r9, r5
 80232b4:	f1b9 0f00 	cmp.w	r9, #0
 80232b8:	f340 80d8 	ble.w	802346c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80232bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232be:	1421      	asrs	r1, r4, #16
 80232c0:	ea4f 4026 	mov.w	r0, r6, asr #16
 80232c4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80232c8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80232cc:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80232d0:	f100 8111 	bmi.w	80234f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80232d4:	f10e 3aff 	add.w	sl, lr, #4294967295
 80232d8:	4551      	cmp	r1, sl
 80232da:	f280 810c 	bge.w	80234f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80232de:	2800      	cmp	r0, #0
 80232e0:	f2c0 8109 	blt.w	80234f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80232e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80232e8:	4550      	cmp	r0, sl
 80232ea:	f280 8104 	bge.w	80234f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80232ee:	fa0f f38e 	sxth.w	r3, lr
 80232f2:	fb00 1103 	mla	r1, r0, r3, r1
 80232f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80232f8:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80232fc:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8023300:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8023304:	f1bc 0f00 	cmp.w	ip, #0
 8023308:	d007      	beq.n	802331a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 802330a:	005b      	lsls	r3, r3, #1
 802330c:	eb0a 0003 	add.w	r0, sl, r3
 8023310:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8023314:	930c      	str	r3, [sp, #48]	; 0x30
 8023316:	8843      	ldrh	r3, [r0, #2]
 8023318:	930d      	str	r3, [sp, #52]	; 0x34
 802331a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802331e:	fb12 f30c 	smulbb	r3, r2, ip
 8023322:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023326:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802332a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802332e:	10db      	asrs	r3, r3, #3
 8023330:	ea40 000e 	orr.w	r0, r0, lr
 8023334:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023338:	f1cc 0e10 	rsb	lr, ip, #16
 802333c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023340:	ebae 0e02 	sub.w	lr, lr, r2
 8023344:	ea4a 0101 	orr.w	r1, sl, r1
 8023348:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802334c:	4351      	muls	r1, r2
 802334e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023350:	9f08      	ldr	r7, [sp, #32]
 8023352:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023356:	fb0e 1e00 	mla	lr, lr, r0, r1
 802335a:	0410      	lsls	r0, r2, #16
 802335c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023360:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023364:	4310      	orrs	r0, r2
 8023366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023368:	990c      	ldr	r1, [sp, #48]	; 0x30
 802336a:	0412      	lsls	r2, r2, #16
 802336c:	fb03 e000 	mla	r0, r3, r0, lr
 8023370:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023374:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8023378:	ea42 020e 	orr.w	r2, r2, lr
 802337c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023380:	fb03 0302 	mla	r3, r3, r2, r0
 8023384:	0d5a      	lsrs	r2, r3, #21
 8023386:	095b      	lsrs	r3, r3, #5
 8023388:	f8b8 0000 	ldrh.w	r0, [r8]
 802338c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023390:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023394:	4313      	orrs	r3, r2
 8023396:	b29b      	uxth	r3, r3
 8023398:	1201      	asrs	r1, r0, #8
 802339a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802339e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80233a2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80233a6:	fb11 f107 	smulbb	r1, r1, r7
 80233aa:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80233ae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80233b2:	00c0      	lsls	r0, r0, #3
 80233b4:	fb0c 1c02 	mla	ip, ip, r2, r1
 80233b8:	b2c0      	uxtb	r0, r0
 80233ba:	10d9      	asrs	r1, r3, #3
 80233bc:	00db      	lsls	r3, r3, #3
 80233be:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80233c2:	b2db      	uxtb	r3, r3
 80233c4:	fb10 f007 	smulbb	r0, r0, r7
 80233c8:	fa1f fc8c 	uxth.w	ip, ip
 80233cc:	fb03 0302 	mla	r3, r3, r2, r0
 80233d0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80233d4:	fb1e fe07 	smulbb	lr, lr, r7
 80233d8:	fb01 e102 	mla	r1, r1, r2, lr
 80233dc:	b29a      	uxth	r2, r3
 80233de:	f10c 0301 	add.w	r3, ip, #1
 80233e2:	b289      	uxth	r1, r1
 80233e4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80233e8:	1c53      	adds	r3, r2, #1
 80233ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80233ee:	1c4a      	adds	r2, r1, #1
 80233f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80233f4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80233f8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80233fc:	0949      	lsrs	r1, r1, #5
 80233fe:	ea43 030c 	orr.w	r3, r3, ip
 8023402:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023406:	430b      	orrs	r3, r1
 8023408:	f8a8 3000 	strh.w	r3, [r8]
 802340c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802340e:	441c      	add	r4, r3
 8023410:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023412:	f108 0802 	add.w	r8, r8, #2
 8023416:	441e      	add	r6, r3
 8023418:	f109 39ff 	add.w	r9, r9, #4294967295
 802341c:	e74a      	b.n	80232b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802341e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023420:	441c      	add	r4, r3
 8023422:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023424:	441e      	add	r6, r3
 8023426:	9b07      	ldr	r3, [sp, #28]
 8023428:	3302      	adds	r3, #2
 802342a:	3d01      	subs	r5, #1
 802342c:	9307      	str	r3, [sp, #28]
 802342e:	e722      	b.n	8023276 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023430:	d022      	beq.n	8023478 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8023432:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023434:	1e6b      	subs	r3, r5, #1
 8023436:	fb00 4003 	mla	r0, r0, r3, r4
 802343a:	1400      	asrs	r0, r0, #16
 802343c:	f53f af37 	bmi.w	80232ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023440:	3901      	subs	r1, #1
 8023442:	4288      	cmp	r0, r1
 8023444:	f6bf af33 	bge.w	80232ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023448:	9920      	ldr	r1, [sp, #128]	; 0x80
 802344a:	fb01 6303 	mla	r3, r1, r3, r6
 802344e:	141b      	asrs	r3, r3, #16
 8023450:	f53f af2d 	bmi.w	80232ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023454:	3a01      	subs	r2, #1
 8023456:	4293      	cmp	r3, r2
 8023458:	f6bf af29 	bge.w	80232ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802345c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8023460:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8023464:	46a8      	mov	r8, r5
 8023466:	f1b8 0f00 	cmp.w	r8, #0
 802346a:	dc5e      	bgt.n	802352a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802346c:	9b07      	ldr	r3, [sp, #28]
 802346e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023472:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023476:	9307      	str	r3, [sp, #28]
 8023478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802347a:	2b00      	cmp	r3, #0
 802347c:	f340 80f6 	ble.w	802366c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023480:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023484:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023488:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802348c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802348e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023492:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023496:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802349a:	eef0 6a62 	vmov.f32	s13, s5
 802349e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80234a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80234aa:	ee16 4a90 	vmov	r4, s13
 80234ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80234b2:	eef0 6a43 	vmov.f32	s13, s6
 80234b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80234ba:	ee12 2a90 	vmov	r2, s5
 80234be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80234c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80234c6:	ee13 2a10 	vmov	r2, s6
 80234ca:	931f      	str	r3, [sp, #124]	; 0x7c
 80234cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80234ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80234d2:	9320      	str	r3, [sp, #128]	; 0x80
 80234d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80234d8:	3b01      	subs	r3, #1
 80234da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234de:	930a      	str	r3, [sp, #40]	; 0x28
 80234e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80234e2:	ee16 6a90 	vmov	r6, s13
 80234e6:	bf14      	ite	ne
 80234e8:	461d      	movne	r5, r3
 80234ea:	4615      	moveq	r5, r2
 80234ec:	eeb0 3a67 	vmov.f32	s6, s15
 80234f0:	eef0 2a47 	vmov.f32	s5, s14
 80234f4:	e6b0      	b.n	8023258 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80234f6:	f111 0a01 	adds.w	sl, r1, #1
 80234fa:	d487      	bmi.n	802340c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80234fc:	45d6      	cmp	lr, sl
 80234fe:	db85      	blt.n	802340c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023500:	f110 0a01 	adds.w	sl, r0, #1
 8023504:	d482      	bmi.n	802340c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023506:	4553      	cmp	r3, sl
 8023508:	db80      	blt.n	802340c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802350a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802350c:	9101      	str	r1, [sp, #4]
 802350e:	b21b      	sxth	r3, r3
 8023510:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8023514:	9300      	str	r3, [sp, #0]
 8023516:	e9cd c704 	strd	ip, r7, [sp, #16]
 802351a:	fa0f f38e 	sxth.w	r3, lr
 802351e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023520:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023522:	4641      	mov	r1, r8
 8023524:	f7ff fdb4 	bl	8023090 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8023528:	e770      	b.n	802340c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802352a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802352c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802352e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023532:	1430      	asrs	r0, r6, #16
 8023534:	1423      	asrs	r3, r4, #16
 8023536:	fb01 3000 	mla	r0, r1, r0, r3
 802353a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802353c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8023540:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8023544:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023548:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802354c:	8858      	ldrh	r0, [r3, #2]
 802354e:	f1be 0f00 	cmp.w	lr, #0
 8023552:	d00b      	beq.n	802356c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8023554:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023558:	3901      	subs	r1, #1
 802355a:	0049      	lsls	r1, r1, #1
 802355c:	3102      	adds	r1, #2
 802355e:	eb03 0b01 	add.w	fp, r3, r1
 8023562:	5a5b      	ldrh	r3, [r3, r1]
 8023564:	930e      	str	r3, [sp, #56]	; 0x38
 8023566:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802356a:	930f      	str	r3, [sp, #60]	; 0x3c
 802356c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8023570:	fb12 f30e 	smulbb	r3, r2, lr
 8023574:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023578:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802357c:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8023580:	10db      	asrs	r3, r3, #3
 8023582:	ea41 010c 	orr.w	r1, r1, ip
 8023586:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802358a:	f1ce 0c10 	rsb	ip, lr, #16
 802358e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023592:	ebac 0c02 	sub.w	ip, ip, r2
 8023596:	ea4b 0000 	orr.w	r0, fp, r0
 802359a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802359e:	4350      	muls	r0, r2
 80235a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80235a2:	9f08      	ldr	r7, [sp, #32]
 80235a4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80235a8:	fb0c 0c01 	mla	ip, ip, r1, r0
 80235ac:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80235b0:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80235b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80235b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80235b8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80235bc:	0412      	lsls	r2, r2, #16
 80235be:	ea4b 0101 	orr.w	r1, fp, r1
 80235c2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80235c6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80235ca:	fb03 c101 	mla	r1, r3, r1, ip
 80235ce:	4302      	orrs	r2, r0
 80235d0:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80235d4:	fb03 1202 	mla	r2, r3, r2, r1
 80235d8:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80235dc:	0952      	lsrs	r2, r2, #5
 80235de:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80235e2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80235e6:	f8b9 2000 	ldrh.w	r2, [r9]
 80235ea:	ea4b 0303 	orr.w	r3, fp, r3
 80235ee:	b29b      	uxth	r3, r3
 80235f0:	1211      	asrs	r1, r2, #8
 80235f2:	1218      	asrs	r0, r3, #8
 80235f4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80235f8:	fb11 f107 	smulbb	r1, r1, r7
 80235fc:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8023600:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023604:	00d2      	lsls	r2, r2, #3
 8023606:	fb00 100a 	mla	r0, r0, sl, r1
 802360a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802360e:	10d9      	asrs	r1, r3, #3
 8023610:	b2d2      	uxtb	r2, r2
 8023612:	00db      	lsls	r3, r3, #3
 8023614:	fb1c fc07 	smulbb	ip, ip, r7
 8023618:	fb12 f207 	smulbb	r2, r2, r7
 802361c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023620:	b2db      	uxtb	r3, r3
 8023622:	b280      	uxth	r0, r0
 8023624:	fb01 c10a 	mla	r1, r1, sl, ip
 8023628:	fb03 230a 	mla	r3, r3, sl, r2
 802362c:	b29b      	uxth	r3, r3
 802362e:	b289      	uxth	r1, r1
 8023630:	1c42      	adds	r2, r0, #1
 8023632:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023636:	f101 0c01 	add.w	ip, r1, #1
 802363a:	1c5a      	adds	r2, r3, #1
 802363c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023640:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023644:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023646:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802364a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802364e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023652:	4310      	orrs	r0, r2
 8023654:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023658:	441c      	add	r4, r3
 802365a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802365c:	ea40 000c 	orr.w	r0, r0, ip
 8023660:	f829 0b02 	strh.w	r0, [r9], #2
 8023664:	441e      	add	r6, r3
 8023666:	f108 38ff 	add.w	r8, r8, #4294967295
 802366a:	e6fc      	b.n	8023466 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802366c:	b013      	add	sp, #76	; 0x4c
 802366e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023672 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8023672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023676:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 802367a:	fb0e 4703 	mla	r7, lr, r3, r4
 802367e:	f1be 0f00 	cmp.w	lr, #0
 8023682:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8023686:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 802368a:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 802368e:	8808      	ldrh	r0, [r1, #0]
 8023690:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8023694:	db60      	blt.n	8023758 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023696:	45f1      	cmp	r9, lr
 8023698:	dd5e      	ble.n	8023758 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802369a:	2c00      	cmp	r4, #0
 802369c:	db5a      	blt.n	8023754 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802369e:	42a3      	cmp	r3, r4
 80236a0:	dd58      	ble.n	8023754 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80236a2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80236a6:	1c62      	adds	r2, r4, #1
 80236a8:	d459      	bmi.n	802375e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80236aa:	4293      	cmp	r3, r2
 80236ac:	dd57      	ble.n	802375e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80236ae:	2d00      	cmp	r5, #0
 80236b0:	d055      	beq.n	802375e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80236b2:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80236b6:	f11e 0e01 	adds.w	lr, lr, #1
 80236ba:	d454      	bmi.n	8023766 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80236bc:	45f1      	cmp	r9, lr
 80236be:	dd52      	ble.n	8023766 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80236c0:	2e00      	cmp	r6, #0
 80236c2:	d050      	beq.n	8023766 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80236c4:	2c00      	cmp	r4, #0
 80236c6:	db4c      	blt.n	8023762 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80236c8:	42a3      	cmp	r3, r4
 80236ca:	dd4a      	ble.n	8023762 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80236cc:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80236d0:	3401      	adds	r4, #1
 80236d2:	d405      	bmi.n	80236e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80236d4:	42a3      	cmp	r3, r4
 80236d6:	dd03      	ble.n	80236e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80236d8:	b115      	cbz	r5, 80236e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80236da:	3301      	adds	r3, #1
 80236dc:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80236e0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80236e4:	fb15 f406 	smulbb	r4, r5, r6
 80236e8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80236ec:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80236f0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80236f4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80236f8:	ea43 0c0c 	orr.w	ip, r3, ip
 80236fc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023700:	f1c6 0310 	rsb	r3, r6, #16
 8023704:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023708:	1b5b      	subs	r3, r3, r5
 802370a:	ea4e 0707 	orr.w	r7, lr, r7
 802370e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8023712:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023716:	437d      	muls	r5, r7
 8023718:	fb03 5c0c 	mla	ip, r3, ip, r5
 802371c:	0403      	lsls	r3, r0, #16
 802371e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023722:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023726:	4318      	orrs	r0, r3
 8023728:	0413      	lsls	r3, r2, #16
 802372a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802372e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023732:	4313      	orrs	r3, r2
 8023734:	fb04 c000 	mla	r0, r4, r0, ip
 8023738:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802373c:	fb06 0003 	mla	r0, r6, r3, r0
 8023740:	0d43      	lsrs	r3, r0, #21
 8023742:	0940      	lsrs	r0, r0, #5
 8023744:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023748:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802374c:	4318      	orrs	r0, r3
 802374e:	8008      	strh	r0, [r1, #0]
 8023750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023754:	4684      	mov	ip, r0
 8023756:	e7a6      	b.n	80236a6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8023758:	4607      	mov	r7, r0
 802375a:	4684      	mov	ip, r0
 802375c:	e7ab      	b.n	80236b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802375e:	4607      	mov	r7, r0
 8023760:	e7a9      	b.n	80236b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8023762:	4602      	mov	r2, r0
 8023764:	e7b4      	b.n	80236d0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8023766:	4602      	mov	r2, r0
 8023768:	e7ba      	b.n	80236e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802376a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802376a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802376e:	b08f      	sub	sp, #60	; 0x3c
 8023770:	461d      	mov	r5, r3
 8023772:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023774:	920c      	str	r2, [sp, #48]	; 0x30
 8023776:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 802377a:	9107      	str	r1, [sp, #28]
 802377c:	6859      	ldr	r1, [r3, #4]
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	900d      	str	r0, [sp, #52]	; 0x34
 8023782:	fb01 2707 	mla	r7, r1, r7, r2
 8023786:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802378a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802378c:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8023790:	f8d3 8000 	ldr.w	r8, [r3]
 8023794:	9b07      	ldr	r3, [sp, #28]
 8023796:	2b00      	cmp	r3, #0
 8023798:	dc03      	bgt.n	80237a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802379a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802379c:	2b00      	cmp	r3, #0
 802379e:	f340 8181 	ble.w	8023aa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80237a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80237a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80237a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80237ac:	1e48      	subs	r0, r1, #1
 80237ae:	f102 3cff 	add.w	ip, r2, #4294967295
 80237b2:	2d00      	cmp	r5, #0
 80237b4:	f340 809b 	ble.w	80238ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80237b8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80237bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80237c0:	d406      	bmi.n	80237d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80237c2:	4586      	cmp	lr, r0
 80237c4:	da04      	bge.n	80237d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	db02      	blt.n	80237d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80237ca:	4563      	cmp	r3, ip
 80237cc:	f2c0 8090 	blt.w	80238f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80237d0:	f11e 0e01 	adds.w	lr, lr, #1
 80237d4:	f100 8084 	bmi.w	80238e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80237d8:	4571      	cmp	r1, lr
 80237da:	f2c0 8081 	blt.w	80238e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80237de:	3301      	adds	r3, #1
 80237e0:	d47e      	bmi.n	80238e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80237e2:	429a      	cmp	r2, r3
 80237e4:	db7c      	blt.n	80238e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80237e6:	46aa      	mov	sl, r5
 80237e8:	46b9      	mov	r9, r7
 80237ea:	f1ba 0f00 	cmp.w	sl, #0
 80237ee:	f340 8099 	ble.w	8023924 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80237f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80237f4:	1421      	asrs	r1, r4, #16
 80237f6:	ea4f 4026 	mov.w	r0, r6, asr #16
 80237fa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80237fe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023802:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023806:	f100 80d0 	bmi.w	80239aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802380a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802380e:	4559      	cmp	r1, fp
 8023810:	f280 80cb 	bge.w	80239aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023814:	2800      	cmp	r0, #0
 8023816:	f2c0 80c8 	blt.w	80239aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802381a:	f103 3bff 	add.w	fp, r3, #4294967295
 802381e:	4558      	cmp	r0, fp
 8023820:	f280 80c3 	bge.w	80239aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023824:	fa0f fe8e 	sxth.w	lr, lr
 8023828:	fb00 110e 	mla	r1, r0, lr, r1
 802382c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8023830:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8023834:	8841      	ldrh	r1, [r0, #2]
 8023836:	f1bc 0f00 	cmp.w	ip, #0
 802383a:	d00b      	beq.n	8023854 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802383c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8023840:	3b01      	subs	r3, #1
 8023842:	005b      	lsls	r3, r3, #1
 8023844:	3302      	adds	r3, #2
 8023846:	eb00 0e03 	add.w	lr, r0, r3
 802384a:	5ac3      	ldrh	r3, [r0, r3]
 802384c:	9308      	str	r3, [sp, #32]
 802384e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8023852:	9309      	str	r3, [sp, #36]	; 0x24
 8023854:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8023858:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802385c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8023860:	ea40 000b 	orr.w	r0, r0, fp
 8023864:	fb12 f30c 	smulbb	r3, r2, ip
 8023868:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802386c:	10db      	asrs	r3, r3, #3
 802386e:	f1cc 0e10 	rsb	lr, ip, #16
 8023872:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023876:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802387a:	ebae 0e02 	sub.w	lr, lr, r2
 802387e:	ea4b 0101 	orr.w	r1, fp, r1
 8023882:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023886:	4351      	muls	r1, r2
 8023888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802388a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802388e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8023892:	0410      	lsls	r0, r2, #16
 8023894:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023898:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802389c:	4310      	orrs	r0, r2
 802389e:	9a08      	ldr	r2, [sp, #32]
 80238a0:	9908      	ldr	r1, [sp, #32]
 80238a2:	0412      	lsls	r2, r2, #16
 80238a4:	fb03 e000 	mla	r0, r3, r0, lr
 80238a8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80238ac:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80238b0:	ea42 020e 	orr.w	r2, r2, lr
 80238b4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80238b8:	fb03 0302 	mla	r3, r3, r2, r0
 80238bc:	0d5a      	lsrs	r2, r3, #21
 80238be:	095b      	lsrs	r3, r3, #5
 80238c0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80238c4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80238c8:	4313      	orrs	r3, r2
 80238ca:	f8a9 3000 	strh.w	r3, [r9]
 80238ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80238d0:	441c      	add	r4, r3
 80238d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80238d4:	f109 0902 	add.w	r9, r9, #2
 80238d8:	441e      	add	r6, r3
 80238da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80238de:	e784      	b.n	80237ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80238e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80238e2:	441c      	add	r4, r3
 80238e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80238e6:	3d01      	subs	r5, #1
 80238e8:	441e      	add	r6, r3
 80238ea:	3702      	adds	r7, #2
 80238ec:	e761      	b.n	80237b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80238ee:	d01d      	beq.n	802392c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80238f0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80238f2:	1e6b      	subs	r3, r5, #1
 80238f4:	fb00 4003 	mla	r0, r0, r3, r4
 80238f8:	1400      	asrs	r0, r0, #16
 80238fa:	f53f af74 	bmi.w	80237e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80238fe:	3901      	subs	r1, #1
 8023900:	4288      	cmp	r0, r1
 8023902:	f6bf af70 	bge.w	80237e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023906:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023908:	fb01 6303 	mla	r3, r1, r3, r6
 802390c:	141b      	asrs	r3, r3, #16
 802390e:	f53f af6a 	bmi.w	80237e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023912:	3a01      	subs	r2, #1
 8023914:	4293      	cmp	r3, r2
 8023916:	f6bf af66 	bge.w	80237e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802391a:	46a9      	mov	r9, r5
 802391c:	46ba      	mov	sl, r7
 802391e:	f1b9 0f00 	cmp.w	r9, #0
 8023922:	dc5a      	bgt.n	80239da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8023924:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023928:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802392c:	9b07      	ldr	r3, [sp, #28]
 802392e:	2b00      	cmp	r3, #0
 8023930:	f340 80b8 	ble.w	8023aa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023934:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802393c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023940:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023942:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023946:	ee31 1a05 	vadd.f32	s2, s2, s10
 802394a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802394e:	eef0 6a62 	vmov.f32	s13, s5
 8023952:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023956:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802395a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802395e:	ee16 4a90 	vmov	r4, s13
 8023962:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023966:	eef0 6a43 	vmov.f32	s13, s6
 802396a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802396e:	ee12 2a90 	vmov	r2, s5
 8023972:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023976:	fb92 f3f3 	sdiv	r3, r2, r3
 802397a:	ee13 2a10 	vmov	r2, s6
 802397e:	931b      	str	r3, [sp, #108]	; 0x6c
 8023980:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023982:	fb92 f3f3 	sdiv	r3, r2, r3
 8023986:	931c      	str	r3, [sp, #112]	; 0x70
 8023988:	9b07      	ldr	r3, [sp, #28]
 802398a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802398c:	3b01      	subs	r3, #1
 802398e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023992:	9307      	str	r3, [sp, #28]
 8023994:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023996:	ee16 6a90 	vmov	r6, s13
 802399a:	bf14      	ite	ne
 802399c:	461d      	movne	r5, r3
 802399e:	4615      	moveq	r5, r2
 80239a0:	eeb0 3a67 	vmov.f32	s6, s15
 80239a4:	eef0 2a47 	vmov.f32	s5, s14
 80239a8:	e6f4      	b.n	8023794 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80239aa:	f111 0b01 	adds.w	fp, r1, #1
 80239ae:	d48e      	bmi.n	80238ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80239b0:	45de      	cmp	lr, fp
 80239b2:	db8c      	blt.n	80238ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80239b4:	f110 0b01 	adds.w	fp, r0, #1
 80239b8:	d489      	bmi.n	80238ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80239ba:	455b      	cmp	r3, fp
 80239bc:	db87      	blt.n	80238ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80239be:	b21b      	sxth	r3, r3
 80239c0:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80239c4:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80239c8:	9300      	str	r3, [sp, #0]
 80239ca:	4642      	mov	r2, r8
 80239cc:	fa0f f38e 	sxth.w	r3, lr
 80239d0:	4649      	mov	r1, r9
 80239d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80239d4:	f7ff fe4d 	bl	8023672 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80239d8:	e779      	b.n	80238ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80239da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80239dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80239e0:	1420      	asrs	r0, r4, #16
 80239e2:	1431      	asrs	r1, r6, #16
 80239e4:	fb03 0101 	mla	r1, r3, r1, r0
 80239e8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80239ec:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80239f0:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80239f4:	8841      	ldrh	r1, [r0, #2]
 80239f6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80239fa:	f1be 0f00 	cmp.w	lr, #0
 80239fe:	d00b      	beq.n	8023a18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8023a00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023a04:	3b01      	subs	r3, #1
 8023a06:	005b      	lsls	r3, r3, #1
 8023a08:	3302      	adds	r3, #2
 8023a0a:	eb00 0b03 	add.w	fp, r0, r3
 8023a0e:	5ac3      	ldrh	r3, [r0, r3]
 8023a10:	930a      	str	r3, [sp, #40]	; 0x28
 8023a12:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a18:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8023a1c:	fb12 f30e 	smulbb	r3, r2, lr
 8023a20:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023a24:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023a28:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023a2c:	10db      	asrs	r3, r3, #3
 8023a2e:	ea40 000c 	orr.w	r0, r0, ip
 8023a32:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023a36:	f1ce 0c10 	rsb	ip, lr, #16
 8023a3a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023a3e:	ebac 0c02 	sub.w	ip, ip, r2
 8023a42:	ea4b 0101 	orr.w	r1, fp, r1
 8023a46:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023a4a:	4351      	muls	r1, r2
 8023a4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023a4e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023a52:	fb0c 1c00 	mla	ip, ip, r0, r1
 8023a56:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023a5a:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8023a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023a62:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023a66:	0412      	lsls	r2, r2, #16
 8023a68:	ea4b 0000 	orr.w	r0, fp, r0
 8023a6c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023a70:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8023a74:	fb03 c000 	mla	r0, r3, r0, ip
 8023a78:	ea42 0b0b 	orr.w	fp, r2, fp
 8023a7c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023a80:	fb03 000b 	mla	r0, r3, fp, r0
 8023a84:	0d43      	lsrs	r3, r0, #21
 8023a86:	0940      	lsrs	r0, r0, #5
 8023a88:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a8c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023a90:	4318      	orrs	r0, r3
 8023a92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023a94:	f82a 0b02 	strh.w	r0, [sl], #2
 8023a98:	441c      	add	r4, r3
 8023a9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023a9c:	f109 39ff 	add.w	r9, r9, #4294967295
 8023aa0:	441e      	add	r6, r3
 8023aa2:	e73c      	b.n	802391e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023aa4:	b00f      	add	sp, #60	; 0x3c
 8023aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023aaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8023aaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023aae:	b085      	sub	sp, #20
 8023ab0:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023ab4:	9102      	str	r1, [sp, #8]
 8023ab6:	2c00      	cmp	r4, #0
 8023ab8:	fb04 7103 	mla	r1, r4, r3, r7
 8023abc:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023ac0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023ac4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023ac8:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8023acc:	f2c0 811b 	blt.w	8023d06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023ad0:	45a6      	cmp	lr, r4
 8023ad2:	f340 8118 	ble.w	8023d06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023ad6:	2f00      	cmp	r7, #0
 8023ad8:	f2c0 8113 	blt.w	8023d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023adc:	42bb      	cmp	r3, r7
 8023ade:	f340 8110 	ble.w	8023d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023ae2:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8023ae6:	1c7a      	adds	r2, r7, #1
 8023ae8:	f100 8110 	bmi.w	8023d0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8023aec:	4293      	cmp	r3, r2
 8023aee:	f340 810d 	ble.w	8023d0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8023af2:	2e00      	cmp	r6, #0
 8023af4:	f000 810c 	beq.w	8023d10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8023af8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023afc:	3401      	adds	r4, #1
 8023afe:	f100 810b 	bmi.w	8023d18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8023b02:	45a6      	cmp	lr, r4
 8023b04:	f340 8108 	ble.w	8023d18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8023b08:	2800      	cmp	r0, #0
 8023b0a:	f000 8108 	beq.w	8023d1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8023b0e:	2f00      	cmp	r7, #0
 8023b10:	f2c0 8100 	blt.w	8023d14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023b14:	42bb      	cmp	r3, r7
 8023b16:	f340 80fd 	ble.w	8023d14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023b1a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023b1e:	3701      	adds	r7, #1
 8023b20:	f100 8100 	bmi.w	8023d24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023b24:	42bb      	cmp	r3, r7
 8023b26:	f340 80fd 	ble.w	8023d24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023b2a:	2e00      	cmp	r6, #0
 8023b2c:	f000 80fc 	beq.w	8023d28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8023b30:	3301      	adds	r3, #1
 8023b32:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8023b36:	b2b6      	uxth	r6, r6
 8023b38:	b280      	uxth	r0, r0
 8023b3a:	fb00 fe06 	mul.w	lr, r0, r6
 8023b3e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023b42:	0136      	lsls	r6, r6, #4
 8023b44:	eba6 070e 	sub.w	r7, r6, lr
 8023b48:	b280      	uxth	r0, r0
 8023b4a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8023b4e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023b52:	b2bf      	uxth	r7, r7
 8023b54:	1a1b      	subs	r3, r3, r0
 8023b56:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023b5a:	b29b      	uxth	r3, r3
 8023b5c:	fb0a f607 	mul.w	r6, sl, r7
 8023b60:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023b64:	fb0b 6603 	mla	r6, fp, r3, r6
 8023b68:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023b6c:	fb00 6609 	mla	r6, r0, r9, r6
 8023b70:	fb0e 6608 	mla	r6, lr, r8, r6
 8023b74:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023b78:	9600      	str	r6, [sp, #0]
 8023b7a:	2e00      	cmp	r6, #0
 8023b7c:	f000 80be 	beq.w	8023cfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8023b80:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023b84:	fb0b fc0c 	mul.w	ip, fp, ip
 8023b88:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023b8c:	fb0b f505 	mul.w	r5, fp, r5
 8023b90:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023b94:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023b98:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023b9c:	44dc      	add	ip, fp
 8023b9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ba2:	9501      	str	r5, [sp, #4]
 8023ba4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023ba8:	9503      	str	r5, [sp, #12]
 8023baa:	9d01      	ldr	r5, [sp, #4]
 8023bac:	9e02      	ldr	r6, [sp, #8]
 8023bae:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023bb2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023bb6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023bba:	fb0a fc0c 	mul.w	ip, sl, ip
 8023bbe:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023bc2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023bc6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023bca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023bce:	4465      	add	r5, ip
 8023bd0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023bd4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023bd8:	fb09 fc0c 	mul.w	ip, r9, ip
 8023bdc:	fb09 f904 	mul.w	r9, r9, r4
 8023be0:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023be4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023be8:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023bec:	fb08 f404 	mul.w	r4, r8, r4
 8023bf0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023bf4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023bf8:	fb08 f802 	mul.w	r8, r8, r2
 8023bfc:	fb0a fa01 	mul.w	sl, sl, r1
 8023c00:	0a22      	lsrs	r2, r4, #8
 8023c02:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023c06:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023c0a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8023c0e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023c12:	4414      	add	r4, r2
 8023c14:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023c18:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023c1c:	0a2d      	lsrs	r5, r5, #8
 8023c1e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023c22:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023c26:	9a03      	ldr	r2, [sp, #12]
 8023c28:	8836      	ldrh	r6, [r6, #0]
 8023c2a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023c2e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023c32:	437d      	muls	r5, r7
 8023c34:	4461      	add	r1, ip
 8023c36:	0a24      	lsrs	r4, r4, #8
 8023c38:	fb02 5503 	mla	r5, r2, r3, r5
 8023c3c:	0a09      	lsrs	r1, r1, #8
 8023c3e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023c42:	fb04 540e 	mla	r4, r4, lr, r5
 8023c46:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023c4a:	fb01 4100 	mla	r1, r1, r0, r4
 8023c4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c52:	0a09      	lsrs	r1, r1, #8
 8023c54:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c58:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8023c5c:	fb07 f70a 	mul.w	r7, r7, sl
 8023c60:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023c64:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8023c68:	fb03 7101 	mla	r1, r3, r1, r7
 8023c6c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023c70:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023c74:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023c78:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8023c7c:	fb00 e101 	mla	r1, r0, r1, lr
 8023c80:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023c84:	9a00      	ldr	r2, [sp, #0]
 8023c86:	b287      	uxth	r7, r0
 8023c88:	437a      	muls	r2, r7
 8023c8a:	0a09      	lsrs	r1, r1, #8
 8023c8c:	1c53      	adds	r3, r2, #1
 8023c8e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023c92:	4321      	orrs	r1, r4
 8023c94:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023c98:	1235      	asrs	r5, r6, #8
 8023c9a:	0c0a      	lsrs	r2, r1, #16
 8023c9c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023ca0:	b2db      	uxtb	r3, r3
 8023ca2:	fb12 f207 	smulbb	r2, r2, r7
 8023ca6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023caa:	fb05 2503 	mla	r5, r5, r3, r2
 8023cae:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8023cb2:	10f2      	asrs	r2, r6, #3
 8023cb4:	b2c8      	uxtb	r0, r1
 8023cb6:	00f6      	lsls	r6, r6, #3
 8023cb8:	fb14 f407 	smulbb	r4, r4, r7
 8023cbc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023cc0:	b2f6      	uxtb	r6, r6
 8023cc2:	fb10 f007 	smulbb	r0, r0, r7
 8023cc6:	fb02 4203 	mla	r2, r2, r3, r4
 8023cca:	b2ad      	uxth	r5, r5
 8023ccc:	fb06 0303 	mla	r3, r6, r3, r0
 8023cd0:	b299      	uxth	r1, r3
 8023cd2:	b294      	uxth	r4, r2
 8023cd4:	1c6b      	adds	r3, r5, #1
 8023cd6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023cda:	1c62      	adds	r2, r4, #1
 8023cdc:	1c4b      	adds	r3, r1, #1
 8023cde:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023ce2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023ce6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023cea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023cee:	0952      	lsrs	r2, r2, #5
 8023cf0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023cf4:	432b      	orrs	r3, r5
 8023cf6:	4313      	orrs	r3, r2
 8023cf8:	9a02      	ldr	r2, [sp, #8]
 8023cfa:	8013      	strh	r3, [r2, #0]
 8023cfc:	b005      	add	sp, #20
 8023cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d02:	2500      	movs	r5, #0
 8023d04:	e6ef      	b.n	8023ae6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8023d06:	2100      	movs	r1, #0
 8023d08:	460d      	mov	r5, r1
 8023d0a:	e6f7      	b.n	8023afc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023d0c:	2100      	movs	r1, #0
 8023d0e:	e6f5      	b.n	8023afc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023d10:	4631      	mov	r1, r6
 8023d12:	e6f3      	b.n	8023afc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023d14:	2400      	movs	r4, #0
 8023d16:	e702      	b.n	8023b1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8023d18:	2200      	movs	r2, #0
 8023d1a:	4614      	mov	r4, r2
 8023d1c:	e70b      	b.n	8023b36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023d1e:	4602      	mov	r2, r0
 8023d20:	4604      	mov	r4, r0
 8023d22:	e708      	b.n	8023b36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023d24:	2200      	movs	r2, #0
 8023d26:	e706      	b.n	8023b36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023d28:	4632      	mov	r2, r6
 8023d2a:	e704      	b.n	8023b36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08023d2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d30:	b09d      	sub	sp, #116	; 0x74
 8023d32:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023d36:	9219      	str	r2, [sp, #100]	; 0x64
 8023d38:	9307      	str	r3, [sp, #28]
 8023d3a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023d3c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023d40:	931a      	str	r3, [sp, #104]	; 0x68
 8023d42:	9117      	str	r1, [sp, #92]	; 0x5c
 8023d44:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023d48:	901b      	str	r0, [sp, #108]	; 0x6c
 8023d4a:	6850      	ldr	r0, [r2, #4]
 8023d4c:	6812      	ldr	r2, [r2, #0]
 8023d4e:	fb00 1303 	mla	r3, r0, r3, r1
 8023d52:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023d56:	930a      	str	r3, [sp, #40]	; 0x28
 8023d58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023d5a:	681b      	ldr	r3, [r3, #0]
 8023d5c:	9310      	str	r3, [sp, #64]	; 0x40
 8023d5e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8023d64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023d66:	2b00      	cmp	r3, #0
 8023d68:	dc03      	bgt.n	8023d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8023d6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023d6c:	2b00      	cmp	r3, #0
 8023d6e:	f340 8375 	ble.w	802445c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023d72:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023d74:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d78:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023d7c:	1e48      	subs	r0, r1, #1
 8023d7e:	1e57      	subs	r7, r2, #1
 8023d80:	9b07      	ldr	r3, [sp, #28]
 8023d82:	2b00      	cmp	r3, #0
 8023d84:	f340 818e 	ble.w	80240a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023d88:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023d8c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023d90:	d406      	bmi.n	8023da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023d92:	4584      	cmp	ip, r0
 8023d94:	da04      	bge.n	8023da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023d96:	2b00      	cmp	r3, #0
 8023d98:	db02      	blt.n	8023da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023d9a:	42bb      	cmp	r3, r7
 8023d9c:	f2c0 8183 	blt.w	80240a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023da0:	f11c 0c01 	adds.w	ip, ip, #1
 8023da4:	f100 8173 	bmi.w	802408e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023da8:	4561      	cmp	r1, ip
 8023daa:	f2c0 8170 	blt.w	802408e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023dae:	3301      	adds	r3, #1
 8023db0:	f100 816d 	bmi.w	802408e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023db4:	429a      	cmp	r2, r3
 8023db6:	f2c0 816a 	blt.w	802408e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023dba:	9b07      	ldr	r3, [sp, #28]
 8023dbc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023dbe:	9318      	str	r3, [sp, #96]	; 0x60
 8023dc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023dc2:	2b00      	cmp	r3, #0
 8023dc4:	f340 818c 	ble.w	80240e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8023dc8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023dca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023dcc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023dd0:	689b      	ldr	r3, [r3, #8]
 8023dd2:	1422      	asrs	r2, r4, #16
 8023dd4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023dd8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023ddc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023de0:	f100 81cd 	bmi.w	802417e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023de4:	f103 38ff 	add.w	r8, r3, #4294967295
 8023de8:	4542      	cmp	r2, r8
 8023dea:	f280 81c8 	bge.w	802417e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023dee:	f1bc 0f00 	cmp.w	ip, #0
 8023df2:	f2c0 81c4 	blt.w	802417e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023df6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023dfa:	45c4      	cmp	ip, r8
 8023dfc:	f280 81bf 	bge.w	802417e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023e00:	b21b      	sxth	r3, r3
 8023e02:	fb0c 2203 	mla	r2, ip, r3, r2
 8023e06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023e08:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023e0c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023e10:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023e14:	2800      	cmp	r0, #0
 8023e16:	f000 81a9 	beq.w	802416c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8023e1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023e1e:	950c      	str	r5, [sp, #48]	; 0x30
 8023e20:	0e2d      	lsrs	r5, r5, #24
 8023e22:	9513      	str	r5, [sp, #76]	; 0x4c
 8023e24:	b181      	cbz	r1, 8023e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023e26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023e2a:	3b01      	subs	r3, #1
 8023e2c:	009b      	lsls	r3, r3, #2
 8023e2e:	3304      	adds	r3, #4
 8023e30:	eb08 0c03 	add.w	ip, r8, r3
 8023e34:	f858 3003 	ldr.w	r3, [r8, r3]
 8023e38:	9308      	str	r3, [sp, #32]
 8023e3a:	0e1b      	lsrs	r3, r3, #24
 8023e3c:	9311      	str	r3, [sp, #68]	; 0x44
 8023e3e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023e42:	930d      	str	r3, [sp, #52]	; 0x34
 8023e44:	0e1b      	lsrs	r3, r3, #24
 8023e46:	9314      	str	r3, [sp, #80]	; 0x50
 8023e48:	b280      	uxth	r0, r0
 8023e4a:	b289      	uxth	r1, r1
 8023e4c:	fb00 f901 	mul.w	r9, r0, r1
 8023e50:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023e54:	0100      	lsls	r0, r0, #4
 8023e56:	eba0 0809 	sub.w	r8, r0, r9
 8023e5a:	b289      	uxth	r1, r1
 8023e5c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023e60:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023e62:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023e64:	fa1f f888 	uxth.w	r8, r8
 8023e68:	1a5b      	subs	r3, r3, r1
 8023e6a:	b29b      	uxth	r3, r3
 8023e6c:	fb08 f000 	mul.w	r0, r8, r0
 8023e70:	fb03 000e 	mla	r0, r3, lr, r0
 8023e74:	fb01 0005 	mla	r0, r1, r5, r0
 8023e78:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023e7a:	fb09 0005 	mla	r0, r9, r5, r0
 8023e7e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023e82:	2800      	cmp	r0, #0
 8023e84:	f000 80fa 	beq.w	802407c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023e88:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023e8c:	d01b      	beq.n	8023ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023e8e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023e92:	fb0e fa0a 	mul.w	sl, lr, sl
 8023e96:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023e9a:	fb0e fe02 	mul.w	lr, lr, r2
 8023e9e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023ea2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023ea6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023eaa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023eae:	4452      	add	r2, sl
 8023eb0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023eb4:	0a12      	lsrs	r2, r2, #8
 8023eb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023eba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023ebe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023ec2:	ea42 020c 	orr.w	r2, r2, ip
 8023ec6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023ec8:	2dff      	cmp	r5, #255	; 0xff
 8023eca:	d021      	beq.n	8023f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8023ecc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023ece:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023ed2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023ed4:	fb05 fb0b 	mul.w	fp, r5, fp
 8023ed8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023eda:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023ede:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023ee0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ee4:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ee8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023eec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023ef0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023ef4:	44de      	add	lr, fp
 8023ef6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023efa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023efe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023f06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f0a:	ea4e 050a 	orr.w	r5, lr, sl
 8023f0e:	950c      	str	r5, [sp, #48]	; 0x30
 8023f10:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023f12:	2dff      	cmp	r5, #255	; 0xff
 8023f14:	d021      	beq.n	8023f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023f16:	9d08      	ldr	r5, [sp, #32]
 8023f18:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023f1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023f1e:	fb05 fb0b 	mul.w	fp, r5, fp
 8023f22:	9d08      	ldr	r5, [sp, #32]
 8023f24:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023f28:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023f2a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023f2e:	fb05 fa0a 	mul.w	sl, r5, sl
 8023f32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023f36:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023f3a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023f3e:	44de      	add	lr, fp
 8023f40:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023f44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023f50:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f54:	ea4e 050a 	orr.w	r5, lr, sl
 8023f58:	9508      	str	r5, [sp, #32]
 8023f5a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023f5c:	2dff      	cmp	r5, #255	; 0xff
 8023f5e:	d021      	beq.n	8023fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023f60:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023f62:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023f66:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023f68:	fb05 fb0b 	mul.w	fp, r5, fp
 8023f6c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023f6e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023f72:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023f74:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023f78:	fb05 fa0a 	mul.w	sl, r5, sl
 8023f7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023f80:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023f84:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023f88:	44de      	add	lr, fp
 8023f8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023f8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023f9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f9e:	ea4e 050a 	orr.w	r5, lr, sl
 8023fa2:	950d      	str	r5, [sp, #52]	; 0x34
 8023fa4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023fa6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023faa:	9d08      	ldr	r5, [sp, #32]
 8023fac:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023fb0:	fb08 fc0c 	mul.w	ip, r8, ip
 8023fb4:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023fb8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023fbc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023fbe:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023fc2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023fc8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023fcc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023fd0:	fb08 f80e 	mul.w	r8, r8, lr
 8023fd4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023fd8:	fb03 8202 	mla	r2, r3, r2, r8
 8023fdc:	9b08      	ldr	r3, [sp, #32]
 8023fde:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023fe0:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8023fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023fe6:	fb01 220a 	mla	r2, r1, sl, r2
 8023fea:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023fee:	fb09 2901 	mla	r9, r9, r1, r2
 8023ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023ff4:	883b      	ldrh	r3, [r7, #0]
 8023ff6:	4342      	muls	r2, r0
 8023ff8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ffc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024000:	1c50      	adds	r0, r2, #1
 8024002:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024006:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802400a:	ea4c 0c09 	orr.w	ip, ip, r9
 802400e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024012:	1219      	asrs	r1, r3, #8
 8024014:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8024018:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802401c:	b2c0      	uxtb	r0, r0
 802401e:	fb12 f205 	smulbb	r2, r2, r5
 8024022:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024026:	fb01 2100 	mla	r1, r1, r0, r2
 802402a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802402e:	10da      	asrs	r2, r3, #3
 8024030:	fa5f fc8c 	uxtb.w	ip, ip
 8024034:	00db      	lsls	r3, r3, #3
 8024036:	fb1c fc05 	smulbb	ip, ip, r5
 802403a:	b2db      	uxtb	r3, r3
 802403c:	b289      	uxth	r1, r1
 802403e:	fb03 c300 	mla	r3, r3, r0, ip
 8024042:	fa1f fc83 	uxth.w	ip, r3
 8024046:	1c4b      	adds	r3, r1, #1
 8024048:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802404c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024050:	fb1e fe05 	smulbb	lr, lr, r5
 8024054:	f10c 0301 	add.w	r3, ip, #1
 8024058:	fb02 e200 	mla	r2, r2, r0, lr
 802405c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8024060:	b292      	uxth	r2, r2
 8024062:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8024066:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802406a:	430b      	orrs	r3, r1
 802406c:	1c51      	adds	r1, r2, #1
 802406e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024072:	0952      	lsrs	r2, r2, #5
 8024074:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024078:	4313      	orrs	r3, r2
 802407a:	803b      	strh	r3, [r7, #0]
 802407c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802407e:	441c      	add	r4, r3
 8024080:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024082:	441e      	add	r6, r3
 8024084:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024086:	3b01      	subs	r3, #1
 8024088:	3702      	adds	r7, #2
 802408a:	9318      	str	r3, [sp, #96]	; 0x60
 802408c:	e698      	b.n	8023dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802408e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024090:	441c      	add	r4, r3
 8024092:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024094:	441e      	add	r6, r3
 8024096:	9b07      	ldr	r3, [sp, #28]
 8024098:	3b01      	subs	r3, #1
 802409a:	9307      	str	r3, [sp, #28]
 802409c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802409e:	3302      	adds	r3, #2
 80240a0:	930a      	str	r3, [sp, #40]	; 0x28
 80240a2:	e66d      	b.n	8023d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80240a4:	d023      	beq.n	80240ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80240a6:	9b07      	ldr	r3, [sp, #28]
 80240a8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80240aa:	3b01      	subs	r3, #1
 80240ac:	fb00 4003 	mla	r0, r0, r3, r4
 80240b0:	1400      	asrs	r0, r0, #16
 80240b2:	f53f ae82 	bmi.w	8023dba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80240b6:	3901      	subs	r1, #1
 80240b8:	4288      	cmp	r0, r1
 80240ba:	f6bf ae7e 	bge.w	8023dba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80240be:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80240c0:	fb01 6303 	mla	r3, r1, r3, r6
 80240c4:	141b      	asrs	r3, r3, #16
 80240c6:	f53f ae78 	bmi.w	8023dba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80240ca:	3a01      	subs	r2, #1
 80240cc:	4293      	cmp	r3, r2
 80240ce:	f6bf ae74 	bge.w	8023dba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80240d2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80240d6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80240da:	f1bb 0f00 	cmp.w	fp, #0
 80240de:	dc6c      	bgt.n	80241ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80240e0:	9b07      	ldr	r3, [sp, #28]
 80240e2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80240e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80240e8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80240ec:	930a      	str	r3, [sp, #40]	; 0x28
 80240ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80240f0:	2b00      	cmp	r3, #0
 80240f2:	f340 81b3 	ble.w	802445c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80240f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80240fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80240fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024102:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024104:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024108:	ee31 1a05 	vadd.f32	s2, s2, s10
 802410c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024110:	eef0 6a62 	vmov.f32	s13, s5
 8024114:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024118:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802411c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024120:	ee16 4a90 	vmov	r4, s13
 8024124:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024128:	eef0 6a43 	vmov.f32	s13, s6
 802412c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024130:	ee12 2a90 	vmov	r2, s5
 8024134:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024138:	fb92 f3f3 	sdiv	r3, r2, r3
 802413c:	ee13 2a10 	vmov	r2, s6
 8024140:	9329      	str	r3, [sp, #164]	; 0xa4
 8024142:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024144:	fb92 f3f3 	sdiv	r3, r2, r3
 8024148:	932a      	str	r3, [sp, #168]	; 0xa8
 802414a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802414c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802414e:	3b01      	subs	r3, #1
 8024150:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024154:	9317      	str	r3, [sp, #92]	; 0x5c
 8024156:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024158:	bf08      	it	eq
 802415a:	4613      	moveq	r3, r2
 802415c:	ee16 6a90 	vmov	r6, s13
 8024160:	9307      	str	r3, [sp, #28]
 8024162:	eeb0 3a67 	vmov.f32	s6, s15
 8024166:	eef0 2a47 	vmov.f32	s5, s14
 802416a:	e5fb      	b.n	8023d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802416c:	2900      	cmp	r1, #0
 802416e:	f43f ae6b 	beq.w	8023e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024172:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024176:	9308      	str	r3, [sp, #32]
 8024178:	0e1b      	lsrs	r3, r3, #24
 802417a:	9311      	str	r3, [sp, #68]	; 0x44
 802417c:	e664      	b.n	8023e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802417e:	f112 0801 	adds.w	r8, r2, #1
 8024182:	f53f af7b 	bmi.w	802407c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024186:	4543      	cmp	r3, r8
 8024188:	f6ff af78 	blt.w	802407c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802418c:	f11c 0801 	adds.w	r8, ip, #1
 8024190:	f53f af74 	bmi.w	802407c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024194:	45c6      	cmp	lr, r8
 8024196:	f6ff af71 	blt.w	802407c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802419a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802419c:	9201      	str	r2, [sp, #4]
 802419e:	fa0f f28e 	sxth.w	r2, lr
 80241a2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80241a6:	e9cd c002 	strd	ip, r0, [sp, #8]
 80241aa:	9200      	str	r2, [sp, #0]
 80241ac:	b21b      	sxth	r3, r3
 80241ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80241b0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80241b2:	4639      	mov	r1, r7
 80241b4:	f7ff fc79 	bl	8023aaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80241b8:	e760      	b.n	802407c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80241ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80241bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80241be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80241c2:	1427      	asrs	r7, r4, #16
 80241c4:	1433      	asrs	r3, r6, #16
 80241c6:	fb01 7303 	mla	r3, r1, r3, r7
 80241ca:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80241ce:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80241d2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80241d6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80241da:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80241de:	2a00      	cmp	r2, #0
 80241e0:	f000 8133 	beq.w	802444a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80241e4:	687d      	ldr	r5, [r7, #4]
 80241e6:	950e      	str	r5, [sp, #56]	; 0x38
 80241e8:	0e2d      	lsrs	r5, r5, #24
 80241ea:	9515      	str	r5, [sp, #84]	; 0x54
 80241ec:	b178      	cbz	r0, 802420e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80241ee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80241f2:	3901      	subs	r1, #1
 80241f4:	0089      	lsls	r1, r1, #2
 80241f6:	3104      	adds	r1, #4
 80241f8:	eb07 0e01 	add.w	lr, r7, r1
 80241fc:	5879      	ldr	r1, [r7, r1]
 80241fe:	9109      	str	r1, [sp, #36]	; 0x24
 8024200:	0e09      	lsrs	r1, r1, #24
 8024202:	9112      	str	r1, [sp, #72]	; 0x48
 8024204:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024208:	910f      	str	r1, [sp, #60]	; 0x3c
 802420a:	0e09      	lsrs	r1, r1, #24
 802420c:	9116      	str	r1, [sp, #88]	; 0x58
 802420e:	b292      	uxth	r2, r2
 8024210:	b280      	uxth	r0, r0
 8024212:	fb02 f800 	mul.w	r8, r2, r0
 8024216:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802421a:	0112      	lsls	r2, r2, #4
 802421c:	eba2 0e08 	sub.w	lr, r2, r8
 8024220:	b280      	uxth	r0, r0
 8024222:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024226:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024228:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802422a:	fa1f fe8e 	uxth.w	lr, lr
 802422e:	1a12      	subs	r2, r2, r0
 8024230:	b292      	uxth	r2, r2
 8024232:	fb0e f101 	mul.w	r1, lr, r1
 8024236:	fb02 110c 	mla	r1, r2, ip, r1
 802423a:	fb00 1105 	mla	r1, r0, r5, r1
 802423e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024240:	fb08 1105 	mla	r1, r8, r5, r1
 8024244:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024248:	2900      	cmp	r1, #0
 802424a:	f000 80f5 	beq.w	8024438 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802424e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024252:	d019      	beq.n	8024288 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8024254:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024258:	fb0c fa0a 	mul.w	sl, ip, sl
 802425c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024260:	fb0c fc03 	mul.w	ip, ip, r3
 8024264:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024268:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802426c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024270:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024274:	4453      	add	r3, sl
 8024276:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802427a:	0a1b      	lsrs	r3, r3, #8
 802427c:	0a3f      	lsrs	r7, r7, #8
 802427e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024282:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024286:	433b      	orrs	r3, r7
 8024288:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802428a:	2dff      	cmp	r5, #255	; 0xff
 802428c:	d020      	beq.n	80242d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802428e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024290:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024294:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024296:	436f      	muls	r7, r5
 8024298:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802429a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802429e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80242a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80242a4:	fb05 fa0a 	mul.w	sl, r5, sl
 80242a8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80242ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242b0:	44bc      	add	ip, r7
 80242b2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80242b6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80242ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242ca:	ea4c 050a 	orr.w	r5, ip, sl
 80242ce:	950e      	str	r5, [sp, #56]	; 0x38
 80242d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80242d2:	2dff      	cmp	r5, #255	; 0xff
 80242d4:	d020      	beq.n	8024318 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 80242d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80242d8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80242dc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80242de:	436f      	muls	r7, r5
 80242e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80242e2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80242e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80242e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80242ec:	fb05 fa0a 	mul.w	sl, r5, sl
 80242f0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80242f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242f8:	44bc      	add	ip, r7
 80242fa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80242fe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024302:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024306:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802430a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802430e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024312:	ea4c 050a 	orr.w	r5, ip, sl
 8024316:	9509      	str	r5, [sp, #36]	; 0x24
 8024318:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802431a:	2dff      	cmp	r5, #255	; 0xff
 802431c:	d020      	beq.n	8024360 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802431e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024320:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024324:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024326:	436f      	muls	r7, r5
 8024328:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802432a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802432e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024330:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024334:	fb05 fa0a 	mul.w	sl, r5, sl
 8024338:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802433c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024340:	44bc      	add	ip, r7
 8024342:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024346:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802434a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802434e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024352:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024356:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802435a:	ea4c 050a 	orr.w	r5, ip, sl
 802435e:	950f      	str	r5, [sp, #60]	; 0x3c
 8024360:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024362:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024366:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024368:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802436c:	fb0e f707 	mul.w	r7, lr, r7
 8024370:	fb02 770c 	mla	r7, r2, ip, r7
 8024374:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024378:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802437a:	fb00 770c 	mla	r7, r0, ip, r7
 802437e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024382:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024384:	fb08 770c 	mla	r7, r8, ip, r7
 8024388:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802438c:	fb0e fe0c 	mul.w	lr, lr, ip
 8024390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024394:	fb02 e303 	mla	r3, r2, r3, lr
 8024398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802439a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802439c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80243a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80243a2:	fb00 330a 	mla	r3, r0, sl, r3
 80243a6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80243aa:	fb08 3c0c 	mla	ip, r8, ip, r3
 80243ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80243b0:	f8b9 0000 	ldrh.w	r0, [r9]
 80243b4:	4359      	muls	r1, r3
 80243b6:	0a3f      	lsrs	r7, r7, #8
 80243b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80243bc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80243c0:	1c4b      	adds	r3, r1, #1
 80243c2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80243c6:	ea47 070c 	orr.w	r7, r7, ip
 80243ca:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80243ce:	1202      	asrs	r2, r0, #8
 80243d0:	0c3b      	lsrs	r3, r7, #16
 80243d2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80243d6:	b2c9      	uxtb	r1, r1
 80243d8:	fb13 f305 	smulbb	r3, r3, r5
 80243dc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80243e0:	fb02 3201 	mla	r2, r2, r1, r3
 80243e4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80243e8:	10c3      	asrs	r3, r0, #3
 80243ea:	b2ff      	uxtb	r7, r7
 80243ec:	00c0      	lsls	r0, r0, #3
 80243ee:	b2c0      	uxtb	r0, r0
 80243f0:	fb17 f705 	smulbb	r7, r7, r5
 80243f4:	fb00 7001 	mla	r0, r0, r1, r7
 80243f8:	b292      	uxth	r2, r2
 80243fa:	fb1c fc05 	smulbb	ip, ip, r5
 80243fe:	b280      	uxth	r0, r0
 8024400:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024404:	fb03 c301 	mla	r3, r3, r1, ip
 8024408:	1c51      	adds	r1, r2, #1
 802440a:	f100 0c01 	add.w	ip, r0, #1
 802440e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024412:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8024416:	b29b      	uxth	r3, r3
 8024418:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802441c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024420:	ea4c 0202 	orr.w	r2, ip, r2
 8024424:	f103 0c01 	add.w	ip, r3, #1
 8024428:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802442c:	095b      	lsrs	r3, r3, #5
 802442e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024432:	431a      	orrs	r2, r3
 8024434:	f8a9 2000 	strh.w	r2, [r9]
 8024438:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802443a:	441c      	add	r4, r3
 802443c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802443e:	f109 0902 	add.w	r9, r9, #2
 8024442:	441e      	add	r6, r3
 8024444:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024448:	e647      	b.n	80240da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802444a:	2800      	cmp	r0, #0
 802444c:	f43f aedf 	beq.w	802420e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024450:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8024454:	9109      	str	r1, [sp, #36]	; 0x24
 8024456:	0e09      	lsrs	r1, r1, #24
 8024458:	9112      	str	r1, [sp, #72]	; 0x48
 802445a:	e6d8      	b.n	802420e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802445c:	b01d      	add	sp, #116	; 0x74
 802445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024462 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8024462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024466:	b085      	sub	sp, #20
 8024468:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802446c:	9102      	str	r1, [sp, #8]
 802446e:	2c00      	cmp	r4, #0
 8024470:	fb04 7103 	mla	r1, r4, r3, r7
 8024474:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024478:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802447c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024480:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8024484:	f2c0 810c 	blt.w	80246a0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024488:	45a6      	cmp	lr, r4
 802448a:	f340 8109 	ble.w	80246a0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802448e:	2f00      	cmp	r7, #0
 8024490:	f2c0 8104 	blt.w	802469c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024494:	42bb      	cmp	r3, r7
 8024496:	f340 8101 	ble.w	802469c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802449a:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802449e:	1c7a      	adds	r2, r7, #1
 80244a0:	f100 8101 	bmi.w	80246a6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80244a4:	4293      	cmp	r3, r2
 80244a6:	f340 80fe 	ble.w	80246a6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80244aa:	2e00      	cmp	r6, #0
 80244ac:	f000 80fd 	beq.w	80246aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 80244b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80244b4:	3401      	adds	r4, #1
 80244b6:	f100 80fc 	bmi.w	80246b2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80244ba:	45a6      	cmp	lr, r4
 80244bc:	f340 80f9 	ble.w	80246b2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80244c0:	2800      	cmp	r0, #0
 80244c2:	f000 80f9 	beq.w	80246b8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 80244c6:	2f00      	cmp	r7, #0
 80244c8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80244cc:	f2c0 80ef 	blt.w	80246ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80244d0:	42bb      	cmp	r3, r7
 80244d2:	f340 80ec 	ble.w	80246ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80244d6:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80244da:	3701      	adds	r7, #1
 80244dc:	f100 80ef 	bmi.w	80246be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80244e0:	42bb      	cmp	r3, r7
 80244e2:	f340 80ec 	ble.w	80246be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80244e6:	2e00      	cmp	r6, #0
 80244e8:	f000 80eb 	beq.w	80246c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80244ec:	6852      	ldr	r2, [r2, #4]
 80244ee:	b2b6      	uxth	r6, r6
 80244f0:	b280      	uxth	r0, r0
 80244f2:	fb00 fe06 	mul.w	lr, r0, r6
 80244f6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80244fa:	0136      	lsls	r6, r6, #4
 80244fc:	eba6 070e 	sub.w	r7, r6, lr
 8024500:	b280      	uxth	r0, r0
 8024502:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8024506:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802450a:	b2bf      	uxth	r7, r7
 802450c:	1a1b      	subs	r3, r3, r0
 802450e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8024512:	b29b      	uxth	r3, r3
 8024514:	fb07 f60a 	mul.w	r6, r7, sl
 8024518:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802451c:	fb0b 6603 	mla	r6, fp, r3, r6
 8024520:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024524:	fb00 6609 	mla	r6, r0, r9, r6
 8024528:	fb0e 6608 	mla	r6, lr, r8, r6
 802452c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024530:	9600      	str	r6, [sp, #0]
 8024532:	2e00      	cmp	r6, #0
 8024534:	f000 80af 	beq.w	8024696 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8024538:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802453c:	fb0b fc0c 	mul.w	ip, fp, ip
 8024540:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024544:	fb0b f505 	mul.w	r5, fp, r5
 8024548:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802454c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024550:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024554:	44dc      	add	ip, fp
 8024556:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802455a:	9501      	str	r5, [sp, #4]
 802455c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8024560:	9503      	str	r5, [sp, #12]
 8024562:	9d01      	ldr	r5, [sp, #4]
 8024564:	9e02      	ldr	r6, [sp, #8]
 8024566:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802456a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802456e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8024572:	fb0a fc0c 	mul.w	ip, sl, ip
 8024576:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802457a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802457e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024582:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024586:	4465      	add	r5, ip
 8024588:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802458c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024590:	fb09 fc0c 	mul.w	ip, r9, ip
 8024594:	fb09 f904 	mul.w	r9, r9, r4
 8024598:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802459c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80245a0:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80245a4:	fb08 f404 	mul.w	r4, r8, r4
 80245a8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80245ac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80245b0:	fb08 f802 	mul.w	r8, r8, r2
 80245b4:	fb0a fa01 	mul.w	sl, sl, r1
 80245b8:	0a22      	lsrs	r2, r4, #8
 80245ba:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80245be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80245c2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80245c6:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80245ca:	4414      	add	r4, r2
 80245cc:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80245d0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80245d4:	0a2d      	lsrs	r5, r5, #8
 80245d6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80245da:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80245de:	9a03      	ldr	r2, [sp, #12]
 80245e0:	8836      	ldrh	r6, [r6, #0]
 80245e2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80245e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80245ea:	437d      	muls	r5, r7
 80245ec:	4461      	add	r1, ip
 80245ee:	0a24      	lsrs	r4, r4, #8
 80245f0:	fb02 5503 	mla	r5, r2, r3, r5
 80245f4:	0a09      	lsrs	r1, r1, #8
 80245f6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80245fa:	fb04 540e 	mla	r4, r4, lr, r5
 80245fe:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024602:	fb01 4100 	mla	r1, r1, r0, r4
 8024606:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802460a:	0a09      	lsrs	r1, r1, #8
 802460c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024610:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8024614:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024618:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802461c:	fb07 f70a 	mul.w	r7, r7, sl
 8024620:	fb03 7101 	mla	r1, r3, r1, r7
 8024624:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024628:	9b00      	ldr	r3, [sp, #0]
 802462a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802462e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8024632:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8024636:	fb00 e101 	mla	r1, r0, r1, lr
 802463a:	43da      	mvns	r2, r3
 802463c:	1233      	asrs	r3, r6, #8
 802463e:	b2d2      	uxtb	r2, r2
 8024640:	10f0      	asrs	r0, r6, #3
 8024642:	0a09      	lsrs	r1, r1, #8
 8024644:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024648:	00f6      	lsls	r6, r6, #3
 802464a:	4353      	muls	r3, r2
 802464c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024650:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024654:	b2f6      	uxtb	r6, r6
 8024656:	4321      	orrs	r1, r4
 8024658:	4350      	muls	r0, r2
 802465a:	4356      	muls	r6, r2
 802465c:	1c5a      	adds	r2, r3, #1
 802465e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024662:	0c0b      	lsrs	r3, r1, #16
 8024664:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024668:	1c42      	adds	r2, r0, #1
 802466a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802466e:	0a0a      	lsrs	r2, r1, #8
 8024670:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024674:	021b      	lsls	r3, r3, #8
 8024676:	00d2      	lsls	r2, r2, #3
 8024678:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802467c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024680:	4313      	orrs	r3, r2
 8024682:	1c72      	adds	r2, r6, #1
 8024684:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8024688:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802468c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8024690:	4319      	orrs	r1, r3
 8024692:	9b02      	ldr	r3, [sp, #8]
 8024694:	8019      	strh	r1, [r3, #0]
 8024696:	b005      	add	sp, #20
 8024698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802469c:	2500      	movs	r5, #0
 802469e:	e6fe      	b.n	802449e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80246a0:	2100      	movs	r1, #0
 80246a2:	460d      	mov	r5, r1
 80246a4:	e706      	b.n	80244b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80246a6:	2100      	movs	r1, #0
 80246a8:	e704      	b.n	80244b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80246aa:	4631      	mov	r1, r6
 80246ac:	e702      	b.n	80244b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80246ae:	2400      	movs	r4, #0
 80246b0:	e713      	b.n	80244da <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80246b2:	2200      	movs	r2, #0
 80246b4:	4614      	mov	r4, r2
 80246b6:	e71a      	b.n	80244ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80246b8:	4602      	mov	r2, r0
 80246ba:	4604      	mov	r4, r0
 80246bc:	e717      	b.n	80244ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80246be:	2200      	movs	r2, #0
 80246c0:	e715      	b.n	80244ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80246c2:	4632      	mov	r2, r6
 80246c4:	e713      	b.n	80244ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

080246c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80246c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246cc:	b09b      	sub	sp, #108	; 0x6c
 80246ce:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80246d2:	9218      	str	r2, [sp, #96]	; 0x60
 80246d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80246d6:	9116      	str	r1, [sp, #88]	; 0x58
 80246d8:	9307      	str	r3, [sp, #28]
 80246da:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80246de:	9019      	str	r0, [sp, #100]	; 0x64
 80246e0:	6850      	ldr	r0, [r2, #4]
 80246e2:	6812      	ldr	r2, [r2, #0]
 80246e4:	fb00 1303 	mla	r3, r0, r3, r1
 80246e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80246ec:	930a      	str	r3, [sp, #40]	; 0x28
 80246ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246f0:	681b      	ldr	r3, [r3, #0]
 80246f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80246f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80246f6:	2b00      	cmp	r3, #0
 80246f8:	dc03      	bgt.n	8024702 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80246fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80246fc:	2b00      	cmp	r3, #0
 80246fe:	f340 8386 	ble.w	8024e0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8024702:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024704:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024708:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802470c:	1e48      	subs	r0, r1, #1
 802470e:	1e57      	subs	r7, r2, #1
 8024710:	9b07      	ldr	r3, [sp, #28]
 8024712:	2b00      	cmp	r3, #0
 8024714:	f340 8166 	ble.w	80249e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024718:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802471c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024720:	d406      	bmi.n	8024730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024722:	4584      	cmp	ip, r0
 8024724:	da04      	bge.n	8024730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024726:	2b00      	cmp	r3, #0
 8024728:	db02      	blt.n	8024730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802472a:	42bb      	cmp	r3, r7
 802472c:	f2c0 815b 	blt.w	80249e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8024730:	f11c 0c01 	adds.w	ip, ip, #1
 8024734:	f100 814b 	bmi.w	80249ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024738:	4561      	cmp	r1, ip
 802473a:	f2c0 8148 	blt.w	80249ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802473e:	3301      	adds	r3, #1
 8024740:	f100 8145 	bmi.w	80249ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024744:	429a      	cmp	r2, r3
 8024746:	f2c0 8142 	blt.w	80249ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802474a:	9b07      	ldr	r3, [sp, #28]
 802474c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802474e:	9317      	str	r3, [sp, #92]	; 0x5c
 8024750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024752:	2b00      	cmp	r3, #0
 8024754:	f340 8165 	ble.w	8024a22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024758:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802475a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802475c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024760:	689b      	ldr	r3, [r3, #8]
 8024762:	1422      	asrs	r2, r4, #16
 8024764:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024768:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802476c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024770:	f100 81d5 	bmi.w	8024b1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024774:	f103 38ff 	add.w	r8, r3, #4294967295
 8024778:	4542      	cmp	r2, r8
 802477a:	f280 81d0 	bge.w	8024b1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802477e:	f1bc 0f00 	cmp.w	ip, #0
 8024782:	f2c0 81cc 	blt.w	8024b1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024786:	f10e 38ff 	add.w	r8, lr, #4294967295
 802478a:	45c4      	cmp	ip, r8
 802478c:	f280 81c7 	bge.w	8024b1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024790:	b21b      	sxth	r3, r3
 8024792:	fb0c 2203 	mla	r2, ip, r3, r2
 8024796:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024798:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802479c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80247a0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80247a4:	2900      	cmp	r1, #0
 80247a6:	f000 8182 	beq.w	8024aae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80247aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80247ae:	950b      	str	r5, [sp, #44]	; 0x2c
 80247b0:	0e2d      	lsrs	r5, r5, #24
 80247b2:	9512      	str	r5, [sp, #72]	; 0x48
 80247b4:	b180      	cbz	r0, 80247d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80247b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80247ba:	3b01      	subs	r3, #1
 80247bc:	009b      	lsls	r3, r3, #2
 80247be:	3304      	adds	r3, #4
 80247c0:	eb08 0c03 	add.w	ip, r8, r3
 80247c4:	f858 3003 	ldr.w	r3, [r8, r3]
 80247c8:	9308      	str	r3, [sp, #32]
 80247ca:	0e1b      	lsrs	r3, r3, #24
 80247cc:	9310      	str	r3, [sp, #64]	; 0x40
 80247ce:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80247d2:	930c      	str	r3, [sp, #48]	; 0x30
 80247d4:	0e1b      	lsrs	r3, r3, #24
 80247d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80247d8:	b289      	uxth	r1, r1
 80247da:	b280      	uxth	r0, r0
 80247dc:	fb01 f900 	mul.w	r9, r1, r0
 80247e0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80247e4:	0109      	lsls	r1, r1, #4
 80247e6:	eba1 0809 	sub.w	r8, r1, r9
 80247ea:	b280      	uxth	r0, r0
 80247ec:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80247f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80247f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80247f4:	fa1f f888 	uxth.w	r8, r8
 80247f8:	1a09      	subs	r1, r1, r0
 80247fa:	b289      	uxth	r1, r1
 80247fc:	fb08 f303 	mul.w	r3, r8, r3
 8024800:	fb01 330e 	mla	r3, r1, lr, r3
 8024804:	fb00 3305 	mla	r3, r0, r5, r3
 8024808:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802480a:	fb09 3305 	mla	r3, r9, r5, r3
 802480e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024812:	2b00      	cmp	r3, #0
 8024814:	f000 80d2 	beq.w	80249bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024818:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802481c:	d01b      	beq.n	8024856 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802481e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8024822:	fb0e fa0a 	mul.w	sl, lr, sl
 8024826:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802482a:	fb0e fe02 	mul.w	lr, lr, r2
 802482e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8024832:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024836:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802483a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802483e:	4452      	add	r2, sl
 8024840:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024844:	0a12      	lsrs	r2, r2, #8
 8024846:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802484a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802484e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024852:	ea42 020c 	orr.w	r2, r2, ip
 8024856:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024858:	2dff      	cmp	r5, #255	; 0xff
 802485a:	d021      	beq.n	80248a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802485c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802485e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024862:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024864:	fb05 fb0b 	mul.w	fp, r5, fp
 8024868:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802486a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802486e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024870:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024874:	fb05 fa0a 	mul.w	sl, r5, sl
 8024878:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802487c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024880:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024884:	44de      	add	lr, fp
 8024886:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802488a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802488e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024892:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024896:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802489a:	ea4e 050a 	orr.w	r5, lr, sl
 802489e:	950b      	str	r5, [sp, #44]	; 0x2c
 80248a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80248a2:	2dff      	cmp	r5, #255	; 0xff
 80248a4:	d021      	beq.n	80248ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80248a6:	9d08      	ldr	r5, [sp, #32]
 80248a8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80248ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80248ae:	fb05 fb0b 	mul.w	fp, r5, fp
 80248b2:	9d08      	ldr	r5, [sp, #32]
 80248b4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80248b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80248ba:	fb05 fa0e 	mul.w	sl, r5, lr
 80248be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80248c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248c6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80248ca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80248ce:	44de      	add	lr, fp
 80248d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80248d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80248d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80248e4:	ea4e 050a 	orr.w	r5, lr, sl
 80248e8:	9508      	str	r5, [sp, #32]
 80248ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80248ec:	2dff      	cmp	r5, #255	; 0xff
 80248ee:	d021      	beq.n	8024934 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80248f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80248f2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80248f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80248f8:	fb05 fb0b 	mul.w	fp, r5, fp
 80248fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80248fe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024902:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024904:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024908:	fb05 fa0a 	mul.w	sl, r5, sl
 802490c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024910:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024914:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024918:	44de      	add	lr, fp
 802491a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802491e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024922:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024926:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802492a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802492e:	ea4e 050a 	orr.w	r5, lr, sl
 8024932:	950c      	str	r5, [sp, #48]	; 0x30
 8024934:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024936:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802493a:	9d08      	ldr	r5, [sp, #32]
 802493c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8024940:	fb08 fc0c 	mul.w	ip, r8, ip
 8024944:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024948:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802494c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802494e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024952:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024956:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024958:	fb09 cc0e 	mla	ip, r9, lr, ip
 802495c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024960:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024964:	fb08 f80e 	mul.w	r8, r8, lr
 8024968:	fb01 8202 	mla	r2, r1, r2, r8
 802496c:	9908      	ldr	r1, [sp, #32]
 802496e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024972:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024974:	fb00 220a 	mla	r2, r0, sl, r2
 8024978:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802497c:	fb09 2900 	mla	r9, r9, r0, r2
 8024980:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024984:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024988:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802498c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024990:	ea4c 0c09 	orr.w	ip, ip, r9
 8024994:	2bff      	cmp	r3, #255	; 0xff
 8024996:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802499a:	f040 8091 	bne.w	8024ac0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802499e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80249a2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80249a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80249aa:	f022 0207 	bic.w	r2, r2, #7
 80249ae:	431a      	orrs	r2, r3
 80249b0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80249b4:	ea4c 0c02 	orr.w	ip, ip, r2
 80249b8:	f8a7 c000 	strh.w	ip, [r7]
 80249bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80249be:	441c      	add	r4, r3
 80249c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80249c2:	441e      	add	r6, r3
 80249c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80249c6:	3b01      	subs	r3, #1
 80249c8:	3702      	adds	r7, #2
 80249ca:	9317      	str	r3, [sp, #92]	; 0x5c
 80249cc:	e6c0      	b.n	8024750 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80249ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80249d0:	441c      	add	r4, r3
 80249d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80249d4:	441e      	add	r6, r3
 80249d6:	9b07      	ldr	r3, [sp, #28]
 80249d8:	3b01      	subs	r3, #1
 80249da:	9307      	str	r3, [sp, #28]
 80249dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249de:	3302      	adds	r3, #2
 80249e0:	930a      	str	r3, [sp, #40]	; 0x28
 80249e2:	e695      	b.n	8024710 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80249e4:	d024      	beq.n	8024a30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80249e6:	9b07      	ldr	r3, [sp, #28]
 80249e8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80249ea:	3b01      	subs	r3, #1
 80249ec:	fb00 4003 	mla	r0, r0, r3, r4
 80249f0:	1400      	asrs	r0, r0, #16
 80249f2:	f53f aeaa 	bmi.w	802474a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80249f6:	3901      	subs	r1, #1
 80249f8:	4288      	cmp	r0, r1
 80249fa:	f6bf aea6 	bge.w	802474a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80249fe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024a00:	fb01 6303 	mla	r3, r1, r3, r6
 8024a04:	141b      	asrs	r3, r3, #16
 8024a06:	f53f aea0 	bmi.w	802474a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024a0a:	3a01      	subs	r2, #1
 8024a0c:	4293      	cmp	r3, r2
 8024a0e:	f6bf ae9c 	bge.w	802474a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024a12:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024a16:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8024a1a:	f1bb 0f00 	cmp.w	fp, #0
 8024a1e:	f300 809a 	bgt.w	8024b56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024a22:	9b07      	ldr	r3, [sp, #28]
 8024a24:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a2a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8024a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8024a30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024a32:	2b00      	cmp	r3, #0
 8024a34:	f340 81eb 	ble.w	8024e0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8024a38:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024a40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024a44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024a4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024a4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024a52:	eef0 6a62 	vmov.f32	s13, s5
 8024a56:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024a5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024a62:	ee16 4a90 	vmov	r4, s13
 8024a66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024a6a:	eef0 6a43 	vmov.f32	s13, s6
 8024a6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024a72:	ee12 2a90 	vmov	r2, s5
 8024a76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a7e:	ee13 2a10 	vmov	r2, s6
 8024a82:	9327      	str	r3, [sp, #156]	; 0x9c
 8024a84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a86:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a8a:	9328      	str	r3, [sp, #160]	; 0xa0
 8024a8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024a8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024a90:	3b01      	subs	r3, #1
 8024a92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a96:	9316      	str	r3, [sp, #88]	; 0x58
 8024a98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a9a:	bf08      	it	eq
 8024a9c:	4613      	moveq	r3, r2
 8024a9e:	ee16 6a90 	vmov	r6, s13
 8024aa2:	9307      	str	r3, [sp, #28]
 8024aa4:	eeb0 3a67 	vmov.f32	s6, s15
 8024aa8:	eef0 2a47 	vmov.f32	s5, s14
 8024aac:	e622      	b.n	80246f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8024aae:	2800      	cmp	r0, #0
 8024ab0:	f43f ae92 	beq.w	80247d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024ab4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024ab8:	9308      	str	r3, [sp, #32]
 8024aba:	0e1b      	lsrs	r3, r3, #24
 8024abc:	9310      	str	r3, [sp, #64]	; 0x40
 8024abe:	e68b      	b.n	80247d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024ac0:	8839      	ldrh	r1, [r7, #0]
 8024ac2:	4dd4      	ldr	r5, [pc, #848]	; (8024e14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024ac4:	43db      	mvns	r3, r3
 8024ac6:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8024aca:	fa5f f883 	uxtb.w	r8, r3
 8024ace:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024ad2:	fb0e fe08 	mul.w	lr, lr, r8
 8024ad6:	10c8      	asrs	r0, r1, #3
 8024ad8:	00cb      	lsls	r3, r1, #3
 8024ada:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024ade:	f10e 0101 	add.w	r1, lr, #1
 8024ae2:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8024ae6:	fb00 f008 	mul.w	r0, r0, r8
 8024aea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8024aee:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8024af2:	f100 0e01 	add.w	lr, r0, #1
 8024af6:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8024afa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024afe:	b2db      	uxtb	r3, r3
 8024b00:	b2c9      	uxtb	r1, r1
 8024b02:	00d2      	lsls	r2, r2, #3
 8024b04:	fb03 f308 	mul.w	r3, r3, r8
 8024b08:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8024b0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024b10:	430a      	orrs	r2, r1
 8024b12:	1c59      	adds	r1, r3, #1
 8024b14:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024b18:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8024b1c:	e748      	b.n	80249b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8024b1e:	f112 0801 	adds.w	r8, r2, #1
 8024b22:	f53f af4b 	bmi.w	80249bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024b26:	4543      	cmp	r3, r8
 8024b28:	f6ff af48 	blt.w	80249bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024b2c:	f11c 0801 	adds.w	r8, ip, #1
 8024b30:	f53f af44 	bmi.w	80249bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024b34:	45c6      	cmp	lr, r8
 8024b36:	f6ff af41 	blt.w	80249bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024b3a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8024b3e:	fa0f f28e 	sxth.w	r2, lr
 8024b42:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024b46:	9200      	str	r2, [sp, #0]
 8024b48:	b21b      	sxth	r3, r3
 8024b4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024b4c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024b4e:	4639      	mov	r1, r7
 8024b50:	f7ff fc87 	bl	8024462 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8024b54:	e732      	b.n	80249bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024b56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024b58:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024b5a:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8024b5e:	1421      	asrs	r1, r4, #16
 8024b60:	1433      	asrs	r3, r6, #16
 8024b62:	fb07 1303 	mla	r3, r7, r3, r1
 8024b66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024b68:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8024b6c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8024b70:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024b74:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024b78:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024b7c:	2a00      	cmp	r2, #0
 8024b7e:	f000 8107 	beq.w	8024d90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 8024b82:	684d      	ldr	r5, [r1, #4]
 8024b84:	950d      	str	r5, [sp, #52]	; 0x34
 8024b86:	0e2d      	lsrs	r5, r5, #24
 8024b88:	9514      	str	r5, [sp, #80]	; 0x50
 8024b8a:	b178      	cbz	r0, 8024bac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024b8c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8024b90:	3f01      	subs	r7, #1
 8024b92:	00bf      	lsls	r7, r7, #2
 8024b94:	3704      	adds	r7, #4
 8024b96:	eb01 0e07 	add.w	lr, r1, r7
 8024b9a:	59c9      	ldr	r1, [r1, r7]
 8024b9c:	9109      	str	r1, [sp, #36]	; 0x24
 8024b9e:	0e09      	lsrs	r1, r1, #24
 8024ba0:	9111      	str	r1, [sp, #68]	; 0x44
 8024ba2:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024ba6:	910e      	str	r1, [sp, #56]	; 0x38
 8024ba8:	0e09      	lsrs	r1, r1, #24
 8024baa:	9115      	str	r1, [sp, #84]	; 0x54
 8024bac:	b292      	uxth	r2, r2
 8024bae:	b280      	uxth	r0, r0
 8024bb0:	fb02 f900 	mul.w	r9, r2, r0
 8024bb4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024bb8:	0112      	lsls	r2, r2, #4
 8024bba:	eba2 0e09 	sub.w	lr, r2, r9
 8024bbe:	b280      	uxth	r0, r0
 8024bc0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024bc6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024bc8:	fa1f fe8e 	uxth.w	lr, lr
 8024bcc:	1a09      	subs	r1, r1, r0
 8024bce:	b289      	uxth	r1, r1
 8024bd0:	fb0e f202 	mul.w	r2, lr, r2
 8024bd4:	fb01 220c 	mla	r2, r1, ip, r2
 8024bd8:	fb00 2205 	mla	r2, r0, r5, r2
 8024bdc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024bde:	fb09 2205 	mla	r2, r9, r5, r2
 8024be2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024be6:	2a00      	cmp	r2, #0
 8024be8:	f000 80c9 	beq.w	8024d7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8024bec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024bf0:	d019      	beq.n	8024c26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8024bf2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024bf6:	fb0c fa0a 	mul.w	sl, ip, sl
 8024bfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024bfe:	fb0c fc03 	mul.w	ip, ip, r3
 8024c02:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024c06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024c0a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024c0e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024c12:	4453      	add	r3, sl
 8024c14:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024c18:	0a1b      	lsrs	r3, r3, #8
 8024c1a:	0a3f      	lsrs	r7, r7, #8
 8024c1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024c20:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024c24:	433b      	orrs	r3, r7
 8024c26:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024c28:	2dff      	cmp	r5, #255	; 0xff
 8024c2a:	d020      	beq.n	8024c6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8024c2c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024c2e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024c32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024c34:	436f      	muls	r7, r5
 8024c36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024c38:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024c3c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024c3e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c42:	fb05 fa0a 	mul.w	sl, r5, sl
 8024c46:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c4e:	44bc      	add	ip, r7
 8024c50:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c54:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c68:	ea4c 050a 	orr.w	r5, ip, sl
 8024c6c:	950d      	str	r5, [sp, #52]	; 0x34
 8024c6e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024c70:	2dff      	cmp	r5, #255	; 0xff
 8024c72:	d020      	beq.n	8024cb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8024c74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024c76:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024c7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024c7c:	436f      	muls	r7, r5
 8024c7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024c80:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024c84:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024c86:	fb05 fa0c 	mul.w	sl, r5, ip
 8024c8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c92:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c96:	44bc      	add	ip, r7
 8024c98:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ca0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ca4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ca8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024cac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024cb0:	ea4c 050a 	orr.w	r5, ip, sl
 8024cb4:	9509      	str	r5, [sp, #36]	; 0x24
 8024cb6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024cb8:	2dff      	cmp	r5, #255	; 0xff
 8024cba:	d020      	beq.n	8024cfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8024cbc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024cbe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024cc2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024cc4:	436f      	muls	r7, r5
 8024cc6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024cc8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024ccc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024cce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024cd2:	fb05 fa0a 	mul.w	sl, r5, sl
 8024cd6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024cda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024cde:	44bc      	add	ip, r7
 8024ce0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024ce4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ce8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024cec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024cf0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024cf4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024cf8:	ea4c 050a 	orr.w	r5, ip, sl
 8024cfc:	950e      	str	r5, [sp, #56]	; 0x38
 8024cfe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024d00:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024d04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024d06:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024d0a:	fb0e f707 	mul.w	r7, lr, r7
 8024d0e:	fb01 770c 	mla	r7, r1, ip, r7
 8024d12:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024d16:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024d18:	fb00 770c 	mla	r7, r0, ip, r7
 8024d1c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024d20:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024d22:	fb09 770c 	mla	r7, r9, ip, r7
 8024d26:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024d2a:	fb0e fe0c 	mul.w	lr, lr, ip
 8024d2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d32:	fb01 e303 	mla	r3, r1, r3, lr
 8024d36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024d38:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024d3c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024d3e:	fb00 330a 	mla	r3, r0, sl, r3
 8024d42:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024d46:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024d4a:	0a3f      	lsrs	r7, r7, #8
 8024d4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d50:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024d54:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024d58:	ea47 070c 	orr.w	r7, r7, ip
 8024d5c:	2aff      	cmp	r2, #255	; 0xff
 8024d5e:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024d62:	d11e      	bne.n	8024da2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 8024d64:	097a      	lsrs	r2, r7, #5
 8024d66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8024d6a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024d6e:	f023 0307 	bic.w	r3, r3, #7
 8024d72:	4313      	orrs	r3, r2
 8024d74:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024d78:	431f      	orrs	r7, r3
 8024d7a:	f8a8 7000 	strh.w	r7, [r8]
 8024d7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024d80:	441c      	add	r4, r3
 8024d82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d84:	f108 0802 	add.w	r8, r8, #2
 8024d88:	441e      	add	r6, r3
 8024d8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024d8e:	e644      	b.n	8024a1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024d90:	2800      	cmp	r0, #0
 8024d92:	f43f af0b 	beq.w	8024bac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024d96:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024d9a:	9109      	str	r1, [sp, #36]	; 0x24
 8024d9c:	0e09      	lsrs	r1, r1, #24
 8024d9e:	9111      	str	r1, [sp, #68]	; 0x44
 8024da0:	e704      	b.n	8024bac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024da2:	f8b8 1000 	ldrh.w	r1, [r8]
 8024da6:	43d2      	mvns	r2, r2
 8024da8:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024dac:	fa5f fe82 	uxtb.w	lr, r2
 8024db0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024db4:	fb0c fc0e 	mul.w	ip, ip, lr
 8024db8:	10c8      	asrs	r0, r1, #3
 8024dba:	00ca      	lsls	r2, r1, #3
 8024dbc:	f10c 0101 	add.w	r1, ip, #1
 8024dc0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024dc4:	0c39      	lsrs	r1, r7, #16
 8024dc6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024dca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024dce:	4911      	ldr	r1, [pc, #68]	; (8024e14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024dd0:	fb00 f00e 	mul.w	r0, r0, lr
 8024dd4:	fa5f fc8c 	uxtb.w	ip, ip
 8024dd8:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8024ddc:	b2d2      	uxtb	r2, r2
 8024dde:	1c41      	adds	r1, r0, #1
 8024de0:	fb02 f20e 	mul.w	r2, r2, lr
 8024de4:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024de8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024dec:	1c51      	adds	r1, r2, #1
 8024dee:	00c0      	lsls	r0, r0, #3
 8024df0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024df4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024df8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024dfc:	ea4c 0c00 	orr.w	ip, ip, r0
 8024e00:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024e04:	ea47 0c0c 	orr.w	ip, r7, ip
 8024e08:	f8a8 c000 	strh.w	ip, [r8]
 8024e0c:	e7b7      	b.n	8024d7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8024e0e:	b01b      	add	sp, #108	; 0x6c
 8024e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e14:	fffff800 	.word	0xfffff800

08024e18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e1c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024e20:	2d00      	cmp	r5, #0
 8024e22:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024e26:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024e2a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024e2e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024e32:	fb05 0e03 	mla	lr, r5, r3, r0
 8024e36:	f2c0 808c 	blt.w	8024f52 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024e3a:	45a9      	cmp	r9, r5
 8024e3c:	f340 8089 	ble.w	8024f52 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024e40:	2800      	cmp	r0, #0
 8024e42:	f2c0 8084 	blt.w	8024f4e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024e46:	4580      	cmp	r8, r0
 8024e48:	f340 8081 	ble.w	8024f4e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024e4c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024e50:	f01e 0f01 	tst.w	lr, #1
 8024e54:	5d16      	ldrb	r6, [r2, r4]
 8024e56:	bf0c      	ite	eq
 8024e58:	f006 060f 	andeq.w	r6, r6, #15
 8024e5c:	1136      	asrne	r6, r6, #4
 8024e5e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024e62:	b2f6      	uxtb	r6, r6
 8024e64:	1c44      	adds	r4, r0, #1
 8024e66:	d477      	bmi.n	8024f58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024e68:	45a0      	cmp	r8, r4
 8024e6a:	dd75      	ble.n	8024f58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024e6c:	2f00      	cmp	r7, #0
 8024e6e:	d075      	beq.n	8024f5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8024e70:	f10e 0a01 	add.w	sl, lr, #1
 8024e74:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024e78:	f01a 0f01 	tst.w	sl, #1
 8024e7c:	5d14      	ldrb	r4, [r2, r4]
 8024e7e:	bf0c      	ite	eq
 8024e80:	f004 040f 	andeq.w	r4, r4, #15
 8024e84:	1124      	asrne	r4, r4, #4
 8024e86:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024e8a:	b2e4      	uxtb	r4, r4
 8024e8c:	3501      	adds	r5, #1
 8024e8e:	d469      	bmi.n	8024f64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024e90:	45a9      	cmp	r9, r5
 8024e92:	dd67      	ble.n	8024f64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024e94:	f1bc 0f00 	cmp.w	ip, #0
 8024e98:	d067      	beq.n	8024f6a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8024e9a:	2800      	cmp	r0, #0
 8024e9c:	db60      	blt.n	8024f60 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024e9e:	4580      	cmp	r8, r0
 8024ea0:	dd5e      	ble.n	8024f60 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024ea2:	eb03 090e 	add.w	r9, r3, lr
 8024ea6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024eaa:	f019 0f01 	tst.w	r9, #1
 8024eae:	5d55      	ldrb	r5, [r2, r5]
 8024eb0:	bf0c      	ite	eq
 8024eb2:	f005 050f 	andeq.w	r5, r5, #15
 8024eb6:	112d      	asrne	r5, r5, #4
 8024eb8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024ebc:	b2ed      	uxtb	r5, r5
 8024ebe:	3001      	adds	r0, #1
 8024ec0:	d456      	bmi.n	8024f70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024ec2:	4580      	cmp	r8, r0
 8024ec4:	dd54      	ble.n	8024f70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024ec6:	2f00      	cmp	r7, #0
 8024ec8:	d054      	beq.n	8024f74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8024eca:	3301      	adds	r3, #1
 8024ecc:	449e      	add	lr, r3
 8024ece:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024ed2:	f01e 0f01 	tst.w	lr, #1
 8024ed6:	5cd0      	ldrb	r0, [r2, r3]
 8024ed8:	bf0c      	ite	eq
 8024eda:	f000 000f 	andeq.w	r0, r0, #15
 8024ede:	1100      	asrne	r0, r0, #4
 8024ee0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024ee4:	b2c3      	uxtb	r3, r0
 8024ee6:	b2ba      	uxth	r2, r7
 8024ee8:	fa1f fc8c 	uxth.w	ip, ip
 8024eec:	fb02 f00c 	mul.w	r0, r2, ip
 8024ef0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024ef4:	0112      	lsls	r2, r2, #4
 8024ef6:	fa1f fc8c 	uxth.w	ip, ip
 8024efa:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024efe:	1a12      	subs	r2, r2, r0
 8024f00:	eba7 070c 	sub.w	r7, r7, ip
 8024f04:	b292      	uxth	r2, r2
 8024f06:	b2bf      	uxth	r7, r7
 8024f08:	4362      	muls	r2, r4
 8024f0a:	fb06 2207 	mla	r2, r6, r7, r2
 8024f0e:	fb0c 2505 	mla	r5, ip, r5, r2
 8024f12:	fb00 5303 	mla	r3, r0, r3, r5
 8024f16:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024f1a:	b1b3      	cbz	r3, 8024f4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024f1c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024f20:	435a      	muls	r2, r3
 8024f22:	1c53      	adds	r3, r2, #1
 8024f24:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024f28:	4a2d      	ldr	r2, [pc, #180]	; (8024fe0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8024f2a:	121b      	asrs	r3, r3, #8
 8024f2c:	6812      	ldr	r2, [r2, #0]
 8024f2e:	2bff      	cmp	r3, #255	; 0xff
 8024f30:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024f34:	d120      	bne.n	8024f78 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8024f36:	4b2b      	ldr	r3, [pc, #172]	; (8024fe4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8024f38:	0950      	lsrs	r0, r2, #5
 8024f3a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024f3e:	4033      	ands	r3, r6
 8024f40:	4318      	orrs	r0, r3
 8024f42:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024f46:	4302      	orrs	r2, r0
 8024f48:	800a      	strh	r2, [r1, #0]
 8024f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024f4e:	2600      	movs	r6, #0
 8024f50:	e788      	b.n	8024e64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8024f52:	2400      	movs	r4, #0
 8024f54:	4626      	mov	r6, r4
 8024f56:	e799      	b.n	8024e8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024f58:	2400      	movs	r4, #0
 8024f5a:	e797      	b.n	8024e8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024f5c:	463c      	mov	r4, r7
 8024f5e:	e795      	b.n	8024e8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024f60:	2500      	movs	r5, #0
 8024f62:	e7ac      	b.n	8024ebe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8024f64:	2300      	movs	r3, #0
 8024f66:	461d      	mov	r5, r3
 8024f68:	e7bd      	b.n	8024ee6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024f6a:	4663      	mov	r3, ip
 8024f6c:	4665      	mov	r5, ip
 8024f6e:	e7ba      	b.n	8024ee6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024f70:	2300      	movs	r3, #0
 8024f72:	e7b8      	b.n	8024ee6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024f74:	463b      	mov	r3, r7
 8024f76:	e7b6      	b.n	8024ee6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024f78:	880d      	ldrh	r5, [r1, #0]
 8024f7a:	b29f      	uxth	r7, r3
 8024f7c:	122c      	asrs	r4, r5, #8
 8024f7e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024f82:	43db      	mvns	r3, r3
 8024f84:	b2db      	uxtb	r3, r3
 8024f86:	fb10 f007 	smulbb	r0, r0, r7
 8024f8a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024f8e:	fb04 0403 	mla	r4, r4, r3, r0
 8024f92:	b2f6      	uxtb	r6, r6
 8024f94:	10e8      	asrs	r0, r5, #3
 8024f96:	b2d2      	uxtb	r2, r2
 8024f98:	00ed      	lsls	r5, r5, #3
 8024f9a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024f9e:	fb12 f207 	smulbb	r2, r2, r7
 8024fa2:	fb16 f607 	smulbb	r6, r6, r7
 8024fa6:	b2ed      	uxtb	r5, r5
 8024fa8:	b2a4      	uxth	r4, r4
 8024faa:	fb00 6603 	mla	r6, r0, r3, r6
 8024fae:	fb05 2303 	mla	r3, r5, r3, r2
 8024fb2:	b29a      	uxth	r2, r3
 8024fb4:	1c63      	adds	r3, r4, #1
 8024fb6:	b2b0      	uxth	r0, r6
 8024fb8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024fbc:	1c53      	adds	r3, r2, #1
 8024fbe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024fc2:	1c42      	adds	r2, r0, #1
 8024fc4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024fc8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024fcc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024fd0:	0940      	lsrs	r0, r0, #5
 8024fd2:	4323      	orrs	r3, r4
 8024fd4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024fd8:	4303      	orrs	r3, r0
 8024fda:	800b      	strh	r3, [r1, #0]
 8024fdc:	e7b5      	b.n	8024f4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024fde:	bf00      	nop
 8024fe0:	20025864 	.word	0x20025864
 8024fe4:	00fff800 	.word	0x00fff800

08024fe8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fec:	b097      	sub	sp, #92	; 0x5c
 8024fee:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024ff2:	9214      	str	r2, [sp, #80]	; 0x50
 8024ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8024ff6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024ff8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024ffc:	910d      	str	r1, [sp, #52]	; 0x34
 8024ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8025000:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025004:	9015      	str	r0, [sp, #84]	; 0x54
 8025006:	6850      	ldr	r0, [r2, #4]
 8025008:	6812      	ldr	r2, [r2, #0]
 802500a:	fb00 1303 	mla	r3, r0, r3, r1
 802500e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025012:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025014:	689b      	ldr	r3, [r3, #8]
 8025016:	3301      	adds	r3, #1
 8025018:	f023 0301 	bic.w	r3, r3, #1
 802501c:	930a      	str	r3, [sp, #40]	; 0x28
 802501e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025020:	681f      	ldr	r7, [r3, #0]
 8025022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025024:	2b00      	cmp	r3, #0
 8025026:	dc03      	bgt.n	8025030 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802502a:	2b00      	cmp	r3, #0
 802502c:	f340 8287 	ble.w	802553e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8025030:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025032:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025036:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802503a:	1e48      	subs	r0, r1, #1
 802503c:	f102 3cff 	add.w	ip, r2, #4294967295
 8025040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025042:	2b00      	cmp	r3, #0
 8025044:	f340 80c4 	ble.w	80251d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025048:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802504c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025050:	d406      	bmi.n	8025060 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025052:	4586      	cmp	lr, r0
 8025054:	da04      	bge.n	8025060 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025056:	2b00      	cmp	r3, #0
 8025058:	db02      	blt.n	8025060 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802505a:	4563      	cmp	r3, ip
 802505c:	f2c0 80b9 	blt.w	80251d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025060:	f11e 0e01 	adds.w	lr, lr, #1
 8025064:	f100 80aa 	bmi.w	80251bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025068:	4571      	cmp	r1, lr
 802506a:	f2c0 80a7 	blt.w	80251bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802506e:	3301      	adds	r3, #1
 8025070:	f100 80a4 	bmi.w	80251bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025074:	429a      	cmp	r2, r3
 8025076:	f2c0 80a1 	blt.w	80251bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802507a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802507c:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8025080:	930e      	str	r3, [sp, #56]	; 0x38
 8025082:	46c8      	mov	r8, r9
 8025084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025086:	2b00      	cmp	r3, #0
 8025088:	f340 80c3 	ble.w	8025212 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802508c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802508e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025092:	1423      	asrs	r3, r4, #16
 8025094:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025098:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802509c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80250a0:	f100 814d 	bmi.w	802533e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80250a4:	f10c 3bff 	add.w	fp, ip, #4294967295
 80250a8:	455b      	cmp	r3, fp
 80250aa:	f280 8148 	bge.w	802533e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80250ae:	2800      	cmp	r0, #0
 80250b0:	f2c0 8145 	blt.w	802533e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80250b4:	f10e 3bff 	add.w	fp, lr, #4294967295
 80250b8:	4558      	cmp	r0, fp
 80250ba:	f280 8140 	bge.w	802533e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80250be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80250c0:	fb00 3305 	mla	r3, r0, r5, r3
 80250c4:	0858      	lsrs	r0, r3, #1
 80250c6:	07dd      	lsls	r5, r3, #31
 80250c8:	f817 c000 	ldrb.w	ip, [r7, r0]
 80250cc:	bf54      	ite	pl
 80250ce:	f00c 0c0f 	andpl.w	ip, ip, #15
 80250d2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80250d6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80250da:	fa5f fc8c 	uxtb.w	ip, ip
 80250de:	2a00      	cmp	r2, #0
 80250e0:	f000 80db 	beq.w	802529a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 80250e4:	1c58      	adds	r0, r3, #1
 80250e6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80250ea:	07c0      	lsls	r0, r0, #31
 80250ec:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80250f0:	bf54      	ite	pl
 80250f2:	f00e 0e0f 	andpl.w	lr, lr, #15
 80250f6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80250fa:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80250fe:	fa5f f08e 	uxtb.w	r0, lr
 8025102:	9010      	str	r0, [sp, #64]	; 0x40
 8025104:	b1c9      	cbz	r1, 802513a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8025106:	4453      	add	r3, sl
 8025108:	0858      	lsrs	r0, r3, #1
 802510a:	07dd      	lsls	r5, r3, #31
 802510c:	5c38      	ldrb	r0, [r7, r0]
 802510e:	bf54      	ite	pl
 8025110:	f000 000f 	andpl.w	r0, r0, #15
 8025114:	1100      	asrmi	r0, r0, #4
 8025116:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802511a:	3301      	adds	r3, #1
 802511c:	b2c0      	uxtb	r0, r0
 802511e:	900b      	str	r0, [sp, #44]	; 0x2c
 8025120:	0858      	lsrs	r0, r3, #1
 8025122:	07dd      	lsls	r5, r3, #31
 8025124:	f817 e000 	ldrb.w	lr, [r7, r0]
 8025128:	bf54      	ite	pl
 802512a:	f00e 030f 	andpl.w	r3, lr, #15
 802512e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8025132:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025136:	b2db      	uxtb	r3, r3
 8025138:	9311      	str	r3, [sp, #68]	; 0x44
 802513a:	b292      	uxth	r2, r2
 802513c:	b289      	uxth	r1, r1
 802513e:	fb02 f301 	mul.w	r3, r2, r1
 8025142:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025146:	0112      	lsls	r2, r2, #4
 8025148:	b289      	uxth	r1, r1
 802514a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802514e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025150:	1ad2      	subs	r2, r2, r3
 8025152:	1a40      	subs	r0, r0, r1
 8025154:	b292      	uxth	r2, r2
 8025156:	436a      	muls	r2, r5
 8025158:	b280      	uxth	r0, r0
 802515a:	fb0c 2c00 	mla	ip, ip, r0, r2
 802515e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025160:	fb01 c102 	mla	r1, r1, r2, ip
 8025164:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025166:	fb03 1302 	mla	r3, r3, r2, r1
 802516a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802516e:	b1db      	cbz	r3, 80251a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025170:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025172:	4353      	muls	r3, r2
 8025174:	1c5a      	adds	r2, r3, #1
 8025176:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802517a:	4ac6      	ldr	r2, [pc, #792]	; (8025494 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802517c:	121b      	asrs	r3, r3, #8
 802517e:	6812      	ldr	r2, [r2, #0]
 8025180:	2bff      	cmp	r3, #255	; 0xff
 8025182:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025186:	f040 8099 	bne.w	80252bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802518a:	0953      	lsrs	r3, r2, #5
 802518c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8025190:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025194:	f02c 0c07 	bic.w	ip, ip, #7
 8025198:	ea43 0c0c 	orr.w	ip, r3, ip
 802519c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80251a0:	ea4c 0202 	orr.w	r2, ip, r2
 80251a4:	f8a8 2000 	strh.w	r2, [r8]
 80251a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80251aa:	441c      	add	r4, r3
 80251ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80251ae:	441e      	add	r6, r3
 80251b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80251b2:	3b01      	subs	r3, #1
 80251b4:	f108 0802 	add.w	r8, r8, #2
 80251b8:	930e      	str	r3, [sp, #56]	; 0x38
 80251ba:	e763      	b.n	8025084 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80251bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80251be:	441c      	add	r4, r3
 80251c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80251c2:	441e      	add	r6, r3
 80251c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251c6:	3b01      	subs	r3, #1
 80251c8:	9309      	str	r3, [sp, #36]	; 0x24
 80251ca:	f109 0902 	add.w	r9, r9, #2
 80251ce:	e737      	b.n	8025040 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80251d0:	d024      	beq.n	802521c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80251d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251d4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80251d6:	3b01      	subs	r3, #1
 80251d8:	fb00 4003 	mla	r0, r0, r3, r4
 80251dc:	1400      	asrs	r0, r0, #16
 80251de:	f53f af4c 	bmi.w	802507a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80251e2:	3901      	subs	r1, #1
 80251e4:	4288      	cmp	r0, r1
 80251e6:	f6bf af48 	bge.w	802507a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80251ea:	9924      	ldr	r1, [sp, #144]	; 0x90
 80251ec:	fb01 6303 	mla	r3, r1, r3, r6
 80251f0:	141b      	asrs	r3, r3, #16
 80251f2:	f53f af42 	bmi.w	802507a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80251f6:	3a01      	subs	r2, #1
 80251f8:	4293      	cmp	r3, r2
 80251fa:	f6bf af3e 	bge.w	802507a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80251fe:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8025202:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025206:	930e      	str	r3, [sp, #56]	; 0x38
 8025208:	46c8      	mov	r8, r9
 802520a:	f1bb 0f00 	cmp.w	fp, #0
 802520e:	f300 80b7 	bgt.w	8025380 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8025212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025214:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025218:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802521c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802521e:	2b00      	cmp	r3, #0
 8025220:	f340 818d 	ble.w	802553e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8025224:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802522c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025230:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025232:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025236:	ee31 1a05 	vadd.f32	s2, s2, s10
 802523a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802523e:	eef0 6a62 	vmov.f32	s13, s5
 8025242:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025246:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802524a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802524e:	ee16 4a90 	vmov	r4, s13
 8025252:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025256:	eef0 6a43 	vmov.f32	s13, s6
 802525a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802525e:	ee12 2a90 	vmov	r2, s5
 8025262:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025266:	fb92 f3f3 	sdiv	r3, r2, r3
 802526a:	ee13 2a10 	vmov	r2, s6
 802526e:	9323      	str	r3, [sp, #140]	; 0x8c
 8025270:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025272:	fb92 f3f3 	sdiv	r3, r2, r3
 8025276:	9324      	str	r3, [sp, #144]	; 0x90
 8025278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802527a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802527c:	3b01      	subs	r3, #1
 802527e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025282:	930d      	str	r3, [sp, #52]	; 0x34
 8025284:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025286:	bf08      	it	eq
 8025288:	4613      	moveq	r3, r2
 802528a:	ee16 6a90 	vmov	r6, s13
 802528e:	9309      	str	r3, [sp, #36]	; 0x24
 8025290:	eeb0 3a67 	vmov.f32	s6, s15
 8025294:	eef0 2a47 	vmov.f32	s5, s14
 8025298:	e6c3      	b.n	8025022 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802529a:	2900      	cmp	r1, #0
 802529c:	f43f af4d 	beq.w	802513a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80252a0:	eb0a 0003 	add.w	r0, sl, r3
 80252a4:	0843      	lsrs	r3, r0, #1
 80252a6:	07c0      	lsls	r0, r0, #31
 80252a8:	5cfb      	ldrb	r3, [r7, r3]
 80252aa:	bf54      	ite	pl
 80252ac:	f003 030f 	andpl.w	r3, r3, #15
 80252b0:	111b      	asrmi	r3, r3, #4
 80252b2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80252b6:	b2db      	uxtb	r3, r3
 80252b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80252ba:	e73e      	b.n	802513a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80252bc:	f8b8 e000 	ldrh.w	lr, [r8]
 80252c0:	fa1f fb83 	uxth.w	fp, r3
 80252c4:	ea4f 202e 	mov.w	r0, lr, asr #8
 80252c8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80252cc:	43db      	mvns	r3, r3
 80252ce:	b2db      	uxtb	r3, r3
 80252d0:	fb11 f10b 	smulbb	r1, r1, fp
 80252d4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80252d8:	fb00 1003 	mla	r0, r0, r3, r1
 80252dc:	fa5f fc8c 	uxtb.w	ip, ip
 80252e0:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80252e4:	b2d2      	uxtb	r2, r2
 80252e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80252ea:	b280      	uxth	r0, r0
 80252ec:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80252f0:	fb1c fc0b 	smulbb	ip, ip, fp
 80252f4:	fa5f fe8e 	uxtb.w	lr, lr
 80252f8:	fb12 fb0b 	smulbb	fp, r2, fp
 80252fc:	fb01 cc03 	mla	ip, r1, r3, ip
 8025300:	fb0e bb03 	mla	fp, lr, r3, fp
 8025304:	1c43      	adds	r3, r0, #1
 8025306:	fa1f fc8c 	uxth.w	ip, ip
 802530a:	fa1f fb8b 	uxth.w	fp, fp
 802530e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025312:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8025316:	f10c 0101 	add.w	r1, ip, #1
 802531a:	f10b 0001 	add.w	r0, fp, #1
 802531e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025322:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025326:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802532a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802532e:	4318      	orrs	r0, r3
 8025330:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025334:	ea40 000c 	orr.w	r0, r0, ip
 8025338:	f8a8 0000 	strh.w	r0, [r8]
 802533c:	e734      	b.n	80251a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802533e:	f113 0b01 	adds.w	fp, r3, #1
 8025342:	f53f af31 	bmi.w	80251a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025346:	45dc      	cmp	ip, fp
 8025348:	f6ff af2e 	blt.w	80251a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802534c:	f110 0b01 	adds.w	fp, r0, #1
 8025350:	f53f af2a 	bmi.w	80251a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025354:	45de      	cmp	lr, fp
 8025356:	f6ff af27 	blt.w	80251a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802535a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802535c:	9302      	str	r3, [sp, #8]
 802535e:	fa0f f38e 	sxth.w	r3, lr
 8025362:	9301      	str	r3, [sp, #4]
 8025364:	fa0f f38c 	sxth.w	r3, ip
 8025368:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802536c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8025370:	9300      	str	r3, [sp, #0]
 8025372:	463a      	mov	r2, r7
 8025374:	4653      	mov	r3, sl
 8025376:	4641      	mov	r1, r8
 8025378:	9815      	ldr	r0, [sp, #84]	; 0x54
 802537a:	f7ff fd4d 	bl	8024e18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802537e:	e713      	b.n	80251a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025380:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025382:	1422      	asrs	r2, r4, #16
 8025384:	1433      	asrs	r3, r6, #16
 8025386:	fb05 2303 	mla	r3, r5, r3, r2
 802538a:	085a      	lsrs	r2, r3, #1
 802538c:	07dd      	lsls	r5, r3, #31
 802538e:	5cba      	ldrb	r2, [r7, r2]
 8025390:	bf54      	ite	pl
 8025392:	f002 020f 	andpl.w	r2, r2, #15
 8025396:	1112      	asrmi	r2, r2, #4
 8025398:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802539c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80253a0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80253a4:	b2d2      	uxtb	r2, r2
 80253a6:	2900      	cmp	r1, #0
 80253a8:	d076      	beq.n	8025498 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80253aa:	f103 0e01 	add.w	lr, r3, #1
 80253ae:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80253b2:	f01e 0f01 	tst.w	lr, #1
 80253b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80253ba:	bf0c      	ite	eq
 80253bc:	f00c 0c0f 	andeq.w	ip, ip, #15
 80253c0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80253c4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80253c8:	fa5f f58c 	uxtb.w	r5, ip
 80253cc:	9512      	str	r5, [sp, #72]	; 0x48
 80253ce:	b300      	cbz	r0, 8025412 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80253d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80253d2:	442b      	add	r3, r5
 80253d4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80253d8:	07dd      	lsls	r5, r3, #31
 80253da:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80253de:	bf54      	ite	pl
 80253e0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80253e4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80253e8:	3301      	adds	r3, #1
 80253ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80253ee:	fa5f f58c 	uxtb.w	r5, ip
 80253f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80253f6:	950c      	str	r5, [sp, #48]	; 0x30
 80253f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80253fc:	07dd      	lsls	r5, r3, #31
 80253fe:	bf54      	ite	pl
 8025400:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025404:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025408:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802540c:	fa5f f38c 	uxtb.w	r3, ip
 8025410:	9313      	str	r3, [sp, #76]	; 0x4c
 8025412:	b289      	uxth	r1, r1
 8025414:	b280      	uxth	r0, r0
 8025416:	fb01 f300 	mul.w	r3, r1, r0
 802541a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802541e:	0109      	lsls	r1, r1, #4
 8025420:	b280      	uxth	r0, r0
 8025422:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8025426:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025428:	1ac9      	subs	r1, r1, r3
 802542a:	ebac 0c00 	sub.w	ip, ip, r0
 802542e:	b289      	uxth	r1, r1
 8025430:	4369      	muls	r1, r5
 8025432:	fa1f fc8c 	uxth.w	ip, ip
 8025436:	fb02 120c 	mla	r2, r2, ip, r1
 802543a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802543c:	fb00 2001 	mla	r0, r0, r1, r2
 8025440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025442:	fb03 0302 	mla	r3, r3, r2, r0
 8025446:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802544a:	b1d3      	cbz	r3, 8025482 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802544c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802544e:	4353      	muls	r3, r2
 8025450:	1c5a      	adds	r2, r3, #1
 8025452:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025456:	4a0f      	ldr	r2, [pc, #60]	; (8025494 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8025458:	121b      	asrs	r3, r3, #8
 802545a:	6812      	ldr	r2, [r2, #0]
 802545c:	2bff      	cmp	r3, #255	; 0xff
 802545e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025462:	d12d      	bne.n	80254c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025464:	0953      	lsrs	r3, r2, #5
 8025466:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802546a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802546e:	f02c 0c07 	bic.w	ip, ip, #7
 8025472:	ea43 0c0c 	orr.w	ip, r3, ip
 8025476:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802547a:	ea4c 0202 	orr.w	r2, ip, r2
 802547e:	f8a8 2000 	strh.w	r2, [r8]
 8025482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025484:	441c      	add	r4, r3
 8025486:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025488:	f108 0802 	add.w	r8, r8, #2
 802548c:	441e      	add	r6, r3
 802548e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025492:	e6ba      	b.n	802520a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8025494:	20025864 	.word	0x20025864
 8025498:	2800      	cmp	r0, #0
 802549a:	d0ba      	beq.n	8025412 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802549c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802549e:	442b      	add	r3, r5
 80254a0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80254a4:	07db      	lsls	r3, r3, #31
 80254a6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80254aa:	bf54      	ite	pl
 80254ac:	f00c 0c0f 	andpl.w	ip, ip, #15
 80254b0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80254b4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80254b8:	fa5f f38c 	uxtb.w	r3, ip
 80254bc:	930c      	str	r3, [sp, #48]	; 0x30
 80254be:	e7a8      	b.n	8025412 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80254c0:	f8b8 e000 	ldrh.w	lr, [r8]
 80254c4:	fa1f fa83 	uxth.w	sl, r3
 80254c8:	ea4f 202e 	mov.w	r0, lr, asr #8
 80254cc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80254d0:	43db      	mvns	r3, r3
 80254d2:	b2db      	uxtb	r3, r3
 80254d4:	fb11 f10a 	smulbb	r1, r1, sl
 80254d8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80254dc:	fb00 1003 	mla	r0, r0, r3, r1
 80254e0:	b2d2      	uxtb	r2, r2
 80254e2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80254e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80254ea:	fa5f fe8e 	uxtb.w	lr, lr
 80254ee:	fb12 f20a 	smulbb	r2, r2, sl
 80254f2:	fb0e 2203 	mla	r2, lr, r3, r2
 80254f6:	fa5f fc8c 	uxtb.w	ip, ip
 80254fa:	b280      	uxth	r0, r0
 80254fc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025500:	b292      	uxth	r2, r2
 8025502:	fb1c fc0a 	smulbb	ip, ip, sl
 8025506:	fb01 cc03 	mla	ip, r1, r3, ip
 802550a:	1c43      	adds	r3, r0, #1
 802550c:	1c51      	adds	r1, r2, #1
 802550e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025512:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8025516:	fa1f fc8c 	uxth.w	ip, ip
 802551a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802551e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025522:	4308      	orrs	r0, r1
 8025524:	f10c 0101 	add.w	r1, ip, #1
 8025528:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802552c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025530:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025534:	ea40 000c 	orr.w	r0, r0, ip
 8025538:	f8a8 0000 	strh.w	r0, [r8]
 802553c:	e7a1      	b.n	8025482 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802553e:	b017      	add	sp, #92	; 0x5c
 8025540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025544 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8025544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025548:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802554c:	2d00      	cmp	r5, #0
 802554e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8025552:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025556:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802555a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802555e:	fb05 0e03 	mla	lr, r5, r3, r0
 8025562:	f2c0 80b0 	blt.w	80256c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025566:	45a9      	cmp	r9, r5
 8025568:	f340 80ad 	ble.w	80256c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802556c:	2800      	cmp	r0, #0
 802556e:	f2c0 80a8 	blt.w	80256c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025572:	4580      	cmp	r8, r0
 8025574:	f340 80a5 	ble.w	80256c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025578:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802557c:	f01e 0f01 	tst.w	lr, #1
 8025580:	5d16      	ldrb	r6, [r2, r4]
 8025582:	bf0c      	ite	eq
 8025584:	f006 060f 	andeq.w	r6, r6, #15
 8025588:	1136      	asrne	r6, r6, #4
 802558a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802558e:	b2f6      	uxtb	r6, r6
 8025590:	1c44      	adds	r4, r0, #1
 8025592:	f100 809b 	bmi.w	80256cc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025596:	45a0      	cmp	r8, r4
 8025598:	f340 8098 	ble.w	80256cc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802559c:	2f00      	cmp	r7, #0
 802559e:	f000 8097 	beq.w	80256d0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80255a2:	f10e 0a01 	add.w	sl, lr, #1
 80255a6:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80255aa:	f01a 0f01 	tst.w	sl, #1
 80255ae:	5d14      	ldrb	r4, [r2, r4]
 80255b0:	bf0c      	ite	eq
 80255b2:	f004 040f 	andeq.w	r4, r4, #15
 80255b6:	1124      	asrne	r4, r4, #4
 80255b8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80255bc:	b2e4      	uxtb	r4, r4
 80255be:	3501      	adds	r5, #1
 80255c0:	f100 808a 	bmi.w	80256d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80255c4:	45a9      	cmp	r9, r5
 80255c6:	f340 8087 	ble.w	80256d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80255ca:	f1bc 0f00 	cmp.w	ip, #0
 80255ce:	f000 8086 	beq.w	80256de <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 80255d2:	2800      	cmp	r0, #0
 80255d4:	db7e      	blt.n	80256d4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80255d6:	4580      	cmp	r8, r0
 80255d8:	dd7c      	ble.n	80256d4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80255da:	eb03 090e 	add.w	r9, r3, lr
 80255de:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80255e2:	f019 0f01 	tst.w	r9, #1
 80255e6:	5d55      	ldrb	r5, [r2, r5]
 80255e8:	bf0c      	ite	eq
 80255ea:	f005 050f 	andeq.w	r5, r5, #15
 80255ee:	112d      	asrne	r5, r5, #4
 80255f0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80255f4:	b2ed      	uxtb	r5, r5
 80255f6:	3001      	adds	r0, #1
 80255f8:	d474      	bmi.n	80256e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80255fa:	4580      	cmp	r8, r0
 80255fc:	dd72      	ble.n	80256e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80255fe:	2f00      	cmp	r7, #0
 8025600:	d072      	beq.n	80256e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8025602:	3301      	adds	r3, #1
 8025604:	449e      	add	lr, r3
 8025606:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802560a:	f01e 0f01 	tst.w	lr, #1
 802560e:	5cd0      	ldrb	r0, [r2, r3]
 8025610:	bf0c      	ite	eq
 8025612:	f000 000f 	andeq.w	r0, r0, #15
 8025616:	1100      	asrne	r0, r0, #4
 8025618:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802561c:	b2c3      	uxtb	r3, r0
 802561e:	b2ba      	uxth	r2, r7
 8025620:	fa1f fc8c 	uxth.w	ip, ip
 8025624:	fb02 f00c 	mul.w	r0, r2, ip
 8025628:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802562c:	0112      	lsls	r2, r2, #4
 802562e:	fa1f fc8c 	uxth.w	ip, ip
 8025632:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025636:	1a12      	subs	r2, r2, r0
 8025638:	eba7 070c 	sub.w	r7, r7, ip
 802563c:	b292      	uxth	r2, r2
 802563e:	b2bf      	uxth	r7, r7
 8025640:	4362      	muls	r2, r4
 8025642:	fb06 2207 	mla	r2, r6, r7, r2
 8025646:	fb0c 2505 	mla	r5, ip, r5, r2
 802564a:	fb00 5303 	mla	r3, r0, r3, r5
 802564e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025652:	b3a3      	cbz	r3, 80256be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8025654:	4a25      	ldr	r2, [pc, #148]	; (80256ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8025656:	880e      	ldrh	r6, [r1, #0]
 8025658:	6815      	ldr	r5, [r2, #0]
 802565a:	1234      	asrs	r4, r6, #8
 802565c:	b29a      	uxth	r2, r3
 802565e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8025662:	43db      	mvns	r3, r3
 8025664:	b2db      	uxtb	r3, r3
 8025666:	fb10 f002 	smulbb	r0, r0, r2
 802566a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802566e:	fb04 0403 	mla	r4, r4, r3, r0
 8025672:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8025676:	10f0      	asrs	r0, r6, #3
 8025678:	b2ed      	uxtb	r5, r5
 802567a:	00f6      	lsls	r6, r6, #3
 802567c:	fb17 f702 	smulbb	r7, r7, r2
 8025680:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025684:	fb15 f202 	smulbb	r2, r5, r2
 8025688:	b2f6      	uxtb	r6, r6
 802568a:	b2a4      	uxth	r4, r4
 802568c:	fb00 7003 	mla	r0, r0, r3, r7
 8025690:	fb06 2303 	mla	r3, r6, r3, r2
 8025694:	b29a      	uxth	r2, r3
 8025696:	1c63      	adds	r3, r4, #1
 8025698:	b280      	uxth	r0, r0
 802569a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802569e:	1c53      	adds	r3, r2, #1
 80256a0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80256a4:	1c42      	adds	r2, r0, #1
 80256a6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80256aa:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80256ae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80256b2:	0940      	lsrs	r0, r0, #5
 80256b4:	4323      	orrs	r3, r4
 80256b6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80256ba:	4303      	orrs	r3, r0
 80256bc:	800b      	strh	r3, [r1, #0]
 80256be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80256c2:	2600      	movs	r6, #0
 80256c4:	e764      	b.n	8025590 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 80256c6:	2400      	movs	r4, #0
 80256c8:	4626      	mov	r6, r4
 80256ca:	e778      	b.n	80255be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80256cc:	2400      	movs	r4, #0
 80256ce:	e776      	b.n	80255be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80256d0:	463c      	mov	r4, r7
 80256d2:	e774      	b.n	80255be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80256d4:	2500      	movs	r5, #0
 80256d6:	e78e      	b.n	80255f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 80256d8:	2300      	movs	r3, #0
 80256da:	461d      	mov	r5, r3
 80256dc:	e79f      	b.n	802561e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80256de:	4663      	mov	r3, ip
 80256e0:	4665      	mov	r5, ip
 80256e2:	e79c      	b.n	802561e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80256e4:	2300      	movs	r3, #0
 80256e6:	e79a      	b.n	802561e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80256e8:	463b      	mov	r3, r7
 80256ea:	e798      	b.n	802561e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80256ec:	20025864 	.word	0x20025864

080256f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80256f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256f4:	b093      	sub	sp, #76	; 0x4c
 80256f6:	461d      	mov	r5, r3
 80256f8:	920c      	str	r2, [sp, #48]	; 0x30
 80256fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80256fc:	9107      	str	r1, [sp, #28]
 80256fe:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025702:	9011      	str	r0, [sp, #68]	; 0x44
 8025704:	6850      	ldr	r0, [r2, #4]
 8025706:	6812      	ldr	r2, [r2, #0]
 8025708:	fb00 1303 	mla	r3, r0, r3, r1
 802570c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025710:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025712:	689b      	ldr	r3, [r3, #8]
 8025714:	3301      	adds	r3, #1
 8025716:	f023 0301 	bic.w	r3, r3, #1
 802571a:	9306      	str	r3, [sp, #24]
 802571c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802571e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8025722:	681f      	ldr	r7, [r3, #0]
 8025724:	9b07      	ldr	r3, [sp, #28]
 8025726:	2b00      	cmp	r3, #0
 8025728:	dc03      	bgt.n	8025732 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802572a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802572c:	2b00      	cmp	r3, #0
 802572e:	f340 8267 	ble.w	8025c00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8025732:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025734:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025738:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802573c:	1e48      	subs	r0, r1, #1
 802573e:	f102 3cff 	add.w	ip, r2, #4294967295
 8025742:	2d00      	cmp	r5, #0
 8025744:	f340 80b8 	ble.w	80258b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8025748:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802574c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025750:	d406      	bmi.n	8025760 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025752:	4586      	cmp	lr, r0
 8025754:	da04      	bge.n	8025760 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025756:	2b00      	cmp	r3, #0
 8025758:	db02      	blt.n	8025760 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802575a:	4563      	cmp	r3, ip
 802575c:	f2c0 80ad 	blt.w	80258ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8025760:	f11e 0e01 	adds.w	lr, lr, #1
 8025764:	f100 80a0 	bmi.w	80258a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025768:	4571      	cmp	r1, lr
 802576a:	f2c0 809d 	blt.w	80258a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802576e:	3301      	adds	r3, #1
 8025770:	f100 809a 	bmi.w	80258a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025774:	429a      	cmp	r2, r3
 8025776:	f2c0 8097 	blt.w	80258a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802577a:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802577e:	9509      	str	r5, [sp, #36]	; 0x24
 8025780:	46c8      	mov	r8, r9
 8025782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025784:	2b00      	cmp	r3, #0
 8025786:	f340 80b6 	ble.w	80258f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802578a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802578e:	9308      	str	r3, [sp, #32]
 8025790:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025792:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025796:	1423      	asrs	r3, r4, #16
 8025798:	ea4f 4026 	mov.w	r0, r6, asr #16
 802579c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80257a0:	f100 813e 	bmi.w	8025a20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80257a4:	f10c 3bff 	add.w	fp, ip, #4294967295
 80257a8:	455b      	cmp	r3, fp
 80257aa:	f280 8139 	bge.w	8025a20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80257ae:	2800      	cmp	r0, #0
 80257b0:	f2c0 8136 	blt.w	8025a20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80257b4:	f10e 3bff 	add.w	fp, lr, #4294967295
 80257b8:	4558      	cmp	r0, fp
 80257ba:	f280 8131 	bge.w	8025a20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80257be:	9a06      	ldr	r2, [sp, #24]
 80257c0:	fb00 3302 	mla	r3, r0, r2, r3
 80257c4:	0858      	lsrs	r0, r3, #1
 80257c6:	07da      	lsls	r2, r3, #31
 80257c8:	f817 c000 	ldrb.w	ip, [r7, r0]
 80257cc:	9a08      	ldr	r2, [sp, #32]
 80257ce:	bf54      	ite	pl
 80257d0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80257d4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80257d8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80257dc:	fa5f fc8c 	uxtb.w	ip, ip
 80257e0:	2a00      	cmp	r2, #0
 80257e2:	f000 80cb 	beq.w	802597c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80257e6:	1c58      	adds	r0, r3, #1
 80257e8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80257ec:	07c0      	lsls	r0, r0, #31
 80257ee:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80257f2:	bf54      	ite	pl
 80257f4:	f00e 0e0f 	andpl.w	lr, lr, #15
 80257f8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80257fc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8025800:	fa5f fe8e 	uxtb.w	lr, lr
 8025804:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8025808:	b1b9      	cbz	r1, 802583a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802580a:	4453      	add	r3, sl
 802580c:	0858      	lsrs	r0, r3, #1
 802580e:	07da      	lsls	r2, r3, #31
 8025810:	5c38      	ldrb	r0, [r7, r0]
 8025812:	bf54      	ite	pl
 8025814:	f000 000f 	andpl.w	r0, r0, #15
 8025818:	1100      	asrmi	r0, r0, #4
 802581a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802581e:	b2c0      	uxtb	r0, r0
 8025820:	900a      	str	r0, [sp, #40]	; 0x28
 8025822:	1c58      	adds	r0, r3, #1
 8025824:	0843      	lsrs	r3, r0, #1
 8025826:	07c2      	lsls	r2, r0, #31
 8025828:	5cfb      	ldrb	r3, [r7, r3]
 802582a:	bf54      	ite	pl
 802582c:	f003 030f 	andpl.w	r3, r3, #15
 8025830:	111b      	asrmi	r3, r3, #4
 8025832:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025836:	b2db      	uxtb	r3, r3
 8025838:	930e      	str	r3, [sp, #56]	; 0x38
 802583a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802583e:	b289      	uxth	r1, r1
 8025840:	fb02 f301 	mul.w	r3, r2, r1
 8025844:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025848:	0112      	lsls	r2, r2, #4
 802584a:	b289      	uxth	r1, r1
 802584c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8025850:	1a40      	subs	r0, r0, r1
 8025852:	fa1f fe80 	uxth.w	lr, r0
 8025856:	1ad2      	subs	r2, r2, r3
 8025858:	980d      	ldr	r0, [sp, #52]	; 0x34
 802585a:	b292      	uxth	r2, r2
 802585c:	4342      	muls	r2, r0
 802585e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8025862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025864:	fb01 c102 	mla	r1, r1, r2, ip
 8025868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802586a:	fb03 1302 	mla	r3, r3, r2, r1
 802586e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025872:	2bff      	cmp	r3, #255	; 0xff
 8025874:	f040 8093 	bne.w	802599e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8025878:	4bbe      	ldr	r3, [pc, #760]	; (8025b74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802587a:	681a      	ldr	r2, [r3, #0]
 802587c:	4bbe      	ldr	r3, [pc, #760]	; (8025b78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802587e:	0951      	lsrs	r1, r2, #5
 8025880:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025884:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025888:	430b      	orrs	r3, r1
 802588a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802588e:	4313      	orrs	r3, r2
 8025890:	f8a8 3000 	strh.w	r3, [r8]
 8025894:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025896:	441c      	add	r4, r3
 8025898:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802589a:	441e      	add	r6, r3
 802589c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802589e:	3b01      	subs	r3, #1
 80258a0:	f108 0802 	add.w	r8, r8, #2
 80258a4:	9309      	str	r3, [sp, #36]	; 0x24
 80258a6:	e76c      	b.n	8025782 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80258a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80258aa:	441c      	add	r4, r3
 80258ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80258ae:	3d01      	subs	r5, #1
 80258b0:	441e      	add	r6, r3
 80258b2:	f109 0902 	add.w	r9, r9, #2
 80258b6:	e744      	b.n	8025742 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80258b8:	d021      	beq.n	80258fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80258ba:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80258bc:	1e6b      	subs	r3, r5, #1
 80258be:	fb00 4003 	mla	r0, r0, r3, r4
 80258c2:	1400      	asrs	r0, r0, #16
 80258c4:	f53f af59 	bmi.w	802577a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80258c8:	3901      	subs	r1, #1
 80258ca:	4288      	cmp	r0, r1
 80258cc:	f6bf af55 	bge.w	802577a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80258d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80258d2:	fb01 6303 	mla	r3, r1, r3, r6
 80258d6:	141b      	asrs	r3, r3, #16
 80258d8:	f53f af4f 	bmi.w	802577a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80258dc:	3a01      	subs	r2, #1
 80258de:	4293      	cmp	r3, r2
 80258e0:	f6bf af4b 	bge.w	802577a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80258e4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80258e8:	9308      	str	r3, [sp, #32]
 80258ea:	46a8      	mov	r8, r5
 80258ec:	46ce      	mov	lr, r9
 80258ee:	f1b8 0f00 	cmp.w	r8, #0
 80258f2:	f300 80b5 	bgt.w	8025a60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80258f6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80258fa:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80258fe:	9b07      	ldr	r3, [sp, #28]
 8025900:	2b00      	cmp	r3, #0
 8025902:	f340 817d 	ble.w	8025c00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8025906:	ee30 0a04 	vadd.f32	s0, s0, s8
 802590a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802590e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025912:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025914:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025918:	ee31 1a05 	vadd.f32	s2, s2, s10
 802591c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025920:	eef0 6a62 	vmov.f32	s13, s5
 8025924:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025928:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802592c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025930:	ee16 4a90 	vmov	r4, s13
 8025934:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025938:	eef0 6a43 	vmov.f32	s13, s6
 802593c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025940:	ee12 2a90 	vmov	r2, s5
 8025944:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025948:	fb92 f3f3 	sdiv	r3, r2, r3
 802594c:	ee13 2a10 	vmov	r2, s6
 8025950:	931f      	str	r3, [sp, #124]	; 0x7c
 8025952:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025954:	fb92 f3f3 	sdiv	r3, r2, r3
 8025958:	9320      	str	r3, [sp, #128]	; 0x80
 802595a:	9b07      	ldr	r3, [sp, #28]
 802595c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802595e:	3b01      	subs	r3, #1
 8025960:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025964:	9307      	str	r3, [sp, #28]
 8025966:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025968:	ee16 6a90 	vmov	r6, s13
 802596c:	bf14      	ite	ne
 802596e:	461d      	movne	r5, r3
 8025970:	4615      	moveq	r5, r2
 8025972:	eeb0 3a67 	vmov.f32	s6, s15
 8025976:	eef0 2a47 	vmov.f32	s5, s14
 802597a:	e6d3      	b.n	8025724 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802597c:	2900      	cmp	r1, #0
 802597e:	f43f af5c 	beq.w	802583a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8025982:	eb0a 0003 	add.w	r0, sl, r3
 8025986:	0843      	lsrs	r3, r0, #1
 8025988:	07c0      	lsls	r0, r0, #31
 802598a:	5cfb      	ldrb	r3, [r7, r3]
 802598c:	bf54      	ite	pl
 802598e:	f003 030f 	andpl.w	r3, r3, #15
 8025992:	111b      	asrmi	r3, r3, #4
 8025994:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025998:	b2db      	uxtb	r3, r3
 802599a:	930a      	str	r3, [sp, #40]	; 0x28
 802599c:	e74d      	b.n	802583a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802599e:	2b00      	cmp	r3, #0
 80259a0:	f43f af78 	beq.w	8025894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80259a4:	4a73      	ldr	r2, [pc, #460]	; (8025b74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80259a6:	f8b8 c000 	ldrh.w	ip, [r8]
 80259aa:	6810      	ldr	r0, [r2, #0]
 80259ac:	fa1f fe83 	uxth.w	lr, r3
 80259b0:	ea4f 212c 	mov.w	r1, ip, asr #8
 80259b4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80259b8:	43db      	mvns	r3, r3
 80259ba:	b2db      	uxtb	r3, r3
 80259bc:	fb12 f20e 	smulbb	r2, r2, lr
 80259c0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80259c4:	fb01 2103 	mla	r1, r1, r3, r2
 80259c8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80259cc:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80259d0:	b2c0      	uxtb	r0, r0
 80259d2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80259d6:	fb1b fb0e 	smulbb	fp, fp, lr
 80259da:	b289      	uxth	r1, r1
 80259dc:	fb10 fe0e 	smulbb	lr, r0, lr
 80259e0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80259e4:	fa5f fc8c 	uxtb.w	ip, ip
 80259e8:	fb02 b203 	mla	r2, r2, r3, fp
 80259ec:	1c48      	adds	r0, r1, #1
 80259ee:	fb0c e303 	mla	r3, ip, r3, lr
 80259f2:	b292      	uxth	r2, r2
 80259f4:	b29b      	uxth	r3, r3
 80259f6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80259fa:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80259fe:	f102 0b01 	add.w	fp, r2, #1
 8025a02:	1c59      	adds	r1, r3, #1
 8025a04:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025a08:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8025a0c:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8025a10:	0952      	lsrs	r2, r2, #5
 8025a12:	4301      	orrs	r1, r0
 8025a14:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025a18:	4311      	orrs	r1, r2
 8025a1a:	f8a8 1000 	strh.w	r1, [r8]
 8025a1e:	e739      	b.n	8025894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025a20:	f113 0b01 	adds.w	fp, r3, #1
 8025a24:	f53f af36 	bmi.w	8025894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025a28:	45dc      	cmp	ip, fp
 8025a2a:	f6ff af33 	blt.w	8025894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025a2e:	f110 0b01 	adds.w	fp, r0, #1
 8025a32:	f53f af2f 	bmi.w	8025894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025a36:	45de      	cmp	lr, fp
 8025a38:	f6ff af2c 	blt.w	8025894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025a3c:	9a08      	ldr	r2, [sp, #32]
 8025a3e:	9302      	str	r3, [sp, #8]
 8025a40:	fa0f f38e 	sxth.w	r3, lr
 8025a44:	9301      	str	r3, [sp, #4]
 8025a46:	fa0f f38c 	sxth.w	r3, ip
 8025a4a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025a4e:	9105      	str	r1, [sp, #20]
 8025a50:	9300      	str	r3, [sp, #0]
 8025a52:	463a      	mov	r2, r7
 8025a54:	4653      	mov	r3, sl
 8025a56:	4641      	mov	r1, r8
 8025a58:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025a5a:	f7ff fd73 	bl	8025544 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8025a5e:	e719      	b.n	8025894 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025a60:	9906      	ldr	r1, [sp, #24]
 8025a62:	1422      	asrs	r2, r4, #16
 8025a64:	1433      	asrs	r3, r6, #16
 8025a66:	fb01 2303 	mla	r3, r1, r3, r2
 8025a6a:	085a      	lsrs	r2, r3, #1
 8025a6c:	07d9      	lsls	r1, r3, #31
 8025a6e:	5cba      	ldrb	r2, [r7, r2]
 8025a70:	bf54      	ite	pl
 8025a72:	f002 020f 	andpl.w	r2, r2, #15
 8025a76:	1112      	asrmi	r2, r2, #4
 8025a78:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025a7c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025a80:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025a84:	b2d2      	uxtb	r2, r2
 8025a86:	2800      	cmp	r0, #0
 8025a88:	d062      	beq.n	8025b50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8025a8a:	f103 0a01 	add.w	sl, r3, #1
 8025a8e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8025a92:	f01a 0f01 	tst.w	sl, #1
 8025a96:	5c79      	ldrb	r1, [r7, r1]
 8025a98:	bf0c      	ite	eq
 8025a9a:	f001 010f 	andeq.w	r1, r1, #15
 8025a9e:	1109      	asrne	r1, r1, #4
 8025aa0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025aa4:	b2c9      	uxtb	r1, r1
 8025aa6:	910f      	str	r1, [sp, #60]	; 0x3c
 8025aa8:	f1bc 0f00 	cmp.w	ip, #0
 8025aac:	d019      	beq.n	8025ae2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8025aae:	9908      	ldr	r1, [sp, #32]
 8025ab0:	440b      	add	r3, r1
 8025ab2:	0859      	lsrs	r1, r3, #1
 8025ab4:	f013 0f01 	tst.w	r3, #1
 8025ab8:	5c79      	ldrb	r1, [r7, r1]
 8025aba:	bf0c      	ite	eq
 8025abc:	f001 010f 	andeq.w	r1, r1, #15
 8025ac0:	1109      	asrne	r1, r1, #4
 8025ac2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025ac6:	b2c9      	uxtb	r1, r1
 8025ac8:	3301      	adds	r3, #1
 8025aca:	910b      	str	r1, [sp, #44]	; 0x2c
 8025acc:	0859      	lsrs	r1, r3, #1
 8025ace:	07db      	lsls	r3, r3, #31
 8025ad0:	5c79      	ldrb	r1, [r7, r1]
 8025ad2:	bf54      	ite	pl
 8025ad4:	f001 010f 	andpl.w	r1, r1, #15
 8025ad8:	1109      	asrmi	r1, r1, #4
 8025ada:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025ade:	b2c9      	uxtb	r1, r1
 8025ae0:	9110      	str	r1, [sp, #64]	; 0x40
 8025ae2:	b280      	uxth	r0, r0
 8025ae4:	fa1f fc8c 	uxth.w	ip, ip
 8025ae8:	fb00 f30c 	mul.w	r3, r0, ip
 8025aec:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8025af0:	0100      	lsls	r0, r0, #4
 8025af2:	fa1f fc8c 	uxth.w	ip, ip
 8025af6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8025afa:	eba1 010c 	sub.w	r1, r1, ip
 8025afe:	fa1f fa81 	uxth.w	sl, r1
 8025b02:	1ac0      	subs	r0, r0, r3
 8025b04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025b06:	b280      	uxth	r0, r0
 8025b08:	4348      	muls	r0, r1
 8025b0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025b0c:	fb02 020a 	mla	r2, r2, sl, r0
 8025b10:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025b14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025b16:	fb03 c302 	mla	r3, r3, r2, ip
 8025b1a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025b1e:	2bff      	cmp	r3, #255	; 0xff
 8025b20:	d12c      	bne.n	8025b7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025b22:	4b14      	ldr	r3, [pc, #80]	; (8025b74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025b24:	681a      	ldr	r2, [r3, #0]
 8025b26:	4b14      	ldr	r3, [pc, #80]	; (8025b78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8025b28:	0951      	lsrs	r1, r2, #5
 8025b2a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025b2e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025b32:	430b      	orrs	r3, r1
 8025b34:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025b38:	4313      	orrs	r3, r2
 8025b3a:	f8ae 3000 	strh.w	r3, [lr]
 8025b3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025b40:	441c      	add	r4, r3
 8025b42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b44:	f10e 0e02 	add.w	lr, lr, #2
 8025b48:	441e      	add	r6, r3
 8025b4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8025b4e:	e6ce      	b.n	80258ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8025b50:	f1bc 0f00 	cmp.w	ip, #0
 8025b54:	d0c5      	beq.n	8025ae2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8025b56:	9908      	ldr	r1, [sp, #32]
 8025b58:	440b      	add	r3, r1
 8025b5a:	0859      	lsrs	r1, r3, #1
 8025b5c:	07db      	lsls	r3, r3, #31
 8025b5e:	5c79      	ldrb	r1, [r7, r1]
 8025b60:	bf54      	ite	pl
 8025b62:	f001 010f 	andpl.w	r1, r1, #15
 8025b66:	1109      	asrmi	r1, r1, #4
 8025b68:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025b6c:	b2c9      	uxtb	r1, r1
 8025b6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8025b70:	e7b7      	b.n	8025ae2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8025b72:	bf00      	nop
 8025b74:	20025864 	.word	0x20025864
 8025b78:	fffff800 	.word	0xfffff800
 8025b7c:	2b00      	cmp	r3, #0
 8025b7e:	d0de      	beq.n	8025b3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8025b80:	4a21      	ldr	r2, [pc, #132]	; (8025c08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8025b82:	f8be c000 	ldrh.w	ip, [lr]
 8025b86:	6810      	ldr	r0, [r2, #0]
 8025b88:	fa1f fa83 	uxth.w	sl, r3
 8025b8c:	ea4f 212c 	mov.w	r1, ip, asr #8
 8025b90:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025b94:	43db      	mvns	r3, r3
 8025b96:	b2db      	uxtb	r3, r3
 8025b98:	fb12 f20a 	smulbb	r2, r2, sl
 8025b9c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025ba0:	fb01 2103 	mla	r1, r1, r3, r2
 8025ba4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8025ba8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025bac:	b2c0      	uxtb	r0, r0
 8025bae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025bb2:	fa5f fc8c 	uxtb.w	ip, ip
 8025bb6:	fb10 f00a 	smulbb	r0, r0, sl
 8025bba:	fb0c 0003 	mla	r0, ip, r3, r0
 8025bbe:	b289      	uxth	r1, r1
 8025bc0:	fb1b fb0a 	smulbb	fp, fp, sl
 8025bc4:	b280      	uxth	r0, r0
 8025bc6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025bca:	fb02 b203 	mla	r2, r2, r3, fp
 8025bce:	1c4b      	adds	r3, r1, #1
 8025bd0:	f100 0b01 	add.w	fp, r0, #1
 8025bd4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025bd8:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8025bdc:	b292      	uxth	r2, r2
 8025bde:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8025be2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025be6:	ea4b 0101 	orr.w	r1, fp, r1
 8025bea:	f102 0b01 	add.w	fp, r2, #1
 8025bee:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8025bf2:	0952      	lsrs	r2, r2, #5
 8025bf4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025bf8:	4311      	orrs	r1, r2
 8025bfa:	f8ae 1000 	strh.w	r1, [lr]
 8025bfe:	e79e      	b.n	8025b3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8025c00:	b013      	add	sp, #76	; 0x4c
 8025c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c06:	bf00      	nop
 8025c08:	20025864 	.word	0x20025864

08025c0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8025c0c:	b570      	push	{r4, r5, r6, lr}
 8025c0e:	1208      	asrs	r0, r1, #8
 8025c10:	b29e      	uxth	r6, r3
 8025c12:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8025c16:	1213      	asrs	r3, r2, #8
 8025c18:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025c1c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025c20:	fb13 f305 	smulbb	r3, r3, r5
 8025c24:	fb10 f006 	smulbb	r0, r0, r6
 8025c28:	4418      	add	r0, r3
 8025c2a:	10cc      	asrs	r4, r1, #3
 8025c2c:	10d3      	asrs	r3, r2, #3
 8025c2e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8025c32:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025c36:	fb13 f305 	smulbb	r3, r3, r5
 8025c3a:	fb14 f406 	smulbb	r4, r4, r6
 8025c3e:	00c9      	lsls	r1, r1, #3
 8025c40:	00d2      	lsls	r2, r2, #3
 8025c42:	441c      	add	r4, r3
 8025c44:	b2d2      	uxtb	r2, r2
 8025c46:	b2cb      	uxtb	r3, r1
 8025c48:	fb12 f205 	smulbb	r2, r2, r5
 8025c4c:	b280      	uxth	r0, r0
 8025c4e:	fb13 f306 	smulbb	r3, r3, r6
 8025c52:	4413      	add	r3, r2
 8025c54:	1c42      	adds	r2, r0, #1
 8025c56:	b29b      	uxth	r3, r3
 8025c58:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025c5c:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 8025c60:	1c58      	adds	r0, r3, #1
 8025c62:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025c66:	b2a4      	uxth	r4, r4
 8025c68:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025c6c:	4310      	orrs	r0, r2
 8025c6e:	1c62      	adds	r2, r4, #1
 8025c70:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025c74:	0964      	lsrs	r4, r4, #5
 8025c76:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025c7a:	4320      	orrs	r0, r4
 8025c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08025c80 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8025c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c84:	b08f      	sub	sp, #60	; 0x3c
 8025c86:	461c      	mov	r4, r3
 8025c88:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8025c8c:	9004      	str	r0, [sp, #16]
 8025c8e:	460d      	mov	r5, r1
 8025c90:	4616      	mov	r6, r2
 8025c92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025c94:	2f00      	cmp	r7, #0
 8025c96:	f000 80f6 	beq.w	8025e86 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8025c9a:	6820      	ldr	r0, [r4, #0]
 8025c9c:	6861      	ldr	r1, [r4, #4]
 8025c9e:	aa0a      	add	r2, sp, #40	; 0x28
 8025ca0:	c203      	stmia	r2!, {r0, r1}
 8025ca2:	6818      	ldr	r0, [r3, #0]
 8025ca4:	6859      	ldr	r1, [r3, #4]
 8025ca6:	aa0c      	add	r2, sp, #48	; 0x30
 8025ca8:	c203      	stmia	r2!, {r0, r1}
 8025caa:	a80a      	add	r0, sp, #40	; 0x28
 8025cac:	f7ef fdde 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025cb0:	4621      	mov	r1, r4
 8025cb2:	a80c      	add	r0, sp, #48	; 0x30
 8025cb4:	f7ef fe02 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025cb8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8025cbc:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8025cc0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8025cc4:	f002 0301 	and.w	r3, r2, #1
 8025cc8:	9306      	str	r3, [sp, #24]
 8025cca:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025cce:	f003 0101 	and.w	r1, r3, #1
 8025cd2:	9105      	str	r1, [sp, #20]
 8025cd4:	9805      	ldr	r0, [sp, #20]
 8025cd6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8025cda:	4403      	add	r3, r0
 8025cdc:	fb01 2303 	mla	r3, r1, r3, r2
 8025ce0:	f04f 0802 	mov.w	r8, #2
 8025ce4:	fb93 f3f8 	sdiv	r3, r3, r8
 8025ce8:	441d      	add	r5, r3
 8025cea:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8025cee:	441a      	add	r2, r3
 8025cf0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8025cf4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8025cf8:	4419      	add	r1, r3
 8025cfa:	4b64      	ldr	r3, [pc, #400]	; (8025e8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8025cfc:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8025d00:	6818      	ldr	r0, [r3, #0]
 8025d02:	6803      	ldr	r3, [r0, #0]
 8025d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025d06:	4798      	blx	r3
 8025d08:	4a61      	ldr	r2, [pc, #388]	; (8025e90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8025d0a:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8025d0e:	8813      	ldrh	r3, [r2, #0]
 8025d10:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 8025d14:	2fff      	cmp	r7, #255	; 0xff
 8025d16:	fb03 a404 	mla	r4, r3, r4, sl
 8025d1a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8025d1e:	f106 0604 	add.w	r6, r6, #4
 8025d22:	4611      	mov	r1, r2
 8025d24:	fb03 fb0b 	mul.w	fp, r3, fp
 8025d28:	d06b      	beq.n	8025e02 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 8025d2a:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8025d2e:	9303      	str	r3, [sp, #12]
 8025d30:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8025d34:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8025d38:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8025d3c:	9b07      	ldr	r3, [sp, #28]
 8025d3e:	42a3      	cmp	r3, r4
 8025d40:	f240 809c 	bls.w	8025e7c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8025d44:	9b06      	ldr	r3, [sp, #24]
 8025d46:	2b00      	cmp	r3, #0
 8025d48:	d039      	beq.n	8025dbe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8025d4a:	782b      	ldrb	r3, [r5, #0]
 8025d4c:	8822      	ldrh	r2, [r4, #0]
 8025d4e:	9804      	ldr	r0, [sp, #16]
 8025d50:	f003 030f 	and.w	r3, r3, #15
 8025d54:	f105 0801 	add.w	r8, r5, #1
 8025d58:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025d5c:	9b03      	ldr	r3, [sp, #12]
 8025d5e:	9300      	str	r3, [sp, #0]
 8025d60:	463b      	mov	r3, r7
 8025d62:	f7ff ff53 	bl	8025c0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025d66:	f824 0b02 	strh.w	r0, [r4], #2
 8025d6a:	f109 3bff 	add.w	fp, r9, #4294967295
 8025d6e:	f1bb 0f01 	cmp.w	fp, #1
 8025d72:	46a2      	mov	sl, r4
 8025d74:	f104 0404 	add.w	r4, r4, #4
 8025d78:	dd24      	ble.n	8025dc4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 8025d7a:	f898 3000 	ldrb.w	r3, [r8]
 8025d7e:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8025d82:	9804      	ldr	r0, [sp, #16]
 8025d84:	091b      	lsrs	r3, r3, #4
 8025d86:	f1ab 0b02 	sub.w	fp, fp, #2
 8025d8a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025d8e:	9b03      	ldr	r3, [sp, #12]
 8025d90:	9300      	str	r3, [sp, #0]
 8025d92:	463b      	mov	r3, r7
 8025d94:	f7ff ff3a 	bl	8025c0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025d98:	f824 0c04 	strh.w	r0, [r4, #-4]
 8025d9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8025da0:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8025da4:	9804      	ldr	r0, [sp, #16]
 8025da6:	f003 030f 	and.w	r3, r3, #15
 8025daa:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025dae:	9b03      	ldr	r3, [sp, #12]
 8025db0:	9300      	str	r3, [sp, #0]
 8025db2:	463b      	mov	r3, r7
 8025db4:	f7ff ff2a 	bl	8025c0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025db8:	f824 0c02 	strh.w	r0, [r4, #-2]
 8025dbc:	e7d7      	b.n	8025d6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8025dbe:	46a8      	mov	r8, r5
 8025dc0:	46cb      	mov	fp, r9
 8025dc2:	e7d4      	b.n	8025d6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8025dc4:	d10e      	bne.n	8025de4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8025dc6:	f898 3000 	ldrb.w	r3, [r8]
 8025dca:	f8ba 2000 	ldrh.w	r2, [sl]
 8025dce:	9804      	ldr	r0, [sp, #16]
 8025dd0:	091b      	lsrs	r3, r3, #4
 8025dd2:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025dd6:	9b03      	ldr	r3, [sp, #12]
 8025dd8:	9300      	str	r3, [sp, #0]
 8025dda:	463b      	mov	r3, r7
 8025ddc:	f7ff ff16 	bl	8025c0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025de0:	f82a 0b02 	strh.w	r0, [sl], #2
 8025de4:	9b08      	ldr	r3, [sp, #32]
 8025de6:	9a05      	ldr	r2, [sp, #20]
 8025de8:	881c      	ldrh	r4, [r3, #0]
 8025dea:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025dee:	eba4 0409 	sub.w	r4, r4, r9
 8025df2:	4413      	add	r3, r2
 8025df4:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8025df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025dfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8025dfe:	441d      	add	r5, r3
 8025e00:	e79c      	b.n	8025d3c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8025e02:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8025e06:	45a3      	cmp	fp, r4
 8025e08:	d938      	bls.n	8025e7c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8025e0a:	9b06      	ldr	r3, [sp, #24]
 8025e0c:	b1f3      	cbz	r3, 8025e4c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8025e0e:	782b      	ldrb	r3, [r5, #0]
 8025e10:	f003 030f 	and.w	r3, r3, #15
 8025e14:	1c6a      	adds	r2, r5, #1
 8025e16:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025e1a:	8023      	strh	r3, [r4, #0]
 8025e1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8025e20:	3402      	adds	r4, #2
 8025e22:	2801      	cmp	r0, #1
 8025e24:	4623      	mov	r3, r4
 8025e26:	f104 0404 	add.w	r4, r4, #4
 8025e2a:	dd12      	ble.n	8025e52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8025e2c:	7813      	ldrb	r3, [r2, #0]
 8025e2e:	091b      	lsrs	r3, r3, #4
 8025e30:	3802      	subs	r0, #2
 8025e32:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025e36:	f824 3c04 	strh.w	r3, [r4, #-4]
 8025e3a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8025e3e:	f003 030f 	and.w	r3, r3, #15
 8025e42:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025e46:	f824 3c02 	strh.w	r3, [r4, #-2]
 8025e4a:	e7ea      	b.n	8025e22 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8025e4c:	462a      	mov	r2, r5
 8025e4e:	4648      	mov	r0, r9
 8025e50:	e7e7      	b.n	8025e22 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8025e52:	d106      	bne.n	8025e62 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8025e54:	7812      	ldrb	r2, [r2, #0]
 8025e56:	0912      	lsrs	r2, r2, #4
 8025e58:	3302      	adds	r3, #2
 8025e5a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8025e5e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8025e62:	880c      	ldrh	r4, [r1, #0]
 8025e64:	9a05      	ldr	r2, [sp, #20]
 8025e66:	eba4 0409 	sub.w	r4, r4, r9
 8025e6a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8025e6e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025e72:	4413      	add	r3, r2
 8025e74:	fb93 f3f8 	sdiv	r3, r3, r8
 8025e78:	441d      	add	r5, r3
 8025e7a:	e7c4      	b.n	8025e06 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 8025e7c:	4b03      	ldr	r3, [pc, #12]	; (8025e8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8025e7e:	6818      	ldr	r0, [r3, #0]
 8025e80:	6803      	ldr	r3, [r0, #0]
 8025e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025e84:	4798      	blx	r3
 8025e86:	b00f      	add	sp, #60	; 0x3c
 8025e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e8c:	2002585c 	.word	0x2002585c
 8025e90:	20025856 	.word	0x20025856

08025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8025e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025e96:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8025e9a:	2dff      	cmp	r5, #255	; 0xff
 8025e9c:	ea4f 2711 	mov.w	r7, r1, lsr #8
 8025ea0:	d10c      	bne.n	8025ebc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8025ea2:	2bff      	cmp	r3, #255	; 0xff
 8025ea4:	d10a      	bne.n	8025ebc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8025ea6:	4b25      	ldr	r3, [pc, #148]	; (8025f3c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8025ea8:	0948      	lsrs	r0, r1, #5
 8025eaa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025eae:	403b      	ands	r3, r7
 8025eb0:	4318      	orrs	r0, r3
 8025eb2:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8025eb6:	4308      	orrs	r0, r1
 8025eb8:	b280      	uxth	r0, r0
 8025eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025ebc:	fb15 f503 	smulbb	r5, r5, r3
 8025ec0:	b2ab      	uxth	r3, r5
 8025ec2:	1c5d      	adds	r5, r3, #1
 8025ec4:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8025ec8:	1214      	asrs	r4, r2, #8
 8025eca:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025ece:	fa1f fc85 	uxth.w	ip, r5
 8025ed2:	10d6      	asrs	r6, r2, #3
 8025ed4:	00d0      	lsls	r0, r2, #3
 8025ed6:	43ed      	mvns	r5, r5
 8025ed8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025edc:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8025ee0:	b2eb      	uxtb	r3, r5
 8025ee2:	b2c0      	uxtb	r0, r0
 8025ee4:	fb12 f20c 	smulbb	r2, r2, ip
 8025ee8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8025eec:	fb04 2403 	mla	r4, r4, r3, r2
 8025ef0:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8025ef4:	b2c8      	uxtb	r0, r1
 8025ef6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8025efa:	b2fd      	uxtb	r5, r7
 8025efc:	fb10 f00c 	smulbb	r0, r0, ip
 8025f00:	b2a4      	uxth	r4, r4
 8025f02:	fb02 0003 	mla	r0, r2, r3, r0
 8025f06:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8025f0a:	fb15 f50c 	smulbb	r5, r5, ip
 8025f0e:	fb06 5503 	mla	r5, r6, r3, r5
 8025f12:	b283      	uxth	r3, r0
 8025f14:	1c60      	adds	r0, r4, #1
 8025f16:	b2ad      	uxth	r5, r5
 8025f18:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025f1c:	1c58      	adds	r0, r3, #1
 8025f1e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025f22:	1c6b      	adds	r3, r5, #1
 8025f24:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025f28:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025f2c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025f30:	096d      	lsrs	r5, r5, #5
 8025f32:	4320      	orrs	r0, r4
 8025f34:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025f38:	4328      	orrs	r0, r5
 8025f3a:	e7be      	b.n	8025eba <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8025f3c:	00fff800 	.word	0x00fff800

08025f40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8025f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f44:	461c      	mov	r4, r3
 8025f46:	b08d      	sub	sp, #52	; 0x34
 8025f48:	460d      	mov	r5, r1
 8025f4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025f4c:	6861      	ldr	r1, [r4, #4]
 8025f4e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8025f52:	4680      	mov	r8, r0
 8025f54:	6820      	ldr	r0, [r4, #0]
 8025f56:	4616      	mov	r6, r2
 8025f58:	aa08      	add	r2, sp, #32
 8025f5a:	c203      	stmia	r2!, {r0, r1}
 8025f5c:	6818      	ldr	r0, [r3, #0]
 8025f5e:	6859      	ldr	r1, [r3, #4]
 8025f60:	aa0a      	add	r2, sp, #40	; 0x28
 8025f62:	c203      	stmia	r2!, {r0, r1}
 8025f64:	a808      	add	r0, sp, #32
 8025f66:	f7ef fc81 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025f6a:	4621      	mov	r1, r4
 8025f6c:	a80a      	add	r0, sp, #40	; 0x28
 8025f6e:	f7ef fca5 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025f72:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8025f76:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8025f7a:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8025f7e:	f002 0301 	and.w	r3, r2, #1
 8025f82:	9303      	str	r3, [sp, #12]
 8025f84:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8025f88:	f003 0101 	and.w	r1, r3, #1
 8025f8c:	9102      	str	r1, [sp, #8]
 8025f8e:	9802      	ldr	r0, [sp, #8]
 8025f90:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8025f94:	4403      	add	r3, r0
 8025f96:	fb01 2303 	mla	r3, r1, r3, r2
 8025f9a:	f04f 0a02 	mov.w	sl, #2
 8025f9e:	fb93 f3fa 	sdiv	r3, r3, sl
 8025fa2:	441d      	add	r5, r3
 8025fa4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8025fa8:	441a      	add	r2, r3
 8025faa:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8025fae:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8025fb2:	4a3f      	ldr	r2, [pc, #252]	; (80260b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8025fb4:	9205      	str	r2, [sp, #20]
 8025fb6:	4419      	add	r1, r3
 8025fb8:	6810      	ldr	r0, [r2, #0]
 8025fba:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8025fbe:	6803      	ldr	r3, [r0, #0]
 8025fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025fc2:	4798      	blx	r3
 8025fc4:	4b3b      	ldr	r3, [pc, #236]	; (80260b4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8025fc6:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8025fca:	8819      	ldrh	r1, [r3, #0]
 8025fcc:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8025fd0:	fb01 c404 	mla	r4, r1, r4, ip
 8025fd4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8025fd8:	434f      	muls	r7, r1
 8025fda:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8025fde:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8025fe2:	3604      	adds	r6, #4
 8025fe4:	9204      	str	r2, [sp, #16]
 8025fe6:	9b04      	ldr	r3, [sp, #16]
 8025fe8:	429c      	cmp	r4, r3
 8025fea:	d258      	bcs.n	802609e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8025fec:	9b03      	ldr	r3, [sp, #12]
 8025fee:	2b00      	cmp	r3, #0
 8025ff0:	d034      	beq.n	802605c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8025ff2:	782b      	ldrb	r3, [r5, #0]
 8025ff4:	f003 030f 	and.w	r3, r3, #15
 8025ff8:	1c6f      	adds	r7, r5, #1
 8025ffa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025ffe:	0e0b      	lsrs	r3, r1, #24
 8026000:	d006      	beq.n	8026010 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8026002:	8822      	ldrh	r2, [r4, #0]
 8026004:	9300      	str	r3, [sp, #0]
 8026006:	4640      	mov	r0, r8
 8026008:	464b      	mov	r3, r9
 802600a:	f7ff ff43 	bl	8025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802600e:	8020      	strh	r0, [r4, #0]
 8026010:	3402      	adds	r4, #2
 8026012:	f10b 3aff 	add.w	sl, fp, #4294967295
 8026016:	f1ba 0f01 	cmp.w	sl, #1
 802601a:	dd22      	ble.n	8026062 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802601c:	783b      	ldrb	r3, [r7, #0]
 802601e:	091b      	lsrs	r3, r3, #4
 8026020:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8026024:	0e0b      	lsrs	r3, r1, #24
 8026026:	d006      	beq.n	8026036 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8026028:	8822      	ldrh	r2, [r4, #0]
 802602a:	9300      	str	r3, [sp, #0]
 802602c:	4640      	mov	r0, r8
 802602e:	464b      	mov	r3, r9
 8026030:	f7ff ff30 	bl	8025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8026034:	8020      	strh	r0, [r4, #0]
 8026036:	f817 3b01 	ldrb.w	r3, [r7], #1
 802603a:	f003 030f 	and.w	r3, r3, #15
 802603e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8026042:	0e0b      	lsrs	r3, r1, #24
 8026044:	d006      	beq.n	8026054 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8026046:	8862      	ldrh	r2, [r4, #2]
 8026048:	9300      	str	r3, [sp, #0]
 802604a:	4640      	mov	r0, r8
 802604c:	464b      	mov	r3, r9
 802604e:	f7ff ff21 	bl	8025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8026052:	8060      	strh	r0, [r4, #2]
 8026054:	3404      	adds	r4, #4
 8026056:	f1aa 0a02 	sub.w	sl, sl, #2
 802605a:	e7dc      	b.n	8026016 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802605c:	462f      	mov	r7, r5
 802605e:	46da      	mov	sl, fp
 8026060:	e7d9      	b.n	8026016 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8026062:	d10d      	bne.n	8026080 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8026064:	783b      	ldrb	r3, [r7, #0]
 8026066:	091b      	lsrs	r3, r3, #4
 8026068:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802606c:	0e0b      	lsrs	r3, r1, #24
 802606e:	d006      	beq.n	802607e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8026070:	8822      	ldrh	r2, [r4, #0]
 8026072:	9300      	str	r3, [sp, #0]
 8026074:	4640      	mov	r0, r8
 8026076:	464b      	mov	r3, r9
 8026078:	f7ff ff0c 	bl	8025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802607c:	8020      	strh	r0, [r4, #0]
 802607e:	3402      	adds	r4, #2
 8026080:	9b06      	ldr	r3, [sp, #24]
 8026082:	9a02      	ldr	r2, [sp, #8]
 8026084:	881b      	ldrh	r3, [r3, #0]
 8026086:	eba3 030b 	sub.w	r3, r3, fp
 802608a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802608e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8026092:	4413      	add	r3, r2
 8026094:	9a07      	ldr	r2, [sp, #28]
 8026096:	fb93 f3f2 	sdiv	r3, r3, r2
 802609a:	441d      	add	r5, r3
 802609c:	e7a3      	b.n	8025fe6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802609e:	9b05      	ldr	r3, [sp, #20]
 80260a0:	6818      	ldr	r0, [r3, #0]
 80260a2:	6803      	ldr	r3, [r0, #0]
 80260a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80260a6:	4798      	blx	r3
 80260a8:	b00d      	add	sp, #52	; 0x34
 80260aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260ae:	bf00      	nop
 80260b0:	2002585c 	.word	0x2002585c
 80260b4:	20025856 	.word	0x20025856

080260b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 80260b8:	b570      	push	{r4, r5, r6, lr}
 80260ba:	1214      	asrs	r4, r2, #8
 80260bc:	788d      	ldrb	r5, [r1, #2]
 80260be:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80260c2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80260c6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80260ca:	fb15 f503 	smulbb	r5, r5, r3
 80260ce:	fb04 5506 	mla	r5, r4, r6, r5
 80260d2:	10d0      	asrs	r0, r2, #3
 80260d4:	784c      	ldrb	r4, [r1, #1]
 80260d6:	7809      	ldrb	r1, [r1, #0]
 80260d8:	00d2      	lsls	r2, r2, #3
 80260da:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80260de:	b2d2      	uxtb	r2, r2
 80260e0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80260e4:	fb14 f403 	smulbb	r4, r4, r3
 80260e8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80260ec:	fb11 f303 	smulbb	r3, r1, r3
 80260f0:	fb00 4406 	mla	r4, r0, r6, r4
 80260f4:	fb02 3306 	mla	r3, r2, r6, r3
 80260f8:	b2ad      	uxth	r5, r5
 80260fa:	b29b      	uxth	r3, r3
 80260fc:	b2a4      	uxth	r4, r4
 80260fe:	1c68      	adds	r0, r5, #1
 8026100:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8026104:	1c62      	adds	r2, r4, #1
 8026106:	1c58      	adds	r0, r3, #1
 8026108:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802610c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026110:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026114:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026118:	0964      	lsrs	r4, r4, #5
 802611a:	4328      	orrs	r0, r5
 802611c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8026120:	4320      	orrs	r0, r4
 8026122:	bd70      	pop	{r4, r5, r6, pc}

08026124 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8026124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026128:	b08f      	sub	sp, #60	; 0x3c
 802612a:	461c      	mov	r4, r3
 802612c:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8026130:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026132:	4682      	mov	sl, r0
 8026134:	460e      	mov	r6, r1
 8026136:	4615      	mov	r5, r2
 8026138:	2f00      	cmp	r7, #0
 802613a:	f000 8142 	beq.w	80263c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 802613e:	6820      	ldr	r0, [r4, #0]
 8026140:	6861      	ldr	r1, [r4, #4]
 8026142:	aa0a      	add	r2, sp, #40	; 0x28
 8026144:	c203      	stmia	r2!, {r0, r1}
 8026146:	6818      	ldr	r0, [r3, #0]
 8026148:	6859      	ldr	r1, [r3, #4]
 802614a:	aa0c      	add	r2, sp, #48	; 0x30
 802614c:	c203      	stmia	r2!, {r0, r1}
 802614e:	a80a      	add	r0, sp, #40	; 0x28
 8026150:	f7ef fb8c 	bl	801586c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026154:	4621      	mov	r1, r4
 8026156:	a80c      	add	r0, sp, #48	; 0x30
 8026158:	f7ef fbb0 	bl	80158bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802615c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8026160:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8026164:	f002 0301 	and.w	r3, r2, #1
 8026168:	9306      	str	r3, [sp, #24]
 802616a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802616e:	f003 0101 	and.w	r1, r3, #1
 8026172:	9105      	str	r1, [sp, #20]
 8026174:	9805      	ldr	r0, [sp, #20]
 8026176:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802617a:	4403      	add	r3, r0
 802617c:	fb01 2303 	mla	r3, r1, r3, r2
 8026180:	f04f 0802 	mov.w	r8, #2
 8026184:	fb93 f3f8 	sdiv	r3, r3, r8
 8026188:	441e      	add	r6, r3
 802618a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802618e:	441a      	add	r2, r3
 8026190:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8026194:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8026198:	4419      	add	r1, r3
 802619a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802619e:	9303      	str	r3, [sp, #12]
 80261a0:	4b89      	ldr	r3, [pc, #548]	; (80263c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 80261a2:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 80261a6:	6818      	ldr	r0, [r3, #0]
 80261a8:	6803      	ldr	r3, [r0, #0]
 80261aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80261ac:	4798      	blx	r3
 80261ae:	4a87      	ldr	r2, [pc, #540]	; (80263cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 80261b0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 80261b4:	8813      	ldrh	r3, [r2, #0]
 80261b6:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 80261ba:	2fff      	cmp	r7, #255	; 0xff
 80261bc:	fb03 9404 	mla	r4, r3, r4, r9
 80261c0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80261c4:	f105 0504 	add.w	r5, r5, #4
 80261c8:	4694      	mov	ip, r2
 80261ca:	fb03 f30b 	mul.w	r3, r3, fp
 80261ce:	d071      	beq.n	80262b4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 80261d0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80261d4:	43f9      	mvns	r1, r7
 80261d6:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80261da:	b2c9      	uxtb	r1, r1
 80261dc:	9104      	str	r1, [sp, #16]
 80261de:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80261e2:	9b07      	ldr	r3, [sp, #28]
 80261e4:	42a3      	cmp	r3, r4
 80261e6:	f240 80e7 	bls.w	80263b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 80261ea:	9b06      	ldr	r3, [sp, #24]
 80261ec:	2b00      	cmp	r3, #0
 80261ee:	d03d      	beq.n	802626c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 80261f0:	7831      	ldrb	r1, [r6, #0]
 80261f2:	9b04      	ldr	r3, [sp, #16]
 80261f4:	8822      	ldrh	r2, [r4, #0]
 80261f6:	9300      	str	r3, [sp, #0]
 80261f8:	f001 010f 	and.w	r1, r1, #15
 80261fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026200:	463b      	mov	r3, r7
 8026202:	4429      	add	r1, r5
 8026204:	4650      	mov	r0, sl
 8026206:	f7ff ff57 	bl	80260b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802620a:	9b03      	ldr	r3, [sp, #12]
 802620c:	f824 0b02 	strh.w	r0, [r4], #2
 8026210:	f106 0801 	add.w	r8, r6, #1
 8026214:	f103 3bff 	add.w	fp, r3, #4294967295
 8026218:	f1bb 0f01 	cmp.w	fp, #1
 802621c:	46a1      	mov	r9, r4
 802621e:	f104 0404 	add.w	r4, r4, #4
 8026222:	dd27      	ble.n	8026274 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8026224:	f898 1000 	ldrb.w	r1, [r8]
 8026228:	9b04      	ldr	r3, [sp, #16]
 802622a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802622e:	9300      	str	r3, [sp, #0]
 8026230:	0909      	lsrs	r1, r1, #4
 8026232:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026236:	463b      	mov	r3, r7
 8026238:	4429      	add	r1, r5
 802623a:	4650      	mov	r0, sl
 802623c:	f7ff ff3c 	bl	80260b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8026240:	f824 0c04 	strh.w	r0, [r4, #-4]
 8026244:	f818 1b01 	ldrb.w	r1, [r8], #1
 8026248:	9b04      	ldr	r3, [sp, #16]
 802624a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802624e:	9300      	str	r3, [sp, #0]
 8026250:	f001 010f 	and.w	r1, r1, #15
 8026254:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026258:	463b      	mov	r3, r7
 802625a:	4429      	add	r1, r5
 802625c:	4650      	mov	r0, sl
 802625e:	f7ff ff2b 	bl	80260b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8026262:	f1ab 0b02 	sub.w	fp, fp, #2
 8026266:	f824 0c02 	strh.w	r0, [r4, #-2]
 802626a:	e7d5      	b.n	8026218 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 802626c:	46b0      	mov	r8, r6
 802626e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8026272:	e7d1      	b.n	8026218 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8026274:	d10f      	bne.n	8026296 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8026276:	f898 1000 	ldrb.w	r1, [r8]
 802627a:	9b04      	ldr	r3, [sp, #16]
 802627c:	f8b9 2000 	ldrh.w	r2, [r9]
 8026280:	9300      	str	r3, [sp, #0]
 8026282:	0909      	lsrs	r1, r1, #4
 8026284:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026288:	463b      	mov	r3, r7
 802628a:	4429      	add	r1, r5
 802628c:	4650      	mov	r0, sl
 802628e:	f7ff ff13 	bl	80260b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8026292:	f829 0b02 	strh.w	r0, [r9], #2
 8026296:	9b08      	ldr	r3, [sp, #32]
 8026298:	9a05      	ldr	r2, [sp, #20]
 802629a:	881c      	ldrh	r4, [r3, #0]
 802629c:	9b03      	ldr	r3, [sp, #12]
 802629e:	1ae4      	subs	r4, r4, r3
 80262a0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80262a4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80262a8:	4413      	add	r3, r2
 80262aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80262ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80262b0:	441e      	add	r6, r3
 80262b2:	e796      	b.n	80261e2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 80262b4:	4f46      	ldr	r7, [pc, #280]	; (80263d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 80262b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80262ba:	42a3      	cmp	r3, r4
 80262bc:	d97c      	bls.n	80263b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 80262be:	9a06      	ldr	r2, [sp, #24]
 80262c0:	2a00      	cmp	r2, #0
 80262c2:	d054      	beq.n	802636e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 80262c4:	7830      	ldrb	r0, [r6, #0]
 80262c6:	f000 000f 	and.w	r0, r0, #15
 80262ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80262ce:	eb05 0e00 	add.w	lr, r5, r0
 80262d2:	5c28      	ldrb	r0, [r5, r0]
 80262d4:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80262d8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80262dc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80262e0:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80262e4:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 80262e8:	ea42 020e 	orr.w	r2, r2, lr
 80262ec:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80262f0:	f824 2b02 	strh.w	r2, [r4], #2
 80262f4:	9a03      	ldr	r2, [sp, #12]
 80262f6:	1c71      	adds	r1, r6, #1
 80262f8:	f102 3eff 	add.w	lr, r2, #4294967295
 80262fc:	f1be 0f01 	cmp.w	lr, #1
 8026300:	4620      	mov	r0, r4
 8026302:	f104 0404 	add.w	r4, r4, #4
 8026306:	dd36      	ble.n	8026376 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8026308:	7808      	ldrb	r0, [r1, #0]
 802630a:	0900      	lsrs	r0, r0, #4
 802630c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026310:	eb05 0a00 	add.w	sl, r5, r0
 8026314:	f1ae 0e02 	sub.w	lr, lr, #2
 8026318:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802631c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8026320:	00d2      	lsls	r2, r2, #3
 8026322:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8026326:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802632a:	ea49 0202 	orr.w	r2, r9, r2
 802632e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8026332:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8026336:	f824 2c04 	strh.w	r2, [r4, #-4]
 802633a:	f811 0b01 	ldrb.w	r0, [r1], #1
 802633e:	f000 000f 	and.w	r0, r0, #15
 8026342:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026346:	eb05 0a00 	add.w	sl, r5, r0
 802634a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802634e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8026352:	00d2      	lsls	r2, r2, #3
 8026354:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8026358:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802635c:	ea49 0202 	orr.w	r2, r9, r2
 8026360:	f815 9000 	ldrb.w	r9, [r5, r0]
 8026364:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8026368:	f824 2c02 	strh.w	r2, [r4, #-2]
 802636c:	e7c6      	b.n	80262fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 802636e:	4631      	mov	r1, r6
 8026370:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8026374:	e7c2      	b.n	80262fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8026376:	d111      	bne.n	802639c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8026378:	7809      	ldrb	r1, [r1, #0]
 802637a:	0909      	lsrs	r1, r1, #4
 802637c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026380:	186c      	adds	r4, r5, r1
 8026382:	5c69      	ldrb	r1, [r5, r1]
 8026384:	78a2      	ldrb	r2, [r4, #2]
 8026386:	7864      	ldrb	r4, [r4, #1]
 8026388:	00e4      	lsls	r4, r4, #3
 802638a:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802638e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8026392:	4322      	orrs	r2, r4
 8026394:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8026398:	f820 2b02 	strh.w	r2, [r0], #2
 802639c:	9a03      	ldr	r2, [sp, #12]
 802639e:	f8bc 4000 	ldrh.w	r4, [ip]
 80263a2:	9905      	ldr	r1, [sp, #20]
 80263a4:	1aa4      	subs	r4, r4, r2
 80263a6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80263aa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80263ae:	440a      	add	r2, r1
 80263b0:	fb92 f2f8 	sdiv	r2, r2, r8
 80263b4:	4416      	add	r6, r2
 80263b6:	e780      	b.n	80262ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 80263b8:	4b03      	ldr	r3, [pc, #12]	; (80263c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 80263ba:	6818      	ldr	r0, [r3, #0]
 80263bc:	6803      	ldr	r3, [r0, #0]
 80263be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80263c0:	4798      	blx	r3
 80263c2:	b00f      	add	sp, #60	; 0x3c
 80263c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263c8:	2002585c 	.word	0x2002585c
 80263cc:	20025856 	.word	0x20025856
 80263d0:	fffff800 	.word	0xfffff800

080263d4 <CRC_Lock>:
 80263d4:	b530      	push	{r4, r5, lr}
 80263d6:	4a20      	ldr	r2, [pc, #128]	; (8026458 <CRC_Lock+0x84>)
 80263d8:	6813      	ldr	r3, [r2, #0]
 80263da:	f023 0301 	bic.w	r3, r3, #1
 80263de:	6013      	str	r3, [r2, #0]
 80263e0:	4b1e      	ldr	r3, [pc, #120]	; (802645c <CRC_Lock+0x88>)
 80263e2:	681a      	ldr	r2, [r3, #0]
 80263e4:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80263e8:	4022      	ands	r2, r4
 80263ea:	f24c 2540 	movw	r5, #49728	; 0xc240
 80263ee:	42aa      	cmp	r2, r5
 80263f0:	d005      	beq.n	80263fe <CRC_Lock+0x2a>
 80263f2:	681b      	ldr	r3, [r3, #0]
 80263f4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80263f8:	4023      	ands	r3, r4
 80263fa:	4293      	cmp	r3, r2
 80263fc:	d124      	bne.n	8026448 <CRC_Lock+0x74>
 80263fe:	4b18      	ldr	r3, [pc, #96]	; (8026460 <CRC_Lock+0x8c>)
 8026400:	681b      	ldr	r3, [r3, #0]
 8026402:	bb0b      	cbnz	r3, 8026448 <CRC_Lock+0x74>
 8026404:	4b17      	ldr	r3, [pc, #92]	; (8026464 <CRC_Lock+0x90>)
 8026406:	681a      	ldr	r2, [r3, #0]
 8026408:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802640c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8026410:	d00d      	beq.n	802642e <CRC_Lock+0x5a>
 8026412:	681a      	ldr	r2, [r3, #0]
 8026414:	f240 4483 	movw	r4, #1155	; 0x483
 8026418:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802641c:	42a2      	cmp	r2, r4
 802641e:	d006      	beq.n	802642e <CRC_Lock+0x5a>
 8026420:	681b      	ldr	r3, [r3, #0]
 8026422:	f240 4285 	movw	r2, #1157	; 0x485
 8026426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802642a:	4293      	cmp	r3, r2
 802642c:	d10c      	bne.n	8026448 <CRC_Lock+0x74>
 802642e:	4b0e      	ldr	r3, [pc, #56]	; (8026468 <CRC_Lock+0x94>)
 8026430:	2201      	movs	r2, #1
 8026432:	601a      	str	r2, [r3, #0]
 8026434:	681a      	ldr	r2, [r3, #0]
 8026436:	2a00      	cmp	r2, #0
 8026438:	d1fc      	bne.n	8026434 <CRC_Lock+0x60>
 802643a:	4b0c      	ldr	r3, [pc, #48]	; (802646c <CRC_Lock+0x98>)
 802643c:	6018      	str	r0, [r3, #0]
 802643e:	6818      	ldr	r0, [r3, #0]
 8026440:	1a43      	subs	r3, r0, r1
 8026442:	4258      	negs	r0, r3
 8026444:	4158      	adcs	r0, r3
 8026446:	bd30      	pop	{r4, r5, pc}
 8026448:	4b09      	ldr	r3, [pc, #36]	; (8026470 <CRC_Lock+0x9c>)
 802644a:	2201      	movs	r2, #1
 802644c:	601a      	str	r2, [r3, #0]
 802644e:	681a      	ldr	r2, [r3, #0]
 8026450:	2a00      	cmp	r2, #0
 8026452:	d1fc      	bne.n	802644e <CRC_Lock+0x7a>
 8026454:	4b07      	ldr	r3, [pc, #28]	; (8026474 <CRC_Lock+0xa0>)
 8026456:	e7f1      	b.n	802643c <CRC_Lock+0x68>
 8026458:	e0002000 	.word	0xe0002000
 802645c:	e000ed00 	.word	0xe000ed00
 8026460:	e0042000 	.word	0xe0042000
 8026464:	5c001000 	.word	0x5c001000
 8026468:	58024c08 	.word	0x58024c08
 802646c:	58024c00 	.word	0x58024c00
 8026470:	40023008 	.word	0x40023008
 8026474:	40023000 	.word	0x40023000

08026478 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026478:	6101      	str	r1, [r0, #16]
 802647a:	4770      	bx	lr

0802647c <_ZN8touchgfx8Gestures4tickEv>:
 802647c:	7b83      	ldrb	r3, [r0, #14]
 802647e:	b14b      	cbz	r3, 8026494 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026480:	8903      	ldrh	r3, [r0, #8]
 8026482:	3301      	adds	r3, #1
 8026484:	b29b      	uxth	r3, r3
 8026486:	2b07      	cmp	r3, #7
 8026488:	8103      	strh	r3, [r0, #8]
 802648a:	bf81      	itttt	hi
 802648c:	2300      	movhi	r3, #0
 802648e:	8143      	strhhi	r3, [r0, #10]
 8026490:	8183      	strhhi	r3, [r0, #12]
 8026492:	7383      	strbhi	r3, [r0, #14]
 8026494:	4770      	bx	lr
	...

08026498 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026498:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802649c:	4698      	mov	r8, r3
 802649e:	8883      	ldrh	r3, [r0, #4]
 80264a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80264a4:	eba8 0303 	sub.w	r3, r8, r3
 80264a8:	b21b      	sxth	r3, r3
 80264aa:	4604      	mov	r4, r0
 80264ac:	2b00      	cmp	r3, #0
 80264ae:	4617      	mov	r7, r2
 80264b0:	4a18      	ldr	r2, [pc, #96]	; (8026514 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80264b2:	9200      	str	r2, [sp, #0]
 80264b4:	bfb8      	it	lt
 80264b6:	425b      	neglt	r3, r3
 80264b8:	8aa2      	ldrh	r2, [r4, #20]
 80264ba:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80264be:	f8ad 800a 	strh.w	r8, [sp, #10]
 80264c2:	b21b      	sxth	r3, r3
 80264c4:	460e      	mov	r6, r1
 80264c6:	4293      	cmp	r3, r2
 80264c8:	88c1      	ldrh	r1, [r0, #6]
 80264ca:	f8ad 1008 	strh.w	r1, [sp, #8]
 80264ce:	f04f 0000 	mov.w	r0, #0
 80264d2:	f88d 0004 	strb.w	r0, [sp, #4]
 80264d6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80264da:	dc07      	bgt.n	80264ec <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 80264dc:	1a69      	subs	r1, r5, r1
 80264de:	b209      	sxth	r1, r1
 80264e0:	2900      	cmp	r1, #0
 80264e2:	bfb8      	it	lt
 80264e4:	4249      	neglt	r1, r1
 80264e6:	b209      	sxth	r1, r1
 80264e8:	428a      	cmp	r2, r1
 80264ea:	da10      	bge.n	802650e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 80264ec:	6920      	ldr	r0, [r4, #16]
 80264ee:	6803      	ldr	r3, [r0, #0]
 80264f0:	4669      	mov	r1, sp
 80264f2:	685b      	ldr	r3, [r3, #4]
 80264f4:	4798      	blx	r3
 80264f6:	eba8 0606 	sub.w	r6, r8, r6
 80264fa:	2300      	movs	r3, #0
 80264fc:	1bef      	subs	r7, r5, r7
 80264fe:	2001      	movs	r0, #1
 8026500:	8123      	strh	r3, [r4, #8]
 8026502:	8166      	strh	r6, [r4, #10]
 8026504:	81a7      	strh	r7, [r4, #12]
 8026506:	f8a4 8004 	strh.w	r8, [r4, #4]
 802650a:	80e5      	strh	r5, [r4, #6]
 802650c:	73a0      	strb	r0, [r4, #14]
 802650e:	b004      	add	sp, #16
 8026510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026514:	080298c8 	.word	0x080298c8

08026518 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026518:	b5f0      	push	{r4, r5, r6, r7, lr}
 802651a:	461e      	mov	r6, r3
 802651c:	1e4b      	subs	r3, r1, #1
 802651e:	2b01      	cmp	r3, #1
 8026520:	b085      	sub	sp, #20
 8026522:	4604      	mov	r4, r0
 8026524:	460d      	mov	r5, r1
 8026526:	4617      	mov	r7, r2
 8026528:	d84b      	bhi.n	80265c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802652a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802652e:	1cd3      	adds	r3, r2, #3
 8026530:	b29b      	uxth	r3, r3
 8026532:	2b06      	cmp	r3, #6
 8026534:	d916      	bls.n	8026564 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8026536:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80265d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802653a:	f8cd c004 	str.w	ip, [sp, #4]
 802653e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026542:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026546:	6900      	ldr	r0, [r0, #16]
 8026548:	f8ad 100c 	strh.w	r1, [sp, #12]
 802654c:	f04f 0c00 	mov.w	ip, #0
 8026550:	f88d c008 	strb.w	ip, [sp, #8]
 8026554:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026558:	f8ad 300e 	strh.w	r3, [sp, #14]
 802655c:	6803      	ldr	r3, [r0, #0]
 802655e:	a901      	add	r1, sp, #4
 8026560:	689b      	ldr	r3, [r3, #8]
 8026562:	4798      	blx	r3
 8026564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026568:	1cd3      	adds	r3, r2, #3
 802656a:	b29b      	uxth	r3, r3
 802656c:	2b06      	cmp	r3, #6
 802656e:	d916      	bls.n	802659e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026570:	f8df c064 	ldr.w	ip, [pc, #100]	; 80265d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026574:	f8cd c004 	str.w	ip, [sp, #4]
 8026578:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802657c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026580:	6920      	ldr	r0, [r4, #16]
 8026582:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026586:	f04f 0c01 	mov.w	ip, #1
 802658a:	f88d c008 	strb.w	ip, [sp, #8]
 802658e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026592:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026596:	6803      	ldr	r3, [r0, #0]
 8026598:	a901      	add	r1, sp, #4
 802659a:	689b      	ldr	r3, [r3, #8]
 802659c:	4798      	blx	r3
 802659e:	4b0d      	ldr	r3, [pc, #52]	; (80265d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80265a0:	9301      	str	r3, [sp, #4]
 80265a2:	6920      	ldr	r0, [r4, #16]
 80265a4:	f88d 5008 	strb.w	r5, [sp, #8]
 80265a8:	2300      	movs	r3, #0
 80265aa:	f8ad 700a 	strh.w	r7, [sp, #10]
 80265ae:	f8ad 600c 	strh.w	r6, [sp, #12]
 80265b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80265b6:	6803      	ldr	r3, [r0, #0]
 80265b8:	a901      	add	r1, sp, #4
 80265ba:	681b      	ldr	r3, [r3, #0]
 80265bc:	4798      	blx	r3
 80265be:	b005      	add	sp, #20
 80265c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80265c2:	2900      	cmp	r1, #0
 80265c4:	d1eb      	bne.n	802659e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80265c6:	80a2      	strh	r2, [r4, #4]
 80265c8:	80c6      	strh	r6, [r0, #6]
 80265ca:	60a1      	str	r1, [r4, #8]
 80265cc:	81a1      	strh	r1, [r4, #12]
 80265ce:	73a1      	strb	r1, [r4, #14]
 80265d0:	e7e5      	b.n	802659e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80265d2:	bf00      	nop
 80265d4:	080298b4 	.word	0x080298b4
 80265d8:	080298dc 	.word	0x080298dc

080265dc <__aeabi_atexit>:
 80265dc:	460b      	mov	r3, r1
 80265de:	4601      	mov	r1, r0
 80265e0:	4618      	mov	r0, r3
 80265e2:	f000 b90f 	b.w	8026804 <__cxa_atexit>

080265e6 <_ZdlPvj>:
 80265e6:	f000 b812 	b.w	802660e <_ZdlPv>

080265ea <__cxa_guard_acquire>:
 80265ea:	6803      	ldr	r3, [r0, #0]
 80265ec:	07db      	lsls	r3, r3, #31
 80265ee:	d406      	bmi.n	80265fe <__cxa_guard_acquire+0x14>
 80265f0:	7843      	ldrb	r3, [r0, #1]
 80265f2:	b103      	cbz	r3, 80265f6 <__cxa_guard_acquire+0xc>
 80265f4:	deff      	udf	#255	; 0xff
 80265f6:	2301      	movs	r3, #1
 80265f8:	7043      	strb	r3, [r0, #1]
 80265fa:	4618      	mov	r0, r3
 80265fc:	4770      	bx	lr
 80265fe:	2000      	movs	r0, #0
 8026600:	4770      	bx	lr

08026602 <__cxa_guard_release>:
 8026602:	2301      	movs	r3, #1
 8026604:	6003      	str	r3, [r0, #0]
 8026606:	4770      	bx	lr

08026608 <__cxa_pure_virtual>:
 8026608:	b508      	push	{r3, lr}
 802660a:	f000 f80f 	bl	802662c <_ZSt9terminatev>

0802660e <_ZdlPv>:
 802660e:	f000 b845 	b.w	802669c <free>

08026612 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026612:	b508      	push	{r3, lr}
 8026614:	4780      	blx	r0
 8026616:	f000 f80e 	bl	8026636 <abort>
	...

0802661c <_ZSt13get_terminatev>:
 802661c:	4b02      	ldr	r3, [pc, #8]	; (8026628 <_ZSt13get_terminatev+0xc>)
 802661e:	6818      	ldr	r0, [r3, #0]
 8026620:	f3bf 8f5b 	dmb	ish
 8026624:	4770      	bx	lr
 8026626:	bf00      	nop
 8026628:	20000320 	.word	0x20000320

0802662c <_ZSt9terminatev>:
 802662c:	b508      	push	{r3, lr}
 802662e:	f7ff fff5 	bl	802661c <_ZSt13get_terminatev>
 8026632:	f7ff ffee 	bl	8026612 <_ZN10__cxxabiv111__terminateEPFvvE>

08026636 <abort>:
 8026636:	b508      	push	{r3, lr}
 8026638:	2006      	movs	r0, #6
 802663a:	f000 fa39 	bl	8026ab0 <raise>
 802663e:	2001      	movs	r0, #1
 8026640:	f7de fa60 	bl	8004b04 <_exit>

08026644 <__assert_func>:
 8026644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026646:	4614      	mov	r4, r2
 8026648:	461a      	mov	r2, r3
 802664a:	4b09      	ldr	r3, [pc, #36]	; (8026670 <__assert_func+0x2c>)
 802664c:	681b      	ldr	r3, [r3, #0]
 802664e:	4605      	mov	r5, r0
 8026650:	68d8      	ldr	r0, [r3, #12]
 8026652:	b14c      	cbz	r4, 8026668 <__assert_func+0x24>
 8026654:	4b07      	ldr	r3, [pc, #28]	; (8026674 <__assert_func+0x30>)
 8026656:	9100      	str	r1, [sp, #0]
 8026658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802665c:	4906      	ldr	r1, [pc, #24]	; (8026678 <__assert_func+0x34>)
 802665e:	462b      	mov	r3, r5
 8026660:	f000 f982 	bl	8026968 <fiprintf>
 8026664:	f7ff ffe7 	bl	8026636 <abort>
 8026668:	4b04      	ldr	r3, [pc, #16]	; (802667c <__assert_func+0x38>)
 802666a:	461c      	mov	r4, r3
 802666c:	e7f3      	b.n	8026656 <__assert_func+0x12>
 802666e:	bf00      	nop
 8026670:	2000037c 	.word	0x2000037c
 8026674:	08029bf8 	.word	0x08029bf8
 8026678:	08029c05 	.word	0x08029c05
 802667c:	08029c33 	.word	0x08029c33

08026680 <atexit>:
 8026680:	2300      	movs	r3, #0
 8026682:	4601      	mov	r1, r0
 8026684:	461a      	mov	r2, r3
 8026686:	4618      	mov	r0, r3
 8026688:	f000 bac0 	b.w	8026c0c <__register_exitproc>

0802668c <malloc>:
 802668c:	4b02      	ldr	r3, [pc, #8]	; (8026698 <malloc+0xc>)
 802668e:	4601      	mov	r1, r0
 8026690:	6818      	ldr	r0, [r3, #0]
 8026692:	f000 b82b 	b.w	80266ec <_malloc_r>
 8026696:	bf00      	nop
 8026698:	2000037c 	.word	0x2000037c

0802669c <free>:
 802669c:	4b02      	ldr	r3, [pc, #8]	; (80266a8 <free+0xc>)
 802669e:	4601      	mov	r1, r0
 80266a0:	6818      	ldr	r0, [r3, #0]
 80266a2:	f000 bb11 	b.w	8026cc8 <_free_r>
 80266a6:	bf00      	nop
 80266a8:	2000037c 	.word	0x2000037c

080266ac <sbrk_aligned>:
 80266ac:	b570      	push	{r4, r5, r6, lr}
 80266ae:	4e0e      	ldr	r6, [pc, #56]	; (80266e8 <sbrk_aligned+0x3c>)
 80266b0:	460c      	mov	r4, r1
 80266b2:	6831      	ldr	r1, [r6, #0]
 80266b4:	4605      	mov	r5, r0
 80266b6:	b911      	cbnz	r1, 80266be <sbrk_aligned+0x12>
 80266b8:	f000 fa4a 	bl	8026b50 <_sbrk_r>
 80266bc:	6030      	str	r0, [r6, #0]
 80266be:	4621      	mov	r1, r4
 80266c0:	4628      	mov	r0, r5
 80266c2:	f000 fa45 	bl	8026b50 <_sbrk_r>
 80266c6:	1c43      	adds	r3, r0, #1
 80266c8:	d00a      	beq.n	80266e0 <sbrk_aligned+0x34>
 80266ca:	1cc4      	adds	r4, r0, #3
 80266cc:	f024 0403 	bic.w	r4, r4, #3
 80266d0:	42a0      	cmp	r0, r4
 80266d2:	d007      	beq.n	80266e4 <sbrk_aligned+0x38>
 80266d4:	1a21      	subs	r1, r4, r0
 80266d6:	4628      	mov	r0, r5
 80266d8:	f000 fa3a 	bl	8026b50 <_sbrk_r>
 80266dc:	3001      	adds	r0, #1
 80266de:	d101      	bne.n	80266e4 <sbrk_aligned+0x38>
 80266e0:	f04f 34ff 	mov.w	r4, #4294967295
 80266e4:	4620      	mov	r0, r4
 80266e6:	bd70      	pop	{r4, r5, r6, pc}
 80266e8:	200261ac 	.word	0x200261ac

080266ec <_malloc_r>:
 80266ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80266f0:	1ccd      	adds	r5, r1, #3
 80266f2:	f025 0503 	bic.w	r5, r5, #3
 80266f6:	3508      	adds	r5, #8
 80266f8:	2d0c      	cmp	r5, #12
 80266fa:	bf38      	it	cc
 80266fc:	250c      	movcc	r5, #12
 80266fe:	2d00      	cmp	r5, #0
 8026700:	4607      	mov	r7, r0
 8026702:	db01      	blt.n	8026708 <_malloc_r+0x1c>
 8026704:	42a9      	cmp	r1, r5
 8026706:	d905      	bls.n	8026714 <_malloc_r+0x28>
 8026708:	230c      	movs	r3, #12
 802670a:	603b      	str	r3, [r7, #0]
 802670c:	2600      	movs	r6, #0
 802670e:	4630      	mov	r0, r6
 8026710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026714:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80267e8 <_malloc_r+0xfc>
 8026718:	f000 f868 	bl	80267ec <__malloc_lock>
 802671c:	f8d8 3000 	ldr.w	r3, [r8]
 8026720:	461c      	mov	r4, r3
 8026722:	bb5c      	cbnz	r4, 802677c <_malloc_r+0x90>
 8026724:	4629      	mov	r1, r5
 8026726:	4638      	mov	r0, r7
 8026728:	f7ff ffc0 	bl	80266ac <sbrk_aligned>
 802672c:	1c43      	adds	r3, r0, #1
 802672e:	4604      	mov	r4, r0
 8026730:	d155      	bne.n	80267de <_malloc_r+0xf2>
 8026732:	f8d8 4000 	ldr.w	r4, [r8]
 8026736:	4626      	mov	r6, r4
 8026738:	2e00      	cmp	r6, #0
 802673a:	d145      	bne.n	80267c8 <_malloc_r+0xdc>
 802673c:	2c00      	cmp	r4, #0
 802673e:	d048      	beq.n	80267d2 <_malloc_r+0xe6>
 8026740:	6823      	ldr	r3, [r4, #0]
 8026742:	4631      	mov	r1, r6
 8026744:	4638      	mov	r0, r7
 8026746:	eb04 0903 	add.w	r9, r4, r3
 802674a:	f000 fa01 	bl	8026b50 <_sbrk_r>
 802674e:	4581      	cmp	r9, r0
 8026750:	d13f      	bne.n	80267d2 <_malloc_r+0xe6>
 8026752:	6821      	ldr	r1, [r4, #0]
 8026754:	1a6d      	subs	r5, r5, r1
 8026756:	4629      	mov	r1, r5
 8026758:	4638      	mov	r0, r7
 802675a:	f7ff ffa7 	bl	80266ac <sbrk_aligned>
 802675e:	3001      	adds	r0, #1
 8026760:	d037      	beq.n	80267d2 <_malloc_r+0xe6>
 8026762:	6823      	ldr	r3, [r4, #0]
 8026764:	442b      	add	r3, r5
 8026766:	6023      	str	r3, [r4, #0]
 8026768:	f8d8 3000 	ldr.w	r3, [r8]
 802676c:	2b00      	cmp	r3, #0
 802676e:	d038      	beq.n	80267e2 <_malloc_r+0xf6>
 8026770:	685a      	ldr	r2, [r3, #4]
 8026772:	42a2      	cmp	r2, r4
 8026774:	d12b      	bne.n	80267ce <_malloc_r+0xe2>
 8026776:	2200      	movs	r2, #0
 8026778:	605a      	str	r2, [r3, #4]
 802677a:	e00f      	b.n	802679c <_malloc_r+0xb0>
 802677c:	6822      	ldr	r2, [r4, #0]
 802677e:	1b52      	subs	r2, r2, r5
 8026780:	d41f      	bmi.n	80267c2 <_malloc_r+0xd6>
 8026782:	2a0b      	cmp	r2, #11
 8026784:	d917      	bls.n	80267b6 <_malloc_r+0xca>
 8026786:	1961      	adds	r1, r4, r5
 8026788:	42a3      	cmp	r3, r4
 802678a:	6025      	str	r5, [r4, #0]
 802678c:	bf18      	it	ne
 802678e:	6059      	strne	r1, [r3, #4]
 8026790:	6863      	ldr	r3, [r4, #4]
 8026792:	bf08      	it	eq
 8026794:	f8c8 1000 	streq.w	r1, [r8]
 8026798:	5162      	str	r2, [r4, r5]
 802679a:	604b      	str	r3, [r1, #4]
 802679c:	4638      	mov	r0, r7
 802679e:	f104 060b 	add.w	r6, r4, #11
 80267a2:	f000 f829 	bl	80267f8 <__malloc_unlock>
 80267a6:	f026 0607 	bic.w	r6, r6, #7
 80267aa:	1d23      	adds	r3, r4, #4
 80267ac:	1af2      	subs	r2, r6, r3
 80267ae:	d0ae      	beq.n	802670e <_malloc_r+0x22>
 80267b0:	1b9b      	subs	r3, r3, r6
 80267b2:	50a3      	str	r3, [r4, r2]
 80267b4:	e7ab      	b.n	802670e <_malloc_r+0x22>
 80267b6:	42a3      	cmp	r3, r4
 80267b8:	6862      	ldr	r2, [r4, #4]
 80267ba:	d1dd      	bne.n	8026778 <_malloc_r+0x8c>
 80267bc:	f8c8 2000 	str.w	r2, [r8]
 80267c0:	e7ec      	b.n	802679c <_malloc_r+0xb0>
 80267c2:	4623      	mov	r3, r4
 80267c4:	6864      	ldr	r4, [r4, #4]
 80267c6:	e7ac      	b.n	8026722 <_malloc_r+0x36>
 80267c8:	4634      	mov	r4, r6
 80267ca:	6876      	ldr	r6, [r6, #4]
 80267cc:	e7b4      	b.n	8026738 <_malloc_r+0x4c>
 80267ce:	4613      	mov	r3, r2
 80267d0:	e7cc      	b.n	802676c <_malloc_r+0x80>
 80267d2:	230c      	movs	r3, #12
 80267d4:	603b      	str	r3, [r7, #0]
 80267d6:	4638      	mov	r0, r7
 80267d8:	f000 f80e 	bl	80267f8 <__malloc_unlock>
 80267dc:	e797      	b.n	802670e <_malloc_r+0x22>
 80267de:	6025      	str	r5, [r4, #0]
 80267e0:	e7dc      	b.n	802679c <_malloc_r+0xb0>
 80267e2:	605b      	str	r3, [r3, #4]
 80267e4:	deff      	udf	#255	; 0xff
 80267e6:	bf00      	nop
 80267e8:	200261a8 	.word	0x200261a8

080267ec <__malloc_lock>:
 80267ec:	4801      	ldr	r0, [pc, #4]	; (80267f4 <__malloc_lock+0x8>)
 80267ee:	f000 b9fc 	b.w	8026bea <__retarget_lock_acquire_recursive>
 80267f2:	bf00      	nop
 80267f4:	200262f1 	.word	0x200262f1

080267f8 <__malloc_unlock>:
 80267f8:	4801      	ldr	r0, [pc, #4]	; (8026800 <__malloc_unlock+0x8>)
 80267fa:	f000 b9f7 	b.w	8026bec <__retarget_lock_release_recursive>
 80267fe:	bf00      	nop
 8026800:	200262f1 	.word	0x200262f1

08026804 <__cxa_atexit>:
 8026804:	b510      	push	{r4, lr}
 8026806:	4c05      	ldr	r4, [pc, #20]	; (802681c <__cxa_atexit+0x18>)
 8026808:	4613      	mov	r3, r2
 802680a:	b12c      	cbz	r4, 8026818 <__cxa_atexit+0x14>
 802680c:	460a      	mov	r2, r1
 802680e:	4601      	mov	r1, r0
 8026810:	2002      	movs	r0, #2
 8026812:	f000 f9fb 	bl	8026c0c <__register_exitproc>
 8026816:	bd10      	pop	{r4, pc}
 8026818:	4620      	mov	r0, r4
 802681a:	e7fc      	b.n	8026816 <__cxa_atexit+0x12>
 802681c:	08026c0d 	.word	0x08026c0d

08026820 <std>:
 8026820:	2300      	movs	r3, #0
 8026822:	b510      	push	{r4, lr}
 8026824:	4604      	mov	r4, r0
 8026826:	e9c0 3300 	strd	r3, r3, [r0]
 802682a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802682e:	6083      	str	r3, [r0, #8]
 8026830:	8181      	strh	r1, [r0, #12]
 8026832:	6643      	str	r3, [r0, #100]	; 0x64
 8026834:	81c2      	strh	r2, [r0, #14]
 8026836:	6183      	str	r3, [r0, #24]
 8026838:	4619      	mov	r1, r3
 802683a:	2208      	movs	r2, #8
 802683c:	305c      	adds	r0, #92	; 0x5c
 802683e:	f000 f906 	bl	8026a4e <memset>
 8026842:	4b0d      	ldr	r3, [pc, #52]	; (8026878 <std+0x58>)
 8026844:	6263      	str	r3, [r4, #36]	; 0x24
 8026846:	4b0d      	ldr	r3, [pc, #52]	; (802687c <std+0x5c>)
 8026848:	62a3      	str	r3, [r4, #40]	; 0x28
 802684a:	4b0d      	ldr	r3, [pc, #52]	; (8026880 <std+0x60>)
 802684c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802684e:	4b0d      	ldr	r3, [pc, #52]	; (8026884 <std+0x64>)
 8026850:	6323      	str	r3, [r4, #48]	; 0x30
 8026852:	4b0d      	ldr	r3, [pc, #52]	; (8026888 <std+0x68>)
 8026854:	6224      	str	r4, [r4, #32]
 8026856:	429c      	cmp	r4, r3
 8026858:	d006      	beq.n	8026868 <std+0x48>
 802685a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802685e:	4294      	cmp	r4, r2
 8026860:	d002      	beq.n	8026868 <std+0x48>
 8026862:	33d0      	adds	r3, #208	; 0xd0
 8026864:	429c      	cmp	r4, r3
 8026866:	d105      	bne.n	8026874 <std+0x54>
 8026868:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802686c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026870:	f000 b9ba 	b.w	8026be8 <__retarget_lock_init_recursive>
 8026874:	bd10      	pop	{r4, pc}
 8026876:	bf00      	nop
 8026878:	080269c9 	.word	0x080269c9
 802687c:	080269eb 	.word	0x080269eb
 8026880:	08026a23 	.word	0x08026a23
 8026884:	08026a47 	.word	0x08026a47
 8026888:	200261b0 	.word	0x200261b0

0802688c <stdio_exit_handler>:
 802688c:	4a02      	ldr	r2, [pc, #8]	; (8026898 <stdio_exit_handler+0xc>)
 802688e:	4903      	ldr	r1, [pc, #12]	; (802689c <stdio_exit_handler+0x10>)
 8026890:	4803      	ldr	r0, [pc, #12]	; (80268a0 <stdio_exit_handler+0x14>)
 8026892:	f000 b87b 	b.w	802698c <_fwalk_sglue>
 8026896:	bf00      	nop
 8026898:	20000324 	.word	0x20000324
 802689c:	08027415 	.word	0x08027415
 80268a0:	20000330 	.word	0x20000330

080268a4 <cleanup_stdio>:
 80268a4:	6841      	ldr	r1, [r0, #4]
 80268a6:	4b0c      	ldr	r3, [pc, #48]	; (80268d8 <cleanup_stdio+0x34>)
 80268a8:	4299      	cmp	r1, r3
 80268aa:	b510      	push	{r4, lr}
 80268ac:	4604      	mov	r4, r0
 80268ae:	d001      	beq.n	80268b4 <cleanup_stdio+0x10>
 80268b0:	f000 fdb0 	bl	8027414 <_fflush_r>
 80268b4:	68a1      	ldr	r1, [r4, #8]
 80268b6:	4b09      	ldr	r3, [pc, #36]	; (80268dc <cleanup_stdio+0x38>)
 80268b8:	4299      	cmp	r1, r3
 80268ba:	d002      	beq.n	80268c2 <cleanup_stdio+0x1e>
 80268bc:	4620      	mov	r0, r4
 80268be:	f000 fda9 	bl	8027414 <_fflush_r>
 80268c2:	68e1      	ldr	r1, [r4, #12]
 80268c4:	4b06      	ldr	r3, [pc, #24]	; (80268e0 <cleanup_stdio+0x3c>)
 80268c6:	4299      	cmp	r1, r3
 80268c8:	d004      	beq.n	80268d4 <cleanup_stdio+0x30>
 80268ca:	4620      	mov	r0, r4
 80268cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80268d0:	f000 bda0 	b.w	8027414 <_fflush_r>
 80268d4:	bd10      	pop	{r4, pc}
 80268d6:	bf00      	nop
 80268d8:	200261b0 	.word	0x200261b0
 80268dc:	20026218 	.word	0x20026218
 80268e0:	20026280 	.word	0x20026280

080268e4 <global_stdio_init.part.0>:
 80268e4:	b510      	push	{r4, lr}
 80268e6:	4b0b      	ldr	r3, [pc, #44]	; (8026914 <global_stdio_init.part.0+0x30>)
 80268e8:	4c0b      	ldr	r4, [pc, #44]	; (8026918 <global_stdio_init.part.0+0x34>)
 80268ea:	4a0c      	ldr	r2, [pc, #48]	; (802691c <global_stdio_init.part.0+0x38>)
 80268ec:	601a      	str	r2, [r3, #0]
 80268ee:	4620      	mov	r0, r4
 80268f0:	2200      	movs	r2, #0
 80268f2:	2104      	movs	r1, #4
 80268f4:	f7ff ff94 	bl	8026820 <std>
 80268f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80268fc:	2201      	movs	r2, #1
 80268fe:	2109      	movs	r1, #9
 8026900:	f7ff ff8e 	bl	8026820 <std>
 8026904:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8026908:	2202      	movs	r2, #2
 802690a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802690e:	2112      	movs	r1, #18
 8026910:	f7ff bf86 	b.w	8026820 <std>
 8026914:	200262e8 	.word	0x200262e8
 8026918:	200261b0 	.word	0x200261b0
 802691c:	0802688d 	.word	0x0802688d

08026920 <__sfp_lock_acquire>:
 8026920:	4801      	ldr	r0, [pc, #4]	; (8026928 <__sfp_lock_acquire+0x8>)
 8026922:	f000 b962 	b.w	8026bea <__retarget_lock_acquire_recursive>
 8026926:	bf00      	nop
 8026928:	200262f2 	.word	0x200262f2

0802692c <__sfp_lock_release>:
 802692c:	4801      	ldr	r0, [pc, #4]	; (8026934 <__sfp_lock_release+0x8>)
 802692e:	f000 b95d 	b.w	8026bec <__retarget_lock_release_recursive>
 8026932:	bf00      	nop
 8026934:	200262f2 	.word	0x200262f2

08026938 <__sinit>:
 8026938:	b510      	push	{r4, lr}
 802693a:	4604      	mov	r4, r0
 802693c:	f7ff fff0 	bl	8026920 <__sfp_lock_acquire>
 8026940:	6a23      	ldr	r3, [r4, #32]
 8026942:	b11b      	cbz	r3, 802694c <__sinit+0x14>
 8026944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026948:	f7ff bff0 	b.w	802692c <__sfp_lock_release>
 802694c:	4b04      	ldr	r3, [pc, #16]	; (8026960 <__sinit+0x28>)
 802694e:	6223      	str	r3, [r4, #32]
 8026950:	4b04      	ldr	r3, [pc, #16]	; (8026964 <__sinit+0x2c>)
 8026952:	681b      	ldr	r3, [r3, #0]
 8026954:	2b00      	cmp	r3, #0
 8026956:	d1f5      	bne.n	8026944 <__sinit+0xc>
 8026958:	f7ff ffc4 	bl	80268e4 <global_stdio_init.part.0>
 802695c:	e7f2      	b.n	8026944 <__sinit+0xc>
 802695e:	bf00      	nop
 8026960:	080268a5 	.word	0x080268a5
 8026964:	200262e8 	.word	0x200262e8

08026968 <fiprintf>:
 8026968:	b40e      	push	{r1, r2, r3}
 802696a:	b503      	push	{r0, r1, lr}
 802696c:	4601      	mov	r1, r0
 802696e:	ab03      	add	r3, sp, #12
 8026970:	4805      	ldr	r0, [pc, #20]	; (8026988 <fiprintf+0x20>)
 8026972:	f853 2b04 	ldr.w	r2, [r3], #4
 8026976:	6800      	ldr	r0, [r0, #0]
 8026978:	9301      	str	r3, [sp, #4]
 802697a:	f000 fa1b 	bl	8026db4 <_vfiprintf_r>
 802697e:	b002      	add	sp, #8
 8026980:	f85d eb04 	ldr.w	lr, [sp], #4
 8026984:	b003      	add	sp, #12
 8026986:	4770      	bx	lr
 8026988:	2000037c 	.word	0x2000037c

0802698c <_fwalk_sglue>:
 802698c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026990:	4607      	mov	r7, r0
 8026992:	4688      	mov	r8, r1
 8026994:	4614      	mov	r4, r2
 8026996:	2600      	movs	r6, #0
 8026998:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802699c:	f1b9 0901 	subs.w	r9, r9, #1
 80269a0:	d505      	bpl.n	80269ae <_fwalk_sglue+0x22>
 80269a2:	6824      	ldr	r4, [r4, #0]
 80269a4:	2c00      	cmp	r4, #0
 80269a6:	d1f7      	bne.n	8026998 <_fwalk_sglue+0xc>
 80269a8:	4630      	mov	r0, r6
 80269aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80269ae:	89ab      	ldrh	r3, [r5, #12]
 80269b0:	2b01      	cmp	r3, #1
 80269b2:	d907      	bls.n	80269c4 <_fwalk_sglue+0x38>
 80269b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80269b8:	3301      	adds	r3, #1
 80269ba:	d003      	beq.n	80269c4 <_fwalk_sglue+0x38>
 80269bc:	4629      	mov	r1, r5
 80269be:	4638      	mov	r0, r7
 80269c0:	47c0      	blx	r8
 80269c2:	4306      	orrs	r6, r0
 80269c4:	3568      	adds	r5, #104	; 0x68
 80269c6:	e7e9      	b.n	802699c <_fwalk_sglue+0x10>

080269c8 <__sread>:
 80269c8:	b510      	push	{r4, lr}
 80269ca:	460c      	mov	r4, r1
 80269cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80269d0:	f000 f898 	bl	8026b04 <_read_r>
 80269d4:	2800      	cmp	r0, #0
 80269d6:	bfab      	itete	ge
 80269d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80269da:	89a3      	ldrhlt	r3, [r4, #12]
 80269dc:	181b      	addge	r3, r3, r0
 80269de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80269e2:	bfac      	ite	ge
 80269e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80269e6:	81a3      	strhlt	r3, [r4, #12]
 80269e8:	bd10      	pop	{r4, pc}

080269ea <__swrite>:
 80269ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80269ee:	461f      	mov	r7, r3
 80269f0:	898b      	ldrh	r3, [r1, #12]
 80269f2:	05db      	lsls	r3, r3, #23
 80269f4:	4605      	mov	r5, r0
 80269f6:	460c      	mov	r4, r1
 80269f8:	4616      	mov	r6, r2
 80269fa:	d505      	bpl.n	8026a08 <__swrite+0x1e>
 80269fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a00:	2302      	movs	r3, #2
 8026a02:	2200      	movs	r2, #0
 8026a04:	f000 f86c 	bl	8026ae0 <_lseek_r>
 8026a08:	89a3      	ldrh	r3, [r4, #12]
 8026a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026a12:	81a3      	strh	r3, [r4, #12]
 8026a14:	4632      	mov	r2, r6
 8026a16:	463b      	mov	r3, r7
 8026a18:	4628      	mov	r0, r5
 8026a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026a1e:	f000 b8a7 	b.w	8026b70 <_write_r>

08026a22 <__sseek>:
 8026a22:	b510      	push	{r4, lr}
 8026a24:	460c      	mov	r4, r1
 8026a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a2a:	f000 f859 	bl	8026ae0 <_lseek_r>
 8026a2e:	1c43      	adds	r3, r0, #1
 8026a30:	89a3      	ldrh	r3, [r4, #12]
 8026a32:	bf15      	itete	ne
 8026a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8026a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026a3e:	81a3      	strheq	r3, [r4, #12]
 8026a40:	bf18      	it	ne
 8026a42:	81a3      	strhne	r3, [r4, #12]
 8026a44:	bd10      	pop	{r4, pc}

08026a46 <__sclose>:
 8026a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a4a:	f000 b839 	b.w	8026ac0 <_close_r>

08026a4e <memset>:
 8026a4e:	4402      	add	r2, r0
 8026a50:	4603      	mov	r3, r0
 8026a52:	4293      	cmp	r3, r2
 8026a54:	d100      	bne.n	8026a58 <memset+0xa>
 8026a56:	4770      	bx	lr
 8026a58:	f803 1b01 	strb.w	r1, [r3], #1
 8026a5c:	e7f9      	b.n	8026a52 <memset+0x4>

08026a5e <_raise_r>:
 8026a5e:	291f      	cmp	r1, #31
 8026a60:	b538      	push	{r3, r4, r5, lr}
 8026a62:	4604      	mov	r4, r0
 8026a64:	460d      	mov	r5, r1
 8026a66:	d904      	bls.n	8026a72 <_raise_r+0x14>
 8026a68:	2316      	movs	r3, #22
 8026a6a:	6003      	str	r3, [r0, #0]
 8026a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8026a70:	bd38      	pop	{r3, r4, r5, pc}
 8026a72:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8026a74:	b112      	cbz	r2, 8026a7c <_raise_r+0x1e>
 8026a76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026a7a:	b94b      	cbnz	r3, 8026a90 <_raise_r+0x32>
 8026a7c:	4620      	mov	r0, r4
 8026a7e:	f000 f865 	bl	8026b4c <_getpid_r>
 8026a82:	462a      	mov	r2, r5
 8026a84:	4601      	mov	r1, r0
 8026a86:	4620      	mov	r0, r4
 8026a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026a8c:	f000 b84c 	b.w	8026b28 <_kill_r>
 8026a90:	2b01      	cmp	r3, #1
 8026a92:	d00a      	beq.n	8026aaa <_raise_r+0x4c>
 8026a94:	1c59      	adds	r1, r3, #1
 8026a96:	d103      	bne.n	8026aa0 <_raise_r+0x42>
 8026a98:	2316      	movs	r3, #22
 8026a9a:	6003      	str	r3, [r0, #0]
 8026a9c:	2001      	movs	r0, #1
 8026a9e:	e7e7      	b.n	8026a70 <_raise_r+0x12>
 8026aa0:	2400      	movs	r4, #0
 8026aa2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026aa6:	4628      	mov	r0, r5
 8026aa8:	4798      	blx	r3
 8026aaa:	2000      	movs	r0, #0
 8026aac:	e7e0      	b.n	8026a70 <_raise_r+0x12>
	...

08026ab0 <raise>:
 8026ab0:	4b02      	ldr	r3, [pc, #8]	; (8026abc <raise+0xc>)
 8026ab2:	4601      	mov	r1, r0
 8026ab4:	6818      	ldr	r0, [r3, #0]
 8026ab6:	f7ff bfd2 	b.w	8026a5e <_raise_r>
 8026aba:	bf00      	nop
 8026abc:	2000037c 	.word	0x2000037c

08026ac0 <_close_r>:
 8026ac0:	b538      	push	{r3, r4, r5, lr}
 8026ac2:	4d06      	ldr	r5, [pc, #24]	; (8026adc <_close_r+0x1c>)
 8026ac4:	2300      	movs	r3, #0
 8026ac6:	4604      	mov	r4, r0
 8026ac8:	4608      	mov	r0, r1
 8026aca:	602b      	str	r3, [r5, #0]
 8026acc:	f7de f85d 	bl	8004b8a <_close>
 8026ad0:	1c43      	adds	r3, r0, #1
 8026ad2:	d102      	bne.n	8026ada <_close_r+0x1a>
 8026ad4:	682b      	ldr	r3, [r5, #0]
 8026ad6:	b103      	cbz	r3, 8026ada <_close_r+0x1a>
 8026ad8:	6023      	str	r3, [r4, #0]
 8026ada:	bd38      	pop	{r3, r4, r5, pc}
 8026adc:	200262ec 	.word	0x200262ec

08026ae0 <_lseek_r>:
 8026ae0:	b538      	push	{r3, r4, r5, lr}
 8026ae2:	4d07      	ldr	r5, [pc, #28]	; (8026b00 <_lseek_r+0x20>)
 8026ae4:	4604      	mov	r4, r0
 8026ae6:	4608      	mov	r0, r1
 8026ae8:	4611      	mov	r1, r2
 8026aea:	2200      	movs	r2, #0
 8026aec:	602a      	str	r2, [r5, #0]
 8026aee:	461a      	mov	r2, r3
 8026af0:	f7de f872 	bl	8004bd8 <_lseek>
 8026af4:	1c43      	adds	r3, r0, #1
 8026af6:	d102      	bne.n	8026afe <_lseek_r+0x1e>
 8026af8:	682b      	ldr	r3, [r5, #0]
 8026afa:	b103      	cbz	r3, 8026afe <_lseek_r+0x1e>
 8026afc:	6023      	str	r3, [r4, #0]
 8026afe:	bd38      	pop	{r3, r4, r5, pc}
 8026b00:	200262ec 	.word	0x200262ec

08026b04 <_read_r>:
 8026b04:	b538      	push	{r3, r4, r5, lr}
 8026b06:	4d07      	ldr	r5, [pc, #28]	; (8026b24 <_read_r+0x20>)
 8026b08:	4604      	mov	r4, r0
 8026b0a:	4608      	mov	r0, r1
 8026b0c:	4611      	mov	r1, r2
 8026b0e:	2200      	movs	r2, #0
 8026b10:	602a      	str	r2, [r5, #0]
 8026b12:	461a      	mov	r2, r3
 8026b14:	f7de f800 	bl	8004b18 <_read>
 8026b18:	1c43      	adds	r3, r0, #1
 8026b1a:	d102      	bne.n	8026b22 <_read_r+0x1e>
 8026b1c:	682b      	ldr	r3, [r5, #0]
 8026b1e:	b103      	cbz	r3, 8026b22 <_read_r+0x1e>
 8026b20:	6023      	str	r3, [r4, #0]
 8026b22:	bd38      	pop	{r3, r4, r5, pc}
 8026b24:	200262ec 	.word	0x200262ec

08026b28 <_kill_r>:
 8026b28:	b538      	push	{r3, r4, r5, lr}
 8026b2a:	4d07      	ldr	r5, [pc, #28]	; (8026b48 <_kill_r+0x20>)
 8026b2c:	2300      	movs	r3, #0
 8026b2e:	4604      	mov	r4, r0
 8026b30:	4608      	mov	r0, r1
 8026b32:	4611      	mov	r1, r2
 8026b34:	602b      	str	r3, [r5, #0]
 8026b36:	f7dd ffd5 	bl	8004ae4 <_kill>
 8026b3a:	1c43      	adds	r3, r0, #1
 8026b3c:	d102      	bne.n	8026b44 <_kill_r+0x1c>
 8026b3e:	682b      	ldr	r3, [r5, #0]
 8026b40:	b103      	cbz	r3, 8026b44 <_kill_r+0x1c>
 8026b42:	6023      	str	r3, [r4, #0]
 8026b44:	bd38      	pop	{r3, r4, r5, pc}
 8026b46:	bf00      	nop
 8026b48:	200262ec 	.word	0x200262ec

08026b4c <_getpid_r>:
 8026b4c:	f7dd bfc2 	b.w	8004ad4 <_getpid>

08026b50 <_sbrk_r>:
 8026b50:	b538      	push	{r3, r4, r5, lr}
 8026b52:	4d06      	ldr	r5, [pc, #24]	; (8026b6c <_sbrk_r+0x1c>)
 8026b54:	2300      	movs	r3, #0
 8026b56:	4604      	mov	r4, r0
 8026b58:	4608      	mov	r0, r1
 8026b5a:	602b      	str	r3, [r5, #0]
 8026b5c:	f7de f84a 	bl	8004bf4 <_sbrk>
 8026b60:	1c43      	adds	r3, r0, #1
 8026b62:	d102      	bne.n	8026b6a <_sbrk_r+0x1a>
 8026b64:	682b      	ldr	r3, [r5, #0]
 8026b66:	b103      	cbz	r3, 8026b6a <_sbrk_r+0x1a>
 8026b68:	6023      	str	r3, [r4, #0]
 8026b6a:	bd38      	pop	{r3, r4, r5, pc}
 8026b6c:	200262ec 	.word	0x200262ec

08026b70 <_write_r>:
 8026b70:	b538      	push	{r3, r4, r5, lr}
 8026b72:	4d07      	ldr	r5, [pc, #28]	; (8026b90 <_write_r+0x20>)
 8026b74:	4604      	mov	r4, r0
 8026b76:	4608      	mov	r0, r1
 8026b78:	4611      	mov	r1, r2
 8026b7a:	2200      	movs	r2, #0
 8026b7c:	602a      	str	r2, [r5, #0]
 8026b7e:	461a      	mov	r2, r3
 8026b80:	f7dd ffe7 	bl	8004b52 <_write>
 8026b84:	1c43      	adds	r3, r0, #1
 8026b86:	d102      	bne.n	8026b8e <_write_r+0x1e>
 8026b88:	682b      	ldr	r3, [r5, #0]
 8026b8a:	b103      	cbz	r3, 8026b8e <_write_r+0x1e>
 8026b8c:	6023      	str	r3, [r4, #0]
 8026b8e:	bd38      	pop	{r3, r4, r5, pc}
 8026b90:	200262ec 	.word	0x200262ec

08026b94 <__errno>:
 8026b94:	4b01      	ldr	r3, [pc, #4]	; (8026b9c <__errno+0x8>)
 8026b96:	6818      	ldr	r0, [r3, #0]
 8026b98:	4770      	bx	lr
 8026b9a:	bf00      	nop
 8026b9c:	2000037c 	.word	0x2000037c

08026ba0 <__libc_init_array>:
 8026ba0:	b570      	push	{r4, r5, r6, lr}
 8026ba2:	4d0d      	ldr	r5, [pc, #52]	; (8026bd8 <__libc_init_array+0x38>)
 8026ba4:	4c0d      	ldr	r4, [pc, #52]	; (8026bdc <__libc_init_array+0x3c>)
 8026ba6:	1b64      	subs	r4, r4, r5
 8026ba8:	10a4      	asrs	r4, r4, #2
 8026baa:	2600      	movs	r6, #0
 8026bac:	42a6      	cmp	r6, r4
 8026bae:	d109      	bne.n	8026bc4 <__libc_init_array+0x24>
 8026bb0:	4d0b      	ldr	r5, [pc, #44]	; (8026be0 <__libc_init_array+0x40>)
 8026bb2:	4c0c      	ldr	r4, [pc, #48]	; (8026be4 <__libc_init_array+0x44>)
 8026bb4:	f000 fd70 	bl	8027698 <_init>
 8026bb8:	1b64      	subs	r4, r4, r5
 8026bba:	10a4      	asrs	r4, r4, #2
 8026bbc:	2600      	movs	r6, #0
 8026bbe:	42a6      	cmp	r6, r4
 8026bc0:	d105      	bne.n	8026bce <__libc_init_array+0x2e>
 8026bc2:	bd70      	pop	{r4, r5, r6, pc}
 8026bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8026bc8:	4798      	blx	r3
 8026bca:	3601      	adds	r6, #1
 8026bcc:	e7ee      	b.n	8026bac <__libc_init_array+0xc>
 8026bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8026bd2:	4798      	blx	r3
 8026bd4:	3601      	adds	r6, #1
 8026bd6:	e7f2      	b.n	8026bbe <__libc_init_array+0x1e>
 8026bd8:	0805a5f0 	.word	0x0805a5f0
 8026bdc:	0805a5f0 	.word	0x0805a5f0
 8026be0:	0805a5f0 	.word	0x0805a5f0
 8026be4:	0805a608 	.word	0x0805a608

08026be8 <__retarget_lock_init_recursive>:
 8026be8:	4770      	bx	lr

08026bea <__retarget_lock_acquire_recursive>:
 8026bea:	4770      	bx	lr

08026bec <__retarget_lock_release_recursive>:
 8026bec:	4770      	bx	lr

08026bee <memcpy>:
 8026bee:	440a      	add	r2, r1
 8026bf0:	4291      	cmp	r1, r2
 8026bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8026bf6:	d100      	bne.n	8026bfa <memcpy+0xc>
 8026bf8:	4770      	bx	lr
 8026bfa:	b510      	push	{r4, lr}
 8026bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026c04:	4291      	cmp	r1, r2
 8026c06:	d1f9      	bne.n	8026bfc <memcpy+0xe>
 8026c08:	bd10      	pop	{r4, pc}
	...

08026c0c <__register_exitproc>:
 8026c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026c10:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8026cc4 <__register_exitproc+0xb8>
 8026c14:	4606      	mov	r6, r0
 8026c16:	f8d8 0000 	ldr.w	r0, [r8]
 8026c1a:	461f      	mov	r7, r3
 8026c1c:	460d      	mov	r5, r1
 8026c1e:	4691      	mov	r9, r2
 8026c20:	f7ff ffe3 	bl	8026bea <__retarget_lock_acquire_recursive>
 8026c24:	4b23      	ldr	r3, [pc, #140]	; (8026cb4 <__register_exitproc+0xa8>)
 8026c26:	681c      	ldr	r4, [r3, #0]
 8026c28:	b934      	cbnz	r4, 8026c38 <__register_exitproc+0x2c>
 8026c2a:	4c23      	ldr	r4, [pc, #140]	; (8026cb8 <__register_exitproc+0xac>)
 8026c2c:	601c      	str	r4, [r3, #0]
 8026c2e:	4b23      	ldr	r3, [pc, #140]	; (8026cbc <__register_exitproc+0xb0>)
 8026c30:	b113      	cbz	r3, 8026c38 <__register_exitproc+0x2c>
 8026c32:	681b      	ldr	r3, [r3, #0]
 8026c34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026c38:	6863      	ldr	r3, [r4, #4]
 8026c3a:	2b1f      	cmp	r3, #31
 8026c3c:	dd07      	ble.n	8026c4e <__register_exitproc+0x42>
 8026c3e:	f8d8 0000 	ldr.w	r0, [r8]
 8026c42:	f7ff ffd3 	bl	8026bec <__retarget_lock_release_recursive>
 8026c46:	f04f 30ff 	mov.w	r0, #4294967295
 8026c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026c4e:	b32e      	cbz	r6, 8026c9c <__register_exitproc+0x90>
 8026c50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026c54:	b968      	cbnz	r0, 8026c72 <__register_exitproc+0x66>
 8026c56:	4b1a      	ldr	r3, [pc, #104]	; (8026cc0 <__register_exitproc+0xb4>)
 8026c58:	2b00      	cmp	r3, #0
 8026c5a:	d0f0      	beq.n	8026c3e <__register_exitproc+0x32>
 8026c5c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026c60:	f7ff fd14 	bl	802668c <malloc>
 8026c64:	2800      	cmp	r0, #0
 8026c66:	d0ea      	beq.n	8026c3e <__register_exitproc+0x32>
 8026c68:	2300      	movs	r3, #0
 8026c6a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026c6e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026c72:	6863      	ldr	r3, [r4, #4]
 8026c74:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026c78:	2201      	movs	r2, #1
 8026c7a:	409a      	lsls	r2, r3
 8026c7c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026c80:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026c84:	4313      	orrs	r3, r2
 8026c86:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026c8a:	2e02      	cmp	r6, #2
 8026c8c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026c90:	bf02      	ittt	eq
 8026c92:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026c96:	4313      	orreq	r3, r2
 8026c98:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026c9c:	6863      	ldr	r3, [r4, #4]
 8026c9e:	f8d8 0000 	ldr.w	r0, [r8]
 8026ca2:	1c5a      	adds	r2, r3, #1
 8026ca4:	3302      	adds	r3, #2
 8026ca6:	6062      	str	r2, [r4, #4]
 8026ca8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026cac:	f7ff ff9e 	bl	8026bec <__retarget_lock_release_recursive>
 8026cb0:	2000      	movs	r0, #0
 8026cb2:	e7ca      	b.n	8026c4a <__register_exitproc+0x3e>
 8026cb4:	20026380 	.word	0x20026380
 8026cb8:	200262f4 	.word	0x200262f4
 8026cbc:	08029c34 	.word	0x08029c34
 8026cc0:	0802668d 	.word	0x0802668d
 8026cc4:	20000380 	.word	0x20000380

08026cc8 <_free_r>:
 8026cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026cca:	2900      	cmp	r1, #0
 8026ccc:	d044      	beq.n	8026d58 <_free_r+0x90>
 8026cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026cd2:	9001      	str	r0, [sp, #4]
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8026cda:	bfb8      	it	lt
 8026cdc:	18e4      	addlt	r4, r4, r3
 8026cde:	f7ff fd85 	bl	80267ec <__malloc_lock>
 8026ce2:	4a1e      	ldr	r2, [pc, #120]	; (8026d5c <_free_r+0x94>)
 8026ce4:	9801      	ldr	r0, [sp, #4]
 8026ce6:	6813      	ldr	r3, [r2, #0]
 8026ce8:	b933      	cbnz	r3, 8026cf8 <_free_r+0x30>
 8026cea:	6063      	str	r3, [r4, #4]
 8026cec:	6014      	str	r4, [r2, #0]
 8026cee:	b003      	add	sp, #12
 8026cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026cf4:	f7ff bd80 	b.w	80267f8 <__malloc_unlock>
 8026cf8:	42a3      	cmp	r3, r4
 8026cfa:	d908      	bls.n	8026d0e <_free_r+0x46>
 8026cfc:	6825      	ldr	r5, [r4, #0]
 8026cfe:	1961      	adds	r1, r4, r5
 8026d00:	428b      	cmp	r3, r1
 8026d02:	bf01      	itttt	eq
 8026d04:	6819      	ldreq	r1, [r3, #0]
 8026d06:	685b      	ldreq	r3, [r3, #4]
 8026d08:	1949      	addeq	r1, r1, r5
 8026d0a:	6021      	streq	r1, [r4, #0]
 8026d0c:	e7ed      	b.n	8026cea <_free_r+0x22>
 8026d0e:	461a      	mov	r2, r3
 8026d10:	685b      	ldr	r3, [r3, #4]
 8026d12:	b10b      	cbz	r3, 8026d18 <_free_r+0x50>
 8026d14:	42a3      	cmp	r3, r4
 8026d16:	d9fa      	bls.n	8026d0e <_free_r+0x46>
 8026d18:	6811      	ldr	r1, [r2, #0]
 8026d1a:	1855      	adds	r5, r2, r1
 8026d1c:	42a5      	cmp	r5, r4
 8026d1e:	d10b      	bne.n	8026d38 <_free_r+0x70>
 8026d20:	6824      	ldr	r4, [r4, #0]
 8026d22:	4421      	add	r1, r4
 8026d24:	1854      	adds	r4, r2, r1
 8026d26:	42a3      	cmp	r3, r4
 8026d28:	6011      	str	r1, [r2, #0]
 8026d2a:	d1e0      	bne.n	8026cee <_free_r+0x26>
 8026d2c:	681c      	ldr	r4, [r3, #0]
 8026d2e:	685b      	ldr	r3, [r3, #4]
 8026d30:	6053      	str	r3, [r2, #4]
 8026d32:	440c      	add	r4, r1
 8026d34:	6014      	str	r4, [r2, #0]
 8026d36:	e7da      	b.n	8026cee <_free_r+0x26>
 8026d38:	d902      	bls.n	8026d40 <_free_r+0x78>
 8026d3a:	230c      	movs	r3, #12
 8026d3c:	6003      	str	r3, [r0, #0]
 8026d3e:	e7d6      	b.n	8026cee <_free_r+0x26>
 8026d40:	6825      	ldr	r5, [r4, #0]
 8026d42:	1961      	adds	r1, r4, r5
 8026d44:	428b      	cmp	r3, r1
 8026d46:	bf04      	itt	eq
 8026d48:	6819      	ldreq	r1, [r3, #0]
 8026d4a:	685b      	ldreq	r3, [r3, #4]
 8026d4c:	6063      	str	r3, [r4, #4]
 8026d4e:	bf04      	itt	eq
 8026d50:	1949      	addeq	r1, r1, r5
 8026d52:	6021      	streq	r1, [r4, #0]
 8026d54:	6054      	str	r4, [r2, #4]
 8026d56:	e7ca      	b.n	8026cee <_free_r+0x26>
 8026d58:	b003      	add	sp, #12
 8026d5a:	bd30      	pop	{r4, r5, pc}
 8026d5c:	200261a8 	.word	0x200261a8

08026d60 <__sfputc_r>:
 8026d60:	6893      	ldr	r3, [r2, #8]
 8026d62:	3b01      	subs	r3, #1
 8026d64:	2b00      	cmp	r3, #0
 8026d66:	b410      	push	{r4}
 8026d68:	6093      	str	r3, [r2, #8]
 8026d6a:	da08      	bge.n	8026d7e <__sfputc_r+0x1e>
 8026d6c:	6994      	ldr	r4, [r2, #24]
 8026d6e:	42a3      	cmp	r3, r4
 8026d70:	db01      	blt.n	8026d76 <__sfputc_r+0x16>
 8026d72:	290a      	cmp	r1, #10
 8026d74:	d103      	bne.n	8026d7e <__sfputc_r+0x1e>
 8026d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026d7a:	f000 bb73 	b.w	8027464 <__swbuf_r>
 8026d7e:	6813      	ldr	r3, [r2, #0]
 8026d80:	1c58      	adds	r0, r3, #1
 8026d82:	6010      	str	r0, [r2, #0]
 8026d84:	7019      	strb	r1, [r3, #0]
 8026d86:	4608      	mov	r0, r1
 8026d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026d8c:	4770      	bx	lr

08026d8e <__sfputs_r>:
 8026d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d90:	4606      	mov	r6, r0
 8026d92:	460f      	mov	r7, r1
 8026d94:	4614      	mov	r4, r2
 8026d96:	18d5      	adds	r5, r2, r3
 8026d98:	42ac      	cmp	r4, r5
 8026d9a:	d101      	bne.n	8026da0 <__sfputs_r+0x12>
 8026d9c:	2000      	movs	r0, #0
 8026d9e:	e007      	b.n	8026db0 <__sfputs_r+0x22>
 8026da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026da4:	463a      	mov	r2, r7
 8026da6:	4630      	mov	r0, r6
 8026da8:	f7ff ffda 	bl	8026d60 <__sfputc_r>
 8026dac:	1c43      	adds	r3, r0, #1
 8026dae:	d1f3      	bne.n	8026d98 <__sfputs_r+0xa>
 8026db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026db4 <_vfiprintf_r>:
 8026db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026db8:	460d      	mov	r5, r1
 8026dba:	b09d      	sub	sp, #116	; 0x74
 8026dbc:	4614      	mov	r4, r2
 8026dbe:	4698      	mov	r8, r3
 8026dc0:	4606      	mov	r6, r0
 8026dc2:	b118      	cbz	r0, 8026dcc <_vfiprintf_r+0x18>
 8026dc4:	6a03      	ldr	r3, [r0, #32]
 8026dc6:	b90b      	cbnz	r3, 8026dcc <_vfiprintf_r+0x18>
 8026dc8:	f7ff fdb6 	bl	8026938 <__sinit>
 8026dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026dce:	07d9      	lsls	r1, r3, #31
 8026dd0:	d405      	bmi.n	8026dde <_vfiprintf_r+0x2a>
 8026dd2:	89ab      	ldrh	r3, [r5, #12]
 8026dd4:	059a      	lsls	r2, r3, #22
 8026dd6:	d402      	bmi.n	8026dde <_vfiprintf_r+0x2a>
 8026dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026dda:	f7ff ff06 	bl	8026bea <__retarget_lock_acquire_recursive>
 8026dde:	89ab      	ldrh	r3, [r5, #12]
 8026de0:	071b      	lsls	r3, r3, #28
 8026de2:	d501      	bpl.n	8026de8 <_vfiprintf_r+0x34>
 8026de4:	692b      	ldr	r3, [r5, #16]
 8026de6:	b99b      	cbnz	r3, 8026e10 <_vfiprintf_r+0x5c>
 8026de8:	4629      	mov	r1, r5
 8026dea:	4630      	mov	r0, r6
 8026dec:	f000 fb78 	bl	80274e0 <__swsetup_r>
 8026df0:	b170      	cbz	r0, 8026e10 <_vfiprintf_r+0x5c>
 8026df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026df4:	07dc      	lsls	r4, r3, #31
 8026df6:	d504      	bpl.n	8026e02 <_vfiprintf_r+0x4e>
 8026df8:	f04f 30ff 	mov.w	r0, #4294967295
 8026dfc:	b01d      	add	sp, #116	; 0x74
 8026dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e02:	89ab      	ldrh	r3, [r5, #12]
 8026e04:	0598      	lsls	r0, r3, #22
 8026e06:	d4f7      	bmi.n	8026df8 <_vfiprintf_r+0x44>
 8026e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026e0a:	f7ff feef 	bl	8026bec <__retarget_lock_release_recursive>
 8026e0e:	e7f3      	b.n	8026df8 <_vfiprintf_r+0x44>
 8026e10:	2300      	movs	r3, #0
 8026e12:	9309      	str	r3, [sp, #36]	; 0x24
 8026e14:	2320      	movs	r3, #32
 8026e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8026e1e:	2330      	movs	r3, #48	; 0x30
 8026e20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8026fd4 <_vfiprintf_r+0x220>
 8026e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026e28:	f04f 0901 	mov.w	r9, #1
 8026e2c:	4623      	mov	r3, r4
 8026e2e:	469a      	mov	sl, r3
 8026e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026e34:	b10a      	cbz	r2, 8026e3a <_vfiprintf_r+0x86>
 8026e36:	2a25      	cmp	r2, #37	; 0x25
 8026e38:	d1f9      	bne.n	8026e2e <_vfiprintf_r+0x7a>
 8026e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8026e3e:	d00b      	beq.n	8026e58 <_vfiprintf_r+0xa4>
 8026e40:	465b      	mov	r3, fp
 8026e42:	4622      	mov	r2, r4
 8026e44:	4629      	mov	r1, r5
 8026e46:	4630      	mov	r0, r6
 8026e48:	f7ff ffa1 	bl	8026d8e <__sfputs_r>
 8026e4c:	3001      	adds	r0, #1
 8026e4e:	f000 80a9 	beq.w	8026fa4 <_vfiprintf_r+0x1f0>
 8026e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026e54:	445a      	add	r2, fp
 8026e56:	9209      	str	r2, [sp, #36]	; 0x24
 8026e58:	f89a 3000 	ldrb.w	r3, [sl]
 8026e5c:	2b00      	cmp	r3, #0
 8026e5e:	f000 80a1 	beq.w	8026fa4 <_vfiprintf_r+0x1f0>
 8026e62:	2300      	movs	r3, #0
 8026e64:	f04f 32ff 	mov.w	r2, #4294967295
 8026e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026e6c:	f10a 0a01 	add.w	sl, sl, #1
 8026e70:	9304      	str	r3, [sp, #16]
 8026e72:	9307      	str	r3, [sp, #28]
 8026e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026e78:	931a      	str	r3, [sp, #104]	; 0x68
 8026e7a:	4654      	mov	r4, sl
 8026e7c:	2205      	movs	r2, #5
 8026e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026e82:	4854      	ldr	r0, [pc, #336]	; (8026fd4 <_vfiprintf_r+0x220>)
 8026e84:	f7d9 f9bc 	bl	8000200 <memchr>
 8026e88:	9a04      	ldr	r2, [sp, #16]
 8026e8a:	b9d8      	cbnz	r0, 8026ec4 <_vfiprintf_r+0x110>
 8026e8c:	06d1      	lsls	r1, r2, #27
 8026e8e:	bf44      	itt	mi
 8026e90:	2320      	movmi	r3, #32
 8026e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026e96:	0713      	lsls	r3, r2, #28
 8026e98:	bf44      	itt	mi
 8026e9a:	232b      	movmi	r3, #43	; 0x2b
 8026e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8026ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8026ea6:	d015      	beq.n	8026ed4 <_vfiprintf_r+0x120>
 8026ea8:	9a07      	ldr	r2, [sp, #28]
 8026eaa:	4654      	mov	r4, sl
 8026eac:	2000      	movs	r0, #0
 8026eae:	f04f 0c0a 	mov.w	ip, #10
 8026eb2:	4621      	mov	r1, r4
 8026eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026eb8:	3b30      	subs	r3, #48	; 0x30
 8026eba:	2b09      	cmp	r3, #9
 8026ebc:	d94d      	bls.n	8026f5a <_vfiprintf_r+0x1a6>
 8026ebe:	b1b0      	cbz	r0, 8026eee <_vfiprintf_r+0x13a>
 8026ec0:	9207      	str	r2, [sp, #28]
 8026ec2:	e014      	b.n	8026eee <_vfiprintf_r+0x13a>
 8026ec4:	eba0 0308 	sub.w	r3, r0, r8
 8026ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8026ecc:	4313      	orrs	r3, r2
 8026ece:	9304      	str	r3, [sp, #16]
 8026ed0:	46a2      	mov	sl, r4
 8026ed2:	e7d2      	b.n	8026e7a <_vfiprintf_r+0xc6>
 8026ed4:	9b03      	ldr	r3, [sp, #12]
 8026ed6:	1d19      	adds	r1, r3, #4
 8026ed8:	681b      	ldr	r3, [r3, #0]
 8026eda:	9103      	str	r1, [sp, #12]
 8026edc:	2b00      	cmp	r3, #0
 8026ede:	bfbb      	ittet	lt
 8026ee0:	425b      	neglt	r3, r3
 8026ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8026ee6:	9307      	strge	r3, [sp, #28]
 8026ee8:	9307      	strlt	r3, [sp, #28]
 8026eea:	bfb8      	it	lt
 8026eec:	9204      	strlt	r2, [sp, #16]
 8026eee:	7823      	ldrb	r3, [r4, #0]
 8026ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8026ef2:	d10c      	bne.n	8026f0e <_vfiprintf_r+0x15a>
 8026ef4:	7863      	ldrb	r3, [r4, #1]
 8026ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8026ef8:	d134      	bne.n	8026f64 <_vfiprintf_r+0x1b0>
 8026efa:	9b03      	ldr	r3, [sp, #12]
 8026efc:	1d1a      	adds	r2, r3, #4
 8026efe:	681b      	ldr	r3, [r3, #0]
 8026f00:	9203      	str	r2, [sp, #12]
 8026f02:	2b00      	cmp	r3, #0
 8026f04:	bfb8      	it	lt
 8026f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8026f0a:	3402      	adds	r4, #2
 8026f0c:	9305      	str	r3, [sp, #20]
 8026f0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8026fe4 <_vfiprintf_r+0x230>
 8026f12:	7821      	ldrb	r1, [r4, #0]
 8026f14:	2203      	movs	r2, #3
 8026f16:	4650      	mov	r0, sl
 8026f18:	f7d9 f972 	bl	8000200 <memchr>
 8026f1c:	b138      	cbz	r0, 8026f2e <_vfiprintf_r+0x17a>
 8026f1e:	9b04      	ldr	r3, [sp, #16]
 8026f20:	eba0 000a 	sub.w	r0, r0, sl
 8026f24:	2240      	movs	r2, #64	; 0x40
 8026f26:	4082      	lsls	r2, r0
 8026f28:	4313      	orrs	r3, r2
 8026f2a:	3401      	adds	r4, #1
 8026f2c:	9304      	str	r3, [sp, #16]
 8026f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026f32:	4829      	ldr	r0, [pc, #164]	; (8026fd8 <_vfiprintf_r+0x224>)
 8026f34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026f38:	2206      	movs	r2, #6
 8026f3a:	f7d9 f961 	bl	8000200 <memchr>
 8026f3e:	2800      	cmp	r0, #0
 8026f40:	d03f      	beq.n	8026fc2 <_vfiprintf_r+0x20e>
 8026f42:	4b26      	ldr	r3, [pc, #152]	; (8026fdc <_vfiprintf_r+0x228>)
 8026f44:	bb1b      	cbnz	r3, 8026f8e <_vfiprintf_r+0x1da>
 8026f46:	9b03      	ldr	r3, [sp, #12]
 8026f48:	3307      	adds	r3, #7
 8026f4a:	f023 0307 	bic.w	r3, r3, #7
 8026f4e:	3308      	adds	r3, #8
 8026f50:	9303      	str	r3, [sp, #12]
 8026f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f54:	443b      	add	r3, r7
 8026f56:	9309      	str	r3, [sp, #36]	; 0x24
 8026f58:	e768      	b.n	8026e2c <_vfiprintf_r+0x78>
 8026f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8026f5e:	460c      	mov	r4, r1
 8026f60:	2001      	movs	r0, #1
 8026f62:	e7a6      	b.n	8026eb2 <_vfiprintf_r+0xfe>
 8026f64:	2300      	movs	r3, #0
 8026f66:	3401      	adds	r4, #1
 8026f68:	9305      	str	r3, [sp, #20]
 8026f6a:	4619      	mov	r1, r3
 8026f6c:	f04f 0c0a 	mov.w	ip, #10
 8026f70:	4620      	mov	r0, r4
 8026f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026f76:	3a30      	subs	r2, #48	; 0x30
 8026f78:	2a09      	cmp	r2, #9
 8026f7a:	d903      	bls.n	8026f84 <_vfiprintf_r+0x1d0>
 8026f7c:	2b00      	cmp	r3, #0
 8026f7e:	d0c6      	beq.n	8026f0e <_vfiprintf_r+0x15a>
 8026f80:	9105      	str	r1, [sp, #20]
 8026f82:	e7c4      	b.n	8026f0e <_vfiprintf_r+0x15a>
 8026f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8026f88:	4604      	mov	r4, r0
 8026f8a:	2301      	movs	r3, #1
 8026f8c:	e7f0      	b.n	8026f70 <_vfiprintf_r+0x1bc>
 8026f8e:	ab03      	add	r3, sp, #12
 8026f90:	9300      	str	r3, [sp, #0]
 8026f92:	462a      	mov	r2, r5
 8026f94:	4b12      	ldr	r3, [pc, #72]	; (8026fe0 <_vfiprintf_r+0x22c>)
 8026f96:	a904      	add	r1, sp, #16
 8026f98:	4630      	mov	r0, r6
 8026f9a:	f3af 8000 	nop.w
 8026f9e:	4607      	mov	r7, r0
 8026fa0:	1c78      	adds	r0, r7, #1
 8026fa2:	d1d6      	bne.n	8026f52 <_vfiprintf_r+0x19e>
 8026fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026fa6:	07d9      	lsls	r1, r3, #31
 8026fa8:	d405      	bmi.n	8026fb6 <_vfiprintf_r+0x202>
 8026faa:	89ab      	ldrh	r3, [r5, #12]
 8026fac:	059a      	lsls	r2, r3, #22
 8026fae:	d402      	bmi.n	8026fb6 <_vfiprintf_r+0x202>
 8026fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026fb2:	f7ff fe1b 	bl	8026bec <__retarget_lock_release_recursive>
 8026fb6:	89ab      	ldrh	r3, [r5, #12]
 8026fb8:	065b      	lsls	r3, r3, #25
 8026fba:	f53f af1d 	bmi.w	8026df8 <_vfiprintf_r+0x44>
 8026fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026fc0:	e71c      	b.n	8026dfc <_vfiprintf_r+0x48>
 8026fc2:	ab03      	add	r3, sp, #12
 8026fc4:	9300      	str	r3, [sp, #0]
 8026fc6:	462a      	mov	r2, r5
 8026fc8:	4b05      	ldr	r3, [pc, #20]	; (8026fe0 <_vfiprintf_r+0x22c>)
 8026fca:	a904      	add	r1, sp, #16
 8026fcc:	4630      	mov	r0, r6
 8026fce:	f000 f879 	bl	80270c4 <_printf_i>
 8026fd2:	e7e4      	b.n	8026f9e <_vfiprintf_r+0x1ea>
 8026fd4:	08029c38 	.word	0x08029c38
 8026fd8:	08029c42 	.word	0x08029c42
 8026fdc:	00000000 	.word	0x00000000
 8026fe0:	08026d8f 	.word	0x08026d8f
 8026fe4:	08029c3e 	.word	0x08029c3e

08026fe8 <_printf_common>:
 8026fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026fec:	4616      	mov	r6, r2
 8026fee:	4699      	mov	r9, r3
 8026ff0:	688a      	ldr	r2, [r1, #8]
 8026ff2:	690b      	ldr	r3, [r1, #16]
 8026ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026ff8:	4293      	cmp	r3, r2
 8026ffa:	bfb8      	it	lt
 8026ffc:	4613      	movlt	r3, r2
 8026ffe:	6033      	str	r3, [r6, #0]
 8027000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027004:	4607      	mov	r7, r0
 8027006:	460c      	mov	r4, r1
 8027008:	b10a      	cbz	r2, 802700e <_printf_common+0x26>
 802700a:	3301      	adds	r3, #1
 802700c:	6033      	str	r3, [r6, #0]
 802700e:	6823      	ldr	r3, [r4, #0]
 8027010:	0699      	lsls	r1, r3, #26
 8027012:	bf42      	ittt	mi
 8027014:	6833      	ldrmi	r3, [r6, #0]
 8027016:	3302      	addmi	r3, #2
 8027018:	6033      	strmi	r3, [r6, #0]
 802701a:	6825      	ldr	r5, [r4, #0]
 802701c:	f015 0506 	ands.w	r5, r5, #6
 8027020:	d106      	bne.n	8027030 <_printf_common+0x48>
 8027022:	f104 0a19 	add.w	sl, r4, #25
 8027026:	68e3      	ldr	r3, [r4, #12]
 8027028:	6832      	ldr	r2, [r6, #0]
 802702a:	1a9b      	subs	r3, r3, r2
 802702c:	42ab      	cmp	r3, r5
 802702e:	dc26      	bgt.n	802707e <_printf_common+0x96>
 8027030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027034:	1e13      	subs	r3, r2, #0
 8027036:	6822      	ldr	r2, [r4, #0]
 8027038:	bf18      	it	ne
 802703a:	2301      	movne	r3, #1
 802703c:	0692      	lsls	r2, r2, #26
 802703e:	d42b      	bmi.n	8027098 <_printf_common+0xb0>
 8027040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027044:	4649      	mov	r1, r9
 8027046:	4638      	mov	r0, r7
 8027048:	47c0      	blx	r8
 802704a:	3001      	adds	r0, #1
 802704c:	d01e      	beq.n	802708c <_printf_common+0xa4>
 802704e:	6823      	ldr	r3, [r4, #0]
 8027050:	6922      	ldr	r2, [r4, #16]
 8027052:	f003 0306 	and.w	r3, r3, #6
 8027056:	2b04      	cmp	r3, #4
 8027058:	bf02      	ittt	eq
 802705a:	68e5      	ldreq	r5, [r4, #12]
 802705c:	6833      	ldreq	r3, [r6, #0]
 802705e:	1aed      	subeq	r5, r5, r3
 8027060:	68a3      	ldr	r3, [r4, #8]
 8027062:	bf0c      	ite	eq
 8027064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027068:	2500      	movne	r5, #0
 802706a:	4293      	cmp	r3, r2
 802706c:	bfc4      	itt	gt
 802706e:	1a9b      	subgt	r3, r3, r2
 8027070:	18ed      	addgt	r5, r5, r3
 8027072:	2600      	movs	r6, #0
 8027074:	341a      	adds	r4, #26
 8027076:	42b5      	cmp	r5, r6
 8027078:	d11a      	bne.n	80270b0 <_printf_common+0xc8>
 802707a:	2000      	movs	r0, #0
 802707c:	e008      	b.n	8027090 <_printf_common+0xa8>
 802707e:	2301      	movs	r3, #1
 8027080:	4652      	mov	r2, sl
 8027082:	4649      	mov	r1, r9
 8027084:	4638      	mov	r0, r7
 8027086:	47c0      	blx	r8
 8027088:	3001      	adds	r0, #1
 802708a:	d103      	bne.n	8027094 <_printf_common+0xac>
 802708c:	f04f 30ff 	mov.w	r0, #4294967295
 8027090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027094:	3501      	adds	r5, #1
 8027096:	e7c6      	b.n	8027026 <_printf_common+0x3e>
 8027098:	18e1      	adds	r1, r4, r3
 802709a:	1c5a      	adds	r2, r3, #1
 802709c:	2030      	movs	r0, #48	; 0x30
 802709e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80270a2:	4422      	add	r2, r4
 80270a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80270a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80270ac:	3302      	adds	r3, #2
 80270ae:	e7c7      	b.n	8027040 <_printf_common+0x58>
 80270b0:	2301      	movs	r3, #1
 80270b2:	4622      	mov	r2, r4
 80270b4:	4649      	mov	r1, r9
 80270b6:	4638      	mov	r0, r7
 80270b8:	47c0      	blx	r8
 80270ba:	3001      	adds	r0, #1
 80270bc:	d0e6      	beq.n	802708c <_printf_common+0xa4>
 80270be:	3601      	adds	r6, #1
 80270c0:	e7d9      	b.n	8027076 <_printf_common+0x8e>
	...

080270c4 <_printf_i>:
 80270c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80270c8:	7e0f      	ldrb	r7, [r1, #24]
 80270ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80270cc:	2f78      	cmp	r7, #120	; 0x78
 80270ce:	4691      	mov	r9, r2
 80270d0:	4680      	mov	r8, r0
 80270d2:	460c      	mov	r4, r1
 80270d4:	469a      	mov	sl, r3
 80270d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80270da:	d807      	bhi.n	80270ec <_printf_i+0x28>
 80270dc:	2f62      	cmp	r7, #98	; 0x62
 80270de:	d80a      	bhi.n	80270f6 <_printf_i+0x32>
 80270e0:	2f00      	cmp	r7, #0
 80270e2:	f000 80d4 	beq.w	802728e <_printf_i+0x1ca>
 80270e6:	2f58      	cmp	r7, #88	; 0x58
 80270e8:	f000 80c0 	beq.w	802726c <_printf_i+0x1a8>
 80270ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80270f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80270f4:	e03a      	b.n	802716c <_printf_i+0xa8>
 80270f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80270fa:	2b15      	cmp	r3, #21
 80270fc:	d8f6      	bhi.n	80270ec <_printf_i+0x28>
 80270fe:	a101      	add	r1, pc, #4	; (adr r1, 8027104 <_printf_i+0x40>)
 8027100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027104:	0802715d 	.word	0x0802715d
 8027108:	08027171 	.word	0x08027171
 802710c:	080270ed 	.word	0x080270ed
 8027110:	080270ed 	.word	0x080270ed
 8027114:	080270ed 	.word	0x080270ed
 8027118:	080270ed 	.word	0x080270ed
 802711c:	08027171 	.word	0x08027171
 8027120:	080270ed 	.word	0x080270ed
 8027124:	080270ed 	.word	0x080270ed
 8027128:	080270ed 	.word	0x080270ed
 802712c:	080270ed 	.word	0x080270ed
 8027130:	08027275 	.word	0x08027275
 8027134:	0802719d 	.word	0x0802719d
 8027138:	0802722f 	.word	0x0802722f
 802713c:	080270ed 	.word	0x080270ed
 8027140:	080270ed 	.word	0x080270ed
 8027144:	08027297 	.word	0x08027297
 8027148:	080270ed 	.word	0x080270ed
 802714c:	0802719d 	.word	0x0802719d
 8027150:	080270ed 	.word	0x080270ed
 8027154:	080270ed 	.word	0x080270ed
 8027158:	08027237 	.word	0x08027237
 802715c:	682b      	ldr	r3, [r5, #0]
 802715e:	1d1a      	adds	r2, r3, #4
 8027160:	681b      	ldr	r3, [r3, #0]
 8027162:	602a      	str	r2, [r5, #0]
 8027164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802716c:	2301      	movs	r3, #1
 802716e:	e09f      	b.n	80272b0 <_printf_i+0x1ec>
 8027170:	6820      	ldr	r0, [r4, #0]
 8027172:	682b      	ldr	r3, [r5, #0]
 8027174:	0607      	lsls	r7, r0, #24
 8027176:	f103 0104 	add.w	r1, r3, #4
 802717a:	6029      	str	r1, [r5, #0]
 802717c:	d501      	bpl.n	8027182 <_printf_i+0xbe>
 802717e:	681e      	ldr	r6, [r3, #0]
 8027180:	e003      	b.n	802718a <_printf_i+0xc6>
 8027182:	0646      	lsls	r6, r0, #25
 8027184:	d5fb      	bpl.n	802717e <_printf_i+0xba>
 8027186:	f9b3 6000 	ldrsh.w	r6, [r3]
 802718a:	2e00      	cmp	r6, #0
 802718c:	da03      	bge.n	8027196 <_printf_i+0xd2>
 802718e:	232d      	movs	r3, #45	; 0x2d
 8027190:	4276      	negs	r6, r6
 8027192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027196:	485a      	ldr	r0, [pc, #360]	; (8027300 <_printf_i+0x23c>)
 8027198:	230a      	movs	r3, #10
 802719a:	e012      	b.n	80271c2 <_printf_i+0xfe>
 802719c:	682b      	ldr	r3, [r5, #0]
 802719e:	6820      	ldr	r0, [r4, #0]
 80271a0:	1d19      	adds	r1, r3, #4
 80271a2:	6029      	str	r1, [r5, #0]
 80271a4:	0605      	lsls	r5, r0, #24
 80271a6:	d501      	bpl.n	80271ac <_printf_i+0xe8>
 80271a8:	681e      	ldr	r6, [r3, #0]
 80271aa:	e002      	b.n	80271b2 <_printf_i+0xee>
 80271ac:	0641      	lsls	r1, r0, #25
 80271ae:	d5fb      	bpl.n	80271a8 <_printf_i+0xe4>
 80271b0:	881e      	ldrh	r6, [r3, #0]
 80271b2:	4853      	ldr	r0, [pc, #332]	; (8027300 <_printf_i+0x23c>)
 80271b4:	2f6f      	cmp	r7, #111	; 0x6f
 80271b6:	bf0c      	ite	eq
 80271b8:	2308      	moveq	r3, #8
 80271ba:	230a      	movne	r3, #10
 80271bc:	2100      	movs	r1, #0
 80271be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80271c2:	6865      	ldr	r5, [r4, #4]
 80271c4:	60a5      	str	r5, [r4, #8]
 80271c6:	2d00      	cmp	r5, #0
 80271c8:	bfa2      	ittt	ge
 80271ca:	6821      	ldrge	r1, [r4, #0]
 80271cc:	f021 0104 	bicge.w	r1, r1, #4
 80271d0:	6021      	strge	r1, [r4, #0]
 80271d2:	b90e      	cbnz	r6, 80271d8 <_printf_i+0x114>
 80271d4:	2d00      	cmp	r5, #0
 80271d6:	d04b      	beq.n	8027270 <_printf_i+0x1ac>
 80271d8:	4615      	mov	r5, r2
 80271da:	fbb6 f1f3 	udiv	r1, r6, r3
 80271de:	fb03 6711 	mls	r7, r3, r1, r6
 80271e2:	5dc7      	ldrb	r7, [r0, r7]
 80271e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80271e8:	4637      	mov	r7, r6
 80271ea:	42bb      	cmp	r3, r7
 80271ec:	460e      	mov	r6, r1
 80271ee:	d9f4      	bls.n	80271da <_printf_i+0x116>
 80271f0:	2b08      	cmp	r3, #8
 80271f2:	d10b      	bne.n	802720c <_printf_i+0x148>
 80271f4:	6823      	ldr	r3, [r4, #0]
 80271f6:	07de      	lsls	r6, r3, #31
 80271f8:	d508      	bpl.n	802720c <_printf_i+0x148>
 80271fa:	6923      	ldr	r3, [r4, #16]
 80271fc:	6861      	ldr	r1, [r4, #4]
 80271fe:	4299      	cmp	r1, r3
 8027200:	bfde      	ittt	le
 8027202:	2330      	movle	r3, #48	; 0x30
 8027204:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027208:	f105 35ff 	addle.w	r5, r5, #4294967295
 802720c:	1b52      	subs	r2, r2, r5
 802720e:	6122      	str	r2, [r4, #16]
 8027210:	f8cd a000 	str.w	sl, [sp]
 8027214:	464b      	mov	r3, r9
 8027216:	aa03      	add	r2, sp, #12
 8027218:	4621      	mov	r1, r4
 802721a:	4640      	mov	r0, r8
 802721c:	f7ff fee4 	bl	8026fe8 <_printf_common>
 8027220:	3001      	adds	r0, #1
 8027222:	d14a      	bne.n	80272ba <_printf_i+0x1f6>
 8027224:	f04f 30ff 	mov.w	r0, #4294967295
 8027228:	b004      	add	sp, #16
 802722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802722e:	6823      	ldr	r3, [r4, #0]
 8027230:	f043 0320 	orr.w	r3, r3, #32
 8027234:	6023      	str	r3, [r4, #0]
 8027236:	4833      	ldr	r0, [pc, #204]	; (8027304 <_printf_i+0x240>)
 8027238:	2778      	movs	r7, #120	; 0x78
 802723a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802723e:	6823      	ldr	r3, [r4, #0]
 8027240:	6829      	ldr	r1, [r5, #0]
 8027242:	061f      	lsls	r7, r3, #24
 8027244:	f851 6b04 	ldr.w	r6, [r1], #4
 8027248:	d402      	bmi.n	8027250 <_printf_i+0x18c>
 802724a:	065f      	lsls	r7, r3, #25
 802724c:	bf48      	it	mi
 802724e:	b2b6      	uxthmi	r6, r6
 8027250:	07df      	lsls	r7, r3, #31
 8027252:	bf48      	it	mi
 8027254:	f043 0320 	orrmi.w	r3, r3, #32
 8027258:	6029      	str	r1, [r5, #0]
 802725a:	bf48      	it	mi
 802725c:	6023      	strmi	r3, [r4, #0]
 802725e:	b91e      	cbnz	r6, 8027268 <_printf_i+0x1a4>
 8027260:	6823      	ldr	r3, [r4, #0]
 8027262:	f023 0320 	bic.w	r3, r3, #32
 8027266:	6023      	str	r3, [r4, #0]
 8027268:	2310      	movs	r3, #16
 802726a:	e7a7      	b.n	80271bc <_printf_i+0xf8>
 802726c:	4824      	ldr	r0, [pc, #144]	; (8027300 <_printf_i+0x23c>)
 802726e:	e7e4      	b.n	802723a <_printf_i+0x176>
 8027270:	4615      	mov	r5, r2
 8027272:	e7bd      	b.n	80271f0 <_printf_i+0x12c>
 8027274:	682b      	ldr	r3, [r5, #0]
 8027276:	6826      	ldr	r6, [r4, #0]
 8027278:	6961      	ldr	r1, [r4, #20]
 802727a:	1d18      	adds	r0, r3, #4
 802727c:	6028      	str	r0, [r5, #0]
 802727e:	0635      	lsls	r5, r6, #24
 8027280:	681b      	ldr	r3, [r3, #0]
 8027282:	d501      	bpl.n	8027288 <_printf_i+0x1c4>
 8027284:	6019      	str	r1, [r3, #0]
 8027286:	e002      	b.n	802728e <_printf_i+0x1ca>
 8027288:	0670      	lsls	r0, r6, #25
 802728a:	d5fb      	bpl.n	8027284 <_printf_i+0x1c0>
 802728c:	8019      	strh	r1, [r3, #0]
 802728e:	2300      	movs	r3, #0
 8027290:	6123      	str	r3, [r4, #16]
 8027292:	4615      	mov	r5, r2
 8027294:	e7bc      	b.n	8027210 <_printf_i+0x14c>
 8027296:	682b      	ldr	r3, [r5, #0]
 8027298:	1d1a      	adds	r2, r3, #4
 802729a:	602a      	str	r2, [r5, #0]
 802729c:	681d      	ldr	r5, [r3, #0]
 802729e:	6862      	ldr	r2, [r4, #4]
 80272a0:	2100      	movs	r1, #0
 80272a2:	4628      	mov	r0, r5
 80272a4:	f7d8 ffac 	bl	8000200 <memchr>
 80272a8:	b108      	cbz	r0, 80272ae <_printf_i+0x1ea>
 80272aa:	1b40      	subs	r0, r0, r5
 80272ac:	6060      	str	r0, [r4, #4]
 80272ae:	6863      	ldr	r3, [r4, #4]
 80272b0:	6123      	str	r3, [r4, #16]
 80272b2:	2300      	movs	r3, #0
 80272b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80272b8:	e7aa      	b.n	8027210 <_printf_i+0x14c>
 80272ba:	6923      	ldr	r3, [r4, #16]
 80272bc:	462a      	mov	r2, r5
 80272be:	4649      	mov	r1, r9
 80272c0:	4640      	mov	r0, r8
 80272c2:	47d0      	blx	sl
 80272c4:	3001      	adds	r0, #1
 80272c6:	d0ad      	beq.n	8027224 <_printf_i+0x160>
 80272c8:	6823      	ldr	r3, [r4, #0]
 80272ca:	079b      	lsls	r3, r3, #30
 80272cc:	d413      	bmi.n	80272f6 <_printf_i+0x232>
 80272ce:	68e0      	ldr	r0, [r4, #12]
 80272d0:	9b03      	ldr	r3, [sp, #12]
 80272d2:	4298      	cmp	r0, r3
 80272d4:	bfb8      	it	lt
 80272d6:	4618      	movlt	r0, r3
 80272d8:	e7a6      	b.n	8027228 <_printf_i+0x164>
 80272da:	2301      	movs	r3, #1
 80272dc:	4632      	mov	r2, r6
 80272de:	4649      	mov	r1, r9
 80272e0:	4640      	mov	r0, r8
 80272e2:	47d0      	blx	sl
 80272e4:	3001      	adds	r0, #1
 80272e6:	d09d      	beq.n	8027224 <_printf_i+0x160>
 80272e8:	3501      	adds	r5, #1
 80272ea:	68e3      	ldr	r3, [r4, #12]
 80272ec:	9903      	ldr	r1, [sp, #12]
 80272ee:	1a5b      	subs	r3, r3, r1
 80272f0:	42ab      	cmp	r3, r5
 80272f2:	dcf2      	bgt.n	80272da <_printf_i+0x216>
 80272f4:	e7eb      	b.n	80272ce <_printf_i+0x20a>
 80272f6:	2500      	movs	r5, #0
 80272f8:	f104 0619 	add.w	r6, r4, #25
 80272fc:	e7f5      	b.n	80272ea <_printf_i+0x226>
 80272fe:	bf00      	nop
 8027300:	08029c49 	.word	0x08029c49
 8027304:	08029c5a 	.word	0x08029c5a

08027308 <__sflush_r>:
 8027308:	898a      	ldrh	r2, [r1, #12]
 802730a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802730e:	4605      	mov	r5, r0
 8027310:	0710      	lsls	r0, r2, #28
 8027312:	460c      	mov	r4, r1
 8027314:	d458      	bmi.n	80273c8 <__sflush_r+0xc0>
 8027316:	684b      	ldr	r3, [r1, #4]
 8027318:	2b00      	cmp	r3, #0
 802731a:	dc05      	bgt.n	8027328 <__sflush_r+0x20>
 802731c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802731e:	2b00      	cmp	r3, #0
 8027320:	dc02      	bgt.n	8027328 <__sflush_r+0x20>
 8027322:	2000      	movs	r0, #0
 8027324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802732a:	2e00      	cmp	r6, #0
 802732c:	d0f9      	beq.n	8027322 <__sflush_r+0x1a>
 802732e:	2300      	movs	r3, #0
 8027330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027334:	682f      	ldr	r7, [r5, #0]
 8027336:	6a21      	ldr	r1, [r4, #32]
 8027338:	602b      	str	r3, [r5, #0]
 802733a:	d032      	beq.n	80273a2 <__sflush_r+0x9a>
 802733c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802733e:	89a3      	ldrh	r3, [r4, #12]
 8027340:	075a      	lsls	r2, r3, #29
 8027342:	d505      	bpl.n	8027350 <__sflush_r+0x48>
 8027344:	6863      	ldr	r3, [r4, #4]
 8027346:	1ac0      	subs	r0, r0, r3
 8027348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802734a:	b10b      	cbz	r3, 8027350 <__sflush_r+0x48>
 802734c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802734e:	1ac0      	subs	r0, r0, r3
 8027350:	2300      	movs	r3, #0
 8027352:	4602      	mov	r2, r0
 8027354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027356:	6a21      	ldr	r1, [r4, #32]
 8027358:	4628      	mov	r0, r5
 802735a:	47b0      	blx	r6
 802735c:	1c43      	adds	r3, r0, #1
 802735e:	89a3      	ldrh	r3, [r4, #12]
 8027360:	d106      	bne.n	8027370 <__sflush_r+0x68>
 8027362:	6829      	ldr	r1, [r5, #0]
 8027364:	291d      	cmp	r1, #29
 8027366:	d82b      	bhi.n	80273c0 <__sflush_r+0xb8>
 8027368:	4a29      	ldr	r2, [pc, #164]	; (8027410 <__sflush_r+0x108>)
 802736a:	410a      	asrs	r2, r1
 802736c:	07d6      	lsls	r6, r2, #31
 802736e:	d427      	bmi.n	80273c0 <__sflush_r+0xb8>
 8027370:	2200      	movs	r2, #0
 8027372:	6062      	str	r2, [r4, #4]
 8027374:	04d9      	lsls	r1, r3, #19
 8027376:	6922      	ldr	r2, [r4, #16]
 8027378:	6022      	str	r2, [r4, #0]
 802737a:	d504      	bpl.n	8027386 <__sflush_r+0x7e>
 802737c:	1c42      	adds	r2, r0, #1
 802737e:	d101      	bne.n	8027384 <__sflush_r+0x7c>
 8027380:	682b      	ldr	r3, [r5, #0]
 8027382:	b903      	cbnz	r3, 8027386 <__sflush_r+0x7e>
 8027384:	6560      	str	r0, [r4, #84]	; 0x54
 8027386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027388:	602f      	str	r7, [r5, #0]
 802738a:	2900      	cmp	r1, #0
 802738c:	d0c9      	beq.n	8027322 <__sflush_r+0x1a>
 802738e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027392:	4299      	cmp	r1, r3
 8027394:	d002      	beq.n	802739c <__sflush_r+0x94>
 8027396:	4628      	mov	r0, r5
 8027398:	f7ff fc96 	bl	8026cc8 <_free_r>
 802739c:	2000      	movs	r0, #0
 802739e:	6360      	str	r0, [r4, #52]	; 0x34
 80273a0:	e7c0      	b.n	8027324 <__sflush_r+0x1c>
 80273a2:	2301      	movs	r3, #1
 80273a4:	4628      	mov	r0, r5
 80273a6:	47b0      	blx	r6
 80273a8:	1c41      	adds	r1, r0, #1
 80273aa:	d1c8      	bne.n	802733e <__sflush_r+0x36>
 80273ac:	682b      	ldr	r3, [r5, #0]
 80273ae:	2b00      	cmp	r3, #0
 80273b0:	d0c5      	beq.n	802733e <__sflush_r+0x36>
 80273b2:	2b1d      	cmp	r3, #29
 80273b4:	d001      	beq.n	80273ba <__sflush_r+0xb2>
 80273b6:	2b16      	cmp	r3, #22
 80273b8:	d101      	bne.n	80273be <__sflush_r+0xb6>
 80273ba:	602f      	str	r7, [r5, #0]
 80273bc:	e7b1      	b.n	8027322 <__sflush_r+0x1a>
 80273be:	89a3      	ldrh	r3, [r4, #12]
 80273c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80273c4:	81a3      	strh	r3, [r4, #12]
 80273c6:	e7ad      	b.n	8027324 <__sflush_r+0x1c>
 80273c8:	690f      	ldr	r7, [r1, #16]
 80273ca:	2f00      	cmp	r7, #0
 80273cc:	d0a9      	beq.n	8027322 <__sflush_r+0x1a>
 80273ce:	0793      	lsls	r3, r2, #30
 80273d0:	680e      	ldr	r6, [r1, #0]
 80273d2:	bf08      	it	eq
 80273d4:	694b      	ldreq	r3, [r1, #20]
 80273d6:	600f      	str	r7, [r1, #0]
 80273d8:	bf18      	it	ne
 80273da:	2300      	movne	r3, #0
 80273dc:	eba6 0807 	sub.w	r8, r6, r7
 80273e0:	608b      	str	r3, [r1, #8]
 80273e2:	f1b8 0f00 	cmp.w	r8, #0
 80273e6:	dd9c      	ble.n	8027322 <__sflush_r+0x1a>
 80273e8:	6a21      	ldr	r1, [r4, #32]
 80273ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80273ec:	4643      	mov	r3, r8
 80273ee:	463a      	mov	r2, r7
 80273f0:	4628      	mov	r0, r5
 80273f2:	47b0      	blx	r6
 80273f4:	2800      	cmp	r0, #0
 80273f6:	dc06      	bgt.n	8027406 <__sflush_r+0xfe>
 80273f8:	89a3      	ldrh	r3, [r4, #12]
 80273fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80273fe:	81a3      	strh	r3, [r4, #12]
 8027400:	f04f 30ff 	mov.w	r0, #4294967295
 8027404:	e78e      	b.n	8027324 <__sflush_r+0x1c>
 8027406:	4407      	add	r7, r0
 8027408:	eba8 0800 	sub.w	r8, r8, r0
 802740c:	e7e9      	b.n	80273e2 <__sflush_r+0xda>
 802740e:	bf00      	nop
 8027410:	dfbffffe 	.word	0xdfbffffe

08027414 <_fflush_r>:
 8027414:	b538      	push	{r3, r4, r5, lr}
 8027416:	690b      	ldr	r3, [r1, #16]
 8027418:	4605      	mov	r5, r0
 802741a:	460c      	mov	r4, r1
 802741c:	b913      	cbnz	r3, 8027424 <_fflush_r+0x10>
 802741e:	2500      	movs	r5, #0
 8027420:	4628      	mov	r0, r5
 8027422:	bd38      	pop	{r3, r4, r5, pc}
 8027424:	b118      	cbz	r0, 802742e <_fflush_r+0x1a>
 8027426:	6a03      	ldr	r3, [r0, #32]
 8027428:	b90b      	cbnz	r3, 802742e <_fflush_r+0x1a>
 802742a:	f7ff fa85 	bl	8026938 <__sinit>
 802742e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027432:	2b00      	cmp	r3, #0
 8027434:	d0f3      	beq.n	802741e <_fflush_r+0xa>
 8027436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027438:	07d0      	lsls	r0, r2, #31
 802743a:	d404      	bmi.n	8027446 <_fflush_r+0x32>
 802743c:	0599      	lsls	r1, r3, #22
 802743e:	d402      	bmi.n	8027446 <_fflush_r+0x32>
 8027440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027442:	f7ff fbd2 	bl	8026bea <__retarget_lock_acquire_recursive>
 8027446:	4628      	mov	r0, r5
 8027448:	4621      	mov	r1, r4
 802744a:	f7ff ff5d 	bl	8027308 <__sflush_r>
 802744e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027450:	07da      	lsls	r2, r3, #31
 8027452:	4605      	mov	r5, r0
 8027454:	d4e4      	bmi.n	8027420 <_fflush_r+0xc>
 8027456:	89a3      	ldrh	r3, [r4, #12]
 8027458:	059b      	lsls	r3, r3, #22
 802745a:	d4e1      	bmi.n	8027420 <_fflush_r+0xc>
 802745c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802745e:	f7ff fbc5 	bl	8026bec <__retarget_lock_release_recursive>
 8027462:	e7dd      	b.n	8027420 <_fflush_r+0xc>

08027464 <__swbuf_r>:
 8027464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027466:	460e      	mov	r6, r1
 8027468:	4614      	mov	r4, r2
 802746a:	4605      	mov	r5, r0
 802746c:	b118      	cbz	r0, 8027476 <__swbuf_r+0x12>
 802746e:	6a03      	ldr	r3, [r0, #32]
 8027470:	b90b      	cbnz	r3, 8027476 <__swbuf_r+0x12>
 8027472:	f7ff fa61 	bl	8026938 <__sinit>
 8027476:	69a3      	ldr	r3, [r4, #24]
 8027478:	60a3      	str	r3, [r4, #8]
 802747a:	89a3      	ldrh	r3, [r4, #12]
 802747c:	071a      	lsls	r2, r3, #28
 802747e:	d525      	bpl.n	80274cc <__swbuf_r+0x68>
 8027480:	6923      	ldr	r3, [r4, #16]
 8027482:	b31b      	cbz	r3, 80274cc <__swbuf_r+0x68>
 8027484:	6823      	ldr	r3, [r4, #0]
 8027486:	6922      	ldr	r2, [r4, #16]
 8027488:	1a98      	subs	r0, r3, r2
 802748a:	6963      	ldr	r3, [r4, #20]
 802748c:	b2f6      	uxtb	r6, r6
 802748e:	4283      	cmp	r3, r0
 8027490:	4637      	mov	r7, r6
 8027492:	dc04      	bgt.n	802749e <__swbuf_r+0x3a>
 8027494:	4621      	mov	r1, r4
 8027496:	4628      	mov	r0, r5
 8027498:	f7ff ffbc 	bl	8027414 <_fflush_r>
 802749c:	b9e0      	cbnz	r0, 80274d8 <__swbuf_r+0x74>
 802749e:	68a3      	ldr	r3, [r4, #8]
 80274a0:	3b01      	subs	r3, #1
 80274a2:	60a3      	str	r3, [r4, #8]
 80274a4:	6823      	ldr	r3, [r4, #0]
 80274a6:	1c5a      	adds	r2, r3, #1
 80274a8:	6022      	str	r2, [r4, #0]
 80274aa:	701e      	strb	r6, [r3, #0]
 80274ac:	6962      	ldr	r2, [r4, #20]
 80274ae:	1c43      	adds	r3, r0, #1
 80274b0:	429a      	cmp	r2, r3
 80274b2:	d004      	beq.n	80274be <__swbuf_r+0x5a>
 80274b4:	89a3      	ldrh	r3, [r4, #12]
 80274b6:	07db      	lsls	r3, r3, #31
 80274b8:	d506      	bpl.n	80274c8 <__swbuf_r+0x64>
 80274ba:	2e0a      	cmp	r6, #10
 80274bc:	d104      	bne.n	80274c8 <__swbuf_r+0x64>
 80274be:	4621      	mov	r1, r4
 80274c0:	4628      	mov	r0, r5
 80274c2:	f7ff ffa7 	bl	8027414 <_fflush_r>
 80274c6:	b938      	cbnz	r0, 80274d8 <__swbuf_r+0x74>
 80274c8:	4638      	mov	r0, r7
 80274ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80274cc:	4621      	mov	r1, r4
 80274ce:	4628      	mov	r0, r5
 80274d0:	f000 f806 	bl	80274e0 <__swsetup_r>
 80274d4:	2800      	cmp	r0, #0
 80274d6:	d0d5      	beq.n	8027484 <__swbuf_r+0x20>
 80274d8:	f04f 37ff 	mov.w	r7, #4294967295
 80274dc:	e7f4      	b.n	80274c8 <__swbuf_r+0x64>
	...

080274e0 <__swsetup_r>:
 80274e0:	b538      	push	{r3, r4, r5, lr}
 80274e2:	4b2a      	ldr	r3, [pc, #168]	; (802758c <__swsetup_r+0xac>)
 80274e4:	4605      	mov	r5, r0
 80274e6:	6818      	ldr	r0, [r3, #0]
 80274e8:	460c      	mov	r4, r1
 80274ea:	b118      	cbz	r0, 80274f4 <__swsetup_r+0x14>
 80274ec:	6a03      	ldr	r3, [r0, #32]
 80274ee:	b90b      	cbnz	r3, 80274f4 <__swsetup_r+0x14>
 80274f0:	f7ff fa22 	bl	8026938 <__sinit>
 80274f4:	89a3      	ldrh	r3, [r4, #12]
 80274f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80274fa:	0718      	lsls	r0, r3, #28
 80274fc:	d422      	bmi.n	8027544 <__swsetup_r+0x64>
 80274fe:	06d9      	lsls	r1, r3, #27
 8027500:	d407      	bmi.n	8027512 <__swsetup_r+0x32>
 8027502:	2309      	movs	r3, #9
 8027504:	602b      	str	r3, [r5, #0]
 8027506:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802750a:	81a3      	strh	r3, [r4, #12]
 802750c:	f04f 30ff 	mov.w	r0, #4294967295
 8027510:	e034      	b.n	802757c <__swsetup_r+0x9c>
 8027512:	0758      	lsls	r0, r3, #29
 8027514:	d512      	bpl.n	802753c <__swsetup_r+0x5c>
 8027516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027518:	b141      	cbz	r1, 802752c <__swsetup_r+0x4c>
 802751a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802751e:	4299      	cmp	r1, r3
 8027520:	d002      	beq.n	8027528 <__swsetup_r+0x48>
 8027522:	4628      	mov	r0, r5
 8027524:	f7ff fbd0 	bl	8026cc8 <_free_r>
 8027528:	2300      	movs	r3, #0
 802752a:	6363      	str	r3, [r4, #52]	; 0x34
 802752c:	89a3      	ldrh	r3, [r4, #12]
 802752e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027532:	81a3      	strh	r3, [r4, #12]
 8027534:	2300      	movs	r3, #0
 8027536:	6063      	str	r3, [r4, #4]
 8027538:	6923      	ldr	r3, [r4, #16]
 802753a:	6023      	str	r3, [r4, #0]
 802753c:	89a3      	ldrh	r3, [r4, #12]
 802753e:	f043 0308 	orr.w	r3, r3, #8
 8027542:	81a3      	strh	r3, [r4, #12]
 8027544:	6923      	ldr	r3, [r4, #16]
 8027546:	b94b      	cbnz	r3, 802755c <__swsetup_r+0x7c>
 8027548:	89a3      	ldrh	r3, [r4, #12]
 802754a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802754e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027552:	d003      	beq.n	802755c <__swsetup_r+0x7c>
 8027554:	4621      	mov	r1, r4
 8027556:	4628      	mov	r0, r5
 8027558:	f000 f840 	bl	80275dc <__smakebuf_r>
 802755c:	89a0      	ldrh	r0, [r4, #12]
 802755e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027562:	f010 0301 	ands.w	r3, r0, #1
 8027566:	d00a      	beq.n	802757e <__swsetup_r+0x9e>
 8027568:	2300      	movs	r3, #0
 802756a:	60a3      	str	r3, [r4, #8]
 802756c:	6963      	ldr	r3, [r4, #20]
 802756e:	425b      	negs	r3, r3
 8027570:	61a3      	str	r3, [r4, #24]
 8027572:	6923      	ldr	r3, [r4, #16]
 8027574:	b943      	cbnz	r3, 8027588 <__swsetup_r+0xa8>
 8027576:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802757a:	d1c4      	bne.n	8027506 <__swsetup_r+0x26>
 802757c:	bd38      	pop	{r3, r4, r5, pc}
 802757e:	0781      	lsls	r1, r0, #30
 8027580:	bf58      	it	pl
 8027582:	6963      	ldrpl	r3, [r4, #20]
 8027584:	60a3      	str	r3, [r4, #8]
 8027586:	e7f4      	b.n	8027572 <__swsetup_r+0x92>
 8027588:	2000      	movs	r0, #0
 802758a:	e7f7      	b.n	802757c <__swsetup_r+0x9c>
 802758c:	2000037c 	.word	0x2000037c

08027590 <__swhatbuf_r>:
 8027590:	b570      	push	{r4, r5, r6, lr}
 8027592:	460c      	mov	r4, r1
 8027594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027598:	2900      	cmp	r1, #0
 802759a:	b096      	sub	sp, #88	; 0x58
 802759c:	4615      	mov	r5, r2
 802759e:	461e      	mov	r6, r3
 80275a0:	da0d      	bge.n	80275be <__swhatbuf_r+0x2e>
 80275a2:	89a3      	ldrh	r3, [r4, #12]
 80275a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80275a8:	f04f 0100 	mov.w	r1, #0
 80275ac:	bf0c      	ite	eq
 80275ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80275b2:	2340      	movne	r3, #64	; 0x40
 80275b4:	2000      	movs	r0, #0
 80275b6:	6031      	str	r1, [r6, #0]
 80275b8:	602b      	str	r3, [r5, #0]
 80275ba:	b016      	add	sp, #88	; 0x58
 80275bc:	bd70      	pop	{r4, r5, r6, pc}
 80275be:	466a      	mov	r2, sp
 80275c0:	f000 f848 	bl	8027654 <_fstat_r>
 80275c4:	2800      	cmp	r0, #0
 80275c6:	dbec      	blt.n	80275a2 <__swhatbuf_r+0x12>
 80275c8:	9901      	ldr	r1, [sp, #4]
 80275ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80275ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80275d2:	4259      	negs	r1, r3
 80275d4:	4159      	adcs	r1, r3
 80275d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80275da:	e7eb      	b.n	80275b4 <__swhatbuf_r+0x24>

080275dc <__smakebuf_r>:
 80275dc:	898b      	ldrh	r3, [r1, #12]
 80275de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80275e0:	079d      	lsls	r5, r3, #30
 80275e2:	4606      	mov	r6, r0
 80275e4:	460c      	mov	r4, r1
 80275e6:	d507      	bpl.n	80275f8 <__smakebuf_r+0x1c>
 80275e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80275ec:	6023      	str	r3, [r4, #0]
 80275ee:	6123      	str	r3, [r4, #16]
 80275f0:	2301      	movs	r3, #1
 80275f2:	6163      	str	r3, [r4, #20]
 80275f4:	b002      	add	sp, #8
 80275f6:	bd70      	pop	{r4, r5, r6, pc}
 80275f8:	ab01      	add	r3, sp, #4
 80275fa:	466a      	mov	r2, sp
 80275fc:	f7ff ffc8 	bl	8027590 <__swhatbuf_r>
 8027600:	9900      	ldr	r1, [sp, #0]
 8027602:	4605      	mov	r5, r0
 8027604:	4630      	mov	r0, r6
 8027606:	f7ff f871 	bl	80266ec <_malloc_r>
 802760a:	b948      	cbnz	r0, 8027620 <__smakebuf_r+0x44>
 802760c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027610:	059a      	lsls	r2, r3, #22
 8027612:	d4ef      	bmi.n	80275f4 <__smakebuf_r+0x18>
 8027614:	f023 0303 	bic.w	r3, r3, #3
 8027618:	f043 0302 	orr.w	r3, r3, #2
 802761c:	81a3      	strh	r3, [r4, #12]
 802761e:	e7e3      	b.n	80275e8 <__smakebuf_r+0xc>
 8027620:	89a3      	ldrh	r3, [r4, #12]
 8027622:	6020      	str	r0, [r4, #0]
 8027624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027628:	81a3      	strh	r3, [r4, #12]
 802762a:	9b00      	ldr	r3, [sp, #0]
 802762c:	6163      	str	r3, [r4, #20]
 802762e:	9b01      	ldr	r3, [sp, #4]
 8027630:	6120      	str	r0, [r4, #16]
 8027632:	b15b      	cbz	r3, 802764c <__smakebuf_r+0x70>
 8027634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027638:	4630      	mov	r0, r6
 802763a:	f000 f81d 	bl	8027678 <_isatty_r>
 802763e:	b128      	cbz	r0, 802764c <__smakebuf_r+0x70>
 8027640:	89a3      	ldrh	r3, [r4, #12]
 8027642:	f023 0303 	bic.w	r3, r3, #3
 8027646:	f043 0301 	orr.w	r3, r3, #1
 802764a:	81a3      	strh	r3, [r4, #12]
 802764c:	89a3      	ldrh	r3, [r4, #12]
 802764e:	431d      	orrs	r5, r3
 8027650:	81a5      	strh	r5, [r4, #12]
 8027652:	e7cf      	b.n	80275f4 <__smakebuf_r+0x18>

08027654 <_fstat_r>:
 8027654:	b538      	push	{r3, r4, r5, lr}
 8027656:	4d07      	ldr	r5, [pc, #28]	; (8027674 <_fstat_r+0x20>)
 8027658:	2300      	movs	r3, #0
 802765a:	4604      	mov	r4, r0
 802765c:	4608      	mov	r0, r1
 802765e:	4611      	mov	r1, r2
 8027660:	602b      	str	r3, [r5, #0]
 8027662:	f7dd fa9e 	bl	8004ba2 <_fstat>
 8027666:	1c43      	adds	r3, r0, #1
 8027668:	d102      	bne.n	8027670 <_fstat_r+0x1c>
 802766a:	682b      	ldr	r3, [r5, #0]
 802766c:	b103      	cbz	r3, 8027670 <_fstat_r+0x1c>
 802766e:	6023      	str	r3, [r4, #0]
 8027670:	bd38      	pop	{r3, r4, r5, pc}
 8027672:	bf00      	nop
 8027674:	200262ec 	.word	0x200262ec

08027678 <_isatty_r>:
 8027678:	b538      	push	{r3, r4, r5, lr}
 802767a:	4d06      	ldr	r5, [pc, #24]	; (8027694 <_isatty_r+0x1c>)
 802767c:	2300      	movs	r3, #0
 802767e:	4604      	mov	r4, r0
 8027680:	4608      	mov	r0, r1
 8027682:	602b      	str	r3, [r5, #0]
 8027684:	f7dd fa9d 	bl	8004bc2 <_isatty>
 8027688:	1c43      	adds	r3, r0, #1
 802768a:	d102      	bne.n	8027692 <_isatty_r+0x1a>
 802768c:	682b      	ldr	r3, [r5, #0]
 802768e:	b103      	cbz	r3, 8027692 <_isatty_r+0x1a>
 8027690:	6023      	str	r3, [r4, #0]
 8027692:	bd38      	pop	{r3, r4, r5, pc}
 8027694:	200262ec 	.word	0x200262ec

08027698 <_init>:
 8027698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802769a:	bf00      	nop
 802769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802769e:	bc08      	pop	{r3}
 80276a0:	469e      	mov	lr, r3
 80276a2:	4770      	bx	lr

080276a4 <_fini>:
 80276a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80276a6:	bf00      	nop
 80276a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80276aa:	bc08      	pop	{r3}
 80276ac:	469e      	mov	lr, r3
 80276ae:	4770      	bx	lr
