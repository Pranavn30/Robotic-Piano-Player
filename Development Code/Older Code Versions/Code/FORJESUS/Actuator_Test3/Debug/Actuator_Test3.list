
Actuator_Test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000272cc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000260c  08027490  08027490  00037490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000003c6  08029a9c  08029a9c  00039a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000024  08029e64  08029e64  00039e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00032fa0  08029e88  08029e88  00039e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000078  0805ce28  0805ce28  0006ce28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0805cea0  0805cea0  00070350  2**0
                  CONTENTS
  8 .ARM          00000008  0805cea0  0805cea0  0006cea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0805cea8  0805cea8  00070350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  0805cea8  0805cea8  0006cea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   0000000c  0805cec0  0805cec0  0006cec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000350  20000000  0805cecc  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00026110  20000350  0805d21c  00070350  2**3
                  ALLOC
 14 ._user_heap_stack 00000600  20026460  0805d21c  00076460  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00070350  2**0
                  CONTENTS, READONLY
 16 .comment      000000c2  00000000  00000000  00070380  2**0
                  CONTENTS, READONLY
 17 .debug_info   000765ae  00000000  00000000  00070442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000e369  00000000  00000000  000e69f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002f18  00000000  00000000  000f4d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000234c  00000000  00000000  000f7c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00033ffd  00000000  00000000  000f9fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00037349  00000000  00000000  0012dfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001292e6  00000000  00000000  0016530a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000d194  00000000  00000000  0028e5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000005d  00000000  00000000  0029b784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000350 	.word	0x20000350
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08027474 	.word	0x08027474

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000354 	.word	0x20000354
 80001fc:	08027474 	.word	0x08027474

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b970 	b.w	8000e94 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14a      	bne.n	8000c72 <__udivmoddi4+0xa6>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0xe2>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c06:	0c22      	lsrs	r2, r4, #16
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c10:	fb01 f005 	mul.w	r0, r1, r5
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x62>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c20:	f080 811c 	bcs.w	8000e5c <__udivmoddi4+0x290>
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f240 8119 	bls.w	8000e5c <__udivmoddi4+0x290>
 8000c2a:	3902      	subs	r1, #2
 8000c2c:	4462      	add	r2, ip
 8000c2e:	1a12      	subs	r2, r2, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	fb00 f505 	mul.w	r5, r0, r5
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x90>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x294>
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x294>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11e      	cbz	r6, 8000c6e <__udivmoddi4+0xa2>
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0xbc>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f000 80ed 	beq.w	8000e56 <__udivmoddi4+0x28a>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d149      	bne.n	8000d24 <__udivmoddi4+0x158>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0xce>
 8000c94:	4282      	cmp	r2, r0
 8000c96:	f200 80f8 	bhi.w	8000e8a <__udivmoddi4+0x2be>
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0e2      	beq.n	8000c6e <__udivmoddi4+0xa2>
 8000ca8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cac:	e7df      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xe6>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f382 	clz	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x210>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ccc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd0:	0c22      	lsrs	r2, r4, #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb0e f005 	mul.w	r0, lr, r5
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cde:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x122>
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	f200 80cb 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d00:	fb0e fe00 	mul.w	lr, lr, r0
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f200 80bb 	bhi.w	8000e8e <__udivmoddi4+0x2c2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	eba4 040e 	sub.w	r4, r4, lr
 8000d1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d22:	e79f      	b.n	8000c64 <__udivmoddi4+0x98>
 8000d24:	f1c1 0720 	rsb	r7, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d32:	fa05 f401 	lsl.w	r4, r5, r1
 8000d36:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3a:	40fd      	lsrs	r5, r7
 8000d3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d54:	fb08 f50e 	mul.w	r5, r8, lr
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d62:	d90b      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d6c:	f080 8088 	bcs.w	8000e80 <__udivmoddi4+0x2b4>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f240 8085 	bls.w	8000e80 <__udivmoddi4+0x2b4>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	4464      	add	r4, ip
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1da>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d9c:	d26c      	bcs.n	8000e78 <__udivmoddi4+0x2ac>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	d96a      	bls.n	8000e78 <__udivmoddi4+0x2ac>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fba3 9502 	umull	r9, r5, r3, r2
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	46c8      	mov	r8, r9
 8000db6:	46ae      	mov	lr, r5
 8000db8:	d356      	bcc.n	8000e68 <__udivmoddi4+0x29c>
 8000dba:	d053      	beq.n	8000e64 <__udivmoddi4+0x298>
 8000dbc:	b156      	cbz	r6, 8000dd4 <__udivmoddi4+0x208>
 8000dbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dca:	40ca      	lsrs	r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	4317      	orrs	r7, r2
 8000dd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	f1c3 0120 	rsb	r1, r3, #32
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	fa20 f201 	lsr.w	r2, r0, r1
 8000de8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dec:	409d      	lsls	r5, r3
 8000dee:	432a      	orrs	r2, r5
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e06:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0a:	428d      	cmp	r5, r1
 8000e0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x258>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1a:	d22f      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	d92d      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1b49      	subs	r1, r1, r5
 8000e26:	b292      	uxth	r2, r2
 8000e28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	fb05 f10e 	mul.w	r1, r5, lr
 8000e38:	4291      	cmp	r1, r2
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x282>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e44:	d216      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000e46:	4291      	cmp	r1, r2
 8000e48:	d914      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000e4a:	3d02      	subs	r5, #2
 8000e4c:	4462      	add	r2, ip
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e54:	e738      	b.n	8000cc8 <__udivmoddi4+0xfc>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e6e6      	b.n	8000c2e <__udivmoddi4+0x62>
 8000e60:	4610      	mov	r0, r2
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x90>
 8000e64:	4548      	cmp	r0, r9
 8000e66:	d2a9      	bcs.n	8000dbc <__udivmoddi4+0x1f0>
 8000e68:	ebb9 0802 	subs.w	r8, r9, r2
 8000e6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7a3      	b.n	8000dbc <__udivmoddi4+0x1f0>
 8000e74:	4645      	mov	r5, r8
 8000e76:	e7ea      	b.n	8000e4e <__udivmoddi4+0x282>
 8000e78:	462b      	mov	r3, r5
 8000e7a:	e794      	b.n	8000da6 <__udivmoddi4+0x1da>
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	e7d1      	b.n	8000e24 <__udivmoddi4+0x258>
 8000e80:	46d0      	mov	r8, sl
 8000e82:	e77b      	b.n	8000d7c <__udivmoddi4+0x1b0>
 8000e84:	3d02      	subs	r5, #2
 8000e86:	4462      	add	r2, ip
 8000e88:	e732      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e70a      	b.n	8000ca4 <__udivmoddi4+0xd8>
 8000e8e:	4464      	add	r4, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e742      	b.n	8000d1a <__udivmoddi4+0x14e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <formGroups>:
void GPIO_Deactivation_Left(int note);
int setDCStart(int current_time);
int setDCStop(int current_time);
void setNextAction(int current_time);

int formGroups(int noteArr[][noteColNum], int len){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	movementOps(noteArr, len);
 8000ea2:	6839      	ldr	r1, [r7, #0]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f97f 	bl	80011a8 <movementOps>
	int num_groups = noteArr[len - 1][3];
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	3b14      	subs	r3, #20
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < num_groups; i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	e01d      	b.n	8000f00 <formGroups+0x68>
		if(groupRange(noteArr, len, i, i + 1) <= 11){
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	6839      	ldr	r1, [r7, #0]
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 f820 	bl	8000f12 <groupRange>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b0b      	cmp	r3, #11
 8000ed6:	dc10      	bgt.n	8000efa <formGroups+0x62>
			groupMerge(noteArr, len, i, i + 1);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3301      	adds	r3, #1
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f8cb 	bl	800107c <groupMerge>
			num_groups--;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
			groupContinuity(noteArr, len);
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f8f2 	bl	80010d8 <groupContinuity>
			i--;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < num_groups; i++){
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbdd      	blt.n	8000ec4 <formGroups+0x2c>
		}
	}
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <groupRange>:

// Given two group numbers, return the collective range
int groupRange(int noteArr[][noteColNum], int len, int group1, int group2){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b08a      	sub	sp, #40	; 0x28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	603b      	str	r3, [r7, #0]
	int minNote = 100;
 8000f20:	2364      	movs	r3, #100	; 0x64
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
	int maxNote = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < len; i++){
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	e04b      	b.n	8000fc6 <groupRange+0xb4>
		if(noteArr[i][3] == group1 || noteArr[i][3] == group2){
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d00b      	beq.n	8000f5e <groupRange+0x4c>
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	461a      	mov	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4413      	add	r3, r2
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d130      	bne.n	8000fc0 <groupRange+0xae>
			if(noteArr[i][4] == 0){
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d125      	bne.n	8000fc0 <groupRange+0xae>
				int min = nearestMinWhite(noteArr[i][0]);
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f828 	bl	8000fdc <nearestMinWhite>
 8000f8c:	61b8      	str	r0, [r7, #24]
				int max = nearestMaxWhite(noteArr[i][0]);
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f82d 	bl	8001000 <nearestMaxWhite>
 8000fa6:	6178      	str	r0, [r7, #20]
				if(min < minNote){
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	429a      	cmp	r2, r3
 8000fae:	da01      	bge.n	8000fb4 <groupRange+0xa2>
					minNote = min;
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if(max > maxNote){
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dd01      	ble.n	8000fc0 <groupRange+0xae>
					maxNote = max;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < len; i++){
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbaf      	blt.n	8000f2e <groupRange+0x1c>
				}
			}
		}
	}
	return maxNote - minNote;
 8000fce:	6a3a      	ldr	r2, [r7, #32]
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	1ad3      	subs	r3, r2, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <nearestMinWhite>:

// Identify the nearest white note under the argument note number
int nearestMinWhite(int noteNum){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if(isBlackKey(noteNum)){
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f81d 	bl	8001024 <isBlackKey>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <nearestMinWhite+0x1a>
		return noteNum - 1;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <nearestMinWhite+0x1c>
	}
	return noteNum;
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <nearestMaxWhite>:

// Identify the nearest white note above the argument note number
int nearestMaxWhite(int noteNum){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if(isBlackKey(noteNum)){
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f80b 	bl	8001024 <isBlackKey>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <nearestMaxWhite+0x1a>
			return noteNum + 1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3301      	adds	r3, #1
 8001018:	e000      	b.n	800101c <nearestMaxWhite+0x1c>
		}
		return noteNum;
 800101a:	687b      	ldr	r3, [r7, #4]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <isBlackKey>:


// Identify if a note is a black key
int isBlackKey(int noteNum){
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	int isBlack = noteNum % 12;
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <isBlackKey+0x54>)
 8001030:	fb83 1302 	smull	r1, r3, r3, r2
 8001034:	1059      	asrs	r1, r3, #1
 8001036:	17d3      	asrs	r3, r2, #31
 8001038:	1ac9      	subs	r1, r1, r3
 800103a:	460b      	mov	r3, r1
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	440b      	add	r3, r1
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	60fb      	str	r3, [r7, #12]
	if(isBlack == 1 || isBlack == 3 || isBlack == 6 || isBlack == 8 || isBlack == 10){
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d00b      	beq.n	8001064 <isBlackKey+0x40>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d008      	beq.n	8001064 <isBlackKey+0x40>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b06      	cmp	r3, #6
 8001056:	d005      	beq.n	8001064 <isBlackKey+0x40>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b08      	cmp	r3, #8
 800105c:	d002      	beq.n	8001064 <isBlackKey+0x40>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b0a      	cmp	r3, #10
 8001062:	d101      	bne.n	8001068 <isBlackKey+0x44>
		return 1;
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <isBlackKey+0x46>
	}
	return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2aaaaaab 	.word	0x2aaaaaab

0800107c <groupMerge>:
// Given two consecutive groups, combine them into one group using the lower group number; assumes group1 < group2
void groupMerge(int noteArr[][noteColNum], int len, int group1, int group2){
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len; i++){
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e018      	b.n	80010c2 <groupMerge+0x46>
		if(noteArr[i][3] == group2){
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d109      	bne.n	80010bc <groupMerge+0x40>
			noteArr[i][3] = group1;
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	60da      	str	r2, [r3, #12]
	for(int i = 0; i < len; i++){
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbe2      	blt.n	8001090 <groupMerge+0x14>
		}
	}
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <groupContinuity>:

// Reassign group numbers so they are sequential in value
void groupContinuity(int noteArr[][noteColNum], int len){
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	int prevGroupNum = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
	int replaceGroup = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
	int newGroupNum = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
	int diff = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < len; i++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	e04c      	b.n	8001192 <groupContinuity+0xba>
		diff = noteArr[i][3] - prevGroupNum;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	60fb      	str	r3, [r7, #12]
		if(diff > 1 || diff < 0){
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b01      	cmp	r3, #1
 8001114:	dc02      	bgt.n	800111c <groupContinuity+0x44>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	da2d      	bge.n	8001178 <groupContinuity+0xa0>
			replaceGroup = noteArr[i][3];
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	461a      	mov	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	617b      	str	r3, [r7, #20]
			newGroupNum = prevGroupNum + 1;
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	3301      	adds	r3, #1
 8001134:	613b      	str	r3, [r7, #16]
			while(noteArr[i][3] == replaceGroup && (i < len)){
 8001136:	e00c      	b.n	8001152 <groupContinuity+0x7a>
				noteArr[i][3] = newGroupNum;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	461a      	mov	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	60da      	str	r2, [r3, #12]
				i++;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	3301      	adds	r3, #1
 8001150:	61bb      	str	r3, [r7, #24]
			while(noteArr[i][3] == replaceGroup && (i < len)){
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	429a      	cmp	r2, r3
 8001168:	d103      	bne.n	8001172 <groupContinuity+0x9a>
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	dbe2      	blt.n	8001138 <groupContinuity+0x60>
			}
			i--;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	3b01      	subs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
		}
		prevGroupNum = noteArr[i][3];
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < len; i++){
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	3301      	adds	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	dbae      	blt.n	80010f8 <groupContinuity+0x20>
	}
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <movementOps>:

// Search for all movement opportunities and use them as divisions between groups
void movementOps(int noteArr[][noteColNum], int len){
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	int current_group = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
	int time_max = noteArr[0][2];
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	613b      	str	r3, [r7, #16]
	noteArr[0][3] = 0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
	for(int i = 1; i < len; i++){
 80011c2:	2301      	movs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e051      	b.n	800126c <movementOps+0xc4>
		if(noteArr[i][1] > time_max){
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	da17      	bge.n	8001210 <movementOps+0x68>
			current_group++;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
			noteArr[i][3] = current_group;
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	60da      	str	r2, [r3, #12]
			time_max = noteArr[i][2];
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	e02a      	b.n	8001266 <movementOps+0xbe>
		}
		else if(noteArr[i][2] > time_max){
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	da14      	bge.n	8001252 <movementOps+0xaa>
			time_max = noteArr[i][2];
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	613b      	str	r3, [r7, #16]
			noteArr[i][3] = current_group;
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	e009      	b.n	8001266 <movementOps+0xbe>
		}
		else{
			noteArr[i][3] = current_group;
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	461a      	mov	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	60da      	str	r2, [r3, #12]
	for(int i = 1; i < len; i++){
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	dba9      	blt.n	80011c8 <movementOps+0x20>
		}
	}
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <assignActuatorPos>:

// Assign actuator positions using a note data array
int assignActuatorPos(int actuatorPos[][2], int noteArr[][noteColNum], int note_len, int hand){
 8001282:	b580      	push	{r7, lr}
 8001284:	b088      	sub	sp, #32
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	603b      	str	r3, [r7, #0]
	if(note_len < 1){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	dc01      	bgt.n	800129a <assignActuatorPos+0x18>
		return 0;
 8001296:	2300      	movs	r3, #0
 8001298:	e0d5      	b.n	8001446 <assignActuatorPos+0x1c4>
	}
	int current_group = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
	int group_min_note = nearestMinWhite(noteArr[0][0]);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe9a 	bl	8000fdc <nearestMinWhite>
 80012a8:	61b8      	str	r0, [r7, #24]
	int group_min_time = noteArr[0][1];
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < note_len; i++){
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	e091      	b.n	80013da <assignActuatorPos+0x158>
		if(noteArr[i][3] != current_group){
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	461a      	mov	r2, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4413      	add	r3, r2
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d05e      	beq.n	800138c <assignActuatorPos+0x10a>
			if(group_min_note > highestNote || group_min_note < lowestNote || (hand && group_min_note > defaultLeft) || (!hand && group_min_note < defaultRight)){
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2b60      	cmp	r3, #96	; 0x60
 80012d2:	dc0e      	bgt.n	80012f2 <assignActuatorPos+0x70>
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b23      	cmp	r3, #35	; 0x23
 80012d8:	dd0b      	ble.n	80012f2 <assignActuatorPos+0x70>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <assignActuatorPos+0x64>
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b2b      	cmp	r3, #43	; 0x2b
 80012e4:	dc05      	bgt.n	80012f2 <assignActuatorPos+0x70>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d113      	bne.n	8001314 <assignActuatorPos+0x92>
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b3b      	cmp	r3, #59	; 0x3b
 80012f0:	dc10      	bgt.n	8001314 <assignActuatorPos+0x92>
				if(hand){
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <assignActuatorPos+0x84>
					actuatorPos[current_group][0] = defaultLeft;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	222b      	movs	r2, #43	; 0x2b
 8001302:	601a      	str	r2, [r3, #0]
				if(hand){
 8001304:	e00c      	b.n	8001320 <assignActuatorPos+0x9e>
				}
				else{
					actuatorPos[current_group][0] = defaultRight;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	223c      	movs	r2, #60	; 0x3c
 8001310:	601a      	str	r2, [r3, #0]
				if(hand){
 8001312:	e005      	b.n	8001320 <assignActuatorPos+0x9e>
				}
			}
			else{
				actuatorPos[current_group][0] = group_min_note;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	601a      	str	r2, [r3, #0]
			}
			actuatorPos[current_group][1] = group_min_time;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	605a      	str	r2, [r3, #4]
			if(!noteArr[i][4]){
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	461a      	mov	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <assignActuatorPos+0xdc>
				group_min_note = nearestMinWhite(noteArr[i][0]);
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe41 	bl	8000fdc <nearestMinWhite>
 800135a:	61b8      	str	r0, [r7, #24]
 800135c:	e001      	b.n	8001362 <assignActuatorPos+0xe0>
			}
			else{
				group_min_note = 100;
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	61bb      	str	r3, [r7, #24]
			}
			group_min_time = noteArr[i][1];
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	617b      	str	r3, [r7, #20]
			current_group = noteArr[i][3];
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	461a      	mov	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	4413      	add	r3, r2
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e023      	b.n	80013d4 <assignActuatorPos+0x152>
		}
		else if(noteArr[i][0] < group_min_note && !noteArr[i][4]){
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dd17      	ble.n	80013d4 <assignActuatorPos+0x152>
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	461a      	mov	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4413      	add	r3, r2
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10c      	bne.n	80013d4 <assignActuatorPos+0x152>
				group_min_note = nearestMinWhite(noteArr[i][0]);
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	461a      	mov	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	4413      	add	r3, r2
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fe05 	bl	8000fdc <nearestMinWhite>
 80013d2:	61b8      	str	r0, [r7, #24]
	for(int i = 0; i < note_len; i++){
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	3301      	adds	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	f6ff af69 	blt.w	80012b6 <assignActuatorPos+0x34>
		}
	}
	if(group_min_note > highestNote || group_min_note < lowestNote || (hand && group_min_note > defaultLeft) || (!hand && group_min_note < defaultRight)){
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b60      	cmp	r3, #96	; 0x60
 80013e8:	dc0e      	bgt.n	8001408 <assignActuatorPos+0x186>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b23      	cmp	r3, #35	; 0x23
 80013ee:	dd0b      	ble.n	8001408 <assignActuatorPos+0x186>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <assignActuatorPos+0x17a>
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b2b      	cmp	r3, #43	; 0x2b
 80013fa:	dc05      	bgt.n	8001408 <assignActuatorPos+0x186>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d113      	bne.n	800142a <assignActuatorPos+0x1a8>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b3b      	cmp	r3, #59	; 0x3b
 8001406:	dc10      	bgt.n	800142a <assignActuatorPos+0x1a8>
		if(hand){
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <assignActuatorPos+0x19a>
			actuatorPos[current_group][0] = defaultLeft;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4413      	add	r3, r2
 8001416:	222b      	movs	r2, #43	; 0x2b
 8001418:	601a      	str	r2, [r3, #0]
		if(hand){
 800141a:	e00c      	b.n	8001436 <assignActuatorPos+0x1b4>
		}
		else{
			actuatorPos[current_group][0] = defaultRight;
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	223c      	movs	r2, #60	; 0x3c
 8001426:	601a      	str	r2, [r3, #0]
		if(hand){
 8001428:	e005      	b.n	8001436 <assignActuatorPos+0x1b4>
		}
	}
	else{
		actuatorPos[current_group][0] = group_min_note;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	601a      	str	r2, [r3, #0]
	}
	actuatorPos[current_group][1] = group_min_time;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	605a      	str	r2, [r3, #4]

	return current_group + 1;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
}
 8001446:	4618      	mov	r0, r3
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <splitStartStop>:

// Split start and stop times for notes
void splitStartStop(int noteArr[][noteColNum], int note_len, int noteArrStop[][2]){
 800144e:	b480      	push	{r7}
 8001450:	b087      	sub	sp, #28
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < note_len; i++){
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e01e      	b.n	800149e <splitStartStop+0x50>
		noteArrStop[i][0] = noteArr[i][0];
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	441a      	add	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	440b      	add	r3, r1
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	601a      	str	r2, [r3, #0]
		noteArrStop[i][1] = noteArr[i][2];
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	441a      	add	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	440b      	add	r3, r1
 8001494:	6892      	ldr	r2, [r2, #8]
 8001496:	605a      	str	r2, [r3, #4]
	for(int i = 0; i < note_len; i++){
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbdc      	blt.n	8001460 <splitStartStop+0x12>
	}
}
 80014a6:	bf00      	nop
 80014a8:	bf00      	nop
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <sortStop>:

// Sort stop array
void sortStop(int noteArr[][2], int note_len){
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
	int key_note, key_time, j;
	for(int i = 1; i < note_len; i++){
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	e044      	b.n	800154e <sortStop+0x9a>
		key_note = noteArr[i][0];
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]
		key_time = noteArr[i][1];
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	60bb      	str	r3, [r7, #8]
		j = i - 1;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	3b01      	subs	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]

		while(j >= 0 && noteArr[j][1] > key_time){
 80014e2:	e018      	b.n	8001516 <sortStop+0x62>
			noteArr[j + 1][0] = noteArr[j][0];
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	441a      	add	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	440b      	add	r3, r1
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	601a      	str	r2, [r3, #0]
			noteArr[j + 1][1] = noteArr[j][1];
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	441a      	add	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	440b      	add	r3, r1
 800150c:	6852      	ldr	r2, [r2, #4]
 800150e:	605a      	str	r2, [r3, #4]
			j--;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3b01      	subs	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
		while(j >= 0 && noteArr[j][1] > key_time){
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db07      	blt.n	800152c <sortStop+0x78>
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbdb      	blt.n	80014e4 <sortStop+0x30>
		}
		noteArr[j + 1][0] = key_note;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	601a      	str	r2, [r3, #0]
		noteArr[j + 1][1] = key_time;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	605a      	str	r2, [r3, #4]
	for(int i = 1; i < note_len; i++){
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	3301      	adds	r3, #1
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	dbb6      	blt.n	80014c4 <sortStop+0x10>
	}
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <assignDCAct>:
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{2, 3, 4, 12, 5, 7, 8, 9, 10, 11, 12, 0},
};

// Assign DC actuator activations
void assignDCAct(int actuatorPos[][2], int actuator_len, int noteArr[][noteColNum], int note_len){
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
	int DCNum = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < note_len; i++){
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e04f      	b.n	800161c <assignDCAct+0xb8>
		if(!noteArr[i][4]){
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d141      	bne.n	8001616 <assignDCAct+0xb2>
			DCNum = DCLookup[actuatorPos[(noteArr[i][3])][0] % 12][noteArr[i][0] % 12];
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <assignDCAct+0xd0>)
 80015ae:	fb83 2301 	smull	r2, r3, r3, r1
 80015b2:	105a      	asrs	r2, r3, #1
 80015b4:	17cb      	asrs	r3, r1, #31
 80015b6:	1ad2      	subs	r2, r2, r3
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	1aca      	subs	r2, r1, r3
 80015c2:	6979      	ldr	r1, [r7, #20]
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4619      	mov	r1, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	440b      	add	r3, r1
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <assignDCAct+0xd0>)
 80015d6:	fb83 1300 	smull	r1, r3, r3, r0
 80015da:	1059      	asrs	r1, r3, #1
 80015dc:	17c3      	asrs	r3, r0, #31
 80015de:	1ac9      	subs	r1, r1, r3
 80015e0:	460b      	mov	r3, r1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	440b      	add	r3, r1
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	1ac1      	subs	r1, r0, r3
 80015ea:	4813      	ldr	r0, [pc, #76]	; (8001638 <assignDCAct+0xd4>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80015fa:	613b      	str	r3, [r7, #16]
			if(DCNum < 12){
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b0b      	cmp	r3, #11
 8001600:	dc09      	bgt.n	8001616 <assignDCAct+0xb2>
				noteArr[i][0] = DCNum;
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < note_len; i++){
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbab      	blt.n	800157c <assignDCAct+0x18>
			}
		}

	}
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2aaaaaab 	.word	0x2aaaaaab
 8001638:	20000014 	.word	0x20000014

0800163c <setNextLinActuatorTime>:

int nextMove = 0;

// Sets TIM2 ARR so that it triggers for the next linear actuator movement
// Returns 0 if there is no next linear actuator movement
int setNextLinActuatorTime(int current_time){
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if(actuatorL >= actuatorPosL_len){
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <setNextLinActuatorTime+0xb0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <setNextLinActuatorTime+0xb4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	db11      	blt.n	8001674 <setNextLinActuatorTime+0x38>
		if(actuatorR >= actuatorPosR_len){
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <setNextLinActuatorTime+0xbc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	db02      	blt.n	8001662 <setNextLinActuatorTime+0x26>
			//HAL_TIM_Base_Stop_IT(&htim2);
			//return 0;
			return INT_MAX;
 800165c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001660:	e03e      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
		}
		else{
			//TIM2->ARR = actuatorPosR[actuatorR][1] - current_time - 1;
			return actuatorPosR[actuatorR][1] - current_time;
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a25      	ldr	r2, [pc, #148]	; (80016fc <setNextLinActuatorTime+0xc0>)
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	e035      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
		}
	}
	else if(actuatorR >= actuatorPosR_len){
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <setNextLinActuatorTime+0xbc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	db0e      	blt.n	800169e <setNextLinActuatorTime+0x62>
		if(actuatorL >= actuatorPosL_len){
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <setNextLinActuatorTime+0xb0>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <setNextLinActuatorTime+0xb4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	da28      	bge.n	80016de <setNextLinActuatorTime+0xa2>
			//HAL_TIM_Base_Stop_IT(&htim2);
			//return 0;
		}
		else{
			//TIM2->ARR = actuatorPosL[actuatorL][1] - current_time - 1;
			return actuatorPosL[actuatorL][1] - current_time;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <setNextLinActuatorTime+0xb0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <setNextLinActuatorTime+0xc4>)
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	e020      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
		}
	}
	else if(actuatorPosL[actuatorL][1] < actuatorPosR[actuatorR][1]){
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <setNextLinActuatorTime+0xb0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <setNextLinActuatorTime+0xc4>)
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4913      	ldr	r1, [pc, #76]	; (80016fc <setNextLinActuatorTime+0xc0>)
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	da08      	bge.n	80016cc <setNextLinActuatorTime+0x90>
		//TIM2->ARR = actuatorPosL[actuatorL][1] - current_time - 1;
		return actuatorPosL[actuatorL][1] - current_time;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <setNextLinActuatorTime+0xb0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <setNextLinActuatorTime+0xc4>)
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	e009      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
	}
	else{
		//TIM2->ARR = actuatorPosR[actuatorR][1] - current_time - 1;
		return actuatorPosR[actuatorR][1] - current_time;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <setNextLinActuatorTime+0xb8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <setNextLinActuatorTime+0xc0>)
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	e000      	b.n	80016e0 <setNextLinActuatorTime+0xa4>
	}

	return 1;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20008614 	.word	0x20008614
 80016f0:	20004748 	.word	0x20004748
 80016f4:	20008618 	.word	0x20008618
 80016f8:	200085cc 	.word	0x200085cc
 80016fc:	2000474c 	.word	0x2000474c
 8001700:	200008c8 	.word	0x200008c8

08001704 <setDCStart>:


// Sets TIM3 ARR so that it triggers for the next DC actuator push
// Returns 0 if there is no next DC actuator push
int setDCStart(int current_time){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	if(DCLeftStart >= note_dataL_len){
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <setDCStart+0xec>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <setDCStart+0xf0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	db18      	blt.n	800174a <setDCStart+0x46>
		if(DCRightStart >= note_dataR_len){
 8001718:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <setDCStart+0xf4>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b37      	ldr	r3, [pc, #220]	; (80017fc <setDCStart+0xf8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	db05      	blt.n	8001730 <setDCStart+0x2c>
			HAL_TIM_Base_Stop_IT(&htim3);
 8001724:	4836      	ldr	r0, [pc, #216]	; (8001800 <setDCStart+0xfc>)
 8001726:	f008 faa9 	bl	8009c7c <HAL_TIM_Base_Stop_IT>
			//return 0;
			return INT_MAX;
 800172a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800172e:	e05a      	b.n	80017e6 <setDCStart+0xe2>
		}
		else{
			//TIM3->ARR = note_dataR[DCRightStart][1] - current_time - 1;
			return note_dataR[DCRightStart][1] - current_time;
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <setDCStart+0xf4>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4933      	ldr	r1, [pc, #204]	; (8001804 <setDCStart+0x100>)
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3304      	adds	r3, #4
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	e04d      	b.n	80017e6 <setDCStart+0xe2>
		}
	}
	else if(DCRightStart >= note_dataR_len){
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <setDCStart+0xf4>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <setDCStart+0xf8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	db18      	blt.n	8001788 <setDCStart+0x84>
		if(DCLeftStart >= note_dataL_len){
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <setDCStart+0xec>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <setDCStart+0xf0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	db05      	blt.n	800176e <setDCStart+0x6a>
			HAL_TIM_Base_Stop_IT(&htim3);
 8001762:	4827      	ldr	r0, [pc, #156]	; (8001800 <setDCStart+0xfc>)
 8001764:	f008 fa8a 	bl	8009c7c <HAL_TIM_Base_Stop_IT>
			//return 0;
			return INT_MAX;
 8001768:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800176c:	e03b      	b.n	80017e6 <setDCStart+0xe2>
		}
		else{
			//TIM3->ARR = note_dataL[DCLeftStart][1] - current_time - 1;
			return note_dataL[DCLeftStart][1] - current_time;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <setDCStart+0xec>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4925      	ldr	r1, [pc, #148]	; (8001808 <setDCStart+0x104>)
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3304      	adds	r3, #4
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	e02e      	b.n	80017e6 <setDCStart+0xe2>
		}
	}
	else if(note_dataL[DCLeftStart][1] < note_dataR[DCRightStart][1]){
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <setDCStart+0xec>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	491e      	ldr	r1, [pc, #120]	; (8001808 <setDCStart+0x104>)
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	3304      	adds	r3, #4
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <setDCStart+0xf4>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4818      	ldr	r0, [pc, #96]	; (8001804 <setDCStart+0x100>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4403      	add	r3, r0
 80017ac:	3304      	adds	r3, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4299      	cmp	r1, r3
 80017b2:	da0c      	bge.n	80017ce <setDCStart+0xca>
		//TIM3->ARR = note_dataL[DCLeftStart][1] - current_time - 1;
		return note_dataL[DCLeftStart][1] - current_time;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <setDCStart+0xec>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4913      	ldr	r1, [pc, #76]	; (8001808 <setDCStart+0x104>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	3304      	adds	r3, #4
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	e00b      	b.n	80017e6 <setDCStart+0xe2>
	}
	else{
		//TIM3->ARR = note_dataR[DCRightStart][1] - current_time - 1;
		return note_dataR[DCRightStart][1] - current_time;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <setDCStart+0xf4>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	490c      	ldr	r1, [pc, #48]	; (8001804 <setDCStart+0x100>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	3304      	adds	r3, #4
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	1ad3      	subs	r3, r2, r3
	}
	return 1;
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000861c 	.word	0x2000861c
 80017f4:	2001226c 	.word	0x2001226c
 80017f8:	20008624 	.word	0x20008624
 80017fc:	2001beb0 	.word	0x2001beb0
 8001800:	200006b4 	.word	0x200006b4
 8001804:	20012270 	.word	0x20012270
 8001808:	2000862c 	.word	0x2000862c

0800180c <setDCStop>:

// Sets TIM4 ARR so that it triggers for the next DC actuator pull
// Returns 0 if there is no next DC actuator pull
int setDCStop(int current_time){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	if(DCLeftStop >= note_dataL_len){
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <setDCStop+0xbc>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <setDCStop+0xc0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	db14      	blt.n	800184a <setDCStop+0x3e>
		if(DCRightStop >= note_dataR_len){
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <setDCStop+0xc4>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <setDCStop+0xc8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	db05      	blt.n	8001838 <setDCStop+0x2c>
			HAL_TIM_Base_Stop_IT(&htim4);
 800182c:	482a      	ldr	r0, [pc, #168]	; (80018d8 <setDCStop+0xcc>)
 800182e:	f008 fa25 	bl	8009c7c <HAL_TIM_Base_Stop_IT>
			// return 0;
			return INT_MAX;
 8001832:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001836:	e042      	b.n	80018be <setDCStop+0xb2>
		}
		else{
			//TIM4->ARR = note_dataR_stop[DCRightStop][1] - current_time - 1;
			return note_dataR_stop[DCRightStop][1] - current_time ;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <setDCStop+0xc4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <setDCStop+0xd0>)
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	e039      	b.n	80018be <setDCStop+0xb2>
		}
	}
	else if(DCRightStop >= note_dataR_len){
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <setDCStop+0xc4>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <setDCStop+0xc8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	db14      	blt.n	8001880 <setDCStop+0x74>
		if(DCLeftStop >= note_dataL_len){
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <setDCStop+0xbc>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <setDCStop+0xc0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	db05      	blt.n	800186e <setDCStop+0x62>
			HAL_TIM_Base_Stop_IT(&htim4);
 8001862:	481d      	ldr	r0, [pc, #116]	; (80018d8 <setDCStop+0xcc>)
 8001864:	f008 fa0a 	bl	8009c7c <HAL_TIM_Base_Stop_IT>
			//return 0;
			return INT_MAX;
 8001868:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800186c:	e027      	b.n	80018be <setDCStop+0xb2>
		}
		else{
			//TIM4->ARR = note_dataL_stop[DCLeftStop][1] - current_time - 1;
			return note_dataL_stop[DCLeftStop][1] - current_time;
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <setDCStop+0xbc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <setDCStop+0xd4>)
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	e01e      	b.n	80018be <setDCStop+0xb2>
		}
	}
	else if(note_dataL_stop[DCLeftStop][1] < note_dataR_stop[DCRightStop][1]){
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <setDCStop+0xbc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <setDCStop+0xd4>)
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <setDCStop+0xc4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4912      	ldr	r1, [pc, #72]	; (80018dc <setDCStop+0xd0>)
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	da08      	bge.n	80018ae <setDCStop+0xa2>
		//TIM4->ARR = note_dataL_stop[DCLeftStop][1] - current_time - 1;
		return note_dataL_stop[DCLeftStop][1] - current_time;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <setDCStop+0xbc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <setDCStop+0xd4>)
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4413      	add	r3, r2
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	e007      	b.n	80018be <setDCStop+0xb2>
	}
	else{
		//TIM4->ARR = note_dataR_stop[DCRightStop][1] - current_time - 1;
		return note_dataR_stop[DCRightStop][1] - current_time;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <setDCStop+0xc4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <setDCStop+0xd0>)
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	1ad3      	subs	r3, r2, r3
	}
	return 1;
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20008620 	.word	0x20008620
 80018cc:	2001226c 	.word	0x2001226c
 80018d0:	20008628 	.word	0x20008628
 80018d4:	2001beb0 	.word	0x2001beb0
 80018d8:	20000700 	.word	0x20000700
 80018dc:	2001beb4 	.word	0x2001beb4
 80018e0:	2001fd34 	.word	0x2001fd34

080018e4 <setNextAction>:

void setNextAction(int current_time){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	int nextLinAct = setNextLinActuatorTime(current_time);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fea5 	bl	800163c <setNextLinActuatorTime>
 80018f2:	6178      	str	r0, [r7, #20]
	int nextDCPush = setDCStart(current_time);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff05 	bl	8001704 <setDCStart>
 80018fa:	6138      	str	r0, [r7, #16]
	int nextDCPull = setDCStop(current_time);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff85 	bl	800180c <setDCStop>
 8001902:	60f8      	str	r0, [r7, #12]
	if(nextDCPull == INT_MAX){
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800190a:	4293      	cmp	r3, r2
 800190c:	d102      	bne.n	8001914 <setNextAction+0x30>
		HAL_TIM_Base_Stop_IT(&htim2);
 800190e:	483a      	ldr	r0, [pc, #232]	; (80019f8 <setNextAction+0x114>)
 8001910:	f008 f9b4 	bl	8009c7c <HAL_TIM_Base_Stop_IT>
	}
	if(nextDCPull == nextLinAct && nextDCPull <= nextDCPush){
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	d111      	bne.n	8001940 <setNextAction+0x5c>
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	dc0d      	bgt.n	8001940 <setNextAction+0x5c>
		nextMove = 2;
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <setNextAction+0x118>)
 8001926:	2202      	movs	r2, #2
 8001928:	601a      	str	r2, [r3, #0]
		if(nextDCPull == 0){
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <setNextAction+0x52>
			nextDCPull++;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3301      	adds	r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
		}
		TIM2->ARR = nextDCPull;
 8001936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800193e:	e057      	b.n	80019f0 <setNextAction+0x10c>
	}
	else if(nextLinAct <= nextDCPush && nextDCPull > nextLinAct){
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	dc11      	bgt.n	800196c <setNextAction+0x88>
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	dd0d      	ble.n	800196c <setNextAction+0x88>
		nextMove = 0;
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <setNextAction+0x118>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
		if(nextLinAct == 0){
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <setNextAction+0x7e>
			nextLinAct++;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
		}
		TIM2->ARR = nextLinAct;
 8001962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	62d3      	str	r3, [r2, #44]	; 0x2c
 800196a:	e041      	b.n	80019f0 <setNextAction+0x10c>
	}
	else{
		if(nextDCPull < nextDCPush && nextDCPull < nextLinAct){
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	da11      	bge.n	8001998 <setNextAction+0xb4>
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	429a      	cmp	r2, r3
 800197a:	da0d      	bge.n	8001998 <setNextAction+0xb4>
			nextMove = 2;
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <setNextAction+0x118>)
 800197e:	2202      	movs	r2, #2
 8001980:	601a      	str	r2, [r3, #0]
			if(nextDCPull == 0){
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <setNextAction+0xaa>
				nextDCPull++;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3301      	adds	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
			}
			TIM2->ARR = nextDCPull;
 800198e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001996:	e02b      	b.n	80019f0 <setNextAction+0x10c>
		}
		else if(nextLinAct < nextDCPush && nextLinAct < nextDCPull){
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	da11      	bge.n	80019c4 <setNextAction+0xe0>
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	da0d      	bge.n	80019c4 <setNextAction+0xe0>
			nextMove = 0;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <setNextAction+0x118>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
			if(nextLinAct == 0){
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <setNextAction+0xd6>
				nextLinAct++;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
			}
			TIM2->ARR = nextLinAct;
 80019ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019c2:	e015      	b.n	80019f0 <setNextAction+0x10c>
		}
		else if(nextDCPush < nextLinAct && nextDCPush < nextDCPull){
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	da11      	bge.n	80019f0 <setNextAction+0x10c>
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	da0d      	bge.n	80019f0 <setNextAction+0x10c>
			nextMove = 1;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <setNextAction+0x118>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
			if(nextDCPush == 0){
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <setNextAction+0x102>
				nextDCPush++;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	3301      	adds	r3, #1
 80019e4:	613b      	str	r3, [r7, #16]
			}
			TIM2->ARR = nextDCPush;
 80019e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
}
 80019ee:	e7ff      	b.n	80019f0 <setNextAction+0x10c>
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000668 	.word	0x20000668
 80019fc:	20023bc8 	.word	0x20023bc8

08001a00 <HAL_TIM_PeriodElapsedCallback>:

int movements = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

	if (htim==&TGFX_T){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a94      	ldr	r2, [pc, #592]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d102      	bne.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x16>
	touchgfxSignalVSync();
 8001a10:	f010 f878 	bl	8011b04 <touchgfxSignalVSync>
	HAL_TIM_Base_Start_IT(&htim4);*/
	TIM2->CR1 |= TIM_CR1_CEN;
	//TIM3->CR1 |= TIM_CR1_CEN;
	//TIM4->CR1 |= TIM_CR1_CEN;
	}
}
 8001a14:	e34a      	b.n	80020ac <HAL_TIM_PeriodElapsedCallback+0x6ac>
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8001a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6013      	str	r3, [r2, #0]
	int current_time = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
	if(nextMove == 0){
 8001a2a:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 809e 	bne.w	8001b70 <HAL_TIM_PeriodElapsedCallback+0x170>
			if(actuatorL >= actuatorPosL_len){
 8001a34:	4b8b      	ldr	r3, [pc, #556]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	db14      	blt.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0x6a>
				moveActuatorRight(actuatorPosR[actuatorR][0]);
 8001a40:	4b8a      	ldr	r3, [pc, #552]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a8a      	ldr	r2, [pc, #552]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fb82 	bl	8002154 <moveActuatorRight>
				current_time = actuatorPosR[actuatorR][1];
 8001a50:	4b86      	ldr	r3, [pc, #536]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a86      	ldr	r2, [pc, #536]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
				actuatorR++;
 8001a5e:	4b83      	ldr	r3, [pc, #524]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a81      	ldr	r2, [pc, #516]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e315      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			else if(actuatorR >= actuatorPosR_len){
 8001a6a:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	db14      	blt.n	8001aa0 <HAL_TIM_PeriodElapsedCallback+0xa0>
				moveActuatorLeft(actuatorPosL[actuatorL][0]);
 8001a76:	4b7b      	ldr	r3, [pc, #492]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7f      	ldr	r2, [pc, #508]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fb23 	bl	80020cc <moveActuatorLeft>
				current_time = actuatorPosL[actuatorL][1];
 8001a86:	4b77      	ldr	r3, [pc, #476]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7b      	ldr	r2, [pc, #492]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	60fb      	str	r3, [r7, #12]
				actuatorL++;
 8001a94:	4b73      	ldr	r3, [pc, #460]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a72      	ldr	r2, [pc, #456]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e2fa      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			else if(actuatorPosL[actuatorL][1] == actuatorPosR[actuatorR][1]){
 8001aa0:	4b70      	ldr	r3, [pc, #448]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a74      	ldr	r2, [pc, #464]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	496f      	ldr	r1, [pc, #444]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d121      	bne.n	8001b00 <HAL_TIM_PeriodElapsedCallback+0x100>
				moveActuatorRight(actuatorPosR[actuatorR][0]);
 8001abc:	4b6b      	ldr	r3, [pc, #428]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6b      	ldr	r2, [pc, #428]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ac2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fb44 	bl	8002154 <moveActuatorRight>
				moveActuatorLeft(actuatorPosL[actuatorL][0]);
 8001acc:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a69      	ldr	r2, [pc, #420]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ad2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 faf8 	bl	80020cc <moveActuatorLeft>
				current_time = actuatorPosR[actuatorR][1];
 8001adc:	4b63      	ldr	r3, [pc, #396]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
				actuatorR++;
 8001aea:	4b60      	ldr	r3, [pc, #384]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4a5e      	ldr	r2, [pc, #376]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001af2:	6013      	str	r3, [r2, #0]
				actuatorL++;
 8001af4:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	4a5a      	ldr	r2, [pc, #360]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e2ca      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			else if(actuatorPosL[actuatorL][1] < actuatorPosR[actuatorR][1]){
 8001b00:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a5c      	ldr	r2, [pc, #368]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4b57      	ldr	r3, [pc, #348]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4957      	ldr	r1, [pc, #348]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	da14      	bge.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x146>
				moveActuatorLeft(actuatorPosL[actuatorL][0]);
 8001b1c:	4b51      	ldr	r3, [pc, #324]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a55      	ldr	r2, [pc, #340]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fad0 	bl	80020cc <moveActuatorLeft>
				current_time = actuatorPosL[actuatorL][1];
 8001b2c:	4b4d      	ldr	r3, [pc, #308]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a51      	ldr	r2, [pc, #324]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	60fb      	str	r3, [r7, #12]
				actuatorL++;
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a48      	ldr	r2, [pc, #288]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e2a7      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
				moveActuatorRight(actuatorPosR[actuatorR][0]);
 8001b46:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a49      	ldr	r2, [pc, #292]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 faff 	bl	8002154 <moveActuatorRight>
				current_time = actuatorPosR[actuatorR][1];
 8001b56:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a45      	ldr	r2, [pc, #276]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	60fb      	str	r3, [r7, #12]
				actuatorR++;
 8001b64:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a40      	ldr	r2, [pc, #256]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e292      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
	else if(nextMove == 1){
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	f040 8174 	bne.w	8001e62 <HAL_TIM_PeriodElapsedCallback+0x462>
		if(DCRightStart >= note_dataR_len){
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	db31      	blt.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x1ea>
			current_time = note_dataL[DCLeftStart][1];
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	493f      	ldr	r1, [pc, #252]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3304      	adds	r3, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60fb      	str	r3, [r7, #12]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001b9c:	e010      	b.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
				GPIO_Activation_Left(note_dataL[DCLeftStart][0]);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4939      	ldr	r1, [pc, #228]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fd47 	bl	8002644 <GPIO_Activation_Left>
				DCLeftStart++;
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bbe:	6013      	str	r3, [r2, #0]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4930      	ldr	r1, [pc, #192]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	f040 825d 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbda      	blt.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0x19e>
 8001be8:	e255      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(DCLeftStart >= note_dataL_len){
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	db4e      	blt.n	8001c94 <HAL_TIM_PeriodElapsedCallback+0x294>
			current_time = note_dataR[DCRightStart][1];
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4925      	ldr	r1, [pc, #148]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60fb      	str	r3, [r7, #12]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001c0c:	e010      	b.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x230>
				GPIO_Activation_Right(note_dataR[DCRightStart][0]);
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	491f      	ldr	r1, [pc, #124]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fbb1 	bl	8002388 <GPIO_Activation_Right>
				DCRightStart++;
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c2e:	6013      	str	r3, [r2, #0]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4916      	ldr	r1, [pc, #88]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3304      	adds	r3, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	f040 8225 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbda      	blt.n	8001c0e <HAL_TIM_PeriodElapsedCallback+0x20e>
 8001c58:	e21d      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001c5a:	bf00      	nop
 8001c5c:	20000700 	.word	0x20000700
 8001c60:	20023bc8 	.word	0x20023bc8
 8001c64:	20008614 	.word	0x20008614
 8001c68:	20004748 	.word	0x20004748
 8001c6c:	20008618 	.word	0x20008618
 8001c70:	2000474c 	.word	0x2000474c
 8001c74:	200085cc 	.word	0x200085cc
 8001c78:	200008c8 	.word	0x200008c8
 8001c7c:	20008624 	.word	0x20008624
 8001c80:	2001beb0 	.word	0x2001beb0
 8001c84:	2000861c 	.word	0x2000861c
 8001c88:	2000862c 	.word	0x2000862c
 8001c8c:	2001226c 	.word	0x2001226c
 8001c90:	20012270 	.word	0x20012270
		else if(note_dataR[DCRightStart][1] == note_dataL[DCLeftStart][1]){
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4992      	ldr	r1, [pc, #584]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	488f      	ldr	r0, [pc, #572]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4403      	add	r3, r0
 8001cb8:	3304      	adds	r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4299      	cmp	r1, r3
 8001cbe:	d156      	bne.n	8001d6e <HAL_TIM_PeriodElapsedCallback+0x36e>
			current_time = note_dataR[DCRightStart][1];
 8001cc0:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4987      	ldr	r1, [pc, #540]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001cd6:	e010      	b.n	8001cfa <HAL_TIM_PeriodElapsedCallback+0x2fa>
				GPIO_Activation_Right(note_dataR[DCRightStart][0]);
 8001cd8:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4981      	ldr	r1, [pc, #516]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fb4c 	bl	8002388 <GPIO_Activation_Right>
				DCRightStart++;
 8001cf0:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	4a7a      	ldr	r2, [pc, #488]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cf8:	6013      	str	r3, [r2, #0]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001cfa:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4979      	ldr	r1, [pc, #484]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d117      	bne.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x344>
 8001d14:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b75      	ldr	r3, [pc, #468]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbdb      	blt.n	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x2d8>
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001d20:	e010      	b.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x344>
				GPIO_Activation_Left(note_dataL[DCLeftStart][0]);
 8001d22:	4b71      	ldr	r3, [pc, #452]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4971      	ldr	r1, [pc, #452]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fc85 	bl	8002644 <GPIO_Activation_Left>
				DCLeftStart++;
 8001d3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	4a69      	ldr	r2, [pc, #420]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d42:	6013      	str	r3, [r2, #0]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001d44:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4968      	ldr	r1, [pc, #416]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3304      	adds	r3, #4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	f040 819b 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbda      	blt.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x322>
 8001d6c:	e193      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(note_dataR[DCRightStart][1] > note_dataL[DCLeftStart][1]){
 8001d6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	495c      	ldr	r1, [pc, #368]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3304      	adds	r3, #4
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4859      	ldr	r0, [pc, #356]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4403      	add	r3, r0
 8001d92:	3304      	adds	r3, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4299      	cmp	r1, r3
 8001d98:	dd31      	ble.n	8001dfe <HAL_TIM_PeriodElapsedCallback+0x3fe>
			current_time = note_dataL[DCLeftStart][1];
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4953      	ldr	r1, [pc, #332]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3304      	adds	r3, #4
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	60fb      	str	r3, [r7, #12]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001db0:	e010      	b.n	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x3d4>
				GPIO_Activation_Left(note_dataL[DCLeftStart][0]);
 8001db2:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	494d      	ldr	r1, [pc, #308]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fc3d 	bl	8002644 <GPIO_Activation_Left>
				DCLeftStart++;
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	4a45      	ldr	r2, [pc, #276]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001dd2:	6013      	str	r3, [r2, #0]
			while(note_dataL[DCLeftStart][1] == current_time && DCLeftStart < note_dataL_len){
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4944      	ldr	r1, [pc, #272]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3304      	adds	r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	f040 8153 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001df0:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbda      	blt.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x3b2>
 8001dfc:	e14b      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			current_time = note_dataR[DCRightStart][1];
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4938      	ldr	r1, [pc, #224]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3304      	adds	r3, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60fb      	str	r3, [r7, #12]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001e14:	e010      	b.n	8001e38 <HAL_TIM_PeriodElapsedCallback+0x438>
				GPIO_Activation_Right(note_dataR[DCRightStart][0]);
 8001e16:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4932      	ldr	r1, [pc, #200]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 faad 	bl	8002388 <GPIO_Activation_Right>
				DCRightStart++;
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e36:	6013      	str	r3, [r2, #0]
			while(note_dataR[DCRightStart][1] == current_time && DCRightStart < note_dataR_len){
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4929      	ldr	r1, [pc, #164]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3304      	adds	r3, #4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	f040 8121 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbda      	blt.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x416>
 8001e60:	e119      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
	else if(nextMove == 2){
 8001e62:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	f040 8115 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		if(DCRightStop >= note_dataR_len){
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	db25      	blt.n	8001ec4 <HAL_TIM_PeriodElapsedCallback+0x4c4>
			current_time = note_dataL_stop[DCLeftStop][1];
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8001e86:	e00c      	b.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x4a2>
				GPIO_Deactivation_Left(note_dataL_stop[DCLeftStop][0]);
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001e8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fe92 	bl	8002bbc <GPIO_Deactivation_Left>
				DCLeftStop++;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ea0:	6013      	str	r3, [r2, #0]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 80f0 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dbe2      	blt.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0x488>
 8001ec2:	e0e8      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(DCLeftStop >= note_dataL_len){
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	db3b      	blt.n	8001f48 <HAL_TIM_PeriodElapsedCallback+0x548>
			current_time = note_dataR_stop[DCRightStop][1];
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8001ede:	e022      	b.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x526>
 8001ee0:	20008624 	.word	0x20008624
 8001ee4:	20012270 	.word	0x20012270
 8001ee8:	2000861c 	.word	0x2000861c
 8001eec:	2000862c 	.word	0x2000862c
 8001ef0:	2001beb0 	.word	0x2001beb0
 8001ef4:	2001226c 	.word	0x2001226c
 8001ef8:	20023bc8 	.word	0x20023bc8
 8001efc:	20008628 	.word	0x20008628
 8001f00:	20008620 	.word	0x20008620
 8001f04:	2001fd34 	.word	0x2001fd34
 8001f08:	2001beb4 	.word	0x2001beb4
				GPIO_Deactivation_Right(note_dataR_stop[DCRightStop][0]);
 8001f0c:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fcf2 	bl	8002900 <GPIO_Deactivation_Right>
				DCRightStop++;
 8001f1c:	4b65      	ldr	r3, [pc, #404]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3301      	adds	r3, #1
 8001f22:	4a64      	ldr	r2, [pc, #400]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f24:	6013      	str	r3, [r2, #0]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a63      	ldr	r2, [pc, #396]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 80ae 	bne.w	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001f3a:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dbe2      	blt.n	8001f0c <HAL_TIM_PeriodElapsedCallback+0x50c>
 8001f46:	e0a6      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(note_dataR_stop[DCRightStop][1] == note_dataL_stop[DCLeftStop][1]){
 8001f48:	4b5a      	ldr	r3, [pc, #360]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	495a      	ldr	r1, [pc, #360]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d141      	bne.n	8001fe8 <HAL_TIM_PeriodElapsedCallback+0x5e8>
			current_time = note_dataR_stop[DCRightStop][1];
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8001f72:	e00c      	b.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0x58e>
				GPIO_Deactivation_Right(note_dataR_stop[DCRightStop][0]);
 8001f74:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4f      	ldr	r2, [pc, #316]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fcbe 	bl	8002900 <GPIO_Deactivation_Right>
				DCRightStop++;
 8001f84:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f8c:	6013      	str	r3, [r2, #0]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a49      	ldr	r2, [pc, #292]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d113      	bne.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x5c8>
 8001fa0:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b45      	ldr	r3, [pc, #276]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbe3      	blt.n	8001f74 <HAL_TIM_PeriodElapsedCallback+0x574>
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8001fac:	e00c      	b.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x5c8>
				GPIO_Deactivation_Left(note_dataL_stop[DCLeftStop][0]);
 8001fae:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a44      	ldr	r2, [pc, #272]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001fb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fdff 	bl	8002bbc <GPIO_Deactivation_Left>
				DCLeftStop++;
 8001fbe:	4b40      	ldr	r3, [pc, #256]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4a3e      	ldr	r2, [pc, #248]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fc6:	6013      	str	r3, [r2, #0]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3d      	ldr	r2, [pc, #244]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d15d      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	dbe3      	blt.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x5ae>
 8001fe6:	e056      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
		else if(note_dataR_stop[DCRightStop][1] > note_dataL_stop[DCLeftStop][1]){
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a32      	ldr	r2, [pc, #200]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4b32      	ldr	r3, [pc, #200]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4932      	ldr	r1, [pc, #200]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	dd24      	ble.n	800204e <HAL_TIM_PeriodElapsedCallback+0x64e>
			current_time = note_dataL_stop[DCLeftStop][1];
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2e      	ldr	r2, [pc, #184]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 8002012:	e00c      	b.n	800202e <HAL_TIM_PeriodElapsedCallback+0x62e>
				GPIO_Deactivation_Left(note_dataL_stop[DCLeftStop][0]);
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2a      	ldr	r2, [pc, #168]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 800201a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fdcc 	bl	8002bbc <GPIO_Deactivation_Left>
				DCLeftStop++;
 8002024:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800202c:	6013      	str	r3, [r2, #0]
			while(note_dataL_stop[DCLeftStop][1] == current_time && DCLeftStop < note_dataL_len){
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d12a      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbe3      	blt.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x614>
 800204c:	e023      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
			current_time = note_dataR_stop[DCRightStop][1];
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a19      	ldr	r2, [pc, #100]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 800205c:	e00c      	b.n	8002078 <HAL_TIM_PeriodElapsedCallback+0x678>
				GPIO_Deactivation_Right(note_dataR_stop[DCRightStop][0]);
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8002064:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fc49 	bl	8002900 <GPIO_Deactivation_Right>
				DCRightStop++;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8002076:	6013      	str	r3, [r2, #0]
			while(note_dataR_stop[DCRightStop][1] == current_time && DCRightStop < note_dataR_len){
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	429a      	cmp	r2, r3
 8002088:	d105      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x696>
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	dbe3      	blt.n	800205e <HAL_TIM_PeriodElapsedCallback+0x65e>
	setNextAction(current_time);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7ff fc24 	bl	80018e4 <setNextAction>
	TIM2->CR1 |= TIM_CR1_CEN;
 800209c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20008628 	.word	0x20008628
 80020b8:	2001beb4 	.word	0x2001beb4
 80020bc:	2001beb0 	.word	0x2001beb0
 80020c0:	20008620 	.word	0x20008620
 80020c4:	2001fd34 	.word	0x2001fd34
 80020c8:	2001226c 	.word	0x2001226c

080020cc <moveActuatorLeft>:

    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
}*/

// Move the left linear actuator to the correct position for the current note number
void moveActuatorLeft(int note_num){
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	double d = numToDistLeft[abs((note_num - defaultLeft))];
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b2b      	subs	r3, #43	; 0x2b
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bfb8      	it	lt
 80020dc:	425b      	neglt	r3, r3
 80020de:	4a1b      	ldr	r2, [pc, #108]	; (800214c <moveActuatorLeft+0x80>)
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double delta_x = d - current_pos_left;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <moveActuatorLeft+0x84>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f6:	f7fe f8d7 	bl	80002a8 <__aeabi_dsub>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(delta_x > 0){
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800210e:	f7fe fd13 	bl	8000b38 <__aeabi_dcmpgt>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <moveActuatorLeft+0x5a>
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x, 1, 0);
 8002118:	2100      	movs	r1, #0
 800211a:	2001      	movs	r0, #1
 800211c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002120:	f000 f8be 	bl	80022a0 <actuatorMoveDistLoop>
 8002124:	e009      	b.n	800213a <moveActuatorLeft+0x6e>
	}
	else{
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x * -1, 0, 0);
 8002126:	68bc      	ldr	r4, [r7, #8]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800212e:	2100      	movs	r1, #0
 8002130:	2000      	movs	r0, #0
 8002132:	ec45 4b10 	vmov	d0, r4, r5
 8002136:	f000 f8b3 	bl	80022a0 <actuatorMoveDistLoop>
	}

	current_pos_left = d;
 800213a:	4905      	ldr	r1, [pc, #20]	; (8002150 <moveActuatorLeft+0x84>)
 800213c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002140:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002144:	bf00      	nop
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	08028548 	.word	0x08028548
 8002150:	20023bb8 	.word	0x20023bb8

08002154 <moveActuatorRight>:

// Move the right linear actuator to the correct position for the current note number
void moveActuatorRight(int note_num){
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	double d = numToDistRight[note_num - defaultRight];
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b3c      	subs	r3, #60	; 0x3c
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <moveActuatorRight+0x7c>)
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double delta_x = d - current_pos_right;
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <moveActuatorRight+0x80>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002178:	f7fe f896 	bl	80002a8 <__aeabi_dsub>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(delta_x > 0){
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002190:	f7fe fcd2 	bl	8000b38 <__aeabi_dcmpgt>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <moveActuatorRight+0x54>
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x, 1, 1);
 800219a:	2101      	movs	r1, #1
 800219c:	2001      	movs	r0, #1
 800219e:	ed97 0b02 	vldr	d0, [r7, #8]
 80021a2:	f000 f87d 	bl	80022a0 <actuatorMoveDistLoop>
 80021a6:	e009      	b.n	80021bc <moveActuatorRight+0x68>
		//moveActuatorDistRight(delta_x, 1);
	}
	else{
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x * -1, 0, 1);
 80021a8:	68bc      	ldr	r4, [r7, #8]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021b0:	2101      	movs	r1, #1
 80021b2:	2000      	movs	r0, #0
 80021b4:	ec45 4b10 	vmov	d0, r4, r5
 80021b8:	f000 f872 	bl	80022a0 <actuatorMoveDistLoop>
		//moveActuatorDistRight(delta_x * -1, 0);
	}

	current_pos_right = d;
 80021bc:	4905      	ldr	r1, [pc, #20]	; (80021d4 <moveActuatorRight+0x80>)
 80021be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021c2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bdb0      	pop	{r4, r5, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	08028588 	.word	0x08028588
 80021d4:	20023bc0 	.word	0x20023bc0

080021d8 <play_notes>:

void play_notes() {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	formGroups(note_dataR, note_dataR_len);
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <play_notes+0x9c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4825      	ldr	r0, [pc, #148]	; (8002278 <play_notes+0xa0>)
 80021e4:	f7fe fe58 	bl	8000e98 <formGroups>
	formGroups(note_dataL, note_dataL_len);
 80021e8:	4b24      	ldr	r3, [pc, #144]	; (800227c <play_notes+0xa4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	4824      	ldr	r0, [pc, #144]	; (8002280 <play_notes+0xa8>)
 80021f0:	f7fe fe52 	bl	8000e98 <formGroups>

	actuatorPosR_len = assignActuatorPos(actuatorPosR, note_dataR, note_dataR_len, 0);
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <play_notes+0x9c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	491f      	ldr	r1, [pc, #124]	; (8002278 <play_notes+0xa0>)
 80021fc:	4821      	ldr	r0, [pc, #132]	; (8002284 <play_notes+0xac>)
 80021fe:	f7ff f840 	bl	8001282 <assignActuatorPos>
 8002202:	4603      	mov	r3, r0
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <play_notes+0xb0>)
 8002206:	6013      	str	r3, [r2, #0]
	actuatorPosL_len = assignActuatorPos(actuatorPosL, note_dataL, note_dataL_len, 1);
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <play_notes+0xa4>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	491c      	ldr	r1, [pc, #112]	; (8002280 <play_notes+0xa8>)
 8002210:	481e      	ldr	r0, [pc, #120]	; (800228c <play_notes+0xb4>)
 8002212:	f7ff f836 	bl	8001282 <assignActuatorPos>
 8002216:	4603      	mov	r3, r0
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <play_notes+0xb8>)
 800221a:	6013      	str	r3, [r2, #0]

	assignDCAct(actuatorPosR, actuatorPosR_len, note_dataR, note_dataR_len);
 800221c:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <play_notes+0xb0>)
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <play_notes+0x9c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <play_notes+0xa0>)
 8002226:	4817      	ldr	r0, [pc, #92]	; (8002284 <play_notes+0xac>)
 8002228:	f7ff f99c 	bl	8001564 <assignDCAct>
	assignDCAct(actuatorPosL, actuatorPosL_len, note_dataL, note_dataL_len);
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <play_notes+0xb8>)
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <play_notes+0xa4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a12      	ldr	r2, [pc, #72]	; (8002280 <play_notes+0xa8>)
 8002236:	4815      	ldr	r0, [pc, #84]	; (800228c <play_notes+0xb4>)
 8002238:	f7ff f994 	bl	8001564 <assignDCAct>
	splitStartStop(note_dataR, note_dataR_len, note_dataR_stop);
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <play_notes+0x9c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <play_notes+0xbc>)
 8002242:	4619      	mov	r1, r3
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <play_notes+0xa0>)
 8002246:	f7ff f902 	bl	800144e <splitStartStop>
	splitStartStop(note_dataL, note_dataL_len, note_dataL_stop);
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <play_notes+0xa4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <play_notes+0xc0>)
 8002250:	4619      	mov	r1, r3
 8002252:	480b      	ldr	r0, [pc, #44]	; (8002280 <play_notes+0xa8>)
 8002254:	f7ff f8fb 	bl	800144e <splitStartStop>
	sortStop(note_dataR_stop, note_dataR_len);
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <play_notes+0x9c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	480d      	ldr	r0, [pc, #52]	; (8002294 <play_notes+0xbc>)
 8002260:	f7ff f928 	bl	80014b4 <sortStop>
	sortStop(note_dataL_stop, note_dataL_len);
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <play_notes+0xa4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <play_notes+0xc0>)
 800226c:	f7ff f922 	bl	80014b4 <sortStop>

	// *************************
	// THIS IS THE START SEQUENCE
	// *************************

}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	2001beb0 	.word	0x2001beb0
 8002278:	20012270 	.word	0x20012270
 800227c:	2001226c 	.word	0x2001226c
 8002280:	2000862c 	.word	0x2000862c
 8002284:	2000474c 	.word	0x2000474c
 8002288:	200085cc 	.word	0x200085cc
 800228c:	200008c8 	.word	0x200008c8
 8002290:	20004748 	.word	0x20004748
 8002294:	2001beb4 	.word	0x2001beb4
 8002298:	2001fd34 	.word	0x2001fd34
 800229c:	00000000 	.word	0x00000000

080022a0 <actuatorMoveDistLoop>:

// hand = 0 is left, hand = 1 is right
void actuatorMoveDistLoop(double dist, int dir, int hand){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
	int steps = (int) ((dist / inPerRot) * stepPerRot);
 80022ae:	a334      	add	r3, pc, #208	; (adr r3, 8002380 <actuatorMoveDistLoop+0xe0>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022b8:	f7fe fad8 	bl	800086c <__aeabi_ddiv>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <actuatorMoveDistLoop+0xd0>)
 80022ca:	f7fe f9a5 	bl	8000618 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fc39 	bl	8000b4c <__aeabi_d2iz>
 80022da:	4603      	mov	r3, r0
 80022dc:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, dir);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	4823      	ldr	r0, [pc, #140]	; (8002374 <actuatorMoveDistLoop+0xd4>)
 80022e8:	f004 f8fe 	bl	80064e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2101      	movs	r1, #1
 80022f0:	4821      	ldr	r0, [pc, #132]	; (8002378 <actuatorMoveDistLoop+0xd8>)
 80022f2:	f004 f8f9 	bl	80064e8 <HAL_GPIO_WritePin>

	if(hand){
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <actuatorMoveDistLoop+0x6a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002302:	481c      	ldr	r0, [pc, #112]	; (8002374 <actuatorMoveDistLoop+0xd4>)
 8002304:	f004 f8f0 	bl	80064e8 <HAL_GPIO_WritePin>
 8002308:	e005      	b.n	8002316 <actuatorMoveDistLoop+0x76>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002310:	481a      	ldr	r0, [pc, #104]	; (800237c <actuatorMoveDistLoop+0xdc>)
 8002312:	f004 f8e9 	bl	80064e8 <HAL_GPIO_WritePin>
	}

	if(steps){
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d019      	beq.n	8002350 <actuatorMoveDistLoop+0xb0>
		for(int i = 0; i < steps; i++){
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	e012      	b.n	8002348 <actuatorMoveDistLoop+0xa8>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 8002322:	2201      	movs	r2, #1
 8002324:	2101      	movs	r1, #1
 8002326:	4814      	ldr	r0, [pc, #80]	; (8002378 <actuatorMoveDistLoop+0xd8>)
 8002328:	f004 f8de 	bl	80064e8 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800232c:	2001      	movs	r0, #1
 800232e:	f003 f995 	bl	800565c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2101      	movs	r1, #1
 8002336:	4810      	ldr	r0, [pc, #64]	; (8002378 <actuatorMoveDistLoop+0xd8>)
 8002338:	f004 f8d6 	bl	80064e8 <HAL_GPIO_WritePin>
			//********************************************
			// CHANGE SPEED BY CHANGING HAL_Delay BELOW
			//********************************************
			HAL_Delay(2);
 800233c:	2002      	movs	r0, #2
 800233e:	f003 f98d 	bl	800565c <HAL_Delay>
		for(int i = 0; i < steps; i++){
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3301      	adds	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	dbe8      	blt.n	8002322 <actuatorMoveDistLoop+0x82>
		}
	}

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8002350:	2201      	movs	r2, #1
 8002352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002356:	4807      	ldr	r0, [pc, #28]	; (8002374 <actuatorMoveDistLoop+0xd4>)
 8002358:	f004 f8c6 	bl	80064e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 800235c:	2201      	movs	r2, #1
 800235e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002362:	4806      	ldr	r0, [pc, #24]	; (800237c <actuatorMoveDistLoop+0xdc>)
 8002364:	f004 f8c0 	bl	80064e8 <HAL_GPIO_WritePin>
}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40690000 	.word	0x40690000
 8002374:	48001400 	.word	0x48001400
 8002378:	48001800 	.word	0x48001800
 800237c:	48000800 	.word	0x48000800
 8002380:	0a3d70a4 	.word	0x0a3d70a4
 8002384:	4006a3d7 	.word	0x4006a3d7

08002388 <GPIO_Activation_Right>:
	HAL_Delay(200);
	HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &data_write3[0], 1, 1000);
	HAL_Delay(200);
}

void GPIO_Activation_Right(int note){
 8002388:	b580      	push	{r7, lr}
 800238a:	b08c      	sub	sp, #48	; 0x30
 800238c:	af02      	add	r7, sp, #8
 800238e:	6078      	str	r0, [r7, #4]
     int note_num = note;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	627b      	str	r3, [r7, #36]	; 0x24

     uint8_t P01_ON[1] = {0x01};
 8002394:	2301      	movs	r3, #1
 8002396:	f887 3020 	strb.w	r3, [r7, #32]
     uint8_t P01_STOP[1] = {0x00};
 800239a:	2300      	movs	r3, #0
 800239c:	773b      	strb	r3, [r7, #28]

     uint8_t P23_ON[1] = {0x04};
 800239e:	2304      	movs	r3, #4
 80023a0:	763b      	strb	r3, [r7, #24]
     uint8_t P23_STOP[1] = {0x00};
 80023a2:	2300      	movs	r3, #0
 80023a4:	753b      	strb	r3, [r7, #20]

     uint8_t P45_ON[1] = {0x10};
 80023a6:	2310      	movs	r3, #16
 80023a8:	743b      	strb	r3, [r7, #16]
     uint8_t P45_STOP[1] = {0x00};
 80023aa:	2300      	movs	r3, #0
 80023ac:	733b      	strb	r3, [r7, #12]

     if (note_num == 0){
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d117      	bne.n	80023e4 <GPIO_Activation_Right+0x5c>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P01_ON[0], 1, 1000);
 80023b4:	f107 0220 	add.w	r2, r7, #32
 80023b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2301      	movs	r3, #1
 80023c0:	2140      	movs	r1, #64	; 0x40
 80023c2:	489e      	ldr	r0, [pc, #632]	; (800263c <GPIO_Activation_Right+0x2b4>)
 80023c4:	f004 f95c 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80023c8:	20fa      	movs	r0, #250	; 0xfa
 80023ca:	f003 f947 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P01_STOP[0], 1, 1000);
 80023ce:	f107 021c 	add.w	r2, r7, #28
 80023d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2301      	movs	r3, #1
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	4897      	ldr	r0, [pc, #604]	; (800263c <GPIO_Activation_Right+0x2b4>)
 80023de:	f004 f94f 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_ON[0], 1, 1000);
         HAL_Delay(DCDelay);
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_STOP[0], 1, 1000);
     }

}
 80023e2:	e127      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 1){
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d117      	bne.n	800241a <GPIO_Activation_Right+0x92>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P23_ON[0], 1, 1000);
 80023ea:	f107 0218 	add.w	r2, r7, #24
 80023ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2301      	movs	r3, #1
 80023f6:	2140      	movs	r1, #64	; 0x40
 80023f8:	4890      	ldr	r0, [pc, #576]	; (800263c <GPIO_Activation_Right+0x2b4>)
 80023fa:	f004 f941 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80023fe:	20fa      	movs	r0, #250	; 0xfa
 8002400:	f003 f92c 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002404:	f107 0214 	add.w	r2, r7, #20
 8002408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2301      	movs	r3, #1
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	488a      	ldr	r0, [pc, #552]	; (800263c <GPIO_Activation_Right+0x2b4>)
 8002414:	f004 f934 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002418:	e10c      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 2){
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	2b02      	cmp	r3, #2
 800241e:	d117      	bne.n	8002450 <GPIO_Activation_Right+0xc8>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P45_ON[0], 1, 1000);
 8002420:	f107 0210 	add.w	r2, r7, #16
 8002424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2301      	movs	r3, #1
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	4883      	ldr	r0, [pc, #524]	; (800263c <GPIO_Activation_Right+0x2b4>)
 8002430:	f004 f926 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002434:	20fa      	movs	r0, #250	; 0xfa
 8002436:	f003 f911 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P45_STOP[0], 1, 1000);
 800243a:	f107 020c 	add.w	r2, r7, #12
 800243e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	487c      	ldr	r0, [pc, #496]	; (800263c <GPIO_Activation_Right+0x2b4>)
 800244a:	f004 f919 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 800244e:	e0f1      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 3){
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	2b03      	cmp	r3, #3
 8002454:	d117      	bne.n	8002486 <GPIO_Activation_Right+0xfe>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P01_ON[0], 1, 1000);
 8002456:	f107 0220 	add.w	r2, r7, #32
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	2142      	movs	r1, #66	; 0x42
 8002464:	4875      	ldr	r0, [pc, #468]	; (800263c <GPIO_Activation_Right+0x2b4>)
 8002466:	f004 f90b 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800246a:	20fa      	movs	r0, #250	; 0xfa
 800246c:	f003 f8f6 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002470:	f107 021c 	add.w	r2, r7, #28
 8002474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2301      	movs	r3, #1
 800247c:	2142      	movs	r1, #66	; 0x42
 800247e:	486f      	ldr	r0, [pc, #444]	; (800263c <GPIO_Activation_Right+0x2b4>)
 8002480:	f004 f8fe 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002484:	e0d6      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 4){
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	2b04      	cmp	r3, #4
 800248a:	d117      	bne.n	80024bc <GPIO_Activation_Right+0x134>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P23_ON[0], 1, 1000);
 800248c:	f107 0218 	add.w	r2, r7, #24
 8002490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2301      	movs	r3, #1
 8002498:	2142      	movs	r1, #66	; 0x42
 800249a:	4868      	ldr	r0, [pc, #416]	; (800263c <GPIO_Activation_Right+0x2b4>)
 800249c:	f004 f8f0 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80024a0:	20fa      	movs	r0, #250	; 0xfa
 80024a2:	f003 f8db 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P23_STOP[0], 1, 1000);
 80024a6:	f107 0214 	add.w	r2, r7, #20
 80024aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2301      	movs	r3, #1
 80024b2:	2142      	movs	r1, #66	; 0x42
 80024b4:	4861      	ldr	r0, [pc, #388]	; (800263c <GPIO_Activation_Right+0x2b4>)
 80024b6:	f004 f8e3 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80024ba:	e0bb      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 5){
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d117      	bne.n	80024f2 <GPIO_Activation_Right+0x16a>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P45_ON[0], 1, 1000);
 80024c2:	f107 0210 	add.w	r2, r7, #16
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2301      	movs	r3, #1
 80024ce:	2142      	movs	r1, #66	; 0x42
 80024d0:	485a      	ldr	r0, [pc, #360]	; (800263c <GPIO_Activation_Right+0x2b4>)
 80024d2:	f004 f8d5 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80024d6:	20fa      	movs	r0, #250	; 0xfa
 80024d8:	f003 f8c0 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P45_STOP[0], 1, 1000);
 80024dc:	f107 020c 	add.w	r2, r7, #12
 80024e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2301      	movs	r3, #1
 80024e8:	2142      	movs	r1, #66	; 0x42
 80024ea:	4854      	ldr	r0, [pc, #336]	; (800263c <GPIO_Activation_Right+0x2b4>)
 80024ec:	f004 f8c8 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80024f0:	e0a0      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 6){
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d117      	bne.n	8002528 <GPIO_Activation_Right+0x1a0>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P01_ON[0], 1, 1000);
 80024f8:	f107 0220 	add.w	r2, r7, #32
 80024fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2301      	movs	r3, #1
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	484e      	ldr	r0, [pc, #312]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 8002508:	f004 f8ba 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800250c:	20fa      	movs	r0, #250	; 0xfa
 800250e:	f003 f8a5 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P01_STOP[0], 1, 1000);
 8002512:	f107 021c 	add.w	r2, r7, #28
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2301      	movs	r3, #1
 800251e:	2140      	movs	r1, #64	; 0x40
 8002520:	4847      	ldr	r0, [pc, #284]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 8002522:	f004 f8ad 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002526:	e085      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 7){
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	2b07      	cmp	r3, #7
 800252c:	d117      	bne.n	800255e <GPIO_Activation_Right+0x1d6>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P23_ON[0], 1, 1000);
 800252e:	f107 0218 	add.w	r2, r7, #24
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2301      	movs	r3, #1
 800253a:	2140      	movs	r1, #64	; 0x40
 800253c:	4840      	ldr	r0, [pc, #256]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 800253e:	f004 f89f 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002542:	20fa      	movs	r0, #250	; 0xfa
 8002544:	f003 f88a 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002548:	f107 0214 	add.w	r2, r7, #20
 800254c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2301      	movs	r3, #1
 8002554:	2140      	movs	r1, #64	; 0x40
 8002556:	483a      	ldr	r0, [pc, #232]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 8002558:	f004 f892 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 800255c:	e06a      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 8){
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	2b08      	cmp	r3, #8
 8002562:	d117      	bne.n	8002594 <GPIO_Activation_Right+0x20c>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P45_ON[0], 1, 1000);
 8002564:	f107 0210 	add.w	r2, r7, #16
 8002568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2301      	movs	r3, #1
 8002570:	2140      	movs	r1, #64	; 0x40
 8002572:	4833      	ldr	r0, [pc, #204]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 8002574:	f004 f884 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002578:	20fa      	movs	r0, #250	; 0xfa
 800257a:	f003 f86f 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P45_STOP[0], 1, 1000);
 800257e:	f107 020c 	add.w	r2, r7, #12
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2301      	movs	r3, #1
 800258a:	2140      	movs	r1, #64	; 0x40
 800258c:	482c      	ldr	r0, [pc, #176]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 800258e:	f004 f877 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002592:	e04f      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 9){
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	2b09      	cmp	r3, #9
 8002598:	d117      	bne.n	80025ca <GPIO_Activation_Right+0x242>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P01_ON[0], 1, 1000);
 800259a:	f107 0220 	add.w	r2, r7, #32
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2301      	movs	r3, #1
 80025a6:	2142      	movs	r1, #66	; 0x42
 80025a8:	4825      	ldr	r0, [pc, #148]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 80025aa:	f004 f869 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80025ae:	20fa      	movs	r0, #250	; 0xfa
 80025b0:	f003 f854 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P01_STOP[0], 1, 1000);
 80025b4:	f107 021c 	add.w	r2, r7, #28
 80025b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2301      	movs	r3, #1
 80025c0:	2142      	movs	r1, #66	; 0x42
 80025c2:	481f      	ldr	r0, [pc, #124]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 80025c4:	f004 f85c 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80025c8:	e034      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 10){
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	2b0a      	cmp	r3, #10
 80025ce:	d117      	bne.n	8002600 <GPIO_Activation_Right+0x278>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P23_ON[0], 1, 1000);
 80025d0:	f107 0218 	add.w	r2, r7, #24
 80025d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2301      	movs	r3, #1
 80025dc:	2142      	movs	r1, #66	; 0x42
 80025de:	4818      	ldr	r0, [pc, #96]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 80025e0:	f004 f84e 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80025e4:	20fa      	movs	r0, #250	; 0xfa
 80025e6:	f003 f839 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P23_STOP[0], 1, 1000);
 80025ea:	f107 0214 	add.w	r2, r7, #20
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2301      	movs	r3, #1
 80025f6:	2142      	movs	r1, #66	; 0x42
 80025f8:	4811      	ldr	r0, [pc, #68]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 80025fa:	f004 f841 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80025fe:	e019      	b.n	8002634 <GPIO_Activation_Right+0x2ac>
     } else if (note_num == 11){
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	2b0b      	cmp	r3, #11
 8002604:	d116      	bne.n	8002634 <GPIO_Activation_Right+0x2ac>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_ON[0], 1, 1000);
 8002606:	f107 0210 	add.w	r2, r7, #16
 800260a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2301      	movs	r3, #1
 8002612:	2142      	movs	r1, #66	; 0x42
 8002614:	480a      	ldr	r0, [pc, #40]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 8002616:	f004 f833 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800261a:	20fa      	movs	r0, #250	; 0xfa
 800261c:	f003 f81e 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002620:	f107 020c 	add.w	r2, r7, #12
 8002624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2301      	movs	r3, #1
 800262c:	2142      	movs	r1, #66	; 0x42
 800262e:	4804      	ldr	r0, [pc, #16]	; (8002640 <GPIO_Activation_Right+0x2b8>)
 8002630:	f004 f826 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002634:	bf00      	nop
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000390 	.word	0x20000390
 8002640:	200003e4 	.word	0x200003e4

08002644 <GPIO_Activation_Left>:

void GPIO_Activation_Left(int note){
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af02      	add	r7, sp, #8
 800264a:	6078      	str	r0, [r7, #4]
     int note_num = note;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	627b      	str	r3, [r7, #36]	; 0x24

     uint8_t P01_ON[1] = {0x01};
 8002650:	2301      	movs	r3, #1
 8002652:	f887 3020 	strb.w	r3, [r7, #32]
     uint8_t P01_STOP[1] = {0x00};
 8002656:	2300      	movs	r3, #0
 8002658:	773b      	strb	r3, [r7, #28]

     uint8_t P23_ON[1] = {0x04};
 800265a:	2304      	movs	r3, #4
 800265c:	763b      	strb	r3, [r7, #24]
     uint8_t P23_STOP[1] = {0x00};
 800265e:	2300      	movs	r3, #0
 8002660:	753b      	strb	r3, [r7, #20]

     uint8_t P45_ON[1] = {0x10};
 8002662:	2310      	movs	r3, #16
 8002664:	743b      	strb	r3, [r7, #16]
     uint8_t P45_STOP[1] = {0x00};
 8002666:	2300      	movs	r3, #0
 8002668:	733b      	strb	r3, [r7, #12]

     if (note_num == 0){
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d117      	bne.n	80026a0 <GPIO_Activation_Left+0x5c>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P01_ON[0], 1, 1000);
 8002670:	f107 0220 	add.w	r2, r7, #32
 8002674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2301      	movs	r3, #1
 800267c:	2140      	movs	r1, #64	; 0x40
 800267e:	489e      	ldr	r0, [pc, #632]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 8002680:	f003 fffe 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002684:	20fa      	movs	r0, #250	; 0xfa
 8002686:	f002 ffe9 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P01_STOP[0], 1, 1000);
 800268a:	f107 021c 	add.w	r2, r7, #28
 800268e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2301      	movs	r3, #1
 8002696:	2140      	movs	r1, #64	; 0x40
 8002698:	4897      	ldr	r0, [pc, #604]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 800269a:	f003 fff1 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_ON[0], 1, 1000);
         HAL_Delay(DCDelay);
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_STOP[0], 1, 1000);
     }

}
 800269e:	e127      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 1){
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d117      	bne.n	80026d6 <GPIO_Activation_Left+0x92>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P23_ON[0], 1, 1000);
 80026a6:	f107 0218 	add.w	r2, r7, #24
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2301      	movs	r3, #1
 80026b2:	2140      	movs	r1, #64	; 0x40
 80026b4:	4890      	ldr	r0, [pc, #576]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 80026b6:	f003 ffe3 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80026ba:	20fa      	movs	r0, #250	; 0xfa
 80026bc:	f002 ffce 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P23_STOP[0], 1, 1000);
 80026c0:	f107 0214 	add.w	r2, r7, #20
 80026c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2301      	movs	r3, #1
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	488a      	ldr	r0, [pc, #552]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 80026d0:	f003 ffd6 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80026d4:	e10c      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 2){
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d117      	bne.n	800270c <GPIO_Activation_Left+0xc8>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P45_ON[0], 1, 1000);
 80026dc:	f107 0210 	add.w	r2, r7, #16
 80026e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2301      	movs	r3, #1
 80026e8:	2140      	movs	r1, #64	; 0x40
 80026ea:	4883      	ldr	r0, [pc, #524]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 80026ec:	f003 ffc8 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80026f0:	20fa      	movs	r0, #250	; 0xfa
 80026f2:	f002 ffb3 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P45_STOP[0], 1, 1000);
 80026f6:	f107 020c 	add.w	r2, r7, #12
 80026fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2301      	movs	r3, #1
 8002702:	2140      	movs	r1, #64	; 0x40
 8002704:	487c      	ldr	r0, [pc, #496]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 8002706:	f003 ffbb 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 800270a:	e0f1      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 3){
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	2b03      	cmp	r3, #3
 8002710:	d117      	bne.n	8002742 <GPIO_Activation_Left+0xfe>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P01_ON[0], 1, 1000);
 8002712:	f107 0220 	add.w	r2, r7, #32
 8002716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2301      	movs	r3, #1
 800271e:	2142      	movs	r1, #66	; 0x42
 8002720:	4875      	ldr	r0, [pc, #468]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 8002722:	f003 ffad 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002726:	20fa      	movs	r0, #250	; 0xfa
 8002728:	f002 ff98 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P01_STOP[0], 1, 1000);
 800272c:	f107 021c 	add.w	r2, r7, #28
 8002730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2301      	movs	r3, #1
 8002738:	2142      	movs	r1, #66	; 0x42
 800273a:	486f      	ldr	r0, [pc, #444]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 800273c:	f003 ffa0 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002740:	e0d6      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 4){
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	2b04      	cmp	r3, #4
 8002746:	d117      	bne.n	8002778 <GPIO_Activation_Left+0x134>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P23_ON[0], 1, 1000);
 8002748:	f107 0218 	add.w	r2, r7, #24
 800274c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2301      	movs	r3, #1
 8002754:	2142      	movs	r1, #66	; 0x42
 8002756:	4868      	ldr	r0, [pc, #416]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 8002758:	f003 ff92 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800275c:	20fa      	movs	r0, #250	; 0xfa
 800275e:	f002 ff7d 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P23_STOP[0], 1, 1000);
 8002762:	f107 0214 	add.w	r2, r7, #20
 8002766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2301      	movs	r3, #1
 800276e:	2142      	movs	r1, #66	; 0x42
 8002770:	4861      	ldr	r0, [pc, #388]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 8002772:	f003 ff85 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002776:	e0bb      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 5){
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	2b05      	cmp	r3, #5
 800277c:	d117      	bne.n	80027ae <GPIO_Activation_Left+0x16a>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P45_ON[0], 1, 1000);
 800277e:	f107 0210 	add.w	r2, r7, #16
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2301      	movs	r3, #1
 800278a:	2142      	movs	r1, #66	; 0x42
 800278c:	485a      	ldr	r0, [pc, #360]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 800278e:	f003 ff77 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002792:	20fa      	movs	r0, #250	; 0xfa
 8002794:	f002 ff62 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002798:	f107 020c 	add.w	r2, r7, #12
 800279c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	2142      	movs	r1, #66	; 0x42
 80027a6:	4854      	ldr	r0, [pc, #336]	; (80028f8 <GPIO_Activation_Left+0x2b4>)
 80027a8:	f003 ff6a 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80027ac:	e0a0      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 6){
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	2b06      	cmp	r3, #6
 80027b2:	d117      	bne.n	80027e4 <GPIO_Activation_Left+0x1a0>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P01_ON[0], 1, 1000);
 80027b4:	f107 0220 	add.w	r2, r7, #32
 80027b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2301      	movs	r3, #1
 80027c0:	2140      	movs	r1, #64	; 0x40
 80027c2:	484e      	ldr	r0, [pc, #312]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 80027c4:	f003 ff5c 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80027c8:	20fa      	movs	r0, #250	; 0xfa
 80027ca:	f002 ff47 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P01_STOP[0], 1, 1000);
 80027ce:	f107 021c 	add.w	r2, r7, #28
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	2140      	movs	r1, #64	; 0x40
 80027dc:	4847      	ldr	r0, [pc, #284]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 80027de:	f003 ff4f 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80027e2:	e085      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 7){
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	d117      	bne.n	800281a <GPIO_Activation_Left+0x1d6>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P23_ON[0], 1, 1000);
 80027ea:	f107 0218 	add.w	r2, r7, #24
 80027ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2301      	movs	r3, #1
 80027f6:	2140      	movs	r1, #64	; 0x40
 80027f8:	4840      	ldr	r0, [pc, #256]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 80027fa:	f003 ff41 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80027fe:	20fa      	movs	r0, #250	; 0xfa
 8002800:	f002 ff2c 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002804:	f107 0214 	add.w	r2, r7, #20
 8002808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2301      	movs	r3, #1
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	483a      	ldr	r0, [pc, #232]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 8002814:	f003 ff34 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002818:	e06a      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 8){
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	2b08      	cmp	r3, #8
 800281e:	d117      	bne.n	8002850 <GPIO_Activation_Left+0x20c>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P45_ON[0], 1, 1000);
 8002820:	f107 0210 	add.w	r2, r7, #16
 8002824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2301      	movs	r3, #1
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	4833      	ldr	r0, [pc, #204]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 8002830:	f003 ff26 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 8002834:	20fa      	movs	r0, #250	; 0xfa
 8002836:	f002 ff11 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P45_STOP[0], 1, 1000);
 800283a:	f107 020c 	add.w	r2, r7, #12
 800283e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2301      	movs	r3, #1
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	482c      	ldr	r0, [pc, #176]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 800284a:	f003 ff19 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 800284e:	e04f      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 9){
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	2b09      	cmp	r3, #9
 8002854:	d117      	bne.n	8002886 <GPIO_Activation_Left+0x242>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P01_ON[0], 1, 1000);
 8002856:	f107 0220 	add.w	r2, r7, #32
 800285a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2301      	movs	r3, #1
 8002862:	2142      	movs	r1, #66	; 0x42
 8002864:	4825      	ldr	r0, [pc, #148]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 8002866:	f003 ff0b 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 800286a:	20fa      	movs	r0, #250	; 0xfa
 800286c:	f002 fef6 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002870:	f107 021c 	add.w	r2, r7, #28
 8002874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	2142      	movs	r1, #66	; 0x42
 800287e:	481f      	ldr	r0, [pc, #124]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 8002880:	f003 fefe 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002884:	e034      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 10){
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	2b0a      	cmp	r3, #10
 800288a:	d117      	bne.n	80028bc <GPIO_Activation_Left+0x278>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P23_ON[0], 1, 1000);
 800288c:	f107 0218 	add.w	r2, r7, #24
 8002890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2301      	movs	r3, #1
 8002898:	2142      	movs	r1, #66	; 0x42
 800289a:	4818      	ldr	r0, [pc, #96]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 800289c:	f003 fef0 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80028a0:	20fa      	movs	r0, #250	; 0xfa
 80028a2:	f002 fedb 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P23_STOP[0], 1, 1000);
 80028a6:	f107 0214 	add.w	r2, r7, #20
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2301      	movs	r3, #1
 80028b2:	2142      	movs	r1, #66	; 0x42
 80028b4:	4811      	ldr	r0, [pc, #68]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 80028b6:	f003 fee3 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80028ba:	e019      	b.n	80028f0 <GPIO_Activation_Left+0x2ac>
     } else if (note_num == 11){
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	2b0b      	cmp	r3, #11
 80028c0:	d116      	bne.n	80028f0 <GPIO_Activation_Left+0x2ac>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_ON[0], 1, 1000);
 80028c2:	f107 0210 	add.w	r2, r7, #16
 80028c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2301      	movs	r3, #1
 80028ce:	2142      	movs	r1, #66	; 0x42
 80028d0:	480a      	ldr	r0, [pc, #40]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 80028d2:	f003 fed5 	bl	8006680 <HAL_I2C_Master_Transmit>
         HAL_Delay(DCDelay);
 80028d6:	20fa      	movs	r0, #250	; 0xfa
 80028d8:	f002 fec0 	bl	800565c <HAL_Delay>
         HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_STOP[0], 1, 1000);
 80028dc:	f107 020c 	add.w	r2, r7, #12
 80028e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2301      	movs	r3, #1
 80028e8:	2142      	movs	r1, #66	; 0x42
 80028ea:	4804      	ldr	r0, [pc, #16]	; (80028fc <GPIO_Activation_Left+0x2b8>)
 80028ec:	f003 fec8 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000438 	.word	0x20000438
 80028fc:	2000048c 	.word	0x2000048c

08002900 <GPIO_Deactivation_Right>:

void GPIO_Deactivation_Right(int note){
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	; 0x30
 8002904:	af02      	add	r7, sp, #8
 8002906:	6078      	str	r0, [r7, #4]
     int note_num = note;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	627b      	str	r3, [r7, #36]	; 0x24

     uint8_t P01_OFF[1] = {0x02};
 800290c:	2302      	movs	r3, #2
 800290e:	f887 3020 	strb.w	r3, [r7, #32]
     uint8_t P01_STOP[1] = {0x00};
 8002912:	2300      	movs	r3, #0
 8002914:	773b      	strb	r3, [r7, #28]

     uint8_t P23_OFF[1] = {0x08};
 8002916:	2308      	movs	r3, #8
 8002918:	763b      	strb	r3, [r7, #24]
     uint8_t P23_STOP[1] = {0x00};
 800291a:	2300      	movs	r3, #0
 800291c:	753b      	strb	r3, [r7, #20]

     uint8_t P45_OFF[1] = {0x20};
 800291e:	2320      	movs	r3, #32
 8002920:	743b      	strb	r3, [r7, #16]
     uint8_t P45_STOP[1] = {0x00};
 8002922:	2300      	movs	r3, #0
 8002924:	733b      	strb	r3, [r7, #12]

     if (note_num == 0){
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d117      	bne.n	800295c <GPIO_Deactivation_Right+0x5c>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P01_OFF[0], 1, 1000);
 800292c:	f107 0220 	add.w	r2, r7, #32
 8002930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	2140      	movs	r1, #64	; 0x40
 800293a:	489e      	ldr	r0, [pc, #632]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 800293c:	f003 fea0 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002940:	20fa      	movs	r0, #250	; 0xfa
 8002942:	f002 fe8b 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P01_STOP[0], 1, 1000);
 8002946:	f107 021c 	add.w	r2, r7, #28
 800294a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	2140      	movs	r1, #64	; 0x40
 8002954:	4897      	ldr	r0, [pc, #604]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 8002956:	f003 fe93 	bl	8006680 <HAL_I2C_Master_Transmit>
          } else if (note_num == 11){
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_OFF[0], 1, 1000);
              HAL_Delay(DCDelay);
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_STOP[0], 1, 1000);
          }
}
 800295a:	e127      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 1){
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	2b01      	cmp	r3, #1
 8002960:	d117      	bne.n	8002992 <GPIO_Deactivation_Right+0x92>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P23_OFF[0], 1, 1000);
 8002962:	f107 0218 	add.w	r2, r7, #24
 8002966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2301      	movs	r3, #1
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	4890      	ldr	r0, [pc, #576]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 8002972:	f003 fe85 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002976:	20fa      	movs	r0, #250	; 0xfa
 8002978:	f002 fe70 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P23_STOP[0], 1, 1000);
 800297c:	f107 0214 	add.w	r2, r7, #20
 8002980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2301      	movs	r3, #1
 8002988:	2140      	movs	r1, #64	; 0x40
 800298a:	488a      	ldr	r0, [pc, #552]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 800298c:	f003 fe78 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002990:	e10c      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 2){
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	2b02      	cmp	r3, #2
 8002996:	d117      	bne.n	80029c8 <GPIO_Deactivation_Right+0xc8>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P45_OFF[0], 1, 1000);
 8002998:	f107 0210 	add.w	r2, r7, #16
 800299c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2301      	movs	r3, #1
 80029a4:	2140      	movs	r1, #64	; 0x40
 80029a6:	4883      	ldr	r0, [pc, #524]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 80029a8:	f003 fe6a 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 80029ac:	20fa      	movs	r0, #250	; 0xfa
 80029ae:	f002 fe55 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x20<<1), &P45_STOP[0], 1, 1000);
 80029b2:	f107 020c 	add.w	r2, r7, #12
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2301      	movs	r3, #1
 80029be:	2140      	movs	r1, #64	; 0x40
 80029c0:	487c      	ldr	r0, [pc, #496]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 80029c2:	f003 fe5d 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80029c6:	e0f1      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 3){
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d117      	bne.n	80029fe <GPIO_Deactivation_Right+0xfe>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P01_OFF[0], 1, 1000);
 80029ce:	f107 0220 	add.w	r2, r7, #32
 80029d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	2142      	movs	r1, #66	; 0x42
 80029dc:	4875      	ldr	r0, [pc, #468]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 80029de:	f003 fe4f 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 80029e2:	20fa      	movs	r0, #250	; 0xfa
 80029e4:	f002 fe3a 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P01_STOP[0], 1, 1000);
 80029e8:	f107 021c 	add.w	r2, r7, #28
 80029ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2301      	movs	r3, #1
 80029f4:	2142      	movs	r1, #66	; 0x42
 80029f6:	486f      	ldr	r0, [pc, #444]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 80029f8:	f003 fe42 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 80029fc:	e0d6      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 4){
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d117      	bne.n	8002a34 <GPIO_Deactivation_Right+0x134>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P23_OFF[0], 1, 1000);
 8002a04:	f107 0218 	add.w	r2, r7, #24
 8002a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	2142      	movs	r1, #66	; 0x42
 8002a12:	4868      	ldr	r0, [pc, #416]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 8002a14:	f003 fe34 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002a18:	20fa      	movs	r0, #250	; 0xfa
 8002a1a:	f002 fe1f 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P23_STOP[0], 1, 1000);
 8002a1e:	f107 0214 	add.w	r2, r7, #20
 8002a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	2142      	movs	r1, #66	; 0x42
 8002a2c:	4861      	ldr	r0, [pc, #388]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 8002a2e:	f003 fe27 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002a32:	e0bb      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 5){
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d117      	bne.n	8002a6a <GPIO_Deactivation_Right+0x16a>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P45_OFF[0], 1, 1000);
 8002a3a:	f107 0210 	add.w	r2, r7, #16
 8002a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	2142      	movs	r1, #66	; 0x42
 8002a48:	485a      	ldr	r0, [pc, #360]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 8002a4a:	f003 fe19 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002a4e:	20fa      	movs	r0, #250	; 0xfa
 8002a50:	f002 fe04 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c1, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002a54:	f107 020c 	add.w	r2, r7, #12
 8002a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	2301      	movs	r3, #1
 8002a60:	2142      	movs	r1, #66	; 0x42
 8002a62:	4854      	ldr	r0, [pc, #336]	; (8002bb4 <GPIO_Deactivation_Right+0x2b4>)
 8002a64:	f003 fe0c 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002a68:	e0a0      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 6){
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d117      	bne.n	8002aa0 <GPIO_Deactivation_Right+0x1a0>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P01_OFF[0], 1, 1000);
 8002a70:	f107 0220 	add.w	r2, r7, #32
 8002a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	2140      	movs	r1, #64	; 0x40
 8002a7e:	484e      	ldr	r0, [pc, #312]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002a80:	f003 fdfe 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002a84:	20fa      	movs	r0, #250	; 0xfa
 8002a86:	f002 fde9 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P01_STOP[0], 1, 1000);
 8002a8a:	f107 021c 	add.w	r2, r7, #28
 8002a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	2140      	movs	r1, #64	; 0x40
 8002a98:	4847      	ldr	r0, [pc, #284]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002a9a:	f003 fdf1 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002a9e:	e085      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 7){
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	d117      	bne.n	8002ad6 <GPIO_Deactivation_Right+0x1d6>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P23_OFF[0], 1, 1000);
 8002aa6:	f107 0218 	add.w	r2, r7, #24
 8002aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	2140      	movs	r1, #64	; 0x40
 8002ab4:	4840      	ldr	r0, [pc, #256]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002ab6:	f003 fde3 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002aba:	20fa      	movs	r0, #250	; 0xfa
 8002abc:	f002 fdce 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002ac0:	f107 0214 	add.w	r2, r7, #20
 8002ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2301      	movs	r3, #1
 8002acc:	2140      	movs	r1, #64	; 0x40
 8002ace:	483a      	ldr	r0, [pc, #232]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002ad0:	f003 fdd6 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002ad4:	e06a      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 8){
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d117      	bne.n	8002b0c <GPIO_Deactivation_Right+0x20c>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P45_OFF[0], 1, 1000);
 8002adc:	f107 0210 	add.w	r2, r7, #16
 8002ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	2140      	movs	r1, #64	; 0x40
 8002aea:	4833      	ldr	r0, [pc, #204]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002aec:	f003 fdc8 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002af0:	20fa      	movs	r0, #250	; 0xfa
 8002af2:	f002 fdb3 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x20<<1), &P45_STOP[0], 1, 1000);
 8002af6:	f107 020c 	add.w	r2, r7, #12
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2301      	movs	r3, #1
 8002b02:	2140      	movs	r1, #64	; 0x40
 8002b04:	482c      	ldr	r0, [pc, #176]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002b06:	f003 fdbb 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002b0a:	e04f      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 9){
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	2b09      	cmp	r3, #9
 8002b10:	d117      	bne.n	8002b42 <GPIO_Deactivation_Right+0x242>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P01_OFF[0], 1, 1000);
 8002b12:	f107 0220 	add.w	r2, r7, #32
 8002b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	2142      	movs	r1, #66	; 0x42
 8002b20:	4825      	ldr	r0, [pc, #148]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002b22:	f003 fdad 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002b26:	20fa      	movs	r0, #250	; 0xfa
 8002b28:	f002 fd98 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002b2c:	f107 021c 	add.w	r2, r7, #28
 8002b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2301      	movs	r3, #1
 8002b38:	2142      	movs	r1, #66	; 0x42
 8002b3a:	481f      	ldr	r0, [pc, #124]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002b3c:	f003 fda0 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002b40:	e034      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 10){
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	2b0a      	cmp	r3, #10
 8002b46:	d117      	bne.n	8002b78 <GPIO_Deactivation_Right+0x278>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P23_OFF[0], 1, 1000);
 8002b48:	f107 0218 	add.w	r2, r7, #24
 8002b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2301      	movs	r3, #1
 8002b54:	2142      	movs	r1, #66	; 0x42
 8002b56:	4818      	ldr	r0, [pc, #96]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002b58:	f003 fd92 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002b5c:	20fa      	movs	r0, #250	; 0xfa
 8002b5e:	f002 fd7d 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P23_STOP[0], 1, 1000);
 8002b62:	f107 0214 	add.w	r2, r7, #20
 8002b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	2142      	movs	r1, #66	; 0x42
 8002b70:	4811      	ldr	r0, [pc, #68]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002b72:	f003 fd85 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002b76:	e019      	b.n	8002bac <GPIO_Deactivation_Right+0x2ac>
          } else if (note_num == 11){
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	2b0b      	cmp	r3, #11
 8002b7c:	d116      	bne.n	8002bac <GPIO_Deactivation_Right+0x2ac>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_OFF[0], 1, 1000);
 8002b7e:	f107 0210 	add.w	r2, r7, #16
 8002b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	2142      	movs	r1, #66	; 0x42
 8002b8c:	480a      	ldr	r0, [pc, #40]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002b8e:	f003 fd77 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002b92:	20fa      	movs	r0, #250	; 0xfa
 8002b94:	f002 fd62 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c2, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002b98:	f107 020c 	add.w	r2, r7, #12
 8002b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	2142      	movs	r1, #66	; 0x42
 8002ba6:	4804      	ldr	r0, [pc, #16]	; (8002bb8 <GPIO_Deactivation_Right+0x2b8>)
 8002ba8:	f003 fd6a 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	; 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000390 	.word	0x20000390
 8002bb8:	200003e4 	.word	0x200003e4

08002bbc <GPIO_Deactivation_Left>:

void GPIO_Deactivation_Left(int note){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	6078      	str	r0, [r7, #4]
     int note_num = note;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24

     uint8_t P01_OFF[1] = {0x02};
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f887 3020 	strb.w	r3, [r7, #32]
     uint8_t P01_STOP[1] = {0x00};
 8002bce:	2300      	movs	r3, #0
 8002bd0:	773b      	strb	r3, [r7, #28]

     uint8_t P23_OFF[1] = {0x08};
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	763b      	strb	r3, [r7, #24]
     uint8_t P23_STOP[1] = {0x00};
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	753b      	strb	r3, [r7, #20]

     uint8_t P45_OFF[1] = {0x20};
 8002bda:	2320      	movs	r3, #32
 8002bdc:	743b      	strb	r3, [r7, #16]
     uint8_t P45_STOP[1] = {0x00};
 8002bde:	2300      	movs	r3, #0
 8002be0:	733b      	strb	r3, [r7, #12]

     if (note_num == 0){
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d117      	bne.n	8002c18 <GPIO_Deactivation_Left+0x5c>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P01_OFF[0], 1, 1000);
 8002be8:	f107 0220 	add.w	r2, r7, #32
 8002bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	489e      	ldr	r0, [pc, #632]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002bf8:	f003 fd42 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002bfc:	20fa      	movs	r0, #250	; 0xfa
 8002bfe:	f002 fd2d 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P01_STOP[0], 1, 1000);
 8002c02:	f107 021c 	add.w	r2, r7, #28
 8002c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	2140      	movs	r1, #64	; 0x40
 8002c10:	4897      	ldr	r0, [pc, #604]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002c12:	f003 fd35 	bl	8006680 <HAL_I2C_Master_Transmit>
          } else if (note_num == 11){
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_OFF[0], 1, 1000);
              HAL_Delay(DCDelay);
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_STOP[0], 1, 1000);
          }
}
 8002c16:	e127      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 1){
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d117      	bne.n	8002c4e <GPIO_Deactivation_Left+0x92>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P23_OFF[0], 1, 1000);
 8002c1e:	f107 0218 	add.w	r2, r7, #24
 8002c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2301      	movs	r3, #1
 8002c2a:	2140      	movs	r1, #64	; 0x40
 8002c2c:	4890      	ldr	r0, [pc, #576]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002c2e:	f003 fd27 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002c32:	20fa      	movs	r0, #250	; 0xfa
 8002c34:	f002 fd12 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002c38:	f107 0214 	add.w	r2, r7, #20
 8002c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2301      	movs	r3, #1
 8002c44:	2140      	movs	r1, #64	; 0x40
 8002c46:	488a      	ldr	r0, [pc, #552]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002c48:	f003 fd1a 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002c4c:	e10c      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 2){
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d117      	bne.n	8002c84 <GPIO_Deactivation_Left+0xc8>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P45_OFF[0], 1, 1000);
 8002c54:	f107 0210 	add.w	r2, r7, #16
 8002c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2301      	movs	r3, #1
 8002c60:	2140      	movs	r1, #64	; 0x40
 8002c62:	4883      	ldr	r0, [pc, #524]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002c64:	f003 fd0c 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002c68:	20fa      	movs	r0, #250	; 0xfa
 8002c6a:	f002 fcf7 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x20<<1), &P45_STOP[0], 1, 1000);
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	2140      	movs	r1, #64	; 0x40
 8002c7c:	487c      	ldr	r0, [pc, #496]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002c7e:	f003 fcff 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002c82:	e0f1      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 3){
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d117      	bne.n	8002cba <GPIO_Deactivation_Left+0xfe>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P01_OFF[0], 1, 1000);
 8002c8a:	f107 0220 	add.w	r2, r7, #32
 8002c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2301      	movs	r3, #1
 8002c96:	2142      	movs	r1, #66	; 0x42
 8002c98:	4875      	ldr	r0, [pc, #468]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002c9a:	f003 fcf1 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002c9e:	20fa      	movs	r0, #250	; 0xfa
 8002ca0:	f002 fcdc 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002ca4:	f107 021c 	add.w	r2, r7, #28
 8002ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2301      	movs	r3, #1
 8002cb0:	2142      	movs	r1, #66	; 0x42
 8002cb2:	486f      	ldr	r0, [pc, #444]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002cb4:	f003 fce4 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002cb8:	e0d6      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 4){
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d117      	bne.n	8002cf0 <GPIO_Deactivation_Left+0x134>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P23_OFF[0], 1, 1000);
 8002cc0:	f107 0218 	add.w	r2, r7, #24
 8002cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	2301      	movs	r3, #1
 8002ccc:	2142      	movs	r1, #66	; 0x42
 8002cce:	4868      	ldr	r0, [pc, #416]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002cd0:	f003 fcd6 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002cd4:	20fa      	movs	r0, #250	; 0xfa
 8002cd6:	f002 fcc1 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P23_STOP[0], 1, 1000);
 8002cda:	f107 0214 	add.w	r2, r7, #20
 8002cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	2142      	movs	r1, #66	; 0x42
 8002ce8:	4861      	ldr	r0, [pc, #388]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002cea:	f003 fcc9 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002cee:	e0bb      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 5){
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d117      	bne.n	8002d26 <GPIO_Deactivation_Left+0x16a>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P45_OFF[0], 1, 1000);
 8002cf6:	f107 0210 	add.w	r2, r7, #16
 8002cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2301      	movs	r3, #1
 8002d02:	2142      	movs	r1, #66	; 0x42
 8002d04:	485a      	ldr	r0, [pc, #360]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002d06:	f003 fcbb 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002d0a:	20fa      	movs	r0, #250	; 0xfa
 8002d0c:	f002 fca6 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c3, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002d10:	f107 020c 	add.w	r2, r7, #12
 8002d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	2142      	movs	r1, #66	; 0x42
 8002d1e:	4854      	ldr	r0, [pc, #336]	; (8002e70 <GPIO_Deactivation_Left+0x2b4>)
 8002d20:	f003 fcae 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002d24:	e0a0      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 6){
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d117      	bne.n	8002d5c <GPIO_Deactivation_Left+0x1a0>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P01_OFF[0], 1, 1000);
 8002d2c:	f107 0220 	add.w	r2, r7, #32
 8002d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2301      	movs	r3, #1
 8002d38:	2140      	movs	r1, #64	; 0x40
 8002d3a:	484e      	ldr	r0, [pc, #312]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002d3c:	f003 fca0 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002d40:	20fa      	movs	r0, #250	; 0xfa
 8002d42:	f002 fc8b 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P01_STOP[0], 1, 1000);
 8002d46:	f107 021c 	add.w	r2, r7, #28
 8002d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2301      	movs	r3, #1
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	4847      	ldr	r0, [pc, #284]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002d56:	f003 fc93 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002d5a:	e085      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 7){
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	2b07      	cmp	r3, #7
 8002d60:	d117      	bne.n	8002d92 <GPIO_Deactivation_Left+0x1d6>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P23_OFF[0], 1, 1000);
 8002d62:	f107 0218 	add.w	r2, r7, #24
 8002d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	2140      	movs	r1, #64	; 0x40
 8002d70:	4840      	ldr	r0, [pc, #256]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002d72:	f003 fc85 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002d76:	20fa      	movs	r0, #250	; 0xfa
 8002d78:	f002 fc70 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P23_STOP[0], 1, 1000);
 8002d7c:	f107 0214 	add.w	r2, r7, #20
 8002d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2301      	movs	r3, #1
 8002d88:	2140      	movs	r1, #64	; 0x40
 8002d8a:	483a      	ldr	r0, [pc, #232]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002d8c:	f003 fc78 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002d90:	e06a      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 8){
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d117      	bne.n	8002dc8 <GPIO_Deactivation_Left+0x20c>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P45_OFF[0], 1, 1000);
 8002d98:	f107 0210 	add.w	r2, r7, #16
 8002d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	2301      	movs	r3, #1
 8002da4:	2140      	movs	r1, #64	; 0x40
 8002da6:	4833      	ldr	r0, [pc, #204]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002da8:	f003 fc6a 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002dac:	20fa      	movs	r0, #250	; 0xfa
 8002dae:	f002 fc55 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x20<<1), &P45_STOP[0], 1, 1000);
 8002db2:	f107 020c 	add.w	r2, r7, #12
 8002db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	2140      	movs	r1, #64	; 0x40
 8002dc0:	482c      	ldr	r0, [pc, #176]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002dc2:	f003 fc5d 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002dc6:	e04f      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 9){
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	2b09      	cmp	r3, #9
 8002dcc:	d117      	bne.n	8002dfe <GPIO_Deactivation_Left+0x242>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P01_OFF[0], 1, 1000);
 8002dce:	f107 0220 	add.w	r2, r7, #32
 8002dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	2142      	movs	r1, #66	; 0x42
 8002ddc:	4825      	ldr	r0, [pc, #148]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002dde:	f003 fc4f 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002de2:	20fa      	movs	r0, #250	; 0xfa
 8002de4:	f002 fc3a 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P01_STOP[0], 1, 1000);
 8002de8:	f107 021c 	add.w	r2, r7, #28
 8002dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2301      	movs	r3, #1
 8002df4:	2142      	movs	r1, #66	; 0x42
 8002df6:	481f      	ldr	r0, [pc, #124]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002df8:	f003 fc42 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002dfc:	e034      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 10){
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	2b0a      	cmp	r3, #10
 8002e02:	d117      	bne.n	8002e34 <GPIO_Deactivation_Left+0x278>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P23_OFF[0], 1, 1000);
 8002e04:	f107 0218 	add.w	r2, r7, #24
 8002e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2301      	movs	r3, #1
 8002e10:	2142      	movs	r1, #66	; 0x42
 8002e12:	4818      	ldr	r0, [pc, #96]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002e14:	f003 fc34 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002e18:	20fa      	movs	r0, #250	; 0xfa
 8002e1a:	f002 fc1f 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P23_STOP[0], 1, 1000);
 8002e1e:	f107 0214 	add.w	r2, r7, #20
 8002e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	2142      	movs	r1, #66	; 0x42
 8002e2c:	4811      	ldr	r0, [pc, #68]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002e2e:	f003 fc27 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002e32:	e019      	b.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
          } else if (note_num == 11){
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2b0b      	cmp	r3, #11
 8002e38:	d116      	bne.n	8002e68 <GPIO_Deactivation_Left+0x2ac>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_OFF[0], 1, 1000);
 8002e3a:	f107 0210 	add.w	r2, r7, #16
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2301      	movs	r3, #1
 8002e46:	2142      	movs	r1, #66	; 0x42
 8002e48:	480a      	ldr	r0, [pc, #40]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002e4a:	f003 fc19 	bl	8006680 <HAL_I2C_Master_Transmit>
              HAL_Delay(DCDelay);
 8002e4e:	20fa      	movs	r0, #250	; 0xfa
 8002e50:	f002 fc04 	bl	800565c <HAL_Delay>
              HAL_I2C_Master_Transmit(&hi2c4, (0x21<<1), &P45_STOP[0], 1, 1000);
 8002e54:	f107 020c 	add.w	r2, r7, #12
 8002e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2301      	movs	r3, #1
 8002e60:	2142      	movs	r1, #66	; 0x42
 8002e62:	4804      	ldr	r0, [pc, #16]	; (8002e74 <GPIO_Deactivation_Left+0x2b8>)
 8002e64:	f003 fc0c 	bl	8006680 <HAL_I2C_Master_Transmit>
}
 8002e68:	bf00      	nop
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000438 	.word	0x20000438
 8002e74:	2000048c 	.word	0x2000048c

08002e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e7e:	f002 fb78 	bl	8005572 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e82:	f000 f891 	bl	8002fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e86:	f000 fc9b 	bl	80037c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e8a:	f000 fc67 	bl	800375c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002e8e:	f000 fbcd 	bl	800362c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002e92:	f000 fc17 	bl	80036c4 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002e96:	f000 fb6f 	bl	8003578 <MX_TIM5_Init>
  MX_TIM2_Init();
 8002e9a:	f000 fa75 	bl	8003388 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e9e:	f000 fac1 	bl	8003424 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ea2:	f000 fb19 	bl	80034d8 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002ea6:	f000 f8f3 	bl	8003090 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002eaa:	f000 f931 	bl	8003110 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002eae:	f000 f96f 	bl	8003190 <MX_I2C3_Init>
  MX_I2C4_Init();
 8002eb2:	f000 f9ad 	bl	8003210 <MX_I2C4_Init>
  MX_SPI1_Init();
 8002eb6:	f000 f9eb 	bl	8003290 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002eba:	f000 fa27 	bl	800330c <MX_SPI2_Init>
  MX_CRC_Init();
 8002ebe:	f000 f8c5 	bl	800304c <MX_CRC_Init>
  MX_TouchGFX_Init();
 8002ec2:	f00a fb57 	bl	800d574 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  Displ_Init(Displ_Orientat_270);		// initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	f001 ff2c 	bl	8004d24 <Displ_Init>
   touchgfxSignalVSync();		// asks TouchGFX to start initial display drawing
 8002ecc:	f00e fe1a 	bl	8011b04 <touchgfxSignalVSync>
   Displ_BackLight('I');  			// initialize backlight and turn it on at init level
 8002ed0:	2049      	movs	r0, #73	; 0x49
 8002ed2:	f001 ffe9 	bl	8004ea8 <Displ_BackLight>

  //********************************************************
  // Might need to move this to where ever we start the song
  //********************************************************

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002ed6:	210c      	movs	r1, #12
 8002ed8:	482b      	ldr	r0, [pc, #172]	; (8002f88 <main+0x110>)
 8002eda:	f006 ff55 	bl	8009d88 <HAL_TIM_PWM_Start>
  TIM5->CCR4 = 25;
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <main+0x114>)
 8002ee0:	2219      	movs	r2, #25
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_UART_Receive_IT(&huart3, RX_Buffer, sizeof(RX_Buffer));
 8002ee4:	2205      	movs	r2, #5
 8002ee6:	492a      	ldr	r1, [pc, #168]	; (8002f90 <main+0x118>)
 8002ee8:	482a      	ldr	r0, [pc, #168]	; (8002f94 <main+0x11c>)
 8002eea:	f008 f915 	bl	800b118 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart3, TX_Buffer, sizeof(TX_Buffer));
 8002eee:	220e      	movs	r2, #14
 8002ef0:	4929      	ldr	r1, [pc, #164]	; (8002f98 <main+0x120>)
 8002ef2:	4828      	ldr	r0, [pc, #160]	; (8002f94 <main+0x11c>)
 8002ef4:	f008 f87c 	bl	800aff0 <HAL_UART_Transmit_IT>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002efe:	4827      	ldr	r0, [pc, #156]	; (8002f9c <main+0x124>)
 8002f00:	f003 faf2 	bl	80064e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   int pressed = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	607b      	str	r3, [r7, #4]
   int start = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	603b      	str	r3, [r7, #0]


  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f12:	4822      	ldr	r0, [pc, #136]	; (8002f9c <main+0x124>)
 8002f14:	f003 fae8 	bl	80064e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f1e:	4820      	ldr	r0, [pc, #128]	; (8002fa0 <main+0x128>)
 8002f20:	f003 fae2 	bl	80064e8 <HAL_GPIO_WritePin>
  while (1)
  {
	  if(start){
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <main+0xb6>
			  touchgfxSignalVSync();
 8002f2a:	f00e fdeb 	bl	8011b04 <touchgfxSignalVSync>
		  }

		  if(Touch_In_XY_area(120,  140,138,50)){
 8002f2e:	2332      	movs	r3, #50	; 0x32
 8002f30:	228a      	movs	r2, #138	; 0x8a
 8002f32:	218c      	movs	r1, #140	; 0x8c
 8002f34:	2078      	movs	r0, #120	; 0x78
 8002f36:	f002 f9fd 	bl	8005334 <Touch_In_XY_area>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01f      	beq.n	8002f80 <main+0x108>
			  pressed = !pressed;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf0c      	ite	eq
 8002f46:	2301      	moveq	r3, #1
 8002f48:	2300      	movne	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	607b      	str	r3, [r7, #4]
			  if(start == 1){
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d113      	bne.n	8002f7c <main+0x104>
		  	  touchgfxSignalVSync();		// asks TouchGFX to handle touch and redraw screen
 8002f54:	f00e fdd6 	bl	8011b04 <touchgfxSignalVSync>
		  	    setNextAction(0);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f7fe fcc3 	bl	80018e4 <setNextAction>
		  		TIM2->DIER = 0;
 8002f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f62:	2200      	movs	r2, #0
 8002f64:	60da      	str	r2, [r3, #12]
		  		TIM2->SR = 0;
 8002f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
		  		TIM2->EGR = 0;
 8002f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f72:	2200      	movs	r2, #0
 8002f74:	615a      	str	r2, [r3, #20]
		  		HAL_TIM_Base_Start_IT(&htim2);
 8002f76:	480b      	ldr	r0, [pc, #44]	; (8002fa4 <main+0x12c>)
 8002f78:	f006 fe10 	bl	8009b9c <HAL_TIM_Base_Start_IT>
			  }
			  start = 1;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	603b      	str	r3, [r7, #0]
		  }


    /* USER CODE END WHILE */

  MX_TouchGFX_Process();
 8002f80:	f00a fb00 	bl	800d584 <MX_TouchGFX_Process>
	  if(start){
 8002f84:	e7ce      	b.n	8002f24 <main+0xac>
 8002f86:	bf00      	nop
 8002f88:	2000074c 	.word	0x2000074c
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	200008c0 	.word	0x200008c0
 8002f94:	2000082c 	.word	0x2000082c
 8002f98:	20000004 	.word	0x20000004
 8002f9c:	48001400 	.word	0x48001400
 8002fa0:	48000800 	.word	0x48000800
 8002fa4:	20000668 	.word	0x20000668

08002fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b096      	sub	sp, #88	; 0x58
 8002fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	2244      	movs	r2, #68	; 0x44
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f023 fc37 	bl	802682a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002fce:	f003 ff37 	bl	8006e40 <HAL_PWREx_ControlVoltageScaling>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002fd8:	f000 ff86 	bl	8003ee8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002fdc:	2310      	movs	r3, #16
 8002fde:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002fe8:	2360      	movs	r3, #96	; 0x60
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fec:	2302      	movs	r3, #2
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002ff8:	2314      	movs	r3, #20
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003000:	2302      	movs	r3, #2
 8003002:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003004:	2302      	movs	r3, #2
 8003006:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	4618      	mov	r0, r3
 800300e:	f003 ffcb 	bl	8006fa8 <HAL_RCC_OscConfig>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003018:	f000 ff66 	bl	8003ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800301c:	230f      	movs	r3, #15
 800301e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003020:	2303      	movs	r3, #3
 8003022:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8003024:	2390      	movs	r3, #144	; 0x90
 8003026:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f004 fbd1 	bl	80077dc <HAL_RCC_ClockConfig>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003040:	f000 ff52 	bl	8003ee8 <Error_Handler>
  }
}
 8003044:	bf00      	nop
 8003046:	3758      	adds	r7, #88	; 0x58
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <MX_CRC_Init+0x3c>)
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <MX_CRC_Init+0x40>)
 8003054:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <MX_CRC_Init+0x3c>)
 8003058:	2200      	movs	r2, #0
 800305a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <MX_CRC_Init+0x3c>)
 800305e:	2200      	movs	r2, #0
 8003060:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <MX_CRC_Init+0x3c>)
 8003064:	2200      	movs	r2, #0
 8003066:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <MX_CRC_Init+0x3c>)
 800306a:	2200      	movs	r2, #0
 800306c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <MX_CRC_Init+0x3c>)
 8003070:	2201      	movs	r2, #1
 8003072:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003074:	4804      	ldr	r0, [pc, #16]	; (8003088 <MX_CRC_Init+0x3c>)
 8003076:	f002 fc85 	bl	8005984 <HAL_CRC_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003080:	f000 ff32 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	2000036c 	.word	0x2000036c
 800308c:	40023000 	.word	0x40023000

08003090 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <MX_I2C1_Init+0x74>)
 8003096:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <MX_I2C1_Init+0x78>)
 8003098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <MX_I2C1_Init+0x74>)
 800309c:	4a1b      	ldr	r2, [pc, #108]	; (800310c <MX_I2C1_Init+0x7c>)
 800309e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <MX_I2C1_Init+0x74>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <MX_I2C1_Init+0x74>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <MX_I2C1_Init+0x74>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <MX_I2C1_Init+0x74>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <MX_I2C1_Init+0x74>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <MX_I2C1_Init+0x74>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <MX_I2C1_Init+0x74>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030ca:	480e      	ldr	r0, [pc, #56]	; (8003104 <MX_I2C1_Init+0x74>)
 80030cc:	f003 fa3c 	bl	8006548 <HAL_I2C_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80030d6:	f000 ff07 	bl	8003ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030da:	2100      	movs	r1, #0
 80030dc:	4809      	ldr	r0, [pc, #36]	; (8003104 <MX_I2C1_Init+0x74>)
 80030de:	f003 fdf7 	bl	8006cd0 <HAL_I2CEx_ConfigAnalogFilter>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80030e8:	f000 fefe 	bl	8003ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030ec:	2100      	movs	r1, #0
 80030ee:	4805      	ldr	r0, [pc, #20]	; (8003104 <MX_I2C1_Init+0x74>)
 80030f0:	f003 fe39 	bl	8006d66 <HAL_I2CEx_ConfigDigitalFilter>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80030fa:	f000 fef5 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000390 	.word	0x20000390
 8003108:	40005400 	.word	0x40005400
 800310c:	00202538 	.word	0x00202538

08003110 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <MX_I2C2_Init+0x74>)
 8003116:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <MX_I2C2_Init+0x78>)
 8003118:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00202538;
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <MX_I2C2_Init+0x74>)
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <MX_I2C2_Init+0x7c>)
 800311e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003120:	4b18      	ldr	r3, [pc, #96]	; (8003184 <MX_I2C2_Init+0x74>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <MX_I2C2_Init+0x74>)
 8003128:	2201      	movs	r2, #1
 800312a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800312c:	4b15      	ldr	r3, [pc, #84]	; (8003184 <MX_I2C2_Init+0x74>)
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <MX_I2C2_Init+0x74>)
 8003134:	2200      	movs	r2, #0
 8003136:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <MX_I2C2_Init+0x74>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_I2C2_Init+0x74>)
 8003140:	2200      	movs	r2, #0
 8003142:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <MX_I2C2_Init+0x74>)
 8003146:	2200      	movs	r2, #0
 8003148:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800314a:	480e      	ldr	r0, [pc, #56]	; (8003184 <MX_I2C2_Init+0x74>)
 800314c:	f003 f9fc 	bl	8006548 <HAL_I2C_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003156:	f000 fec7 	bl	8003ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800315a:	2100      	movs	r1, #0
 800315c:	4809      	ldr	r0, [pc, #36]	; (8003184 <MX_I2C2_Init+0x74>)
 800315e:	f003 fdb7 	bl	8006cd0 <HAL_I2CEx_ConfigAnalogFilter>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003168:	f000 febe 	bl	8003ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800316c:	2100      	movs	r1, #0
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <MX_I2C2_Init+0x74>)
 8003170:	f003 fdf9 	bl	8006d66 <HAL_I2CEx_ConfigDigitalFilter>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800317a:	f000 feb5 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200003e4 	.word	0x200003e4
 8003188:	40005800 	.word	0x40005800
 800318c:	00202538 	.word	0x00202538

08003190 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <MX_I2C3_Init+0x74>)
 8003196:	4a1c      	ldr	r2, [pc, #112]	; (8003208 <MX_I2C3_Init+0x78>)
 8003198:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00202538;
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <MX_I2C3_Init+0x74>)
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <MX_I2C3_Init+0x7c>)
 800319e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <MX_I2C3_Init+0x74>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031a6:	4b17      	ldr	r3, [pc, #92]	; (8003204 <MX_I2C3_Init+0x74>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031ac:	4b15      	ldr	r3, [pc, #84]	; (8003204 <MX_I2C3_Init+0x74>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <MX_I2C3_Init+0x74>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <MX_I2C3_Init+0x74>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MX_I2C3_Init+0x74>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <MX_I2C3_Init+0x74>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80031ca:	480e      	ldr	r0, [pc, #56]	; (8003204 <MX_I2C3_Init+0x74>)
 80031cc:	f003 f9bc 	bl	8006548 <HAL_I2C_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80031d6:	f000 fe87 	bl	8003ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031da:	2100      	movs	r1, #0
 80031dc:	4809      	ldr	r0, [pc, #36]	; (8003204 <MX_I2C3_Init+0x74>)
 80031de:	f003 fd77 	bl	8006cd0 <HAL_I2CEx_ConfigAnalogFilter>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80031e8:	f000 fe7e 	bl	8003ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80031ec:	2100      	movs	r1, #0
 80031ee:	4805      	ldr	r0, [pc, #20]	; (8003204 <MX_I2C3_Init+0x74>)
 80031f0:	f003 fdb9 	bl	8006d66 <HAL_I2CEx_ConfigDigitalFilter>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80031fa:	f000 fe75 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000438 	.word	0x20000438
 8003208:	40005c00 	.word	0x40005c00
 800320c:	00202538 	.word	0x00202538

08003210 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <MX_I2C4_Init+0x74>)
 8003216:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <MX_I2C4_Init+0x78>)
 8003218:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00202538;
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <MX_I2C4_Init+0x74>)
 800321c:	4a1b      	ldr	r2, [pc, #108]	; (800328c <MX_I2C4_Init+0x7c>)
 800321e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <MX_I2C4_Init+0x74>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <MX_I2C4_Init+0x74>)
 8003228:	2201      	movs	r2, #1
 800322a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800322c:	4b15      	ldr	r3, [pc, #84]	; (8003284 <MX_I2C4_Init+0x74>)
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <MX_I2C4_Init+0x74>)
 8003234:	2200      	movs	r2, #0
 8003236:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <MX_I2C4_Init+0x74>)
 800323a:	2200      	movs	r2, #0
 800323c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <MX_I2C4_Init+0x74>)
 8003240:	2200      	movs	r2, #0
 8003242:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <MX_I2C4_Init+0x74>)
 8003246:	2200      	movs	r2, #0
 8003248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800324a:	480e      	ldr	r0, [pc, #56]	; (8003284 <MX_I2C4_Init+0x74>)
 800324c:	f003 f97c 	bl	8006548 <HAL_I2C_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8003256:	f000 fe47 	bl	8003ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800325a:	2100      	movs	r1, #0
 800325c:	4809      	ldr	r0, [pc, #36]	; (8003284 <MX_I2C4_Init+0x74>)
 800325e:	f003 fd37 	bl	8006cd0 <HAL_I2CEx_ConfigAnalogFilter>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8003268:	f000 fe3e 	bl	8003ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800326c:	2100      	movs	r1, #0
 800326e:	4805      	ldr	r0, [pc, #20]	; (8003284 <MX_I2C4_Init+0x74>)
 8003270:	f003 fd79 	bl	8006d66 <HAL_I2CEx_ConfigDigitalFilter>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800327a:	f000 fe35 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000048c 	.word	0x2000048c
 8003288:	40008400 	.word	0x40008400
 800328c:	00202538 	.word	0x00202538

08003290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <MX_SPI1_Init+0x74>)
 8003296:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <MX_SPI1_Init+0x78>)
 8003298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <MX_SPI1_Init+0x74>)
 800329c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032a2:	4b18      	ldr	r3, [pc, #96]	; (8003304 <MX_SPI1_Init+0x74>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <MX_SPI1_Init+0x74>)
 80032aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b0:	4b14      	ldr	r3, [pc, #80]	; (8003304 <MX_SPI1_Init+0x74>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <MX_SPI1_Init+0x74>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_SPI1_Init+0x74>)
 80032be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <MX_SPI1_Init+0x74>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_SPI1_Init+0x74>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_SPI1_Init+0x74>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <MX_SPI1_Init+0x74>)
 80032d8:	2200      	movs	r2, #0
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_SPI1_Init+0x74>)
 80032de:	2207      	movs	r2, #7
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <MX_SPI1_Init+0x74>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_SPI1_Init+0x74>)
 80032ea:	2208      	movs	r2, #8
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_SPI1_Init+0x74>)
 80032f0:	f005 fa4a 	bl	8008788 <HAL_SPI_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032fa:	f000 fdf5 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200004e0 	.word	0x200004e0
 8003308:	40013000 	.word	0x40013000

0800330c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <MX_SPI2_Init+0x74>)
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <MX_SPI2_Init+0x78>)
 8003314:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <MX_SPI2_Init+0x74>)
 8003318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800331c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <MX_SPI2_Init+0x74>)
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <MX_SPI2_Init+0x74>)
 8003326:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800332a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <MX_SPI2_Init+0x74>)
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <MX_SPI2_Init+0x74>)
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <MX_SPI2_Init+0x74>)
 800333a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <MX_SPI2_Init+0x74>)
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <MX_SPI2_Init+0x74>)
 8003348:	2200      	movs	r2, #0
 800334a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <MX_SPI2_Init+0x74>)
 800334e:	2200      	movs	r2, #0
 8003350:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <MX_SPI2_Init+0x74>)
 8003354:	2200      	movs	r2, #0
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <MX_SPI2_Init+0x74>)
 800335a:	2207      	movs	r2, #7
 800335c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <MX_SPI2_Init+0x74>)
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <MX_SPI2_Init+0x74>)
 8003366:	2208      	movs	r2, #8
 8003368:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800336a:	4805      	ldr	r0, [pc, #20]	; (8003380 <MX_SPI2_Init+0x74>)
 800336c:	f005 fa0c 	bl	8008788 <HAL_SPI_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003376:	f000 fdb7 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000544 	.word	0x20000544
 8003384:	40003800 	.word	0x40003800

08003388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033a6:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <MX_TIM2_Init+0x98>)
 80033a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 80033ae:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <MX_TIM2_Init+0x98>)
 80033b0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80033b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <MX_TIM2_Init+0x98>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <MX_TIM2_Init+0x98>)
 80033be:	f04f 32ff 	mov.w	r2, #4294967295
 80033c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <MX_TIM2_Init+0x98>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <MX_TIM2_Init+0x98>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033d0:	4813      	ldr	r0, [pc, #76]	; (8003420 <MX_TIM2_Init+0x98>)
 80033d2:	f006 fb8b 	bl	8009aec <HAL_TIM_Base_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80033dc:	f000 fd84 	bl	8003ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033e6:	f107 0310 	add.w	r3, r7, #16
 80033ea:	4619      	mov	r1, r3
 80033ec:	480c      	ldr	r0, [pc, #48]	; (8003420 <MX_TIM2_Init+0x98>)
 80033ee:	f006 ffe7 	bl	800a3c0 <HAL_TIM_ConfigClockSource>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80033f8:	f000 fd76 	bl	8003ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003404:	1d3b      	adds	r3, r7, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_TIM2_Init+0x98>)
 800340a:	f007 fcfb 	bl	800ae04 <HAL_TIMEx_MasterConfigSynchronization>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003414:	f000 fd68 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003418:	bf00      	nop
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000668 	.word	0x20000668

08003424 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800342a:	f107 031c 	add.w	r3, r7, #28
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003436:	463b      	mov	r3, r7
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
 8003444:	615a      	str	r2, [r3, #20]
 8003446:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003448:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <MX_TIM3_Init+0xac>)
 800344a:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <MX_TIM3_Init+0xb0>)
 800344c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <MX_TIM3_Init+0xac>)
 8003450:	f242 7210 	movw	r2, #10000	; 0x2710
 8003454:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <MX_TIM3_Init+0xac>)
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800345c:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <MX_TIM3_Init+0xac>)
 800345e:	2264      	movs	r2, #100	; 0x64
 8003460:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <MX_TIM3_Init+0xac>)
 8003464:	2200      	movs	r2, #0
 8003466:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <MX_TIM3_Init+0xac>)
 800346a:	2200      	movs	r2, #0
 800346c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800346e:	4818      	ldr	r0, [pc, #96]	; (80034d0 <MX_TIM3_Init+0xac>)
 8003470:	f006 fc33 	bl	8009cda <HAL_TIM_PWM_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800347a:	f000 fd35 	bl	8003ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003486:	f107 031c 	add.w	r3, r7, #28
 800348a:	4619      	mov	r1, r3
 800348c:	4810      	ldr	r0, [pc, #64]	; (80034d0 <MX_TIM3_Init+0xac>)
 800348e:	f007 fcb9 	bl	800ae04 <HAL_TIMEx_MasterConfigSynchronization>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003498:	f000 fd26 	bl	8003ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800349c:	2360      	movs	r3, #96	; 0x60
 800349e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034ac:	463b      	mov	r3, r7
 80034ae:	2204      	movs	r2, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4807      	ldr	r0, [pc, #28]	; (80034d0 <MX_TIM3_Init+0xac>)
 80034b4:	f006 fe70 	bl	800a198 <HAL_TIM_PWM_ConfigChannel>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80034be:	f000 fd13 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034c2:	4803      	ldr	r0, [pc, #12]	; (80034d0 <MX_TIM3_Init+0xac>)
 80034c4:	f001 f8b6 	bl	8004634 <HAL_TIM_MspPostInit>

}
 80034c8:	bf00      	nop
 80034ca:	3728      	adds	r7, #40	; 0x28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200006b4 	.word	0x200006b4
 80034d4:	40000400 	.word	0x40000400

080034d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034de:	f107 0310 	add.w	r3, r7, #16
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <MX_TIM4_Init+0x98>)
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <MX_TIM4_Init+0x9c>)
 80034fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39999;
 80034fc:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <MX_TIM4_Init+0x98>)
 80034fe:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003502:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <MX_TIM4_Init+0x98>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <MX_TIM4_Init+0x98>)
 800350c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003510:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <MX_TIM4_Init+0x98>)
 8003514:	2200      	movs	r2, #0
 8003516:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <MX_TIM4_Init+0x98>)
 800351a:	2200      	movs	r2, #0
 800351c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800351e:	4814      	ldr	r0, [pc, #80]	; (8003570 <MX_TIM4_Init+0x98>)
 8003520:	f006 fae4 	bl	8009aec <HAL_TIM_Base_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800352a:	f000 fcdd 	bl	8003ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800352e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003532:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003534:	f107 0310 	add.w	r3, r7, #16
 8003538:	4619      	mov	r1, r3
 800353a:	480d      	ldr	r0, [pc, #52]	; (8003570 <MX_TIM4_Init+0x98>)
 800353c:	f006 ff40 	bl	800a3c0 <HAL_TIM_ConfigClockSource>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8003546:	f000 fccf 	bl	8003ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4806      	ldr	r0, [pc, #24]	; (8003570 <MX_TIM4_Init+0x98>)
 8003558:	f007 fc54 	bl	800ae04 <HAL_TIMEx_MasterConfigSynchronization>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003562:	f000 fcc1 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003566:	bf00      	nop
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000700 	.word	0x20000700
 8003574:	40000800 	.word	0x40000800

08003578 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800358a:	463b      	mov	r3, r7
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
 8003598:	615a      	str	r2, [r3, #20]
 800359a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <MX_TIM5_Init+0xac>)
 800359e:	4a22      	ldr	r2, [pc, #136]	; (8003628 <MX_TIM5_Init+0xb0>)
 80035a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <MX_TIM5_Init+0xac>)
 80035a4:	2227      	movs	r2, #39	; 0x27
 80035a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <MX_TIM5_Init+0xac>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <MX_TIM5_Init+0xac>)
 80035b0:	2231      	movs	r2, #49	; 0x31
 80035b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <MX_TIM5_Init+0xac>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ba:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <MX_TIM5_Init+0xac>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80035c0:	4818      	ldr	r0, [pc, #96]	; (8003624 <MX_TIM5_Init+0xac>)
 80035c2:	f006 fb8a 	bl	8009cda <HAL_TIM_PWM_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80035cc:	f000 fc8c 	bl	8003ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80035d8:	f107 031c 	add.w	r3, r7, #28
 80035dc:	4619      	mov	r1, r3
 80035de:	4811      	ldr	r0, [pc, #68]	; (8003624 <MX_TIM5_Init+0xac>)
 80035e0:	f007 fc10 	bl	800ae04 <HAL_TIMEx_MasterConfigSynchronization>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80035ea:	f000 fc7d 	bl	8003ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ee:	2360      	movs	r3, #96	; 0x60
 80035f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035fe:	463b      	mov	r3, r7
 8003600:	220c      	movs	r2, #12
 8003602:	4619      	mov	r1, r3
 8003604:	4807      	ldr	r0, [pc, #28]	; (8003624 <MX_TIM5_Init+0xac>)
 8003606:	f006 fdc7 	bl	800a198 <HAL_TIM_PWM_ConfigChannel>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003610:	f000 fc6a 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003614:	4803      	ldr	r0, [pc, #12]	; (8003624 <MX_TIM5_Init+0xac>)
 8003616:	f001 f80d 	bl	8004634 <HAL_TIM_MspPostInit>

}
 800361a:	bf00      	nop
 800361c:	3728      	adds	r7, #40	; 0x28
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000074c 	.word	0x2000074c
 8003628:	40000c00 	.word	0x40000c00

0800362c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003632:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <MX_USART2_UART_Init+0x94>)
 8003634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003638:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800363c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800363e:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800364a:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <MX_USART2_UART_Init+0x90>)
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003652:	220c      	movs	r2, #12
 8003654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <MX_USART2_UART_Init+0x90>)
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003664:	2200      	movs	r2, #0
 8003666:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <MX_USART2_UART_Init+0x90>)
 800366a:	2200      	movs	r2, #0
 800366c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003670:	2200      	movs	r2, #0
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003674:	4811      	ldr	r0, [pc, #68]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003676:	f007 fc6b 	bl	800af50 <HAL_UART_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003680:	f000 fc32 	bl	8003ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003684:	2100      	movs	r1, #0
 8003686:	480d      	ldr	r0, [pc, #52]	; (80036bc <MX_USART2_UART_Init+0x90>)
 8003688:	f009 feaa 	bl	800d3e0 <HAL_UARTEx_SetTxFifoThreshold>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003692:	f000 fc29 	bl	8003ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003696:	2100      	movs	r1, #0
 8003698:	4808      	ldr	r0, [pc, #32]	; (80036bc <MX_USART2_UART_Init+0x90>)
 800369a:	f009 fedf 	bl	800d45c <HAL_UARTEx_SetRxFifoThreshold>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80036a4:	f000 fc20 	bl	8003ee8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80036a8:	4804      	ldr	r0, [pc, #16]	; (80036bc <MX_USART2_UART_Init+0x90>)
 80036aa:	f009 fe25 	bl	800d2f8 <HAL_UARTEx_EnableFifoMode>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80036b4:	f000 fc18 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036b8:	bf00      	nop
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20000798 	.word	0x20000798
 80036c0:	40004400 	.word	0x40004400

080036c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <MX_USART3_UART_Init+0x90>)
 80036ca:	4a23      	ldr	r2, [pc, #140]	; (8003758 <MX_USART3_UART_Init+0x94>)
 80036cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <MX_USART3_UART_Init+0x90>)
 80036d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <MX_USART3_UART_Init+0x90>)
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036dc:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <MX_USART3_UART_Init+0x90>)
 80036de:	2200      	movs	r2, #0
 80036e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036e2:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <MX_USART3_UART_Init+0x90>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036e8:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <MX_USART3_UART_Init+0x90>)
 80036ea:	220c      	movs	r2, #12
 80036ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ee:	4b19      	ldr	r3, [pc, #100]	; (8003754 <MX_USART3_UART_Init+0x90>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036f4:	4b17      	ldr	r3, [pc, #92]	; (8003754 <MX_USART3_UART_Init+0x90>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <MX_USART3_UART_Init+0x90>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <MX_USART3_UART_Init+0x90>)
 8003702:	2200      	movs	r2, #0
 8003704:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <MX_USART3_UART_Init+0x90>)
 8003708:	2200      	movs	r2, #0
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800370c:	4811      	ldr	r0, [pc, #68]	; (8003754 <MX_USART3_UART_Init+0x90>)
 800370e:	f007 fc1f 	bl	800af50 <HAL_UART_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003718:	f000 fbe6 	bl	8003ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800371c:	2100      	movs	r1, #0
 800371e:	480d      	ldr	r0, [pc, #52]	; (8003754 <MX_USART3_UART_Init+0x90>)
 8003720:	f009 fe5e 	bl	800d3e0 <HAL_UARTEx_SetTxFifoThreshold>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800372a:	f000 fbdd 	bl	8003ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800372e:	2100      	movs	r1, #0
 8003730:	4808      	ldr	r0, [pc, #32]	; (8003754 <MX_USART3_UART_Init+0x90>)
 8003732:	f009 fe93 	bl	800d45c <HAL_UARTEx_SetRxFifoThreshold>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800373c:	f000 fbd4 	bl	8003ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003740:	4804      	ldr	r0, [pc, #16]	; (8003754 <MX_USART3_UART_Init+0x90>)
 8003742:	f009 fe14 	bl	800d36e <HAL_UARTEx_DisableFifoMode>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800374c:	f000 fbcc 	bl	8003ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}
 8003754:	2000082c 	.word	0x2000082c
 8003758:	40004800 	.word	0x40004800

0800375c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <MX_DMA_Init+0x60>)
 8003764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <MX_DMA_Init+0x60>)
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	6493      	str	r3, [r2, #72]	; 0x48
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <MX_DMA_Init+0x60>)
 8003770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <MX_DMA_Init+0x60>)
 800377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377e:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <MX_DMA_Init+0x60>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6493      	str	r3, [r2, #72]	; 0x48
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <MX_DMA_Init+0x60>)
 8003788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2100      	movs	r1, #0
 8003796:	200b      	movs	r0, #11
 8003798:	f002 f8a1 	bl	80058de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800379c:	200b      	movs	r0, #11
 800379e:	f002 f8ba 	bl	8005916 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2100      	movs	r1, #0
 80037a6:	200c      	movs	r0, #12
 80037a8:	f002 f899 	bl	80058de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80037ac:	200c      	movs	r0, #12
 80037ae:	f002 f8b2 	bl	8005916 <HAL_NVIC_EnableIRQ>

}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	; 0x38
 80037c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	609a      	str	r2, [r3, #8]
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037d6:	4bb5      	ldr	r3, [pc, #724]	; (8003aac <MX_GPIO_Init+0x2ec>)
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	4ab4      	ldr	r2, [pc, #720]	; (8003aac <MX_GPIO_Init+0x2ec>)
 80037dc:	f043 0310 	orr.w	r3, r3, #16
 80037e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037e2:	4bb2      	ldr	r3, [pc, #712]	; (8003aac <MX_GPIO_Init+0x2ec>)
 80037e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	623b      	str	r3, [r7, #32]
 80037ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ee:	4baf      	ldr	r3, [pc, #700]	; (8003aac <MX_GPIO_Init+0x2ec>)
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	4aae      	ldr	r2, [pc, #696]	; (8003aac <MX_GPIO_Init+0x2ec>)
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037fa:	4bac      	ldr	r3, [pc, #688]	; (8003aac <MX_GPIO_Init+0x2ec>)
 80037fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003806:	4ba9      	ldr	r3, [pc, #676]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	4aa8      	ldr	r2, [pc, #672]	; (8003aac <MX_GPIO_Init+0x2ec>)
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003812:	4ba6      	ldr	r3, [pc, #664]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800381e:	4ba3      	ldr	r3, [pc, #652]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	4aa2      	ldr	r2, [pc, #648]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800382a:	4ba0      	ldr	r3, [pc, #640]	; (8003aac <MX_GPIO_Init+0x2ec>)
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003836:	4b9d      	ldr	r3, [pc, #628]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	4a9c      	ldr	r2, [pc, #624]	; (8003aac <MX_GPIO_Init+0x2ec>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003842:	4b9a      	ldr	r3, [pc, #616]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800384e:	4b97      	ldr	r3, [pc, #604]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	4a96      	ldr	r2, [pc, #600]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800385a:	4b94      	ldr	r3, [pc, #592]	; (8003aac <MX_GPIO_Init+0x2ec>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003866:	4b91      	ldr	r3, [pc, #580]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	4a90      	ldr	r2, [pc, #576]	; (8003aac <MX_GPIO_Init+0x2ec>)
 800386c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003872:	4b8e      	ldr	r3, [pc, #568]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800387e:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	4a8a      	ldr	r2, [pc, #552]	; (8003aac <MX_GPIO_Init+0x2ec>)
 8003884:	f043 0308 	orr.w	r3, r3, #8
 8003888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800388a:	4b88      	ldr	r3, [pc, #544]	; (8003aac <MX_GPIO_Init+0x2ec>)
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003896:	f003 fb77 	bl	8006f88 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 800389a:	2200      	movs	r2, #0
 800389c:	f44f 41a3 	mov.w	r1, #20864	; 0x5180
 80038a0:	4883      	ldr	r0, [pc, #524]	; (8003ab0 <MX_GPIO_Init+0x2f0>)
 80038a2:	f002 fe21 	bl	80064e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80038a6:	2200      	movs	r2, #0
 80038a8:	210f      	movs	r1, #15
 80038aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ae:	f002 fe1b 	bl	80064e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10
 80038b2:	2200      	movs	r2, #0
 80038b4:	f44f 6153 	mov.w	r1, #3376	; 0xd30
 80038b8:	487e      	ldr	r0, [pc, #504]	; (8003ab4 <MX_GPIO_Init+0x2f4>)
 80038ba:	f002 fe15 	bl	80064e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 80038be:	2201      	movs	r2, #1
 80038c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038c4:	487a      	ldr	r0, [pc, #488]	; (8003ab0 <MX_GPIO_Init+0x2f0>)
 80038c6:	f002 fe0f 	bl	80064e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2141      	movs	r1, #65	; 0x41
 80038ce:	487a      	ldr	r0, [pc, #488]	; (8003ab8 <MX_GPIO_Init+0x2f8>)
 80038d0:	f002 fe0a 	bl	80064e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 80038d4:	2201      	movs	r2, #1
 80038d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038da:	4878      	ldr	r0, [pc, #480]	; (8003abc <MX_GPIO_Init+0x2fc>)
 80038dc:	f002 fe04 	bl	80064e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038e0:	230c      	movs	r3, #12
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e4:	2302      	movs	r3, #2
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ec:	2300      	movs	r3, #0
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80038f0:	230d      	movs	r3, #13
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f8:	4619      	mov	r1, r3
 80038fa:	4870      	ldr	r0, [pc, #448]	; (8003abc <MX_GPIO_Init+0x2fc>)
 80038fc:	f002 fc62 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 DISPL_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|DISPL_RST_Pin;
 8003900:	f44f 538c 	mov.w	r3, #4480	; 0x1180
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003906:	2301      	movs	r3, #1
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390a:	2300      	movs	r3, #0
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390e:	2300      	movs	r3, #0
 8003910:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003916:	4619      	mov	r1, r3
 8003918:	4865      	ldr	r0, [pc, #404]	; (8003ab0 <MX_GPIO_Init+0x2f0>)
 800391a:	f002 fc53 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800391e:	2302      	movs	r3, #2
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003922:	230b      	movs	r3, #11
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800392a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800392e:	4619      	mov	r1, r3
 8003930:	4860      	ldr	r0, [pc, #384]	; (8003ab4 <MX_GPIO_Init+0x2f4>)
 8003932:	f002 fc47 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003936:	230f      	movs	r3, #15
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800393a:	2301      	movs	r3, #1
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003942:	2300      	movs	r3, #0
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800394a:	4619      	mov	r1, r3
 800394c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003950:	f002 fc38 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC8 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10
 8003954:	f44f 6353 	mov.w	r3, #3376	; 0xd30
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395a:	2301      	movs	r3, #1
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003962:	2300      	movs	r3, #0
 8003964:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396a:	4619      	mov	r1, r3
 800396c:	4851      	ldr	r0, [pc, #324]	; (8003ab4 <MX_GPIO_Init+0x2f4>)
 800396e:	f002 fc29 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003972:	2302      	movs	r3, #2
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003976:	230b      	movs	r3, #11
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397a:	2300      	movs	r3, #0
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003982:	4619      	mov	r1, r3
 8003984:	484e      	ldr	r0, [pc, #312]	; (8003ac0 <MX_GPIO_Init+0x300>)
 8003986:	f002 fc1d 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800398a:	2304      	movs	r3, #4
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800398e:	2303      	movs	r3, #3
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399a:	4619      	mov	r1, r3
 800399c:	4848      	ldr	r0, [pc, #288]	; (8003ac0 <MX_GPIO_Init+0x300>)
 800399e:	f002 fc11 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_DC_Pin;
 80039a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a8:	2301      	movs	r3, #1
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039b0:	2302      	movs	r3, #2
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b8:	4619      	mov	r1, r3
 80039ba:	483d      	ldr	r0, [pc, #244]	; (8003ab0 <MX_GPIO_Init+0x2f0>)
 80039bc:	f002 fc02 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 80039c0:	2341      	movs	r3, #65	; 0x41
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c4:	2301      	movs	r3, #1
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039cc:	2300      	movs	r3, #0
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d4:	4619      	mov	r1, r3
 80039d6:	4838      	ldr	r0, [pc, #224]	; (8003ab8 <MX_GPIO_Init+0x2f8>)
 80039d8:	f002 fbf4 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80039dc:	2302      	movs	r3, #2
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e6:	2301      	movs	r3, #1
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80039ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ee:	4619      	mov	r1, r3
 80039f0:	4831      	ldr	r0, [pc, #196]	; (8003ab8 <MX_GPIO_Init+0x2f8>)
 80039f2:	f002 fbe7 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80039f6:	f44f 535e 	mov.w	r3, #14208	; 0x3780
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a04:	2300      	movs	r3, #0
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a10:	4619      	mov	r1, r3
 8003a12:	482a      	ldr	r0, [pc, #168]	; (8003abc <MX_GPIO_Init+0x2fc>)
 8003a14:	f002 fbd6 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a26:	2302      	movs	r3, #2
 8003a28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8003a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4822      	ldr	r0, [pc, #136]	; (8003abc <MX_GPIO_Init+0x2fc>)
 8003a32:	f002 fbc7 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003a36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a44:	2300      	movs	r3, #0
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a50:	4619      	mov	r1, r3
 8003a52:	481a      	ldr	r0, [pc, #104]	; (8003abc <MX_GPIO_Init+0x2fc>)
 8003a54:	f002 fbb6 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003a58:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a66:	2300      	movs	r3, #0
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003a6a:	230d      	movs	r3, #13
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a72:	4619      	mov	r1, r3
 8003a74:	4812      	ldr	r0, [pc, #72]	; (8003ac0 <MX_GPIO_Init+0x300>)
 8003a76:	f002 fba5 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	2302      	movs	r3, #2
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003a8c:	230e      	movs	r3, #14
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a94:	4619      	mov	r1, r3
 8003a96:	480a      	ldr	r0, [pc, #40]	; (8003ac0 <MX_GPIO_Init+0x300>)
 8003a98:	f002 fb94 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003a9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e00c      	b.n	8003ac4 <MX_GPIO_Init+0x304>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	48001400 	.word	0x48001400
 8003ab4:	48000800 	.word	0x48000800
 8003ab8:	48001800 	.word	0x48001800
 8003abc:	48001000 	.word	0x48001000
 8003ac0:	48000400 	.word	0x48000400
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003aca:	2308      	movs	r3, #8
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4848      	ldr	r0, [pc, #288]	; (8003bf8 <MX_GPIO_Init+0x438>)
 8003ad6:	f002 fb75 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ada:	2340      	movs	r3, #64	; 0x40
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003aea:	230d      	movs	r3, #13
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af2:	4619      	mov	r1, r3
 8003af4:	4841      	ldr	r0, [pc, #260]	; (8003bfc <MX_GPIO_Init+0x43c>)
 8003af6:	f002 fb65 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8003afa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b00:	2302      	movs	r3, #2
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003b0c:	230c      	movs	r3, #12
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b14:	4619      	mov	r1, r3
 8003b16:	4839      	ldr	r0, [pc, #228]	; (8003bfc <MX_GPIO_Init+0x43c>)
 8003b18:	f002 fb54 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8003b1c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b22:	2302      	movs	r3, #2
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b2e:	230a      	movs	r3, #10
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b36:	4619      	mov	r1, r3
 8003b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b3c:	f002 fb42 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b52:	4619      	mov	r1, r3
 8003b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b58:	f002 fb34 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b60:	2302      	movs	r3, #2
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003b6c:	2309      	movs	r3, #9
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b74:	4619      	mov	r1, r3
 8003b76:	4822      	ldr	r0, [pc, #136]	; (8003c00 <MX_GPIO_Init+0x440>)
 8003b78:	f002 fb24 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b80:	2302      	movs	r3, #2
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b94:	4619      	mov	r1, r3
 8003b96:	481a      	ldr	r0, [pc, #104]	; (8003c00 <MX_GPIO_Init+0x440>)
 8003b98:	f002 fb14 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003baa:	2303      	movs	r3, #3
 8003bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bae:	2307      	movs	r3, #7
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	480f      	ldr	r0, [pc, #60]	; (8003bf8 <MX_GPIO_Init+0x438>)
 8003bba:	f002 fb03 	bl	80061c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003bce:	2306      	movs	r3, #6
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	480a      	ldr	r0, [pc, #40]	; (8003c04 <MX_GPIO_Init+0x444>)
 8003bda:	f002 faf3 	bl	80061c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	2007      	movs	r0, #7
 8003be4:	f001 fe7b 	bl	80058de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003be8:	2007      	movs	r0, #7
 8003bea:	f001 fe94 	bl	8005916 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003bee:	bf00      	nop
 8003bf0:	3738      	adds	r7, #56	; 0x38
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	48001800 	.word	0x48001800
 8003bfc:	48000800 	.word	0x48000800
 8003c00:	48000c00 	.word	0x48000c00
 8003c04:	48000400 	.word	0x48000400

08003c08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	//__NOP(); // for debugging
	//Commented out ->Instance
		if (huart->Instance == USART3)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a97      	ldr	r2, [pc, #604]	; (8003e74 <HAL_UART_RxCpltCallback+0x26c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	f040 8157 	bne.w	8003eca <HAL_UART_RxCpltCallback+0x2c2>
	    {

	        // RX_Buffer[0] = note number
	        // RX_Buffer[1] = start time upper half, RX_Buffer[2] = start time lower half
	        // RX_Buffer[3] = end time upper half, RX_Buffer[4] = end time lower half
	        int noteNum = RX_Buffer[0];
 8003c1c:	4b96      	ldr	r3, [pc, #600]	; (8003e78 <HAL_UART_RxCpltCallback+0x270>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	613b      	str	r3, [r7, #16]
	        int start_Time = (RX_Buffer[1] << 8) + RX_Buffer[2];
 8003c22:	4b95      	ldr	r3, [pc, #596]	; (8003e78 <HAL_UART_RxCpltCallback+0x270>)
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	4a93      	ldr	r2, [pc, #588]	; (8003e78 <HAL_UART_RxCpltCallback+0x270>)
 8003c2a:	7892      	ldrb	r2, [r2, #2]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
	        int end_Time = (RX_Buffer[3] << 8) + RX_Buffer[4];
 8003c30:	4b91      	ldr	r3, [pc, #580]	; (8003e78 <HAL_UART_RxCpltCallback+0x270>)
 8003c32:	78db      	ldrb	r3, [r3, #3]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	4a90      	ldr	r2, [pc, #576]	; (8003e78 <HAL_UART_RxCpltCallback+0x270>)
 8003c38:	7912      	ldrb	r2, [r2, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	60bb      	str	r3, [r7, #8]
	        if(noteNum == 1 && start_Time == end_Time){
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d10a      	bne.n	8003c5a <HAL_UART_RxCpltCallback+0x52>
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d106      	bne.n	8003c5a <HAL_UART_RxCpltCallback+0x52>
	        	// Starting to send title
	        	reading_title = 1;
 8003c4c:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <HAL_UART_RxCpltCallback+0x274>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
	        	title_index = 0;
 8003c52:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <HAL_UART_RxCpltCallback+0x278>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e026      	b.n	8003ca8 <HAL_UART_RxCpltCallback+0xa0>
	        }
	        else if(noteNum == 2 && start_Time == end_Time){
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d107      	bne.n	8003c70 <HAL_UART_RxCpltCallback+0x68>
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d103      	bne.n	8003c70 <HAL_UART_RxCpltCallback+0x68>
	        	// Title done, do other stuff
	        	reading_title = 0;
 8003c68:	4b84      	ldr	r3, [pc, #528]	; (8003e7c <HAL_UART_RxCpltCallback+0x274>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e01b      	b.n	8003ca8 <HAL_UART_RxCpltCallback+0xa0>
	        }
	        else if(reading_title){
 8003c70:	4b82      	ldr	r3, [pc, #520]	; (8003e7c <HAL_UART_RxCpltCallback+0x274>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <HAL_UART_RxCpltCallback+0xa0>
	        	for(int i = 0; i < 5; i++){
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e00c      	b.n	8003c98 <HAL_UART_RxCpltCallback+0x90>
	        		title_data[title_index + i] = RX_Buffer[i];
 8003c7e:	4b80      	ldr	r3, [pc, #512]	; (8003e80 <HAL_UART_RxCpltCallback+0x278>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4413      	add	r3, r2
 8003c86:	497c      	ldr	r1, [pc, #496]	; (8003e78 <HAL_UART_RxCpltCallback+0x270>)
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	7811      	ldrb	r1, [r2, #0]
 8003c8e:	4a7d      	ldr	r2, [pc, #500]	; (8003e84 <HAL_UART_RxCpltCallback+0x27c>)
 8003c90:	54d1      	strb	r1, [r2, r3]
	        	for(int i = 0; i < 5; i++){
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3301      	adds	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	ddef      	ble.n	8003c7e <HAL_UART_RxCpltCallback+0x76>
	        	}
	        	title_index += 5;
 8003c9e:	4b78      	ldr	r3, [pc, #480]	; (8003e80 <HAL_UART_RxCpltCallback+0x278>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3305      	adds	r3, #5
 8003ca4:	4a76      	ldr	r2, [pc, #472]	; (8003e80 <HAL_UART_RxCpltCallback+0x278>)
 8003ca6:	6013      	str	r3, [r2, #0]
	        }
	        // noteNum = 0 and start_Time = end_Time indicates the beginning of a song
	        // noteNum = 255 and start_time = end_Time indicates the end of a song
	        if(noteNum == 3 && start_Time == end_Time){
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d110      	bne.n	8003cd0 <HAL_UART_RxCpltCallback+0xc8>
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_UART_RxCpltCallback+0xc8>
	        	song_length = 0;
 8003cb6:	4b74      	ldr	r3, [pc, #464]	; (8003e88 <HAL_UART_RxCpltCallback+0x280>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
	        	note_dataR_len = 0;
 8003cbc:	4b73      	ldr	r3, [pc, #460]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
	        	note_dataL_len = 0;
 8003cc2:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <HAL_UART_RxCpltCallback+0x288>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
	        	read_notes = 1;
 8003cc8:	4b72      	ldr	r3, [pc, #456]	; (8003e94 <HAL_UART_RxCpltCallback+0x28c>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e0f7      	b.n	8003ec0 <HAL_UART_RxCpltCallback+0x2b8>
	        }
	        else if (noteNum == 4 && start_Time == end_Time){
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d150      	bne.n	8003d78 <HAL_UART_RxCpltCallback+0x170>
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d14c      	bne.n	8003d78 <HAL_UART_RxCpltCallback+0x170>
	        	note_dataR[note_dataR_len][0] = 0;
 8003cde:	4b6b      	ldr	r3, [pc, #428]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	496d      	ldr	r1, [pc, #436]	; (8003e98 <HAL_UART_RxCpltCallback+0x290>)
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
	            note_dataR[note_dataR_len][1] = 0;
 8003cf2:	4b66      	ldr	r3, [pc, #408]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4968      	ldr	r1, [pc, #416]	; (8003e98 <HAL_UART_RxCpltCallback+0x290>)
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	3304      	adds	r3, #4
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
	            note_dataR[note_dataR_len][2] = 0;
 8003d08:	4b60      	ldr	r3, [pc, #384]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4962      	ldr	r1, [pc, #392]	; (8003e98 <HAL_UART_RxCpltCallback+0x290>)
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	3308      	adds	r3, #8
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
	            note_dataL[note_dataL_len][0] = 0;
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <HAL_UART_RxCpltCallback+0x288>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	495e      	ldr	r1, [pc, #376]	; (8003e9c <HAL_UART_RxCpltCallback+0x294>)
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
	            note_dataL[note_dataL_len][1] = 0;
 8003d32:	4b57      	ldr	r3, [pc, #348]	; (8003e90 <HAL_UART_RxCpltCallback+0x288>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4959      	ldr	r1, [pc, #356]	; (8003e9c <HAL_UART_RxCpltCallback+0x294>)
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3304      	adds	r3, #4
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
	            note_dataL[note_dataL_len][2] = 0;
 8003d48:	4b51      	ldr	r3, [pc, #324]	; (8003e90 <HAL_UART_RxCpltCallback+0x288>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4953      	ldr	r1, [pc, #332]	; (8003e9c <HAL_UART_RxCpltCallback+0x294>)
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3308      	adds	r3, #8
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
	        	song_length = note_dataR_len + note_dataL_len;
 8003d5e:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <HAL_UART_RxCpltCallback+0x288>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4413      	add	r3, r2
 8003d68:	4a47      	ldr	r2, [pc, #284]	; (8003e88 <HAL_UART_RxCpltCallback+0x280>)
 8003d6a:	6013      	str	r3, [r2, #0]
	            read_notes = 0;
 8003d6c:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <HAL_UART_RxCpltCallback+0x28c>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
	            play_notes();
 8003d72:	f7fe fa31 	bl	80021d8 <play_notes>
 8003d76:	e0a3      	b.n	8003ec0 <HAL_UART_RxCpltCallback+0x2b8>
	        }
	        else if(read_notes){
 8003d78:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <HAL_UART_RxCpltCallback+0x28c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 809f 	beq.w	8003ec0 <HAL_UART_RxCpltCallback+0x2b8>
	        	if(noteNum >= 60){
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b3b      	cmp	r3, #59	; 0x3b
 8003d86:	dd41      	ble.n	8003e0c <HAL_UART_RxCpltCallback+0x204>
	        		note_dataR[note_dataR_len][0] = noteNum;
 8003d88:	4b40      	ldr	r3, [pc, #256]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4942      	ldr	r1, [pc, #264]	; (8003e98 <HAL_UART_RxCpltCallback+0x290>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	601a      	str	r2, [r3, #0]
	        		note_dataR[note_dataR_len][1] = start_Time + 2;
 8003d9c:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1c99      	adds	r1, r3, #2
 8003da4:	483c      	ldr	r0, [pc, #240]	; (8003e98 <HAL_UART_RxCpltCallback+0x290>)
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4403      	add	r3, r0
 8003db0:	3304      	adds	r3, #4
 8003db2:	6019      	str	r1, [r3, #0]
	        		note_dataR[note_dataR_len][2] = end_Time + 2;
 8003db4:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	1c99      	adds	r1, r3, #2
 8003dbc:	4836      	ldr	r0, [pc, #216]	; (8003e98 <HAL_UART_RxCpltCallback+0x290>)
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4403      	add	r3, r0
 8003dc8:	3308      	adds	r3, #8
 8003dca:	6019      	str	r1, [r3, #0]
	        		if(noteNum > highestNote){
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b60      	cmp	r3, #96	; 0x60
 8003dd0:	dd0b      	ble.n	8003dea <HAL_UART_RxCpltCallback+0x1e2>
	        			note_dataR[note_dataR_len][4] = 1;
 8003dd2:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4930      	ldr	r1, [pc, #192]	; (8003e98 <HAL_UART_RxCpltCallback+0x290>)
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	3310      	adds	r3, #16
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e00a      	b.n	8003e00 <HAL_UART_RxCpltCallback+0x1f8>
	        		}
	        		else{
	        			note_dataR[note_dataR_len][4] = 0;
 8003dea:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	492a      	ldr	r1, [pc, #168]	; (8003e98 <HAL_UART_RxCpltCallback+0x290>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3310      	adds	r3, #16
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
	        		}
	        		note_dataR_len++;
 8003e00:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e059      	b.n	8003ec0 <HAL_UART_RxCpltCallback+0x2b8>
	        	}
	        	else{
	        		note_dataL[note_dataL_len][0] = noteNum;
 8003e0c:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <HAL_UART_RxCpltCallback+0x288>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4922      	ldr	r1, [pc, #136]	; (8003e9c <HAL_UART_RxCpltCallback+0x294>)
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	601a      	str	r2, [r3, #0]
	        		note_dataL[note_dataL_len][1] = start_Time + 2;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_UART_RxCpltCallback+0x288>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1c99      	adds	r1, r3, #2
 8003e28:	481c      	ldr	r0, [pc, #112]	; (8003e9c <HAL_UART_RxCpltCallback+0x294>)
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4403      	add	r3, r0
 8003e34:	3304      	adds	r3, #4
 8003e36:	6019      	str	r1, [r3, #0]
	        		note_dataL[note_dataL_len][2] = end_Time + 2;
 8003e38:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <HAL_UART_RxCpltCallback+0x288>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1c99      	adds	r1, r3, #2
 8003e40:	4816      	ldr	r0, [pc, #88]	; (8003e9c <HAL_UART_RxCpltCallback+0x294>)
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4403      	add	r3, r0
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	6019      	str	r1, [r3, #0]
	        		if(noteNum < lowestNote || noteNum > 54){
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b23      	cmp	r3, #35	; 0x23
 8003e54:	dd02      	ble.n	8003e5c <HAL_UART_RxCpltCallback+0x254>
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b36      	cmp	r3, #54	; 0x36
 8003e5a:	dd21      	ble.n	8003ea0 <HAL_UART_RxCpltCallback+0x298>
	        			note_dataR[note_dataR_len][4] = 1;
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_UART_RxCpltCallback+0x284>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	490d      	ldr	r1, [pc, #52]	; (8003e98 <HAL_UART_RxCpltCallback+0x290>)
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3310      	adds	r3, #16
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e020      	b.n	8003eb6 <HAL_UART_RxCpltCallback+0x2ae>
 8003e74:	40004800 	.word	0x40004800
 8003e78:	200008c0 	.word	0x200008c0
 8003e7c:	200085d8 	.word	0x200085d8
 8003e80:	20008610 	.word	0x20008610
 8003e84:	200085dc 	.word	0x200085dc
 8003e88:	200085d0 	.word	0x200085d0
 8003e8c:	2001beb0 	.word	0x2001beb0
 8003e90:	2001226c 	.word	0x2001226c
 8003e94:	200085d4 	.word	0x200085d4
 8003e98:	20012270 	.word	0x20012270
 8003e9c:	2000862c 	.word	0x2000862c
	        		}
	        		else{
	        			note_dataR[note_dataR_len][4] = 0;
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <HAL_UART_RxCpltCallback+0x2cc>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	490c      	ldr	r1, [pc, #48]	; (8003ed8 <HAL_UART_RxCpltCallback+0x2d0>)
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	3310      	adds	r3, #16
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
	        		}
	        		note_dataL_len++;
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_UART_RxCpltCallback+0x2d4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	4a07      	ldr	r2, [pc, #28]	; (8003edc <HAL_UART_RxCpltCallback+0x2d4>)
 8003ebe:	6013      	str	r3, [r2, #0]



	         // Similar logic for the last 2 motors using ReceivedData[2] and ReceivedData[3]
	        //memset(RX_Buffer, 0, sizeof(RX_Buffer));
	        HAL_UART_Receive_IT(&huart3, RX_Buffer, sizeof(RX_Buffer));
 8003ec0:	2205      	movs	r2, #5
 8003ec2:	4907      	ldr	r1, [pc, #28]	; (8003ee0 <HAL_UART_RxCpltCallback+0x2d8>)
 8003ec4:	4807      	ldr	r0, [pc, #28]	; (8003ee4 <HAL_UART_RxCpltCallback+0x2dc>)
 8003ec6:	f007 f927 	bl	800b118 <HAL_UART_Receive_IT>
	    }

}
 8003eca:	bf00      	nop
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2001beb0 	.word	0x2001beb0
 8003ed8:	20012270 	.word	0x20012270
 8003edc:	2001226c 	.word	0x2001226c
 8003ee0:	200008c0 	.word	0x200008c0
 8003ee4:	2000082c 	.word	0x2000082c

08003ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eec:	b672      	cpsid	i
}
 8003eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <Error_Handler+0x8>
	...

08003ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <HAL_MspInit+0x44>)
 8003efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efe:	4a0e      	ldr	r2, [pc, #56]	; (8003f38 <HAL_MspInit+0x44>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6613      	str	r3, [r2, #96]	; 0x60
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_MspInit+0x44>)
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_MspInit+0x44>)
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <HAL_MspInit+0x44>)
 8003f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_MspInit+0x44>)
 8003f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003f2a:	2005      	movs	r0, #5
 8003f2c:	f001 fccc 	bl	80058c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000

08003f3c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <HAL_CRC_MspInit+0x38>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10b      	bne.n	8003f66 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_CRC_MspInit+0x3c>)
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_CRC_MspInit+0x3c>)
 8003f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f58:	6493      	str	r3, [r2, #72]	; 0x48
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <HAL_CRC_MspInit+0x3c>)
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40023000 	.word	0x40023000
 8003f78:	40021000 	.word	0x40021000

08003f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b0b6      	sub	sp, #216	; 0xd8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f98:	2294      	movs	r2, #148	; 0x94
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f022 fc44 	bl	802682a <memset>
  if(hi2c->Instance==I2C1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4ab2      	ldr	r2, [pc, #712]	; (8004270 <HAL_I2C_MspInit+0x2f4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d13d      	bne.n	8004028 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003fac:	2340      	movs	r3, #64	; 0x40
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f003 fecc 	bl	8007d58 <HAL_RCCEx_PeriphCLKConfig>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003fc6:	f7ff ff8f 	bl	8003ee8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fca:	4baa      	ldr	r3, [pc, #680]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	4aa9      	ldr	r2, [pc, #676]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd6:	4ba7      	ldr	r3, [pc, #668]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fe2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fea:	2312      	movs	r3, #18
 8003fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004002:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004006:	4619      	mov	r1, r3
 8004008:	489b      	ldr	r0, [pc, #620]	; (8004278 <HAL_I2C_MspInit+0x2fc>)
 800400a:	f002 f8db 	bl	80061c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800400e:	4b99      	ldr	r3, [pc, #612]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	4a98      	ldr	r2, [pc, #608]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004018:	6593      	str	r3, [r2, #88]	; 0x58
 800401a:	4b96      	ldr	r3, [pc, #600]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004026:	e11e      	b.n	8004266 <HAL_I2C_MspInit+0x2ea>
  else if(hi2c->Instance==I2C2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a93      	ldr	r2, [pc, #588]	; (800427c <HAL_I2C_MspInit+0x300>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d151      	bne.n	80040d6 <HAL_I2C_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800403c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004040:	4618      	mov	r0, r3
 8004042:	f003 fe89 	bl	8007d58 <HAL_RCCEx_PeriphCLKConfig>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 800404c:	f7ff ff4c 	bl	8003ee8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004050:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004054:	4a87      	ldr	r2, [pc, #540]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004056:	f043 0320 	orr.w	r3, r3, #32
 800405a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800405c:	4b85      	ldr	r3, [pc, #532]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 800405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004068:	2303      	movs	r3, #3
 800406a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800406e:	2312      	movs	r3, #18
 8004070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004074:	2301      	movs	r3, #1
 8004076:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407a:	2303      	movs	r3, #3
 800407c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004080:	2304      	movs	r3, #4
 8004082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004086:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800408a:	4619      	mov	r1, r3
 800408c:	487c      	ldr	r0, [pc, #496]	; (8004280 <HAL_I2C_MspInit+0x304>)
 800408e:	f002 f899 	bl	80061c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004092:	2304      	movs	r3, #4
 8004094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004098:	2312      	movs	r3, #18
 800409a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80040aa:	2304      	movs	r3, #4
 80040ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040b4:	4619      	mov	r1, r3
 80040b6:	4872      	ldr	r0, [pc, #456]	; (8004280 <HAL_I2C_MspInit+0x304>)
 80040b8:	f002 f884 	bl	80061c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80040bc:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	4a6c      	ldr	r2, [pc, #432]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 80040c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040c6:	6593      	str	r3, [r2, #88]	; 0x58
 80040c8:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	6a3b      	ldr	r3, [r7, #32]
}
 80040d4:	e0c7      	b.n	8004266 <HAL_I2C_MspInit+0x2ea>
  else if(hi2c->Instance==I2C3)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6a      	ldr	r2, [pc, #424]	; (8004284 <HAL_I2C_MspInit+0x308>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d15e      	bne.n	800419e <HAL_I2C_MspInit+0x222>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80040e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040f0:	4618      	mov	r0, r3
 80040f2:	f003 fe31 	bl	8007d58 <HAL_RCCEx_PeriphCLKConfig>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_I2C_MspInit+0x184>
      Error_Handler();
 80040fc:	f7ff fef4 	bl	8003ee8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004100:	4b5c      	ldr	r3, [pc, #368]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	4a5b      	ldr	r2, [pc, #364]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004106:	f043 0304 	orr.w	r3, r3, #4
 800410a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 800410e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004118:	4b56      	ldr	r3, [pc, #344]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 800411a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411c:	4a55      	ldr	r2, [pc, #340]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 800411e:	f043 0302 	orr.w	r3, r3, #2
 8004122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004130:	2301      	movs	r3, #1
 8004132:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004136:	2312      	movs	r3, #18
 8004138:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800413c:	2301      	movs	r3, #1
 800413e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004142:	2301      	movs	r3, #1
 8004144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004148:	2304      	movs	r3, #4
 800414a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800414e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004152:	4619      	mov	r1, r3
 8004154:	484c      	ldr	r0, [pc, #304]	; (8004288 <HAL_I2C_MspInit+0x30c>)
 8004156:	f002 f835 	bl	80061c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800415a:	2310      	movs	r3, #16
 800415c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004160:	2312      	movs	r3, #18
 8004162:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004166:	2301      	movs	r3, #1
 8004168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800416c:	2301      	movs	r3, #1
 800416e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004172:	2304      	movs	r3, #4
 8004174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004178:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800417c:	4619      	mov	r1, r3
 800417e:	483e      	ldr	r0, [pc, #248]	; (8004278 <HAL_I2C_MspInit+0x2fc>)
 8004180:	f002 f820 	bl	80061c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004184:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	4a3a      	ldr	r2, [pc, #232]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 800418a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800418e:	6593      	str	r3, [r2, #88]	; 0x58
 8004190:	4b38      	ldr	r3, [pc, #224]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	697b      	ldr	r3, [r7, #20]
}
 800419c:	e063      	b.n	8004266 <HAL_I2C_MspInit+0x2ea>
  else if(hi2c->Instance==I2C4)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3a      	ldr	r2, [pc, #232]	; (800428c <HAL_I2C_MspInit+0x310>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d15e      	bne.n	8004266 <HAL_I2C_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80041a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041b8:	4618      	mov	r0, r3
 80041ba:	f003 fdcd 	bl	8007d58 <HAL_RCCEx_PeriphCLKConfig>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_I2C_MspInit+0x24c>
      Error_Handler();
 80041c4:	f7ff fe90 	bl	8003ee8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041c8:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 80041ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041cc:	4a29      	ldr	r2, [pc, #164]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 80041ce:	f043 0320 	orr.w	r3, r3, #32
 80041d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 80041d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e0:	4b24      	ldr	r3, [pc, #144]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 80041e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e4:	4a23      	ldr	r2, [pc, #140]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 80041e6:	f043 0302 	orr.w	r3, r3, #2
 80041ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ec:	4b21      	ldr	r3, [pc, #132]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80041f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004200:	2312      	movs	r3, #18
 8004202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004206:	2301      	movs	r3, #1
 8004208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420c:	2303      	movs	r3, #3
 800420e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004212:	2304      	movs	r3, #4
 8004214:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004218:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800421c:	4619      	mov	r1, r3
 800421e:	4818      	ldr	r0, [pc, #96]	; (8004280 <HAL_I2C_MspInit+0x304>)
 8004220:	f001 ffd0 	bl	80061c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004224:	2340      	movs	r3, #64	; 0x40
 8004226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800422a:	2312      	movs	r3, #18
 800422c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004230:	2301      	movs	r3, #1
 8004232:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004236:	2303      	movs	r3, #3
 8004238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C4;
 800423c:	2305      	movs	r3, #5
 800423e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004242:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004246:	4619      	mov	r1, r3
 8004248:	480b      	ldr	r0, [pc, #44]	; (8004278 <HAL_I2C_MspInit+0x2fc>)
 800424a:	f001 ffbb 	bl	80061c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004252:	4a08      	ldr	r2, [pc, #32]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	65d3      	str	r3, [r2, #92]	; 0x5c
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_I2C_MspInit+0x2f8>)
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
}
 8004266:	bf00      	nop
 8004268:	37d8      	adds	r7, #216	; 0xd8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40005400 	.word	0x40005400
 8004274:	40021000 	.word	0x40021000
 8004278:	48000400 	.word	0x48000400
 800427c:	40005800 	.word	0x40005800
 8004280:	48001400 	.word	0x48001400
 8004284:	40005c00 	.word	0x40005c00
 8004288:	48000800 	.word	0x48000800
 800428c:	40008400 	.word	0x40008400

08004290 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08c      	sub	sp, #48	; 0x30
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	f107 031c 	add.w	r3, r7, #28
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6e      	ldr	r2, [pc, #440]	; (8004468 <HAL_SPI_MspInit+0x1d8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d15a      	bne.n	8004368 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042b2:	4b6e      	ldr	r3, [pc, #440]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 80042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b6:	4a6d      	ldr	r2, [pc, #436]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 80042b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042bc:	6613      	str	r3, [r2, #96]	; 0x60
 80042be:	4b6b      	ldr	r3, [pc, #428]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 80042c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ca:	4b68      	ldr	r3, [pc, #416]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	4a67      	ldr	r2, [pc, #412]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042d6:	4b65      	ldr	r3, [pc, #404]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|DISPL_MISO_Pin|DISPL_MOSI_Pin;
 80042e2:	23e0      	movs	r3, #224	; 0xe0
 80042e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e6:	2302      	movs	r3, #2
 80042e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ee:	2303      	movs	r3, #3
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042f2:	2305      	movs	r3, #5
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f6:	f107 031c 	add.w	r3, r7, #28
 80042fa:	4619      	mov	r1, r3
 80042fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004300:	f001 ff60 	bl	80061c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8004304:	4b5a      	ldr	r3, [pc, #360]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 8004306:	4a5b      	ldr	r2, [pc, #364]	; (8004474 <HAL_SPI_MspInit+0x1e4>)
 8004308:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800430a:	4b59      	ldr	r3, [pc, #356]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 800430c:	220b      	movs	r2, #11
 800430e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004310:	4b57      	ldr	r3, [pc, #348]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 8004312:	2210      	movs	r2, #16
 8004314:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 8004318:	2200      	movs	r2, #0
 800431a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800431c:	4b54      	ldr	r3, [pc, #336]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004322:	4b53      	ldr	r3, [pc, #332]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 8004324:	2200      	movs	r2, #0
 8004326:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004328:	4b51      	ldr	r3, [pc, #324]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 800432a:	2200      	movs	r2, #0
 800432c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800432e:	4b50      	ldr	r3, [pc, #320]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 8004330:	2200      	movs	r2, #0
 8004332:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004334:	4b4e      	ldr	r3, [pc, #312]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 8004336:	2200      	movs	r2, #0
 8004338:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800433a:	484d      	ldr	r0, [pc, #308]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 800433c:	f001 fc14 	bl	8005b68 <HAL_DMA_Init>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004346:	f7ff fdcf 	bl	8003ee8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a48      	ldr	r2, [pc, #288]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
 8004350:	4a47      	ldr	r2, [pc, #284]	; (8004470 <HAL_SPI_MspInit+0x1e0>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2103      	movs	r1, #3
 800435a:	2023      	movs	r0, #35	; 0x23
 800435c:	f001 fabf 	bl	80058de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004360:	2023      	movs	r0, #35	; 0x23
 8004362:	f001 fad8 	bl	8005916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004366:	e07a      	b.n	800445e <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a42      	ldr	r2, [pc, #264]	; (8004478 <HAL_SPI_MspInit+0x1e8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d175      	bne.n	800445e <HAL_SPI_MspInit+0x1ce>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004372:	4b3e      	ldr	r3, [pc, #248]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	4a3d      	ldr	r2, [pc, #244]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 8004378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800437c:	6593      	str	r3, [r2, #88]	; 0x58
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800438a:	4b38      	ldr	r3, [pc, #224]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	4a37      	ldr	r2, [pc, #220]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 8004390:	f043 0304 	orr.w	r3, r3, #4
 8004394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004396:	4b35      	ldr	r3, [pc, #212]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a2:	4b32      	ldr	r3, [pc, #200]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	4a31      	ldr	r2, [pc, #196]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043ae:	4b2f      	ldr	r3, [pc, #188]	; (800446c <HAL_SPI_MspInit+0x1dc>)
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|TOUCH_MOSI_Pin;
 80043ba:	230c      	movs	r3, #12
 80043bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043be:	2302      	movs	r3, #2
 80043c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c6:	2303      	movs	r3, #3
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043ca:	2305      	movs	r3, #5
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ce:	f107 031c 	add.w	r3, r7, #28
 80043d2:	4619      	mov	r1, r3
 80043d4:	4829      	ldr	r0, [pc, #164]	; (800447c <HAL_SPI_MspInit+0x1ec>)
 80043d6:	f001 fef5 	bl	80061c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOUCH_SCK_Pin;
 80043da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e0:	2302      	movs	r3, #2
 80043e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e8:	2303      	movs	r3, #3
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043ec:	2305      	movs	r3, #5
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOUCH_SCK_GPIO_Port, &GPIO_InitStruct);
 80043f0:	f107 031c 	add.w	r3, r7, #28
 80043f4:	4619      	mov	r1, r3
 80043f6:	4822      	ldr	r0, [pc, #136]	; (8004480 <HAL_SPI_MspInit+0x1f0>)
 80043f8:	f001 fee4 	bl	80061c4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 80043fc:	4b21      	ldr	r3, [pc, #132]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 80043fe:	4a22      	ldr	r2, [pc, #136]	; (8004488 <HAL_SPI_MspInit+0x1f8>)
 8004400:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 8004404:	220d      	movs	r2, #13
 8004406:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004408:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 800440a:	2210      	movs	r2, #16
 800440c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800440e:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 8004410:	2200      	movs	r2, #0
 8004412:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 800441c:	2200      	movs	r2, #0
 800441e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004420:	4b18      	ldr	r3, [pc, #96]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 8004422:	2200      	movs	r2, #0
 8004424:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004426:	4b17      	ldr	r3, [pc, #92]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 8004428:	2200      	movs	r2, #0
 800442a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 800442e:	2200      	movs	r2, #0
 8004430:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004432:	4814      	ldr	r0, [pc, #80]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 8004434:	f001 fb98 	bl	8005b68 <HAL_DMA_Init>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_SPI_MspInit+0x1b2>
      Error_Handler();
 800443e:	f7ff fd53 	bl	8003ee8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a0f      	ldr	r2, [pc, #60]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
 8004448:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <HAL_SPI_MspInit+0x1f4>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 800444e:	2200      	movs	r2, #0
 8004450:	2103      	movs	r1, #3
 8004452:	2024      	movs	r0, #36	; 0x24
 8004454:	f001 fa43 	bl	80058de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004458:	2024      	movs	r0, #36	; 0x24
 800445a:	f001 fa5c 	bl	8005916 <HAL_NVIC_EnableIRQ>
}
 800445e:	bf00      	nop
 8004460:	3730      	adds	r7, #48	; 0x30
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40013000 	.word	0x40013000
 800446c:	40021000 	.word	0x40021000
 8004470:	200005a8 	.word	0x200005a8
 8004474:	4002001c 	.word	0x4002001c
 8004478:	40003800 	.word	0x40003800
 800447c:	48000800 	.word	0x48000800
 8004480:	48000400 	.word	0x48000400
 8004484:	20000608 	.word	0x20000608
 8004488:	40020008 	.word	0x40020008

0800448c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	; 0x30
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004494:	f107 031c 	add.w	r3, r7, #28
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d114      	bne.n	80044d8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044ae:	4b31      	ldr	r3, [pc, #196]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	4a30      	ldr	r2, [pc, #192]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	6593      	str	r3, [r2, #88]	; 0x58
 80044ba:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80044c6:	2200      	movs	r2, #0
 80044c8:	2102      	movs	r1, #2
 80044ca:	201c      	movs	r0, #28
 80044cc:	f001 fa07 	bl	80058de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80044d0:	201c      	movs	r0, #28
 80044d2:	f001 fa20 	bl	8005916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80044d6:	e049      	b.n	800456c <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM4)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a26      	ldr	r2, [pc, #152]	; (8004578 <HAL_TIM_Base_MspInit+0xec>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d144      	bne.n	800456c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	4a23      	ldr	r2, [pc, #140]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6593      	str	r3, [r2, #88]	; 0x58
 80044ee:	4b21      	ldr	r3, [pc, #132]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 80044fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 8004500:	f043 0308 	orr.w	r3, r3, #8
 8004504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004512:	4b18      	ldr	r3, [pc, #96]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	4a17      	ldr	r2, [pc, #92]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 8004518:	f043 0310 	orr.w	r3, r3, #16
 800451c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <HAL_TIM_Base_MspInit+0xe8>)
 8004520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800452a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800452e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004530:	2302      	movs	r3, #2
 8004532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004538:	2300      	movs	r3, #0
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800453c:	2302      	movs	r3, #2
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004540:	f107 031c 	add.w	r3, r7, #28
 8004544:	4619      	mov	r1, r3
 8004546:	480d      	ldr	r0, [pc, #52]	; (800457c <HAL_TIM_Base_MspInit+0xf0>)
 8004548:	f001 fe3c 	bl	80061c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800454c:	2301      	movs	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004550:	2302      	movs	r3, #2
 8004552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	2300      	movs	r3, #0
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004558:	2300      	movs	r3, #0
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800455c:	2302      	movs	r3, #2
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	4619      	mov	r1, r3
 8004566:	4806      	ldr	r0, [pc, #24]	; (8004580 <HAL_TIM_Base_MspInit+0xf4>)
 8004568:	f001 fe2c 	bl	80061c4 <HAL_GPIO_Init>
}
 800456c:	bf00      	nop
 800456e:	3730      	adds	r7, #48	; 0x30
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	40000800 	.word	0x40000800
 800457c:	48000c00 	.word	0x48000c00
 8004580:	48001000 	.word	0x48001000

08004584 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800458c:	f107 0314 	add.w	r3, r7, #20
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a20      	ldr	r2, [pc, #128]	; (8004624 <HAL_TIM_PWM_MspInit+0xa0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d128      	bne.n	80045f8 <HAL_TIM_PWM_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045a6:	4b20      	ldr	r3, [pc, #128]	; (8004628 <HAL_TIM_PWM_MspInit+0xa4>)
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	4a1f      	ldr	r2, [pc, #124]	; (8004628 <HAL_TIM_PWM_MspInit+0xa4>)
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	6593      	str	r3, [r2, #88]	; 0x58
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <HAL_TIM_PWM_MspInit+0xa4>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045be:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_TIM_PWM_MspInit+0xa4>)
 80045c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c2:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_TIM_PWM_MspInit+0xa4>)
 80045c4:	f043 0302 	orr.w	r3, r3, #2
 80045c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ca:	4b17      	ldr	r3, [pc, #92]	; (8004628 <HAL_TIM_PWM_MspInit+0xa4>)
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045d6:	2301      	movs	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e2:	2300      	movs	r3, #0
 80045e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045e6:	2302      	movs	r3, #2
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ea:	f107 0314 	add.w	r3, r7, #20
 80045ee:	4619      	mov	r1, r3
 80045f0:	480e      	ldr	r0, [pc, #56]	; (800462c <HAL_TIM_PWM_MspInit+0xa8>)
 80045f2:	f001 fde7 	bl	80061c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80045f6:	e010      	b.n	800461a <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM5)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <HAL_TIM_PWM_MspInit+0xac>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10b      	bne.n	800461a <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_TIM_PWM_MspInit+0xa4>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	4a08      	ldr	r2, [pc, #32]	; (8004628 <HAL_TIM_PWM_MspInit+0xa4>)
 8004608:	f043 0308 	orr.w	r3, r3, #8
 800460c:	6593      	str	r3, [r2, #88]	; 0x58
 800460e:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_TIM_PWM_MspInit+0xa4>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
}
 800461a:	bf00      	nop
 800461c:	3728      	adds	r7, #40	; 0x28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40000400 	.word	0x40000400
 8004628:	40021000 	.word	0x40021000
 800462c:	48000400 	.word	0x48000400
 8004630:	40000c00 	.word	0x40000c00

08004634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <HAL_TIM_MspPostInit+0xa8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d11c      	bne.n	8004690 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <HAL_TIM_MspPostInit+0xac>)
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <HAL_TIM_MspPostInit+0xac>)
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004662:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <HAL_TIM_MspPostInit+0xac>)
 8004664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DISPL_LED_Pin;
 800466e:	2320      	movs	r3, #32
 8004670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004672:	2302      	movs	r3, #2
 8004674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800467e:	2302      	movs	r3, #2
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_LED_GPIO_Port, &GPIO_InitStruct);
 8004682:	f107 0314 	add.w	r3, r7, #20
 8004686:	4619      	mov	r1, r3
 8004688:	4816      	ldr	r0, [pc, #88]	; (80046e4 <HAL_TIM_MspPostInit+0xb0>)
 800468a:	f001 fd9b 	bl	80061c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800468e:	e021      	b.n	80046d4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <HAL_TIM_MspPostInit+0xb4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d11c      	bne.n	80046d4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800469a:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <HAL_TIM_MspPostInit+0xac>)
 800469c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469e:	4a10      	ldr	r2, [pc, #64]	; (80046e0 <HAL_TIM_MspPostInit+0xac>)
 80046a0:	f043 0320 	orr.w	r3, r3, #32
 80046a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <HAL_TIM_MspPostInit+0xac>)
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b8:	2302      	movs	r3, #2
 80046ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c0:	2300      	movs	r3, #0
 80046c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80046c4:	2302      	movs	r3, #2
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	4619      	mov	r1, r3
 80046ce:	4807      	ldr	r0, [pc, #28]	; (80046ec <HAL_TIM_MspPostInit+0xb8>)
 80046d0:	f001 fd78 	bl	80061c4 <HAL_GPIO_Init>
}
 80046d4:	bf00      	nop
 80046d6:	3728      	adds	r7, #40	; 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40021000 	.word	0x40021000
 80046e4:	48000400 	.word	0x48000400
 80046e8:	40000c00 	.word	0x40000c00
 80046ec:	48001400 	.word	0x48001400

080046f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b0b0      	sub	sp, #192	; 0xc0
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	60da      	str	r2, [r3, #12]
 8004706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004708:	f107 0318 	add.w	r3, r7, #24
 800470c:	2294      	movs	r2, #148	; 0x94
 800470e:	2100      	movs	r1, #0
 8004710:	4618      	mov	r0, r3
 8004712:	f022 f88a 	bl	802682a <memset>
  if(huart->Instance==USART2)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a4a      	ldr	r2, [pc, #296]	; (8004844 <HAL_UART_MspInit+0x154>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d143      	bne.n	80047a8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004720:	2302      	movs	r3, #2
 8004722:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004724:	2300      	movs	r3, #0
 8004726:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004728:	f107 0318 	add.w	r3, r7, #24
 800472c:	4618      	mov	r0, r3
 800472e:	f003 fb13 	bl	8007d58 <HAL_RCCEx_PeriphCLKConfig>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004738:	f7ff fbd6 	bl	8003ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800473c:	4b42      	ldr	r3, [pc, #264]	; (8004848 <HAL_UART_MspInit+0x158>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	4a41      	ldr	r2, [pc, #260]	; (8004848 <HAL_UART_MspInit+0x158>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004746:	6593      	str	r3, [r2, #88]	; 0x58
 8004748:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <HAL_UART_MspInit+0x158>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004754:	4b3c      	ldr	r3, [pc, #240]	; (8004848 <HAL_UART_MspInit+0x158>)
 8004756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004758:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <HAL_UART_MspInit+0x158>)
 800475a:	f043 0308 	orr.w	r3, r3, #8
 800475e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004760:	4b39      	ldr	r3, [pc, #228]	; (8004848 <HAL_UART_MspInit+0x158>)
 8004762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800476c:	2360      	movs	r3, #96	; 0x60
 800476e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004772:	2302      	movs	r3, #2
 8004774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477e:	2303      	movs	r3, #3
 8004780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004784:	2307      	movs	r3, #7
 8004786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800478a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800478e:	4619      	mov	r1, r3
 8004790:	482e      	ldr	r0, [pc, #184]	; (800484c <HAL_UART_MspInit+0x15c>)
 8004792:	f001 fd17 	bl	80061c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	2100      	movs	r1, #0
 800479a:	2026      	movs	r0, #38	; 0x26
 800479c:	f001 f89f 	bl	80058de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047a0:	2026      	movs	r0, #38	; 0x26
 80047a2:	f001 f8b8 	bl	8005916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80047a6:	e048      	b.n	800483a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a28      	ldr	r2, [pc, #160]	; (8004850 <HAL_UART_MspInit+0x160>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d143      	bne.n	800483a <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80047b2:	2304      	movs	r3, #4
 80047b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80047b6:	2300      	movs	r3, #0
 80047b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047ba:	f107 0318 	add.w	r3, r7, #24
 80047be:	4618      	mov	r0, r3
 80047c0:	f003 faca 	bl	8007d58 <HAL_RCCEx_PeriphCLKConfig>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_UART_MspInit+0xde>
      Error_Handler();
 80047ca:	f7ff fb8d 	bl	8003ee8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80047ce:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <HAL_UART_MspInit+0x158>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <HAL_UART_MspInit+0x158>)
 80047d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d8:	6593      	str	r3, [r2, #88]	; 0x58
 80047da:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <HAL_UART_MspInit+0x158>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047e6:	4b18      	ldr	r3, [pc, #96]	; (8004848 <HAL_UART_MspInit+0x158>)
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	4a17      	ldr	r2, [pc, #92]	; (8004848 <HAL_UART_MspInit+0x158>)
 80047ec:	f043 0308 	orr.w	r3, r3, #8
 80047f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <HAL_UART_MspInit+0x158>)
 80047f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004802:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004806:	2302      	movs	r3, #2
 8004808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004812:	2303      	movs	r3, #3
 8004814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004818:	2307      	movs	r3, #7
 800481a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800481e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004822:	4619      	mov	r1, r3
 8004824:	4809      	ldr	r0, [pc, #36]	; (800484c <HAL_UART_MspInit+0x15c>)
 8004826:	f001 fccd 	bl	80061c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	2100      	movs	r1, #0
 800482e:	2027      	movs	r0, #39	; 0x27
 8004830:	f001 f855 	bl	80058de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004834:	2027      	movs	r0, #39	; 0x27
 8004836:	f001 f86e 	bl	8005916 <HAL_NVIC_EnableIRQ>
}
 800483a:	bf00      	nop
 800483c:	37c0      	adds	r7, #192	; 0xc0
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40004400 	.word	0x40004400
 8004848:	40021000 	.word	0x40021000
 800484c:	48000c00 	.word	0x48000c00
 8004850:	40004800 	.word	0x40004800

08004854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004858:	e7fe      	b.n	8004858 <NMI_Handler+0x4>

0800485a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800485a:	b480      	push	{r7}
 800485c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800485e:	e7fe      	b.n	800485e <HardFault_Handler+0x4>

08004860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004864:	e7fe      	b.n	8004864 <MemManage_Handler+0x4>

08004866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004866:	b480      	push	{r7}
 8004868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800486a:	e7fe      	b.n	800486a <BusFault_Handler+0x4>

0800486c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004870:	e7fe      	b.n	8004870 <UsageFault_Handler+0x4>

08004872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004872:	b480      	push	{r7}
 8004874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800488e:	b480      	push	{r7}
 8004890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a0:	f000 febc 	bl	800561c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 80048ac:	2002      	movs	r0, #2
 80048ae:	f001 fe33 	bl	8006518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80048bc:	4802      	ldr	r0, [pc, #8]	; (80048c8 <DMA1_Channel1_IRQHandler+0x10>)
 80048be:	f001 fb31 	bl	8005f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000608 	.word	0x20000608

080048cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80048d0:	4802      	ldr	r0, [pc, #8]	; (80048dc <DMA1_Channel2_IRQHandler+0x10>)
 80048d2:	f001 fb27 	bl	8005f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200005a8 	.word	0x200005a8

080048e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048e4:	4802      	ldr	r0, [pc, #8]	; (80048f0 <TIM2_IRQHandler+0x10>)
 80048e6:	f005 fb55 	bl	8009f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000668 	.word	0x20000668

080048f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80048f8:	4802      	ldr	r0, [pc, #8]	; (8004904 <SPI1_IRQHandler+0x10>)
 80048fa:	f004 fda7 	bl	800944c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200004e0 	.word	0x200004e0

08004908 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800490c:	4802      	ldr	r0, [pc, #8]	; (8004918 <SPI2_IRQHandler+0x10>)
 800490e:	f004 fd9d 	bl	800944c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004912:	bf00      	nop
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000544 	.word	0x20000544

0800491c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004920:	4802      	ldr	r0, [pc, #8]	; (800492c <USART2_IRQHandler+0x10>)
 8004922:	f006 fc45 	bl	800b1b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000798 	.word	0x20000798

08004930 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004934:	4802      	ldr	r0, [pc, #8]	; (8004940 <USART3_IRQHandler+0x10>)
 8004936:	f006 fc3b 	bl	800b1b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800493a:	bf00      	nop
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	2000082c 	.word	0x2000082c

08004944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return 1;
 8004948:	2301      	movs	r3, #1
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <_kill>:

int _kill(int pid, int sig)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800495e:	f022 f807 	bl	8026970 <__errno>
 8004962:	4603      	mov	r3, r0
 8004964:	2216      	movs	r2, #22
 8004966:	601a      	str	r2, [r3, #0]
  return -1;
 8004968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_exit>:

void _exit (int status)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800497c:	f04f 31ff 	mov.w	r1, #4294967295
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff ffe7 	bl	8004954 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004986:	e7fe      	b.n	8004986 <_exit+0x12>

08004988 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	e00a      	b.n	80049b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800499a:	f3af 8000 	nop.w
 800499e:	4601      	mov	r1, r0
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	60ba      	str	r2, [r7, #8]
 80049a6:	b2ca      	uxtb	r2, r1
 80049a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	3301      	adds	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	dbf0      	blt.n	800499a <_read+0x12>
  }

  return len;
 80049b8:	687b      	ldr	r3, [r7, #4]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	e009      	b.n	80049e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	60ba      	str	r2, [r7, #8]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	3301      	adds	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	dbf1      	blt.n	80049d4 <_write+0x12>
  }
  return len;
 80049f0:	687b      	ldr	r3, [r7, #4]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <_close>:

int _close(int file)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a22:	605a      	str	r2, [r3, #4]
  return 0;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <_isatty>:

int _isatty(int file)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a3a:	2301      	movs	r3, #1
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a6c:	4a14      	ldr	r2, [pc, #80]	; (8004ac0 <_sbrk+0x5c>)
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <_sbrk+0x60>)
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a78:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <_sbrk+0x64>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <_sbrk+0x64>)
 8004a82:	4a12      	ldr	r2, [pc, #72]	; (8004acc <_sbrk+0x68>)
 8004a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <_sbrk+0x64>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d207      	bcs.n	8004aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a94:	f021 ff6c 	bl	8026970 <__errno>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	220c      	movs	r2, #12
 8004a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	e009      	b.n	8004ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <_sbrk+0x64>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <_sbrk+0x64>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <_sbrk+0x64>)
 8004ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200a0000 	.word	0x200a0000
 8004ac4:	00000400 	.word	0x00000400
 8004ac8:	20023bcc 	.word	0x20023bcc
 8004acc:	20026460 	.word	0x20026460

08004ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <SystemInit+0x20>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	4a05      	ldr	r2, [pc, #20]	; (8004af0 <SystemInit+0x20>)
 8004adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
		}
	}
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6039      	str	r1, [r7, #0]
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4603      	mov	r3, r0
 8004b12:	71fb      	strb	r3, [r7, #7]
 8004b14:	460b      	mov	r3, r1
 8004b16:	80bb      	strh	r3, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004b1c:	bf00      	nop
 8004b1e:	4b25      	ldr	r3, [pc, #148]	; (8004bb4 <Displ_Transmit+0xb0>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0fa      	beq.n	8004b1e <Displ_Transmit+0x1a>

	Displ_Select();
 8004b28:	f7ff ffe4 	bl	8004af4 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b34:	4820      	ldr	r0, [pc, #128]	; (8004bb8 <Displ_Transmit+0xb4>)
 8004b36:	f001 fcd7 	bl	80064e8 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8004b3a:	79bb      	ldrb	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d016      	beq.n	8004b6e <Displ_Transmit+0x6a>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8004b40:	88bb      	ldrh	r3, [r7, #4]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e00b      	b.n	8004b66 <Displ_Transmit+0x62>
			*data32=__REV16(*data32);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	ba5b      	rev16	r3, r3
 8004b58:	60bb      	str	r3, [r7, #8]
  return result;
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3304      	adds	r3, #4
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d3ef      	bcc.n	8004b4e <Displ_Transmit+0x4a>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8004b6e:	88bb      	ldrh	r3, [r7, #4]
 8004b70:	2b13      	cmp	r3, #19
 8004b72:	d812      	bhi.n	8004b9a <Displ_Transmit+0x96>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <Displ_Transmit+0xb0>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004b7a:	88ba      	ldrh	r2, [r7, #4]
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	480e      	ldr	r0, [pc, #56]	; (8004bbc <Displ_Transmit+0xb8>)
 8004b84:	f003 fea3 	bl	80088ce <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <Displ_Transmit+0xb0>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
#ifdef DISPLAY_USING_TOUCHGFX
			if (isTouchGFXBuffer){
 8004b8e:	79bb      	ldrb	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <Displ_Transmit+0xa8>
				DisplayDriver_TransferCompleteCallback();
 8004b94:	f00c ffb0 	bl	8011af8 <DisplayDriver_TransferCompleteCallback>
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8004b98:	e008      	b.n	8004bac <Displ_Transmit+0xa8>
			Displ_SpiAvailable=0;
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <Displ_Transmit+0xb0>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004ba0:	88bb      	ldrh	r3, [r7, #4]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6839      	ldr	r1, [r7, #0]
 8004ba6:	4805      	ldr	r0, [pc, #20]	; (8004bbc <Displ_Transmit+0xb8>)
 8004ba8:	f004 fb60 	bl	800926c <HAL_SPI_Transmit_DMA>
	}
 8004bac:	bf00      	nop
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000258 	.word	0x20000258
 8004bb8:	48001400 	.word	0x48001400
 8004bbc:	200004e0 	.word	0x200004e0

08004bc0 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8004bca:	1df9      	adds	r1, r7, #7
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2201      	movs	r2, #1
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f7ff ff97 	bl	8004b04 <Displ_Transmit>
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	68f9      	ldr	r1, [r7, #12]
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	f7ff ff82 	bl	8004b04 <Displ_Transmit>
 8004c00:	e000      	b.n	8004c04 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8004c02:	bf00      	nop
}
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
	Displ_Select();
 8004c10:	f7ff ff70 	bl	8004af4 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004c14:	2200      	movs	r2, #0
 8004c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c1a:	481a      	ldr	r0, [pc, #104]	; (8004c84 <ILI9XXX_Init+0x78>)
 8004c1c:	f001 fc64 	bl	80064e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004c20:	2001      	movs	r0, #1
 8004c22:	f000 fd1b 	bl	800565c <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004c26:	2201      	movs	r2, #1
 8004c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c2c:	4815      	ldr	r0, [pc, #84]	; (8004c84 <ILI9XXX_Init+0x78>)
 8004c2e:	f001 fc5b 	bl	80064e8 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8004c32:	2096      	movs	r0, #150	; 0x96
 8004c34:	f000 fd12 	bl	800565c <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004c38:	203a      	movs	r0, #58	; 0x3a
 8004c3a:	f7ff ffc1 	bl	8004bc0 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2101      	movs	r1, #1
 8004c42:	4811      	ldr	r0, [pc, #68]	; (8004c88 <ILI9XXX_Init+0x7c>)
 8004c44:	f7ff ffcb 	bl	8004bde <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004c48:	20b0      	movs	r0, #176	; 0xb0
 8004c4a:	f7ff ffb9 	bl	8004bc0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2101      	movs	r1, #1
 8004c52:	480e      	ldr	r0, [pc, #56]	; (8004c8c <ILI9XXX_Init+0x80>)
 8004c54:	f7ff ffc3 	bl	8004bde <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004c58:	20b0      	movs	r0, #176	; 0xb0
 8004c5a:	f7ff ffb1 	bl	8004bc0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2101      	movs	r1, #1
 8004c62:	480a      	ldr	r0, [pc, #40]	; (8004c8c <ILI9XXX_Init+0x80>)
 8004c64:	f7ff ffbb 	bl	8004bde <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004c68:	2011      	movs	r0, #17
 8004c6a:	f7ff ffa9 	bl	8004bc0 <Displ_WriteCommand>
	HAL_Delay(120);
 8004c6e:	2078      	movs	r0, #120	; 0x78
 8004c70:	f000 fcf4 	bl	800565c <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004c74:	2029      	movs	r0, #41	; 0x29
 8004c76:	f7ff ffa3 	bl	8004bc0 <Displ_WriteCommand>
	HAL_Delay(5);
 8004c7a:	2005      	movs	r0, #5
 8004c7c:	f000 fcee 	bl	800565c <HAL_Delay>

}
 8004c80:	bf00      	nop
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	48001400 	.word	0x48001400
 8004c88:	08027490 	.word	0x08027490
 8004c8c:	08027494 	.word	0x08027494

08004c90 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	80fb      	strh	r3, [r7, #6]
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	80bb      	strh	r3, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	807b      	strh	r3, [r7, #2]
 8004caa:	4613      	mov	r3, r2
 8004cac:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004cae:	887b      	ldrh	r3, [r7, #2]
 8004cb0:	061a      	lsls	r2, r3, #24
 8004cb2:	887b      	ldrh	r3, [r7, #2]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	88fb      	ldrh	r3, [r7, #6]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	88fa      	ldrh	r2, [r7, #6]
 8004cc6:	0a12      	lsrs	r2, r2, #8
 8004cc8:	b292      	uxth	r2, r2
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <Displ_SetAddressWindow+0x90>)
 8004cce:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004cd0:	202a      	movs	r0, #42	; 0x2a
 8004cd2:	f7ff ff75 	bl	8004bc0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2104      	movs	r1, #4
 8004cda:	4811      	ldr	r0, [pc, #68]	; (8004d20 <Displ_SetAddressWindow+0x90>)
 8004cdc:	f7ff ff7f 	bl	8004bde <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004ce0:	883b      	ldrh	r3, [r7, #0]
 8004ce2:	061a      	lsls	r2, r3, #24
 8004ce4:	883b      	ldrh	r3, [r7, #0]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cec:	431a      	orrs	r2, r3
 8004cee:	88bb      	ldrh	r3, [r7, #4]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	88ba      	ldrh	r2, [r7, #4]
 8004cf8:	0a12      	lsrs	r2, r2, #8
 8004cfa:	b292      	uxth	r2, r2
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <Displ_SetAddressWindow+0x90>)
 8004d00:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004d02:	202b      	movs	r0, #43	; 0x2b
 8004d04:	f7ff ff5c 	bl	8004bc0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2104      	movs	r1, #4
 8004d0c:	4804      	ldr	r0, [pc, #16]	; (8004d20 <Displ_SetAddressWindow+0x90>)
 8004d0e:	f7ff ff66 	bl	8004bde <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8004d12:	202c      	movs	r0, #44	; 0x2c
 8004d14:	f7ff ff54 	bl	8004bc0 <Displ_WriteCommand>
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd90      	pop	{r4, r7, pc}
 8004d20:	20023bd8 	.word	0x20023bd8

08004d24 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
	} else {																	// otherwise leave both port permanently selected
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d34:	4816      	ldr	r0, [pc, #88]	; (8004d90 <Displ_Init+0x6c>)
 8004d36:	f001 fbd7 	bl	80064e8 <HAL_GPIO_WritePin>
		SET_DISPL_SPI_BAUDRATE;
 8004d3a:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <Displ_Init+0x70>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4915      	ldr	r1, [pc, #84]	; (8004d94 <Displ_Init+0x70>)
 8004d40:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004d44:	4013      	ands	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]
 8004d48:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <Displ_Init+0x70>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a11      	ldr	r2, [pc, #68]	; (8004d94 <Displ_Init+0x70>)
 8004d4e:	f043 0308 	orr.w	r3, r3, #8
 8004d52:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
 8004d54:	2200      	movs	r2, #0
 8004d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d5a:	480f      	ldr	r0, [pc, #60]	; (8004d98 <Displ_Init+0x74>)
 8004d5c:	f001 fbc4 	bl	80064e8 <HAL_GPIO_WritePin>
		SET_TOUCH_SPI_BAUDRATE;
 8004d60:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <Displ_Init+0x78>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	490d      	ldr	r1, [pc, #52]	; (8004d9c <Displ_Init+0x78>)
 8004d66:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <Displ_Init+0x78>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <Displ_Init+0x78>)
 8004d74:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004d78:	6013      	str	r3, [r2, #0]
	}
	ILI9XXX_Init();
 8004d7a:	f7ff ff47 	bl	8004c0c <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f80d 	bl	8004da0 <Displ_Orientation>
}
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	48001400 	.word	0x48001400
 8004d94:	40013000 	.word	0x40013000
 8004d98:	48001000 	.word	0x48001000
 8004d9c:	40003800 	.word	0x40003800

08004da0 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d837      	bhi.n	8004e20 <Displ_Orientation+0x80>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <Displ_Orientation+0x18>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004dc9 	.word	0x08004dc9
 8004dbc:	08004ddf 	.word	0x08004ddf
 8004dc0:	08004df5 	.word	0x08004df5
 8004dc4:	08004e0b 	.word	0x08004e0b
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <Displ_Orientation+0xa0>)
 8004dca:	2288      	movs	r2, #136	; 0x88
 8004dcc:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8004dce:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <Displ_Orientation+0xa4>)
 8004dd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004dd4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <Displ_Orientation+0xa8>)
 8004dd8:	22f0      	movs	r2, #240	; 0xf0
 8004dda:	801a      	strh	r2, [r3, #0]
			break;
 8004ddc:	e020      	b.n	8004e20 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8004dde:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <Displ_Orientation+0xa0>)
 8004de0:	22e8      	movs	r2, #232	; 0xe8
 8004de2:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <Displ_Orientation+0xa4>)
 8004de6:	22f0      	movs	r2, #240	; 0xf0
 8004de8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <Displ_Orientation+0xa8>)
 8004dec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004df0:	801a      	strh	r2, [r3, #0]
			break;
 8004df2:	e015      	b.n	8004e20 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8004df4:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <Displ_Orientation+0xa0>)
 8004df6:	2248      	movs	r2, #72	; 0x48
 8004df8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <Displ_Orientation+0xa4>)
 8004dfc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e00:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8004e02:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <Displ_Orientation+0xa8>)
 8004e04:	22f0      	movs	r2, #240	; 0xf0
 8004e06:	801a      	strh	r2, [r3, #0]
			break;
 8004e08:	e00a      	b.n	8004e20 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <Displ_Orientation+0xa0>)
 8004e0c:	2228      	movs	r2, #40	; 0x28
 8004e0e:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <Displ_Orientation+0xa4>)
 8004e12:	22f0      	movs	r2, #240	; 0xf0
 8004e14:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <Displ_Orientation+0xa8>)
 8004e18:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e1c:	801a      	strh	r2, [r3, #0]
			break;
 8004e1e:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8004e20:	2036      	movs	r0, #54	; 0x36
 8004e22:	f7ff fecd 	bl	8004bc0 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8004e26:	2200      	movs	r2, #0
 8004e28:	2101      	movs	r1, #1
 8004e2a:	4805      	ldr	r0, [pc, #20]	; (8004e40 <Displ_Orientation+0xa0>)
 8004e2c:	f7ff fed7 	bl	8004bde <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004e30:	4a06      	ldr	r2, [pc, #24]	; (8004e4c <Displ_Orientation+0xac>)
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	7013      	strb	r3, [r2, #0]
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20023bdc 	.word	0x20023bdc
 8004e44:	20023bd4 	.word	0x20023bd4
 8004e48:	20023bd2 	.word	0x20023bd2
 8004e4c:	20023bd0 	.word	0x20023bd0

08004e50 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a05      	ldr	r2, [pc, #20]	; (8004e74 <HAL_SPI_ErrorCallback+0x24>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d102      	bne.n	8004e68 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_SPI_ErrorCallback+0x28>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
	}
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	40013000 	.word	0x40013000
 8004e78:	20000258 	.word	0x20000258

08004e7c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <HAL_SPI_TxCpltCallback+0x24>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d104      	bne.n	8004e98 <HAL_SPI_TxCpltCallback+0x1c>
		Displ_SpiAvailable=1;
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_SPI_TxCpltCallback+0x28>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	701a      	strb	r2, [r3, #0]

	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
 8004e94:	f00c fe30 	bl	8011af8 <DisplayDriver_TransferCompleteCallback>
	#endif

	}
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40013000 	.word	0x40013000
 8004ea4:	20000258 	.word	0x20000258

08004ea8 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	3b2b      	subs	r3, #43	; 0x2b
 8004eb6:	2b2c      	cmp	r3, #44	; 0x2c
 8004eb8:	f200 80a0 	bhi.w	8004ffc <Displ_BackLight+0x154>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <Displ_BackLight+0x1c>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004fb3 	.word	0x08004fb3
 8004ec8:	08004ffd 	.word	0x08004ffd
 8004ecc:	08004fd3 	.word	0x08004fd3
 8004ed0:	08004ffd 	.word	0x08004ffd
 8004ed4:	08004ffd 	.word	0x08004ffd
 8004ed8:	08004f87 	.word	0x08004f87
 8004edc:	08004f7d 	.word	0x08004f7d
 8004ee0:	08004ffd 	.word	0x08004ffd
 8004ee4:	08004ffd 	.word	0x08004ffd
 8004ee8:	08004ffd 	.word	0x08004ffd
 8004eec:	08004ffd 	.word	0x08004ffd
 8004ef0:	08004ffd 	.word	0x08004ffd
 8004ef4:	08004ffd 	.word	0x08004ffd
 8004ef8:	08004ffd 	.word	0x08004ffd
 8004efc:	08004ffd 	.word	0x08004ffd
 8004f00:	08004ffd 	.word	0x08004ffd
 8004f04:	08004ffd 	.word	0x08004ffd
 8004f08:	08004ffd 	.word	0x08004ffd
 8004f0c:	08004ffd 	.word	0x08004ffd
 8004f10:	08004ffd 	.word	0x08004ffd
 8004f14:	08004ffd 	.word	0x08004ffd
 8004f18:	08004ffd 	.word	0x08004ffd
 8004f1c:	08004ffd 	.word	0x08004ffd
 8004f20:	08004ffd 	.word	0x08004ffd
 8004f24:	08004ffd 	.word	0x08004ffd
 8004f28:	08004ffd 	.word	0x08004ffd
 8004f2c:	08004ffd 	.word	0x08004ffd
 8004f30:	08004f7d 	.word	0x08004f7d
 8004f34:	08004ffd 	.word	0x08004ffd
 8004f38:	08004ffd 	.word	0x08004ffd
 8004f3c:	08004fed 	.word	0x08004fed
 8004f40:	08004ffd 	.word	0x08004ffd
 8004f44:	08004ffd 	.word	0x08004ffd
 8004f48:	08004ffd 	.word	0x08004ffd
 8004f4c:	08004ffd 	.word	0x08004ffd
 8004f50:	08004ffd 	.word	0x08004ffd
 8004f54:	08004ffd 	.word	0x08004ffd
 8004f58:	08004ffd 	.word	0x08004ffd
 8004f5c:	08004f79 	.word	0x08004f79
 8004f60:	08004ffd 	.word	0x08004ffd
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004ffd 	.word	0x08004ffd
 8004f6c:	08004ffd 	.word	0x08004ffd
 8004f70:	08004ffd 	.word	0x08004ffd
 8004f74:	08004f8f 	.word	0x08004f8f
	case 'Q':
		__NOP();
 8004f78:	bf00      	nop
		break;
 8004f7a:	e042      	b.n	8005002 <Displ_BackLight+0x15a>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
		break;
#else
	case 'F':
	case '1':
		BKLIT_TIMER->BKLIT_CCR=BKLIT_TIMER->ARR;
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <Displ_BackLight+0x168>)
 8004f7e:	4a24      	ldr	r2, [pc, #144]	; (8005010 <Displ_BackLight+0x168>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8004f84:	e03d      	b.n	8005002 <Displ_BackLight+0x15a>
	case '0':
		BKLIT_TIMER->BKLIT_CCR=0;
 8004f86:	4b22      	ldr	r3, [pc, #136]	; (8005010 <Displ_BackLight+0x168>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8004f8c:	e039      	b.n	8005002 <Displ_BackLight+0x15a>
	case 'W':
		BKLIT_TIMER->BKLIT_CCR=memCCR1;					//restore previous level
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <Displ_BackLight+0x16c>)
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	4b1f      	ldr	r3, [pc, #124]	; (8005010 <Displ_BackLight+0x168>)
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8004f96:	e034      	b.n	8005002 <Displ_BackLight+0x15a>
	case 'S':
		memCCR1=BKLIT_TIMER->BKLIT_CCR;
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <Displ_BackLight+0x168>)
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <Displ_BackLight+0x16c>)
 8004fa0:	801a      	strh	r2, [r3, #0]
		if (BKLIT_TIMER->BKLIT_CCR>=(BKLIT_STBY_LEVEL))	//set stby level only if current level is higher
 8004fa2:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <Displ_BackLight+0x168>)
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	2b31      	cmp	r3, #49	; 0x31
 8004fa8:	d92a      	bls.n	8005000 <Displ_BackLight+0x158>
			BKLIT_TIMER->BKLIT_CCR=(BKLIT_STBY_LEVEL);
 8004faa:	4b19      	ldr	r3, [pc, #100]	; (8005010 <Displ_BackLight+0x168>)
 8004fac:	2232      	movs	r2, #50	; 0x32
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8004fb0:	e026      	b.n	8005000 <Displ_BackLight+0x158>
	case '+':
		if (BKLIT_TIMER->ARR>BKLIT_TIMER->BKLIT_CCR)		// if CCR1 has not yet the highest value (ARR)
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <Displ_BackLight+0x168>)
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	4b16      	ldr	r3, [pc, #88]	; (8005010 <Displ_BackLight+0x168>)
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d904      	bls.n	8004fc8 <Displ_BackLight+0x120>
			++BKLIT_TIMER->BKLIT_CCR;
 8004fbe:	4b14      	ldr	r3, [pc, #80]	; (8005010 <Displ_BackLight+0x168>)
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc2:	3201      	adds	r2, #1
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
		else
			BKLIT_TIMER->BKLIT_CCR=BKLIT_TIMER->ARR;
		break;
 8004fc6:	e01c      	b.n	8005002 <Displ_BackLight+0x15a>
			BKLIT_TIMER->BKLIT_CCR=BKLIT_TIMER->ARR;
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <Displ_BackLight+0x168>)
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <Displ_BackLight+0x168>)
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8004fd0:	e017      	b.n	8005002 <Displ_BackLight+0x15a>
	case '-':
		if (BKLIT_TIMER->BKLIT_CCR>0)					// if CCR1 has not yet the lowest value (0)
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <Displ_BackLight+0x168>)
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <Displ_BackLight+0x13c>
			--BKLIT_TIMER->BKLIT_CCR;
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <Displ_BackLight+0x168>)
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
		else
			BKLIT_TIMER->BKLIT_CCR=0;
		break;
 8004fe2:	e00e      	b.n	8005002 <Displ_BackLight+0x15a>
			BKLIT_TIMER->BKLIT_CCR=0;
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <Displ_BackLight+0x168>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8004fea:	e00a      	b.n	8005002 <Displ_BackLight+0x15a>
	case 'I':
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
 8004fec:	2104      	movs	r1, #4
 8004fee:	480a      	ldr	r0, [pc, #40]	; (8005018 <Displ_BackLight+0x170>)
 8004ff0:	f004 feca 	bl	8009d88 <HAL_TIM_PWM_Start>
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <Displ_BackLight+0x168>)
 8004ff6:	2264      	movs	r2, #100	; 0x64
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8004ffa:	e002      	b.n	8005002 <Displ_BackLight+0x15a>
#endif
	default:
		break;
 8004ffc:	bf00      	nop
 8004ffe:	e000      	b.n	8005002 <Displ_BackLight+0x15a>
		break;
 8005000:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
#else
	return (BKLIT_TIMER->BKLIT_CCR);
 8005002:	4b03      	ldr	r3, [pc, #12]	; (8005010 <Displ_BackLight+0x168>)
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
#endif
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40000400 	.word	0x40000400
 8005014:	20023bde 	.word	0x20023bde
 8005018:	200006b4 	.word	0x200006b4

0800501c <touchgfxDisplayDriverTransmitActive>:
 * @brief	TouchGFX integration: returns status of
 * 			communication to the display
 * @return	1 = there is a transmission running
 * 			0 = no transmission
 *********************************************************/
int touchgfxDisplayDriverTransmitActive(){
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
	// using the flag indicating SPI port availability
	// already used to drive communication via DMA
	return (!Displ_SpiAvailable);
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <touchgfxDisplayDriverTransmitActive+0x20>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
}
 8005030:	4618      	mov	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	20000258 	.word	0x20000258

08005040 <touchgfxDisplayDriverTransmitBlock>:

/*********************************************************
 * @brief	TouchGFX integration: write to display the
 * 			block indicated by parameters
 *********************************************************/
void touchgfxDisplayDriverTransmitBlock(const uint8_t* pixels, uint16_t x, uint16_t y, uint16_t w, uint16_t h){
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	4608      	mov	r0, r1
 800504a:	4611      	mov	r1, r2
 800504c:	461a      	mov	r2, r3
 800504e:	4603      	mov	r3, r0
 8005050:	817b      	strh	r3, [r7, #10]
 8005052:	460b      	mov	r3, r1
 8005054:	813b      	strh	r3, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
	//START WRITING TO DISPLAY
		Displ_SetAddressWindow(x, y, x+w-1, y+h-1);
 800505a:	897a      	ldrh	r2, [r7, #10]
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	4413      	add	r3, r2
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29c      	uxth	r4, r3
 8005066:	893a      	ldrh	r2, [r7, #8]
 8005068:	8c3b      	ldrh	r3, [r7, #32]
 800506a:	4413      	add	r3, r2
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	8939      	ldrh	r1, [r7, #8]
 8005074:	8978      	ldrh	r0, [r7, #10]
 8005076:	4622      	mov	r2, r4
 8005078:	f7ff fe0a 	bl	8004c90 <Displ_SetAddressWindow>
		Displ_WriteData((uint8_t* )pixels,((w*h)<<1),1);
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	8c3a      	ldrh	r2, [r7, #32]
 8005080:	fb02 f303 	mul.w	r3, r2, r3
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2201      	movs	r2, #1
 8005088:	4619      	mov	r1, r3
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fda7 	bl	8004bde <Displ_WriteData>
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	bd90      	pop	{r4, r7, pc}

08005098 <Touch_HandlePenDownInterrupt>:
volatile uint8_t Touch_PenDown=0;						// set to 1 by pendown interrupt callback, reset to 0 by sw
volatile uint8_t Touch_Int_Enabled=1;					// while reading touch sensor touch interrupt handling is disabled through this flag



void Touch_HandlePenDownInterrupt (){
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
	if (Touch_Int_Enabled) {
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <Touch_HandlePenDownInterrupt+0x20>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <Touch_HandlePenDownInterrupt+0x14>
		Touch_PenDown=1;
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <Touch_HandlePenDownInterrupt+0x24>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
	}
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000259 	.word	0x20000259
 80050bc:	20023be0 	.word	0x20023be0

080050c0 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==TOUCH_INT_Pin){
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d101      	bne.n	80050d4 <HAL_GPIO_EXTI_Callback+0x14>
		Touch_HandlePenDownInterrupt();
 80050d0:	f7ff ffe2 	bl	8005098 <Touch_HandlePenDownInterrupt>
	}
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <Touch_PollAxis>:
 * @params	axis	use only one of the three options X_AXIS, Y_AXIS or Z_AXIS
 * @return			the level measured on the "axis" axis
 * 					PLEASE NOTE this function should be only for internal usage
 * 								Use Touch_GetXYTouch() instead
 *******************************************************************************/
uint16_t Touch_PollAxis(uint8_t axis) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
	uint8_t poll[2] = {0,0};
 80050e6:	2300      	movs	r3, #0
 80050e8:	813b      	strh	r3, [r7, #8]
	
	if (TOUCH_SPI==DISPL_SPI){				// if touch and display share the same SPI port
		Touch_Select();						// enable CS on touch device
	}

	Touch_Int_Enabled=0;	//disable interrupt handling: sensor reading triggers interrupt
 80050ea:	4b16      	ldr	r3, [pc, #88]	; (8005144 <Touch_PollAxis+0x68>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
	// disable interrupt while enquiring the touch sensor because it triggers the interrupt pin
	HAL_NVIC_DisableIRQ(TOUCH_INT_EXTI_IRQn);
 80050f0:	2007      	movs	r0, #7
 80050f2:	f000 fc1e 	bl	8005932 <HAL_NVIC_DisableIRQ>

	HAL_SPI_Transmit(&TOUCH_SPI_PORT, &axis, 1, 10);
 80050f6:	1df9      	adds	r1, r7, #7
 80050f8:	230a      	movs	r3, #10
 80050fa:	2201      	movs	r2, #1
 80050fc:	4812      	ldr	r0, [pc, #72]	; (8005148 <Touch_PollAxis+0x6c>)
 80050fe:	f003 fbe6 	bl	80088ce <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&TOUCH_SPI_PORT, poll, 2, 10) == HAL_OK) {
 8005102:	f107 0108 	add.w	r1, r7, #8
 8005106:	230a      	movs	r3, #10
 8005108:	2202      	movs	r2, #2
 800510a:	480f      	ldr	r0, [pc, #60]	; (8005148 <Touch_PollAxis+0x6c>)
 800510c:	f003 fd54 	bl	8008bb8 <HAL_SPI_Receive>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d105      	bne.n	8005122 <Touch_PollAxis+0x46>
		poll16 = (poll[0]<<8) + poll[1];
 8005116:	7a3b      	ldrb	r3, [r7, #8]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	7a7a      	ldrb	r2, [r7, #9]
 800511c:	4413      	add	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e001      	b.n	8005126 <Touch_PollAxis+0x4a>
	}
	else {
		poll16 = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
	}

//enable back interrupt after reading the sensor
	HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8005126:	2007      	movs	r0, #7
 8005128:	f000 fc1d 	bl	8005966 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(TOUCH_INT_EXTI_IRQn);
 800512c:	2007      	movs	r0, #7
 800512e:	f000 fbf2 	bl	8005916 <HAL_NVIC_EnableIRQ>

	Touch_Int_Enabled=1;
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <Touch_PollAxis+0x68>)
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]

	if (TOUCH_SPI==DISPL_SPI){	// if touch and display share the same SPI port
		Touch_UnSelect();
	}

	return poll16;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	b29b      	uxth	r3, r3
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000259 	.word	0x20000259
 8005148:	20000544 	.word	0x20000544

0800514c <Touch_GetXYtouch>:
 * @brief			polls touch screen and returning its XY screen position
 * 					that's regardless touch recording flag (interrupt received)
 * @return	x,y		in case isTouch=1 contain touch coordinates
 * 			isTouch is 1 if detected a touch, otherwise 0;
 *********************************************************************************/
void Touch_GetXYtouch(uint16_t *x, uint16_t *y, uint8_t *isTouch){
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	; 0x28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]

const uint8_t pollingLevel=4;
 8005158:	2304      	movs	r3, #4
 800515a:	77fb      	strb	r3, [r7, #31]


// get the average value (over "1<<pollingLevel" attempts of X, Y and Z axes readings)

	// reading Z
	touch=0;
 800515c:	2300      	movs	r3, #0
 800515e:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005166:	e00c      	b.n	8005182 <Touch_GetXYtouch+0x36>
		touch += Touch_PollAxis(Z_AXIS);
 8005168:	20b0      	movs	r0, #176	; 0xb0
 800516a:	f7ff ffb7 	bl	80050dc <Touch_PollAxis>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	4413      	add	r3, r2
 8005176:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8005178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800517c:	3301      	adds	r3, #1
 800517e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005182:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005186:	7ffb      	ldrb	r3, [r7, #31]
 8005188:	2101      	movs	r1, #1
 800518a:	fa01 f303 	lsl.w	r3, r1, r3
 800518e:	429a      	cmp	r2, r3
 8005190:	dbea      	blt.n	8005168 <Touch_GetXYtouch+0x1c>
	touch >>= pollingLevel;  //get the average value
 8005192:	7ffb      	ldrb	r3, [r7, #31]
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	623b      	str	r3, [r7, #32]
	if (touch<=Z_THRESHOLD) {
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a2:	d806      	bhi.n	80051b2 <Touch_GetXYtouch+0x66>
		*isTouch=0;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 80051aa:	2007      	movs	r0, #7
 80051ac:	f000 fbdb 	bl	8005966 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 80051b0:	e0b2      	b.n	8005318 <Touch_GetXYtouch+0x1cc>
	}

	// reading X
	touch=0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80051b6:	2300      	movs	r3, #0
 80051b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80051bc:	e00c      	b.n	80051d8 <Touch_GetXYtouch+0x8c>
		touch += Touch_PollAxis(X_AXIS);
 80051be:	20d0      	movs	r0, #208	; 0xd0
 80051c0:	f7ff ff8c 	bl	80050dc <Touch_PollAxis>
 80051c4:	4603      	mov	r3, r0
 80051c6:	461a      	mov	r2, r3
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	4413      	add	r3, r2
 80051cc:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80051ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051d2:	3301      	adds	r3, #1
 80051d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80051d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80051dc:	7ffb      	ldrb	r3, [r7, #31]
 80051de:	2101      	movs	r1, #1
 80051e0:	fa01 f303 	lsl.w	r3, r1, r3
 80051e4:	429a      	cmp	r2, r3
 80051e6:	dbea      	blt.n	80051be <Touch_GetXYtouch+0x72>
	touch >>= pollingLevel;  //get the average value
 80051e8:	7ffb      	ldrb	r3, [r7, #31]
 80051ea:	6a3a      	ldr	r2, [r7, #32]
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	623b      	str	r3, [r7, #32]
	if (touch<=X_THRESHOLD) {
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f8:	d806      	bhi.n	8005208 <Touch_GetXYtouch+0xbc>
		*isTouch=0;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8005200:	2007      	movs	r0, #7
 8005202:	f000 fbb0 	bl	8005966 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 8005206:	e087      	b.n	8005318 <Touch_GetXYtouch+0x1cc>
	}
	touchx=(AX*touch+BX);
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005320 <Touch_GetXYtouch+0x1d4>
 8005216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800521a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005324 <Touch_GetXYtouch+0x1d8>
 800521e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005226:	ee17 3a90 	vmov	r3, s15
 800522a:	61bb      	str	r3, [r7, #24]

	// reading Y - there is no a threshold for Y
	touch=0;
 800522c:	2300      	movs	r3, #0
 800522e:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8005230:	2300      	movs	r3, #0
 8005232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005236:	e00c      	b.n	8005252 <Touch_GetXYtouch+0x106>
		touch += Touch_PollAxis(Y_AXIS);
 8005238:	2090      	movs	r0, #144	; 0x90
 800523a:	f7ff ff4f 	bl	80050dc <Touch_PollAxis>
 800523e:	4603      	mov	r3, r0
 8005240:	461a      	mov	r2, r3
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	4413      	add	r3, r2
 8005246:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8005248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800524c:	3301      	adds	r3, #1
 800524e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005252:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005256:	7ffb      	ldrb	r3, [r7, #31]
 8005258:	2101      	movs	r1, #1
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	429a      	cmp	r2, r3
 8005260:	dbea      	blt.n	8005238 <Touch_GetXYtouch+0xec>
	touch >>= pollingLevel; //get the average value
 8005262:	7ffb      	ldrb	r3, [r7, #31]
 8005264:	6a3a      	ldr	r2, [r7, #32]
 8005266:	fa22 f303 	lsr.w	r3, r2, r3
 800526a:	623b      	str	r3, [r7, #32]

	touchy=(AY*touch+BY);
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005328 <Touch_GetXYtouch+0x1dc>
 800527a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800527e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800532c <Touch_GetXYtouch+0x1e0>
 8005282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800528a:	ee17 3a90 	vmov	r3, s15
 800528e:	617b      	str	r3, [r7, #20]


//having X and Y axis average values
// calculating coordinates as per screen orientation
	switch (current_orientation)
 8005290:	4b27      	ldr	r3, [pc, #156]	; (8005330 <Touch_GetXYtouch+0x1e4>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b03      	cmp	r3, #3
 8005296:	d83b      	bhi.n	8005310 <Touch_GetXYtouch+0x1c4>
 8005298:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <Touch_GetXYtouch+0x154>)
 800529a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529e:	bf00      	nop
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	080052c3 	.word	0x080052c3
 80052a8:	080052db 	.word	0x080052db
 80052ac:	080052f9 	.word	0x080052f9
	{
	case TOUCH0:
		*x=touchx;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	801a      	strh	r2, [r3, #0]
		*y=touchy;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	801a      	strh	r2, [r3, #0]
		break;
 80052c0:	e026      	b.n	8005310 <Touch_GetXYtouch+0x1c4>
	case TOUCH90:
		*x=touchy;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_WIDTH-touchx);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	801a      	strh	r2, [r3, #0]
		break;
 80052d8:	e01a      	b.n	8005310 <Touch_GetXYtouch+0x1c4>
	case TOUCH180:
		*x=(TOUCH_0_WIDTH-touchx);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_HEIGHT - touchy);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	801a      	strh	r2, [r3, #0]
		break;
 80052f6:	e00b      	b.n	8005310 <Touch_GetXYtouch+0x1c4>
	case TOUCH270:
		*x=touchy;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_WIDTH-touchx);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8005308:	b29a      	uxth	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	801a      	strh	r2, [r3, #0]
		break;
 800530e:	bf00      	nop
	}

// set flag indicating there was a touch
	*isTouch=1;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
	return;
 8005316:	bf00      	nop
}
 8005318:	3728      	adds	r7, #40	; 0x28
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	3c033c60 	.word	0x3c033c60
 8005324:	413ff7cf 	.word	0x413ff7cf
 8005328:	3c375643 	.word	0x3c375643
 800532c:	421c3a5e 	.word	0x421c3a5e
 8005330:	20023bd0 	.word	0x20023bd0

08005334 <Touch_In_XY_area>:
 * 			width,
 * 			height	display area to be polled for a touch
 * @return	1		if there is a touch inside area
 * 			0		if no touch or touch outside area defined
 ***********************************************************/
uint8_t Touch_In_XY_area(uint16_t xpos,uint16_t ypos,uint16_t width,uint16_t height) {
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	4623      	mov	r3, r4
 8005344:	80fb      	strh	r3, [r7, #6]
 8005346:	4603      	mov	r3, r0
 8005348:	80bb      	strh	r3, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	807b      	strh	r3, [r7, #2]
 800534e:	4613      	mov	r3, r2
 8005350:	803b      	strh	r3, [r7, #0]
//sTouchData posXY;
uint16_t x,y;
uint8_t isTouch;
	Touch_GetXYtouch(&x, &y, &isTouch);
 8005352:	f107 020b 	add.w	r2, r7, #11
 8005356:	f107 010c 	add.w	r1, r7, #12
 800535a:	f107 030e 	add.w	r3, r7, #14
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fef4 	bl	800514c <Touch_GetXYtouch>
	if (!isTouch)
 8005364:	7afb      	ldrb	r3, [r7, #11]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <Touch_In_XY_area+0x3a>
		return 0;
 800536a:	2300      	movs	r3, #0
 800536c:	e018      	b.n	80053a0 <Touch_In_XY_area+0x6c>
	if (x>=xpos)
 800536e:	89fb      	ldrh	r3, [r7, #14]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	429a      	cmp	r2, r3
 8005374:	d813      	bhi.n	800539e <Touch_In_XY_area+0x6a>
		if (x<xpos+width)
 8005376:	89fb      	ldrh	r3, [r7, #14]
 8005378:	4619      	mov	r1, r3
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	887b      	ldrh	r3, [r7, #2]
 800537e:	4413      	add	r3, r2
 8005380:	4299      	cmp	r1, r3
 8005382:	da0c      	bge.n	800539e <Touch_In_XY_area+0x6a>
			if (y>=ypos)
 8005384:	89bb      	ldrh	r3, [r7, #12]
 8005386:	88ba      	ldrh	r2, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d808      	bhi.n	800539e <Touch_In_XY_area+0x6a>
				if (y<ypos+height)
 800538c:	89bb      	ldrh	r3, [r7, #12]
 800538e:	4619      	mov	r1, r3
 8005390:	88ba      	ldrh	r2, [r7, #4]
 8005392:	883b      	ldrh	r3, [r7, #0]
 8005394:	4413      	add	r3, r2
 8005396:	4299      	cmp	r1, r3
 8005398:	da01      	bge.n	800539e <Touch_In_XY_area+0x6a>
					return 1;
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <Touch_In_XY_area+0x6c>
	return 0;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd90      	pop	{r4, r7, pc}

080053a8 <Touch_GotATouch>:
 * 						(use "2" in main loop activating touchgfxSignalVSync()
 * @returns		1	if recorded a touch
 * 				0	if no touch recorded
 ***********************************************************/

uint8_t Touch_GotATouch(uint8_t reset) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	71fb      	strb	r3, [r7, #7]
static uint32_t touchTime=0;
uint8_t result = Touch_PenDown;
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <Touch_GotATouch+0x4c>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	73fb      	strb	r3, [r7, #15]

//	if (result)
//		result=Touch_PollTouch();

	if (reset==2){
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d10f      	bne.n	80053de <Touch_GotATouch+0x36>
		if ((HAL_GetTick()-touchTime) >= TOUCHGFX_TIMING)
 80053be:	f000 f941 	bl	8005644 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <Touch_GotATouch+0x50>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b3b      	cmp	r3, #59	; 0x3b
 80053cc:	d905      	bls.n	80053da <Touch_GotATouch+0x32>
			touchTime=HAL_GetTick();
 80053ce:	f000 f939 	bl	8005644 <HAL_GetTick>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <Touch_GotATouch+0x50>)
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	e001      	b.n	80053de <Touch_GotATouch+0x36>
		else
			result=0;
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]
	}
	if (reset==1)
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d102      	bne.n	80053ea <Touch_GotATouch+0x42>
		Touch_PenDown=0;
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <Touch_GotATouch+0x4c>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	701a      	strb	r2, [r3, #0]
	return result;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20023be0 	.word	0x20023be0
 80053f8:	20023be4 	.word	0x20023be4

080053fc <Touch_TouchGFXSampleTouch>:
 *			then, into STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
 *			change "return false;"
 *			into:  "return ((bool) Touch_TouchGFXSampleTouch(&x, &y));"
 * 			that's enough for touch integration in TouchGFX
***********************************************************/
uint8_t Touch_TouchGFXSampleTouch(int32_t *x, int32_t *y){
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
	//	sTouchData result;
	uint8_t isTouch=0;				// preset to no touch
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
	uint16_t xx=0,yy=0;  			// need to convert library coordinates type (uint16_t) to TouchGFX ones (int32_t)
 800540a:	2300      	movs	r3, #0
 800540c:	81bb      	strh	r3, [r7, #12]
 800540e:	2300      	movs	r3, #0
 8005410:	817b      	strh	r3, [r7, #10]
	static uint8_t flipTouch=0;		// switches 0/1, on every function call, until sensor is touched allowing to return key repeat
	static uint32_t touchTime=1; 	// tick value get on the first touch. 0 means display untouched.
	static uint16_t avgXX=0, avgYY=0;  			// need to convert library coordinates type (uint16_t) to TouchGFX one (int32_t)
	static uint8_t repetition=TOUCHGFX_REPEAT_IT+TOUCHGFX_REPEAT_NO;

	if (Touch_GotATouch(0)){				// polls interrupt flag not resetting it
 8005412:	2000      	movs	r0, #0
 8005414:	f7ff ffc8 	bl	80053a8 <Touch_GotATouch>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d071      	beq.n	8005502 <Touch_TouchGFXSampleTouch+0x106>
		Touch_GetXYtouch(&xx,&yy,&isTouch);	// get touch sensor position
 800541e:	f107 020f 	add.w	r2, r7, #15
 8005422:	f107 010a 	add.w	r1, r7, #10
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fe8e 	bl	800514c <Touch_GetXYtouch>
		if (!isTouch){						// received a "no touch"
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d126      	bne.n	8005484 <Touch_TouchGFXSampleTouch+0x88>
			if (touchTime != 0){			// if previously touched
 8005436:	4b35      	ldr	r3, [pc, #212]	; (800550c <Touch_TouchGFXSampleTouch+0x110>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d061      	beq.n	8005502 <Touch_TouchGFXSampleTouch+0x106>
				if ((repetition--)>TOUCHGFX_REPEAT_NO+1){		// n-repetition of last touch sending
 800543e:	4b34      	ldr	r3, [pc, #208]	; (8005510 <Touch_TouchGFXSampleTouch+0x114>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	1e5a      	subs	r2, r3, #1
 8005444:	b2d1      	uxtb	r1, r2
 8005446:	4a32      	ldr	r2, [pc, #200]	; (8005510 <Touch_TouchGFXSampleTouch+0x114>)
 8005448:	7011      	strb	r1, [r2, #0]
 800544a:	2b06      	cmp	r3, #6
 800544c:	d90c      	bls.n	8005468 <Touch_TouchGFXSampleTouch+0x6c>
					*x = avgXX;
 800544e:	4b31      	ldr	r3, [pc, #196]	; (8005514 <Touch_TouchGFXSampleTouch+0x118>)
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]
					*y = avgYY;
 8005458:	4b2f      	ldr	r3, [pc, #188]	; (8005518 <Touch_TouchGFXSampleTouch+0x11c>)
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	601a      	str	r2, [r3, #0]
					isTouch=1;
 8005462:	2301      	movs	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
 8005466:	e04c      	b.n	8005502 <Touch_TouchGFXSampleTouch+0x106>
				} else if ((repetition==255)) {  // that's -1
 8005468:	4b29      	ldr	r3, [pc, #164]	; (8005510 <Touch_TouchGFXSampleTouch+0x114>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2bff      	cmp	r3, #255	; 0xff
 800546e:	d148      	bne.n	8005502 <Touch_TouchGFXSampleTouch+0x106>
					touchTime=0;					// set display as untouched
 8005470:	4b26      	ldr	r3, [pc, #152]	; (800550c <Touch_TouchGFXSampleTouch+0x110>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
					Touch_GotATouch(1);				// reset interrupt touch flag
 8005476:	2001      	movs	r0, #1
 8005478:	f7ff ff96 	bl	80053a8 <Touch_GotATouch>
					repetition=TOUCHGFX_REPEAT_IT+TOUCHGFX_REPEAT_NO;  //reset repetition counter
 800547c:	4b24      	ldr	r3, [pc, #144]	; (8005510 <Touch_TouchGFXSampleTouch+0x114>)
 800547e:	2205      	movs	r2, #5
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	e03e      	b.n	8005502 <Touch_TouchGFXSampleTouch+0x106>
				}
			}
		} else {					// display touched

			if (touchTime==0) {				// if previously untouched
 8005484:	4b21      	ldr	r3, [pc, #132]	; (800550c <Touch_TouchGFXSampleTouch+0x110>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10e      	bne.n	80054aa <Touch_TouchGFXSampleTouch+0xae>
				avgXX =(xx/TOUCHGFX_SENSITIVITY)*TOUCHGFX_SENSITIVITY;
 800548c:	89ba      	ldrh	r2, [r7, #12]
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <Touch_TouchGFXSampleTouch+0x118>)
 8005490:	801a      	strh	r2, [r3, #0]
				avgYY =(yy/TOUCHGFX_SENSITIVITY)*TOUCHGFX_SENSITIVITY;
 8005492:	897a      	ldrh	r2, [r7, #10]
 8005494:	4b20      	ldr	r3, [pc, #128]	; (8005518 <Touch_TouchGFXSampleTouch+0x11c>)
 8005496:	801a      	strh	r2, [r3, #0]
				touchTime=HAL_GetTick();	// store tick value at touch time
 8005498:	f000 f8d4 	bl	8005644 <HAL_GetTick>
 800549c:	4603      	mov	r3, r0
 800549e:	4a1b      	ldr	r2, [pc, #108]	; (800550c <Touch_TouchGFXSampleTouch+0x110>)
 80054a0:	6013      	str	r3, [r2, #0]
				flipTouch=1;				// set switch to send touch now
 80054a2:	4b1e      	ldr	r3, [pc, #120]	; (800551c <Touch_TouchGFXSampleTouch+0x120>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e012      	b.n	80054d0 <Touch_TouchGFXSampleTouch+0xd4>
			} else {						// not a new touch
				if (((HAL_GetTick()-touchTime)>DELAY_TO_KEY_REPEAT) && (DELAY_TO_KEY_REPEAT > 0)){	// if timeout to key repeat is over (0 means no key repeat)
 80054aa:	f000 f8cb 	bl	8005644 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4b16      	ldr	r3, [pc, #88]	; (800550c <Touch_TouchGFXSampleTouch+0x110>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ba:	d909      	bls.n	80054d0 <Touch_TouchGFXSampleTouch+0xd4>
					flipTouch=!flipTouch;	// alternate every time function is called
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <Touch_TouchGFXSampleTouch+0x120>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	4b13      	ldr	r3, [pc, #76]	; (800551c <Touch_TouchGFXSampleTouch+0x120>)
 80054ce:	701a      	strb	r2, [r3, #0]
				} else
					if (DELAY_TO_KEY_REPEAT == 0)
						flipTouch=0;		// (DELAY_TO_KEY_REPEAT == 0) means a single pulse, "-1" keep pulse as long as touch
			}
			if (flipTouch) { 	// return position only if the switching flag is on
 80054d0:	4b12      	ldr	r3, [pc, #72]	; (800551c <Touch_TouchGFXSampleTouch+0x120>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d012      	beq.n	80054fe <Touch_TouchGFXSampleTouch+0x102>
				*x=(((avgXX*(TOUCHGFX_MOVAVG-1)+((xx/TOUCHGFX_SENSITIVITY)*TOUCHGFX_SENSITIVITY)))/TOUCHGFX_MOVAVG);
 80054d8:	89bb      	ldrh	r3, [r7, #12]
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	601a      	str	r2, [r3, #0]
				*y=(((avgYY*(TOUCHGFX_MOVAVG-1)+((yy/TOUCHGFX_SENSITIVITY)*TOUCHGFX_SENSITIVITY)))/TOUCHGFX_MOVAVG);
 80054e0:	897b      	ldrh	r3, [r7, #10]
 80054e2:	461a      	mov	r2, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	601a      	str	r2, [r3, #0]
				avgXX = *x;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <Touch_TouchGFXSampleTouch+0x118>)
 80054f0:	801a      	strh	r2, [r3, #0]
				avgYY = *y;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <Touch_TouchGFXSampleTouch+0x11c>)
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e001      	b.n	8005502 <Touch_TouchGFXSampleTouch+0x106>
			} else {			// otherwise return "no touch" from display
				isTouch = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return isTouch;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	2000025c 	.word	0x2000025c
 8005510:	20000260 	.word	0x20000260
 8005514:	20023be8 	.word	0x20023be8
 8005518:	20023bea 	.word	0x20023bea
 800551c:	20023bec 	.word	0x20023bec

08005520 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005558 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005524:	f7ff fad4 	bl	8004ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005528:	480c      	ldr	r0, [pc, #48]	; (800555c <LoopForever+0x6>)
  ldr r1, =_edata
 800552a:	490d      	ldr	r1, [pc, #52]	; (8005560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800552c:	4a0d      	ldr	r2, [pc, #52]	; (8005564 <LoopForever+0xe>)
  movs r3, #0
 800552e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005530:	e002      	b.n	8005538 <LoopCopyDataInit>

08005532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005536:	3304      	adds	r3, #4

08005538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800553a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800553c:	d3f9      	bcc.n	8005532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800553e:	4a0a      	ldr	r2, [pc, #40]	; (8005568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005540:	4c0a      	ldr	r4, [pc, #40]	; (800556c <LoopForever+0x16>)
  movs r3, #0
 8005542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005544:	e001      	b.n	800554a <LoopFillZerobss>

08005546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005548:	3204      	adds	r2, #4

0800554a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800554a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800554c:	d3fb      	bcc.n	8005546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800554e:	f021 fa15 	bl	802697c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005552:	f7fd fc91 	bl	8002e78 <main>

08005556 <LoopForever>:

LoopForever:
    b LoopForever
 8005556:	e7fe      	b.n	8005556 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005558:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800555c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005560:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8005564:	0805cecc 	.word	0x0805cecc
  ldr r2, =_sbss
 8005568:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800556c:	20026460 	.word	0x20026460

08005570 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005570:	e7fe      	b.n	8005570 <ADC1_IRQHandler>

08005572 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800557c:	2003      	movs	r0, #3
 800557e:	f000 f9a3 	bl	80058c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005582:	2000      	movs	r0, #0
 8005584:	f000 f80e 	bl	80055a4 <HAL_InitTick>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	71fb      	strb	r3, [r7, #7]
 8005592:	e001      	b.n	8005598 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005594:	f7fe fcae 	bl	8003ef4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005598:	79fb      	ldrb	r3, [r7, #7]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80055b0:	4b17      	ldr	r3, [pc, #92]	; (8005610 <HAL_InitTick+0x6c>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d023      	beq.n	8005600 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <HAL_InitTick+0x70>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4b14      	ldr	r3, [pc, #80]	; (8005610 <HAL_InitTick+0x6c>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f9bd 	bl	800594e <HAL_SYSTICK_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b0f      	cmp	r3, #15
 80055de:	d809      	bhi.n	80055f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055e0:	2200      	movs	r2, #0
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	f000 f979 	bl	80058de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055ec:	4a0a      	ldr	r2, [pc, #40]	; (8005618 <HAL_InitTick+0x74>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e007      	b.n	8005604 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e004      	b.n	8005604 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
 80055fe:	e001      	b.n	8005604 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000268 	.word	0x20000268
 8005614:	20000254 	.word	0x20000254
 8005618:	20000264 	.word	0x20000264

0800561c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_IncTick+0x20>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_IncTick+0x24>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4413      	add	r3, r2
 800562c:	4a04      	ldr	r2, [pc, #16]	; (8005640 <HAL_IncTick+0x24>)
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000268 	.word	0x20000268
 8005640:	20023bf0 	.word	0x20023bf0

08005644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return uwTick;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <HAL_GetTick+0x14>)
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20023bf0 	.word	0x20023bf0

0800565c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005664:	f7ff ffee 	bl	8005644 <HAL_GetTick>
 8005668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	d005      	beq.n	8005682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <HAL_Delay+0x44>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005682:	bf00      	nop
 8005684:	f7ff ffde 	bl	8005644 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	429a      	cmp	r2, r3
 8005692:	d8f7      	bhi.n	8005684 <HAL_Delay+0x28>
  {
  }
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000268 	.word	0x20000268

080056a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <__NVIC_SetPriorityGrouping+0x44>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056c0:	4013      	ands	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056d6:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <__NVIC_SetPriorityGrouping+0x44>)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	60d3      	str	r3, [r2, #12]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	e000ed00 	.word	0xe000ed00

080056ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <__NVIC_GetPriorityGrouping+0x18>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	f003 0307 	and.w	r3, r3, #7
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005716:	2b00      	cmp	r3, #0
 8005718:	db0b      	blt.n	8005732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	f003 021f 	and.w	r2, r3, #31
 8005720:	4907      	ldr	r1, [pc, #28]	; (8005740 <__NVIC_EnableIRQ+0x38>)
 8005722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	2001      	movs	r0, #1
 800572a:	fa00 f202 	lsl.w	r2, r0, r2
 800572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000e100 	.word	0xe000e100

08005744 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800574e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005752:	2b00      	cmp	r3, #0
 8005754:	db12      	blt.n	800577c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	f003 021f 	and.w	r2, r3, #31
 800575c:	490a      	ldr	r1, [pc, #40]	; (8005788 <__NVIC_DisableIRQ+0x44>)
 800575e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	2001      	movs	r0, #1
 8005766:	fa00 f202 	lsl.w	r2, r0, r2
 800576a:	3320      	adds	r3, #32
 800576c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005770:	f3bf 8f4f 	dsb	sy
}
 8005774:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005776:	f3bf 8f6f 	isb	sy
}
 800577a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	e000e100 	.word	0xe000e100

0800578c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579a:	2b00      	cmp	r3, #0
 800579c:	db0c      	blt.n	80057b8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	f003 021f 	and.w	r2, r3, #31
 80057a4:	4907      	ldr	r1, [pc, #28]	; (80057c4 <__NVIC_ClearPendingIRQ+0x38>)
 80057a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2001      	movs	r0, #1
 80057ae:	fa00 f202 	lsl.w	r2, r0, r2
 80057b2:	3360      	adds	r3, #96	; 0x60
 80057b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	e000e100 	.word	0xe000e100

080057c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	6039      	str	r1, [r7, #0]
 80057d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	db0a      	blt.n	80057f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	490c      	ldr	r1, [pc, #48]	; (8005814 <__NVIC_SetPriority+0x4c>)
 80057e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e6:	0112      	lsls	r2, r2, #4
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	440b      	add	r3, r1
 80057ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057f0:	e00a      	b.n	8005808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	4908      	ldr	r1, [pc, #32]	; (8005818 <__NVIC_SetPriority+0x50>)
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	3b04      	subs	r3, #4
 8005800:	0112      	lsls	r2, r2, #4
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	440b      	add	r3, r1
 8005806:	761a      	strb	r2, [r3, #24]
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000e100 	.word	0xe000e100
 8005818:	e000ed00 	.word	0xe000ed00

0800581c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800581c:	b480      	push	{r7}
 800581e:	b089      	sub	sp, #36	; 0x24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f1c3 0307 	rsb	r3, r3, #7
 8005836:	2b04      	cmp	r3, #4
 8005838:	bf28      	it	cs
 800583a:	2304      	movcs	r3, #4
 800583c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	3304      	adds	r3, #4
 8005842:	2b06      	cmp	r3, #6
 8005844:	d902      	bls.n	800584c <NVIC_EncodePriority+0x30>
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3b03      	subs	r3, #3
 800584a:	e000      	b.n	800584e <NVIC_EncodePriority+0x32>
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005850:	f04f 32ff 	mov.w	r2, #4294967295
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43da      	mvns	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	401a      	ands	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005864:	f04f 31ff 	mov.w	r1, #4294967295
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	43d9      	mvns	r1, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005874:	4313      	orrs	r3, r2
         );
}
 8005876:	4618      	mov	r0, r3
 8005878:	3724      	adds	r7, #36	; 0x24
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3b01      	subs	r3, #1
 8005890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005894:	d301      	bcc.n	800589a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005896:	2301      	movs	r3, #1
 8005898:	e00f      	b.n	80058ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800589a:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <SysTick_Config+0x40>)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3b01      	subs	r3, #1
 80058a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058a2:	210f      	movs	r1, #15
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	f7ff ff8e 	bl	80057c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <SysTick_Config+0x40>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058b2:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <SysTick_Config+0x40>)
 80058b4:	2207      	movs	r2, #7
 80058b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	e000e010 	.word	0xe000e010

080058c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fee7 	bl	80056a4 <__NVIC_SetPriorityGrouping>
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	4603      	mov	r3, r0
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058f0:	f7ff fefc 	bl	80056ec <__NVIC_GetPriorityGrouping>
 80058f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	6978      	ldr	r0, [r7, #20]
 80058fc:	f7ff ff8e 	bl	800581c <NVIC_EncodePriority>
 8005900:	4602      	mov	r2, r0
 8005902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff ff5d 	bl	80057c8 <__NVIC_SetPriority>
}
 800590e:	bf00      	nop
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	4603      	mov	r3, r0
 800591e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff feef 	bl	8005708 <__NVIC_EnableIRQ>
}
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	4603      	mov	r3, r0
 800593a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800593c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff feff 	bl	8005744 <__NVIC_DisableIRQ>
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff ff94 	bl	8005884 <SysTick_Config>
 800595c:	4603      	mov	r3, r0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	4603      	mov	r3, r0
 800596e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff ff09 	bl	800578c <__NVIC_ClearPendingIRQ>
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e054      	b.n	8005a40 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	7f5b      	ldrb	r3, [r3, #29]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fe fac8 	bl	8003f3c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	791b      	ldrb	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10c      	bne.n	80059d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a22      	ldr	r2, [pc, #136]	; (8005a48 <HAL_CRC_Init+0xc4>)
 80059c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0218 	bic.w	r2, r2, #24
 80059d0:	609a      	str	r2, [r3, #8]
 80059d2:	e00c      	b.n	80059ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6899      	ldr	r1, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	461a      	mov	r2, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f834 	bl	8005a4c <HAL_CRCEx_Polynomial_Set>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e028      	b.n	8005a40 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	795b      	ldrb	r3, [r3, #5]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d105      	bne.n	8005a02 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f04f 32ff 	mov.w	r2, #4294967295
 80059fe:	611a      	str	r2, [r3, #16]
 8005a00:	e004      	b.n	8005a0c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6912      	ldr	r2, [r2, #16]
 8005a0a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	04c11db7 	.word	0x04c11db7

08005a4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005a5c:	231f      	movs	r3, #31
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
 8005a6e:	e063      	b.n	8005b38 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005a70:	bf00      	nop
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1e5a      	subs	r2, r3, #1
 8005a76:	613a      	str	r2, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <HAL_CRCEx_Polynomial_Set+0x44>
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b18      	cmp	r3, #24
 8005a94:	d846      	bhi.n	8005b24 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005b2b 	.word	0x08005b2b
 8005aa0:	08005b25 	.word	0x08005b25
 8005aa4:	08005b25 	.word	0x08005b25
 8005aa8:	08005b25 	.word	0x08005b25
 8005aac:	08005b25 	.word	0x08005b25
 8005ab0:	08005b25 	.word	0x08005b25
 8005ab4:	08005b25 	.word	0x08005b25
 8005ab8:	08005b25 	.word	0x08005b25
 8005abc:	08005b19 	.word	0x08005b19
 8005ac0:	08005b25 	.word	0x08005b25
 8005ac4:	08005b25 	.word	0x08005b25
 8005ac8:	08005b25 	.word	0x08005b25
 8005acc:	08005b25 	.word	0x08005b25
 8005ad0:	08005b25 	.word	0x08005b25
 8005ad4:	08005b25 	.word	0x08005b25
 8005ad8:	08005b25 	.word	0x08005b25
 8005adc:	08005b0d 	.word	0x08005b0d
 8005ae0:	08005b25 	.word	0x08005b25
 8005ae4:	08005b25 	.word	0x08005b25
 8005ae8:	08005b25 	.word	0x08005b25
 8005aec:	08005b25 	.word	0x08005b25
 8005af0:	08005b25 	.word	0x08005b25
 8005af4:	08005b25 	.word	0x08005b25
 8005af8:	08005b25 	.word	0x08005b25
 8005afc:	08005b01 	.word	0x08005b01
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b06      	cmp	r3, #6
 8005b04:	d913      	bls.n	8005b2e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005b0a:	e010      	b.n	8005b2e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b07      	cmp	r3, #7
 8005b10:	d90f      	bls.n	8005b32 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005b16:	e00c      	b.n	8005b32 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b0f      	cmp	r3, #15
 8005b1c:	d90b      	bls.n	8005b36 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005b22:	e008      	b.n	8005b36 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	75fb      	strb	r3, [r7, #23]
        break;
 8005b28:	e006      	b.n	8005b38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e004      	b.n	8005b38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005b2e:	bf00      	nop
 8005b30:	e002      	b.n	8005b38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005b36:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f023 0118 	bic.w	r1, r3, #24
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e08d      	b.n	8005c96 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4b47      	ldr	r3, [pc, #284]	; (8005ca0 <HAL_DMA_Init+0x138>)
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d80f      	bhi.n	8005ba6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	4b45      	ldr	r3, [pc, #276]	; (8005ca4 <HAL_DMA_Init+0x13c>)
 8005b8e:	4413      	add	r3, r2
 8005b90:	4a45      	ldr	r2, [pc, #276]	; (8005ca8 <HAL_DMA_Init+0x140>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	091b      	lsrs	r3, r3, #4
 8005b98:	009a      	lsls	r2, r3, #2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a42      	ldr	r2, [pc, #264]	; (8005cac <HAL_DMA_Init+0x144>)
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ba4:	e00e      	b.n	8005bc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	4b40      	ldr	r3, [pc, #256]	; (8005cb0 <HAL_DMA_Init+0x148>)
 8005bae:	4413      	add	r3, r2
 8005bb0:	4a3d      	ldr	r2, [pc, #244]	; (8005ca8 <HAL_DMA_Init+0x140>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	009a      	lsls	r2, r3, #2
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a3c      	ldr	r2, [pc, #240]	; (8005cb4 <HAL_DMA_Init+0x14c>)
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa72 	bl	8006100 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c24:	d102      	bne.n	8005c2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c40:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <HAL_DMA_Init+0x104>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d80c      	bhi.n	8005c6c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa92 	bl	800617c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	e008      	b.n	8005c7e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40020407 	.word	0x40020407
 8005ca4:	bffdfff8 	.word	0xbffdfff8
 8005ca8:	cccccccd 	.word	0xcccccccd
 8005cac:	40020000 	.word	0x40020000
 8005cb0:	bffdfbf8 	.word	0xbffdfbf8
 8005cb4:	40020400 	.word	0x40020400

08005cb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_DMA_Start_IT+0x20>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e066      	b.n	8005da6 <HAL_DMA_Start_IT+0xee>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d155      	bne.n	8005d98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0201 	bic.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f9b6 	bl	8006082 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d008      	beq.n	8005d30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 020e 	orr.w	r2, r2, #14
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e00f      	b.n	8005d50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0204 	bic.w	r2, r2, #4
 8005d3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 020a 	orr.w	r2, r2, #10
 8005d4e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d84:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e005      	b.n	8005da4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
 8005da2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d008      	beq.n	8005dd8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e040      	b.n	8005e5a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 020e 	bic.w	r2, r2, #14
 8005de6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0c:	f003 021c 	and.w	r2, r3, #28
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e46:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d005      	beq.n	8005e8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2204      	movs	r2, #4
 8005e82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
 8005e88:	e047      	b.n	8005f1a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 020e 	bic.w	r2, r2, #14
 8005e98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	f003 021c 	and.w	r2, r3, #28
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ecc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ed6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00c      	beq.n	8005efa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005ef8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
    }
  }
  return status;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f40:	f003 031c 	and.w	r3, r3, #28
 8005f44:	2204      	movs	r2, #4
 8005f46:	409a      	lsls	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d026      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x7a>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d021      	beq.n	8005f9e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d107      	bne.n	8005f78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0204 	bic.w	r2, r2, #4
 8005f76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7c:	f003 021c 	and.w	r2, r3, #28
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	2104      	movs	r1, #4
 8005f86:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d071      	beq.n	8006078 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f9c:	e06c      	b.n	8006078 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	f003 031c 	and.w	r3, r3, #28
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	409a      	lsls	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d02e      	beq.n	8006010 <HAL_DMA_IRQHandler+0xec>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d029      	beq.n	8006010 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 020a 	bic.w	r2, r2, #10
 8005fd8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe6:	f003 021c 	and.w	r2, r3, #28
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	2102      	movs	r1, #2
 8005ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ff4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d038      	beq.n	8006078 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800600e:	e033      	b.n	8006078 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006014:	f003 031c 	and.w	r3, r3, #28
 8006018:	2208      	movs	r2, #8
 800601a:	409a      	lsls	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d02a      	beq.n	800607a <HAL_DMA_IRQHandler+0x156>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d025      	beq.n	800607a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 020e 	bic.w	r2, r2, #14
 800603c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006042:	f003 021c 	and.w	r2, r3, #28
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2101      	movs	r1, #1
 800604c:	fa01 f202 	lsl.w	r2, r1, r2
 8006050:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006078:	bf00      	nop
 800607a:	bf00      	nop
}
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006098:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80060aa:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b0:	f003 021c 	and.w	r2, r3, #28
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	2101      	movs	r1, #1
 80060ba:	fa01 f202 	lsl.w	r2, r1, r2
 80060be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d108      	bne.n	80060e2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060e0:	e007      	b.n	80060f2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	60da      	str	r2, [r3, #12]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006110:	429a      	cmp	r2, r3
 8006112:	d80a      	bhi.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006118:	089b      	lsrs	r3, r3, #2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006120:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6493      	str	r3, [r2, #72]	; 0x48
 8006128:	e007      	b.n	800613a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612e:	089b      	lsrs	r3, r3, #2
 8006130:	009a      	lsls	r2, r3, #2
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006134:	4413      	add	r3, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	3b08      	subs	r3, #8
 8006142:	4a0c      	ldr	r2, [pc, #48]	; (8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006144:	fba2 2303 	umull	r2, r3, r2, r3
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006150:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2201      	movs	r2, #1
 800615a:	409a      	lsls	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	40020407 	.word	0x40020407
 8006170:	4002081c 	.word	0x4002081c
 8006174:	cccccccd 	.word	0xcccccccd
 8006178:	40020880 	.word	0x40020880

0800617c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	461a      	mov	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a08      	ldr	r2, [pc, #32]	; (80061c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800619e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	2201      	movs	r2, #1
 80061aa:	409a      	lsls	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	1000823f 	.word	0x1000823f
 80061c0:	40020940 	.word	0x40020940

080061c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061d2:	e166      	b.n	80064a2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	2101      	movs	r1, #1
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	fa01 f303 	lsl.w	r3, r1, r3
 80061e0:	4013      	ands	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 8158 	beq.w	800649c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d005      	beq.n	8006204 <HAL_GPIO_Init+0x40>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d130      	bne.n	8006266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	2203      	movs	r2, #3
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4013      	ands	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800623a:	2201      	movs	r2, #1
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	f003 0201 	and.w	r2, r3, #1
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	2b03      	cmp	r3, #3
 8006270:	d017      	beq.n	80062a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	2203      	movs	r2, #3
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43db      	mvns	r3, r3
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4013      	ands	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	fa02 f303 	lsl.w	r3, r2, r3
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d123      	bne.n	80062f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	08da      	lsrs	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3208      	adds	r2, #8
 80062b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	220f      	movs	r2, #15
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	43db      	mvns	r3, r3
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4013      	ands	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	691a      	ldr	r2, [r3, #16]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	08da      	lsrs	r2, r3, #3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3208      	adds	r2, #8
 80062f0:	6939      	ldr	r1, [r7, #16]
 80062f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	2203      	movs	r2, #3
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4013      	ands	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f003 0203 	and.w	r2, r3, #3
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 80b2 	beq.w	800649c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006338:	4b61      	ldr	r3, [pc, #388]	; (80064c0 <HAL_GPIO_Init+0x2fc>)
 800633a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633c:	4a60      	ldr	r2, [pc, #384]	; (80064c0 <HAL_GPIO_Init+0x2fc>)
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	6613      	str	r3, [r2, #96]	; 0x60
 8006344:	4b5e      	ldr	r3, [pc, #376]	; (80064c0 <HAL_GPIO_Init+0x2fc>)
 8006346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	60bb      	str	r3, [r7, #8]
 800634e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006350:	4a5c      	ldr	r2, [pc, #368]	; (80064c4 <HAL_GPIO_Init+0x300>)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	089b      	lsrs	r3, r3, #2
 8006356:	3302      	adds	r3, #2
 8006358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	220f      	movs	r2, #15
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	43db      	mvns	r3, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4013      	ands	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800637a:	d02b      	beq.n	80063d4 <HAL_GPIO_Init+0x210>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a52      	ldr	r2, [pc, #328]	; (80064c8 <HAL_GPIO_Init+0x304>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d025      	beq.n	80063d0 <HAL_GPIO_Init+0x20c>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a51      	ldr	r2, [pc, #324]	; (80064cc <HAL_GPIO_Init+0x308>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d01f      	beq.n	80063cc <HAL_GPIO_Init+0x208>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a50      	ldr	r2, [pc, #320]	; (80064d0 <HAL_GPIO_Init+0x30c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d019      	beq.n	80063c8 <HAL_GPIO_Init+0x204>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a4f      	ldr	r2, [pc, #316]	; (80064d4 <HAL_GPIO_Init+0x310>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d013      	beq.n	80063c4 <HAL_GPIO_Init+0x200>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a4e      	ldr	r2, [pc, #312]	; (80064d8 <HAL_GPIO_Init+0x314>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00d      	beq.n	80063c0 <HAL_GPIO_Init+0x1fc>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a4d      	ldr	r2, [pc, #308]	; (80064dc <HAL_GPIO_Init+0x318>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <HAL_GPIO_Init+0x1f8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a4c      	ldr	r2, [pc, #304]	; (80064e0 <HAL_GPIO_Init+0x31c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d101      	bne.n	80063b8 <HAL_GPIO_Init+0x1f4>
 80063b4:	2307      	movs	r3, #7
 80063b6:	e00e      	b.n	80063d6 <HAL_GPIO_Init+0x212>
 80063b8:	2308      	movs	r3, #8
 80063ba:	e00c      	b.n	80063d6 <HAL_GPIO_Init+0x212>
 80063bc:	2306      	movs	r3, #6
 80063be:	e00a      	b.n	80063d6 <HAL_GPIO_Init+0x212>
 80063c0:	2305      	movs	r3, #5
 80063c2:	e008      	b.n	80063d6 <HAL_GPIO_Init+0x212>
 80063c4:	2304      	movs	r3, #4
 80063c6:	e006      	b.n	80063d6 <HAL_GPIO_Init+0x212>
 80063c8:	2303      	movs	r3, #3
 80063ca:	e004      	b.n	80063d6 <HAL_GPIO_Init+0x212>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e002      	b.n	80063d6 <HAL_GPIO_Init+0x212>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <HAL_GPIO_Init+0x212>
 80063d4:	2300      	movs	r3, #0
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	f002 0203 	and.w	r2, r2, #3
 80063dc:	0092      	lsls	r2, r2, #2
 80063de:	4093      	lsls	r3, r2
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80063e6:	4937      	ldr	r1, [pc, #220]	; (80064c4 <HAL_GPIO_Init+0x300>)
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	3302      	adds	r3, #2
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063f4:	4b3b      	ldr	r3, [pc, #236]	; (80064e4 <HAL_GPIO_Init+0x320>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	43db      	mvns	r3, r3
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4013      	ands	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006418:	4a32      	ldr	r2, [pc, #200]	; (80064e4 <HAL_GPIO_Init+0x320>)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800641e:	4b31      	ldr	r3, [pc, #196]	; (80064e4 <HAL_GPIO_Init+0x320>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	43db      	mvns	r3, r3
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4013      	ands	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006442:	4a28      	ldr	r2, [pc, #160]	; (80064e4 <HAL_GPIO_Init+0x320>)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006448:	4b26      	ldr	r3, [pc, #152]	; (80064e4 <HAL_GPIO_Init+0x320>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	43db      	mvns	r3, r3
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4013      	ands	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <HAL_GPIO_Init+0x320>)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006472:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <HAL_GPIO_Init+0x320>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	43db      	mvns	r3, r3
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4013      	ands	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006496:	4a13      	ldr	r2, [pc, #76]	; (80064e4 <HAL_GPIO_Init+0x320>)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	3301      	adds	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f47f ae91 	bne.w	80061d4 <HAL_GPIO_Init+0x10>
  }
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40021000 	.word	0x40021000
 80064c4:	40010000 	.word	0x40010000
 80064c8:	48000400 	.word	0x48000400
 80064cc:	48000800 	.word	0x48000800
 80064d0:	48000c00 	.word	0x48000c00
 80064d4:	48001000 	.word	0x48001000
 80064d8:	48001400 	.word	0x48001400
 80064dc:	48001800 	.word	0x48001800
 80064e0:	48001c00 	.word	0x48001c00
 80064e4:	40010400 	.word	0x40010400

080064e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	807b      	strh	r3, [r7, #2]
 80064f4:	4613      	mov	r3, r2
 80064f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064f8:	787b      	ldrb	r3, [r7, #1]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064fe:	887a      	ldrh	r2, [r7, #2]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006504:	e002      	b.n	800650c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006506:	887a      	ldrh	r2, [r7, #2]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006522:	4b08      	ldr	r3, [pc, #32]	; (8006544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006524:	695a      	ldr	r2, [r3, #20]
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d006      	beq.n	800653c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800652e:	4a05      	ldr	r2, [pc, #20]	; (8006544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006534:	88fb      	ldrh	r3, [r7, #6]
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fdc2 	bl	80050c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800653c:	bf00      	nop
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40010400 	.word	0x40010400

08006548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e08d      	b.n	8006676 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fd fd04 	bl	8003f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2224      	movs	r2, #36	; 0x24
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0201 	bic.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006598:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d107      	bne.n	80065c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065be:	609a      	str	r2, [r3, #8]
 80065c0:	e006      	b.n	80065d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80065ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d108      	bne.n	80065ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e6:	605a      	str	r2, [r3, #4]
 80065e8:	e007      	b.n	80065fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800661c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69d9      	ldr	r1, [r3, #28]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1a      	ldr	r2, [r3, #32]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af02      	add	r7, sp, #8
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	607a      	str	r2, [r7, #4]
 800668a:	461a      	mov	r2, r3
 800668c:	460b      	mov	r3, r1
 800668e:	817b      	strh	r3, [r7, #10]
 8006690:	4613      	mov	r3, r2
 8006692:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b20      	cmp	r3, #32
 800669e:	f040 80fd 	bne.w	800689c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_I2C_Master_Transmit+0x30>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e0f6      	b.n	800689e <HAL_I2C_Master_Transmit+0x21e>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066b8:	f7fe ffc4 	bl	8005644 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	2319      	movs	r3, #25
 80066c4:	2201      	movs	r2, #1
 80066c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f914 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e0e1      	b.n	800689e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2221      	movs	r2, #33	; 0x21
 80066de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2210      	movs	r2, #16
 80066e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	893a      	ldrh	r2, [r7, #8]
 80066fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006706:	b29b      	uxth	r3, r3
 8006708:	2bff      	cmp	r3, #255	; 0xff
 800670a:	d906      	bls.n	800671a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	22ff      	movs	r2, #255	; 0xff
 8006710:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006712:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e007      	b.n	800672a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006728:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d024      	beq.n	800677c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	781a      	ldrb	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675a:	3b01      	subs	r3, #1
 800675c:	b29a      	uxth	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006766:	b2db      	uxtb	r3, r3
 8006768:	3301      	adds	r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	8979      	ldrh	r1, [r7, #10]
 800676e:	4b4e      	ldr	r3, [pc, #312]	; (80068a8 <HAL_I2C_Master_Transmit+0x228>)
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fa79 	bl	8006c6c <I2C_TransferConfig>
 800677a:	e066      	b.n	800684a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006780:	b2da      	uxtb	r2, r3
 8006782:	8979      	ldrh	r1, [r7, #10]
 8006784:	4b48      	ldr	r3, [pc, #288]	; (80068a8 <HAL_I2C_Master_Transmit+0x228>)
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fa6e 	bl	8006c6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006790:	e05b      	b.n	800684a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	6a39      	ldr	r1, [r7, #32]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 f8fd 	bl	8006996 <I2C_WaitOnTXISFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e07b      	b.n	800689e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d034      	beq.n	800684a <HAL_I2C_Master_Transmit+0x1ca>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d130      	bne.n	800684a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	2200      	movs	r2, #0
 80067f0:	2180      	movs	r1, #128	; 0x80
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f880 	bl	80068f8 <I2C_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e04d      	b.n	800689e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	2bff      	cmp	r3, #255	; 0xff
 800680a:	d90e      	bls.n	800682a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	22ff      	movs	r2, #255	; 0xff
 8006810:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006816:	b2da      	uxtb	r2, r3
 8006818:	8979      	ldrh	r1, [r7, #10]
 800681a:	2300      	movs	r3, #0
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fa22 	bl	8006c6c <I2C_TransferConfig>
 8006828:	e00f      	b.n	800684a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006838:	b2da      	uxtb	r2, r3
 800683a:	8979      	ldrh	r1, [r7, #10]
 800683c:	2300      	movs	r3, #0
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fa11 	bl	8006c6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d19e      	bne.n	8006792 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	6a39      	ldr	r1, [r7, #32]
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f8e3 	bl	8006a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e01a      	b.n	800689e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2220      	movs	r2, #32
 800686e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <HAL_I2C_Master_Transmit+0x22c>)
 800687c:	400b      	ands	r3, r1
 800687e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	80002000 	.word	0x80002000
 80068ac:	fe00e800 	.word	0xfe00e800

080068b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d103      	bne.n	80068ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d007      	beq.n	80068ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	619a      	str	r2, [r3, #24]
  }
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006908:	e031      	b.n	800696e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d02d      	beq.n	800696e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006912:	f7fe fe97 	bl	8005644 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d302      	bcc.n	8006928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d122      	bne.n	800696e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4013      	ands	r3, r2
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	429a      	cmp	r2, r3
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	429a      	cmp	r2, r3
 8006944:	d113      	bne.n	800696e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	f043 0220 	orr.w	r2, r3, #32
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e00f      	b.n	800698e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	699a      	ldr	r2, [r3, #24]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4013      	ands	r3, r2
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	429a      	cmp	r2, r3
 800697c:	bf0c      	ite	eq
 800697e:	2301      	moveq	r3, #1
 8006980:	2300      	movne	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	429a      	cmp	r2, r3
 800698a:	d0be      	beq.n	800690a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069a2:	e033      	b.n	8006a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f87f 	bl	8006aac <I2C_IsErrorOccurred>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e031      	b.n	8006a1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069be:	d025      	beq.n	8006a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c0:	f7fe fe40 	bl	8005644 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d11a      	bne.n	8006a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d013      	beq.n	8006a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e8:	f043 0220 	orr.w	r2, r3, #32
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e007      	b.n	8006a1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d1c4      	bne.n	80069a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a30:	e02f      	b.n	8006a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f838 	bl	8006aac <I2C_IsErrorOccurred>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e02d      	b.n	8006aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a46:	f7fe fdfd 	bl	8005644 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d302      	bcc.n	8006a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11a      	bne.n	8006a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d013      	beq.n	8006a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	f043 0220 	orr.w	r2, r3, #32
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e007      	b.n	8006aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d1c8      	bne.n	8006a32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08a      	sub	sp, #40	; 0x28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d068      	beq.n	8006baa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2210      	movs	r2, #16
 8006ade:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ae0:	e049      	b.n	8006b76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae8:	d045      	beq.n	8006b76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006aea:	f7fe fdab 	bl	8005644 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d302      	bcc.n	8006b00 <I2C_IsErrorOccurred+0x54>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d13a      	bne.n	8006b76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b22:	d121      	bne.n	8006b68 <I2C_IsErrorOccurred+0xbc>
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b2a:	d01d      	beq.n	8006b68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b2c:	7cfb      	ldrb	r3, [r7, #19]
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d01a      	beq.n	8006b68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b42:	f7fe fd7f 	bl	8005644 <HAL_GetTick>
 8006b46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b48:	e00e      	b.n	8006b68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b4a:	f7fe fd7b 	bl	8005644 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b19      	cmp	r3, #25
 8006b56:	d907      	bls.n	8006b68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	f043 0320 	orr.w	r3, r3, #32
 8006b5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006b66:	e006      	b.n	8006b76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d1e9      	bne.n	8006b4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d003      	beq.n	8006b8c <I2C_IsErrorOccurred+0xe0>
 8006b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0aa      	beq.n	8006ae2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	f043 0304 	orr.w	r3, r3, #4
 8006ba2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	f043 0301 	orr.w	r3, r3, #1
 8006bc2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00b      	beq.n	8006bf6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	f043 0308 	orr.w	r3, r3, #8
 8006be4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00b      	beq.n	8006c18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	f043 0302 	orr.w	r3, r3, #2
 8006c06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01c      	beq.n	8006c5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fe45 	bl	80068b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6859      	ldr	r1, [r3, #4]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <I2C_IsErrorOccurred+0x1bc>)
 8006c32:	400b      	ands	r3, r1
 8006c34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3728      	adds	r7, #40	; 0x28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	fe00e800 	.word	0xfe00e800

08006c6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	607b      	str	r3, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	817b      	strh	r3, [r7, #10]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c7e:	897b      	ldrh	r3, [r7, #10]
 8006c80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c84:	7a7b      	ldrb	r3, [r7, #9]
 8006c86:	041b      	lsls	r3, r3, #16
 8006c88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	0d5b      	lsrs	r3, r3, #21
 8006ca6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006caa:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <I2C_TransferConfig+0x60>)
 8006cac:	430b      	orrs	r3, r1
 8006cae:	43db      	mvns	r3, r3
 8006cb0:	ea02 0103 	and.w	r1, r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	03ff63ff 	.word	0x03ff63ff

08006cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d138      	bne.n	8006d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e032      	b.n	8006d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2224      	movs	r2, #36	; 0x24
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0201 	bic.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6819      	ldr	r1, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	e000      	b.n	8006d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d58:	2302      	movs	r3, #2
  }
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	d139      	bne.n	8006df0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d86:	2302      	movs	r3, #2
 8006d88:	e033      	b.n	8006df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2224      	movs	r2, #36	; 0x24
 8006d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0201 	bic.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006db8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0201 	orr.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e000      	b.n	8006df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e04:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e10:	d102      	bne.n	8006e18 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e16:	e00b      	b.n	8006e30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006e18:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e26:	d102      	bne.n	8006e2e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2c:	e000      	b.n	8006e30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006e2e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	40007000 	.word	0x40007000

08006e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d141      	bne.n	8006ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e4e:	4b4b      	ldr	r3, [pc, #300]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5a:	d131      	bne.n	8006ec0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e5c:	4b47      	ldr	r3, [pc, #284]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e62:	4a46      	ldr	r2, [pc, #280]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e6c:	4b43      	ldr	r3, [pc, #268]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e74:	4a41      	ldr	r2, [pc, #260]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006e7c:	4b40      	ldr	r3, [pc, #256]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2232      	movs	r2, #50	; 0x32
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
 8006e86:	4a3f      	ldr	r2, [pc, #252]	; (8006f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e88:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8c:	0c9b      	lsrs	r3, r3, #18
 8006e8e:	3301      	adds	r3, #1
 8006e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e92:	e002      	b.n	8006e9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e9a:	4b38      	ldr	r3, [pc, #224]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea6:	d102      	bne.n	8006eae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f2      	bne.n	8006e94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eae:	4b33      	ldr	r3, [pc, #204]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eba:	d158      	bne.n	8006f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e057      	b.n	8006f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ec0:	4b2e      	ldr	r3, [pc, #184]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec6:	4a2d      	ldr	r2, [pc, #180]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ed0:	e04d      	b.n	8006f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed8:	d141      	bne.n	8006f5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006eda:	4b28      	ldr	r3, [pc, #160]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee6:	d131      	bne.n	8006f4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ee8:	4b24      	ldr	r3, [pc, #144]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eee:	4a23      	ldr	r2, [pc, #140]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ef8:	4b20      	ldr	r3, [pc, #128]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f00:	4a1e      	ldr	r2, [pc, #120]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006f08:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2232      	movs	r2, #50	; 0x32
 8006f0e:	fb02 f303 	mul.w	r3, r2, r3
 8006f12:	4a1c      	ldr	r2, [pc, #112]	; (8006f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	0c9b      	lsrs	r3, r3, #18
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f1e:	e002      	b.n	8006f26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f26:	4b15      	ldr	r3, [pc, #84]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f32:	d102      	bne.n	8006f3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f2      	bne.n	8006f20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f3a:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f46:	d112      	bne.n	8006f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e011      	b.n	8006f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f52:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f5c:	e007      	b.n	8006f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f66:	4a05      	ldr	r2, [pc, #20]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f6c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40007000 	.word	0x40007000
 8006f80:	20000254 	.word	0x20000254
 8006f84:	431bde83 	.word	0x431bde83

08006f88 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4a04      	ldr	r2, [pc, #16]	; (8006fa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f96:	6053      	str	r3, [r2, #4]
}
 8006f98:	bf00      	nop
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40007000 	.word	0x40007000

08006fa8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f000 bc08 	b.w	80077cc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fbc:	4b96      	ldr	r3, [pc, #600]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 030c 	and.w	r3, r3, #12
 8006fc4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fc6:	4b94      	ldr	r3, [pc, #592]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80e4 	beq.w	80071a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d007      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x4c>
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b0c      	cmp	r3, #12
 8006fe8:	f040 808b 	bne.w	8007102 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	f040 8087 	bne.w	8007102 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ff4:	4b88      	ldr	r3, [pc, #544]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <HAL_RCC_OscConfig+0x64>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e3df      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	4b81      	ldr	r3, [pc, #516]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <HAL_RCC_OscConfig+0x7e>
 800701c:	4b7e      	ldr	r3, [pc, #504]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007024:	e005      	b.n	8007032 <HAL_RCC_OscConfig+0x8a>
 8007026:	4b7c      	ldr	r3, [pc, #496]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800702c:	091b      	lsrs	r3, r3, #4
 800702e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007032:	4293      	cmp	r3, r2
 8007034:	d223      	bcs.n	800707e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fdcc 	bl	8007bd8 <RCC_SetFlashLatencyFromMSIRange>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e3c0      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800704a:	4b73      	ldr	r3, [pc, #460]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a72      	ldr	r2, [pc, #456]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007050:	f043 0308 	orr.w	r3, r3, #8
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4b70      	ldr	r3, [pc, #448]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	496d      	ldr	r1, [pc, #436]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007064:	4313      	orrs	r3, r2
 8007066:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007068:	4b6b      	ldr	r3, [pc, #428]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	4968      	ldr	r1, [pc, #416]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007078:	4313      	orrs	r3, r2
 800707a:	604b      	str	r3, [r1, #4]
 800707c:	e025      	b.n	80070ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800707e:	4b66      	ldr	r3, [pc, #408]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a65      	ldr	r2, [pc, #404]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007084:	f043 0308 	orr.w	r3, r3, #8
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	4b63      	ldr	r3, [pc, #396]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	4960      	ldr	r1, [pc, #384]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007098:	4313      	orrs	r3, r2
 800709a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800709c:	4b5e      	ldr	r3, [pc, #376]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	495b      	ldr	r1, [pc, #364]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fd8c 	bl	8007bd8 <RCC_SetFlashLatencyFromMSIRange>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e380      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070ca:	f000 fcc1 	bl	8007a50 <HAL_RCC_GetSysClockFreq>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b51      	ldr	r3, [pc, #324]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	4950      	ldr	r1, [pc, #320]	; (800721c <HAL_RCC_OscConfig+0x274>)
 80070dc:	5ccb      	ldrb	r3, [r1, r3]
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	fa22 f303 	lsr.w	r3, r2, r3
 80070e6:	4a4e      	ldr	r2, [pc, #312]	; (8007220 <HAL_RCC_OscConfig+0x278>)
 80070e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80070ea:	4b4e      	ldr	r3, [pc, #312]	; (8007224 <HAL_RCC_OscConfig+0x27c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fa58 	bl	80055a4 <HAL_InitTick>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d052      	beq.n	80071a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	e364      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d032      	beq.n	8007170 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800710a:	4b43      	ldr	r3, [pc, #268]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a42      	ldr	r2, [pc, #264]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007110:	f043 0301 	orr.w	r3, r3, #1
 8007114:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007116:	f7fe fa95 	bl	8005644 <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800711c:	e008      	b.n	8007130 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800711e:	f7fe fa91 	bl	8005644 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d901      	bls.n	8007130 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e34d      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007130:	4b39      	ldr	r3, [pc, #228]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d0f0      	beq.n	800711e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800713c:	4b36      	ldr	r3, [pc, #216]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a35      	ldr	r2, [pc, #212]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007142:	f043 0308 	orr.w	r3, r3, #8
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	4b33      	ldr	r3, [pc, #204]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	4930      	ldr	r1, [pc, #192]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007156:	4313      	orrs	r3, r2
 8007158:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800715a:	4b2f      	ldr	r3, [pc, #188]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	021b      	lsls	r3, r3, #8
 8007168:	492b      	ldr	r1, [pc, #172]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800716a:	4313      	orrs	r3, r2
 800716c:	604b      	str	r3, [r1, #4]
 800716e:	e01a      	b.n	80071a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007170:	4b29      	ldr	r3, [pc, #164]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a28      	ldr	r2, [pc, #160]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800717c:	f7fe fa62 	bl	8005644 <HAL_GetTick>
 8007180:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007184:	f7fe fa5e 	bl	8005644 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e31a      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007196:	4b20      	ldr	r3, [pc, #128]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1f0      	bne.n	8007184 <HAL_RCC_OscConfig+0x1dc>
 80071a2:	e000      	b.n	80071a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d073      	beq.n	800729a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d005      	beq.n	80071c4 <HAL_RCC_OscConfig+0x21c>
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2b0c      	cmp	r3, #12
 80071bc:	d10e      	bne.n	80071dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d10b      	bne.n	80071dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071c4:	4b14      	ldr	r3, [pc, #80]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d063      	beq.n	8007298 <HAL_RCC_OscConfig+0x2f0>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d15f      	bne.n	8007298 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e2f7      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e4:	d106      	bne.n	80071f4 <HAL_RCC_OscConfig+0x24c>
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a0b      	ldr	r2, [pc, #44]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 80071ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	e025      	b.n	8007240 <HAL_RCC_OscConfig+0x298>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071fc:	d114      	bne.n	8007228 <HAL_RCC_OscConfig+0x280>
 80071fe:	4b06      	ldr	r3, [pc, #24]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a05      	ldr	r2, [pc, #20]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	4b03      	ldr	r3, [pc, #12]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a02      	ldr	r2, [pc, #8]	; (8007218 <HAL_RCC_OscConfig+0x270>)
 8007210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	e013      	b.n	8007240 <HAL_RCC_OscConfig+0x298>
 8007218:	40021000 	.word	0x40021000
 800721c:	08028660 	.word	0x08028660
 8007220:	20000254 	.word	0x20000254
 8007224:	20000264 	.word	0x20000264
 8007228:	4ba0      	ldr	r3, [pc, #640]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a9f      	ldr	r2, [pc, #636]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800722e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b9d      	ldr	r3, [pc, #628]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a9c      	ldr	r2, [pc, #624]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800723a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800723e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d013      	beq.n	8007270 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f7fe f9fc 	bl	8005644 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007250:	f7fe f9f8 	bl	8005644 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b64      	cmp	r3, #100	; 0x64
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e2b4      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007262:	4b92      	ldr	r3, [pc, #584]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f0      	beq.n	8007250 <HAL_RCC_OscConfig+0x2a8>
 800726e:	e014      	b.n	800729a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fe f9e8 	bl	8005644 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007278:	f7fe f9e4 	bl	8005644 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b64      	cmp	r3, #100	; 0x64
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e2a0      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800728a:	4b88      	ldr	r3, [pc, #544]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x2d0>
 8007296:	e000      	b.n	800729a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d060      	beq.n	8007368 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d005      	beq.n	80072b8 <HAL_RCC_OscConfig+0x310>
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b0c      	cmp	r3, #12
 80072b0:	d119      	bne.n	80072e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d116      	bne.n	80072e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072b8:	4b7c      	ldr	r3, [pc, #496]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <HAL_RCC_OscConfig+0x328>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e27d      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d0:	4b76      	ldr	r3, [pc, #472]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	061b      	lsls	r3, r3, #24
 80072de:	4973      	ldr	r1, [pc, #460]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072e4:	e040      	b.n	8007368 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d023      	beq.n	8007336 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072ee:	4b6f      	ldr	r3, [pc, #444]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a6e      	ldr	r2, [pc, #440]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80072f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fa:	f7fe f9a3 	bl	8005644 <HAL_GetTick>
 80072fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007300:	e008      	b.n	8007314 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007302:	f7fe f99f 	bl	8005644 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d901      	bls.n	8007314 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e25b      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007314:	4b65      	ldr	r3, [pc, #404]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0f0      	beq.n	8007302 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007320:	4b62      	ldr	r3, [pc, #392]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	061b      	lsls	r3, r3, #24
 800732e:	495f      	ldr	r1, [pc, #380]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007330:	4313      	orrs	r3, r2
 8007332:	604b      	str	r3, [r1, #4]
 8007334:	e018      	b.n	8007368 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007336:	4b5d      	ldr	r3, [pc, #372]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a5c      	ldr	r2, [pc, #368]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800733c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007342:	f7fe f97f 	bl	8005644 <HAL_GetTick>
 8007346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007348:	e008      	b.n	800735c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800734a:	f7fe f97b 	bl	8005644 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e237      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800735c:	4b53      	ldr	r3, [pc, #332]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f0      	bne.n	800734a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b00      	cmp	r3, #0
 8007372:	d03c      	beq.n	80073ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01c      	beq.n	80073b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800737c:	4b4b      	ldr	r3, [pc, #300]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800737e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007382:	4a4a      	ldr	r2, [pc, #296]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007384:	f043 0301 	orr.w	r3, r3, #1
 8007388:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738c:	f7fe f95a 	bl	8005644 <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007394:	f7fe f956 	bl	8005644 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e212      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073a6:	4b41      	ldr	r3, [pc, #260]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80073a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0ef      	beq.n	8007394 <HAL_RCC_OscConfig+0x3ec>
 80073b4:	e01b      	b.n	80073ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073b6:	4b3d      	ldr	r3, [pc, #244]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80073b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073bc:	4a3b      	ldr	r2, [pc, #236]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c6:	f7fe f93d 	bl	8005644 <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073cc:	e008      	b.n	80073e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ce:	f7fe f939 	bl	8005644 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e1f5      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073e0:	4b32      	ldr	r3, [pc, #200]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80073e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1ef      	bne.n	80073ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 80a6 	beq.w	8007548 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073fc:	2300      	movs	r3, #0
 80073fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007400:	4b2a      	ldr	r3, [pc, #168]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10d      	bne.n	8007428 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800740c:	4b27      	ldr	r3, [pc, #156]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800740e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007410:	4a26      	ldr	r2, [pc, #152]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007416:	6593      	str	r3, [r2, #88]	; 0x58
 8007418:	4b24      	ldr	r3, [pc, #144]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007424:	2301      	movs	r3, #1
 8007426:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007428:	4b21      	ldr	r3, [pc, #132]	; (80074b0 <HAL_RCC_OscConfig+0x508>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007430:	2b00      	cmp	r3, #0
 8007432:	d118      	bne.n	8007466 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007434:	4b1e      	ldr	r3, [pc, #120]	; (80074b0 <HAL_RCC_OscConfig+0x508>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1d      	ldr	r2, [pc, #116]	; (80074b0 <HAL_RCC_OscConfig+0x508>)
 800743a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800743e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007440:	f7fe f900 	bl	8005644 <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007448:	f7fe f8fc 	bl	8005644 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e1b8      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800745a:	4b15      	ldr	r3, [pc, #84]	; (80074b0 <HAL_RCC_OscConfig+0x508>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0f0      	beq.n	8007448 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d108      	bne.n	8007480 <HAL_RCC_OscConfig+0x4d8>
 800746e:	4b0f      	ldr	r3, [pc, #60]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	4a0d      	ldr	r2, [pc, #52]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007476:	f043 0301 	orr.w	r3, r3, #1
 800747a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800747e:	e029      	b.n	80074d4 <HAL_RCC_OscConfig+0x52c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	2b05      	cmp	r3, #5
 8007486:	d115      	bne.n	80074b4 <HAL_RCC_OscConfig+0x50c>
 8007488:	4b08      	ldr	r3, [pc, #32]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748e:	4a07      	ldr	r2, [pc, #28]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 8007490:	f043 0304 	orr.w	r3, r3, #4
 8007494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007498:	4b04      	ldr	r3, [pc, #16]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 800749a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749e:	4a03      	ldr	r2, [pc, #12]	; (80074ac <HAL_RCC_OscConfig+0x504>)
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074a8:	e014      	b.n	80074d4 <HAL_RCC_OscConfig+0x52c>
 80074aa:	bf00      	nop
 80074ac:	40021000 	.word	0x40021000
 80074b0:	40007000 	.word	0x40007000
 80074b4:	4b9d      	ldr	r3, [pc, #628]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	4a9c      	ldr	r2, [pc, #624]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074c4:	4b99      	ldr	r3, [pc, #612]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80074c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ca:	4a98      	ldr	r2, [pc, #608]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80074cc:	f023 0304 	bic.w	r3, r3, #4
 80074d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d016      	beq.n	800750a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074dc:	f7fe f8b2 	bl	8005644 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074e2:	e00a      	b.n	80074fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e4:	f7fe f8ae 	bl	8005644 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e168      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074fa:	4b8c      	ldr	r3, [pc, #560]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0ed      	beq.n	80074e4 <HAL_RCC_OscConfig+0x53c>
 8007508:	e015      	b.n	8007536 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750a:	f7fe f89b 	bl	8005644 <HAL_GetTick>
 800750e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007510:	e00a      	b.n	8007528 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007512:	f7fe f897 	bl	8005644 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007520:	4293      	cmp	r3, r2
 8007522:	d901      	bls.n	8007528 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e151      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007528:	4b80      	ldr	r3, [pc, #512]	; (800772c <HAL_RCC_OscConfig+0x784>)
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1ed      	bne.n	8007512 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007536:	7ffb      	ldrb	r3, [r7, #31]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d105      	bne.n	8007548 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800753c:	4b7b      	ldr	r3, [pc, #492]	; (800772c <HAL_RCC_OscConfig+0x784>)
 800753e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007540:	4a7a      	ldr	r2, [pc, #488]	; (800772c <HAL_RCC_OscConfig+0x784>)
 8007542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007546:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d03c      	beq.n	80075ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01c      	beq.n	8007596 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800755c:	4b73      	ldr	r3, [pc, #460]	; (800772c <HAL_RCC_OscConfig+0x784>)
 800755e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007562:	4a72      	ldr	r2, [pc, #456]	; (800772c <HAL_RCC_OscConfig+0x784>)
 8007564:	f043 0301 	orr.w	r3, r3, #1
 8007568:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756c:	f7fe f86a 	bl	8005644 <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007574:	f7fe f866 	bl	8005644 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e122      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007586:	4b69      	ldr	r3, [pc, #420]	; (800772c <HAL_RCC_OscConfig+0x784>)
 8007588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0ef      	beq.n	8007574 <HAL_RCC_OscConfig+0x5cc>
 8007594:	e01b      	b.n	80075ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007596:	4b65      	ldr	r3, [pc, #404]	; (800772c <HAL_RCC_OscConfig+0x784>)
 8007598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800759c:	4a63      	ldr	r2, [pc, #396]	; (800772c <HAL_RCC_OscConfig+0x784>)
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a6:	f7fe f84d 	bl	8005644 <HAL_GetTick>
 80075aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075ac:	e008      	b.n	80075c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075ae:	f7fe f849 	bl	8005644 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e105      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075c0:	4b5a      	ldr	r3, [pc, #360]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80075c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1ef      	bne.n	80075ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80f9 	beq.w	80077ca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	2b02      	cmp	r3, #2
 80075de:	f040 80cf 	bne.w	8007780 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80075e2:	4b52      	ldr	r3, [pc, #328]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f003 0203 	and.w	r2, r3, #3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d12c      	bne.n	8007650 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	3b01      	subs	r3, #1
 8007602:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007604:	429a      	cmp	r2, r3
 8007606:	d123      	bne.n	8007650 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d11b      	bne.n	8007650 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007624:	429a      	cmp	r2, r3
 8007626:	d113      	bne.n	8007650 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	085b      	lsrs	r3, r3, #1
 8007634:	3b01      	subs	r3, #1
 8007636:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007638:	429a      	cmp	r2, r3
 800763a:	d109      	bne.n	8007650 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	3b01      	subs	r3, #1
 800764a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800764c:	429a      	cmp	r2, r3
 800764e:	d071      	beq.n	8007734 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b0c      	cmp	r3, #12
 8007654:	d068      	beq.n	8007728 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007656:	4b35      	ldr	r3, [pc, #212]	; (800772c <HAL_RCC_OscConfig+0x784>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d105      	bne.n	800766e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007662:	4b32      	ldr	r3, [pc, #200]	; (800772c <HAL_RCC_OscConfig+0x784>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e0ac      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007672:	4b2e      	ldr	r3, [pc, #184]	; (800772c <HAL_RCC_OscConfig+0x784>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a2d      	ldr	r2, [pc, #180]	; (800772c <HAL_RCC_OscConfig+0x784>)
 8007678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800767c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800767e:	f7fd ffe1 	bl	8005644 <HAL_GetTick>
 8007682:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007684:	e008      	b.n	8007698 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007686:	f7fd ffdd 	bl	8005644 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d901      	bls.n	8007698 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e099      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007698:	4b24      	ldr	r3, [pc, #144]	; (800772c <HAL_RCC_OscConfig+0x784>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f0      	bne.n	8007686 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076a4:	4b21      	ldr	r3, [pc, #132]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	4b21      	ldr	r3, [pc, #132]	; (8007730 <HAL_RCC_OscConfig+0x788>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076b4:	3a01      	subs	r2, #1
 80076b6:	0112      	lsls	r2, r2, #4
 80076b8:	4311      	orrs	r1, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076be:	0212      	lsls	r2, r2, #8
 80076c0:	4311      	orrs	r1, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80076c6:	0852      	lsrs	r2, r2, #1
 80076c8:	3a01      	subs	r2, #1
 80076ca:	0552      	lsls	r2, r2, #21
 80076cc:	4311      	orrs	r1, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80076d2:	0852      	lsrs	r2, r2, #1
 80076d4:	3a01      	subs	r2, #1
 80076d6:	0652      	lsls	r2, r2, #25
 80076d8:	4311      	orrs	r1, r2
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076de:	06d2      	lsls	r2, r2, #27
 80076e0:	430a      	orrs	r2, r1
 80076e2:	4912      	ldr	r1, [pc, #72]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80076e8:	4b10      	ldr	r3, [pc, #64]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a0f      	ldr	r2, [pc, #60]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80076ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076f4:	4b0d      	ldr	r3, [pc, #52]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4a0c      	ldr	r2, [pc, #48]	; (800772c <HAL_RCC_OscConfig+0x784>)
 80076fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007700:	f7fd ffa0 	bl	8005644 <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007708:	f7fd ff9c 	bl	8005644 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e058      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800771a:	4b04      	ldr	r3, [pc, #16]	; (800772c <HAL_RCC_OscConfig+0x784>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007726:	e050      	b.n	80077ca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e04f      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
 800772c:	40021000 	.word	0x40021000
 8007730:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007734:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d144      	bne.n	80077ca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007740:	4b24      	ldr	r3, [pc, #144]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a23      	ldr	r2, [pc, #140]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 8007746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800774a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800774c:	4b21      	ldr	r3, [pc, #132]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	4a20      	ldr	r2, [pc, #128]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 8007752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007756:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007758:	f7fd ff74 	bl	8005644 <HAL_GetTick>
 800775c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800775e:	e008      	b.n	8007772 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007760:	f7fd ff70 	bl	8005644 <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d901      	bls.n	8007772 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e02c      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007772:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0f0      	beq.n	8007760 <HAL_RCC_OscConfig+0x7b8>
 800777e:	e024      	b.n	80077ca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b0c      	cmp	r3, #12
 8007784:	d01f      	beq.n	80077c6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007786:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a12      	ldr	r2, [pc, #72]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 800778c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007792:	f7fd ff57 	bl	8005644 <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800779a:	f7fd ff53 	bl	8005644 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e00f      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077ac:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f0      	bne.n	800779a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80077b8:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	4905      	ldr	r1, [pc, #20]	; (80077d4 <HAL_RCC_OscConfig+0x82c>)
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <HAL_RCC_OscConfig+0x830>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	60cb      	str	r3, [r1, #12]
 80077c4:	e001      	b.n	80077ca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3720      	adds	r7, #32
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40021000 	.word	0x40021000
 80077d8:	feeefffc 	.word	0xfeeefffc

080077dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80077e6:	2300      	movs	r3, #0
 80077e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e11d      	b.n	8007a30 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077f4:	4b90      	ldr	r3, [pc, #576]	; (8007a38 <HAL_RCC_ClockConfig+0x25c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d910      	bls.n	8007824 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007802:	4b8d      	ldr	r3, [pc, #564]	; (8007a38 <HAL_RCC_ClockConfig+0x25c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f023 020f 	bic.w	r2, r3, #15
 800780a:	498b      	ldr	r1, [pc, #556]	; (8007a38 <HAL_RCC_ClockConfig+0x25c>)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	4313      	orrs	r3, r2
 8007810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007812:	4b89      	ldr	r3, [pc, #548]	; (8007a38 <HAL_RCC_ClockConfig+0x25c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d001      	beq.n	8007824 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e105      	b.n	8007a30 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d010      	beq.n	8007852 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	4b81      	ldr	r3, [pc, #516]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800783c:	429a      	cmp	r2, r3
 800783e:	d908      	bls.n	8007852 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007840:	4b7e      	ldr	r3, [pc, #504]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	497b      	ldr	r1, [pc, #492]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 800784e:	4313      	orrs	r3, r2
 8007850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d079      	beq.n	8007952 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b03      	cmp	r3, #3
 8007864:	d11e      	bne.n	80078a4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007866:	4b75      	ldr	r3, [pc, #468]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e0dc      	b.n	8007a30 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007876:	f000 fa09 	bl	8007c8c <RCC_GetSysClockFreqFromPLLSource>
 800787a:	4603      	mov	r3, r0
 800787c:	4a70      	ldr	r2, [pc, #448]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d946      	bls.n	8007910 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007882:	4b6e      	ldr	r3, [pc, #440]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d140      	bne.n	8007910 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800788e:	4b6b      	ldr	r3, [pc, #428]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007896:	4a69      	ldr	r2, [pc, #420]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800789c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800789e:	2380      	movs	r3, #128	; 0x80
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	e035      	b.n	8007910 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d107      	bne.n	80078bc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078ac:	4b63      	ldr	r3, [pc, #396]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d115      	bne.n	80078e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0b9      	b.n	8007a30 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d107      	bne.n	80078d4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80078c4:	4b5d      	ldr	r3, [pc, #372]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e0ad      	b.n	8007a30 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078d4:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0a5      	b.n	8007a30 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80078e4:	f000 f8b4 	bl	8007a50 <HAL_RCC_GetSysClockFreq>
 80078e8:	4603      	mov	r3, r0
 80078ea:	4a55      	ldr	r2, [pc, #340]	; (8007a40 <HAL_RCC_ClockConfig+0x264>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d90f      	bls.n	8007910 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80078f0:	4b52      	ldr	r3, [pc, #328]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078fc:	4b4f      	ldr	r3, [pc, #316]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007904:	4a4d      	ldr	r2, [pc, #308]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800790c:	2380      	movs	r3, #128	; 0x80
 800790e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007910:	4b4a      	ldr	r3, [pc, #296]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f023 0203 	bic.w	r2, r3, #3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	4947      	ldr	r1, [pc, #284]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 800791e:	4313      	orrs	r3, r2
 8007920:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007922:	f7fd fe8f 	bl	8005644 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007928:	e00a      	b.n	8007940 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800792a:	f7fd fe8b 	bl	8005644 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f241 3288 	movw	r2, #5000	; 0x1388
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e077      	b.n	8007a30 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007940:	4b3e      	ldr	r3, [pc, #248]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 020c 	and.w	r2, r3, #12
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	429a      	cmp	r2, r3
 8007950:	d1eb      	bne.n	800792a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b80      	cmp	r3, #128	; 0x80
 8007956:	d105      	bne.n	8007964 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007958:	4b38      	ldr	r3, [pc, #224]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	4a37      	ldr	r2, [pc, #220]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 800795e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007962:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d010      	beq.n	8007992 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	4b31      	ldr	r3, [pc, #196]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800797c:	429a      	cmp	r2, r3
 800797e:	d208      	bcs.n	8007992 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007980:	4b2e      	ldr	r3, [pc, #184]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	492b      	ldr	r1, [pc, #172]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 800798e:	4313      	orrs	r3, r2
 8007990:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007992:	4b29      	ldr	r3, [pc, #164]	; (8007a38 <HAL_RCC_ClockConfig+0x25c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d210      	bcs.n	80079c2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a0:	4b25      	ldr	r3, [pc, #148]	; (8007a38 <HAL_RCC_ClockConfig+0x25c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f023 020f 	bic.w	r2, r3, #15
 80079a8:	4923      	ldr	r1, [pc, #140]	; (8007a38 <HAL_RCC_ClockConfig+0x25c>)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b0:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <HAL_RCC_ClockConfig+0x25c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d001      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e036      	b.n	8007a30 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d008      	beq.n	80079e0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079ce:	4b1b      	ldr	r3, [pc, #108]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	4918      	ldr	r1, [pc, #96]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0308 	and.w	r3, r3, #8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d009      	beq.n	8007a00 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079ec:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4910      	ldr	r1, [pc, #64]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a00:	f000 f826 	bl	8007a50 <HAL_RCC_GetSysClockFreq>
 8007a04:	4602      	mov	r2, r0
 8007a06:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <HAL_RCC_ClockConfig+0x260>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	490c      	ldr	r1, [pc, #48]	; (8007a44 <HAL_RCC_ClockConfig+0x268>)
 8007a12:	5ccb      	ldrb	r3, [r1, r3]
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	4a0a      	ldr	r2, [pc, #40]	; (8007a48 <HAL_RCC_ClockConfig+0x26c>)
 8007a1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a20:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <HAL_RCC_ClockConfig+0x270>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fd fdbd 	bl	80055a4 <HAL_InitTick>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]

  return status;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	40022000 	.word	0x40022000
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	04c4b400 	.word	0x04c4b400
 8007a44:	08028660 	.word	0x08028660
 8007a48:	20000254 	.word	0x20000254
 8007a4c:	20000264 	.word	0x20000264

08007a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b089      	sub	sp, #36	; 0x24
 8007a54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a5e:	4b3e      	ldr	r3, [pc, #248]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 030c 	and.w	r3, r3, #12
 8007a66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a68:	4b3b      	ldr	r3, [pc, #236]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_RCC_GetSysClockFreq+0x34>
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	2b0c      	cmp	r3, #12
 8007a7c:	d121      	bne.n	8007ac2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d11e      	bne.n	8007ac2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007a84:	4b34      	ldr	r3, [pc, #208]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0308 	and.w	r3, r3, #8
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d107      	bne.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007a90:	4b31      	ldr	r3, [pc, #196]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a96:	0a1b      	lsrs	r3, r3, #8
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	61fb      	str	r3, [r7, #28]
 8007a9e:	e005      	b.n	8007aac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007aa0:	4b2d      	ldr	r3, [pc, #180]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	091b      	lsrs	r3, r3, #4
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007aac:	4a2b      	ldr	r2, [pc, #172]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10d      	bne.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ac0:	e00a      	b.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d102      	bne.n	8007ace <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ac8:	4b25      	ldr	r3, [pc, #148]	; (8007b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	e004      	b.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d101      	bne.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ad4:	4b23      	ldr	r3, [pc, #140]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8007ad6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2b0c      	cmp	r3, #12
 8007adc:	d134      	bne.n	8007b48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ade:	4b1e      	ldr	r3, [pc, #120]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d003      	beq.n	8007af6 <HAL_RCC_GetSysClockFreq+0xa6>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d003      	beq.n	8007afc <HAL_RCC_GetSysClockFreq+0xac>
 8007af4:	e005      	b.n	8007b02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007af6:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8007af8:	617b      	str	r3, [r7, #20]
      break;
 8007afa:	e005      	b.n	8007b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007afc:	4b19      	ldr	r3, [pc, #100]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8007afe:	617b      	str	r3, [r7, #20]
      break;
 8007b00:	e002      	b.n	8007b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	617b      	str	r3, [r7, #20]
      break;
 8007b06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b08:	4b13      	ldr	r3, [pc, #76]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	091b      	lsrs	r3, r3, #4
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	3301      	adds	r3, #1
 8007b14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b16:	4b10      	ldr	r3, [pc, #64]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	0a1b      	lsrs	r3, r3, #8
 8007b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	fb03 f202 	mul.w	r2, r3, r2
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b2e:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	0e5b      	lsrs	r3, r3, #25
 8007b34:	f003 0303 	and.w	r3, r3, #3
 8007b38:	3301      	adds	r3, #1
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007b48:	69bb      	ldr	r3, [r7, #24]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3724      	adds	r7, #36	; 0x24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40021000 	.word	0x40021000
 8007b5c:	08028678 	.word	0x08028678
 8007b60:	00f42400 	.word	0x00f42400
 8007b64:	007a1200 	.word	0x007a1200

08007b68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b6c:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	20000254 	.word	0x20000254

08007b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b84:	f7ff fff0 	bl	8007b68 <HAL_RCC_GetHCLKFreq>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	0a1b      	lsrs	r3, r3, #8
 8007b90:	f003 0307 	and.w	r3, r3, #7
 8007b94:	4904      	ldr	r1, [pc, #16]	; (8007ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b96:	5ccb      	ldrb	r3, [r1, r3]
 8007b98:	f003 031f 	and.w	r3, r3, #31
 8007b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	40021000 	.word	0x40021000
 8007ba8:	08028670 	.word	0x08028670

08007bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007bb0:	f7ff ffda 	bl	8007b68 <HAL_RCC_GetHCLKFreq>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	0adb      	lsrs	r3, r3, #11
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	4904      	ldr	r1, [pc, #16]	; (8007bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bc2:	5ccb      	ldrb	r3, [r1, r3]
 8007bc4:	f003 031f 	and.w	r3, r3, #31
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	40021000 	.word	0x40021000
 8007bd4:	08028670 	.word	0x08028670

08007bd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007be4:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007bf0:	f7ff f906 	bl	8006e00 <HAL_PWREx_GetVoltageRange>
 8007bf4:	6178      	str	r0, [r7, #20]
 8007bf6:	e014      	b.n	8007c22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bf8:	4b22      	ldr	r3, [pc, #136]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	4a21      	ldr	r2, [pc, #132]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c02:	6593      	str	r3, [r2, #88]	; 0x58
 8007c04:	4b1f      	ldr	r3, [pc, #124]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007c10:	f7ff f8f6 	bl	8006e00 <HAL_PWREx_GetVoltageRange>
 8007c14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007c16:	4b1b      	ldr	r3, [pc, #108]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1a:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c28:	d10b      	bne.n	8007c42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b80      	cmp	r3, #128	; 0x80
 8007c2e:	d913      	bls.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2ba0      	cmp	r3, #160	; 0xa0
 8007c34:	d902      	bls.n	8007c3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c36:	2302      	movs	r3, #2
 8007c38:	613b      	str	r3, [r7, #16]
 8007c3a:	e00d      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	e00a      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b7f      	cmp	r3, #127	; 0x7f
 8007c46:	d902      	bls.n	8007c4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007c48:	2302      	movs	r3, #2
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	e004      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b70      	cmp	r3, #112	; 0x70
 8007c52:	d101      	bne.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c54:	2301      	movs	r3, #1
 8007c56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c58:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f023 020f 	bic.w	r2, r3, #15
 8007c60:	4909      	ldr	r1, [pc, #36]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d001      	beq.n	8007c7a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40021000 	.word	0x40021000
 8007c88:	40022000 	.word	0x40022000

08007c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c92:	4b2d      	ldr	r3, [pc, #180]	; (8007d48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d00b      	beq.n	8007cba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d825      	bhi.n	8007cf4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d008      	beq.n	8007cc0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d11f      	bne.n	8007cf4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007cb4:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007cb6:	613b      	str	r3, [r7, #16]
    break;
 8007cb8:	e01f      	b.n	8007cfa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007cba:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007cbc:	613b      	str	r3, [r7, #16]
    break;
 8007cbe:	e01c      	b.n	8007cfa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007cc0:	4b21      	ldr	r3, [pc, #132]	; (8007d48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d107      	bne.n	8007cdc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ccc:	4b1e      	ldr	r3, [pc, #120]	; (8007d48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	e005      	b.n	8007ce8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007ce8:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf0:	613b      	str	r3, [r7, #16]
    break;
 8007cf2:	e002      	b.n	8007cfa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	613b      	str	r3, [r7, #16]
    break;
 8007cf8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	091b      	lsrs	r3, r3, #4
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	3301      	adds	r3, #1
 8007d06:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	0a1b      	lsrs	r3, r3, #8
 8007d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	fb03 f202 	mul.w	r2, r3, r2
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	0e5b      	lsrs	r3, r3, #25
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d38:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007d3a:	683b      	ldr	r3, [r7, #0]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	40021000 	.word	0x40021000
 8007d4c:	00f42400 	.word	0x00f42400
 8007d50:	007a1200 	.word	0x007a1200
 8007d54:	08028678 	.word	0x08028678

08007d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d60:	2300      	movs	r3, #0
 8007d62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d64:	2300      	movs	r3, #0
 8007d66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d040      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d78:	2b80      	cmp	r3, #128	; 0x80
 8007d7a:	d02a      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d7c:	2b80      	cmp	r3, #128	; 0x80
 8007d7e:	d825      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d80:	2b60      	cmp	r3, #96	; 0x60
 8007d82:	d026      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d84:	2b60      	cmp	r3, #96	; 0x60
 8007d86:	d821      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d006      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d81d      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d009      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d010      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007d98:	e018      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d9a:	4b89      	ldr	r3, [pc, #548]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	4a88      	ldr	r2, [pc, #544]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007da6:	e015      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3304      	adds	r3, #4
 8007dac:	2100      	movs	r1, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fb02 	bl	80083b8 <RCCEx_PLLSAI1_Config>
 8007db4:	4603      	mov	r3, r0
 8007db6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007db8:	e00c      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3320      	adds	r3, #32
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fbed 	bl	80085a0 <RCCEx_PLLSAI2_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007dca:	e003      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	74fb      	strb	r3, [r7, #19]
      break;
 8007dd0:	e000      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dd4:	7cfb      	ldrb	r3, [r7, #19]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dda:	4b79      	ldr	r3, [pc, #484]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ddc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007de0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de8:	4975      	ldr	r1, [pc, #468]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007df0:	e001      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df2:	7cfb      	ldrb	r3, [r7, #19]
 8007df4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d047      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0a:	d030      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e10:	d82a      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e16:	d02a      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e1c:	d824      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e22:	d008      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e28:	d81e      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e32:	d010      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e34:	e018      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e36:	4b62      	ldr	r3, [pc, #392]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	4a61      	ldr	r2, [pc, #388]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e40:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e42:	e015      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fab4 	bl	80083b8 <RCCEx_PLLSAI1_Config>
 8007e50:	4603      	mov	r3, r0
 8007e52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e54:	e00c      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3320      	adds	r3, #32
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 fb9f 	bl	80085a0 <RCCEx_PLLSAI2_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e66:	e003      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	74fb      	strb	r3, [r7, #19]
      break;
 8007e6c:	e000      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e70:	7cfb      	ldrb	r3, [r7, #19]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10b      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007e76:	4b52      	ldr	r3, [pc, #328]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e84:	494e      	ldr	r1, [pc, #312]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007e8c:	e001      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8e:	7cfb      	ldrb	r3, [r7, #19]
 8007e90:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 809f 	beq.w	8007fde <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007ea4:	4b46      	ldr	r3, [pc, #280]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00d      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eba:	4b41      	ldr	r3, [pc, #260]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebe:	4a40      	ldr	r2, [pc, #256]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8007ec6:	4b3e      	ldr	r3, [pc, #248]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ed6:	4b3b      	ldr	r3, [pc, #236]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a3a      	ldr	r2, [pc, #232]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ee2:	f7fd fbaf 	bl	8005644 <HAL_GetTick>
 8007ee6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ee8:	e009      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eea:	f7fd fbab 	bl	8005644 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d902      	bls.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	74fb      	strb	r3, [r7, #19]
        break;
 8007efc:	e005      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007efe:	4b31      	ldr	r3, [pc, #196]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0ef      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007f0a:	7cfb      	ldrb	r3, [r7, #19]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d15b      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f10:	4b2b      	ldr	r3, [pc, #172]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d01f      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d019      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f2e:	4b24      	ldr	r3, [pc, #144]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f3a:	4b21      	ldr	r3, [pc, #132]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f40:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f50:	4a1b      	ldr	r2, [pc, #108]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f5a:	4a19      	ldr	r2, [pc, #100]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d016      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6c:	f7fd fb6a 	bl	8005644 <HAL_GetTick>
 8007f70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f72:	e00b      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f74:	f7fd fb66 	bl	8005644 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d902      	bls.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	74fb      	strb	r3, [r7, #19]
            break;
 8007f8a:	e006      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0ec      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007f9a:	7cfb      	ldrb	r3, [r7, #19]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10c      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fa0:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb0:	4903      	ldr	r1, [pc, #12]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007fb8:	e008      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007fba:	7cfb      	ldrb	r3, [r7, #19]
 8007fbc:	74bb      	strb	r3, [r7, #18]
 8007fbe:	e005      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007fc0:	40021000 	.word	0x40021000
 8007fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc8:	7cfb      	ldrb	r3, [r7, #19]
 8007fca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fcc:	7c7b      	ldrb	r3, [r7, #17]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d105      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fd2:	4ba0      	ldr	r3, [pc, #640]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd6:	4a9f      	ldr	r2, [pc, #636]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fea:	4b9a      	ldr	r3, [pc, #616]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff0:	f023 0203 	bic.w	r2, r3, #3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	4996      	ldr	r1, [pc, #600]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00a      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800800c:	4b91      	ldr	r3, [pc, #580]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800800e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008012:	f023 020c 	bic.w	r2, r3, #12
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	498e      	ldr	r1, [pc, #568]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800801c:	4313      	orrs	r3, r2
 800801e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800802e:	4b89      	ldr	r3, [pc, #548]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008034:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803c:	4985      	ldr	r1, [pc, #532]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800803e:	4313      	orrs	r3, r2
 8008040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0308 	and.w	r3, r3, #8
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008050:	4b80      	ldr	r3, [pc, #512]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800805e:	497d      	ldr	r1, [pc, #500]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0310 	and.w	r3, r3, #16
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008072:	4b78      	ldr	r3, [pc, #480]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008080:	4974      	ldr	r1, [pc, #464]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00a      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008094:	4b6f      	ldr	r3, [pc, #444]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a2:	496c      	ldr	r1, [pc, #432]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080b6:	4b67      	ldr	r3, [pc, #412]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c4:	4963      	ldr	r1, [pc, #396]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080d8:	4b5e      	ldr	r3, [pc, #376]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080e6:	495b      	ldr	r1, [pc, #364]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080fa:	4b56      	ldr	r3, [pc, #344]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008100:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008108:	4952      	ldr	r1, [pc, #328]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800811c:	4b4d      	ldr	r3, [pc, #308]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800811e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008122:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812a:	494a      	ldr	r1, [pc, #296]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800813e:	4b45      	ldr	r3, [pc, #276]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814c:	4941      	ldr	r1, [pc, #260]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008160:	4b3c      	ldr	r3, [pc, #240]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008166:	f023 0203 	bic.w	r2, r3, #3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816e:	4939      	ldr	r1, [pc, #228]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d028      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008182:	4b34      	ldr	r3, [pc, #208]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008188:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008190:	4930      	ldr	r1, [pc, #192]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800819c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081a0:	d106      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081a2:	4b2c      	ldr	r3, [pc, #176]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	4a2b      	ldr	r2, [pc, #172]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081ac:	60d3      	str	r3, [r2, #12]
 80081ae:	e011      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081b8:	d10c      	bne.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3304      	adds	r3, #4
 80081be:	2101      	movs	r1, #1
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 f8f9 	bl	80083b8 <RCCEx_PLLSAI1_Config>
 80081c6:	4603      	mov	r3, r0
 80081c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80081ca:	7cfb      	ldrb	r3, [r7, #19]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80081d0:	7cfb      	ldrb	r3, [r7, #19]
 80081d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d04d      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081e8:	d108      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80081ea:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081f0:	4a18      	ldr	r2, [pc, #96]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80081fa:	e012      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80081fc:	4b15      	ldr	r3, [pc, #84]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008202:	4a14      	ldr	r2, [pc, #80]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008208:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800820c:	4b11      	ldr	r3, [pc, #68]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800820e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008212:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800821a:	490e      	ldr	r1, [pc, #56]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800821c:	4313      	orrs	r3, r2
 800821e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800822a:	d106      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800822c:	4b09      	ldr	r3, [pc, #36]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	4a08      	ldr	r2, [pc, #32]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008236:	60d3      	str	r3, [r2, #12]
 8008238:	e020      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800823e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008242:	d109      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008244:	4b03      	ldr	r3, [pc, #12]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	4a02      	ldr	r2, [pc, #8]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800824a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800824e:	60d3      	str	r3, [r2, #12]
 8008250:	e014      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008252:	bf00      	nop
 8008254:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800825c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008260:	d10c      	bne.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3304      	adds	r3, #4
 8008266:	2101      	movs	r1, #1
 8008268:	4618      	mov	r0, r3
 800826a:	f000 f8a5 	bl	80083b8 <RCCEx_PLLSAI1_Config>
 800826e:	4603      	mov	r3, r0
 8008270:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008272:	7cfb      	ldrb	r3, [r7, #19]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008278:	7cfb      	ldrb	r3, [r7, #19]
 800827a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d028      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008288:	4b4a      	ldr	r3, [pc, #296]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800828a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008296:	4947      	ldr	r1, [pc, #284]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008298:	4313      	orrs	r3, r2
 800829a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082a6:	d106      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082a8:	4b42      	ldr	r3, [pc, #264]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	4a41      	ldr	r2, [pc, #260]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082b2:	60d3      	str	r3, [r2, #12]
 80082b4:	e011      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082be:	d10c      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3304      	adds	r3, #4
 80082c4:	2101      	movs	r1, #1
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f876 	bl	80083b8 <RCCEx_PLLSAI1_Config>
 80082cc:	4603      	mov	r3, r0
 80082ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082d0:	7cfb      	ldrb	r3, [r7, #19]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80082d6:	7cfb      	ldrb	r3, [r7, #19]
 80082d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d01e      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082e6:	4b33      	ldr	r3, [pc, #204]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082f6:	492f      	ldr	r1, [pc, #188]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008304:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008308:	d10c      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3304      	adds	r3, #4
 800830e:	2102      	movs	r1, #2
 8008310:	4618      	mov	r0, r3
 8008312:	f000 f851 	bl	80083b8 <RCCEx_PLLSAI1_Config>
 8008316:	4603      	mov	r3, r0
 8008318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800831a:	7cfb      	ldrb	r3, [r7, #19]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008320:	7cfb      	ldrb	r3, [r7, #19]
 8008322:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008330:	4b20      	ldr	r3, [pc, #128]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008336:	f023 0204 	bic.w	r2, r3, #4
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008340:	491c      	ldr	r1, [pc, #112]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008342:	4313      	orrs	r3, r2
 8008344:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008354:	4b17      	ldr	r3, [pc, #92]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008356:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800835a:	f023 0218 	bic.w	r2, r3, #24
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008364:	4913      	ldr	r1, [pc, #76]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d017      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008378:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800837a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800837e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008388:	490a      	ldr	r1, [pc, #40]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800838a:	4313      	orrs	r3, r2
 800838c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800839a:	d105      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	4a04      	ldr	r2, [pc, #16]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80083a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	40021000 	.word	0x40021000

080083b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80083c6:	4b72      	ldr	r3, [pc, #456]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f003 0303 	and.w	r3, r3, #3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00e      	beq.n	80083f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80083d2:	4b6f      	ldr	r3, [pc, #444]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f003 0203 	and.w	r2, r3, #3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d103      	bne.n	80083ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
       ||
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d142      	bne.n	8008470 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	73fb      	strb	r3, [r7, #15]
 80083ee:	e03f      	b.n	8008470 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d018      	beq.n	800842a <RCCEx_PLLSAI1_Config+0x72>
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d825      	bhi.n	8008448 <RCCEx_PLLSAI1_Config+0x90>
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d002      	beq.n	8008406 <RCCEx_PLLSAI1_Config+0x4e>
 8008400:	2b02      	cmp	r3, #2
 8008402:	d009      	beq.n	8008418 <RCCEx_PLLSAI1_Config+0x60>
 8008404:	e020      	b.n	8008448 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008406:	4b62      	ldr	r3, [pc, #392]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d11d      	bne.n	800844e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008416:	e01a      	b.n	800844e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008418:	4b5d      	ldr	r3, [pc, #372]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008420:	2b00      	cmp	r3, #0
 8008422:	d116      	bne.n	8008452 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008428:	e013      	b.n	8008452 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800842a:	4b59      	ldr	r3, [pc, #356]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10f      	bne.n	8008456 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008436:	4b56      	ldr	r3, [pc, #344]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008446:	e006      	b.n	8008456 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
      break;
 800844c:	e004      	b.n	8008458 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800844e:	bf00      	nop
 8008450:	e002      	b.n	8008458 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008452:	bf00      	nop
 8008454:	e000      	b.n	8008458 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008456:	bf00      	nop
    }

    if(status == HAL_OK)
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d108      	bne.n	8008470 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800845e:	4b4c      	ldr	r3, [pc, #304]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f023 0203 	bic.w	r2, r3, #3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4949      	ldr	r1, [pc, #292]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 800846c:	4313      	orrs	r3, r2
 800846e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f040 8086 	bne.w	8008584 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008478:	4b45      	ldr	r3, [pc, #276]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a44      	ldr	r2, [pc, #272]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 800847e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008484:	f7fd f8de 	bl	8005644 <HAL_GetTick>
 8008488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800848a:	e009      	b.n	80084a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800848c:	f7fd f8da 	bl	8005644 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d902      	bls.n	80084a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	73fb      	strb	r3, [r7, #15]
        break;
 800849e:	e005      	b.n	80084ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084a0:	4b3b      	ldr	r3, [pc, #236]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1ef      	bne.n	800848c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d168      	bne.n	8008584 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d113      	bne.n	80084e0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084b8:	4b35      	ldr	r3, [pc, #212]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 80084ba:	691a      	ldr	r2, [r3, #16]
 80084bc:	4b35      	ldr	r3, [pc, #212]	; (8008594 <RCCEx_PLLSAI1_Config+0x1dc>)
 80084be:	4013      	ands	r3, r2
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6892      	ldr	r2, [r2, #8]
 80084c4:	0211      	lsls	r1, r2, #8
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68d2      	ldr	r2, [r2, #12]
 80084ca:	06d2      	lsls	r2, r2, #27
 80084cc:	4311      	orrs	r1, r2
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6852      	ldr	r2, [r2, #4]
 80084d2:	3a01      	subs	r2, #1
 80084d4:	0112      	lsls	r2, r2, #4
 80084d6:	430a      	orrs	r2, r1
 80084d8:	492d      	ldr	r1, [pc, #180]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	610b      	str	r3, [r1, #16]
 80084de:	e02d      	b.n	800853c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d115      	bne.n	8008512 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084e6:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	4b2b      	ldr	r3, [pc, #172]	; (8008598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80084ec:	4013      	ands	r3, r2
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	6892      	ldr	r2, [r2, #8]
 80084f2:	0211      	lsls	r1, r2, #8
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6912      	ldr	r2, [r2, #16]
 80084f8:	0852      	lsrs	r2, r2, #1
 80084fa:	3a01      	subs	r2, #1
 80084fc:	0552      	lsls	r2, r2, #21
 80084fe:	4311      	orrs	r1, r2
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6852      	ldr	r2, [r2, #4]
 8008504:	3a01      	subs	r2, #1
 8008506:	0112      	lsls	r2, r2, #4
 8008508:	430a      	orrs	r2, r1
 800850a:	4921      	ldr	r1, [pc, #132]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 800850c:	4313      	orrs	r3, r2
 800850e:	610b      	str	r3, [r1, #16]
 8008510:	e014      	b.n	800853c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008512:	4b1f      	ldr	r3, [pc, #124]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008514:	691a      	ldr	r2, [r3, #16]
 8008516:	4b21      	ldr	r3, [pc, #132]	; (800859c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008518:	4013      	ands	r3, r2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6892      	ldr	r2, [r2, #8]
 800851e:	0211      	lsls	r1, r2, #8
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6952      	ldr	r2, [r2, #20]
 8008524:	0852      	lsrs	r2, r2, #1
 8008526:	3a01      	subs	r2, #1
 8008528:	0652      	lsls	r2, r2, #25
 800852a:	4311      	orrs	r1, r2
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6852      	ldr	r2, [r2, #4]
 8008530:	3a01      	subs	r2, #1
 8008532:	0112      	lsls	r2, r2, #4
 8008534:	430a      	orrs	r2, r1
 8008536:	4916      	ldr	r1, [pc, #88]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008538:	4313      	orrs	r3, r2
 800853a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800853c:	4b14      	ldr	r3, [pc, #80]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a13      	ldr	r2, [pc, #76]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008548:	f7fd f87c 	bl	8005644 <HAL_GetTick>
 800854c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800854e:	e009      	b.n	8008564 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008550:	f7fd f878 	bl	8005644 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d902      	bls.n	8008564 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	73fb      	strb	r3, [r7, #15]
          break;
 8008562:	e005      	b.n	8008570 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008564:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d0ef      	beq.n	8008550 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008576:	4b06      	ldr	r3, [pc, #24]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	4904      	ldr	r1, [pc, #16]	; (8008590 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008580:	4313      	orrs	r3, r2
 8008582:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008584:	7bfb      	ldrb	r3, [r7, #15]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	40021000 	.word	0x40021000
 8008594:	07ff800f 	.word	0x07ff800f
 8008598:	ff9f800f 	.word	0xff9f800f
 800859c:	f9ff800f 	.word	0xf9ff800f

080085a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085ae:	4b72      	ldr	r3, [pc, #456]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00e      	beq.n	80085d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80085ba:	4b6f      	ldr	r3, [pc, #444]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f003 0203 	and.w	r2, r3, #3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d103      	bne.n	80085d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
       ||
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d142      	bne.n	8008658 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	73fb      	strb	r3, [r7, #15]
 80085d6:	e03f      	b.n	8008658 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d018      	beq.n	8008612 <RCCEx_PLLSAI2_Config+0x72>
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d825      	bhi.n	8008630 <RCCEx_PLLSAI2_Config+0x90>
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d002      	beq.n	80085ee <RCCEx_PLLSAI2_Config+0x4e>
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d009      	beq.n	8008600 <RCCEx_PLLSAI2_Config+0x60>
 80085ec:	e020      	b.n	8008630 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085ee:	4b62      	ldr	r3, [pc, #392]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d11d      	bne.n	8008636 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085fe:	e01a      	b.n	8008636 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008600:	4b5d      	ldr	r3, [pc, #372]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008608:	2b00      	cmp	r3, #0
 800860a:	d116      	bne.n	800863a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008610:	e013      	b.n	800863a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008612:	4b59      	ldr	r3, [pc, #356]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10f      	bne.n	800863e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800861e:	4b56      	ldr	r3, [pc, #344]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d109      	bne.n	800863e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800862e:	e006      	b.n	800863e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	73fb      	strb	r3, [r7, #15]
      break;
 8008634:	e004      	b.n	8008640 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008636:	bf00      	nop
 8008638:	e002      	b.n	8008640 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800863e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d108      	bne.n	8008658 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008646:	4b4c      	ldr	r3, [pc, #304]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f023 0203 	bic.w	r2, r3, #3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4949      	ldr	r1, [pc, #292]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008654:	4313      	orrs	r3, r2
 8008656:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f040 8086 	bne.w	800876c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008660:	4b45      	ldr	r3, [pc, #276]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a44      	ldr	r2, [pc, #272]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800866a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800866c:	f7fc ffea 	bl	8005644 <HAL_GetTick>
 8008670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008672:	e009      	b.n	8008688 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008674:	f7fc ffe6 	bl	8005644 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d902      	bls.n	8008688 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	73fb      	strb	r3, [r7, #15]
        break;
 8008686:	e005      	b.n	8008694 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008688:	4b3b      	ldr	r3, [pc, #236]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1ef      	bne.n	8008674 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d168      	bne.n	800876c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d113      	bne.n	80086c8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80086a0:	4b35      	ldr	r3, [pc, #212]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086a2:	695a      	ldr	r2, [r3, #20]
 80086a4:	4b35      	ldr	r3, [pc, #212]	; (800877c <RCCEx_PLLSAI2_Config+0x1dc>)
 80086a6:	4013      	ands	r3, r2
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6892      	ldr	r2, [r2, #8]
 80086ac:	0211      	lsls	r1, r2, #8
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	68d2      	ldr	r2, [r2, #12]
 80086b2:	06d2      	lsls	r2, r2, #27
 80086b4:	4311      	orrs	r1, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6852      	ldr	r2, [r2, #4]
 80086ba:	3a01      	subs	r2, #1
 80086bc:	0112      	lsls	r2, r2, #4
 80086be:	430a      	orrs	r2, r1
 80086c0:	492d      	ldr	r1, [pc, #180]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	614b      	str	r3, [r1, #20]
 80086c6:	e02d      	b.n	8008724 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d115      	bne.n	80086fa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80086ce:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086d0:	695a      	ldr	r2, [r3, #20]
 80086d2:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <RCCEx_PLLSAI2_Config+0x1e0>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6892      	ldr	r2, [r2, #8]
 80086da:	0211      	lsls	r1, r2, #8
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	6912      	ldr	r2, [r2, #16]
 80086e0:	0852      	lsrs	r2, r2, #1
 80086e2:	3a01      	subs	r2, #1
 80086e4:	0552      	lsls	r2, r2, #21
 80086e6:	4311      	orrs	r1, r2
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6852      	ldr	r2, [r2, #4]
 80086ec:	3a01      	subs	r2, #1
 80086ee:	0112      	lsls	r2, r2, #4
 80086f0:	430a      	orrs	r2, r1
 80086f2:	4921      	ldr	r1, [pc, #132]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	614b      	str	r3, [r1, #20]
 80086f8:	e014      	b.n	8008724 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80086fa:	4b1f      	ldr	r3, [pc, #124]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086fc:	695a      	ldr	r2, [r3, #20]
 80086fe:	4b21      	ldr	r3, [pc, #132]	; (8008784 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008700:	4013      	ands	r3, r2
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6892      	ldr	r2, [r2, #8]
 8008706:	0211      	lsls	r1, r2, #8
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6952      	ldr	r2, [r2, #20]
 800870c:	0852      	lsrs	r2, r2, #1
 800870e:	3a01      	subs	r2, #1
 8008710:	0652      	lsls	r2, r2, #25
 8008712:	4311      	orrs	r1, r2
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	6852      	ldr	r2, [r2, #4]
 8008718:	3a01      	subs	r2, #1
 800871a:	0112      	lsls	r2, r2, #4
 800871c:	430a      	orrs	r2, r1
 800871e:	4916      	ldr	r1, [pc, #88]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008720:	4313      	orrs	r3, r2
 8008722:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008724:	4b14      	ldr	r3, [pc, #80]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a13      	ldr	r2, [pc, #76]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 800872a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800872e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008730:	f7fc ff88 	bl	8005644 <HAL_GetTick>
 8008734:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008736:	e009      	b.n	800874c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008738:	f7fc ff84 	bl	8005644 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b02      	cmp	r3, #2
 8008744:	d902      	bls.n	800874c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	73fb      	strb	r3, [r7, #15]
          break;
 800874a:	e005      	b.n	8008758 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d0ef      	beq.n	8008738 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d106      	bne.n	800876c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	4904      	ldr	r1, [pc, #16]	; (8008778 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008768:	4313      	orrs	r3, r2
 800876a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	40021000 	.word	0x40021000
 800877c:	07ff800f 	.word	0x07ff800f
 8008780:	ff9f800f 	.word	0xff9f800f
 8008784:	f9ff800f 	.word	0xf9ff800f

08008788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e095      	b.n	80088c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d108      	bne.n	80087b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087aa:	d009      	beq.n	80087c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	61da      	str	r2, [r3, #28]
 80087b2:	e005      	b.n	80087c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7fb fd58 	bl	8004290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008800:	d902      	bls.n	8008808 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	e002      	b.n	800880e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800880c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008816:	d007      	beq.n	8008828 <HAL_SPI_Init+0xa0>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008820:	d002      	beq.n	8008828 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886a:	ea42 0103 	orr.w	r1, r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	0c1b      	lsrs	r3, r3, #16
 8008884:	f003 0204 	and.w	r2, r3, #4
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80088a4:	ea42 0103 	orr.w	r1, r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b088      	sub	sp, #32
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	603b      	str	r3, [r7, #0]
 80088da:	4613      	mov	r3, r2
 80088dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d101      	bne.n	80088f0 <HAL_SPI_Transmit+0x22>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e15f      	b.n	8008bb0 <HAL_SPI_Transmit+0x2e2>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088f8:	f7fc fea4 	bl	8005644 <HAL_GetTick>
 80088fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088fe:	88fb      	ldrh	r3, [r7, #6]
 8008900:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b01      	cmp	r3, #1
 800890c:	d002      	beq.n	8008914 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800890e:	2302      	movs	r3, #2
 8008910:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008912:	e148      	b.n	8008ba6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <HAL_SPI_Transmit+0x52>
 800891a:	88fb      	ldrh	r3, [r7, #6]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008924:	e13f      	b.n	8008ba6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2203      	movs	r2, #3
 800892a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	88fa      	ldrh	r2, [r7, #6]
 800893e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	88fa      	ldrh	r2, [r7, #6]
 8008944:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008970:	d10f      	bne.n	8008992 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008980:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008990:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d007      	beq.n	80089b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089b8:	d94f      	bls.n	8008a5a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <HAL_SPI_Transmit+0xfa>
 80089c2:	8afb      	ldrh	r3, [r7, #22]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d142      	bne.n	8008a4e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	881a      	ldrh	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	1c9a      	adds	r2, r3, #2
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089ec:	e02f      	b.n	8008a4e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d112      	bne.n	8008a22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	881a      	ldrh	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0c:	1c9a      	adds	r2, r3, #2
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a20:	e015      	b.n	8008a4e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a22:	f7fc fe0f 	bl	8005644 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d803      	bhi.n	8008a3a <HAL_SPI_Transmit+0x16c>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d102      	bne.n	8008a40 <HAL_SPI_Transmit+0x172>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d106      	bne.n	8008a4e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008a4c:	e0ab      	b.n	8008ba6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1ca      	bne.n	80089ee <HAL_SPI_Transmit+0x120>
 8008a58:	e080      	b.n	8008b5c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <HAL_SPI_Transmit+0x19a>
 8008a62:	8afb      	ldrh	r3, [r7, #22]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d174      	bne.n	8008b52 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d912      	bls.n	8008a98 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a76:	881a      	ldrh	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	1c9a      	adds	r2, r3, #2
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	3b02      	subs	r3, #2
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a96:	e05c      	b.n	8008b52 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	330c      	adds	r3, #12
 8008aa2:	7812      	ldrb	r2, [r2, #0]
 8008aa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008abe:	e048      	b.n	8008b52 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d12b      	bne.n	8008b26 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d912      	bls.n	8008afe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	881a      	ldrh	r2, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae8:	1c9a      	adds	r2, r3, #2
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	3b02      	subs	r3, #2
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008afc:	e029      	b.n	8008b52 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	330c      	adds	r3, #12
 8008b08:	7812      	ldrb	r2, [r2, #0]
 8008b0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b24:	e015      	b.n	8008b52 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b26:	f7fc fd8d 	bl	8005644 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d803      	bhi.n	8008b3e <HAL_SPI_Transmit+0x270>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3c:	d102      	bne.n	8008b44 <HAL_SPI_Transmit+0x276>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d106      	bne.n	8008b52 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008b50:	e029      	b.n	8008ba6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1b1      	bne.n	8008ac0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 ff7d 	bl	8009a60 <SPI_EndRxTxTransaction>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2220      	movs	r2, #32
 8008b70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	613b      	str	r3, [r7, #16]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	613b      	str	r3, [r7, #16]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	613b      	str	r3, [r7, #16]
 8008b8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	77fb      	strb	r3, [r7, #31]
 8008b9c:	e003      	b.n	8008ba6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008bae:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3720      	adds	r7, #32
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af02      	add	r7, sp, #8
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d002      	beq.n	8008bde <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bdc:	e11a      	b.n	8008e14 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008be6:	d112      	bne.n	8008c0e <HAL_SPI_Receive+0x56>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10e      	bne.n	8008c0e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008bf8:	88fa      	ldrh	r2, [r7, #6]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 f90e 	bl	8008e26 <HAL_SPI_TransmitReceive>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	e107      	b.n	8008e1e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d101      	bne.n	8008c1c <HAL_SPI_Receive+0x64>
 8008c18:	2302      	movs	r3, #2
 8008c1a:	e100      	b.n	8008e1e <HAL_SPI_Receive+0x266>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c24:	f7fc fd0e 	bl	8005644 <HAL_GetTick>
 8008c28:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d002      	beq.n	8008c36 <HAL_SPI_Receive+0x7e>
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c3a:	e0eb      	b.n	8008e14 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2204      	movs	r2, #4
 8008c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	88fa      	ldrh	r2, [r7, #6]
 8008c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	88fa      	ldrh	r2, [r7, #6]
 8008c5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c86:	d908      	bls.n	8008c9a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c96:	605a      	str	r2, [r3, #4]
 8008c98:	e007      	b.n	8008caa <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ca8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cb2:	d10f      	bne.n	8008cd4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008cd2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cde:	2b40      	cmp	r3, #64	; 0x40
 8008ce0:	d007      	beq.n	8008cf2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cf0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cfa:	d86f      	bhi.n	8008ddc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008cfc:	e034      	b.n	8008d68 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d117      	bne.n	8008d3c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f103 020c 	add.w	r2, r3, #12
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d18:	7812      	ldrb	r2, [r2, #0]
 8008d1a:	b2d2      	uxtb	r2, r2
 8008d1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	3b01      	subs	r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008d3a:	e015      	b.n	8008d68 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d3c:	f7fc fc82 	bl	8005644 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d803      	bhi.n	8008d54 <HAL_SPI_Receive+0x19c>
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d52:	d102      	bne.n	8008d5a <HAL_SPI_Receive+0x1a2>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008d66:	e055      	b.n	8008e14 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1c4      	bne.n	8008cfe <HAL_SPI_Receive+0x146>
 8008d74:	e038      	b.n	8008de8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d115      	bne.n	8008db0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	b292      	uxth	r2, r2
 8008d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	1c9a      	adds	r2, r3, #2
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008dae:	e015      	b.n	8008ddc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008db0:	f7fc fc48 	bl	8005644 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d803      	bhi.n	8008dc8 <HAL_SPI_Receive+0x210>
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc6:	d102      	bne.n	8008dce <HAL_SPI_Receive+0x216>
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008dda:	e01b      	b.n	8008e14 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1c6      	bne.n	8008d76 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 fddf 	bl	80099b0 <SPI_EndRxTransaction>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	75fb      	strb	r3, [r7, #23]
 8008e0a:	e003      	b.n	8008e14 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b08a      	sub	sp, #40	; 0x28
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	60b9      	str	r1, [r7, #8]
 8008e30:	607a      	str	r2, [r7, #4]
 8008e32:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e34:	2301      	movs	r3, #1
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_SPI_TransmitReceive+0x26>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e20a      	b.n	8009262 <HAL_SPI_TransmitReceive+0x43c>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e54:	f7fc fbf6 	bl	8005644 <HAL_GetTick>
 8008e58:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e60:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008e68:	887b      	ldrh	r3, [r7, #2]
 8008e6a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008e6c:	887b      	ldrh	r3, [r7, #2]
 8008e6e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e70:	7efb      	ldrb	r3, [r7, #27]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d00e      	beq.n	8008e94 <HAL_SPI_TransmitReceive+0x6e>
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e7c:	d106      	bne.n	8008e8c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d102      	bne.n	8008e8c <HAL_SPI_TransmitReceive+0x66>
 8008e86:	7efb      	ldrb	r3, [r7, #27]
 8008e88:	2b04      	cmp	r3, #4
 8008e8a:	d003      	beq.n	8008e94 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e92:	e1e0      	b.n	8009256 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <HAL_SPI_TransmitReceive+0x80>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d002      	beq.n	8008ea6 <HAL_SPI_TransmitReceive+0x80>
 8008ea0:	887b      	ldrh	r3, [r7, #2]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d103      	bne.n	8008eae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008eac:	e1d3      	b.n	8009256 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d003      	beq.n	8008ec2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2205      	movs	r2, #5
 8008ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	887a      	ldrh	r2, [r7, #2]
 8008ed2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	887a      	ldrh	r2, [r7, #2]
 8008eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	887a      	ldrh	r2, [r7, #2]
 8008ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	887a      	ldrh	r2, [r7, #2]
 8008eee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f04:	d802      	bhi.n	8008f0c <HAL_SPI_TransmitReceive+0xe6>
 8008f06:	8a3b      	ldrh	r3, [r7, #16]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d908      	bls.n	8008f1e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f1a:	605a      	str	r2, [r3, #4]
 8008f1c:	e007      	b.n	8008f2e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f2c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f38:	2b40      	cmp	r3, #64	; 0x40
 8008f3a:	d007      	beq.n	8008f4c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f54:	f240 8081 	bls.w	800905a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_SPI_TransmitReceive+0x140>
 8008f60:	8a7b      	ldrh	r3, [r7, #18]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d16d      	bne.n	8009042 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6a:	881a      	ldrh	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f76:	1c9a      	adds	r2, r3, #2
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	3b01      	subs	r3, #1
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f8a:	e05a      	b.n	8009042 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d11b      	bne.n	8008fd2 <HAL_SPI_TransmitReceive+0x1ac>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d016      	beq.n	8008fd2 <HAL_SPI_TransmitReceive+0x1ac>
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d113      	bne.n	8008fd2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fae:	881a      	ldrh	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fba:	1c9a      	adds	r2, r3, #2
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d11c      	bne.n	800901a <HAL_SPI_TransmitReceive+0x1f4>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d016      	beq.n	800901a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	b292      	uxth	r2, r2
 8008ff8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	1c9a      	adds	r2, r3, #2
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800900a:	b29b      	uxth	r3, r3
 800900c:	3b01      	subs	r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009016:	2301      	movs	r3, #1
 8009018:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800901a:	f7fc fb13 	bl	8005644 <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009026:	429a      	cmp	r2, r3
 8009028:	d80b      	bhi.n	8009042 <HAL_SPI_TransmitReceive+0x21c>
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009030:	d007      	beq.n	8009042 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8009040:	e109      	b.n	8009256 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009046:	b29b      	uxth	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d19f      	bne.n	8008f8c <HAL_SPI_TransmitReceive+0x166>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009052:	b29b      	uxth	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d199      	bne.n	8008f8c <HAL_SPI_TransmitReceive+0x166>
 8009058:	e0e3      	b.n	8009222 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <HAL_SPI_TransmitReceive+0x244>
 8009062:	8a7b      	ldrh	r3, [r7, #18]
 8009064:	2b01      	cmp	r3, #1
 8009066:	f040 80cf 	bne.w	8009208 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800906e:	b29b      	uxth	r3, r3
 8009070:	2b01      	cmp	r3, #1
 8009072:	d912      	bls.n	800909a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	881a      	ldrh	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	1c9a      	adds	r2, r3, #2
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b02      	subs	r3, #2
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009098:	e0b6      	b.n	8009208 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	330c      	adds	r3, #12
 80090a4:	7812      	ldrb	r2, [r2, #0]
 80090a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ac:	1c5a      	adds	r2, r3, #1
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090c0:	e0a2      	b.n	8009208 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d134      	bne.n	800913a <HAL_SPI_TransmitReceive+0x314>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d02f      	beq.n	800913a <HAL_SPI_TransmitReceive+0x314>
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d12c      	bne.n	800913a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d912      	bls.n	8009110 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ee:	881a      	ldrh	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	1c9a      	adds	r2, r3, #2
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b02      	subs	r3, #2
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800910e:	e012      	b.n	8009136 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	330c      	adds	r3, #12
 800911a:	7812      	ldrb	r2, [r2, #0]
 800911c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	b29a      	uxth	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b01      	cmp	r3, #1
 8009146:	d148      	bne.n	80091da <HAL_SPI_TransmitReceive+0x3b4>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800914e:	b29b      	uxth	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	d042      	beq.n	80091da <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800915a:	b29b      	uxth	r3, r3
 800915c:	2b01      	cmp	r3, #1
 800915e:	d923      	bls.n	80091a8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916a:	b292      	uxth	r2, r2
 800916c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	1c9a      	adds	r2, r3, #2
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800917e:	b29b      	uxth	r3, r3
 8009180:	3b02      	subs	r3, #2
 8009182:	b29a      	uxth	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009190:	b29b      	uxth	r3, r3
 8009192:	2b01      	cmp	r3, #1
 8009194:	d81f      	bhi.n	80091d6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80091a4:	605a      	str	r2, [r3, #4]
 80091a6:	e016      	b.n	80091d6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f103 020c 	add.w	r2, r3, #12
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b4:	7812      	ldrb	r2, [r2, #0]
 80091b6:	b2d2      	uxtb	r2, r2
 80091b8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091d6:	2301      	movs	r3, #1
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80091da:	f7fc fa33 	bl	8005644 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d803      	bhi.n	80091f2 <HAL_SPI_TransmitReceive+0x3cc>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f0:	d102      	bne.n	80091f8 <HAL_SPI_TransmitReceive+0x3d2>
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d107      	bne.n	8009208 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8009206:	e026      	b.n	8009256 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800920c:	b29b      	uxth	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	f47f af57 	bne.w	80090c2 <HAL_SPI_TransmitReceive+0x29c>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800921a:	b29b      	uxth	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	f47f af50 	bne.w	80090c2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009222:	69fa      	ldr	r2, [r7, #28]
 8009224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 fc1a 	bl	8009a60 <SPI_EndRxTxTransaction>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2220      	movs	r2, #32
 800923c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800924c:	e003      	b.n	8009256 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800925e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009262:	4618      	mov	r0, r3
 8009264:	3728      	adds	r7, #40	; 0x28
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_SPI_Transmit_DMA+0x20>
 8009288:	2302      	movs	r3, #2
 800928a:	e0d4      	b.n	8009436 <HAL_SPI_Transmit_DMA+0x1ca>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	d002      	beq.n	80092a6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80092a0:	2302      	movs	r3, #2
 80092a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092a4:	e0c2      	b.n	800942c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <HAL_SPI_Transmit_DMA+0x46>
 80092ac:	88fb      	ldrh	r3, [r7, #6]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d102      	bne.n	80092b8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092b6:	e0b9      	b.n	800942c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2203      	movs	r2, #3
 80092bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	88fa      	ldrh	r2, [r7, #6]
 80092d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	88fa      	ldrh	r2, [r7, #6]
 80092d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009302:	d10f      	bne.n	8009324 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009312:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009322:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009328:	4a45      	ldr	r2, [pc, #276]	; (8009440 <HAL_SPI_Transmit_DMA+0x1d4>)
 800932a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009330:	4a44      	ldr	r2, [pc, #272]	; (8009444 <HAL_SPI_Transmit_DMA+0x1d8>)
 8009332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009338:	4a43      	ldr	r2, [pc, #268]	; (8009448 <HAL_SPI_Transmit_DMA+0x1dc>)
 800933a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009340:	2200      	movs	r2, #0
 8009342:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009352:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800935c:	d82d      	bhi.n	80093ba <HAL_SPI_Transmit_DMA+0x14e>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009368:	d127      	bne.n	80093ba <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800936e:	b29b      	uxth	r3, r3
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10f      	bne.n	8009398 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009386:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800938c:	b29b      	uxth	r3, r3
 800938e:	085b      	lsrs	r3, r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009396:	e010      	b.n	80093ba <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	085b      	lsrs	r3, r3, #1
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	3301      	adds	r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c2:	4619      	mov	r1, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	330c      	adds	r3, #12
 80093ca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80093d2:	f7fc fc71 	bl	8005cb8 <HAL_DMA_Start_IT>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d008      	beq.n	80093ee <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e0:	f043 0210 	orr.w	r2, r3, #16
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	75fb      	strb	r3, [r7, #23]

    goto error;
 80093ec:	e01e      	b.n	800942c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f8:	2b40      	cmp	r3, #64	; 0x40
 80093fa:	d007      	beq.n	800940c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800940a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0220 	orr.w	r2, r2, #32
 800941a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0202 	orr.w	r2, r2, #2
 800942a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	080096ef 	.word	0x080096ef
 8009444:	08009649 	.word	0x08009649
 8009448:	0800970b 	.word	0x0800970b

0800944c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b088      	sub	sp, #32
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10e      	bne.n	800948c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009474:	2b00      	cmp	r3, #0
 8009476:	d009      	beq.n	800948c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	d004      	beq.n	800948c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
    return;
 800948a:	e0ce      	b.n	800962a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d009      	beq.n	80094aa <HAL_SPI_IRQHandler+0x5e>
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
    return;
 80094a8:	e0bf      	b.n	800962a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	f003 0320 	and.w	r3, r3, #32
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10a      	bne.n	80094ca <HAL_SPI_IRQHandler+0x7e>
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d105      	bne.n	80094ca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 80b0 	beq.w	800962a <HAL_SPI_IRQHandler+0x1de>
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 80aa 	beq.w	800962a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d023      	beq.n	8009528 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d011      	beq.n	8009510 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094f0:	f043 0204 	orr.w	r2, r3, #4
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	e00b      	b.n	8009528 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009510:	2300      	movs	r3, #0
 8009512:	613b      	str	r3, [r7, #16]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	613b      	str	r3, [r7, #16]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	693b      	ldr	r3, [r7, #16]
        return;
 8009526:	e080      	b.n	800962a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b00      	cmp	r3, #0
 8009530:	d014      	beq.n	800955c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009536:	f043 0201 	orr.w	r2, r3, #1
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800953e:	2300      	movs	r3, #0
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00c      	beq.n	8009580 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800956a:	f043 0208 	orr.w	r2, r3, #8
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009572:	2300      	movs	r3, #0
 8009574:	60bb      	str	r3, [r7, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	60bb      	str	r3, [r7, #8]
 800957e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009584:	2b00      	cmp	r3, #0
 8009586:	d04f      	beq.n	8009628 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009596:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f003 0302 	and.w	r3, r3, #2
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d104      	bne.n	80095b4 <HAL_SPI_IRQHandler+0x168>
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d034      	beq.n	800961e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0203 	bic.w	r2, r2, #3
 80095c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d011      	beq.n	80095f0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d0:	4a17      	ldr	r2, [pc, #92]	; (8009630 <HAL_SPI_IRQHandler+0x1e4>)
 80095d2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fc fc44 	bl	8005e66 <HAL_DMA_Abort_IT>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d005      	beq.n	80095f0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d016      	beq.n	8009626 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fc:	4a0c      	ldr	r2, [pc, #48]	; (8009630 <HAL_SPI_IRQHandler+0x1e4>)
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009604:	4618      	mov	r0, r3
 8009606:	f7fc fc2e 	bl	8005e66 <HAL_DMA_Abort_IT>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00a      	beq.n	8009626 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009614:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800961c:	e003      	b.n	8009626 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7fb fc16 	bl	8004e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009624:	e000      	b.n	8009628 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009626:	bf00      	nop
    return;
 8009628:	bf00      	nop
  }
}
 800962a:	3720      	adds	r7, #32
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	0800974b 	.word	0x0800974b

08009634 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009656:	f7fb fff5 	bl	8005644 <HAL_GetTick>
 800965a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b20      	cmp	r3, #32
 8009668:	d03b      	beq.n	80096e2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 0220 	bic.w	r2, r2, #32
 8009678:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0202 	bic.w	r2, r2, #2
 8009688:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	2164      	movs	r1, #100	; 0x64
 800968e:	6978      	ldr	r0, [r7, #20]
 8009690:	f000 f9e6 	bl	8009a60 <SPI_EndRxTxTransaction>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800969e:	f043 0220 	orr.w	r2, r3, #32
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2200      	movs	r2, #0
 80096c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096da:	6978      	ldr	r0, [r7, #20]
 80096dc:	f7fb fbb8 	bl	8004e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096e0:	e002      	b.n	80096e8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80096e2:	6978      	ldr	r0, [r7, #20]
 80096e4:	f7fb fbca 	bl	8004e7c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff ff99 	bl	8009634 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009702:	bf00      	nop
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009716:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 0203 	bic.w	r2, r2, #3
 8009726:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972c:	f043 0210 	orr.w	r2, r3, #16
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f7fb fb87 	bl	8004e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009742:	bf00      	nop
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009756:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f7fb fb72 	bl	8004e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800976c:	bf00      	nop
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009784:	f7fb ff5e 	bl	8005644 <HAL_GetTick>
 8009788:	4602      	mov	r2, r0
 800978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4413      	add	r3, r2
 8009792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009794:	f7fb ff56 	bl	8005644 <HAL_GetTick>
 8009798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800979a:	4b39      	ldr	r3, [pc, #228]	; (8009880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	015b      	lsls	r3, r3, #5
 80097a0:	0d1b      	lsrs	r3, r3, #20
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	fb02 f303 	mul.w	r3, r2, r3
 80097a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097aa:	e054      	b.n	8009856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b2:	d050      	beq.n	8009856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097b4:	f7fb ff46 	bl	8005644 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	69fa      	ldr	r2, [r7, #28]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d902      	bls.n	80097ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d13d      	bne.n	8009846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097e2:	d111      	bne.n	8009808 <SPI_WaitFlagStateUntilTimeout+0x94>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ec:	d004      	beq.n	80097f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097f6:	d107      	bne.n	8009808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009810:	d10f      	bne.n	8009832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009820:	601a      	str	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e017      	b.n	8009876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	3b01      	subs	r3, #1
 8009854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4013      	ands	r3, r2
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	429a      	cmp	r2, r3
 8009864:	bf0c      	ite	eq
 8009866:	2301      	moveq	r3, #1
 8009868:	2300      	movne	r3, #0
 800986a:	b2db      	uxtb	r3, r3
 800986c:	461a      	mov	r2, r3
 800986e:	79fb      	ldrb	r3, [r7, #7]
 8009870:	429a      	cmp	r2, r3
 8009872:	d19b      	bne.n	80097ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3720      	adds	r7, #32
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000254 	.word	0x20000254

08009884 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08a      	sub	sp, #40	; 0x28
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009892:	2300      	movs	r3, #0
 8009894:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009896:	f7fb fed5 	bl	8005644 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	1a9b      	subs	r3, r3, r2
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	4413      	add	r3, r2
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80098a6:	f7fb fecd 	bl	8005644 <HAL_GetTick>
 80098aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	330c      	adds	r3, #12
 80098b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80098b4:	4b3d      	ldr	r3, [pc, #244]	; (80099ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	00da      	lsls	r2, r3, #3
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	0d1b      	lsrs	r3, r3, #20
 80098c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
 80098ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80098cc:	e060      	b.n	8009990 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80098d4:	d107      	bne.n	80098e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d104      	bne.n	80098e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ec:	d050      	beq.n	8009990 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098ee:	f7fb fea9 	bl	8005644 <HAL_GetTick>
 80098f2:	4602      	mov	r2, r0
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d902      	bls.n	8009904 <SPI_WaitFifoStateUntilTimeout+0x80>
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	2b00      	cmp	r3, #0
 8009902:	d13d      	bne.n	8009980 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009912:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800991c:	d111      	bne.n	8009942 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009926:	d004      	beq.n	8009932 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009930:	d107      	bne.n	8009942 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009940:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800994a:	d10f      	bne.n	800996c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800996a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e010      	b.n	80099a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009986:	2300      	movs	r3, #0
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	3b01      	subs	r3, #1
 800998e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689a      	ldr	r2, [r3, #8]
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	4013      	ands	r3, r2
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	429a      	cmp	r2, r3
 800999e:	d196      	bne.n	80098ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3728      	adds	r7, #40	; 0x28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20000254 	.word	0x20000254

080099b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af02      	add	r7, sp, #8
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099c4:	d111      	bne.n	80099ea <SPI_EndRxTransaction+0x3a>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ce:	d004      	beq.n	80099da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099d8:	d107      	bne.n	80099ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2200      	movs	r2, #0
 80099f2:	2180      	movs	r1, #128	; 0x80
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff febd 	bl	8009774 <SPI_WaitFlagStateUntilTimeout>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d007      	beq.n	8009a10 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a04:	f043 0220 	orr.w	r2, r3, #32
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e023      	b.n	8009a58 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a18:	d11d      	bne.n	8009a56 <SPI_EndRxTransaction+0xa6>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a22:	d004      	beq.n	8009a2e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a2c:	d113      	bne.n	8009a56 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff ff22 	bl	8009884 <SPI_WaitFifoStateUntilTimeout>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d007      	beq.n	8009a56 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a4a:	f043 0220 	orr.w	r2, r3, #32
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e000      	b.n	8009a58 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7ff ff03 	bl	8009884 <SPI_WaitFifoStateUntilTimeout>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d007      	beq.n	8009a94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a88:	f043 0220 	orr.w	r2, r3, #32
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e027      	b.n	8009ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2180      	movs	r1, #128	; 0x80
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7ff fe68 	bl	8009774 <SPI_WaitFlagStateUntilTimeout>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d007      	beq.n	8009aba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aae:	f043 0220 	orr.w	r2, r3, #32
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e014      	b.n	8009ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f7ff fedc 	bl	8009884 <SPI_WaitFifoStateUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad6:	f043 0220 	orr.w	r2, r3, #32
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e000      	b.n	8009ae4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e049      	b.n	8009b92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7fa fcba 	bl	800448c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	f000 fd3a 	bl	800a5a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d001      	beq.n	8009bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e04f      	b.n	8009c54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0201 	orr.w	r2, r2, #1
 8009bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a23      	ldr	r2, [pc, #140]	; (8009c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d01d      	beq.n	8009c12 <HAL_TIM_Base_Start_IT+0x76>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bde:	d018      	beq.n	8009c12 <HAL_TIM_Base_Start_IT+0x76>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a1f      	ldr	r2, [pc, #124]	; (8009c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d013      	beq.n	8009c12 <HAL_TIM_Base_Start_IT+0x76>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a1e      	ldr	r2, [pc, #120]	; (8009c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d00e      	beq.n	8009c12 <HAL_TIM_Base_Start_IT+0x76>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a1c      	ldr	r2, [pc, #112]	; (8009c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d009      	beq.n	8009c12 <HAL_TIM_Base_Start_IT+0x76>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a1b      	ldr	r2, [pc, #108]	; (8009c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d004      	beq.n	8009c12 <HAL_TIM_Base_Start_IT+0x76>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a19      	ldr	r2, [pc, #100]	; (8009c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d115      	bne.n	8009c3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2b06      	cmp	r3, #6
 8009c22:	d015      	beq.n	8009c50 <HAL_TIM_Base_Start_IT+0xb4>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c2a:	d011      	beq.n	8009c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f042 0201 	orr.w	r2, r2, #1
 8009c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c3c:	e008      	b.n	8009c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f042 0201 	orr.w	r2, r2, #1
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	e000      	b.n	8009c52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	40012c00 	.word	0x40012c00
 8009c64:	40000400 	.word	0x40000400
 8009c68:	40000800 	.word	0x40000800
 8009c6c:	40000c00 	.word	0x40000c00
 8009c70:	40013400 	.word	0x40013400
 8009c74:	40014000 	.word	0x40014000
 8009c78:	00010007 	.word	0x00010007

08009c7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68da      	ldr	r2, [r3, #12]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f022 0201 	bic.w	r2, r2, #1
 8009c92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6a1a      	ldr	r2, [r3, #32]
 8009c9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10f      	bne.n	8009cc4 <HAL_TIM_Base_Stop_IT+0x48>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6a1a      	ldr	r2, [r3, #32]
 8009caa:	f240 4344 	movw	r3, #1092	; 0x444
 8009cae:	4013      	ands	r3, r2
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d107      	bne.n	8009cc4 <HAL_TIM_Base_Stop_IT+0x48>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f022 0201 	bic.w	r2, r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e049      	b.n	8009d80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d106      	bne.n	8009d06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7fa fc3f 	bl	8004584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2202      	movs	r2, #2
 8009d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4619      	mov	r1, r3
 8009d18:	4610      	mov	r0, r2
 8009d1a:	f000 fc43 	bl	800a5a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d109      	bne.n	8009dac <HAL_TIM_PWM_Start+0x24>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	bf14      	ite	ne
 8009da4:	2301      	movne	r3, #1
 8009da6:	2300      	moveq	r3, #0
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	e03c      	b.n	8009e26 <HAL_TIM_PWM_Start+0x9e>
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b04      	cmp	r3, #4
 8009db0:	d109      	bne.n	8009dc6 <HAL_TIM_PWM_Start+0x3e>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	bf14      	ite	ne
 8009dbe:	2301      	movne	r3, #1
 8009dc0:	2300      	moveq	r3, #0
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	e02f      	b.n	8009e26 <HAL_TIM_PWM_Start+0x9e>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d109      	bne.n	8009de0 <HAL_TIM_PWM_Start+0x58>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	bf14      	ite	ne
 8009dd8:	2301      	movne	r3, #1
 8009dda:	2300      	moveq	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	e022      	b.n	8009e26 <HAL_TIM_PWM_Start+0x9e>
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2b0c      	cmp	r3, #12
 8009de4:	d109      	bne.n	8009dfa <HAL_TIM_PWM_Start+0x72>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	bf14      	ite	ne
 8009df2:	2301      	movne	r3, #1
 8009df4:	2300      	moveq	r3, #0
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	e015      	b.n	8009e26 <HAL_TIM_PWM_Start+0x9e>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b10      	cmp	r3, #16
 8009dfe:	d109      	bne.n	8009e14 <HAL_TIM_PWM_Start+0x8c>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	bf14      	ite	ne
 8009e0c:	2301      	movne	r3, #1
 8009e0e:	2300      	moveq	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	e008      	b.n	8009e26 <HAL_TIM_PWM_Start+0x9e>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	bf14      	ite	ne
 8009e20:	2301      	movne	r3, #1
 8009e22:	2300      	moveq	r3, #0
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e09c      	b.n	8009f68 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d104      	bne.n	8009e3e <HAL_TIM_PWM_Start+0xb6>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2202      	movs	r2, #2
 8009e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e3c:	e023      	b.n	8009e86 <HAL_TIM_PWM_Start+0xfe>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b04      	cmp	r3, #4
 8009e42:	d104      	bne.n	8009e4e <HAL_TIM_PWM_Start+0xc6>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e4c:	e01b      	b.n	8009e86 <HAL_TIM_PWM_Start+0xfe>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	d104      	bne.n	8009e5e <HAL_TIM_PWM_Start+0xd6>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2202      	movs	r2, #2
 8009e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e5c:	e013      	b.n	8009e86 <HAL_TIM_PWM_Start+0xfe>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b0c      	cmp	r3, #12
 8009e62:	d104      	bne.n	8009e6e <HAL_TIM_PWM_Start+0xe6>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e6c:	e00b      	b.n	8009e86 <HAL_TIM_PWM_Start+0xfe>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b10      	cmp	r3, #16
 8009e72:	d104      	bne.n	8009e7e <HAL_TIM_PWM_Start+0xf6>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e7c:	e003      	b.n	8009e86 <HAL_TIM_PWM_Start+0xfe>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2202      	movs	r2, #2
 8009e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 ff92 	bl	800adb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a35      	ldr	r2, [pc, #212]	; (8009f70 <HAL_TIM_PWM_Start+0x1e8>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d013      	beq.n	8009ec6 <HAL_TIM_PWM_Start+0x13e>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a34      	ldr	r2, [pc, #208]	; (8009f74 <HAL_TIM_PWM_Start+0x1ec>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d00e      	beq.n	8009ec6 <HAL_TIM_PWM_Start+0x13e>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a32      	ldr	r2, [pc, #200]	; (8009f78 <HAL_TIM_PWM_Start+0x1f0>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d009      	beq.n	8009ec6 <HAL_TIM_PWM_Start+0x13e>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a31      	ldr	r2, [pc, #196]	; (8009f7c <HAL_TIM_PWM_Start+0x1f4>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d004      	beq.n	8009ec6 <HAL_TIM_PWM_Start+0x13e>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a2f      	ldr	r2, [pc, #188]	; (8009f80 <HAL_TIM_PWM_Start+0x1f8>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d101      	bne.n	8009eca <HAL_TIM_PWM_Start+0x142>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e000      	b.n	8009ecc <HAL_TIM_PWM_Start+0x144>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d007      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ede:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a22      	ldr	r2, [pc, #136]	; (8009f70 <HAL_TIM_PWM_Start+0x1e8>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d01d      	beq.n	8009f26 <HAL_TIM_PWM_Start+0x19e>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef2:	d018      	beq.n	8009f26 <HAL_TIM_PWM_Start+0x19e>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a22      	ldr	r2, [pc, #136]	; (8009f84 <HAL_TIM_PWM_Start+0x1fc>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d013      	beq.n	8009f26 <HAL_TIM_PWM_Start+0x19e>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a21      	ldr	r2, [pc, #132]	; (8009f88 <HAL_TIM_PWM_Start+0x200>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d00e      	beq.n	8009f26 <HAL_TIM_PWM_Start+0x19e>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a1f      	ldr	r2, [pc, #124]	; (8009f8c <HAL_TIM_PWM_Start+0x204>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d009      	beq.n	8009f26 <HAL_TIM_PWM_Start+0x19e>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a17      	ldr	r2, [pc, #92]	; (8009f74 <HAL_TIM_PWM_Start+0x1ec>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d004      	beq.n	8009f26 <HAL_TIM_PWM_Start+0x19e>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a15      	ldr	r2, [pc, #84]	; (8009f78 <HAL_TIM_PWM_Start+0x1f0>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d115      	bne.n	8009f52 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	4b18      	ldr	r3, [pc, #96]	; (8009f90 <HAL_TIM_PWM_Start+0x208>)
 8009f2e:	4013      	ands	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b06      	cmp	r3, #6
 8009f36:	d015      	beq.n	8009f64 <HAL_TIM_PWM_Start+0x1dc>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f3e:	d011      	beq.n	8009f64 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0201 	orr.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f50:	e008      	b.n	8009f64 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f042 0201 	orr.w	r2, r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	e000      	b.n	8009f66 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	40012c00 	.word	0x40012c00
 8009f74:	40013400 	.word	0x40013400
 8009f78:	40014000 	.word	0x40014000
 8009f7c:	40014400 	.word	0x40014400
 8009f80:	40014800 	.word	0x40014800
 8009f84:	40000400 	.word	0x40000400
 8009f88:	40000800 	.word	0x40000800
 8009f8c:	40000c00 	.word	0x40000c00
 8009f90:	00010007 	.word	0x00010007

08009f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d020      	beq.n	8009ff8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01b      	beq.n	8009ff8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f06f 0202 	mvn.w	r2, #2
 8009fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	f003 0303 	and.w	r3, r3, #3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fac1 	bl	800a566 <HAL_TIM_IC_CaptureCallback>
 8009fe4:	e005      	b.n	8009ff2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fab3 	bl	800a552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fac4 	bl	800a57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d020      	beq.n	800a044 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01b      	beq.n	800a044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f06f 0204 	mvn.w	r2, #4
 800a014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2202      	movs	r2, #2
 800a01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fa9b 	bl	800a566 <HAL_TIM_IC_CaptureCallback>
 800a030:	e005      	b.n	800a03e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fa8d 	bl	800a552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fa9e 	bl	800a57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f003 0308 	and.w	r3, r3, #8
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d020      	beq.n	800a090 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f003 0308 	and.w	r3, r3, #8
 800a054:	2b00      	cmp	r3, #0
 800a056:	d01b      	beq.n	800a090 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f06f 0208 	mvn.w	r2, #8
 800a060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2204      	movs	r2, #4
 800a066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	f003 0303 	and.w	r3, r3, #3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d003      	beq.n	800a07e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fa75 	bl	800a566 <HAL_TIM_IC_CaptureCallback>
 800a07c:	e005      	b.n	800a08a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fa67 	bl	800a552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fa78 	bl	800a57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	f003 0310 	and.w	r3, r3, #16
 800a096:	2b00      	cmp	r3, #0
 800a098:	d020      	beq.n	800a0dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f003 0310 	and.w	r3, r3, #16
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01b      	beq.n	800a0dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f06f 0210 	mvn.w	r2, #16
 800a0ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2208      	movs	r2, #8
 800a0b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fa4f 	bl	800a566 <HAL_TIM_IC_CaptureCallback>
 800a0c8:	e005      	b.n	800a0d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fa41 	bl	800a552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fa52 	bl	800a57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00c      	beq.n	800a100 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d007      	beq.n	800a100 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f06f 0201 	mvn.w	r2, #1
 800a0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7f7 fc80 	bl	8001a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00c      	beq.n	800a124 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a110:	2b00      	cmp	r3, #0
 800a112:	d007      	beq.n	800a124 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 ff02 	bl	800af28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00c      	beq.n	800a148 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a134:	2b00      	cmp	r3, #0
 800a136:	d007      	beq.n	800a148 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fefa 	bl	800af3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00c      	beq.n	800a16c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d007      	beq.n	800a16c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fa11 	bl	800a58e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 0320 	and.w	r3, r3, #32
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00c      	beq.n	800a190 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f003 0320 	and.w	r3, r3, #32
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d007      	beq.n	800a190 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f06f 0220 	mvn.w	r2, #32
 800a188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fec2 	bl	800af14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a190:	bf00      	nop
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d101      	bne.n	800a1b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e0ff      	b.n	800a3b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b14      	cmp	r3, #20
 800a1c2:	f200 80f0 	bhi.w	800a3a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a1c6:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a221 	.word	0x0800a221
 800a1d0:	0800a3a7 	.word	0x0800a3a7
 800a1d4:	0800a3a7 	.word	0x0800a3a7
 800a1d8:	0800a3a7 	.word	0x0800a3a7
 800a1dc:	0800a261 	.word	0x0800a261
 800a1e0:	0800a3a7 	.word	0x0800a3a7
 800a1e4:	0800a3a7 	.word	0x0800a3a7
 800a1e8:	0800a3a7 	.word	0x0800a3a7
 800a1ec:	0800a2a3 	.word	0x0800a2a3
 800a1f0:	0800a3a7 	.word	0x0800a3a7
 800a1f4:	0800a3a7 	.word	0x0800a3a7
 800a1f8:	0800a3a7 	.word	0x0800a3a7
 800a1fc:	0800a2e3 	.word	0x0800a2e3
 800a200:	0800a3a7 	.word	0x0800a3a7
 800a204:	0800a3a7 	.word	0x0800a3a7
 800a208:	0800a3a7 	.word	0x0800a3a7
 800a20c:	0800a325 	.word	0x0800a325
 800a210:	0800a3a7 	.word	0x0800a3a7
 800a214:	0800a3a7 	.word	0x0800a3a7
 800a218:	0800a3a7 	.word	0x0800a3a7
 800a21c:	0800a365 	.word	0x0800a365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	4618      	mov	r0, r3
 800a228:	f000 fa56 	bl	800a6d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	699a      	ldr	r2, [r3, #24]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0208 	orr.w	r2, r2, #8
 800a23a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	699a      	ldr	r2, [r3, #24]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f022 0204 	bic.w	r2, r2, #4
 800a24a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6999      	ldr	r1, [r3, #24]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	691a      	ldr	r2, [r3, #16]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	619a      	str	r2, [r3, #24]
      break;
 800a25e:	e0a5      	b.n	800a3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68b9      	ldr	r1, [r7, #8]
 800a266:	4618      	mov	r0, r3
 800a268:	f000 fac6 	bl	800a7f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	699a      	ldr	r2, [r3, #24]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a27a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	699a      	ldr	r2, [r3, #24]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a28a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6999      	ldr	r1, [r3, #24]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	021a      	lsls	r2, r3, #8
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	619a      	str	r2, [r3, #24]
      break;
 800a2a0:	e084      	b.n	800a3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 fb2f 	bl	800a90c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	69da      	ldr	r2, [r3, #28]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f042 0208 	orr.w	r2, r2, #8
 800a2bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	69da      	ldr	r2, [r3, #28]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0204 	bic.w	r2, r2, #4
 800a2cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69d9      	ldr	r1, [r3, #28]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	691a      	ldr	r2, [r3, #16]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	61da      	str	r2, [r3, #28]
      break;
 800a2e0:	e064      	b.n	800a3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68b9      	ldr	r1, [r7, #8]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 fb97 	bl	800aa1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	69da      	ldr	r2, [r3, #28]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69da      	ldr	r2, [r3, #28]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a30c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	69d9      	ldr	r1, [r3, #28]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	021a      	lsls	r2, r3, #8
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	61da      	str	r2, [r3, #28]
      break;
 800a322:	e043      	b.n	800a3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 fbe0 	bl	800aaf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f042 0208 	orr.w	r2, r2, #8
 800a33e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f022 0204 	bic.w	r2, r2, #4
 800a34e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	691a      	ldr	r2, [r3, #16]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	430a      	orrs	r2, r1
 800a360:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a362:	e023      	b.n	800a3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68b9      	ldr	r1, [r7, #8]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 fc24 	bl	800abb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a37e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a38e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	021a      	lsls	r2, r3, #8
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a3a4:	e002      	b.n	800a3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a3aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop

0800a3c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d101      	bne.n	800a3dc <HAL_TIM_ConfigClockSource+0x1c>
 800a3d8:	2302      	movs	r3, #2
 800a3da:	e0b6      	b.n	800a54a <HAL_TIM_ConfigClockSource+0x18a>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a418:	d03e      	beq.n	800a498 <HAL_TIM_ConfigClockSource+0xd8>
 800a41a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a41e:	f200 8087 	bhi.w	800a530 <HAL_TIM_ConfigClockSource+0x170>
 800a422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a426:	f000 8086 	beq.w	800a536 <HAL_TIM_ConfigClockSource+0x176>
 800a42a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a42e:	d87f      	bhi.n	800a530 <HAL_TIM_ConfigClockSource+0x170>
 800a430:	2b70      	cmp	r3, #112	; 0x70
 800a432:	d01a      	beq.n	800a46a <HAL_TIM_ConfigClockSource+0xaa>
 800a434:	2b70      	cmp	r3, #112	; 0x70
 800a436:	d87b      	bhi.n	800a530 <HAL_TIM_ConfigClockSource+0x170>
 800a438:	2b60      	cmp	r3, #96	; 0x60
 800a43a:	d050      	beq.n	800a4de <HAL_TIM_ConfigClockSource+0x11e>
 800a43c:	2b60      	cmp	r3, #96	; 0x60
 800a43e:	d877      	bhi.n	800a530 <HAL_TIM_ConfigClockSource+0x170>
 800a440:	2b50      	cmp	r3, #80	; 0x50
 800a442:	d03c      	beq.n	800a4be <HAL_TIM_ConfigClockSource+0xfe>
 800a444:	2b50      	cmp	r3, #80	; 0x50
 800a446:	d873      	bhi.n	800a530 <HAL_TIM_ConfigClockSource+0x170>
 800a448:	2b40      	cmp	r3, #64	; 0x40
 800a44a:	d058      	beq.n	800a4fe <HAL_TIM_ConfigClockSource+0x13e>
 800a44c:	2b40      	cmp	r3, #64	; 0x40
 800a44e:	d86f      	bhi.n	800a530 <HAL_TIM_ConfigClockSource+0x170>
 800a450:	2b30      	cmp	r3, #48	; 0x30
 800a452:	d064      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x15e>
 800a454:	2b30      	cmp	r3, #48	; 0x30
 800a456:	d86b      	bhi.n	800a530 <HAL_TIM_ConfigClockSource+0x170>
 800a458:	2b20      	cmp	r3, #32
 800a45a:	d060      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x15e>
 800a45c:	2b20      	cmp	r3, #32
 800a45e:	d867      	bhi.n	800a530 <HAL_TIM_ConfigClockSource+0x170>
 800a460:	2b00      	cmp	r3, #0
 800a462:	d05c      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x15e>
 800a464:	2b10      	cmp	r3, #16
 800a466:	d05a      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x15e>
 800a468:	e062      	b.n	800a530 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a47a:	f000 fc7d 	bl	800ad78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a48c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	609a      	str	r2, [r3, #8]
      break;
 800a496:	e04f      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4a8:	f000 fc66 	bl	800ad78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4ba:	609a      	str	r2, [r3, #8]
      break;
 800a4bc:	e03c      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	f000 fbda 	bl	800ac84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2150      	movs	r1, #80	; 0x50
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 fc33 	bl	800ad42 <TIM_ITRx_SetConfig>
      break;
 800a4dc:	e02c      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f000 fbf9 	bl	800ace2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2160      	movs	r1, #96	; 0x60
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fc23 	bl	800ad42 <TIM_ITRx_SetConfig>
      break;
 800a4fc:	e01c      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a50a:	461a      	mov	r2, r3
 800a50c:	f000 fbba 	bl	800ac84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2140      	movs	r1, #64	; 0x40
 800a516:	4618      	mov	r0, r3
 800a518:	f000 fc13 	bl	800ad42 <TIM_ITRx_SetConfig>
      break;
 800a51c:	e00c      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4619      	mov	r1, r3
 800a528:	4610      	mov	r0, r2
 800a52a:	f000 fc0a 	bl	800ad42 <TIM_ITRx_SetConfig>
      break;
 800a52e:	e003      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	73fb      	strb	r3, [r7, #15]
      break;
 800a534:	e000      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a548:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a56e:	bf00      	nop
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a582:	bf00      	nop
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a596:	bf00      	nop
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
	...

0800a5a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a40      	ldr	r2, [pc, #256]	; (800a6b8 <TIM_Base_SetConfig+0x114>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d013      	beq.n	800a5e4 <TIM_Base_SetConfig+0x40>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c2:	d00f      	beq.n	800a5e4 <TIM_Base_SetConfig+0x40>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a3d      	ldr	r2, [pc, #244]	; (800a6bc <TIM_Base_SetConfig+0x118>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d00b      	beq.n	800a5e4 <TIM_Base_SetConfig+0x40>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a3c      	ldr	r2, [pc, #240]	; (800a6c0 <TIM_Base_SetConfig+0x11c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d007      	beq.n	800a5e4 <TIM_Base_SetConfig+0x40>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a3b      	ldr	r2, [pc, #236]	; (800a6c4 <TIM_Base_SetConfig+0x120>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d003      	beq.n	800a5e4 <TIM_Base_SetConfig+0x40>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a3a      	ldr	r2, [pc, #232]	; (800a6c8 <TIM_Base_SetConfig+0x124>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d108      	bne.n	800a5f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a2f      	ldr	r2, [pc, #188]	; (800a6b8 <TIM_Base_SetConfig+0x114>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d01f      	beq.n	800a63e <TIM_Base_SetConfig+0x9a>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a604:	d01b      	beq.n	800a63e <TIM_Base_SetConfig+0x9a>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a2c      	ldr	r2, [pc, #176]	; (800a6bc <TIM_Base_SetConfig+0x118>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d017      	beq.n	800a63e <TIM_Base_SetConfig+0x9a>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a2b      	ldr	r2, [pc, #172]	; (800a6c0 <TIM_Base_SetConfig+0x11c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d013      	beq.n	800a63e <TIM_Base_SetConfig+0x9a>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a2a      	ldr	r2, [pc, #168]	; (800a6c4 <TIM_Base_SetConfig+0x120>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00f      	beq.n	800a63e <TIM_Base_SetConfig+0x9a>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a29      	ldr	r2, [pc, #164]	; (800a6c8 <TIM_Base_SetConfig+0x124>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d00b      	beq.n	800a63e <TIM_Base_SetConfig+0x9a>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a28      	ldr	r2, [pc, #160]	; (800a6cc <TIM_Base_SetConfig+0x128>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d007      	beq.n	800a63e <TIM_Base_SetConfig+0x9a>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a27      	ldr	r2, [pc, #156]	; (800a6d0 <TIM_Base_SetConfig+0x12c>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d003      	beq.n	800a63e <TIM_Base_SetConfig+0x9a>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a26      	ldr	r2, [pc, #152]	; (800a6d4 <TIM_Base_SetConfig+0x130>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d108      	bne.n	800a650 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a10      	ldr	r2, [pc, #64]	; (800a6b8 <TIM_Base_SetConfig+0x114>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d00f      	beq.n	800a69c <TIM_Base_SetConfig+0xf8>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a12      	ldr	r2, [pc, #72]	; (800a6c8 <TIM_Base_SetConfig+0x124>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d00b      	beq.n	800a69c <TIM_Base_SetConfig+0xf8>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a11      	ldr	r2, [pc, #68]	; (800a6cc <TIM_Base_SetConfig+0x128>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d007      	beq.n	800a69c <TIM_Base_SetConfig+0xf8>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a10      	ldr	r2, [pc, #64]	; (800a6d0 <TIM_Base_SetConfig+0x12c>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d003      	beq.n	800a69c <TIM_Base_SetConfig+0xf8>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a0f      	ldr	r2, [pc, #60]	; (800a6d4 <TIM_Base_SetConfig+0x130>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d103      	bne.n	800a6a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	691a      	ldr	r2, [r3, #16]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	615a      	str	r2, [r3, #20]
}
 800a6aa:	bf00      	nop
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	40012c00 	.word	0x40012c00
 800a6bc:	40000400 	.word	0x40000400
 800a6c0:	40000800 	.word	0x40000800
 800a6c4:	40000c00 	.word	0x40000c00
 800a6c8:	40013400 	.word	0x40013400
 800a6cc:	40014000 	.word	0x40014000
 800a6d0:	40014400 	.word	0x40014400
 800a6d4:	40014800 	.word	0x40014800

0800a6d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	f023 0201 	bic.w	r2, r3, #1
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f023 0302 	bic.w	r3, r3, #2
 800a724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a2c      	ldr	r2, [pc, #176]	; (800a7e4 <TIM_OC1_SetConfig+0x10c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d00f      	beq.n	800a758 <TIM_OC1_SetConfig+0x80>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a2b      	ldr	r2, [pc, #172]	; (800a7e8 <TIM_OC1_SetConfig+0x110>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d00b      	beq.n	800a758 <TIM_OC1_SetConfig+0x80>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a2a      	ldr	r2, [pc, #168]	; (800a7ec <TIM_OC1_SetConfig+0x114>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d007      	beq.n	800a758 <TIM_OC1_SetConfig+0x80>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a29      	ldr	r2, [pc, #164]	; (800a7f0 <TIM_OC1_SetConfig+0x118>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d003      	beq.n	800a758 <TIM_OC1_SetConfig+0x80>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a28      	ldr	r2, [pc, #160]	; (800a7f4 <TIM_OC1_SetConfig+0x11c>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d10c      	bne.n	800a772 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f023 0308 	bic.w	r3, r3, #8
 800a75e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	4313      	orrs	r3, r2
 800a768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f023 0304 	bic.w	r3, r3, #4
 800a770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a1b      	ldr	r2, [pc, #108]	; (800a7e4 <TIM_OC1_SetConfig+0x10c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d00f      	beq.n	800a79a <TIM_OC1_SetConfig+0xc2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a1a      	ldr	r2, [pc, #104]	; (800a7e8 <TIM_OC1_SetConfig+0x110>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d00b      	beq.n	800a79a <TIM_OC1_SetConfig+0xc2>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a19      	ldr	r2, [pc, #100]	; (800a7ec <TIM_OC1_SetConfig+0x114>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d007      	beq.n	800a79a <TIM_OC1_SetConfig+0xc2>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a18      	ldr	r2, [pc, #96]	; (800a7f0 <TIM_OC1_SetConfig+0x118>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d003      	beq.n	800a79a <TIM_OC1_SetConfig+0xc2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a17      	ldr	r2, [pc, #92]	; (800a7f4 <TIM_OC1_SetConfig+0x11c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d111      	bne.n	800a7be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	621a      	str	r2, [r3, #32]
}
 800a7d8:	bf00      	nop
 800a7da:	371c      	adds	r7, #28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	40012c00 	.word	0x40012c00
 800a7e8:	40013400 	.word	0x40013400
 800a7ec:	40014000 	.word	0x40014000
 800a7f0:	40014400 	.word	0x40014400
 800a7f4:	40014800 	.word	0x40014800

0800a7f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a1b      	ldr	r3, [r3, #32]
 800a80c:	f023 0210 	bic.w	r2, r3, #16
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a82a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	021b      	lsls	r3, r3, #8
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f023 0320 	bic.w	r3, r3, #32
 800a846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	011b      	lsls	r3, r3, #4
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	4313      	orrs	r3, r2
 800a852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a28      	ldr	r2, [pc, #160]	; (800a8f8 <TIM_OC2_SetConfig+0x100>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d003      	beq.n	800a864 <TIM_OC2_SetConfig+0x6c>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a27      	ldr	r2, [pc, #156]	; (800a8fc <TIM_OC2_SetConfig+0x104>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d10d      	bne.n	800a880 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	4313      	orrs	r3, r2
 800a876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a87e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a1d      	ldr	r2, [pc, #116]	; (800a8f8 <TIM_OC2_SetConfig+0x100>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d00f      	beq.n	800a8a8 <TIM_OC2_SetConfig+0xb0>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a1c      	ldr	r2, [pc, #112]	; (800a8fc <TIM_OC2_SetConfig+0x104>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d00b      	beq.n	800a8a8 <TIM_OC2_SetConfig+0xb0>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a1b      	ldr	r2, [pc, #108]	; (800a900 <TIM_OC2_SetConfig+0x108>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d007      	beq.n	800a8a8 <TIM_OC2_SetConfig+0xb0>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a1a      	ldr	r2, [pc, #104]	; (800a904 <TIM_OC2_SetConfig+0x10c>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d003      	beq.n	800a8a8 <TIM_OC2_SetConfig+0xb0>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a19      	ldr	r2, [pc, #100]	; (800a908 <TIM_OC2_SetConfig+0x110>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d113      	bne.n	800a8d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	695b      	ldr	r3, [r3, #20]
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	621a      	str	r2, [r3, #32]
}
 800a8ea:	bf00      	nop
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	40012c00 	.word	0x40012c00
 800a8fc:	40013400 	.word	0x40013400
 800a900:	40014000 	.word	0x40014000
 800a904:	40014400 	.word	0x40014400
 800a908:	40014800 	.word	0x40014800

0800a90c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b087      	sub	sp, #28
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a93a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a93e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f023 0303 	bic.w	r3, r3, #3
 800a946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	021b      	lsls	r3, r3, #8
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	4313      	orrs	r3, r2
 800a964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a27      	ldr	r2, [pc, #156]	; (800aa08 <TIM_OC3_SetConfig+0xfc>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d003      	beq.n	800a976 <TIM_OC3_SetConfig+0x6a>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a26      	ldr	r2, [pc, #152]	; (800aa0c <TIM_OC3_SetConfig+0x100>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d10d      	bne.n	800a992 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a97c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	021b      	lsls	r3, r3, #8
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a1c      	ldr	r2, [pc, #112]	; (800aa08 <TIM_OC3_SetConfig+0xfc>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d00f      	beq.n	800a9ba <TIM_OC3_SetConfig+0xae>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a1b      	ldr	r2, [pc, #108]	; (800aa0c <TIM_OC3_SetConfig+0x100>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d00b      	beq.n	800a9ba <TIM_OC3_SetConfig+0xae>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a1a      	ldr	r2, [pc, #104]	; (800aa10 <TIM_OC3_SetConfig+0x104>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d007      	beq.n	800a9ba <TIM_OC3_SetConfig+0xae>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a19      	ldr	r2, [pc, #100]	; (800aa14 <TIM_OC3_SetConfig+0x108>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d003      	beq.n	800a9ba <TIM_OC3_SetConfig+0xae>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a18      	ldr	r2, [pc, #96]	; (800aa18 <TIM_OC3_SetConfig+0x10c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d113      	bne.n	800a9e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	011b      	lsls	r3, r3, #4
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	011b      	lsls	r3, r3, #4
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	621a      	str	r2, [r3, #32]
}
 800a9fc:	bf00      	nop
 800a9fe:	371c      	adds	r7, #28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	40012c00 	.word	0x40012c00
 800aa0c:	40013400 	.word	0x40013400
 800aa10:	40014000 	.word	0x40014000
 800aa14:	40014400 	.word	0x40014400
 800aa18:	40014800 	.word	0x40014800

0800aa1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	021b      	lsls	r3, r3, #8
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	031b      	lsls	r3, r3, #12
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a18      	ldr	r2, [pc, #96]	; (800aadc <TIM_OC4_SetConfig+0xc0>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d00f      	beq.n	800aaa0 <TIM_OC4_SetConfig+0x84>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a17      	ldr	r2, [pc, #92]	; (800aae0 <TIM_OC4_SetConfig+0xc4>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d00b      	beq.n	800aaa0 <TIM_OC4_SetConfig+0x84>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a16      	ldr	r2, [pc, #88]	; (800aae4 <TIM_OC4_SetConfig+0xc8>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d007      	beq.n	800aaa0 <TIM_OC4_SetConfig+0x84>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a15      	ldr	r2, [pc, #84]	; (800aae8 <TIM_OC4_SetConfig+0xcc>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d003      	beq.n	800aaa0 <TIM_OC4_SetConfig+0x84>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a14      	ldr	r2, [pc, #80]	; (800aaec <TIM_OC4_SetConfig+0xd0>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d109      	bne.n	800aab4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	019b      	lsls	r3, r3, #6
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	621a      	str	r2, [r3, #32]
}
 800aace:	bf00      	nop
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40012c00 	.word	0x40012c00
 800aae0:	40013400 	.word	0x40013400
 800aae4:	40014000 	.word	0x40014000
 800aae8:	40014400 	.word	0x40014400
 800aaec:	40014800 	.word	0x40014800

0800aaf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ab34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	041b      	lsls	r3, r3, #16
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a17      	ldr	r2, [pc, #92]	; (800aba4 <TIM_OC5_SetConfig+0xb4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00f      	beq.n	800ab6a <TIM_OC5_SetConfig+0x7a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a16      	ldr	r2, [pc, #88]	; (800aba8 <TIM_OC5_SetConfig+0xb8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00b      	beq.n	800ab6a <TIM_OC5_SetConfig+0x7a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a15      	ldr	r2, [pc, #84]	; (800abac <TIM_OC5_SetConfig+0xbc>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d007      	beq.n	800ab6a <TIM_OC5_SetConfig+0x7a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a14      	ldr	r2, [pc, #80]	; (800abb0 <TIM_OC5_SetConfig+0xc0>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d003      	beq.n	800ab6a <TIM_OC5_SetConfig+0x7a>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a13      	ldr	r2, [pc, #76]	; (800abb4 <TIM_OC5_SetConfig+0xc4>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d109      	bne.n	800ab7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	021b      	lsls	r3, r3, #8
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	621a      	str	r2, [r3, #32]
}
 800ab98:	bf00      	nop
 800ab9a:	371c      	adds	r7, #28
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	40012c00 	.word	0x40012c00
 800aba8:	40013400 	.word	0x40013400
 800abac:	40014000 	.word	0x40014000
 800abb0:	40014400 	.word	0x40014400
 800abb4:	40014800 	.word	0x40014800

0800abb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	021b      	lsls	r3, r3, #8
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	051b      	lsls	r3, r3, #20
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a18      	ldr	r2, [pc, #96]	; (800ac70 <TIM_OC6_SetConfig+0xb8>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d00f      	beq.n	800ac34 <TIM_OC6_SetConfig+0x7c>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a17      	ldr	r2, [pc, #92]	; (800ac74 <TIM_OC6_SetConfig+0xbc>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d00b      	beq.n	800ac34 <TIM_OC6_SetConfig+0x7c>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a16      	ldr	r2, [pc, #88]	; (800ac78 <TIM_OC6_SetConfig+0xc0>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d007      	beq.n	800ac34 <TIM_OC6_SetConfig+0x7c>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a15      	ldr	r2, [pc, #84]	; (800ac7c <TIM_OC6_SetConfig+0xc4>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d003      	beq.n	800ac34 <TIM_OC6_SetConfig+0x7c>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a14      	ldr	r2, [pc, #80]	; (800ac80 <TIM_OC6_SetConfig+0xc8>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d109      	bne.n	800ac48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	029b      	lsls	r3, r3, #10
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	621a      	str	r2, [r3, #32]
}
 800ac62:	bf00      	nop
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	40012c00 	.word	0x40012c00
 800ac74:	40013400 	.word	0x40013400
 800ac78:	40014000 	.word	0x40014000
 800ac7c:	40014400 	.word	0x40014400
 800ac80:	40014800 	.word	0x40014800

0800ac84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b087      	sub	sp, #28
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	f023 0201 	bic.w	r2, r3, #1
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f023 030a 	bic.w	r3, r3, #10
 800acc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	621a      	str	r2, [r3, #32]
}
 800acd6:	bf00      	nop
 800acd8:	371c      	adds	r7, #28
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b087      	sub	sp, #28
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	f023 0210 	bic.w	r2, r3, #16
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	031b      	lsls	r3, r3, #12
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	621a      	str	r2, [r3, #32]
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b085      	sub	sp, #20
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	f043 0307 	orr.w	r3, r3, #7
 800ad64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	609a      	str	r2, [r3, #8]
}
 800ad6c:	bf00      	nop
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	021a      	lsls	r2, r3, #8
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	431a      	orrs	r2, r3
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	609a      	str	r2, [r3, #8]
}
 800adac:	bf00      	nop
 800adae:	371c      	adds	r7, #28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800adb8:	b480      	push	{r7}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	f003 031f 	and.w	r3, r3, #31
 800adca:	2201      	movs	r2, #1
 800adcc:	fa02 f303 	lsl.w	r3, r2, r3
 800add0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6a1a      	ldr	r2, [r3, #32]
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	43db      	mvns	r3, r3
 800adda:	401a      	ands	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6a1a      	ldr	r2, [r3, #32]
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f003 031f 	and.w	r3, r3, #31
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	fa01 f303 	lsl.w	r3, r1, r3
 800adf0:	431a      	orrs	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	621a      	str	r2, [r3, #32]
}
 800adf6:	bf00      	nop
 800adf8:	371c      	adds	r7, #28
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
	...

0800ae04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d101      	bne.n	800ae1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae18:	2302      	movs	r3, #2
 800ae1a:	e068      	b.n	800aeee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2202      	movs	r2, #2
 800ae28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a2e      	ldr	r2, [pc, #184]	; (800aefc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d004      	beq.n	800ae50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a2d      	ldr	r2, [pc, #180]	; (800af00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d108      	bne.n	800ae62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a1e      	ldr	r2, [pc, #120]	; (800aefc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d01d      	beq.n	800aec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae8e:	d018      	beq.n	800aec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a1b      	ldr	r2, [pc, #108]	; (800af04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d013      	beq.n	800aec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a1a      	ldr	r2, [pc, #104]	; (800af08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d00e      	beq.n	800aec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a18      	ldr	r2, [pc, #96]	; (800af0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d009      	beq.n	800aec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a13      	ldr	r2, [pc, #76]	; (800af00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d004      	beq.n	800aec2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a14      	ldr	r2, [pc, #80]	; (800af10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d10c      	bne.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	40012c00 	.word	0x40012c00
 800af00:	40013400 	.word	0x40013400
 800af04:	40000400 	.word	0x40000400
 800af08:	40000800 	.word	0x40000800
 800af0c:	40000c00 	.word	0x40000c00
 800af10:	40014000 	.word	0x40014000

0800af14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e042      	b.n	800afe8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d106      	bne.n	800af7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7f9 fbbb 	bl	80046f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2224      	movs	r2, #36	; 0x24
 800af7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f022 0201 	bic.w	r2, r2, #1
 800af90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 ff48 	bl	800be30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fc49 	bl	800b838 <UART_SetConfig>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d101      	bne.n	800afb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	e01b      	b.n	800afe8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800afbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	689a      	ldr	r2, [r3, #8]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f042 0201 	orr.w	r2, r2, #1
 800afde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 ffc7 	bl	800bf74 <UART_CheckIdleState>
 800afe6:	4603      	mov	r3, r0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b091      	sub	sp, #68	; 0x44
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	4613      	mov	r3, r2
 800affc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b004:	2b20      	cmp	r3, #32
 800b006:	d178      	bne.n	800b0fa <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <HAL_UART_Transmit_IT+0x24>
 800b00e:	88fb      	ldrh	r3, [r7, #6]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e071      	b.n	800b0fc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	88fa      	ldrh	r2, [r7, #6]
 800b022:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	88fa      	ldrh	r2, [r7, #6]
 800b02a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2221      	movs	r2, #33	; 0x21
 800b040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b04c:	d12a      	bne.n	800b0a4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b056:	d107      	bne.n	800b068 <HAL_UART_Transmit_IT+0x78>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d103      	bne.n	800b068 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4a29      	ldr	r2, [pc, #164]	; (800b108 <HAL_UART_Transmit_IT+0x118>)
 800b064:	679a      	str	r2, [r3, #120]	; 0x78
 800b066:	e002      	b.n	800b06e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4a28      	ldr	r2, [pc, #160]	; (800b10c <HAL_UART_Transmit_IT+0x11c>)
 800b06c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3308      	adds	r3, #8
 800b074:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	e853 3f00 	ldrex	r3, [r3]
 800b07c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b084:	63bb      	str	r3, [r7, #56]	; 0x38
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3308      	adds	r3, #8
 800b08c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b08e:	637a      	str	r2, [r7, #52]	; 0x34
 800b090:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b096:	e841 2300 	strex	r3, r2, [r1]
 800b09a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1e5      	bne.n	800b06e <HAL_UART_Transmit_IT+0x7e>
 800b0a2:	e028      	b.n	800b0f6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ac:	d107      	bne.n	800b0be <HAL_UART_Transmit_IT+0xce>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d103      	bne.n	800b0be <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	4a15      	ldr	r2, [pc, #84]	; (800b110 <HAL_UART_Transmit_IT+0x120>)
 800b0ba:	679a      	str	r2, [r3, #120]	; 0x78
 800b0bc:	e002      	b.n	800b0c4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	4a14      	ldr	r2, [pc, #80]	; (800b114 <HAL_UART_Transmit_IT+0x124>)
 800b0c2:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	e853 3f00 	ldrex	r3, [r3]
 800b0d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	461a      	mov	r2, r3
 800b0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e2:	623b      	str	r3, [r7, #32]
 800b0e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e6:	69f9      	ldr	r1, [r7, #28]
 800b0e8:	6a3a      	ldr	r2, [r7, #32]
 800b0ea:	e841 2300 	strex	r3, r2, [r1]
 800b0ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1e6      	bne.n	800b0c4 <HAL_UART_Transmit_IT+0xd4>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e000      	b.n	800b0fc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b0fa:	2302      	movs	r3, #2
  }
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3744      	adds	r7, #68	; 0x44
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	0800c733 	.word	0x0800c733
 800b10c:	0800c651 	.word	0x0800c651
 800b110:	0800c58f 	.word	0x0800c58f
 800b114:	0800c4d5 	.word	0x0800c4d5

0800b118 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b08a      	sub	sp, #40	; 0x28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b12c:	2b20      	cmp	r3, #32
 800b12e:	d137      	bne.n	800b1a0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <HAL_UART_Receive_IT+0x24>
 800b136:	88fb      	ldrh	r3, [r7, #6]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e030      	b.n	800b1a2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a18      	ldr	r2, [pc, #96]	; (800b1ac <HAL_UART_Receive_IT+0x94>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d01f      	beq.n	800b190 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d018      	beq.n	800b190 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	e853 3f00 	ldrex	r3, [r3]
 800b16a:	613b      	str	r3, [r7, #16]
   return(result);
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b172:	627b      	str	r3, [r7, #36]	; 0x24
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	461a      	mov	r2, r3
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	623b      	str	r3, [r7, #32]
 800b17e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	69f9      	ldr	r1, [r7, #28]
 800b182:	6a3a      	ldr	r2, [r7, #32]
 800b184:	e841 2300 	strex	r3, r2, [r1]
 800b188:	61bb      	str	r3, [r7, #24]
   return(result);
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e6      	bne.n	800b15e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b190:	88fb      	ldrh	r3, [r7, #6]
 800b192:	461a      	mov	r2, r3
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f000 fffe 	bl	800c198 <UART_Start_Receive_IT>
 800b19c:	4603      	mov	r3, r0
 800b19e:	e000      	b.n	800b1a2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b1a0:	2302      	movs	r3, #2
  }
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3728      	adds	r7, #40	; 0x28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40008000 	.word	0x40008000

0800b1b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b0ba      	sub	sp, #232	; 0xe8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	69db      	ldr	r3, [r3, #28]
 800b1be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b1da:	f640 030f 	movw	r3, #2063	; 0x80f
 800b1de:	4013      	ands	r3, r2
 800b1e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b1e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d11b      	bne.n	800b224 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1f0:	f003 0320 	and.w	r3, r3, #32
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d015      	beq.n	800b224 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1fc:	f003 0320 	and.w	r3, r3, #32
 800b200:	2b00      	cmp	r3, #0
 800b202:	d105      	bne.n	800b210 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d009      	beq.n	800b224 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 82e3 	beq.w	800b7e0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	4798      	blx	r3
      }
      return;
 800b222:	e2dd      	b.n	800b7e0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800b224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 8123 	beq.w	800b474 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b22e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b232:	4b8d      	ldr	r3, [pc, #564]	; (800b468 <HAL_UART_IRQHandler+0x2b8>)
 800b234:	4013      	ands	r3, r2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d106      	bne.n	800b248 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b23a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b23e:	4b8b      	ldr	r3, [pc, #556]	; (800b46c <HAL_UART_IRQHandler+0x2bc>)
 800b240:	4013      	ands	r3, r2
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 8116 	beq.w	800b474 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	2b00      	cmp	r3, #0
 800b252:	d011      	beq.n	800b278 <HAL_UART_IRQHandler+0xc8>
 800b254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00b      	beq.n	800b278 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2201      	movs	r2, #1
 800b266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b26e:	f043 0201 	orr.w	r2, r3, #1
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b27c:	f003 0302 	and.w	r3, r3, #2
 800b280:	2b00      	cmp	r3, #0
 800b282:	d011      	beq.n	800b2a8 <HAL_UART_IRQHandler+0xf8>
 800b284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b288:	f003 0301 	and.w	r3, r3, #1
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00b      	beq.n	800b2a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2202      	movs	r2, #2
 800b296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b29e:	f043 0204 	orr.w	r2, r3, #4
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d011      	beq.n	800b2d8 <HAL_UART_IRQHandler+0x128>
 800b2b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2b8:	f003 0301 	and.w	r3, r3, #1
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ce:	f043 0202 	orr.w	r2, r3, #2
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2dc:	f003 0308 	and.w	r3, r3, #8
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d017      	beq.n	800b314 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e8:	f003 0320 	and.w	r3, r3, #32
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d105      	bne.n	800b2fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b2f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b2f4:	4b5c      	ldr	r3, [pc, #368]	; (800b468 <HAL_UART_IRQHandler+0x2b8>)
 800b2f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00b      	beq.n	800b314 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2208      	movs	r2, #8
 800b302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b30a:	f043 0208 	orr.w	r2, r3, #8
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d012      	beq.n	800b346 <HAL_UART_IRQHandler+0x196>
 800b320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00c      	beq.n	800b346 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b33c:	f043 0220 	orr.w	r2, r3, #32
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 8249 	beq.w	800b7e4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b356:	f003 0320 	and.w	r3, r3, #32
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d013      	beq.n	800b386 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b362:	f003 0320 	and.w	r3, r3, #32
 800b366:	2b00      	cmp	r3, #0
 800b368:	d105      	bne.n	800b376 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b36a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b36e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d007      	beq.n	800b386 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b38c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39a:	2b40      	cmp	r3, #64	; 0x40
 800b39c:	d005      	beq.n	800b3aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b39e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d054      	beq.n	800b454 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 f816 	bl	800c3dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3ba:	2b40      	cmp	r3, #64	; 0x40
 800b3bc:	d146      	bne.n	800b44c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	3308      	adds	r3, #8
 800b3c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3cc:	e853 3f00 	ldrex	r3, [r3]
 800b3d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b3d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b3ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b3ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b3f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3fa:	e841 2300 	strex	r3, r2, [r1]
 800b3fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1d9      	bne.n	800b3be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b410:	2b00      	cmp	r3, #0
 800b412:	d017      	beq.n	800b444 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b41a:	4a15      	ldr	r2, [pc, #84]	; (800b470 <HAL_UART_IRQHandler+0x2c0>)
 800b41c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b424:	4618      	mov	r0, r3
 800b426:	f7fa fd1e 	bl	8005e66 <HAL_DMA_Abort_IT>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d019      	beq.n	800b464 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b43e:	4610      	mov	r0, r2
 800b440:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b442:	e00f      	b.n	800b464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f9e1 	bl	800b80c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b44a:	e00b      	b.n	800b464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f9dd 	bl	800b80c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b452:	e007      	b.n	800b464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f9d9 	bl	800b80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b462:	e1bf      	b.n	800b7e4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b464:	bf00      	nop
    return;
 800b466:	e1bd      	b.n	800b7e4 <HAL_UART_IRQHandler+0x634>
 800b468:	10000001 	.word	0x10000001
 800b46c:	04000120 	.word	0x04000120
 800b470:	0800c4a9 	.word	0x0800c4a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b478:	2b01      	cmp	r3, #1
 800b47a:	f040 8153 	bne.w	800b724 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b482:	f003 0310 	and.w	r3, r3, #16
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 814c 	beq.w	800b724 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b48c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b490:	f003 0310 	and.w	r3, r3, #16
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 8145 	beq.w	800b724 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2210      	movs	r2, #16
 800b4a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ac:	2b40      	cmp	r3, #64	; 0x40
 800b4ae:	f040 80bb 	bne.w	800b628 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 818f 	beq.w	800b7e8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b4d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	f080 8187 	bcs.w	800b7e8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0320 	and.w	r3, r3, #32
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f040 8087 	bne.w	800b606 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b50c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	461a      	mov	r2, r3
 800b51e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b526:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b52e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b532:	e841 2300 	strex	r3, r2, [r1]
 800b536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b53a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1da      	bne.n	800b4f8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3308      	adds	r3, #8
 800b548:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b54c:	e853 3f00 	ldrex	r3, [r3]
 800b550:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b554:	f023 0301 	bic.w	r3, r3, #1
 800b558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3308      	adds	r3, #8
 800b562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b566:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b56a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b56e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b572:	e841 2300 	strex	r3, r2, [r1]
 800b576:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1e1      	bne.n	800b542 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3308      	adds	r3, #8
 800b584:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b588:	e853 3f00 	ldrex	r3, [r3]
 800b58c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b58e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3308      	adds	r3, #8
 800b59e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b5a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b5a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b5b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e3      	bne.n	800b57e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5cc:	e853 3f00 	ldrex	r3, [r3]
 800b5d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5d4:	f023 0310 	bic.w	r3, r3, #16
 800b5d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5ee:	e841 2300 	strex	r3, r2, [r1]
 800b5f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1e4      	bne.n	800b5c4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b600:	4618      	mov	r0, r3
 800b602:	f7fa fbd4 	bl	8005dae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2202      	movs	r2, #2
 800b60a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b618:	b29b      	uxth	r3, r3
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	4619      	mov	r1, r3
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f8fd 	bl	800b820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b626:	e0df      	b.n	800b7e8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b634:	b29b      	uxth	r3, r3
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b642:	b29b      	uxth	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 80d1 	beq.w	800b7ec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b64a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 80cc 	beq.w	800b7ec <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65c:	e853 3f00 	ldrex	r3, [r3]
 800b660:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b664:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	461a      	mov	r2, r3
 800b672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b676:	647b      	str	r3, [r7, #68]	; 0x44
 800b678:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b67c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e4      	bne.n	800b654 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3308      	adds	r3, #8
 800b690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	623b      	str	r3, [r7, #32]
   return(result);
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6a0:	f023 0301 	bic.w	r3, r3, #1
 800b6a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b6b2:	633a      	str	r2, [r7, #48]	; 0x30
 800b6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e1      	bne.n	800b68a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	e853 3f00 	ldrex	r3, [r3]
 800b6e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f023 0310 	bic.w	r3, r3, #16
 800b6ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b6fc:	61fb      	str	r3, [r7, #28]
 800b6fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b700:	69b9      	ldr	r1, [r7, #24]
 800b702:	69fa      	ldr	r2, [r7, #28]
 800b704:	e841 2300 	strex	r3, r2, [r1]
 800b708:	617b      	str	r3, [r7, #20]
   return(result);
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1e4      	bne.n	800b6da <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2202      	movs	r2, #2
 800b714:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f87f 	bl	800b820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b722:	e063      	b.n	800b7ec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00e      	beq.n	800b74e <HAL_UART_IRQHandler+0x59e>
 800b730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d008      	beq.n	800b74e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f001 fdb8 	bl	800d2bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b74c:	e051      	b.n	800b7f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b756:	2b00      	cmp	r3, #0
 800b758:	d014      	beq.n	800b784 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b75a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b762:	2b00      	cmp	r3, #0
 800b764:	d105      	bne.n	800b772 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b76a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d008      	beq.n	800b784 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b776:	2b00      	cmp	r3, #0
 800b778:	d03a      	beq.n	800b7f0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	4798      	blx	r3
    }
    return;
 800b782:	e035      	b.n	800b7f0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d009      	beq.n	800b7a4 <HAL_UART_IRQHandler+0x5f4>
 800b790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d003      	beq.n	800b7a4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f001 f83d 	bl	800c81c <UART_EndTransmit_IT>
    return;
 800b7a2:	e026      	b.n	800b7f2 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d009      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x614>
 800b7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d003      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f001 fd91 	bl	800d2e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7c2:	e016      	b.n	800b7f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d010      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x642>
 800b7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	da0c      	bge.n	800b7f2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f001 fd79 	bl	800d2d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7de:	e008      	b.n	800b7f2 <HAL_UART_IRQHandler+0x642>
      return;
 800b7e0:	bf00      	nop
 800b7e2:	e006      	b.n	800b7f2 <HAL_UART_IRQHandler+0x642>
    return;
 800b7e4:	bf00      	nop
 800b7e6:	e004      	b.n	800b7f2 <HAL_UART_IRQHandler+0x642>
      return;
 800b7e8:	bf00      	nop
 800b7ea:	e002      	b.n	800b7f2 <HAL_UART_IRQHandler+0x642>
      return;
 800b7ec:	bf00      	nop
 800b7ee:	e000      	b.n	800b7f2 <HAL_UART_IRQHandler+0x642>
    return;
 800b7f0:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800b7f2:	37e8      	adds	r7, #232	; 0xe8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	460b      	mov	r3, r1
 800b82a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b83c:	b08c      	sub	sp, #48	; 0x30
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	431a      	orrs	r2, r3
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	431a      	orrs	r2, r3
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	69db      	ldr	r3, [r3, #28]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	4baa      	ldr	r3, [pc, #680]	; (800bb10 <UART_SetConfig+0x2d8>)
 800b868:	4013      	ands	r3, r2
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	6812      	ldr	r2, [r2, #0]
 800b86e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b870:	430b      	orrs	r3, r1
 800b872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	68da      	ldr	r2, [r3, #12]
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	430a      	orrs	r2, r1
 800b888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a9f      	ldr	r2, [pc, #636]	; (800bb14 <UART_SetConfig+0x2dc>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d004      	beq.n	800b8a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b8ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	6812      	ldr	r2, [r2, #0]
 800b8b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c2:	f023 010f 	bic.w	r1, r3, #15
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a90      	ldr	r2, [pc, #576]	; (800bb18 <UART_SetConfig+0x2e0>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d125      	bne.n	800b928 <UART_SetConfig+0xf0>
 800b8dc:	4b8f      	ldr	r3, [pc, #572]	; (800bb1c <UART_SetConfig+0x2e4>)
 800b8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e2:	f003 0303 	and.w	r3, r3, #3
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d81a      	bhi.n	800b920 <UART_SetConfig+0xe8>
 800b8ea:	a201      	add	r2, pc, #4	; (adr r2, 800b8f0 <UART_SetConfig+0xb8>)
 800b8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f0:	0800b901 	.word	0x0800b901
 800b8f4:	0800b911 	.word	0x0800b911
 800b8f8:	0800b909 	.word	0x0800b909
 800b8fc:	0800b919 	.word	0x0800b919
 800b900:	2301      	movs	r3, #1
 800b902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b906:	e116      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b908:	2302      	movs	r3, #2
 800b90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b90e:	e112      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b910:	2304      	movs	r3, #4
 800b912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b916:	e10e      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b918:	2308      	movs	r3, #8
 800b91a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b91e:	e10a      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b920:	2310      	movs	r3, #16
 800b922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b926:	e106      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a7c      	ldr	r2, [pc, #496]	; (800bb20 <UART_SetConfig+0x2e8>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d138      	bne.n	800b9a4 <UART_SetConfig+0x16c>
 800b932:	4b7a      	ldr	r3, [pc, #488]	; (800bb1c <UART_SetConfig+0x2e4>)
 800b934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b938:	f003 030c 	and.w	r3, r3, #12
 800b93c:	2b0c      	cmp	r3, #12
 800b93e:	d82d      	bhi.n	800b99c <UART_SetConfig+0x164>
 800b940:	a201      	add	r2, pc, #4	; (adr r2, 800b948 <UART_SetConfig+0x110>)
 800b942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b946:	bf00      	nop
 800b948:	0800b97d 	.word	0x0800b97d
 800b94c:	0800b99d 	.word	0x0800b99d
 800b950:	0800b99d 	.word	0x0800b99d
 800b954:	0800b99d 	.word	0x0800b99d
 800b958:	0800b98d 	.word	0x0800b98d
 800b95c:	0800b99d 	.word	0x0800b99d
 800b960:	0800b99d 	.word	0x0800b99d
 800b964:	0800b99d 	.word	0x0800b99d
 800b968:	0800b985 	.word	0x0800b985
 800b96c:	0800b99d 	.word	0x0800b99d
 800b970:	0800b99d 	.word	0x0800b99d
 800b974:	0800b99d 	.word	0x0800b99d
 800b978:	0800b995 	.word	0x0800b995
 800b97c:	2300      	movs	r3, #0
 800b97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b982:	e0d8      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b984:	2302      	movs	r3, #2
 800b986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b98a:	e0d4      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b98c:	2304      	movs	r3, #4
 800b98e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b992:	e0d0      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b994:	2308      	movs	r3, #8
 800b996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b99a:	e0cc      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b99c:	2310      	movs	r3, #16
 800b99e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9a2:	e0c8      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a5e      	ldr	r2, [pc, #376]	; (800bb24 <UART_SetConfig+0x2ec>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d125      	bne.n	800b9fa <UART_SetConfig+0x1c2>
 800b9ae:	4b5b      	ldr	r3, [pc, #364]	; (800bb1c <UART_SetConfig+0x2e4>)
 800b9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b9b8:	2b30      	cmp	r3, #48	; 0x30
 800b9ba:	d016      	beq.n	800b9ea <UART_SetConfig+0x1b2>
 800b9bc:	2b30      	cmp	r3, #48	; 0x30
 800b9be:	d818      	bhi.n	800b9f2 <UART_SetConfig+0x1ba>
 800b9c0:	2b20      	cmp	r3, #32
 800b9c2:	d00a      	beq.n	800b9da <UART_SetConfig+0x1a2>
 800b9c4:	2b20      	cmp	r3, #32
 800b9c6:	d814      	bhi.n	800b9f2 <UART_SetConfig+0x1ba>
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <UART_SetConfig+0x19a>
 800b9cc:	2b10      	cmp	r3, #16
 800b9ce:	d008      	beq.n	800b9e2 <UART_SetConfig+0x1aa>
 800b9d0:	e00f      	b.n	800b9f2 <UART_SetConfig+0x1ba>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9d8:	e0ad      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b9da:	2302      	movs	r3, #2
 800b9dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9e0:	e0a9      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b9e2:	2304      	movs	r3, #4
 800b9e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9e8:	e0a5      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b9ea:	2308      	movs	r3, #8
 800b9ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9f0:	e0a1      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b9f2:	2310      	movs	r3, #16
 800b9f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9f8:	e09d      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a4a      	ldr	r2, [pc, #296]	; (800bb28 <UART_SetConfig+0x2f0>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d125      	bne.n	800ba50 <UART_SetConfig+0x218>
 800ba04:	4b45      	ldr	r3, [pc, #276]	; (800bb1c <UART_SetConfig+0x2e4>)
 800ba06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ba0e:	2bc0      	cmp	r3, #192	; 0xc0
 800ba10:	d016      	beq.n	800ba40 <UART_SetConfig+0x208>
 800ba12:	2bc0      	cmp	r3, #192	; 0xc0
 800ba14:	d818      	bhi.n	800ba48 <UART_SetConfig+0x210>
 800ba16:	2b80      	cmp	r3, #128	; 0x80
 800ba18:	d00a      	beq.n	800ba30 <UART_SetConfig+0x1f8>
 800ba1a:	2b80      	cmp	r3, #128	; 0x80
 800ba1c:	d814      	bhi.n	800ba48 <UART_SetConfig+0x210>
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d002      	beq.n	800ba28 <UART_SetConfig+0x1f0>
 800ba22:	2b40      	cmp	r3, #64	; 0x40
 800ba24:	d008      	beq.n	800ba38 <UART_SetConfig+0x200>
 800ba26:	e00f      	b.n	800ba48 <UART_SetConfig+0x210>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba2e:	e082      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800ba30:	2302      	movs	r3, #2
 800ba32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba36:	e07e      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800ba38:	2304      	movs	r3, #4
 800ba3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba3e:	e07a      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800ba40:	2308      	movs	r3, #8
 800ba42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba46:	e076      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800ba48:	2310      	movs	r3, #16
 800ba4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba4e:	e072      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a35      	ldr	r2, [pc, #212]	; (800bb2c <UART_SetConfig+0x2f4>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d12a      	bne.n	800bab0 <UART_SetConfig+0x278>
 800ba5a:	4b30      	ldr	r3, [pc, #192]	; (800bb1c <UART_SetConfig+0x2e4>)
 800ba5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba68:	d01a      	beq.n	800baa0 <UART_SetConfig+0x268>
 800ba6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba6e:	d81b      	bhi.n	800baa8 <UART_SetConfig+0x270>
 800ba70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba74:	d00c      	beq.n	800ba90 <UART_SetConfig+0x258>
 800ba76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba7a:	d815      	bhi.n	800baa8 <UART_SetConfig+0x270>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d003      	beq.n	800ba88 <UART_SetConfig+0x250>
 800ba80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba84:	d008      	beq.n	800ba98 <UART_SetConfig+0x260>
 800ba86:	e00f      	b.n	800baa8 <UART_SetConfig+0x270>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba8e:	e052      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800ba90:	2302      	movs	r3, #2
 800ba92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba96:	e04e      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800ba98:	2304      	movs	r3, #4
 800ba9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba9e:	e04a      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800baa0:	2308      	movs	r3, #8
 800baa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baa6:	e046      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800baa8:	2310      	movs	r3, #16
 800baaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baae:	e042      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a17      	ldr	r2, [pc, #92]	; (800bb14 <UART_SetConfig+0x2dc>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d13a      	bne.n	800bb30 <UART_SetConfig+0x2f8>
 800baba:	4b18      	ldr	r3, [pc, #96]	; (800bb1c <UART_SetConfig+0x2e4>)
 800babc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bac8:	d01a      	beq.n	800bb00 <UART_SetConfig+0x2c8>
 800baca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bace:	d81b      	bhi.n	800bb08 <UART_SetConfig+0x2d0>
 800bad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bad4:	d00c      	beq.n	800baf0 <UART_SetConfig+0x2b8>
 800bad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bada:	d815      	bhi.n	800bb08 <UART_SetConfig+0x2d0>
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <UART_SetConfig+0x2b0>
 800bae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bae4:	d008      	beq.n	800baf8 <UART_SetConfig+0x2c0>
 800bae6:	e00f      	b.n	800bb08 <UART_SetConfig+0x2d0>
 800bae8:	2300      	movs	r3, #0
 800baea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baee:	e022      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800baf0:	2302      	movs	r3, #2
 800baf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baf6:	e01e      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800baf8:	2304      	movs	r3, #4
 800bafa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bafe:	e01a      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800bb00:	2308      	movs	r3, #8
 800bb02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb06:	e016      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800bb08:	2310      	movs	r3, #16
 800bb0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb0e:	e012      	b.n	800bb36 <UART_SetConfig+0x2fe>
 800bb10:	cfff69f3 	.word	0xcfff69f3
 800bb14:	40008000 	.word	0x40008000
 800bb18:	40013800 	.word	0x40013800
 800bb1c:	40021000 	.word	0x40021000
 800bb20:	40004400 	.word	0x40004400
 800bb24:	40004800 	.word	0x40004800
 800bb28:	40004c00 	.word	0x40004c00
 800bb2c:	40005000 	.word	0x40005000
 800bb30:	2310      	movs	r3, #16
 800bb32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4aae      	ldr	r2, [pc, #696]	; (800bdf4 <UART_SetConfig+0x5bc>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	f040 8097 	bne.w	800bc70 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb46:	2b08      	cmp	r3, #8
 800bb48:	d823      	bhi.n	800bb92 <UART_SetConfig+0x35a>
 800bb4a:	a201      	add	r2, pc, #4	; (adr r2, 800bb50 <UART_SetConfig+0x318>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bb75 	.word	0x0800bb75
 800bb54:	0800bb93 	.word	0x0800bb93
 800bb58:	0800bb7d 	.word	0x0800bb7d
 800bb5c:	0800bb93 	.word	0x0800bb93
 800bb60:	0800bb83 	.word	0x0800bb83
 800bb64:	0800bb93 	.word	0x0800bb93
 800bb68:	0800bb93 	.word	0x0800bb93
 800bb6c:	0800bb93 	.word	0x0800bb93
 800bb70:	0800bb8b 	.word	0x0800bb8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb74:	f7fc f804 	bl	8007b80 <HAL_RCC_GetPCLK1Freq>
 800bb78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb7a:	e010      	b.n	800bb9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb7c:	4b9e      	ldr	r3, [pc, #632]	; (800bdf8 <UART_SetConfig+0x5c0>)
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb80:	e00d      	b.n	800bb9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb82:	f7fb ff65 	bl	8007a50 <HAL_RCC_GetSysClockFreq>
 800bb86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb88:	e009      	b.n	800bb9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb90:	e005      	b.n	800bb9e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bb92:	2300      	movs	r3, #0
 800bb94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bb9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 8130 	beq.w	800be06 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbaa:	4a94      	ldr	r2, [pc, #592]	; (800bdfc <UART_SetConfig+0x5c4>)
 800bbac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbb8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	685a      	ldr	r2, [r3, #4]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	4413      	add	r3, r2
 800bbc4:	69ba      	ldr	r2, [r7, #24]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d305      	bcc.n	800bbd6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbd0:	69ba      	ldr	r2, [r7, #24]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d903      	bls.n	800bbde <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bbdc:	e113      	b.n	800be06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	60bb      	str	r3, [r7, #8]
 800bbe4:	60fa      	str	r2, [r7, #12]
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	4a84      	ldr	r2, [pc, #528]	; (800bdfc <UART_SetConfig+0x5c4>)
 800bbec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	603b      	str	r3, [r7, #0]
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc00:	f7f4 ffcc 	bl	8000b9c <__aeabi_uldivmod>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	4610      	mov	r0, r2
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	f04f 0200 	mov.w	r2, #0
 800bc10:	f04f 0300 	mov.w	r3, #0
 800bc14:	020b      	lsls	r3, r1, #8
 800bc16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc1a:	0202      	lsls	r2, r0, #8
 800bc1c:	6979      	ldr	r1, [r7, #20]
 800bc1e:	6849      	ldr	r1, [r1, #4]
 800bc20:	0849      	lsrs	r1, r1, #1
 800bc22:	2000      	movs	r0, #0
 800bc24:	460c      	mov	r4, r1
 800bc26:	4605      	mov	r5, r0
 800bc28:	eb12 0804 	adds.w	r8, r2, r4
 800bc2c:	eb43 0905 	adc.w	r9, r3, r5
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	469a      	mov	sl, r3
 800bc38:	4693      	mov	fp, r2
 800bc3a:	4652      	mov	r2, sl
 800bc3c:	465b      	mov	r3, fp
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 ffab 	bl	8000b9c <__aeabi_uldivmod>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc4e:	6a3b      	ldr	r3, [r7, #32]
 800bc50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc54:	d308      	bcc.n	800bc68 <UART_SetConfig+0x430>
 800bc56:	6a3b      	ldr	r3, [r7, #32]
 800bc58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc5c:	d204      	bcs.n	800bc68 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6a3a      	ldr	r2, [r7, #32]
 800bc64:	60da      	str	r2, [r3, #12]
 800bc66:	e0ce      	b.n	800be06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc6e:	e0ca      	b.n	800be06 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	69db      	ldr	r3, [r3, #28]
 800bc74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc78:	d166      	bne.n	800bd48 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bc7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc7e:	2b08      	cmp	r3, #8
 800bc80:	d827      	bhi.n	800bcd2 <UART_SetConfig+0x49a>
 800bc82:	a201      	add	r2, pc, #4	; (adr r2, 800bc88 <UART_SetConfig+0x450>)
 800bc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc88:	0800bcad 	.word	0x0800bcad
 800bc8c:	0800bcb5 	.word	0x0800bcb5
 800bc90:	0800bcbd 	.word	0x0800bcbd
 800bc94:	0800bcd3 	.word	0x0800bcd3
 800bc98:	0800bcc3 	.word	0x0800bcc3
 800bc9c:	0800bcd3 	.word	0x0800bcd3
 800bca0:	0800bcd3 	.word	0x0800bcd3
 800bca4:	0800bcd3 	.word	0x0800bcd3
 800bca8:	0800bccb 	.word	0x0800bccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcac:	f7fb ff68 	bl	8007b80 <HAL_RCC_GetPCLK1Freq>
 800bcb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bcb2:	e014      	b.n	800bcde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcb4:	f7fb ff7a 	bl	8007bac <HAL_RCC_GetPCLK2Freq>
 800bcb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bcba:	e010      	b.n	800bcde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcbc:	4b4e      	ldr	r3, [pc, #312]	; (800bdf8 <UART_SetConfig+0x5c0>)
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bcc0:	e00d      	b.n	800bcde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcc2:	f7fb fec5 	bl	8007a50 <HAL_RCC_GetSysClockFreq>
 800bcc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bcc8:	e009      	b.n	800bcde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bcd0:	e005      	b.n	800bcde <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bcdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 8090 	beq.w	800be06 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcea:	4a44      	ldr	r2, [pc, #272]	; (800bdfc <UART_SetConfig+0x5c4>)
 800bcec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcf8:	005a      	lsls	r2, r3, #1
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	085b      	lsrs	r3, r3, #1
 800bd00:	441a      	add	r2, r3
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd0a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd0c:	6a3b      	ldr	r3, [r7, #32]
 800bd0e:	2b0f      	cmp	r3, #15
 800bd10:	d916      	bls.n	800bd40 <UART_SetConfig+0x508>
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd18:	d212      	bcs.n	800bd40 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd1a:	6a3b      	ldr	r3, [r7, #32]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	f023 030f 	bic.w	r3, r3, #15
 800bd22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	085b      	lsrs	r3, r3, #1
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	f003 0307 	and.w	r3, r3, #7
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	8bfb      	ldrh	r3, [r7, #30]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	8bfa      	ldrh	r2, [r7, #30]
 800bd3c:	60da      	str	r2, [r3, #12]
 800bd3e:	e062      	b.n	800be06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd46:	e05e      	b.n	800be06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd4c:	2b08      	cmp	r3, #8
 800bd4e:	d828      	bhi.n	800bda2 <UART_SetConfig+0x56a>
 800bd50:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <UART_SetConfig+0x520>)
 800bd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd56:	bf00      	nop
 800bd58:	0800bd7d 	.word	0x0800bd7d
 800bd5c:	0800bd85 	.word	0x0800bd85
 800bd60:	0800bd8d 	.word	0x0800bd8d
 800bd64:	0800bda3 	.word	0x0800bda3
 800bd68:	0800bd93 	.word	0x0800bd93
 800bd6c:	0800bda3 	.word	0x0800bda3
 800bd70:	0800bda3 	.word	0x0800bda3
 800bd74:	0800bda3 	.word	0x0800bda3
 800bd78:	0800bd9b 	.word	0x0800bd9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd7c:	f7fb ff00 	bl	8007b80 <HAL_RCC_GetPCLK1Freq>
 800bd80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd82:	e014      	b.n	800bdae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd84:	f7fb ff12 	bl	8007bac <HAL_RCC_GetPCLK2Freq>
 800bd88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd8a:	e010      	b.n	800bdae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd8c:	4b1a      	ldr	r3, [pc, #104]	; (800bdf8 <UART_SetConfig+0x5c0>)
 800bd8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd90:	e00d      	b.n	800bdae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd92:	f7fb fe5d 	bl	8007a50 <HAL_RCC_GetSysClockFreq>
 800bd96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd98:	e009      	b.n	800bdae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bda0:	e005      	b.n	800bdae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bdac:	bf00      	nop
    }

    if (pclk != 0U)
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d028      	beq.n	800be06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb8:	4a10      	ldr	r2, [pc, #64]	; (800bdfc <UART_SetConfig+0x5c4>)
 800bdba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	085b      	lsrs	r3, r3, #1
 800bdcc:	441a      	add	r2, r3
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	2b0f      	cmp	r3, #15
 800bddc:	d910      	bls.n	800be00 <UART_SetConfig+0x5c8>
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde4:	d20c      	bcs.n	800be00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60da      	str	r2, [r3, #12]
 800bdf0:	e009      	b.n	800be06 <UART_SetConfig+0x5ce>
 800bdf2:	bf00      	nop
 800bdf4:	40008000 	.word	0x40008000
 800bdf8:	00f42400 	.word	0x00f42400
 800bdfc:	080286a8 	.word	0x080286a8
      }
      else
      {
        ret = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	2201      	movs	r2, #1
 800be0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	2201      	movs	r2, #1
 800be12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	2200      	movs	r2, #0
 800be1a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	2200      	movs	r2, #0
 800be20:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800be22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800be26:	4618      	mov	r0, r3
 800be28:	3730      	adds	r7, #48	; 0x30
 800be2a:	46bd      	mov	sp, r7
 800be2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800be30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3c:	f003 0308 	and.w	r3, r3, #8
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00a      	beq.n	800be5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	430a      	orrs	r2, r1
 800be58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5e:	f003 0301 	and.w	r3, r3, #1
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00a      	beq.n	800be7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	430a      	orrs	r2, r1
 800be7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be80:	f003 0302 	and.w	r3, r3, #2
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00a      	beq.n	800be9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	430a      	orrs	r2, r1
 800be9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea2:	f003 0304 	and.w	r3, r3, #4
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00a      	beq.n	800bec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	430a      	orrs	r2, r1
 800bebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec4:	f003 0310 	and.w	r3, r3, #16
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00a      	beq.n	800bee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	430a      	orrs	r2, r1
 800bee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee6:	f003 0320 	and.w	r3, r3, #32
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00a      	beq.n	800bf04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	430a      	orrs	r2, r1
 800bf02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d01a      	beq.n	800bf46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	430a      	orrs	r2, r1
 800bf24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf2e:	d10a      	bne.n	800bf46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	430a      	orrs	r2, r1
 800bf44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00a      	beq.n	800bf68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	430a      	orrs	r2, r1
 800bf66:	605a      	str	r2, [r3, #4]
  }
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b098      	sub	sp, #96	; 0x60
 800bf78:	af02      	add	r7, sp, #8
 800bf7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf84:	f7f9 fb5e 	bl	8005644 <HAL_GetTick>
 800bf88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0308 	and.w	r3, r3, #8
 800bf94:	2b08      	cmp	r3, #8
 800bf96:	d12f      	bne.n	800bff8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f88e 	bl	800c0c8 <UART_WaitOnFlagUntilTimeout>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d022      	beq.n	800bff8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfba:	e853 3f00 	ldrex	r3, [r3]
 800bfbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bfc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfc6:	653b      	str	r3, [r7, #80]	; 0x50
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd0:	647b      	str	r3, [r7, #68]	; 0x44
 800bfd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfd8:	e841 2300 	strex	r3, r2, [r1]
 800bfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1e6      	bne.n	800bfb2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2220      	movs	r2, #32
 800bfe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bff4:	2303      	movs	r3, #3
 800bff6:	e063      	b.n	800c0c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 0304 	and.w	r3, r3, #4
 800c002:	2b04      	cmp	r3, #4
 800c004:	d149      	bne.n	800c09a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c006:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c00e:	2200      	movs	r2, #0
 800c010:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f857 	bl	800c0c8 <UART_WaitOnFlagUntilTimeout>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d03c      	beq.n	800c09a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c028:	e853 3f00 	ldrex	r3, [r3]
 800c02c:	623b      	str	r3, [r7, #32]
   return(result);
 800c02e:	6a3b      	ldr	r3, [r7, #32]
 800c030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c034:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c03e:	633b      	str	r3, [r7, #48]	; 0x30
 800c040:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c046:	e841 2300 	strex	r3, r2, [r1]
 800c04a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1e6      	bne.n	800c020 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3308      	adds	r3, #8
 800c058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	e853 3f00 	ldrex	r3, [r3]
 800c060:	60fb      	str	r3, [r7, #12]
   return(result);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f023 0301 	bic.w	r3, r3, #1
 800c068:	64bb      	str	r3, [r7, #72]	; 0x48
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3308      	adds	r3, #8
 800c070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c072:	61fa      	str	r2, [r7, #28]
 800c074:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c076:	69b9      	ldr	r1, [r7, #24]
 800c078:	69fa      	ldr	r2, [r7, #28]
 800c07a:	e841 2300 	strex	r3, r2, [r1]
 800c07e:	617b      	str	r3, [r7, #20]
   return(result);
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1e5      	bne.n	800c052 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2220      	movs	r2, #32
 800c08a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c096:	2303      	movs	r3, #3
 800c098:	e012      	b.n	800c0c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2220      	movs	r2, #32
 800c09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3758      	adds	r7, #88	; 0x58
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	603b      	str	r3, [r7, #0]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0d8:	e049      	b.n	800c16e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e0:	d045      	beq.n	800c16e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0e2:	f7f9 faaf 	bl	8005644 <HAL_GetTick>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	1ad3      	subs	r3, r2, r3
 800c0ec:	69ba      	ldr	r2, [r7, #24]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d302      	bcc.n	800c0f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e048      	b.n	800c18e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f003 0304 	and.w	r3, r3, #4
 800c106:	2b00      	cmp	r3, #0
 800c108:	d031      	beq.n	800c16e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	69db      	ldr	r3, [r3, #28]
 800c110:	f003 0308 	and.w	r3, r3, #8
 800c114:	2b08      	cmp	r3, #8
 800c116:	d110      	bne.n	800c13a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2208      	movs	r2, #8
 800c11e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 f95b 	bl	800c3dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2208      	movs	r2, #8
 800c12a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	e029      	b.n	800c18e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	69db      	ldr	r3, [r3, #28]
 800c140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c148:	d111      	bne.n	800c16e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 f941 	bl	800c3dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2220      	movs	r2, #32
 800c15e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c16a:	2303      	movs	r3, #3
 800c16c:	e00f      	b.n	800c18e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	69da      	ldr	r2, [r3, #28]
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	4013      	ands	r3, r2
 800c178:	68ba      	ldr	r2, [r7, #8]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	bf0c      	ite	eq
 800c17e:	2301      	moveq	r3, #1
 800c180:	2300      	movne	r3, #0
 800c182:	b2db      	uxtb	r3, r3
 800c184:	461a      	mov	r2, r3
 800c186:	79fb      	ldrb	r3, [r7, #7]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d0a6      	beq.n	800c0da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
	...

0800c198 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c198:	b480      	push	{r7}
 800c19a:	b0a3      	sub	sp, #140	; 0x8c
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	88fa      	ldrh	r2, [r7, #6]
 800c1b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	88fa      	ldrh	r2, [r7, #6]
 800c1b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ca:	d10e      	bne.n	800c1ea <UART_Start_Receive_IT+0x52>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d105      	bne.n	800c1e0 <UART_Start_Receive_IT+0x48>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c1da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1de:	e02d      	b.n	800c23c <UART_Start_Receive_IT+0xa4>
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	22ff      	movs	r2, #255	; 0xff
 800c1e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1e8:	e028      	b.n	800c23c <UART_Start_Receive_IT+0xa4>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10d      	bne.n	800c20e <UART_Start_Receive_IT+0x76>
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d104      	bne.n	800c204 <UART_Start_Receive_IT+0x6c>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	22ff      	movs	r2, #255	; 0xff
 800c1fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c202:	e01b      	b.n	800c23c <UART_Start_Receive_IT+0xa4>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	227f      	movs	r2, #127	; 0x7f
 800c208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c20c:	e016      	b.n	800c23c <UART_Start_Receive_IT+0xa4>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c216:	d10d      	bne.n	800c234 <UART_Start_Receive_IT+0x9c>
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d104      	bne.n	800c22a <UART_Start_Receive_IT+0x92>
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	227f      	movs	r2, #127	; 0x7f
 800c224:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c228:	e008      	b.n	800c23c <UART_Start_Receive_IT+0xa4>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	223f      	movs	r2, #63	; 0x3f
 800c22e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c232:	e003      	b.n	800c23c <UART_Start_Receive_IT+0xa4>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2222      	movs	r2, #34	; 0x22
 800c248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3308      	adds	r3, #8
 800c252:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c256:	e853 3f00 	ldrex	r3, [r3]
 800c25a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c25c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c25e:	f043 0301 	orr.w	r3, r3, #1
 800c262:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	3308      	adds	r3, #8
 800c26c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c270:	673a      	str	r2, [r7, #112]	; 0x70
 800c272:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c276:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c278:	e841 2300 	strex	r3, r2, [r1]
 800c27c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c27e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e3      	bne.n	800c24c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c28c:	d14f      	bne.n	800c32e <UART_Start_Receive_IT+0x196>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c294:	88fa      	ldrh	r2, [r7, #6]
 800c296:	429a      	cmp	r2, r3
 800c298:	d349      	bcc.n	800c32e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2a2:	d107      	bne.n	800c2b4 <UART_Start_Receive_IT+0x11c>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d103      	bne.n	800c2b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4a47      	ldr	r2, [pc, #284]	; (800c3cc <UART_Start_Receive_IT+0x234>)
 800c2b0:	675a      	str	r2, [r3, #116]	; 0x74
 800c2b2:	e002      	b.n	800c2ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4a46      	ldr	r2, [pc, #280]	; (800c3d0 <UART_Start_Receive_IT+0x238>)
 800c2b8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d01a      	beq.n	800c2f8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ca:	e853 3f00 	ldrex	r3, [r3]
 800c2ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c2d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c2e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2ec:	e841 2300 	strex	r3, r2, [r1]
 800c2f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1e4      	bne.n	800c2c2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c30e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	3308      	adds	r3, #8
 800c316:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c318:	64ba      	str	r2, [r7, #72]	; 0x48
 800c31a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c31e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c320:	e841 2300 	strex	r3, r2, [r1]
 800c324:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1e5      	bne.n	800c2f8 <UART_Start_Receive_IT+0x160>
 800c32c:	e046      	b.n	800c3bc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c336:	d107      	bne.n	800c348 <UART_Start_Receive_IT+0x1b0>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d103      	bne.n	800c348 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4a24      	ldr	r2, [pc, #144]	; (800c3d4 <UART_Start_Receive_IT+0x23c>)
 800c344:	675a      	str	r2, [r3, #116]	; 0x74
 800c346:	e002      	b.n	800c34e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	4a23      	ldr	r2, [pc, #140]	; (800c3d8 <UART_Start_Receive_IT+0x240>)
 800c34c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d019      	beq.n	800c38a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	e853 3f00 	ldrex	r3, [r3]
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c36a:	677b      	str	r3, [r7, #116]	; 0x74
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	461a      	mov	r2, r3
 800c372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c374:	637b      	str	r3, [r7, #52]	; 0x34
 800c376:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c37a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c37c:	e841 2300 	strex	r3, r2, [r1]
 800c380:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1e6      	bne.n	800c356 <UART_Start_Receive_IT+0x1be>
 800c388:	e018      	b.n	800c3bc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	e853 3f00 	ldrex	r3, [r3]
 800c396:	613b      	str	r3, [r7, #16]
   return(result);
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	f043 0320 	orr.w	r3, r3, #32
 800c39e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3a8:	623b      	str	r3, [r7, #32]
 800c3aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ac:	69f9      	ldr	r1, [r7, #28]
 800c3ae:	6a3a      	ldr	r2, [r7, #32]
 800c3b0:	e841 2300 	strex	r3, r2, [r1]
 800c3b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1e6      	bne.n	800c38a <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	378c      	adds	r7, #140	; 0x8c
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	0800cf51 	.word	0x0800cf51
 800c3d0:	0800cbed 	.word	0x0800cbed
 800c3d4:	0800ca31 	.word	0x0800ca31
 800c3d8:	0800c875 	.word	0x0800c875

0800c3dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b095      	sub	sp, #84	; 0x54
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ec:	e853 3f00 	ldrex	r3, [r3]
 800c3f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c402:	643b      	str	r3, [r7, #64]	; 0x40
 800c404:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c406:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c40a:	e841 2300 	strex	r3, r2, [r1]
 800c40e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1e6      	bne.n	800c3e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	3308      	adds	r3, #8
 800c41c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41e:	6a3b      	ldr	r3, [r7, #32]
 800c420:	e853 3f00 	ldrex	r3, [r3]
 800c424:	61fb      	str	r3, [r7, #28]
   return(result);
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c42c:	f023 0301 	bic.w	r3, r3, #1
 800c430:	64bb      	str	r3, [r7, #72]	; 0x48
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3308      	adds	r3, #8
 800c438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c43a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c43c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c442:	e841 2300 	strex	r3, r2, [r1]
 800c446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1e3      	bne.n	800c416 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c452:	2b01      	cmp	r3, #1
 800c454:	d118      	bne.n	800c488 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	e853 3f00 	ldrex	r3, [r3]
 800c462:	60bb      	str	r3, [r7, #8]
   return(result);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	f023 0310 	bic.w	r3, r3, #16
 800c46a:	647b      	str	r3, [r7, #68]	; 0x44
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	461a      	mov	r2, r3
 800c472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c474:	61bb      	str	r3, [r7, #24]
 800c476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c478:	6979      	ldr	r1, [r7, #20]
 800c47a:	69ba      	ldr	r2, [r7, #24]
 800c47c:	e841 2300 	strex	r3, r2, [r1]
 800c480:	613b      	str	r3, [r7, #16]
   return(result);
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e6      	bne.n	800c456 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2220      	movs	r2, #32
 800c48c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c49c:	bf00      	nop
 800c49e:	3754      	adds	r7, #84	; 0x54
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f7ff f9a0 	bl	800b80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4cc:	bf00      	nop
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b08f      	sub	sp, #60	; 0x3c
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4e2:	2b21      	cmp	r3, #33	; 0x21
 800c4e4:	d14d      	bne.n	800c582 <UART_TxISR_8BIT+0xae>
  {
    if (huart->TxXferCount == 0U)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d132      	bne.n	800c558 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	e853 3f00 	ldrex	r3, [r3]
 800c4fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c506:	637b      	str	r3, [r7, #52]	; 0x34
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	461a      	mov	r2, r3
 800c50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c510:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c512:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c518:	e841 2300 	strex	r3, r2, [r1]
 800c51c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1e6      	bne.n	800c4f2 <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	e853 3f00 	ldrex	r3, [r3]
 800c530:	60bb      	str	r3, [r7, #8]
   return(result);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c538:	633b      	str	r3, [r7, #48]	; 0x30
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	461a      	mov	r2, r3
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	61bb      	str	r3, [r7, #24]
 800c544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c546:	6979      	ldr	r1, [r7, #20]
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	e841 2300 	strex	r3, r2, [r1]
 800c54e:	613b      	str	r3, [r7, #16]
   return(result);
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1e6      	bne.n	800c524 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c556:	e014      	b.n	800c582 <UART_TxISR_8BIT+0xae>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c55c:	781a      	ldrb	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	b292      	uxth	r2, r2
 800c564:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c56a:	1c5a      	adds	r2, r3, #1
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c576:	b29b      	uxth	r3, r3
 800c578:	3b01      	subs	r3, #1
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c582:	bf00      	nop
 800c584:	373c      	adds	r7, #60	; 0x3c
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c58e:	b480      	push	{r7}
 800c590:	b091      	sub	sp, #68	; 0x44
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c59c:	2b21      	cmp	r3, #33	; 0x21
 800c59e:	d151      	bne.n	800c644 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d132      	bne.n	800c612 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	e853 3f00 	ldrex	r3, [r3]
 800c5b8:	623b      	str	r3, [r7, #32]
   return(result);
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ca:	633b      	str	r3, [r7, #48]	; 0x30
 800c5cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5d2:	e841 2300 	strex	r3, r2, [r1]
 800c5d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1e6      	bne.n	800c5ac <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	e853 3f00 	ldrex	r3, [r3]
 800c5ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fc:	61fb      	str	r3, [r7, #28]
 800c5fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c600:	69b9      	ldr	r1, [r7, #24]
 800c602:	69fa      	ldr	r2, [r7, #28]
 800c604:	e841 2300 	strex	r3, r2, [r1]
 800c608:	617b      	str	r3, [r7, #20]
   return(result);
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1e6      	bne.n	800c5de <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c610:	e018      	b.n	800c644 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c616:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c61a:	881a      	ldrh	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c624:	b292      	uxth	r2, r2
 800c626:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c62c:	1c9a      	adds	r2, r3, #2
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c638:	b29b      	uxth	r3, r3
 800c63a:	3b01      	subs	r3, #1
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c644:	bf00      	nop
 800c646:	3744      	adds	r7, #68	; 0x44
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c650:	b480      	push	{r7}
 800c652:	b091      	sub	sp, #68	; 0x44
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c65e:	2b21      	cmp	r3, #33	; 0x21
 800c660:	d161      	bne.n	800c726 <UART_TxISR_8BIT_FIFOEN+0xd6>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c668:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c66a:	e058      	b.n	800c71e <UART_TxISR_8BIT_FIFOEN+0xce>
    {
      if (huart->TxXferCount == 0U)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c672:	b29b      	uxth	r3, r3
 800c674:	2b00      	cmp	r3, #0
 800c676:	d133      	bne.n	800c6e0 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3308      	adds	r3, #8
 800c67e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c682:	e853 3f00 	ldrex	r3, [r3]
 800c686:	623b      	str	r3, [r7, #32]
   return(result);
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c68e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3308      	adds	r3, #8
 800c696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c698:	633a      	str	r2, [r7, #48]	; 0x30
 800c69a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c69e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6a0:	e841 2300 	strex	r3, r2, [r1]
 800c6a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1e5      	bne.n	800c678 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	e853 3f00 	ldrex	r3, [r3]
 800c6b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ca:	61fb      	str	r3, [r7, #28]
 800c6cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ce:	69b9      	ldr	r1, [r7, #24]
 800c6d0:	69fa      	ldr	r2, [r7, #28]
 800c6d2:	e841 2300 	strex	r3, r2, [r1]
 800c6d6:	617b      	str	r3, [r7, #20]
   return(result);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1e6      	bne.n	800c6ac <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c6de:	e022      	b.n	800c726 <UART_TxISR_8BIT_FIFOEN+0xd6>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	69db      	ldr	r3, [r3, #28]
 800c6e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d014      	beq.n	800c718 <UART_TxISR_8BIT_FIFOEN+0xc8>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f2:	781a      	ldrb	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	b292      	uxth	r2, r2
 800c6fa:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c700:	1c5a      	adds	r2, r3, #1
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	3b01      	subs	r3, #1
 800c710:	b29a      	uxth	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c718:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c71a:	3b01      	subs	r3, #1
 800c71c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c71e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1a3      	bne.n	800c66c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c724:	e7ff      	b.n	800c726 <UART_TxISR_8BIT_FIFOEN+0xd6>
 800c726:	bf00      	nop
 800c728:	3744      	adds	r7, #68	; 0x44
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr

0800c732 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c732:	b480      	push	{r7}
 800c734:	b091      	sub	sp, #68	; 0x44
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c740:	2b21      	cmp	r3, #33	; 0x21
 800c742:	d165      	bne.n	800c810 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c74a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c74c:	e05c      	b.n	800c808 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c754:	b29b      	uxth	r3, r3
 800c756:	2b00      	cmp	r3, #0
 800c758:	d133      	bne.n	800c7c2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	3308      	adds	r3, #8
 800c760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	e853 3f00 	ldrex	r3, [r3]
 800c768:	61fb      	str	r3, [r7, #28]
   return(result);
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c770:	637b      	str	r3, [r7, #52]	; 0x34
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3308      	adds	r3, #8
 800c778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c77a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c77c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c782:	e841 2300 	strex	r3, r2, [r1]
 800c786:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1e5      	bne.n	800c75a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	e853 3f00 	ldrex	r3, [r3]
 800c79a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a2:	633b      	str	r3, [r7, #48]	; 0x30
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	61bb      	str	r3, [r7, #24]
 800c7ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b0:	6979      	ldr	r1, [r7, #20]
 800c7b2:	69ba      	ldr	r2, [r7, #24]
 800c7b4:	e841 2300 	strex	r3, r2, [r1]
 800c7b8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1e6      	bne.n	800c78e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c7c0:	e026      	b.n	800c810 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	69db      	ldr	r3, [r3, #28]
 800c7c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d018      	beq.n	800c802 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7d4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	881a      	ldrh	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7e2:	b292      	uxth	r2, r2
 800c7e4:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ea:	1c9a      	adds	r2, r3, #2
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c802:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c804:	3b01      	subs	r3, #1
 800c806:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c808:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d19f      	bne.n	800c74e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c80e:	e7ff      	b.n	800c810 <UART_TxISR_16BIT_FIFOEN+0xde>
 800c810:	bf00      	nop
 800c812:	3744      	adds	r7, #68	; 0x44
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	e853 3f00 	ldrex	r3, [r3]
 800c830:	60bb      	str	r3, [r7, #8]
   return(result);
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c838:	61fb      	str	r3, [r7, #28]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	461a      	mov	r2, r3
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	61bb      	str	r3, [r7, #24]
 800c844:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c846:	6979      	ldr	r1, [r7, #20]
 800c848:	69ba      	ldr	r2, [r7, #24]
 800c84a:	e841 2300 	strex	r3, r2, [r1]
 800c84e:	613b      	str	r3, [r7, #16]
   return(result);
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1e6      	bne.n	800c824 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2220      	movs	r2, #32
 800c85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f7fe ffc7 	bl	800b7f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c86a:	bf00      	nop
 800c86c:	3720      	adds	r7, #32
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b09c      	sub	sp, #112	; 0x70
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c882:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c88c:	2b22      	cmp	r3, #34	; 0x22
 800c88e:	f040 80be 	bne.w	800ca0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c898:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c89c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c8a0:	b2d9      	uxtb	r1, r3
 800c8a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ac:	400a      	ands	r2, r1
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f040 80a3 	bne.w	800ca22 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e4:	e853 3f00 	ldrex	r3, [r3]
 800c8e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8f0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c902:	e841 2300 	strex	r3, r2, [r1]
 800c906:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1e6      	bne.n	800c8dc <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3308      	adds	r3, #8
 800c914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c918:	e853 3f00 	ldrex	r3, [r3]
 800c91c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c920:	f023 0301 	bic.w	r3, r3, #1
 800c924:	667b      	str	r3, [r7, #100]	; 0x64
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3308      	adds	r3, #8
 800c92c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c92e:	647a      	str	r2, [r7, #68]	; 0x44
 800c930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c936:	e841 2300 	strex	r3, r2, [r1]
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1e5      	bne.n	800c90e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2220      	movs	r2, #32
 800c946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a34      	ldr	r2, [pc, #208]	; (800ca2c <UART_RxISR_8BIT+0x1b8>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d01f      	beq.n	800c9a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d018      	beq.n	800c9a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	e853 3f00 	ldrex	r3, [r3]
 800c97a:	623b      	str	r3, [r7, #32]
   return(result);
 800c97c:	6a3b      	ldr	r3, [r7, #32]
 800c97e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c982:	663b      	str	r3, [r7, #96]	; 0x60
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c98c:	633b      	str	r3, [r7, #48]	; 0x30
 800c98e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c994:	e841 2300 	strex	r3, r2, [r1]
 800c998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1e6      	bne.n	800c96e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d12e      	bne.n	800ca06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	e853 3f00 	ldrex	r3, [r3]
 800c9ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f023 0310 	bic.w	r3, r3, #16
 800c9c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9cc:	61fb      	str	r3, [r7, #28]
 800c9ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d0:	69b9      	ldr	r1, [r7, #24]
 800c9d2:	69fa      	ldr	r2, [r7, #28]
 800c9d4:	e841 2300 	strex	r3, r2, [r1]
 800c9d8:	617b      	str	r3, [r7, #20]
   return(result);
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1e6      	bne.n	800c9ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	69db      	ldr	r3, [r3, #28]
 800c9e6:	f003 0310 	and.w	r3, r3, #16
 800c9ea:	2b10      	cmp	r3, #16
 800c9ec:	d103      	bne.n	800c9f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2210      	movs	r2, #16
 800c9f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7fe ff0e 	bl	800b820 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca04:	e00d      	b.n	800ca22 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7f7 f8fe 	bl	8003c08 <HAL_UART_RxCpltCallback>
}
 800ca0c:	e009      	b.n	800ca22 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	8b1b      	ldrh	r3, [r3, #24]
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f042 0208 	orr.w	r2, r2, #8
 800ca1e:	b292      	uxth	r2, r2
 800ca20:	831a      	strh	r2, [r3, #24]
}
 800ca22:	bf00      	nop
 800ca24:	3770      	adds	r7, #112	; 0x70
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	40008000 	.word	0x40008000

0800ca30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b09c      	sub	sp, #112	; 0x70
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca48:	2b22      	cmp	r3, #34	; 0x22
 800ca4a:	f040 80be 	bne.w	800cbca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ca54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ca5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ca62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ca66:	4013      	ands	r3, r2
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca72:	1c9a      	adds	r2, r3, #2
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	3b01      	subs	r3, #1
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f040 80a3 	bne.w	800cbde <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caa0:	e853 3f00 	ldrex	r3, [r3]
 800caa4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800caa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caac:	667b      	str	r3, [r7, #100]	; 0x64
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	461a      	mov	r2, r3
 800cab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cab6:	657b      	str	r3, [r7, #84]	; 0x54
 800cab8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cabc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cabe:	e841 2300 	strex	r3, r2, [r1]
 800cac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1e6      	bne.n	800ca98 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	3308      	adds	r3, #8
 800cad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad4:	e853 3f00 	ldrex	r3, [r3]
 800cad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	f023 0301 	bic.w	r3, r3, #1
 800cae0:	663b      	str	r3, [r7, #96]	; 0x60
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3308      	adds	r3, #8
 800cae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800caea:	643a      	str	r2, [r7, #64]	; 0x40
 800caec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800caf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800caf2:	e841 2300 	strex	r3, r2, [r1]
 800caf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1e5      	bne.n	800caca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2220      	movs	r2, #32
 800cb02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a34      	ldr	r2, [pc, #208]	; (800cbe8 <UART_RxISR_16BIT+0x1b8>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d01f      	beq.n	800cb5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d018      	beq.n	800cb5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	e853 3f00 	ldrex	r3, [r3]
 800cb36:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	461a      	mov	r2, r3
 800cb46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb4a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb50:	e841 2300 	strex	r3, r2, [r1]
 800cb54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1e6      	bne.n	800cb2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d12e      	bne.n	800cbc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	e853 3f00 	ldrex	r3, [r3]
 800cb76:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	f023 0310 	bic.w	r3, r3, #16
 800cb7e:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	461a      	mov	r2, r3
 800cb86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb88:	61bb      	str	r3, [r7, #24]
 800cb8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8c:	6979      	ldr	r1, [r7, #20]
 800cb8e:	69ba      	ldr	r2, [r7, #24]
 800cb90:	e841 2300 	strex	r3, r2, [r1]
 800cb94:	613b      	str	r3, [r7, #16]
   return(result);
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e6      	bne.n	800cb6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	69db      	ldr	r3, [r3, #28]
 800cba2:	f003 0310 	and.w	r3, r3, #16
 800cba6:	2b10      	cmp	r3, #16
 800cba8:	d103      	bne.n	800cbb2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2210      	movs	r2, #16
 800cbb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cbb8:	4619      	mov	r1, r3
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f7fe fe30 	bl	800b820 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbc0:	e00d      	b.n	800cbde <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7f7 f820 	bl	8003c08 <HAL_UART_RxCpltCallback>
}
 800cbc8:	e009      	b.n	800cbde <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	8b1b      	ldrh	r3, [r3, #24]
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f042 0208 	orr.w	r2, r2, #8
 800cbda:	b292      	uxth	r2, r2
 800cbdc:	831a      	strh	r2, [r3, #24]
}
 800cbde:	bf00      	nop
 800cbe0:	3770      	adds	r7, #112	; 0x70
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	40008000 	.word	0x40008000

0800cbec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b0ac      	sub	sp, #176	; 0xb0
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbfa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	69db      	ldr	r3, [r3, #28]
 800cc04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc22:	2b22      	cmp	r3, #34	; 0x22
 800cc24:	f040 8182 	bne.w	800cf2c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc2e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cc32:	e125      	b.n	800ce80 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc3a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc3e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cc42:	b2d9      	uxtb	r1, r3
 800cc44:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc4e:	400a      	ands	r2, r1
 800cc50:	b2d2      	uxtb	r2, r2
 800cc52:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	3b01      	subs	r3, #1
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cc7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc7e:	f003 0307 	and.w	r3, r3, #7
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d053      	beq.n	800cd2e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d011      	beq.n	800ccb6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800cc92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cc96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00b      	beq.n	800ccb6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2201      	movs	r2, #1
 800cca4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccac:	f043 0201 	orr.w	r2, r3, #1
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ccba:	f003 0302 	and.w	r3, r3, #2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d011      	beq.n	800cce6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ccc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00b      	beq.n	800cce6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2202      	movs	r2, #2
 800ccd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccdc:	f043 0204 	orr.w	r2, r3, #4
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ccea:	f003 0304 	and.w	r3, r3, #4
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d011      	beq.n	800cd16 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ccf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ccf6:	f003 0301 	and.w	r3, r3, #1
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00b      	beq.n	800cd16 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2204      	movs	r2, #4
 800cd04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd0c:	f043 0202 	orr.w	r2, r3, #2
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d006      	beq.n	800cd2e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7fe fd73 	bl	800b80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f040 80a2 	bne.w	800ce80 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd44:	e853 3f00 	ldrex	r3, [r3]
 800cd48:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800cd4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cd60:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd62:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cd64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cd66:	e841 2300 	strex	r3, r2, [r1]
 800cd6a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800cd6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1e4      	bne.n	800cd3c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3308      	adds	r3, #8
 800cd78:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd7c:	e853 3f00 	ldrex	r3, [r3]
 800cd80:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cd82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd88:	f023 0301 	bic.w	r3, r3, #1
 800cd8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	3308      	adds	r3, #8
 800cd96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cd9a:	66ba      	str	r2, [r7, #104]	; 0x68
 800cd9c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cda0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cda2:	e841 2300 	strex	r3, r2, [r1]
 800cda6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cda8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1e1      	bne.n	800cd72 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2220      	movs	r2, #32
 800cdb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a60      	ldr	r2, [pc, #384]	; (800cf48 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d021      	beq.n	800ce10 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d01a      	beq.n	800ce10 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cde2:	e853 3f00 	ldrex	r3, [r3]
 800cde6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cde8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cdee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cdfc:	657b      	str	r3, [r7, #84]	; 0x54
 800cdfe:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce04:	e841 2300 	strex	r3, r2, [r1]
 800ce08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d1e4      	bne.n	800cdda <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d130      	bne.n	800ce7a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce26:	e853 3f00 	ldrex	r3, [r3]
 800ce2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2e:	f023 0310 	bic.w	r3, r3, #16
 800ce32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce40:	643b      	str	r3, [r7, #64]	; 0x40
 800ce42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce48:	e841 2300 	strex	r3, r2, [r1]
 800ce4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1e4      	bne.n	800ce1e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	69db      	ldr	r3, [r3, #28]
 800ce5a:	f003 0310 	and.w	r3, r3, #16
 800ce5e:	2b10      	cmp	r3, #16
 800ce60:	d103      	bne.n	800ce6a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2210      	movs	r2, #16
 800ce68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce70:	4619      	mov	r1, r3
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7fe fcd4 	bl	800b820 <HAL_UARTEx_RxEventCallback>
 800ce78:	e002      	b.n	800ce80 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7f6 fec4 	bl	8003c08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ce80:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d006      	beq.n	800ce96 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800ce88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce8c:	f003 0320 	and.w	r3, r3, #32
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f47f aecf 	bne.w	800cc34 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cea0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d04b      	beq.n	800cf40 <UART_RxISR_8BIT_FIFOEN+0x354>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ceae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d244      	bcs.n	800cf40 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3308      	adds	r3, #8
 800cebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	3308      	adds	r3, #8
 800ced6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ceda:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cedc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cee2:	e841 2300 	strex	r3, r2, [r1]
 800cee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e3      	bne.n	800ceb6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a16      	ldr	r2, [pc, #88]	; (800cf4c <UART_RxISR_8BIT_FIFOEN+0x360>)
 800cef2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	e853 3f00 	ldrex	r3, [r3]
 800cf00:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	f043 0320 	orr.w	r3, r3, #32
 800cf08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	461a      	mov	r2, r3
 800cf12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf16:	61bb      	str	r3, [r7, #24]
 800cf18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1a:	6979      	ldr	r1, [r7, #20]
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	e841 2300 	strex	r3, r2, [r1]
 800cf22:	613b      	str	r3, [r7, #16]
   return(result);
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1e4      	bne.n	800cef4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf2a:	e009      	b.n	800cf40 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	8b1b      	ldrh	r3, [r3, #24]
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f042 0208 	orr.w	r2, r2, #8
 800cf3c:	b292      	uxth	r2, r2
 800cf3e:	831a      	strh	r2, [r3, #24]
}
 800cf40:	bf00      	nop
 800cf42:	37b0      	adds	r7, #176	; 0xb0
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	40008000 	.word	0x40008000
 800cf4c:	0800c875 	.word	0x0800c875

0800cf50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b0ae      	sub	sp, #184	; 0xb8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf5e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69db      	ldr	r3, [r3, #28]
 800cf68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf86:	2b22      	cmp	r3, #34	; 0x22
 800cf88:	f040 8186 	bne.w	800d298 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cf92:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cf96:	e129      	b.n	800d1ec <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf9e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cfaa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800cfae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cfba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfc0:	1c9a      	adds	r2, r3, #2
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cfe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cfe6:	f003 0307 	and.w	r3, r3, #7
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d053      	beq.n	800d096 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cfee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d011      	beq.n	800d01e <UART_RxISR_16BIT_FIFOEN+0xce>
 800cffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00b      	beq.n	800d01e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2201      	movs	r2, #1
 800d00c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d014:	f043 0201 	orr.w	r2, r3, #1
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d01e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d022:	f003 0302 	and.w	r3, r3, #2
 800d026:	2b00      	cmp	r3, #0
 800d028:	d011      	beq.n	800d04e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d02a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d02e:	f003 0301 	and.w	r3, r3, #1
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00b      	beq.n	800d04e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2202      	movs	r2, #2
 800d03c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d044:	f043 0204 	orr.w	r2, r3, #4
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d04e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d052:	f003 0304 	and.w	r3, r3, #4
 800d056:	2b00      	cmp	r3, #0
 800d058:	d011      	beq.n	800d07e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d05a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00b      	beq.n	800d07e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2204      	movs	r2, #4
 800d06c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d074:	f043 0202 	orr.w	r2, r3, #2
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d084:	2b00      	cmp	r3, #0
 800d086:	d006      	beq.n	800d096 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7fe fbbf 	bl	800b80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f040 80a4 	bne.w	800d1ec <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d0ac:	e853 3f00 	ldrex	r3, [r3]
 800d0b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d0b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d0c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d0ca:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d0ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d0d2:	e841 2300 	strex	r3, r2, [r1]
 800d0d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d0d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1e2      	bne.n	800d0a4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3308      	adds	r3, #8
 800d0e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0e8:	e853 3f00 	ldrex	r3, [r3]
 800d0ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d0ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0f4:	f023 0301 	bic.w	r3, r3, #1
 800d0f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	3308      	adds	r3, #8
 800d102:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d106:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d108:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d10a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d10c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d10e:	e841 2300 	strex	r3, r2, [r1]
 800d112:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1e1      	bne.n	800d0de <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2220      	movs	r2, #32
 800d11e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a60      	ldr	r2, [pc, #384]	; (800d2b4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d021      	beq.n	800d17c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d01a      	beq.n	800d17c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d14e:	e853 3f00 	ldrex	r3, [r3]
 800d152:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d15a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	461a      	mov	r2, r3
 800d164:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d168:	65bb      	str	r3, [r7, #88]	; 0x58
 800d16a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d16c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d16e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d170:	e841 2300 	strex	r3, r2, [r1]
 800d174:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1e4      	bne.n	800d146 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d180:	2b01      	cmp	r3, #1
 800d182:	d130      	bne.n	800d1e6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	e853 3f00 	ldrex	r3, [r3]
 800d196:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d19a:	f023 0310 	bic.w	r3, r3, #16
 800d19e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1ac:	647b      	str	r3, [r7, #68]	; 0x44
 800d1ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d1b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1b4:	e841 2300 	strex	r3, r2, [r1]
 800d1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1e4      	bne.n	800d18a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	69db      	ldr	r3, [r3, #28]
 800d1c6:	f003 0310 	and.w	r3, r3, #16
 800d1ca:	2b10      	cmp	r3, #16
 800d1cc:	d103      	bne.n	800d1d6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2210      	movs	r2, #16
 800d1d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7fe fb1e 	bl	800b820 <HAL_UARTEx_RxEventCallback>
 800d1e4:	e002      	b.n	800d1ec <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7f6 fd0e 	bl	8003c08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d1ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d006      	beq.n	800d202 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800d1f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1f8:	f003 0320 	and.w	r3, r3, #32
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f47f aecb 	bne.w	800cf98 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d208:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d20c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d210:	2b00      	cmp	r3, #0
 800d212:	d04b      	beq.n	800d2ac <UART_RxISR_16BIT_FIFOEN+0x35c>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d21a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800d21e:	429a      	cmp	r2, r3
 800d220:	d244      	bcs.n	800d2ac <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	3308      	adds	r3, #8
 800d228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22c:	e853 3f00 	ldrex	r3, [r3]
 800d230:	623b      	str	r3, [r7, #32]
   return(result);
 800d232:	6a3b      	ldr	r3, [r7, #32]
 800d234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3308      	adds	r3, #8
 800d242:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d246:	633a      	str	r2, [r7, #48]	; 0x30
 800d248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d24c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d24e:	e841 2300 	strex	r3, r2, [r1]
 800d252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1e3      	bne.n	800d222 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a16      	ldr	r2, [pc, #88]	; (800d2b8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800d25e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	e853 3f00 	ldrex	r3, [r3]
 800d26c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f043 0320 	orr.w	r3, r3, #32
 800d274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	461a      	mov	r2, r3
 800d27e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d282:	61fb      	str	r3, [r7, #28]
 800d284:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d286:	69b9      	ldr	r1, [r7, #24]
 800d288:	69fa      	ldr	r2, [r7, #28]
 800d28a:	e841 2300 	strex	r3, r2, [r1]
 800d28e:	617b      	str	r3, [r7, #20]
   return(result);
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1e4      	bne.n	800d260 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d296:	e009      	b.n	800d2ac <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	8b1b      	ldrh	r3, [r3, #24]
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f042 0208 	orr.w	r2, r2, #8
 800d2a8:	b292      	uxth	r2, r2
 800d2aa:	831a      	strh	r2, [r3, #24]
}
 800d2ac:	bf00      	nop
 800d2ae:	37b8      	adds	r7, #184	; 0xb8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	40008000 	.word	0x40008000
 800d2b8:	0800ca31 	.word	0x0800ca31

0800d2bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d2c4:	bf00      	nop
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d306:	2b01      	cmp	r3, #1
 800d308:	d101      	bne.n	800d30e <HAL_UARTEx_EnableFifoMode+0x16>
 800d30a:	2302      	movs	r3, #2
 800d30c:	e02b      	b.n	800d366 <HAL_UARTEx_EnableFifoMode+0x6e>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2224      	movs	r2, #36	; 0x24
 800d31a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f022 0201 	bic.w	r2, r2, #1
 800d334:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d33c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d344:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f8c2 	bl	800d4d8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2220      	movs	r2, #32
 800d358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d36e:	b480      	push	{r7}
 800d370:	b085      	sub	sp, #20
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d101      	bne.n	800d384 <HAL_UARTEx_DisableFifoMode+0x16>
 800d380:	2302      	movs	r3, #2
 800d382:	e027      	b.n	800d3d4 <HAL_UARTEx_DisableFifoMode+0x66>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2224      	movs	r2, #36	; 0x24
 800d390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f022 0201 	bic.w	r2, r2, #1
 800d3aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d3b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2220      	movs	r2, #32
 800d3c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d101      	bne.n	800d3f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	e02d      	b.n	800d454 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2224      	movs	r2, #36	; 0x24
 800d404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f022 0201 	bic.w	r2, r2, #1
 800d41e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	689b      	ldr	r3, [r3, #8]
 800d426:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	430a      	orrs	r2, r1
 800d432:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 f84f 	bl	800d4d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2220      	movs	r2, #32
 800d446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d101      	bne.n	800d474 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d470:	2302      	movs	r3, #2
 800d472:	e02d      	b.n	800d4d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2224      	movs	r2, #36	; 0x24
 800d480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f022 0201 	bic.w	r2, r2, #1
 800d49a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	430a      	orrs	r2, r1
 800d4ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 f811 	bl	800d4d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2220      	movs	r2, #32
 800d4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d108      	bne.n	800d4fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d4f8:	e031      	b.n	800d55e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d4fa:	2308      	movs	r3, #8
 800d4fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d4fe:	2308      	movs	r3, #8
 800d500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	0e5b      	lsrs	r3, r3, #25
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	f003 0307 	and.w	r3, r3, #7
 800d510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	0f5b      	lsrs	r3, r3, #29
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	f003 0307 	and.w	r3, r3, #7
 800d520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d522:	7bbb      	ldrb	r3, [r7, #14]
 800d524:	7b3a      	ldrb	r2, [r7, #12]
 800d526:	4911      	ldr	r1, [pc, #68]	; (800d56c <UARTEx_SetNbDataToProcess+0x94>)
 800d528:	5c8a      	ldrb	r2, [r1, r2]
 800d52a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d52e:	7b3a      	ldrb	r2, [r7, #12]
 800d530:	490f      	ldr	r1, [pc, #60]	; (800d570 <UARTEx_SetNbDataToProcess+0x98>)
 800d532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d534:	fb93 f3f2 	sdiv	r3, r3, r2
 800d538:	b29a      	uxth	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d540:	7bfb      	ldrb	r3, [r7, #15]
 800d542:	7b7a      	ldrb	r2, [r7, #13]
 800d544:	4909      	ldr	r1, [pc, #36]	; (800d56c <UARTEx_SetNbDataToProcess+0x94>)
 800d546:	5c8a      	ldrb	r2, [r1, r2]
 800d548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d54c:	7b7a      	ldrb	r2, [r7, #13]
 800d54e:	4908      	ldr	r1, [pc, #32]	; (800d570 <UARTEx_SetNbDataToProcess+0x98>)
 800d550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d552:	fb93 f3f2 	sdiv	r3, r3, r2
 800d556:	b29a      	uxth	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d55e:	bf00      	nop
 800d560:	3714      	adds	r7, #20
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	080286c0 	.word	0x080286c0
 800d570:	080286c8 	.word	0x080286c8

0800d574 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800d578:	f003 ff1a 	bl	80113b0 <touchgfx_components_init>
  touchgfx_init();
 800d57c:	f003 feee 	bl	801135c <touchgfx_init>
}
 800d580:	bf00      	nop
 800d582:	bd80      	pop	{r7, pc}

0800d584 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800d588:	f003 ff1a 	bl	80113c0 <touchgfx_taskEntry>
}
 800d58c:	bf00      	nop
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
    {
 800d598:	4a04      	ldr	r2, [pc, #16]	; (800d5ac <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	601a      	str	r2, [r3, #0]
    }
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	080286ec 	.word	0x080286ec

0800d5b0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
    }
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7ff ffe9 	bl	800d590 <_ZN8touchgfx12FontProviderD1Ev>
 800d5be:	2104      	movs	r1, #4
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f018 fefe 	bl	80263c2 <_ZdlPvj>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d5dc:	887b      	ldrh	r3, [r7, #2]
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d010      	beq.n	800d604 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	dc13      	bgt.n	800d60e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d002      	beq.n	800d5f0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d005      	beq.n	800d5fa <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800d5ee:	e00e      	b.n	800d60e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d5f0:	f002 fd4e 	bl	8010090 <_ZN17TypedTextDatabase8getFontsEv>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	e00a      	b.n	800d610 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d5fa:	f002 fd49 	bl	8010090 <_ZN17TypedTextDatabase8getFontsEv>
 800d5fe:	4603      	mov	r3, r0
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	e005      	b.n	800d610 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d604:	f002 fd44 	bl	8010090 <_ZN17TypedTextDatabase8getFontsEv>
 800d608:	4603      	mov	r3, r0
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	e000      	b.n	800d610 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800d60e:	2300      	movs	r3, #0
    }
}
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	4a05      	ldr	r2, [pc, #20]	; (800d638 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4618      	mov	r0, r3
 800d62a:	f7ff ffb1 	bl	800d590 <_ZN8touchgfx12FontProviderD1Ev>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4618      	mov	r0, r3
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	080286d8 	.word	0x080286d8

0800d63c <_ZN23ApplicationFontProviderD0Ev>:
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7ff ffe7 	bl	800d618 <_ZN23ApplicationFontProviderD1Ev>
 800d64a:	2104      	movs	r1, #4
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f018 feb8 	bl	80263c2 <_ZdlPvj>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
    {
 800d664:	4a04      	ldr	r2, [pc, #16]	; (800d678 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	601a      	str	r2, [r3, #0]
    }
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4618      	mov	r0, r3
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	08028aec 	.word	0x08028aec

0800d67c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
    }
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff ffe9 	bl	800d65c <_ZN8touchgfx4FontD1Ev>
 800d68a:	2114      	movs	r1, #20
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f018 fe98 	bl	80263c2 <_ZdlPvj>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4618      	mov	r0, r3
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d69c:	b590      	push	{r4, r7, lr}
 800d69e:	b087      	sub	sp, #28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d6a8:	887b      	ldrh	r3, [r7, #2]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d101      	bne.n	800d6b2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	e010      	b.n	800d6d4 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	3308      	adds	r3, #8
 800d6c0:	681c      	ldr	r4, [r3, #0]
 800d6c2:	f107 030f 	add.w	r3, r7, #15
 800d6c6:	f107 0210 	add.w	r2, r7, #16
 800d6ca:	8879      	ldrh	r1, [r7, #2]
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	47a0      	blx	r4
 800d6d0:	6178      	str	r0, [r7, #20]
        return glyph;
 800d6d2:	697b      	ldr	r3, [r7, #20]
    }
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	371c      	adds	r7, #28
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd90      	pop	{r4, r7, pc}

0800d6dc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	89db      	ldrh	r3, [r3, #14]
    }
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	8a1b      	ldrh	r3, [r3, #16]
    }
 800d700:	4618      	mov	r0, r3
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	88db      	ldrh	r3, [r3, #6]
    }
 800d718:	4618      	mov	r0, r3
 800d71a:	370c      	adds	r7, #12
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	889b      	ldrh	r3, [r3, #4]
    }
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	7a9b      	ldrb	r3, [r3, #10]
 800d748:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d74c:	b2db      	uxtb	r3, r3
    }
 800d74e:	4618      	mov	r0, r3
 800d750:	370c      	adds	r7, #12
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d75a:	b480      	push	{r7}
 800d75c:	b083      	sub	sp, #12
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	7a9b      	ldrb	r3, [r3, #10]
 800d766:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d76a:	b2db      	uxtb	r3, r3
    }
 800d76c:	4618      	mov	r0, r3
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	4a05      	ldr	r2, [pc, #20]	; (800d798 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	4618      	mov	r0, r3
 800d78a:	f7ff ff67 	bl	800d65c <_ZN8touchgfx4FontD1Ev>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4618      	mov	r0, r3
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	08029684 	.word	0x08029684

0800d79c <_ZN8touchgfx9ConstFontD0Ev>:
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff ffe7 	bl	800d778 <_ZN8touchgfx9ConstFontD1Ev>
 800d7aa:	211c      	movs	r1, #28
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f018 fe08 	bl	80263c2 <_ZdlPvj>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	4a05      	ldr	r2, [pc, #20]	; (800d7dc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	601a      	str	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7ff ffd3 	bl	800d778 <_ZN8touchgfx9ConstFontD1Ev>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	08028710 	.word	0x08028710

0800d7e0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f7ff ffe7 	bl	800d7bc <_ZN8touchgfx13GeneratedFontD1Ev>
 800d7ee:	212c      	movs	r1, #44	; 0x2c
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f018 fde6 	bl	80263c2 <_ZdlPvj>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
    {
 800d808:	4a04      	ldr	r2, [pc, #16]	; (800d81c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	601a      	str	r2, [r3, #0]
    }
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4618      	mov	r0, r3
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	08028700 	.word	0x08028700

0800d820 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
    }
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7ff ffe9 	bl	800d800 <_ZN8touchgfx9TypedTextD1Ev>
 800d82e:	2108      	movs	r1, #8
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f018 fdc6 	bl	80263c2 <_ZdlPvj>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4618      	mov	r0, r3
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800d84c:	4618      	mov	r0, r3
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800d864:	4618      	mov	r0, r3
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800d870:	b580      	push	{r7, lr}
 800d872:	b08e      	sub	sp, #56	; 0x38
 800d874:	af0a      	add	r7, sp, #40	; 0x28
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	4611      	mov	r1, r2
 800d87c:	461a      	mov	r2, r3
 800d87e:	460b      	mov	r3, r1
 800d880:	80fb      	strh	r3, [r7, #6]
 800d882:	4613      	mov	r3, r2
 800d884:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	88b9      	ldrh	r1, [r7, #4]
 800d88a:	88fa      	ldrh	r2, [r7, #6]
 800d88c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d890:	9308      	str	r3, [sp, #32]
 800d892:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d894:	9307      	str	r3, [sp, #28]
 800d896:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d89a:	9306      	str	r3, [sp, #24]
 800d89c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d8a0:	9305      	str	r3, [sp, #20]
 800d8a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d8a6:	9304      	str	r3, [sp, #16]
 800d8a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8ac:	9303      	str	r3, [sp, #12]
 800d8ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8b2:	9302      	str	r3, [sp, #8]
 800d8b4:	7f3b      	ldrb	r3, [r7, #28]
 800d8b6:	9301      	str	r3, [sp, #4]
 800d8b8:	8b3b      	ldrh	r3, [r7, #24]
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	68b9      	ldr	r1, [r7, #8]
 800d8c0:	f009 f9be 	bl	8016c40 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800d8c4:	4a09      	ldr	r2, [pc, #36]	; (800d8ec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8ce:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8d4:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8da:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8e0:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	08028710 	.word	0x08028710

0800d8f0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b085      	sub	sp, #20
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	69db      	ldr	r3, [r3, #28]
 800d8fe:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	889b      	ldrh	r3, [r3, #4]
 800d904:	0adb      	lsrs	r3, r3, #11
 800d906:	b29b      	uxth	r3, r3
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	4413      	add	r3, r2
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4413      	add	r3, r2
}
 800d916:	4618      	mov	r0, r3
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr

0800d922 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800d922:	b480      	push	{r7}
 800d924:	b089      	sub	sp, #36	; 0x24
 800d926:	af00      	add	r7, sp, #0
 800d928:	60f8      	str	r0, [r7, #12]
 800d92a:	460b      	mov	r3, r1
 800d92c:	607a      	str	r2, [r7, #4]
 800d92e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d003      	beq.n	800d93e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7b1b      	ldrb	r3, [r3, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800d93e:	2300      	movs	r3, #0
 800d940:	e031      	b.n	800d9a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6a1a      	ldr	r2, [r3, #32]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	7b5b      	ldrb	r3, [r3, #13]
 800d94e:	021b      	lsls	r3, r3, #8
 800d950:	b21b      	sxth	r3, r3
 800d952:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d956:	b219      	sxth	r1, r3
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	7adb      	ldrb	r3, [r3, #11]
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	430b      	orrs	r3, r1
 800d960:	b21b      	sxth	r3, r3
 800d962:	b29b      	uxth	r3, r3
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4413      	add	r3, r2
 800d968:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	7b1b      	ldrb	r3, [r3, #12]
 800d96e:	837b      	strh	r3, [r7, #26]
 800d970:	e013      	b.n	800d99a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	897a      	ldrh	r2, [r7, #10]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d103      	bne.n	800d984 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d982:	e010      	b.n	800d9a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	881b      	ldrh	r3, [r3, #0]
 800d988:	897a      	ldrh	r2, [r7, #10]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d309      	bcc.n	800d9a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d98e:	8b7b      	ldrh	r3, [r7, #26]
 800d990:	3b01      	subs	r3, #1
 800d992:	837b      	strh	r3, [r7, #26]
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	3304      	adds	r3, #4
 800d998:	61fb      	str	r3, [r7, #28]
 800d99a:	8b7b      	ldrh	r3, [r7, #26]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1e8      	bne.n	800d972 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800d9a0:	e000      	b.n	800d9a4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800d9a2:	bf00      	nop
        }
    }
    return 0;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3724      	adds	r7, #36	; 0x24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
	...

0800d9b4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	4801      	ldr	r0, [pc, #4]	; (800d9c0 <__tcf_0+0xc>)
 800d9ba:	f7ff feff 	bl	800d7bc <_ZN8touchgfx13GeneratedFontD1Ev>
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	20023bf4 	.word	0x20023bf4

0800d9c4 <_Z23getFont_verdana_10_4bppv>:
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08e      	sub	sp, #56	; 0x38
 800d9c8:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d9ca:	4b21      	ldr	r3, [pc, #132]	; (800da50 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f3bf 8f5b 	dmb	ish
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	bf0c      	ite	eq
 800d9da:	2301      	moveq	r3, #1
 800d9dc:	2300      	movne	r3, #0
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d030      	beq.n	800da46 <_Z23getFont_verdana_10_4bppv+0x82>
 800d9e4:	481a      	ldr	r0, [pc, #104]	; (800da50 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d9e6:	f018 fcee 	bl	80263c6 <__cxa_guard_acquire>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	bf14      	ite	ne
 800d9f0:	2301      	movne	r3, #1
 800d9f2:	2300      	moveq	r3, #0
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d025      	beq.n	800da46 <_Z23getFont_verdana_10_4bppv+0x82>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	930c      	str	r3, [sp, #48]	; 0x30
 800d9fe:	2300      	movs	r3, #0
 800da00:	930b      	str	r3, [sp, #44]	; 0x2c
 800da02:	2300      	movs	r3, #0
 800da04:	930a      	str	r3, [sp, #40]	; 0x28
 800da06:	233f      	movs	r3, #63	; 0x3f
 800da08:	9309      	str	r3, [sp, #36]	; 0x24
 800da0a:	4b12      	ldr	r3, [pc, #72]	; (800da54 <_Z23getFont_verdana_10_4bppv+0x90>)
 800da0c:	9308      	str	r3, [sp, #32]
 800da0e:	4b12      	ldr	r3, [pc, #72]	; (800da58 <_Z23getFont_verdana_10_4bppv+0x94>)
 800da10:	9307      	str	r3, [sp, #28]
 800da12:	2300      	movs	r3, #0
 800da14:	9306      	str	r3, [sp, #24]
 800da16:	2300      	movs	r3, #0
 800da18:	9305      	str	r3, [sp, #20]
 800da1a:	2301      	movs	r3, #1
 800da1c:	9304      	str	r3, [sp, #16]
 800da1e:	2304      	movs	r3, #4
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	2300      	movs	r3, #0
 800da24:	9302      	str	r3, [sp, #8]
 800da26:	2300      	movs	r3, #0
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	230a      	movs	r3, #10
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	230a      	movs	r3, #10
 800da30:	2201      	movs	r2, #1
 800da32:	490a      	ldr	r1, [pc, #40]	; (800da5c <_Z23getFont_verdana_10_4bppv+0x98>)
 800da34:	480a      	ldr	r0, [pc, #40]	; (800da60 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800da36:	f7ff ff1b 	bl	800d870 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800da3a:	480a      	ldr	r0, [pc, #40]	; (800da64 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800da3c:	f018 fd0e 	bl	802645c <atexit>
 800da40:	4803      	ldr	r0, [pc, #12]	; (800da50 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800da42:	f018 fccc 	bl	80263de <__cxa_guard_release>
    return verdana_10_4bpp;
 800da46:	4b06      	ldr	r3, [pc, #24]	; (800da60 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800da48:	4618      	mov	r0, r3
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	20023c20 	.word	0x20023c20
 800da54:	08029e64 	.word	0x08029e64
 800da58:	08029e7c 	.word	0x08029e7c
 800da5c:	08029dc4 	.word	0x08029dc4
 800da60:	20023bf4 	.word	0x20023bf4
 800da64:	0800d9b5 	.word	0x0800d9b5

0800da68 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	4801      	ldr	r0, [pc, #4]	; (800da74 <__tcf_0+0xc>)
 800da6e:	f7ff fea5 	bl	800d7bc <_ZN8touchgfx13GeneratedFontD1Ev>
 800da72:	bd80      	pop	{r7, pc}
 800da74:	20023c24 	.word	0x20023c24

0800da78 <_Z23getFont_verdana_20_4bppv>:
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b08e      	sub	sp, #56	; 0x38
 800da7c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800da7e:	4b21      	ldr	r3, [pc, #132]	; (800db04 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f3bf 8f5b 	dmb	ish
 800da86:	f003 0301 	and.w	r3, r3, #1
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	bf0c      	ite	eq
 800da8e:	2301      	moveq	r3, #1
 800da90:	2300      	movne	r3, #0
 800da92:	b2db      	uxtb	r3, r3
 800da94:	2b00      	cmp	r3, #0
 800da96:	d030      	beq.n	800dafa <_Z23getFont_verdana_20_4bppv+0x82>
 800da98:	481a      	ldr	r0, [pc, #104]	; (800db04 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800da9a:	f018 fc94 	bl	80263c6 <__cxa_guard_acquire>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	bf14      	ite	ne
 800daa4:	2301      	movne	r3, #1
 800daa6:	2300      	moveq	r3, #0
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d025      	beq.n	800dafa <_Z23getFont_verdana_20_4bppv+0x82>
 800daae:	2300      	movs	r3, #0
 800dab0:	930c      	str	r3, [sp, #48]	; 0x30
 800dab2:	2300      	movs	r3, #0
 800dab4:	930b      	str	r3, [sp, #44]	; 0x2c
 800dab6:	2300      	movs	r3, #0
 800dab8:	930a      	str	r3, [sp, #40]	; 0x28
 800daba:	233f      	movs	r3, #63	; 0x3f
 800dabc:	9309      	str	r3, [sp, #36]	; 0x24
 800dabe:	4b12      	ldr	r3, [pc, #72]	; (800db08 <_Z23getFont_verdana_20_4bppv+0x90>)
 800dac0:	9308      	str	r3, [sp, #32]
 800dac2:	4b12      	ldr	r3, [pc, #72]	; (800db0c <_Z23getFont_verdana_20_4bppv+0x94>)
 800dac4:	9307      	str	r3, [sp, #28]
 800dac6:	2301      	movs	r3, #1
 800dac8:	9306      	str	r3, [sp, #24]
 800daca:	2300      	movs	r3, #0
 800dacc:	9305      	str	r3, [sp, #20]
 800dace:	2301      	movs	r3, #1
 800dad0:	9304      	str	r3, [sp, #16]
 800dad2:	2304      	movs	r3, #4
 800dad4:	9303      	str	r3, [sp, #12]
 800dad6:	2300      	movs	r3, #0
 800dad8:	9302      	str	r3, [sp, #8]
 800dada:	2300      	movs	r3, #0
 800dadc:	9301      	str	r3, [sp, #4]
 800dade:	2314      	movs	r3, #20
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	2314      	movs	r3, #20
 800dae4:	2209      	movs	r2, #9
 800dae6:	490a      	ldr	r1, [pc, #40]	; (800db10 <_Z23getFont_verdana_20_4bppv+0x98>)
 800dae8:	480a      	ldr	r0, [pc, #40]	; (800db14 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800daea:	f7ff fec1 	bl	800d870 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800daee:	480a      	ldr	r0, [pc, #40]	; (800db18 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800daf0:	f018 fcb4 	bl	802645c <atexit>
 800daf4:	4803      	ldr	r0, [pc, #12]	; (800db04 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800daf6:	f018 fc72 	bl	80263de <__cxa_guard_release>
    return verdana_20_4bpp;
 800dafa:	4b06      	ldr	r3, [pc, #24]	; (800db14 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	20023c50 	.word	0x20023c50
 800db08:	08029e68 	.word	0x08029e68
 800db0c:	08029e80 	.word	0x08029e80
 800db10:	08029dd4 	.word	0x08029dd4
 800db14:	20023c24 	.word	0x20023c24
 800db18:	0800da69 	.word	0x0800da69

0800db1c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800db1c:	b580      	push	{r7, lr}
 800db1e:	af00      	add	r7, sp, #0
 800db20:	4801      	ldr	r0, [pc, #4]	; (800db28 <__tcf_0+0xc>)
 800db22:	f7ff fe4b 	bl	800d7bc <_ZN8touchgfx13GeneratedFontD1Ev>
 800db26:	bd80      	pop	{r7, pc}
 800db28:	20023c54 	.word	0x20023c54

0800db2c <_Z23getFont_verdana_40_4bppv>:
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08e      	sub	sp, #56	; 0x38
 800db30:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800db32:	4b21      	ldr	r3, [pc, #132]	; (800dbb8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f3bf 8f5b 	dmb	ish
 800db3a:	f003 0301 	and.w	r3, r3, #1
 800db3e:	2b00      	cmp	r3, #0
 800db40:	bf0c      	ite	eq
 800db42:	2301      	moveq	r3, #1
 800db44:	2300      	movne	r3, #0
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d030      	beq.n	800dbae <_Z23getFont_verdana_40_4bppv+0x82>
 800db4c:	481a      	ldr	r0, [pc, #104]	; (800dbb8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800db4e:	f018 fc3a 	bl	80263c6 <__cxa_guard_acquire>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	bf14      	ite	ne
 800db58:	2301      	movne	r3, #1
 800db5a:	2300      	moveq	r3, #0
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d025      	beq.n	800dbae <_Z23getFont_verdana_40_4bppv+0x82>
 800db62:	2300      	movs	r3, #0
 800db64:	930c      	str	r3, [sp, #48]	; 0x30
 800db66:	2300      	movs	r3, #0
 800db68:	930b      	str	r3, [sp, #44]	; 0x2c
 800db6a:	2300      	movs	r3, #0
 800db6c:	930a      	str	r3, [sp, #40]	; 0x28
 800db6e:	233f      	movs	r3, #63	; 0x3f
 800db70:	9309      	str	r3, [sp, #36]	; 0x24
 800db72:	4b12      	ldr	r3, [pc, #72]	; (800dbbc <_Z23getFont_verdana_40_4bppv+0x90>)
 800db74:	9308      	str	r3, [sp, #32]
 800db76:	4b12      	ldr	r3, [pc, #72]	; (800dbc0 <_Z23getFont_verdana_40_4bppv+0x94>)
 800db78:	9307      	str	r3, [sp, #28]
 800db7a:	2300      	movs	r3, #0
 800db7c:	9306      	str	r3, [sp, #24]
 800db7e:	2300      	movs	r3, #0
 800db80:	9305      	str	r3, [sp, #20]
 800db82:	2301      	movs	r3, #1
 800db84:	9304      	str	r3, [sp, #16]
 800db86:	2304      	movs	r3, #4
 800db88:	9303      	str	r3, [sp, #12]
 800db8a:	2300      	movs	r3, #0
 800db8c:	9302      	str	r3, [sp, #8]
 800db8e:	2300      	movs	r3, #0
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	2328      	movs	r3, #40	; 0x28
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	2328      	movs	r3, #40	; 0x28
 800db98:	2201      	movs	r2, #1
 800db9a:	490a      	ldr	r1, [pc, #40]	; (800dbc4 <_Z23getFont_verdana_40_4bppv+0x98>)
 800db9c:	480a      	ldr	r0, [pc, #40]	; (800dbc8 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800db9e:	f7ff fe67 	bl	800d870 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dba2:	480a      	ldr	r0, [pc, #40]	; (800dbcc <_Z23getFont_verdana_40_4bppv+0xa0>)
 800dba4:	f018 fc5a 	bl	802645c <atexit>
 800dba8:	4803      	ldr	r0, [pc, #12]	; (800dbb8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dbaa:	f018 fc18 	bl	80263de <__cxa_guard_release>
    return verdana_40_4bpp;
 800dbae:	4b06      	ldr	r3, [pc, #24]	; (800dbc8 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20023c80 	.word	0x20023c80
 800dbbc:	08029e78 	.word	0x08029e78
 800dbc0:	08029e84 	.word	0x08029e84
 800dbc4:	08029e54 	.word	0x08029e54
 800dbc8:	20023c54 	.word	0x20023c54
 800dbcc:	0800db1d 	.word	0x0800db1d

0800dbd0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dbf2:	bf00      	nop
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800dbfe:	b480      	push	{r7}
 800dc00:	b083      	sub	sp, #12
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
 800dc06:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dc08:	bf00      	nop
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dc1e:	bf00      	nop
 800dc20:	370c      	adds	r7, #12
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800dc2a:	b480      	push	{r7}
 800dc2c:	b083      	sub	sp, #12
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	460b      	mov	r3, r1
 800dc34:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800dc36:	bf00      	nop
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800dc42:	b480      	push	{r7}
 800dc44:	b083      	sub	sp, #12
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
    {
    }
 800dc4a:	bf00      	nop
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800dc56:	b480      	push	{r7}
 800dc58:	b083      	sub	sp, #12
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
    {
    }
 800dc5e:	bf00      	nop
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
	...

0800dc6c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
    {
 800dc74:	4a04      	ldr	r2, [pc, #16]	; (800dc88 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	601a      	str	r2, [r3, #0]
    }
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	08028890 	.word	0x08028890

0800dc8c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
    }
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f7ff ffe9 	bl	800dc6c <_ZN8touchgfx15UIEventListenerD1Ev>
 800dc9a:	2104      	movs	r1, #4
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f018 fb90 	bl	80263c2 <_ZdlPvj>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	4618      	mov	r0, r3
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
    {
    }
 800dcb4:	bf00      	nop
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800dcea:	6810      	ldr	r0, [r2, #0]
 800dcec:	6851      	ldr	r1, [r2, #4]
 800dcee:	c303      	stmia	r3!, {r0, r1}
    }
 800dcf0:	bf00      	nop
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	3304      	adds	r3, #4
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f007 fe69 	bl	80159e0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800dd0e:	bf00      	nop
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
	...

0800dd18 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
    {
 800dd20:	4a04      	ldr	r2, [pc, #16]	; (800dd34 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	601a      	str	r2, [r3, #0]
    }
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	08028878 	.word	0x08028878

0800dd38 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
    }
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff ffe9 	bl	800dd18 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800dd46:	2104      	movs	r1, #4
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f018 fb3a 	bl	80263c2 <_ZdlPvj>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4618      	mov	r0, r3
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800dd58:	b480      	push	{r7}
 800dd5a:	af00      	add	r7, sp, #0
    {
        return instance;
 800dd5c:	4b03      	ldr	r3, [pc, #12]	; (800dd6c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
    }
 800dd60:	4618      	mov	r0, r3
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	20025830 	.word	0x20025830

0800dd70 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800dd70:	b480      	push	{r7}
 800dd72:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800dd74:	4b0b      	ldr	r3, [pc, #44]	; (800dda4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d008      	beq.n	800dd92 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800dd80:	4b08      	ldr	r3, [pc, #32]	; (800dda4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800dd8a:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd90:	e002      	b.n	800dd98 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800dd92:	4b04      	ldr	r3, [pc, #16]	; (800dda4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	689b      	ldr	r3, [r3, #8]
    }
 800dd98:	4618      	mov	r0, r3
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	20025830 	.word	0x20025830

0800dda8 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800ddb0:	4a07      	ldr	r2, [pc, #28]	; (800ddd0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	605a      	str	r2, [r3, #4]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	721a      	strb	r2, [r3, #8]
    {
    }
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr
 800ddd0:	08028854 	.word	0x08028854

0800ddd4 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
    {
 800dddc:	4a04      	ldr	r2, [pc, #16]	; (800ddf0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	601a      	str	r2, [r3, #0]
    }
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4618      	mov	r0, r3
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	08028854 	.word	0x08028854

0800ddf4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
    }
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f7ff ffe9 	bl	800ddd4 <_ZN8touchgfx10TransitionD1Ev>
 800de02:	210c      	movs	r1, #12
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f018 fadc 	bl	80263c2 <_ZdlPvj>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4618      	mov	r0, r3
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
    {
    }
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
    {
    }
 800de30:	bf00      	nop
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
    {
    }
 800de44:	bf00      	nop
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800de58:	f007 fd84 	bl	8015964 <_ZN8touchgfx11Application11getInstanceEv>
 800de5c:	4603      	mov	r3, r0
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	323c      	adds	r2, #60	; 0x3c
 800de62:	6812      	ldr	r2, [r2, #0]
 800de64:	4618      	mov	r0, r3
 800de66:	4790      	blx	r2
    }
 800de68:	bf00      	nop
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	605a      	str	r2, [r3, #4]
    }
 800de80:	bf00      	nop
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	4a05      	ldr	r2, [pc, #20]	; (800deac <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7ff fee5 	bl	800dc6c <_ZN8touchgfx15UIEventListenerD1Ev>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4618      	mov	r0, r3
 800dea6:	3708      	adds	r7, #8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	080295c8 	.word	0x080295c8

0800deb0 <_ZN8touchgfx11ApplicationD0Ev>:
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7ff ffe7 	bl	800de8c <_ZN8touchgfx11ApplicationD1Ev>
 800debe:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f018 fa7d 	bl	80263c2 <_ZdlPvj>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4618      	mov	r0, r3
 800decc:	3708      	adds	r7, #8
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
	...

0800ded4 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4618      	mov	r0, r3
 800dee0:	f007 fe4c 	bl	8015b7c <_ZN8touchgfx11ApplicationC1Ev>
 800dee4:	4a09      	ldr	r2, [pc, #36]	; (800df0c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4a04      	ldr	r2, [pc, #16]	; (800df10 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800defe:	6013      	str	r3, [r2, #0]
    }
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	08028800 	.word	0x08028800
 800df10:	2002587c 	.word	0x2002587c

0800df14 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 f804 	bl	800df2a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800df22:	bf00      	nop
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b082      	sub	sp, #8
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00f      	beq.n	800df5c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	330c      	adds	r3, #12
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4610      	mov	r0, r2
 800df50:	4798      	blx	r3
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800df58:	2301      	movs	r3, #1
 800df5a:	e000      	b.n	800df5e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800df5c:	2300      	movs	r3, #0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00e      	beq.n	800df80 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3308      	adds	r3, #8
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4610      	mov	r0, r2
 800df76:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	683a      	ldr	r2, [r7, #0]
 800df96:	601a      	str	r2, [r3, #0]
    }
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	4a05      	ldr	r2, [pc, #20]	; (800dfc4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	601a      	str	r2, [r3, #0]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7ff ff69 	bl	800de8c <_ZN8touchgfx11ApplicationD1Ev>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	08028800 	.word	0x08028800

0800dfc8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff ffe7 	bl	800dfa4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800dfd6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f018 f9f1 	bl	80263c2 <_ZdlPvj>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	4a08      	ldr	r2, [pc, #32]	; (800e018 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	601a      	str	r2, [r3, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e000:	4618      	mov	r0, r3
 800e002:	f000 facd 	bl	800e5a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff ffcb 	bl	800dfa4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4618      	mov	r0, r3
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	08028794 	.word	0x08028794

0800e01c <_ZN23FrontendApplicationBaseD0Ev>:
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff ffe1 	bl	800dfec <_ZN23FrontendApplicationBaseD1Ev>
 800e02a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f018 f9c7 	bl	80263c2 <_ZdlPvj>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4618      	mov	r0, r3
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e03e:	b580      	push	{r7, lr}
 800e040:	b082      	sub	sp, #8
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 f882 	bl	800e150 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800e04c:	bf00      	nop
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2201      	movs	r2, #1
 800e060:	721a      	strb	r2, [r3, #8]
    }
 800e062:	bf00      	nop
 800e064:	370c      	adds	r7, #12
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800e06e:	b480      	push	{r7}
 800e070:	b083      	sub	sp, #12
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
 800e076:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	683a      	ldr	r2, [r7, #0]
 800e07c:	605a      	str	r2, [r3, #4]
    }
 800e07e:	bf00      	nop
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
	...

0800e08c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7ff ff1a 	bl	800ded4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e0a0:	4a16      	ldr	r2, [pc, #88]	; (800e0fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f000 f8a5 	bl	800e1fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800e0c2:	f7ff fe49 	bl	800dd58 <_ZN8touchgfx3HAL11getInstanceEv>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	3208      	adds	r2, #8
 800e0cc:	6812      	ldr	r2, [r2, #0]
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	f001 ff63 	bl	800ffa0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e0da:	f7ff fe49 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f010 fe1c 	bl	801ed1e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800e0e6:	f7ff fe43 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f010 fe91 	bl	801ee14 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	08028794 	.word	0x08028794

0800e100 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	4618      	mov	r0, r3
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	683a      	ldr	r2, [r7, #0]
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff ffe9 	bl	800e100 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	605a      	str	r2, [r3, #4]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	3308      	adds	r3, #8
 800e13c:	3208      	adds	r2, #8
 800e13e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e142:	e883 0003 	stmia.w	r3, {r0, r1}
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4618      	mov	r0, r3
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800e150:	b590      	push	{r4, r7, lr}
 800e152:	b089      	sub	sp, #36	; 0x24
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800e15e:	4b10      	ldr	r3, [pc, #64]	; (800e1a0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800e160:	61bb      	str	r3, [r7, #24]
 800e162:	2300      	movs	r3, #0
 800e164:	61fb      	str	r3, [r7, #28]
 800e166:	f107 0008 	add.w	r0, r7, #8
 800e16a:	f107 0318 	add.w	r3, r7, #24
 800e16e:	cb0c      	ldmia	r3, {r2, r3}
 800e170:	6879      	ldr	r1, [r7, #4]
 800e172:	f000 f85f 	bl	800e234 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e176:	f107 0308 	add.w	r3, r7, #8
 800e17a:	4619      	mov	r1, r3
 800e17c:	4620      	mov	r0, r4
 800e17e:	f7ff ffcb 	bl	800e118 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e182:	f107 0308 	add.w	r3, r7, #8
 800e186:	4618      	mov	r0, r3
 800e188:	f000 fa0a 	bl	800e5a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800e198:	bf00      	nop
 800e19a:	3724      	adds	r7, #36	; 0x24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd90      	pop	{r4, r7, pc}
 800e1a0:	0800e1a5 	.word	0x0800e1a5

0800e1a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af02      	add	r7, sp, #8
 800e1aa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	4b04      	ldr	r3, [pc, #16]	; (800e1d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800e1c4:	4804      	ldr	r0, [pc, #16]	; (800e1d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800e1c6:	f000 f867 	bl	800e298 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e1ca:	bf00      	nop
 800e1cc:	3708      	adds	r7, #8
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20025870 	.word	0x20025870
 800e1d8:	2002586c 	.word	0x2002586c

0800e1dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	4a04      	ldr	r2, [pc, #16]	; (800e1f8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	601a      	str	r2, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	08028878 	.word	0x08028878

0800e1fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4618      	mov	r0, r3
 800e208:	f7ff ffe8 	bl	800e1dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e20c:	4a08      	ldr	r2, [pc, #32]	; (800e230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	601a      	str	r2, [r3, #0]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2200      	movs	r2, #0
 800e216:	605a      	str	r2, [r3, #4]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	609a      	str	r2, [r3, #8]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	60da      	str	r2, [r3, #12]
    {
    }
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	4618      	mov	r0, r3
 800e228:	3708      	adds	r7, #8
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	080287e8 	.word	0x080287e8

0800e234 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	4639      	mov	r1, r7
 800e240:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff ffc8 	bl	800e1dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e24c:	4a08      	ldr	r2, [pc, #32]	; (800e270 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	68ba      	ldr	r2, [r7, #8]
 800e256:	605a      	str	r2, [r3, #4]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	3308      	adds	r3, #8
 800e25c:	463a      	mov	r2, r7
 800e25e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e262:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	4618      	mov	r0, r3
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	080287e8 	.word	0x080287e8

0800e274 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4618      	mov	r0, r3
 800e280:	f7ff fd92 	bl	800dda8 <_ZN8touchgfx10TransitionC1Ev>
 800e284:	4a03      	ldr	r2, [pc, #12]	; (800e294 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	601a      	str	r2, [r3, #0]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4618      	mov	r0, r3
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	08028770 	.word	0x08028770

0800e298 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e298:	b590      	push	{r4, r7, lr}
 800e29a:	b08f      	sub	sp, #60	; 0x3c
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
 800e2a4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	689a      	ldr	r2, [r3, #8]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	3320      	adds	r3, #32
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	4798      	blx	r3
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 800e2be:	d205      	bcs.n	800e2cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800e2c0:	4b7d      	ldr	r3, [pc, #500]	; (800e4b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800e2c2:	4a7e      	ldr	r2, [pc, #504]	; (800e4bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e2c4:	21a3      	movs	r1, #163	; 0xa3
 800e2c6:	487e      	ldr	r0, [pc, #504]	; (800e4c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e2c8:	f018 f8aa 	bl	8026420 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	3320      	adds	r3, #32
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4610      	mov	r0, r2
 800e2dc:	4798      	blx	r3
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b0f      	cmp	r3, #15
 800e2e2:	d805      	bhi.n	800e2f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800e2e4:	4b77      	ldr	r3, [pc, #476]	; (800e4c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e2e6:	4a75      	ldr	r2, [pc, #468]	; (800e4bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e2e8:	21a4      	movs	r1, #164	; 0xa4
 800e2ea:	4875      	ldr	r0, [pc, #468]	; (800e4c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e2ec:	f018 f898 	bl	8026420 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	68da      	ldr	r2, [r3, #12]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3320      	adds	r3, #32
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4610      	mov	r0, r2
 800e300:	4798      	blx	r3
 800e302:	4603      	mov	r3, r0
 800e304:	2b0b      	cmp	r3, #11
 800e306:	d805      	bhi.n	800e314 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800e308:	4b6f      	ldr	r3, [pc, #444]	; (800e4c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e30a:	4a6c      	ldr	r2, [pc, #432]	; (800e4bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e30c:	21a5      	movs	r1, #165	; 0xa5
 800e30e:	486c      	ldr	r0, [pc, #432]	; (800e4c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e310:	f018 f886 	bl	8026420 <__assert_func>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	62bb      	str	r3, [r7, #40]	; 0x28
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	627b      	str	r3, [r7, #36]	; 0x24
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e320:	f007 fb20 	bl	8015964 <_ZN8touchgfx11Application11getInstanceEv>
 800e324:	4603      	mov	r3, r0
 800e326:	4618      	mov	r0, r3
 800e328:	f7ff fce8 	bl	800dcfc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d008      	beq.n	800e346 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800e334:	6a3b      	ldr	r3, [r7, #32]
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	6a3b      	ldr	r3, [r7, #32]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	330c      	adds	r3, #12
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4610      	mov	r0, r2
 800e344:	4798      	blx	r3
    if (*currentTrans)
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d007      	beq.n	800e35e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	6a3b      	ldr	r3, [r7, #32]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4610      	mov	r0, r2
 800e35c:	4798      	blx	r3
    if (*currentScreen)
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d008      	beq.n	800e378 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800e366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	3314      	adds	r3, #20
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4610      	mov	r0, r2
 800e376:	4798      	blx	r3
    if (*currentPresenter)
 800e378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d008      	beq.n	800e392 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	3304      	adds	r3, #4
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4610      	mov	r0, r2
 800e390:	4798      	blx	r3
    if (*currentScreen)
 800e392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d007      	beq.n	800e3aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800e39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4610      	mov	r0, r2
 800e3a8:	4798      	blx	r3
    if (*currentPresenter)
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d008      	beq.n	800e3c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3308      	adds	r3, #8
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	4798      	blx	r3
}
 800e3c4:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f000 f87d 	bl	800e4cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	200c      	movs	r0, #12
 800e3d8:	f7ff fbfa 	bl	800dbd0 <_ZnwjPv>
 800e3dc:	4604      	mov	r4, r0
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f7ff ff48 	bl	800e274 <_ZN8touchgfx12NoTransitionC1Ev>
 800e3e4:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f000 f880 	bl	800e4f2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 800e3fa:	f7ff fbe9 	bl	800dbd0 <_ZnwjPv>
 800e3fe:	4604      	mov	r4, r0
 800e400:	4620      	mov	r0, r4
 800e402:	f001 ffe1 	bl	80103c8 <_ZN11Screen1ViewC1Ev>
 800e406:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	2100      	movs	r1, #0
 800e40e:	4618      	mov	r0, r3
 800e410:	f000 f882 	bl	800e518 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800e414:	4603      	mov	r3, r0
 800e416:	4619      	mov	r1, r3
 800e418:	2010      	movs	r0, #16
 800e41a:	f7ff fbd9 	bl	800dbd0 <_ZnwjPv>
 800e41e:	4604      	mov	r4, r0
 800e420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e422:	4620      	mov	r0, r4
 800e424:	f001 ff78 	bl	8010318 <_ZN16Screen1PresenterC1ER11Screen1View>
 800e428:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e42e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e434:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e43a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d002      	beq.n	800e448 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	3304      	adds	r3, #4
 800e446:	e000      	b.n	800e44a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e448:	2300      	movs	r3, #0
 800e44a:	4619      	mov	r1, r3
 800e44c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e44e:	f7ff fd9b 	bl	800df88 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e454:	3304      	adds	r3, #4
 800e456:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e458:	4618      	mov	r0, r3
 800e45a:	f7ff fe08 	bl	800e06e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e462:	4618      	mov	r0, r3
 800e464:	f000 f86b 	bl	800e53e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800e468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46a:	61fb      	str	r3, [r7, #28]
 800e46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46e:	61bb      	str	r3, [r7, #24]
 800e470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e472:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	330c      	adds	r3, #12
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	69f8      	ldr	r0, [r7, #28]
 800e47e:	4798      	blx	r3
    newPresenter->activate();
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	69b8      	ldr	r0, [r7, #24]
 800e488:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e48a:	6979      	ldr	r1, [r7, #20]
 800e48c:	69f8      	ldr	r0, [r7, #28]
 800e48e:	f008 ff75 	bl	801737c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3310      	adds	r3, #16
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	6978      	ldr	r0, [r7, #20]
 800e49c:	4798      	blx	r3
    newTransition->invalidate();
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3314      	adds	r3, #20
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6978      	ldr	r0, [r7, #20]
 800e4a8:	4798      	blx	r3
}
 800e4aa:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	373c      	adds	r7, #60	; 0x3c
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd90      	pop	{r4, r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	08027498 	.word	0x08027498
 800e4bc:	08027528 	.word	0x08027528
 800e4c0:	0802762c 	.word	0x0802762c
 800e4c4:	08027670 	.word	0x08027670
 800e4c8:	08027714 	.word	0x08027714

0800e4cc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3324      	adds	r3, #36	; 0x24
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	887a      	ldrh	r2, [r7, #2]
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	4798      	blx	r3
 800e4e8:	4603      	mov	r3, r0
    }
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b082      	sub	sp, #8
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3324      	adds	r3, #36	; 0x24
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	887a      	ldrh	r2, [r7, #2]
 800e508:	4611      	mov	r1, r2
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	4798      	blx	r3
 800e50e:	4603      	mov	r3, r0
    }
 800e510:	4618      	mov	r0, r3
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3324      	adds	r3, #36	; 0x24
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	887a      	ldrh	r2, [r7, #2]
 800e52e:	4611      	mov	r1, r2
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	4798      	blx	r3
 800e534:	4603      	mov	r3, r0
    }
 800e536:	4618      	mov	r0, r3
 800e538:	3708      	adds	r7, #8
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e53e:	b480      	push	{r7}
 800e540:	b083      	sub	sp, #12
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
 800e546:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e54e:	bf00      	nop
 800e550:	370c      	adds	r7, #12
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr
	...

0800e55c <_ZN8touchgfx12NoTransitionD1Ev>:
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	4a05      	ldr	r2, [pc, #20]	; (800e57c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	601a      	str	r2, [r3, #0]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7ff fc31 	bl	800ddd4 <_ZN8touchgfx10TransitionD1Ev>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4618      	mov	r0, r3
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	08028770 	.word	0x08028770

0800e580 <_ZN8touchgfx12NoTransitionD0Ev>:
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f7ff ffe7 	bl	800e55c <_ZN8touchgfx12NoTransitionD1Ev>
 800e58e:	210c      	movs	r1, #12
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f017 ff16 	bl	80263c2 <_ZdlPvj>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4618      	mov	r0, r3
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	4a05      	ldr	r2, [pc, #20]	; (800e5c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7ff fbb1 	bl	800dd18 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3708      	adds	r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	080287e8 	.word	0x080287e8

0800e5c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff ffe7 	bl	800e5a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e5d2:	2110      	movs	r1, #16
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f017 fef4 	bl	80263c2 <_ZdlPvj>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	68d2      	ldr	r2, [r2, #12]
 800e5f4:	1052      	asrs	r2, r2, #1
 800e5f6:	1899      	adds	r1, r3, r2
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	f003 0301 	and.w	r3, r3, #1
 800e600:	2b00      	cmp	r3, #0
 800e602:	d102      	bne.n	800e60a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	e00a      	b.n	800e620 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	68d2      	ldr	r2, [r2, #12]
 800e612:	1052      	asrs	r2, r2, #1
 800e614:	4413      	add	r3, r2
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	6892      	ldr	r2, [r2, #8]
 800e61c:	4413      	add	r3, r2
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4608      	mov	r0, r1
 800e622:	4798      	blx	r3
    }
 800e624:	bf00      	nop
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d010      	beq.n	800e65e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d107      	bne.n	800e654 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	f003 0301 	and.w	r3, r3, #1
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d101      	bne.n	800e654 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e650:	2301      	movs	r3, #1
 800e652:	e000      	b.n	800e656 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800e654:	2300      	movs	r3, #0
 800e656:	2b01      	cmp	r3, #1
 800e658:	d001      	beq.n	800e65e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e65a:	2301      	movs	r3, #1
 800e65c:	e000      	b.n	800e660 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800e65e:	2300      	movs	r3, #0
    }
 800e660:	4618      	mov	r0, r3
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
        : color(col)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	683a      	ldr	r2, [r7, #0]
 800e67a:	601a      	str	r2, [r3, #0]
    {
    }
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	4618      	mov	r0, r3
 800e680:	370c      	adds	r7, #12
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr

0800e68a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e68a:	b480      	push	{r7}
 800e68c:	b083      	sub	sp, #12
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	801a      	strh	r2, [r3, #0]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	805a      	strh	r2, [r3, #2]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	809a      	strh	r2, [r3, #4]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	80da      	strh	r2, [r3, #6]
    {
    }
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	4608      	mov	r0, r1
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	817b      	strh	r3, [r7, #10]
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	813b      	strh	r3, [r7, #8]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	897a      	ldrh	r2, [r7, #10]
 800e6d6:	801a      	strh	r2, [r3, #0]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	893a      	ldrh	r2, [r7, #8]
 800e6dc:	805a      	strh	r2, [r3, #2]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	88fa      	ldrh	r2, [r7, #6]
 800e6e2:	809a      	strh	r2, [r3, #4]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	8b3a      	ldrh	r2, [r7, #24]
 800e6e8:	80da      	strh	r2, [r3, #6]
    {
    }
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3714      	adds	r7, #20
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	460b      	mov	r3, r1
 800e702:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	887a      	ldrh	r2, [r7, #2]
 800e708:	801a      	strh	r2, [r3, #0]
    {
    }
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4618      	mov	r0, r3
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800e720:	4a14      	ldr	r2, [pc, #80]	; (800e774 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	601a      	str	r2, [r3, #0]
        : rect(),
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	3304      	adds	r3, #4
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff ffad 	bl	800e68a <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	330c      	adds	r3, #12
 800e734:	4618      	mov	r0, r3
 800e736:	f7ff ffa8 	bl	800e68a <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2200      	movs	r2, #0
 800e750:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2200      	movs	r2, #0
 800e756:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2201      	movs	r2, #1
 800e764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	0802961c 	.word	0x0802961c

0800e778 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
    {
 800e780:	4a04      	ldr	r2, [pc, #16]	; (800e794 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	601a      	str	r2, [r3, #0]
    }
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4618      	mov	r0, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	0802961c 	.word	0x0802961c

0800e798 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
    }
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7ff ffe9 	bl	800e778 <_ZN8touchgfx8DrawableD1Ev>
 800e7a6:	2128      	movs	r1, #40	; 0x28
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f017 fe0a 	bl	80263c2 <_ZdlPvj>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d005      	beq.n	800e7d6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	3314      	adds	r3, #20
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	4798      	blx	r3
        }
    }
 800e7d6:	bf00      	nop
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800e7de:	b480      	push	{r7}
 800e7e0:	b083      	sub	sp, #12
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e7e6:	2300      	movs	r3, #0
    }
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	4608      	mov	r0, r1
 800e7fe:	4611      	mov	r1, r2
 800e800:	461a      	mov	r2, r3
 800e802:	4603      	mov	r3, r0
 800e804:	817b      	strh	r3, [r7, #10]
 800e806:	460b      	mov	r3, r1
 800e808:	813b      	strh	r3, [r7, #8]
 800e80a:	4613      	mov	r3, r2
 800e80c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e80e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e812:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e816:	4619      	mov	r1, r3
 800e818:	68f8      	ldr	r0, [r7, #12]
 800e81a:	f000 f844 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e81e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e826:	4619      	mov	r1, r3
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f000 f898 	bl	800e95e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e82e:	bf00      	nop
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800e836:	b480      	push	{r7}
 800e838:	b083      	sub	sp, #12
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800e844:	4618      	mov	r0, r3
 800e846:	370c      	adds	r7, #12
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e85e:	4618      	mov	r0, r3
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr

0800e86a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e86a:	b480      	push	{r7}
 800e86c:	b083      	sub	sp, #12
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	460b      	mov	r3, r1
 800e874:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	887a      	ldrh	r2, [r7, #2]
 800e87a:	809a      	strh	r2, [r3, #4]
    }
 800e87c:	bf00      	nop
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	887a      	ldrh	r2, [r7, #2]
 800e898:	80da      	strh	r2, [r3, #6]
    }
 800e89a:	bf00      	nop
 800e89c:	370c      	adds	r7, #12
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b082      	sub	sp, #8
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	807b      	strh	r3, [r7, #2]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3330      	adds	r3, #48	; 0x30
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e8c2:	4611      	mov	r1, r2
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	4798      	blx	r3
        setY(y);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	3334      	adds	r3, #52	; 0x34
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	4798      	blx	r3
    }
 800e8da:	bf00      	nop
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e8e2:	b480      	push	{r7}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	887a      	ldrh	r2, [r7, #2]
 800e8f2:	811a      	strh	r2, [r3, #8]
    }
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	460b      	mov	r3, r1
 800e90a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	887a      	ldrh	r2, [r7, #2]
 800e910:	815a      	strh	r2, [r3, #10]
    }
 800e912:	bf00      	nop
 800e914:	370c      	adds	r7, #12
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr

0800e91e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e91e:	b480      	push	{r7}
 800e920:	b083      	sub	sp, #12
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
    {
    }
 800e926:	bf00      	nop
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr

0800e932 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e932:	b480      	push	{r7}
 800e934:	b083      	sub	sp, #12
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
 800e93a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e93c:	bf00      	nop
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e952:	bf00      	nop
 800e954:	370c      	adds	r7, #12
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800e95e:	b580      	push	{r7, lr}
 800e960:	b082      	sub	sp, #8
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
 800e966:	460b      	mov	r3, r1
 800e968:	807b      	strh	r3, [r7, #2]
 800e96a:	4613      	mov	r3, r2
 800e96c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	3338      	adds	r3, #56	; 0x38
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e97a:	4611      	mov	r1, r2
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	4798      	blx	r3
        setHeight(height);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	333c      	adds	r3, #60	; 0x3c
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e98c:	4611      	mov	r1, r2
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	4798      	blx	r3
    }
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e99a:	b480      	push	{r7}
 800e99c:	b083      	sub	sp, #12
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e9a4:	bf00      	nop
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
    {
    }
 800e9b8:	bf00      	nop
 800e9ba:	370c      	adds	r7, #12
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr

0800e9c4 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	78fa      	ldrb	r2, [r7, #3]
 800e9d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800e9d8:	bf00      	nop
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	370c      	adds	r7, #12
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr

0800e9fe <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e9fe:	b480      	push	{r7}
 800ea00:	b083      	sub	sp, #12
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	460b      	mov	r3, r1
 800ea22:	807b      	strh	r3, [r7, #2]
 800ea24:	4613      	mov	r3, r2
 800ea26:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	3354      	adds	r3, #84	; 0x54
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	8879      	ldrh	r1, [r7, #2]
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ea38:	b292      	uxth	r2, r2
 800ea3a:	1a8a      	subs	r2, r1, r2
 800ea3c:	b292      	uxth	r2, r2
 800ea3e:	b210      	sxth	r0, r2
 800ea40:	8839      	ldrh	r1, [r7, #0]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ea48:	b292      	uxth	r2, r2
 800ea4a:	1a8a      	subs	r2, r1, r2
 800ea4c:	b292      	uxth	r2, r2
 800ea4e:	b212      	sxth	r2, r2
 800ea50:	4601      	mov	r1, r0
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	4798      	blx	r3
    }
 800ea56:	bf00      	nop
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ea5e:	b480      	push	{r7}
 800ea60:	b083      	sub	sp, #12
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea6c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea74:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea7c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ea7e:	bf00      	nop
 800ea80:	370c      	adds	r7, #12
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr

0800ea8a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b084      	sub	sp, #16
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	60f8      	str	r0, [r7, #12]
 800ea92:	60b9      	str	r1, [r7, #8]
 800ea94:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f7ff ffe1 	bl	800ea5e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	601a      	str	r2, [r3, #0]
    }
 800eaaa:	bf00      	nop
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
    void registerTimerWidget(Drawable* w)
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b082      	sub	sp, #8
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	6039      	str	r1, [r7, #0]
        timerWidgets.add(w);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3304      	adds	r3, #4
 800eac0:	6839      	ldr	r1, [r7, #0]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f007 f81c 	bl	8015b00 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
    }
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
     * @param [in] w The widget to remove.
     *
     * @note If widget has been registered multiple times, an equal number of calls to unregister
     *       are required to stop widget from receiving tick events.
     */
    void unregisterTimerWidget(const Drawable* w)
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
    {
        timerWidgets.remove(w);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	3304      	adds	r3, #4
 800eade:	6839      	ldr	r1, [r7, #0]
 800eae0:	4618      	mov	r0, r3
 800eae2:	f006 ff64 	bl	80159ae <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
    }
 800eae6:	bf00      	nop
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
	...

0800eaf0 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
    {
 800eaf8:	4a06      	ldr	r2, [pc, #24]	; (800eb14 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	601a      	str	r2, [r3, #0]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	3304      	adds	r3, #4
 800eb02:	4618      	mov	r0, r3
 800eb04:	f001 f84a 	bl	800fb9c <_ZN8touchgfx9ContainerD1Ev>
    }
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	08029720 	.word	0x08029720

0800eb18 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
    }
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7ff ffe5 	bl	800eaf0 <_ZN8touchgfx6ScreenD1Ev>
 800eb26:	213c      	movs	r1, #60	; 0x3c
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f017 fc4a 	bl	80263c2 <_ZdlPvj>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
    {
    }
 800eb40:	bf00      	nop
 800eb42:	370c      	adds	r7, #12
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr

0800eb4c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
    {
    }
 800eb54:	bf00      	nop
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
    {
    }
 800eb68:	bf00      	nop
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
    {
    }
 800eb7c:	bf00      	nop
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	460b      	mov	r3, r1
 800eb92:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800eb94:	bf00      	nop
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	3304      	adds	r3, #4
 800ebae:	6839      	ldr	r1, [r7, #0]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f003 fa6f 	bl	8012094 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800ebb6:	bf00      	nop
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b084      	sub	sp, #16
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	60f8      	str	r0, [r7, #12]
 800ebc6:	607b      	str	r3, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	817b      	strh	r3, [r7, #10]
 800ebcc:	4613      	mov	r3, r2
 800ebce:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7ff ff06 	bl	800e9e4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d008      	beq.n	800ebf0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7ff ff0c 	bl	800e9fe <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ebec:	2301      	movs	r3, #1
 800ebee:	e000      	b.n	800ebf2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d002      	beq.n	800ebfc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ebf6:	68fa      	ldr	r2, [r7, #12]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	601a      	str	r2, [r3, #0]
        }
    }
 800ebfc:	bf00      	nop
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff fd82 	bl	800e718 <_ZN8touchgfx8DrawableC1Ev>
 800ec14:	4a03      	ldr	r2, [pc, #12]	; (800ec24 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	601a      	str	r2, [r3, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	08028a48 	.word	0x08028a48

0800ec28 <_ZN8touchgfx6WidgetD1Ev>:
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	4a05      	ldr	r2, [pc, #20]	; (800ec48 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7ff fd9d 	bl	800e778 <_ZN8touchgfx8DrawableD1Ev>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4618      	mov	r0, r3
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	08028a48 	.word	0x08028a48

0800ec4c <_ZN8touchgfx6WidgetD0Ev>:
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff ffe7 	bl	800ec28 <_ZN8touchgfx6WidgetD1Ev>
 800ec5a:	2128      	movs	r1, #40	; 0x28
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f017 fbb0 	bl	80263c2 <_ZdlPvj>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4618      	mov	r0, r3
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4618      	mov	r0, r3
 800ec78:	2326      	movs	r3, #38	; 0x26
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	f017 fdd4 	bl	802682a <memset>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7ff ffbd 	bl	800ec04 <_ZN8touchgfx6WidgetC1Ev>
 800ec8a:	4a09      	ldr	r2, [pc, #36]	; (800ecb0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	601a      	str	r2, [r3, #0]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	22ff      	movs	r2, #255	; 0xff
 800ec94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	3328      	adds	r3, #40	; 0x28
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7ff fce4 	bl	800e66c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	4618      	mov	r0, r3
 800eca8:	3708      	adds	r7, #8
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	08029330 	.word	0x08029330

0800ecb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	683a      	ldr	r2, [r7, #0]
 800ecc2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	2326      	movs	r3, #38	; 0x26
 800ece0:	461a      	mov	r2, r3
 800ece2:	2100      	movs	r1, #0
 800ece4:	f017 fda1 	bl	802682a <memset>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7ff ff8a 	bl	800ec04 <_ZN8touchgfx6WidgetC1Ev>
 800ecf0:	4a09      	ldr	r2, [pc, #36]	; (800ed18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	601a      	str	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	683a      	ldr	r2, [r7, #0]
 800ecfa:	8812      	ldrh	r2, [r2, #0]
 800ecfc:	84da      	strh	r2, [r3, #38]	; 0x26
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	22ff      	movs	r2, #255	; 0xff
 800ed02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800ed06:	6839      	ldr	r1, [r7, #0]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f005 f8ec 	bl	8013ee6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4618      	mov	r0, r3
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	08029504 	.word	0x08029504

0800ed1c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4618      	mov	r0, r3
 800ed28:	2326      	movs	r3, #38	; 0x26
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	f017 fd7c 	bl	802682a <memset>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7ff ff65 	bl	800ec04 <_ZN8touchgfx6WidgetC1Ev>
 800ed3a:	4a0a      	ldr	r2, [pc, #40]	; (800ed64 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	601a      	str	r2, [r3, #0]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	629a      	str	r2, [r3, #40]	; 0x28
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2101      	movs	r1, #1
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff fe36 	bl	800e9c4 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	080291bc 	.word	0x080291bc

0800ed68 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	4a05      	ldr	r2, [pc, #20]	; (800ed88 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	601a      	str	r2, [r3, #0]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7ff ff55 	bl	800ec28 <_ZN8touchgfx6WidgetD1Ev>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	4618      	mov	r0, r3
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	080291bc 	.word	0x080291bc

0800ed8c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7ff ffe7 	bl	800ed68 <_ZN8touchgfx14AbstractButtonD1Ev>
 800ed9a:	2130      	movs	r1, #48	; 0x30
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f017 fb10 	bl	80263c2 <_ZdlPvj>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4618      	mov	r0, r3
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7ff ffb0 	bl	800ed1c <_ZN8touchgfx14AbstractButtonC1Ev>
 800edbc:	4a0c      	ldr	r2, [pc, #48]	; (800edf0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	601a      	str	r2, [r3, #0]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	332e      	adds	r3, #46	; 0x2e
 800edc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800edca:	4618      	mov	r0, r3
 800edcc:	f7ff fc94 	bl	800e6f8 <_ZN8touchgfx6BitmapC1Et>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	3330      	adds	r3, #48	; 0x30
 800edd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff fc8d 	bl	800e6f8 <_ZN8touchgfx6BitmapC1Et>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	22ff      	movs	r2, #255	; 0xff
 800ede2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4618      	mov	r0, r3
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	08029398 	.word	0x08029398

0800edf4 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	60b9      	str	r1, [r7, #8]
 800edfe:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	8812      	ldrh	r2, [r2, #0]
 800ee06:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	68b9      	ldr	r1, [r7, #8]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f004 fec6 	bl	8013ba0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800ee14:	bf00      	nop
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	4a05      	ldr	r2, [pc, #20]	; (800ee3c <_ZN8touchgfx3BoxD1Ev+0x20>)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	601a      	str	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff fefb 	bl	800ec28 <_ZN8touchgfx6WidgetD1Ev>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4618      	mov	r0, r3
 800ee36:	3708      	adds	r7, #8
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	08029330 	.word	0x08029330

0800ee40 <_ZN8touchgfx3BoxD0Ev>:
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7ff ffe7 	bl	800ee1c <_ZN8touchgfx3BoxD1Ev>
 800ee4e:	212c      	movs	r1, #44	; 0x2c
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f017 fab6 	bl	80263c2 <_ZdlPvj>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7ff fefe 	bl	800ec6c <_ZN8touchgfx3BoxC1Ev>
 800ee70:	4a08      	ldr	r2, [pc, #32]	; (800ee94 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	601a      	str	r2, [r3, #0]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	332c      	adds	r3, #44	; 0x2c
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7ff fbf5 	bl	800e66c <_ZN8touchgfx9colortypeC1Em>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3708      	adds	r7, #8
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	0802949c 	.word	0x0802949c

0800ee98 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	683a      	ldr	r2, [r7, #0]
 800eea6:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800eea8:	bf00      	nop
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	460b      	mov	r3, r1
 800eebe:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	887a      	ldrh	r2, [r7, #2]
 800eec4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800eec6:	bf00      	nop
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr
	...

0800eed4 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	460b      	mov	r3, r1
 800eede:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800eee0:	4a06      	ldr	r2, [pc, #24]	; (800eefc <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	601a      	str	r2, [r3, #0]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	887a      	ldrh	r2, [r7, #2]
 800eeea:	809a      	strh	r2, [r3, #4]
    }
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4618      	mov	r0, r3
 800eef0:	370c      	adds	r7, #12
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	08028700 	.word	0x08028700

0800ef00 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	2326      	movs	r3, #38	; 0x26
 800ef0e:	461a      	mov	r2, r3
 800ef10:	2100      	movs	r1, #0
 800ef12:	f017 fc8a 	bl	802682a <memset>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7ff fe73 	bl	800ec04 <_ZN8touchgfx6WidgetC1Ev>
 800ef1e:	4a16      	ldr	r2, [pc, #88]	; (800ef78 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	3328      	adds	r3, #40	; 0x28
 800ef28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7ff ffd1 	bl	800eed4 <_ZN8touchgfx9TypedTextC1Et>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	3330      	adds	r3, #48	; 0x30
 800ef36:	2100      	movs	r1, #0
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7ff fb97 	bl	800e66c <_ZN8touchgfx9colortypeC1Em>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	869a      	strh	r2, [r3, #52]	; 0x34
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	22ff      	movs	r2, #255	; 0xff
 800ef48:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	333c      	adds	r3, #60	; 0x3c
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f000 f8f0 	bl	800f14e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4618      	mov	r0, r3
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	080292a0 	.word	0x080292a0

0800ef7c <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800ef7c:	b590      	push	{r4, r7, lr}
 800ef7e:	b087      	sub	sp, #28
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6178      	str	r0, [r7, #20]
 800ef84:	460b      	mov	r3, r1
 800ef86:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ef8e:	4611      	mov	r1, r2
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7ff fca6 	bl	800e8e2 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	3384      	adds	r3, #132	; 0x84
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	697c      	ldr	r4, [r7, #20]
 800efa0:	463a      	mov	r2, r7
 800efa2:	6979      	ldr	r1, [r7, #20]
 800efa4:	4610      	mov	r0, r2
 800efa6:	4798      	blx	r3
 800efa8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800efac:	463a      	mov	r2, r7
 800efae:	ca07      	ldmia	r2, {r0, r1, r2}
 800efb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800efb4:	bf00      	nop
 800efb6:	371c      	adds	r7, #28
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd90      	pop	{r4, r7, pc}

0800efbc <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800efbc:	b590      	push	{r4, r7, lr}
 800efbe:	b087      	sub	sp, #28
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6178      	str	r0, [r7, #20]
 800efc4:	460b      	mov	r3, r1
 800efc6:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800efce:	4611      	mov	r1, r2
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff fc95 	bl	800e900 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	3384      	adds	r3, #132	; 0x84
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	697c      	ldr	r4, [r7, #20]
 800efe0:	463a      	mov	r2, r7
 800efe2:	6979      	ldr	r1, [r7, #20]
 800efe4:	4610      	mov	r0, r2
 800efe6:	4798      	blx	r3
 800efe8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800efec:	463a      	mov	r2, r7
 800efee:	ca07      	ldmia	r2, {r0, r1, r2}
 800eff0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800eff4:	bf00      	nop
 800eff6:	371c      	adds	r7, #28
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd90      	pop	{r4, r7, pc}

0800effc <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7ff fb3f 	bl	800e68a <_ZN8touchgfx4RectC1Ev>
    }
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	460b      	mov	r3, r1
 800f01e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	78fa      	ldrb	r2, [r7, #3]
 800f024:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800f034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	460b      	mov	r3, r1
 800f03e:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800f040:	687e      	ldr	r6, [r7, #4]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	3334      	adds	r3, #52	; 0x34
 800f048:	681c      	ldr	r4, [r3, #0]
 800f04a:	887d      	ldrh	r5, [r7, #2]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f867 	bl	800f120 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800f052:	4603      	mov	r3, r0
 800f054:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f056:	4b1c      	ldr	r3, [pc, #112]	; (800f0c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d105      	bne.n	800f06a <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800f05e:	4b1b      	ldr	r3, [pc, #108]	; (800f0cc <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800f060:	4a1b      	ldr	r2, [pc, #108]	; (800f0d0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800f062:	216c      	movs	r1, #108	; 0x6c
 800f064:	481b      	ldr	r0, [pc, #108]	; (800f0d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f066:	f017 f9db 	bl	8026420 <__assert_func>
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	889a      	ldrh	r2, [r3, #4]
 800f072:	4b19      	ldr	r3, [pc, #100]	; (800f0d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	429a      	cmp	r2, r3
 800f078:	bf34      	ite	cc
 800f07a:	2301      	movcc	r3, #1
 800f07c:	2300      	movcs	r3, #0
 800f07e:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f080:	2b00      	cmp	r3, #0
 800f082:	d105      	bne.n	800f090 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800f084:	4b15      	ldr	r3, [pc, #84]	; (800f0dc <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800f086:	4a12      	ldr	r2, [pc, #72]	; (800f0d0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800f088:	216d      	movs	r1, #109	; 0x6d
 800f08a:	4812      	ldr	r0, [pc, #72]	; (800f0d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f08c:	f017 f9c8 	bl	8026420 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f090:	4b13      	ldr	r3, [pc, #76]	; (800f0e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800f092:	681a      	ldr	r2, [r3, #0]
 800f094:	4b0c      	ldr	r3, [pc, #48]	; (800f0c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800f096:	6819      	ldr	r1, [r3, #0]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	889b      	ldrh	r3, [r3, #4]
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	440b      	add	r3, r1
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	4413      	add	r3, r2
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	3230      	adds	r2, #48	; 0x30
 800f0ac:	6812      	ldr	r2, [r2, #0]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	4790      	blx	r2
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	1aeb      	subs	r3, r5, r3
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	b21b      	sxth	r3, r3
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4630      	mov	r0, r6
 800f0be:	47a0      	blx	r4
    }
 800f0c0:	bf00      	nop
 800f0c2:	3714      	adds	r7, #20
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0c8:	20025880 	.word	0x20025880
 800f0cc:	080277b8 	.word	0x080277b8
 800f0d0:	080277fc 	.word	0x080277fc
 800f0d4:	08027838 	.word	0x08027838
 800f0d8:	20025884 	.word	0x20025884
 800f0dc:	0802787c 	.word	0x0802787c
 800f0e0:	20025888 	.word	0x20025888

0800f0e4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	807b      	strh	r3, [r7, #2]
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	3330      	adds	r3, #48	; 0x30
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f102:	4610      	mov	r0, r2
 800f104:	4798      	blx	r3
        setBaselineY(baselineY);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3364      	adds	r3, #100	; 0x64
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f112:	4611      	mov	r1, r2
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	4798      	blx	r3
    }
 800f118:	bf00      	nop
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800f120:	b480      	push	{r7}
 800f122:	b083      	sub	sp, #12
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	3328      	adds	r3, #40	; 0x28
    }
 800f12c:	4618      	mov	r0, r3
 800f12e:	370c      	adds	r7, #12
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr

0800f138 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f140:	2300      	movs	r3, #0
    }
 800f142:	4618      	mov	r0, r3
 800f144:	370c      	adds	r7, #12
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr

0800f14e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800f14e:	b580      	push	{r7, lr}
 800f150:	b084      	sub	sp, #16
 800f152:	af02      	add	r7, sp, #8
 800f154:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f04f 33ff 	mov.w	r3, #4294967295
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	f04f 33ff 	mov.w	r3, #4294967295
 800f162:	2200      	movs	r2, #0
 800f164:	2100      	movs	r1, #0
 800f166:	f7ff faa7 	bl	800e6b8 <_ZN8touchgfx4RectC1Essss>
              text(0)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	609a      	str	r2, [r3, #8]
        {
        }
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	4618      	mov	r0, r3
 800f174:	3708      	adds	r7, #8
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
	...

0800f17c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	4a08      	ldr	r2, [pc, #32]	; (800f1a8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	601a      	str	r2, [r3, #0]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	3328      	adds	r3, #40	; 0x28
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fe fb36 	bl	800d800 <_ZN8touchgfx9TypedTextD1Ev>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4618      	mov	r0, r3
 800f198:	f7ff fd46 	bl	800ec28 <_ZN8touchgfx6WidgetD1Ev>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	080292a0 	.word	0x080292a0

0800f1ac <_ZN8touchgfx8TextAreaD0Ev>:
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7ff ffe1 	bl	800f17c <_ZN8touchgfx8TextAreaD1Ev>
 800f1ba:	2148      	movs	r1, #72	; 0x48
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f017 f900 	bl	80263c2 <_ZdlPvj>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
        : TextArea()
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7ff fe92 	bl	800ef00 <_ZN8touchgfx8TextAreaC1Ev>
 800f1dc:	4a03      	ldr	r2, [pc, #12]	; (800f1ec <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	601a      	str	r2, [r3, #0]
    {
    }
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	0802940c 	.word	0x0802940c

0800f1f0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7ff fadc 	bl	800e7b8 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800f200:	bf00      	nop
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f7ff ff9b 	bl	800f14e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	3708      	adds	r7, #8
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	4a05      	ldr	r2, [pc, #20]	; (800f240 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff ffa3 	bl	800f17c <_ZN8touchgfx8TextAreaD1Ev>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	0802940c 	.word	0x0802940c

0800f244 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7ff ffe7 	bl	800f220 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f252:	2148      	movs	r1, #72	; 0x48
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f017 f8b4 	bl	80263c2 <_ZdlPvj>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	4618      	mov	r0, r3
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4618      	mov	r0, r3
 800f270:	f7ff ffac 	bl	800f1cc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800f274:	4a05      	ldr	r2, [pc, #20]	; (800f28c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4618      	mov	r0, r3
 800f284:	3708      	adds	r7, #8
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	bf00      	nop
 800f28c:	080289b8 	.word	0x080289b8

0800f290 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	649a      	str	r2, [r3, #72]	; 0x48
    }
 800f2a0:	bf00      	nop
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7ff ffdd 	bl	800f290 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800f2d6:	bf00      	nop
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
	...

0800f2e0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	4a05      	ldr	r2, [pc, #20]	; (800f300 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff fbfd 	bl	800eaf0 <_ZN8touchgfx6ScreenD1Ev>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	08028984 	.word	0x08028984

0800f304 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7ff ffe7 	bl	800f2e0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800f312:	2140      	movs	r1, #64	; 0x40
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f017 f854 	bl	80263c2 <_ZdlPvj>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4618      	mov	r0, r3
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	4a05      	ldr	r2, [pc, #20]	; (800f344 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	601a      	str	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4618      	mov	r0, r3
 800f336:	f7ff fd17 	bl	800ed68 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	4618      	mov	r0, r3
 800f33e:	3708      	adds	r7, #8
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	08029398 	.word	0x08029398

0800f348 <_ZN8touchgfx6ButtonD0Ev>:
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7ff ffe7 	bl	800f324 <_ZN8touchgfx6ButtonD1Ev>
 800f356:	2134      	movs	r1, #52	; 0x34
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f017 f832 	bl	80263c2 <_ZdlPvj>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4618      	mov	r0, r3
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4618      	mov	r0, r3
 800f374:	f7ff fd1a 	bl	800edac <_ZN8touchgfx6ButtonC1Ev>
 800f378:	4a07      	ldr	r2, [pc, #28]	; (800f398 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3334      	adds	r3, #52	; 0x34
 800f382:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff f9b6 	bl	800e6f8 <_ZN8touchgfx6BitmapC1Et>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4618      	mov	r0, r3
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	0802922c 	.word	0x0802922c

0800f39c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800f39c:	b590      	push	{r4, r7, lr}
 800f39e:	b09d      	sub	sp, #116	; 0x74
 800f3a0:	af02      	add	r7, sp, #8
 800f3a2:	6178      	str	r0, [r7, #20]
    frameCountInteraction2Interval(0)
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f000 fa56 	bl	800f858 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800f3ac:	4abb      	ldr	r2, [pc, #748]	; (800f69c <_ZN15Screen1ViewBaseC1Ev+0x300>)
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	601a      	str	r2, [r3, #0]
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	3340      	adds	r3, #64	; 0x40
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7ff fc58 	bl	800ec6c <_ZN8touchgfx3BoxC1Ev>
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f3c2:	f107 031c 	add.w	r3, r7, #28
 800f3c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff f994 	bl	800e6f8 <_ZN8touchgfx6BitmapC1Et>
 800f3d0:	f107 031c 	add.w	r3, r7, #28
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f7ff fc7a 	bl	800ecd0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	3398      	adds	r3, #152	; 0x98
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff ffc1 	bl	800f368 <_ZN8touchgfx12ToggleButtonC1Ev>
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	33d0      	adds	r3, #208	; 0xd0
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7ff fd38 	bl	800ee60 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 fa66 	bl	800f8c8 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev>
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
{
    __background.setPosition(0, 0, 320, 240);
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f40a:	23f0      	movs	r3, #240	; 0xf0
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f412:	2200      	movs	r2, #0
 800f414:	2100      	movs	r1, #0
 800f416:	f7ff f9ed 	bl	800e7f4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f420:	2300      	movs	r3, #0
 800f422:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f426:	2300      	movs	r3, #0
 800f428:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800f42c:	2300      	movs	r3, #0
 800f42e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f432:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800f436:	041b      	lsls	r3, r3, #16
 800f438:	461a      	mov	r2, r3
 800f43a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800f43e:	021b      	lsls	r3, r3, #8
 800f440:	431a      	orrs	r2, r3
 800f442:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800f446:	4313      	orrs	r3, r2
 800f448:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f44c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f450:	4611      	mov	r1, r2
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff f90a 	bl	800e66c <_ZN8touchgfx9colortypeC1Em>
 800f458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f45a:	4619      	mov	r1, r3
 800f45c:	4620      	mov	r0, r4
 800f45e:	f7ff fc29 	bl	800ecb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	3340      	adds	r3, #64	; 0x40
 800f468:	4619      	mov	r1, r3
 800f46a:	4610      	mov	r0, r2
 800f46c:	f7ff fb98 	bl	800eba0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	336c      	adds	r3, #108	; 0x6c
 800f474:	2200      	movs	r2, #0
 800f476:	2100      	movs	r1, #0
 800f478:	4618      	mov	r0, r3
 800f47a:	f7ff fa14 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f484:	f107 0320 	add.w	r3, r7, #32
 800f488:	2100      	movs	r1, #0
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7ff f934 	bl	800e6f8 <_ZN8touchgfx6BitmapC1Et>
 800f490:	f107 0320 	add.w	r3, r7, #32
 800f494:	4619      	mov	r1, r3
 800f496:	4620      	mov	r0, r4
 800f498:	f004 fd25 	bl	8013ee6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	336c      	adds	r3, #108	; 0x6c
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	f7ff fb7b 	bl	800eba0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    toggleButton1.setXY(91, 156);
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	3398      	adds	r3, #152	; 0x98
 800f4ae:	229c      	movs	r2, #156	; 0x9c
 800f4b0:	215b      	movs	r1, #91	; 0x5b
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7ff f9f7 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_TEXT_OFF_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_TEXT_ON_ACTION_ID));
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800f4be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4c2:	2101      	movs	r1, #1
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7ff f917 	bl	800e6f8 <_ZN8touchgfx6BitmapC1Et>
 800f4ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4ce:	2102      	movs	r1, #2
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff f911 	bl	800e6f8 <_ZN8touchgfx6BitmapC1Et>
 800f4d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f4da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4de:	4619      	mov	r1, r3
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f7ff fc87 	bl	800edf4 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    add(toggleButton1);
 800f4e6:	697a      	ldr	r2, [r7, #20]
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	3398      	adds	r3, #152	; 0x98
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	4610      	mov	r0, r2
 800f4f0:	f7ff fb56 	bl	800eba0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    boxWithBorder1.setPosition(0, 15, 320, 95);
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 800f4fa:	235f      	movs	r3, #95	; 0x5f
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f502:	220f      	movs	r2, #15
 800f504:	2100      	movs	r1, #0
 800f506:	f7ff f975 	bl	800e7f4 <_ZN8touchgfx8Drawable11setPositionEssss>
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 800f510:	23ff      	movs	r3, #255	; 0xff
 800f512:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800f516:	23ff      	movs	r3, #255	; 0xff
 800f518:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800f51c:	23ff      	movs	r3, #255	; 0xff
 800f51e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f522:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800f526:	041b      	lsls	r3, r3, #16
 800f528:	461a      	mov	r2, r3
 800f52a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800f52e:	021b      	lsls	r3, r3, #8
 800f530:	431a      	orrs	r2, r3
 800f532:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f536:	4313      	orrs	r3, r2
 800f538:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f53c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f540:	4611      	mov	r1, r2
 800f542:	4618      	mov	r0, r3
 800f544:	f7ff f892 	bl	800e66c <_ZN8touchgfx9colortypeC1Em>
 800f548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f54a:	4619      	mov	r1, r3
 800f54c:	4620      	mov	r0, r4
 800f54e:	f7ff fbb1 	bl	800ecb4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(107, 104, 104));
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 800f558:	236b      	movs	r3, #107	; 0x6b
 800f55a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800f55e:	2368      	movs	r3, #104	; 0x68
 800f560:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800f564:	2368      	movs	r3, #104	; 0x68
 800f566:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800f56a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f56e:	041b      	lsls	r3, r3, #16
 800f570:	461a      	mov	r2, r3
 800f572:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f576:	021b      	lsls	r3, r3, #8
 800f578:	431a      	orrs	r2, r3
 800f57a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800f57e:	4313      	orrs	r3, r2
 800f580:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f588:	4611      	mov	r1, r2
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7ff f86e 	bl	800e66c <_ZN8touchgfx9colortypeC1Em>
 800f590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f592:	4619      	mov	r1, r3
 800f594:	4620      	mov	r0, r4
 800f596:	f7ff fc7f 	bl	800ee98 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    boxWithBorder1.setBorderSize(1);
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	33d0      	adds	r3, #208	; 0xd0
 800f59e:	2101      	movs	r1, #1
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7ff fc87 	bl	800eeb4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    add(boxWithBorder1);
 800f5a6:	697a      	ldr	r2, [r7, #20]
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	33d0      	adds	r3, #208	; 0xd0
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	4610      	mov	r0, r2
 800f5b0:	f7ff faf6 	bl	800eba0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setPosition(30, 52, 516, 20);
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	f503 7082 	add.w	r0, r3, #260	; 0x104
 800f5ba:	2314      	movs	r3, #20
 800f5bc:	9300      	str	r3, [sp, #0]
 800f5be:	f44f 7301 	mov.w	r3, #516	; 0x204
 800f5c2:	2234      	movs	r2, #52	; 0x34
 800f5c4:	211e      	movs	r1, #30
 800f5c6:	f7ff f915 	bl	800e7f4 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	f503 7482 	add.w	r4, r3, #260	; 0x104
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800f5e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5e6:	041b      	lsls	r3, r3, #16
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800f5ee:	021b      	lsls	r3, r3, #8
 800f5f0:	431a      	orrs	r2, r3
 800f5f2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f5fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f600:	4611      	mov	r1, r2
 800f602:	4618      	mov	r0, r3
 800f604:	f7ff f832 	bl	800e66c <_ZN8touchgfx9colortypeC1Em>
 800f608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f60a:	65bc      	str	r4, [r7, #88]	; 0x58
 800f60c:	61bb      	str	r3, [r7, #24]
        color = newColor;
 800f60e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f610:	69ba      	ldr	r2, [r7, #24]
 800f612:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f614:	bf00      	nop
    textArea1.setLinespacing(0);
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f61c:	663b      	str	r3, [r7, #96]	; 0x60
 800f61e:	2300      	movs	r3, #0
 800f620:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        linespace = space;
 800f624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f626:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800f62a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f62c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	3384      	adds	r3, #132	; 0x84
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800f636:	463a      	mov	r2, r7
 800f638:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f63a:	4610      	mov	r0, r2
 800f63c:	4798      	blx	r3
 800f63e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f642:	463a      	mov	r2, r7
 800f644:	ca07      	ldmia	r2, {r0, r1, r2}
 800f646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f64a:	bf00      	nop
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_3WQK).getText());
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 800f652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f656:	2100      	movs	r1, #0
 800f658:	4618      	mov	r0, r3
 800f65a:	f7ff fc3b 	bl	800eed4 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f65e:	4b10      	ldr	r3, [pc, #64]	; (800f6a0 <_ZN15Screen1ViewBaseC1Ev+0x304>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d105      	bne.n	800f672 <_ZN15Screen1ViewBaseC1Ev+0x2d6>
 800f666:	4b0f      	ldr	r3, [pc, #60]	; (800f6a4 <_ZN15Screen1ViewBaseC1Ev+0x308>)
 800f668:	4a0f      	ldr	r2, [pc, #60]	; (800f6a8 <_ZN15Screen1ViewBaseC1Ev+0x30c>)
 800f66a:	2160      	movs	r1, #96	; 0x60
 800f66c:	480f      	ldr	r0, [pc, #60]	; (800f6ac <_ZN15Screen1ViewBaseC1Ev+0x310>)
 800f66e:	f016 fed7 	bl	8026420 <__assert_func>
 800f672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f676:	667b      	str	r3, [r7, #100]	; 0x64
        return typedTextId < numberOfTypedTexts;
 800f678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f67a:	889a      	ldrh	r2, [r3, #4]
 800f67c:	4b0c      	ldr	r3, [pc, #48]	; (800f6b0 <_ZN15Screen1ViewBaseC1Ev+0x314>)
 800f67e:	881b      	ldrh	r3, [r3, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	bf34      	ite	cc
 800f684:	2301      	movcc	r3, #1
 800f686:	2300      	movcs	r3, #0
 800f688:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d114      	bne.n	800f6b8 <_ZN15Screen1ViewBaseC1Ev+0x31c>
 800f68e:	4b09      	ldr	r3, [pc, #36]	; (800f6b4 <_ZN15Screen1ViewBaseC1Ev+0x318>)
 800f690:	4a05      	ldr	r2, [pc, #20]	; (800f6a8 <_ZN15Screen1ViewBaseC1Ev+0x30c>)
 800f692:	2161      	movs	r1, #97	; 0x61
 800f694:	4805      	ldr	r0, [pc, #20]	; (800f6ac <_ZN15Screen1ViewBaseC1Ev+0x310>)
 800f696:	f016 fec3 	bl	8026420 <__assert_func>
 800f69a:	bf00      	nop
 800f69c:	080288b8 	.word	0x080288b8
 800f6a0:	20025880 	.word	0x20025880
 800f6a4:	080277b8 	.word	0x080277b8
 800f6a8:	080278bc 	.word	0x080278bc
 800f6ac:	08027838 	.word	0x08027838
 800f6b0:	20025884 	.word	0x20025884
 800f6b4:	0802787c 	.word	0x0802787c
        return texts->getText(typedTextId);
 800f6b8:	4b1e      	ldr	r3, [pc, #120]	; (800f734 <_ZN15Screen1ViewBaseC1Ev+0x398>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800f6be:	4611      	mov	r1, r2
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f000 fcc3 	bl	801004c <_ZNK8touchgfx5Texts7getTextEt>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	bf00      	nop
 800f6ca:	4a1b      	ldr	r2, [pc, #108]	; (800f738 <_ZN15Screen1ViewBaseC1Ev+0x39c>)
 800f6cc:	2135      	movs	r1, #53	; 0x35
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f009 f98c 	bl	80189ec <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f6d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fe f891 	bl	800d800 <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.setWildcard(textArea1Buffer);
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	f7ff fde9 	bl	800f2c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G9G3));
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f503 7482 	add.w	r4, r3, #260	; 0x104
 800f6f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f6fc:	2101      	movs	r1, #1
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7ff fbe8 	bl	800eed4 <_ZN8touchgfx9TypedTextC1Et>
 800f704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f708:	4619      	mov	r1, r3
 800f70a:	4620      	mov	r0, r4
 800f70c:	f004 f9f6 	bl	8013afc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f710:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe f873 	bl	800d800 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f722:	4619      	mov	r1, r3
 800f724:	4610      	mov	r0, r2
 800f726:	f7ff fa3b 	bl	800eba0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	4618      	mov	r0, r3
 800f72e:	376c      	adds	r7, #108	; 0x6c
 800f730:	46bd      	mov	sp, r7
 800f732:	bd90      	pop	{r4, r7, pc}
 800f734:	2002588c 	.word	0x2002588c
 800f738:	080278f4 	.word	0x080278f4

0800f73c <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	4a12      	ldr	r2, [pc, #72]	; (800f790 <_ZN15Screen1ViewBaseD1Ev+0x54>)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f750:	4618      	mov	r0, r3
 800f752:	f000 fa01 	bl	800fb58 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	33d0      	adds	r3, #208	; 0xd0
 800f75a:	4618      	mov	r0, r3
 800f75c:	f000 fa84 	bl	800fc68 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	3398      	adds	r3, #152	; 0x98
 800f764:	4618      	mov	r0, r3
 800f766:	f000 fa5d 	bl	800fc24 <_ZN8touchgfx12ToggleButtonD1Ev>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	336c      	adds	r3, #108	; 0x6c
 800f76e:	4618      	mov	r0, r3
 800f770:	f000 fa36 	bl	800fbe0 <_ZN8touchgfx5ImageD1Ev>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	3340      	adds	r3, #64	; 0x40
 800f778:	4618      	mov	r0, r3
 800f77a:	f7ff fb4f 	bl	800ee1c <_ZN8touchgfx3BoxD1Ev>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4618      	mov	r0, r3
 800f782:	f7ff fdad 	bl	800f2e0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	080288b8 	.word	0x080288b8

0800f794 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
}
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f7ff ffcd 	bl	800f73c <_ZN15Screen1ViewBaseD1Ev>
 800f7a2:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f016 fe0b 	bl	80263c2 <_ZdlPvj>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800f7b6:	b480      	push	{r7}
 800f7b8:	b083      	sub	sp, #12
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]

}
 800f7be:	bf00      	nop
 800f7c0:	370c      	adds	r7, #12
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
	...

0800f7cc <_ZN15Screen1ViewBase15handleTickEventEv>:

void Screen1ViewBase::handleTickEvent()
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af02      	add	r7, sp, #8
 800f7d2:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When every N tick move textArea1
    //Move textArea1 to x:-550, y:52 with QuadOut easing in 10000 ms (600 Ticks)
    textArea1.clearMoveAnimationEndedAction();
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f000 f8b0 	bl	800f940 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>
    textArea1.startMoveAnimation(-550, 52, 600, touchgfx::EasingEquations::quadEaseOut, touchgfx::EasingEquations::quadEaseOut);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f503 7082 	add.w	r0, r3, #260	; 0x104
 800f7e6:	4b19      	ldr	r3, [pc, #100]	; (800f84c <_ZN15Screen1ViewBase15handleTickEventEv+0x80>)
 800f7e8:	9301      	str	r3, [sp, #4]
 800f7ea:	4b18      	ldr	r3, [pc, #96]	; (800f84c <_ZN15Screen1ViewBase15handleTickEventEv+0x80>)
 800f7ec:	9300      	str	r3, [sp, #0]
 800f7ee:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f7f2:	2234      	movs	r2, #52	; 0x34
 800f7f4:	4916      	ldr	r1, [pc, #88]	; (800f850 <_ZN15Screen1ViewBase15handleTickEventEv+0x84>)
 800f7f6:	f000 f8b0 	bl	800f95a <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>

    frameCountInteraction2Interval++;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    if(frameCountInteraction2Interval == TICK_INTERACTION2_INTERVAL)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800f80e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800f812:	d116      	bne.n	800f842 <_ZN15Screen1ViewBase15handleTickEventEv+0x76>
    {
        //Interaction2
        //When every N tick move textArea1
        //Move textArea1 to x:270, y:52 with LinearOut easing in 1 ms (1 Ticks)
        textArea1.clearMoveAnimationEndedAction();
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f81a:	4618      	mov	r0, r3
 800f81c:	f000 f890 	bl	800f940 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>
        textArea1.startMoveAnimation(270, 52, 1, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f503 7082 	add.w	r0, r3, #260	; 0x104
 800f826:	4b0b      	ldr	r3, [pc, #44]	; (800f854 <_ZN15Screen1ViewBase15handleTickEventEv+0x88>)
 800f828:	9301      	str	r3, [sp, #4]
 800f82a:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <_ZN15Screen1ViewBase15handleTickEventEv+0x88>)
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	2301      	movs	r3, #1
 800f830:	2234      	movs	r2, #52	; 0x34
 800f832:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800f836:	f000 f890 	bl	800f95a <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>
        frameCountInteraction2Interval = 0;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2200      	movs	r2, #0
 800f83e:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    }
}
 800f842:	bf00      	nop
 800f844:	3708      	adds	r7, #8
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	080173e7 	.word	0x080173e7
 800f850:	fffffdda 	.word	0xfffffdda
 800f854:	080173e3 	.word	0x080173e3

0800f858 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4618      	mov	r0, r3
 800f864:	f007 fbde 	bl	8017024 <_ZN8touchgfx6ScreenC1Ev>
 800f868:	4a05      	ldr	r2, [pc, #20]	; (800f880 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	601a      	str	r2, [r3, #0]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2200      	movs	r2, #0
 800f872:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4618      	mov	r0, r3
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	08028984 	.word	0x08028984

0800f884 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	4a05      	ldr	r2, [pc, #20]	; (800f8a4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	601a      	str	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4618      	mov	r0, r3
 800f896:	f7ff fcc3 	bl	800f220 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4618      	mov	r0, r3
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	080289b8 	.word	0x080289b8

0800f8a8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7ff ffe7 	bl	800f884 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f8b6:	214c      	movs	r1, #76	; 0x4c
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f016 fd82 	bl	80263c2 <_ZdlPvj>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
          moveAnimationStartY(0),
          moveAnimationEndX(0),
          moveAnimationEndY(0),
          moveAnimationXEquation(),
          moveAnimationYEquation(),
          moveAnimationEndedCallback(0)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7ff fcc6 	bl	800f264 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f8d8:	4a18      	ldr	r2, [pc, #96]	; (800f93c <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev+0x74>)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	601a      	str	r2, [r3, #0]
          moveAnimationRunning(false),
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          moveAnimationCounter(0),
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          moveAnimationDelay(0),
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
          moveAnimationDuration(0),
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
          moveAnimationStartX(0),
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
          moveAnimationStartY(0),
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
          moveAnimationEndX(0),
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          moveAnimationEndY(0),
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2200      	movs	r2, #0
 800f91a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
          moveAnimationXEquation(),
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	65da      	str	r2, [r3, #92]	; 0x5c
          moveAnimationYEquation(),
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	661a      	str	r2, [r3, #96]	; 0x60
          moveAnimationEndedCallback(0)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2200      	movs	r2, #0
 800f92e:	665a      	str	r2, [r3, #100]	; 0x64
    {
    }
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4618      	mov	r0, r3
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	080288ec 	.word	0x080288ec

0800f940 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>:
     * The effect is that any action set using setMoveAnimationEndedAction() will not be
     * executed.
     *
     * @see setMoveAnimationEndedAction
     */
    void clearMoveAnimationEndedAction()
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
    {
        moveAnimationEndedCallback = 0;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	665a      	str	r2, [r3, #100]	; 0x64
    }
 800f94e:	bf00      	nop
 800f950:	370c      	adds	r7, #12
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>:
     *                              EasingEquations::linearEaseNone.
     * @param  yProgressionEquation (Optional) The equation that describes the development of the
     *                              Y position during the animation. Default is
     *                              EasingEquations::linearEaseNone.
     */
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b084      	sub	sp, #16
 800f95e:	af00      	add	r7, sp, #0
 800f960:	60f8      	str	r0, [r7, #12]
 800f962:	4608      	mov	r0, r1
 800f964:	4611      	mov	r1, r2
 800f966:	461a      	mov	r2, r3
 800f968:	4603      	mov	r3, r0
 800f96a:	817b      	strh	r3, [r7, #10]
 800f96c:	460b      	mov	r3, r1
 800f96e:	813b      	strh	r3, [r7, #8]
 800f970:	4613      	mov	r3, r2
 800f972:	80fb      	strh	r3, [r7, #6]
    {
        if (!moveAnimationRunning)
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f97a:	f083 0301 	eor.w	r3, r3, #1
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	d007      	beq.n	800f994 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_+0x3a>
        {
            Application::getInstance()->registerTimerWidget(this);
 800f984:	f005 ffee 	bl	8015964 <_ZN8touchgfx11Application11getInstanceEv>
 800f988:	4602      	mov	r2, r0
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	4619      	mov	r1, r3
 800f98e:	4610      	mov	r0, r2
 800f990:	f7ff f88f 	bl	800eab2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        }

        moveAnimationCounter = 0;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2200      	movs	r2, #0
 800f998:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        moveAnimationStartX = T::getX();
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fe ff49 	bl	800e836 <_ZNK8touchgfx8Drawable4getXEv>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        moveAnimationStartY = T::getY();
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7fe ff4d 	bl	800e850 <_ZNK8touchgfx8Drawable4getYEv>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        moveAnimationEndX = endX;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	897a      	ldrh	r2, [r7, #10]
 800f9c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
        moveAnimationEndY = endY;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	893a      	ldrh	r2, [r7, #8]
 800f9cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        moveAnimationDuration = duration;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	88fa      	ldrh	r2, [r7, #6]
 800f9d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        moveAnimationXEquation = xProgressionEquation;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	69ba      	ldr	r2, [r7, #24]
 800f9dc:	65da      	str	r2, [r3, #92]	; 0x5c
        moveAnimationYEquation = yProgressionEquation;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	69fa      	ldr	r2, [r7, #28]
 800f9e2:	661a      	str	r2, [r3, #96]	; 0x60

        moveAnimationRunning = true;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d107      	bne.n	800fa06 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_+0xac>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d102      	bne.n	800fa06 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_+0xac>
        {
            nextMoveAnimationStep(); // Set end position and shut down
 800fa00:	68f8      	ldr	r0, [r7, #12]
 800fa02:	f000 f804 	bl	800fa0e <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv>
        }
    }
 800fa06:	bf00      	nop
 800fa08:	3710      	adds	r7, #16
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv>:
        nextMoveAnimationStep();
    }

protected:
    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 800fa0e:	b590      	push	{r4, r7, lr}
 800fa10:	b085      	sub	sp, #20
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f000 8097 	beq.w	800fb50 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x142>
        {
            moveAnimationCounter++;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fa28:	3301      	adds	r3, #1
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
            if (moveAnimationCounter >= moveAnimationDelay)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	f0c0 8086 	bcc.w	800fb50 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x142>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	60fb      	str	r3, [r7, #12]

                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	b298      	uxth	r0, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	1ad3      	subs	r3, r2, r3
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	b21a      	sxth	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fa7a:	2100      	movs	r1, #0
 800fa7c:	47a0      	blx	r4
 800fa7e:	4603      	mov	r3, r0
 800fa80:	817b      	strh	r3, [r7, #10]
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	b298      	uxth	r0, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	1ad3      	subs	r3, r2, r3
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	b21a      	sxth	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800faa6:	2100      	movs	r1, #0
 800faa8:	47a0      	blx	r4
 800faaa:	4603      	mov	r3, r0
 800faac:	813b      	strh	r3, [r7, #8]

                T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	897b      	ldrh	r3, [r7, #10]
 800faba:	4413      	add	r3, r2
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	b219      	sxth	r1, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800fac6:	b29a      	uxth	r2, r3
 800fac8:	893b      	ldrh	r3, [r7, #8]
 800faca:	4413      	add	r3, r2
 800facc:	b29b      	uxth	r3, r3
 800face:	b21b      	sxth	r3, r3
 800fad0:	461a      	mov	r2, r3
 800fad2:	f7fe ffa1 	bl	800ea18 <_ZN8touchgfx8Drawable6moveToEss>

                if (moveAnimationCounter >= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fadc:	461a      	mov	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fae4:	4619      	mov	r1, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800faec:	440b      	add	r3, r1
 800faee:	429a      	cmp	r2, r3
 800faf0:	d32e      	bcc.n	800fb50 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x142>
                {
                    // End of animation
                    moveAnimationRunning = false;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                    moveAnimationCounter = 0;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                    Application::getInstance()->unregisterTimerWidget(this);
 800fb02:	f005 ff2f 	bl	8015964 <_ZN8touchgfx11Application11getInstanceEv>
 800fb06:	4602      	mov	r2, r0
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	4610      	mov	r0, r2
 800fb0e:	f7fe ffdf 	bl	800ead0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>

                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00d      	beq.n	800fb36 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x128>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	330c      	adds	r3, #12
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4610      	mov	r0, r2
 800fb2a:	4798      	blx	r3
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d001      	beq.n	800fb36 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x128>
 800fb32:	2301      	movs	r3, #1
 800fb34:	e000      	b.n	800fb38 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x12a>
 800fb36:	2300      	movs	r3, #0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d009      	beq.n	800fb50 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x142>
                    {
                        moveAnimationEndedCallback->execute(*this);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	3308      	adds	r3, #8
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6879      	ldr	r1, [r7, #4]
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	4798      	blx	r3
                    }
                }
            }
        }
    }
 800fb50:	bf00      	nop
 800fb52:	3714      	adds	r7, #20
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd90      	pop	{r4, r7, pc}

0800fb58 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>:
class MoveAnimator : public T
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	4a05      	ldr	r2, [pc, #20]	; (800fb78 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev+0x20>)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	601a      	str	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff fe8b 	bl	800f884 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	4618      	mov	r0, r3
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	080288ec 	.word	0x080288ec

0800fb7c <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED0Ev>:
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7ff ffe7 	bl	800fb58 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>
 800fb8a:	2168      	movs	r1, #104	; 0x68
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f016 fc18 	bl	80263c2 <_ZdlPvj>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	4618      	mov	r0, r3
 800fb96:	3708      	adds	r7, #8
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	4a05      	ldr	r2, [pc, #20]	; (800fbbc <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	601a      	str	r2, [r3, #0]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fe fde3 	bl	800e778 <_ZN8touchgfx8DrawableD1Ev>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	08028fd4 	.word	0x08028fd4

0800fbc0 <_ZN8touchgfx9ContainerD0Ev>:
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f7ff ffe7 	bl	800fb9c <_ZN8touchgfx9ContainerD1Ev>
 800fbce:	212c      	movs	r1, #44	; 0x2c
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f016 fbf6 	bl	80263c2 <_ZdlPvj>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	4a05      	ldr	r2, [pc, #20]	; (800fc00 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	601a      	str	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff f819 	bl	800ec28 <_ZN8touchgfx6WidgetD1Ev>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	08029504 	.word	0x08029504

0800fc04 <_ZN8touchgfx5ImageD0Ev>:
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7ff ffe7 	bl	800fbe0 <_ZN8touchgfx5ImageD1Ev>
 800fc12:	212c      	movs	r1, #44	; 0x2c
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f016 fbd4 	bl	80263c2 <_ZdlPvj>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	4a05      	ldr	r2, [pc, #20]	; (800fc44 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	601a      	str	r2, [r3, #0]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7ff fb75 	bl	800f324 <_ZN8touchgfx6ButtonD1Ev>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	0802922c 	.word	0x0802922c

0800fc48 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7ff ffe7 	bl	800fc24 <_ZN8touchgfx12ToggleButtonD1Ev>
 800fc56:	2138      	movs	r1, #56	; 0x38
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f016 fbb2 	bl	80263c2 <_ZdlPvj>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4618      	mov	r0, r3
 800fc62:	3708      	adds	r7, #8
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	4a05      	ldr	r2, [pc, #20]	; (800fc88 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	601a      	str	r2, [r3, #0]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff f8cf 	bl	800ee1c <_ZN8touchgfx3BoxD1Ev>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4618      	mov	r0, r3
 800fc82:	3708      	adds	r7, #8
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	0802949c 	.word	0x0802949c

0800fc8c <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f7ff ffe7 	bl	800fc68 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800fc9a:	2134      	movs	r1, #52	; 0x34
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f016 fb90 	bl	80263c2 <_ZdlPvj>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	4618      	mov	r0, r3
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe fe7a 	bl	800e9b0 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff fea6 	bl	800fa0e <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv>
    }
 800fcc2:	bf00      	nop
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 800fcca:	b480      	push	{r7}
 800fccc:	b083      	sub	sp, #12
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	887a      	ldrh	r2, [r7, #2]
 800fcda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    }
 800fcde:	bf00      	nop
 800fce0:	370c      	adds	r7, #12
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr

0800fcea <_ZNK8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800fcea:	b480      	push	{r7}
 800fcec:	b083      	sub	sp, #12
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    }
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800fd04:	b480      	push	{r7}
 800fd06:	af00      	add	r7, sp, #0
    return bitmap_database;
 800fd08:	4b02      	ldr	r3, [pc, #8]	; (800fd14 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr
 800fd14:	08028aa8 	.word	0x08028aa8

0800fd18 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800fd18:	b480      	push	{r7}
 800fd1a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800fd1c:	2303      	movs	r3, #3
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	460b      	mov	r3, r1
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800fd36:	2300      	movs	r3, #0
    }
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3714      	adds	r7, #20
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800fd4c:	2300      	movs	r3, #0
    }
 800fd4e:	4618      	mov	r0, r3
 800fd50:	370c      	adds	r7, #12
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr

0800fd5a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800fd5a:	b480      	push	{r7}
 800fd5c:	b083      	sub	sp, #12
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800fd62:	2300      	movs	r3, #0
    }
 800fd64:	4618      	mov	r0, r3
 800fd66:	370c      	adds	r7, #12
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800fd70:	b480      	push	{r7}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800fd7e:	4a07      	ldr	r2, [pc, #28]	; (800fd9c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	6013      	str	r3, [r2, #0]
        fonts = f;
 800fd84:	4a06      	ldr	r2, [pc, #24]	; (800fda0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800fd8a:	4a06      	ldr	r2, [pc, #24]	; (800fda4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800fd8c:	88fb      	ldrh	r3, [r7, #6]
 800fd8e:	8013      	strh	r3, [r2, #0]
    }
 800fd90:	bf00      	nop
 800fd92:	3714      	adds	r7, #20
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr
 800fd9c:	20025880 	.word	0x20025880
 800fda0:	20025888 	.word	0x20025888
 800fda4:	20025884 	.word	0x20025884

0800fda8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800fda8:	b40e      	push	{r1, r2, r3}
 800fdaa:	b580      	push	{r7, lr}
 800fdac:	b085      	sub	sp, #20
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800fdb2:	f107 0320 	add.w	r3, r7, #32
 800fdb6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	69fa      	ldr	r2, [r7, #28]
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f006 fd66 	bl	8016890 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800fdc8:	89fb      	ldrh	r3, [r7, #14]
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3714      	adds	r7, #20
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fdd4:	b003      	add	sp, #12
 800fdd6:	4770      	bx	lr

0800fdd8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800fdd8:	b40c      	push	{r2, r3}
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b084      	sub	sp, #16
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
 800fde2:	460b      	mov	r3, r1
 800fde4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800fde6:	f107 031c 	add.w	r3, r7, #28
 800fdea:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800fdec:	78f9      	ldrb	r1, [r7, #3]
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	69ba      	ldr	r2, [r7, #24]
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f006 fd4c 	bl	8016890 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800fdfc:	89fb      	ldrh	r3, [r7, #14]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe08:	b002      	add	sp, #8
 800fe0a:	4770      	bx	lr

0800fe0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b08a      	sub	sp, #40	; 0x28
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	460b      	mov	r3, r1
 800fe16:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d016      	beq.n	800fe4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	3322      	adds	r3, #34	; 0x22
 800fe24:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe28:	8adb      	ldrh	r3, [r3, #22]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d105      	bne.n	800fe3a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800fe2e:	4b43      	ldr	r3, [pc, #268]	; (800ff3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800fe30:	4a43      	ldr	r2, [pc, #268]	; (800ff40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800fe32:	21c5      	movs	r1, #197	; 0xc5
 800fe34:	4843      	ldr	r0, [pc, #268]	; (800ff44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800fe36:	f016 faf3 	bl	8026420 <__assert_func>
            return buffer[pos];
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3c:	8a9b      	ldrh	r3, [r3, #20]
 800fe3e:	461a      	mov	r2, r3
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d001      	beq.n	800fe4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e000      	b.n	800fe50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d06a      	beq.n	800ff2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f008 f820 	bl	8017e9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	3322      	adds	r3, #34	; 0x22
 800fe5e:	623b      	str	r3, [r7, #32]
 800fe60:	2301      	movs	r3, #1
 800fe62:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	8adb      	ldrh	r3, [r3, #22]
 800fe68:	8bfa      	ldrh	r2, [r7, #30]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d305      	bcc.n	800fe7a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800fe6e:	4b36      	ldr	r3, [pc, #216]	; (800ff48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800fe70:	4a36      	ldr	r2, [pc, #216]	; (800ff4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800fe72:	21cb      	movs	r1, #203	; 0xcb
 800fe74:	4833      	ldr	r0, [pc, #204]	; (800ff44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800fe76:	f016 fad3 	bl	8026420 <__assert_func>
            const uint16_t index = pos + offset;
 800fe7a:	6a3b      	ldr	r3, [r7, #32]
 800fe7c:	8a9a      	ldrh	r2, [r3, #20]
 800fe7e:	8bfb      	ldrh	r3, [r7, #30]
 800fe80:	4413      	add	r3, r2
 800fe82:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800fe84:	8bbb      	ldrh	r3, [r7, #28]
 800fe86:	2b09      	cmp	r3, #9
 800fe88:	d801      	bhi.n	800fe8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800fe8a:	8bbb      	ldrh	r3, [r7, #28]
 800fe8c:	e001      	b.n	800fe92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800fe8e:	8bbb      	ldrh	r3, [r7, #28]
 800fe90:	3b0a      	subs	r3, #10
 800fe92:	6a3a      	ldr	r2, [r7, #32]
 800fe94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe98:	f640 123f 	movw	r2, #2367	; 0x93f
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	bf0c      	ite	eq
 800fea0:	2301      	moveq	r3, #1
 800fea2:	2300      	movne	r3, #0
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d03f      	beq.n	800ff2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	3322      	adds	r3, #34	; 0x22
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	3222      	adds	r2, #34	; 0x22
 800feb2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800feb4:	68ba      	ldr	r2, [r7, #8]
 800feb6:	8ad2      	ldrh	r2, [r2, #22]
 800feb8:	2a00      	cmp	r2, #0
 800feba:	d105      	bne.n	800fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800febc:	4b1f      	ldr	r3, [pc, #124]	; (800ff3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800febe:	4a20      	ldr	r2, [pc, #128]	; (800ff40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800fec0:	21c5      	movs	r1, #197	; 0xc5
 800fec2:	4820      	ldr	r0, [pc, #128]	; (800ff44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800fec4:	f016 faac 	bl	8026420 <__assert_func>
            return buffer[pos];
 800fec8:	68ba      	ldr	r2, [r7, #8]
 800feca:	8a92      	ldrh	r2, [r2, #20]
 800fecc:	4611      	mov	r1, r2
 800fece:	68ba      	ldr	r2, [r7, #8]
 800fed0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800fed4:	613b      	str	r3, [r7, #16]
 800fed6:	4613      	mov	r3, r2
 800fed8:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	8adb      	ldrh	r3, [r3, #22]
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d806      	bhi.n	800fef0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800fee2:	4b1b      	ldr	r3, [pc, #108]	; (800ff50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800fee4:	4a1b      	ldr	r2, [pc, #108]	; (800ff54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800fee6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800feea:	4816      	ldr	r0, [pc, #88]	; (800ff44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800feec:	f016 fa98 	bl	8026420 <__assert_func>
            const uint16_t index = pos + 1;
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	8a9b      	ldrh	r3, [r3, #20]
 800fef4:	3301      	adds	r3, #1
 800fef6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800fef8:	89bb      	ldrh	r3, [r7, #12]
 800fefa:	2b09      	cmp	r3, #9
 800fefc:	d801      	bhi.n	800ff02 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800fefe:	89bb      	ldrh	r3, [r7, #12]
 800ff00:	e000      	b.n	800ff04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800ff02:	2300      	movs	r3, #0
 800ff04:	693a      	ldr	r2, [r7, #16]
 800ff06:	89f9      	ldrh	r1, [r7, #14]
 800ff08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800ff0c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	3322      	adds	r3, #34	; 0x22
 800ff12:	61bb      	str	r3, [r7, #24]
 800ff14:	f640 133f 	movw	r3, #2367	; 0x93f
 800ff18:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	8a9b      	ldrh	r3, [r3, #20]
 800ff1e:	4619      	mov	r1, r3
 800ff20:	69bb      	ldr	r3, [r7, #24]
 800ff22:	8afa      	ldrh	r2, [r7, #22]
 800ff24:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800ff28:	bf00      	nop
        }
    }
    return getNextChar();
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f007 feb8 	bl	8017ca0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ff30:	4603      	mov	r3, r0
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3728      	adds	r7, #40	; 0x28
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	080278f8 	.word	0x080278f8
 800ff40:	08027904 	.word	0x08027904
 800ff44:	080279b0 	.word	0x080279b0
 800ff48:	080279f8 	.word	0x080279f8
 800ff4c:	08027a08 	.word	0x08027a08
 800ff50:	08027adc 	.word	0x08027adc
 800ff54:	08027ae8 	.word	0x08027ae8

0800ff58 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f007 fe64 	bl	8017c2e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800ff66:	bf00      	nop
 800ff68:	3708      	adds	r7, #8
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b088      	sub	sp, #32
 800ff72:	af02      	add	r7, sp, #8
 800ff74:	60f8      	str	r0, [r7, #12]
 800ff76:	1d38      	adds	r0, r7, #4
 800ff78:	e880 0006 	stmia.w	r0, {r1, r2}
 800ff7c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800ff7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff82:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800ff84:	1d39      	adds	r1, r7, #4
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	9301      	str	r3, [sp, #4]
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	6a3b      	ldr	r3, [r7, #32]
 800ff90:	683a      	ldr	r2, [r7, #0]
 800ff92:	68f8      	ldr	r0, [r7, #12]
 800ff94:	f005 f88e 	bl	80150b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800ff98:	bf00      	nop
 800ff9a:	3718      	adds	r7, #24
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800ffa0:	b590      	push	{r4, r7, lr}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800ffae:	88fb      	ldrh	r3, [r7, #6]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d127      	bne.n	8010004 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800ffb4:	88fb      	ldrh	r3, [r7, #6]
 800ffb6:	4a1e      	ldr	r2, [pc, #120]	; (8010030 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800ffb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d016      	beq.n	800ffee <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800ffc0:	88fb      	ldrh	r3, [r7, #6]
 800ffc2:	4a1b      	ldr	r2, [pc, #108]	; (8010030 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800ffc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffc8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	68ba      	ldr	r2, [r7, #8]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	4a18      	ldr	r2, [pc, #96]	; (8010034 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800ffd4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	4413      	add	r3, r2
 800ffde:	4a16      	ldr	r2, [pc, #88]	; (8010038 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800ffe0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	4413      	add	r3, r2
 800ffea:	60fb      	str	r3, [r7, #12]
 800ffec:	e00a      	b.n	8010004 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800ffee:	4b11      	ldr	r3, [pc, #68]	; (8010034 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800fff0:	4a12      	ldr	r2, [pc, #72]	; (801003c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800fff2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800fff4:	4a12      	ldr	r2, [pc, #72]	; (8010040 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800fff6:	4b10      	ldr	r3, [pc, #64]	; (8010038 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800fff8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800fffa:	88fb      	ldrh	r3, [r7, #6]
 800fffc:	4a11      	ldr	r2, [pc, #68]	; (8010044 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800fffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010002:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00d      	beq.n	8010026 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801000a:	4a0f      	ldr	r2, [pc, #60]	; (8010048 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 801000c:	88fb      	ldrh	r3, [r7, #6]
 801000e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010010:	f000 f83e 	bl	8010090 <_ZN17TypedTextDatabase8getFontsEv>
 8010014:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8010016:	f000 f833 	bl	8010080 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801001a:	4603      	mov	r3, r0
 801001c:	461a      	mov	r2, r3
 801001e:	4621      	mov	r1, r4
 8010020:	68f8      	ldr	r0, [r7, #12]
 8010022:	f7ff fea5 	bl	800fd70 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8010026:	bf00      	nop
 8010028:	3714      	adds	r7, #20
 801002a:	46bd      	mov	sp, r7
 801002c:	bd90      	pop	{r4, r7, pc}
 801002e:	bf00      	nop
 8010030:	20023c84 	.word	0x20023c84
 8010034:	20023c8c 	.word	0x20023c8c
 8010038:	20023c90 	.word	0x20023c90
 801003c:	0805ce30 	.word	0x0805ce30
 8010040:	0805ce28 	.word	0x0805ce28
 8010044:	0805ce9c 	.word	0x0805ce9c
 8010048:	20023c88 	.word	0x20023c88

0801004c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	460b      	mov	r3, r1
 8010056:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8010058:	4b07      	ldr	r3, [pc, #28]	; (8010078 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	4b07      	ldr	r3, [pc, #28]	; (801007c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801005e:	6819      	ldr	r1, [r3, #0]
 8010060:	887b      	ldrh	r3, [r7, #2]
 8010062:	009b      	lsls	r3, r3, #2
 8010064:	440b      	add	r3, r1
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	4413      	add	r3, r2
}
 801006c:	4618      	mov	r0, r3
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	20023c8c 	.word	0x20023c8c
 801007c:	20023c90 	.word	0x20023c90

08010080 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010080:	b480      	push	{r7}
 8010082:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8010084:	2302      	movs	r3, #2
}
 8010086:	4618      	mov	r0, r3
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010090:	b480      	push	{r7}
 8010092:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8010094:	4b02      	ldr	r3, [pc, #8]	; (80100a0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8010096:	4618      	mov	r0, r3
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr
 80100a0:	20023c94 	.word	0x20023c94

080100a4 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d113      	bne.n	80100dc <_Z41__static_initialization_and_destruction_0ii+0x38>
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d10e      	bne.n	80100dc <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80100be:	f7fd fcdb 	bl	800da78 <_Z23getFont_verdana_20_4bppv>
 80100c2:	4603      	mov	r3, r0
};
 80100c4:	4a07      	ldr	r2, [pc, #28]	; (80100e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80100c6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80100c8:	f7fd fd30 	bl	800db2c <_Z23getFont_verdana_40_4bppv>
 80100cc:	4603      	mov	r3, r0
};
 80100ce:	4a05      	ldr	r2, [pc, #20]	; (80100e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80100d0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80100d2:	f7fd fc77 	bl	800d9c4 <_Z23getFont_verdana_10_4bppv>
 80100d6:	4603      	mov	r3, r0
};
 80100d8:	4a02      	ldr	r2, [pc, #8]	; (80100e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80100da:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80100dc:	bf00      	nop
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	20023c94 	.word	0x20023c94

080100e8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80100e8:	b580      	push	{r7, lr}
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80100f0:	2001      	movs	r0, #1
 80100f2:	f7ff ffd7 	bl	80100a4 <_Z41__static_initialization_and_destruction_0ii>
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	4a05      	ldr	r2, [pc, #20]	; (8010118 <_ZN19FrontendApplicationD1Ev+0x20>)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	601a      	str	r2, [r3, #0]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4618      	mov	r0, r3
 801010a:	f7fd ff6f 	bl	800dfec <_ZN23FrontendApplicationBaseD1Ev>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4618      	mov	r0, r3
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	08028b48 	.word	0x08028b48

0801011c <_ZN19FrontendApplicationD0Ev>:
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f7ff ffe7 	bl	80100f8 <_ZN19FrontendApplicationD1Ev>
 801012a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f016 f947 	bl	80263c2 <_ZdlPvj>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	4618      	mov	r0, r3
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 801014c:	4618      	mov	r0, r3
 801014e:	f000 f82d 	bl	80101ac <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4618      	mov	r0, r3
 8010156:	f005 fca1 	bl	8015a9c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801015a:	bf00      	nop
 801015c:	3708      	adds	r7, #8
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
	...

08010164 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	60b9      	str	r1, [r7, #8]
 801016e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	687a      	ldr	r2, [r7, #4]
 8010174:	68b9      	ldr	r1, [r7, #8]
 8010176:	4618      	mov	r0, r3
 8010178:	f7fd ff88 	bl	800e08c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801017c:	4a03      	ldr	r2, [pc, #12]	; (801018c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	601a      	str	r2, [r3, #0]
{

}
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	08028b48 	.word	0x08028b48

08010190 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	601a      	str	r2, [r3, #0]
{

}
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4618      	mov	r0, r3
 80101a2:	370c      	adds	r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr

080101ac <_ZN5Model4tickEv>:

void Model::tick()
{
 80101ac:	b480      	push	{r7}
 80101ae:	b083      	sub	sp, #12
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]

}
 80101b4:	bf00      	nop
 80101b6:	370c      	adds	r7, #12
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr

080101c0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
    {
    }
 80101c8:	bf00      	nop
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
    {
    }
 80101dc:	bf00      	nop
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
    {
 80101f0:	4a04      	ldr	r2, [pc, #16]	; (8010204 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	601a      	str	r2, [r3, #0]
    }
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4618      	mov	r0, r3
 80101fa:	370c      	adds	r7, #12
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr
 8010204:	08028bd4 	.word	0x08028bd4

08010208 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
    }
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7ff ffe9 	bl	80101e8 <_ZN8touchgfx9PresenterD1Ev>
 8010216:	2104      	movs	r1, #4
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f016 f8d2 	bl	80263c2 <_ZdlPvj>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4618      	mov	r0, r3
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
    {
 8010230:	4a04      	ldr	r2, [pc, #16]	; (8010244 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	601a      	str	r2, [r3, #0]
    }
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4618      	mov	r0, r3
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr
 8010244:	08028bd4 	.word	0x08028bd4

08010248 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	4a06      	ldr	r2, [pc, #24]	; (801026c <_ZN13ModelListenerC1Ev+0x24>)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	601a      	str	r2, [r3, #0]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	605a      	str	r2, [r3, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4618      	mov	r0, r3
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	08028bc4 	.word	0x08028bc4

08010270 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	4a04      	ldr	r2, [pc, #16]	; (801028c <_ZN13ModelListenerD1Ev+0x1c>)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	601a      	str	r2, [r3, #0]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4618      	mov	r0, r3
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	08028bc4 	.word	0x08028bc4

08010290 <_ZN13ModelListenerD0Ev>:
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7ff ffe9 	bl	8010270 <_ZN13ModelListenerD1Ev>
 801029e:	2108      	movs	r1, #8
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f016 f88e 	bl	80263c2 <_ZdlPvj>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4618      	mov	r0, r3
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	4a09      	ldr	r2, [pc, #36]	; (80102e0 <_ZN16Screen1PresenterD1Ev+0x30>)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	601a      	str	r2, [r3, #0]
 80102be:	4a09      	ldr	r2, [pc, #36]	; (80102e4 <_ZN16Screen1PresenterD1Ev+0x34>)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	605a      	str	r2, [r3, #4]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	3304      	adds	r3, #4
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7ff ffd1 	bl	8010270 <_ZN13ModelListenerD1Ev>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7ff ff89 	bl	80101e8 <_ZN8touchgfx9PresenterD1Ev>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4618      	mov	r0, r3
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	08028b9c 	.word	0x08028b9c
 80102e4:	08028bb4 	.word	0x08028bb4

080102e8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80102e8:	f1a0 0004 	sub.w	r0, r0, #4
 80102ec:	e7e0      	b.n	80102b0 <_ZN16Screen1PresenterD1Ev>
 80102ee:	bf00      	nop

080102f0 <_ZN16Screen1PresenterD0Ev>:
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff ffd9 	bl	80102b0 <_ZN16Screen1PresenterD1Ev>
 80102fe:	2110      	movs	r1, #16
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f016 f85e 	bl	80263c2 <_ZdlPvj>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4618      	mov	r0, r3
 801030a:	3708      	adds	r7, #8
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <_ZThn4_N16Screen1PresenterD0Ev>:
 8010310:	f1a0 0004 	sub.w	r0, r0, #4
 8010314:	e7ec      	b.n	80102f0 <_ZN16Screen1PresenterD0Ev>
	...

08010318 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
    : view(v)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff ff7f 	bl	8010228 <_ZN8touchgfx9PresenterC1Ev>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	3304      	adds	r3, #4
 801032e:	4618      	mov	r0, r3
 8010330:	f7ff ff8a 	bl	8010248 <_ZN13ModelListenerC1Ev>
 8010334:	4a06      	ldr	r2, [pc, #24]	; (8010350 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	601a      	str	r2, [r3, #0]
 801033a:	4a06      	ldr	r2, [pc, #24]	; (8010354 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	605a      	str	r2, [r3, #4]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	683a      	ldr	r2, [r7, #0]
 8010344:	60da      	str	r2, [r3, #12]
{

}
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4618      	mov	r0, r3
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	08028b9c 	.word	0x08028b9c
 8010354:	08028bb4 	.word	0x08028bb4

08010358 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]

}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]

}
 8010374:	bf00      	nop
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	4a05      	ldr	r2, [pc, #20]	; (80103a0 <_ZN11Screen1ViewD1Ev+0x20>)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	601a      	str	r2, [r3, #0]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	4618      	mov	r0, r3
 8010392:	f7ff f9d3 	bl	800f73c <_ZN15Screen1ViewBaseD1Ev>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4618      	mov	r0, r3
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	08028bec 	.word	0x08028bec

080103a4 <_ZN11Screen1ViewD0Ev>:
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f7ff ffe7 	bl	8010380 <_ZN11Screen1ViewD1Ev>
 80103b2:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f016 f803 	bl	80263c2 <_ZdlPvj>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4618      	mov	r0, r3
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
	...

080103c8 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fe ffe2 	bl	800f39c <_ZN15Screen1ViewBaseC1Ev>
 80103d8:	4a03      	ldr	r2, [pc, #12]	; (80103e8 <_ZN11Screen1ViewC1Ev+0x20>)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	601a      	str	r2, [r3, #0]
{

}
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	4618      	mov	r0, r3
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	08028bec 	.word	0x08028bec

080103ec <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7ff f9dd 	bl	800f7b6 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80103fc:	bf00      	nop
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	4618      	mov	r0, r3
 8010410:	f7fe fba6 	bl	800eb60 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010414:	bf00      	nop
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
    {
 8010424:	4a04      	ldr	r2, [pc, #16]	; (8010438 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	601a      	str	r2, [r3, #0]
    }
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr
 8010438:	08028c38 	.word	0x08028c38

0801043c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
    }
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7ff ffe9 	bl	801041c <_ZN8touchgfx15TouchControllerD1Ev>
 801044a:	2104      	movs	r1, #4
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f015 ffb8 	bl	80263c2 <_ZdlPvj>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	4618      	mov	r0, r3
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "main.h"

void STM32TouchController::init()
{
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
     return ((bool) Touch_TouchGFXSampleTouch(&x, &y));;
 801047c:	6879      	ldr	r1, [r7, #4]
 801047e:	68b8      	ldr	r0, [r7, #8]
 8010480:	f7f4 ffbc 	bl	80053fc <Touch_TouchGFXSampleTouch>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	bf14      	ite	ne
 801048a:	2301      	movne	r3, #1
 801048c:	2300      	moveq	r3, #0
 801048e:	b2db      	uxtb	r3, r3
}
 8010490:	4618      	mov	r0, r3
 8010492:	3710      	adds	r7, #16
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	4a05      	ldr	r2, [pc, #20]	; (80104b8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	601a      	str	r2, [r3, #0]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7ff ffb7 	bl	801041c <_ZN8touchgfx15TouchControllerD1Ev>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4618      	mov	r0, r3
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	08028c20 	.word	0x08028c20

080104bc <_ZN20STM32TouchControllerD0Ev>:
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7ff ffe7 	bl	8010498 <_ZN20STM32TouchControllerD1Ev>
 80104ca:	2104      	movs	r1, #4
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f015 ff78 	bl	80263c2 <_ZdlPvj>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4618      	mov	r0, r3
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 80104dc:	b480      	push	{r7}
 80104de:	af00      	add	r7, sp, #0

}
 80104e0:	bf00      	nop
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
	...

080104ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	4603      	mov	r3, r0
 80104f4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	2b03      	cmp	r3, #3
 80104fa:	d80c      	bhi.n	8010516 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80104fc:	a201      	add	r2, pc, #4	; (adr r2, 8010504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80104fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010502:	bf00      	nop
 8010504:	08010515 	.word	0x08010515
 8010508:	08010515 	.word	0x08010515
 801050c:	08010515 	.word	0x08010515
 8010510:	08010515 	.word	0x08010515
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8010514:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8010516:	bf00      	nop
 8010518:	370c      	adds	r7, #12
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop

08010524 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	4603      	mov	r3, r0
 801052c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801052e:	79fb      	ldrb	r3, [r7, #7]
 8010530:	2b03      	cmp	r3, #3
 8010532:	d80c      	bhi.n	801054e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8010534:	a201      	add	r2, pc, #4	; (adr r2, 801053c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8010536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801053a:	bf00      	nop
 801053c:	0801054d 	.word	0x0801054d
 8010540:	0801054d 	.word	0x0801054d
 8010544:	0801054d 	.word	0x0801054d
 8010548:	0801054d 	.word	0x0801054d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 801054c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 801054e:	bf00      	nop
 8010550:	370c      	adds	r7, #12
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr
 801055a:	bf00      	nop

0801055c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801055c:	b480      	push	{r7}
 801055e:	b083      	sub	sp, #12
 8010560:	af00      	add	r7, sp, #0
 8010562:	4603      	mov	r3, r0
 8010564:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	2b03      	cmp	r3, #3
 801056a:	d80c      	bhi.n	8010586 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 801056c:	a201      	add	r2, pc, #4	; (adr r2, 8010574 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 801056e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010572:	bf00      	nop
 8010574:	08010585 	.word	0x08010585
 8010578:	08010585 	.word	0x08010585
 801057c:	08010585 	.word	0x08010585
 8010580:	08010585 	.word	0x08010585
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8010584:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8010586:	bf00      	nop
 8010588:	370c      	adds	r7, #12
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop

08010594 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
    {
 801059c:	4a04      	ldr	r2, [pc, #16]	; (80105b0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	601a      	str	r2, [r3, #0]
    }
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr
 80105b0:	08029070 	.word	0x08029070

080105b4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
    }
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f7ff ffe9 	bl	8010594 <_ZN8touchgfx3HALD1Ev>
 80105c2:	217c      	movs	r1, #124	; 0x7c
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f015 fefc 	bl	80263c2 <_ZdlPvj>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4618      	mov	r0, r3
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	460b      	mov	r3, r1
 80105de:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	78fa      	ldrb	r2, [r7, #3]
 80105e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2201      	movs	r2, #1
 80105ec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 80105f0:	bf00      	nop
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	460b      	mov	r3, r1
 8010606:	807b      	strh	r3, [r7, #2]
 8010608:	4613      	mov	r3, r2
 801060a:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 801060c:	4b0c      	ldr	r3, [pc, #48]	; (8010640 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 801060e:	881b      	ldrh	r3, [r3, #0]
 8010610:	887a      	ldrh	r2, [r7, #2]
 8010612:	429a      	cmp	r2, r3
 8010614:	d304      	bcc.n	8010620 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8010616:	4b0b      	ldr	r3, [pc, #44]	; (8010644 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8010618:	881b      	ldrh	r3, [r3, #0]
 801061a:	883a      	ldrh	r2, [r7, #0]
 801061c:	429a      	cmp	r2, r3
 801061e:	d205      	bcs.n	801062c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8010620:	4b09      	ldr	r3, [pc, #36]	; (8010648 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8010622:	4a0a      	ldr	r2, [pc, #40]	; (801064c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8010624:	219e      	movs	r1, #158	; 0x9e
 8010626:	480a      	ldr	r0, [pc, #40]	; (8010650 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8010628:	f015 fefa 	bl	8026420 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 801062c:	4a09      	ldr	r2, [pc, #36]	; (8010654 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 801062e:	887b      	ldrh	r3, [r7, #2]
 8010630:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8010632:	4a09      	ldr	r2, [pc, #36]	; (8010658 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8010634:	883b      	ldrh	r3, [r7, #0]
 8010636:	8013      	strh	r3, [r2, #0]
    }
 8010638:	bf00      	nop
 801063a:	3708      	adds	r7, #8
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	20025824 	.word	0x20025824
 8010644:	20025826 	.word	0x20025826
 8010648:	08027b9c 	.word	0x08027b9c
 801064c:	08027c00 	.word	0x08027c00
 8010650:	08027c44 	.word	0x08027c44
 8010654:	2002582a 	.word	0x2002582a
 8010658:	2002582c 	.word	0x2002582c

0801065c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801066a:	2b00      	cmp	r3, #0
 801066c:	d009      	beq.n	8010682 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	685a      	ldr	r2, [r3, #4]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4610      	mov	r0, r2
 801067c:	4798      	blx	r3
 801067e:	4603      	mov	r3, r0
 8010680:	e000      	b.n	8010684 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8010682:	2300      	movs	r3, #0
    }
 8010684:	4618      	mov	r0, r3
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f002 fd2d 	bl	80130f4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	33ac      	adds	r3, #172	; 0xac
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	4798      	blx	r3
    }
 80106a6:	bf00      	nop
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}

080106ae <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80106ae:	b480      	push	{r7}
 80106b0:	b083      	sub	sp, #12
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	6078      	str	r0, [r7, #4]
 80106b6:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 80106b8:	2300      	movs	r3, #0
    }
 80106ba:	4618      	mov	r0, r3
 80106bc:	370c      	adds	r7, #12
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr
	...

080106c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	607a      	str	r2, [r7, #4]
 80106d4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d106      	bne.n	80106ea <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80106dc:	4b0f      	ldr	r3, [pc, #60]	; (801071c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 80106de:	4a10      	ldr	r2, [pc, #64]	; (8010720 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80106e0:	f240 21d2 	movw	r1, #722	; 0x2d2
 80106e4:	480f      	ldr	r0, [pc, #60]	; (8010724 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80106e6:	f015 fe9b 	bl	8026420 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	68ba      	ldr	r2, [r7, #8]
 80106ee:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	bf14      	ite	ne
 80106fc:	2301      	movne	r3, #1
 80106fe:	2300      	moveq	r3, #0
 8010700:	b2da      	uxtb	r2, r3
 8010702:	4b09      	ldr	r3, [pc, #36]	; (8010728 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8010704:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	338c      	adds	r3, #140	; 0x8c
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	6839      	ldr	r1, [r7, #0]
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	4798      	blx	r3
    }
 8010714:	bf00      	nop
 8010716:	3710      	adds	r7, #16
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}
 801071c:	08027c88 	.word	0x08027c88
 8010720:	08027cc0 	.word	0x08027cc0
 8010724:	08027c44 	.word	0x08027c44
 8010728:	2002582e 	.word	0x2002582e

0801072c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	683a      	ldr	r2, [r7, #0]
 801073a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	bf14      	ite	ne
 8010742:	2301      	movne	r3, #1
 8010744:	2300      	moveq	r3, #0
 8010746:	b2da      	uxtb	r2, r3
 8010748:	4b03      	ldr	r3, [pc, #12]	; (8010758 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801074a:	701a      	strb	r2, [r3, #0]
    }
 801074c:	bf00      	nop
 801074e:	370c      	adds	r7, #12
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr
 8010758:	2002582f 	.word	0x2002582f

0801075c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010764:	2300      	movs	r3, #0
    }
 8010766:	4618      	mov	r0, r3
 8010768:	370c      	adds	r7, #12
 801076a:	46bd      	mov	sp, r7
 801076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010770:	4770      	bx	lr

08010772 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8010772:	b580      	push	{r7, lr}
 8010774:	b082      	sub	sp, #8
 8010776:	af00      	add	r7, sp, #0
 8010778:	6078      	str	r0, [r7, #4]
 801077a:	460b      	mov	r3, r1
 801077c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010782:	2b00      	cmp	r3, #0
 8010784:	d004      	beq.n	8010790 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801078a:	887a      	ldrh	r2, [r7, #2]
 801078c:	4610      	mov	r0, r2
 801078e:	4798      	blx	r3
        }
    }
 8010790:	bf00      	nop
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80107a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80107a4:	4618      	mov	r0, r3
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr

080107b0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	685a      	ldr	r2, [r3, #4]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	3318      	adds	r3, #24
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	4610      	mov	r0, r2
 80107c8:	4798      	blx	r3
 80107ca:	4603      	mov	r3, r0
    }
 80107cc:	4618      	mov	r0, r3
 80107ce:	3708      	adds	r7, #8
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80107d4:	b480      	push	{r7}
 80107d6:	b085      	sub	sp, #20
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d011      	beq.n	8010810 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80107ec:	4b14      	ldr	r3, [pc, #80]	; (8010840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d11e      	bne.n	8010832 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80107f4:	4b13      	ldr	r3, [pc, #76]	; (8010844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80107f6:	881b      	ldrh	r3, [r3, #0]
 80107f8:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80107fa:	4b13      	ldr	r3, [pc, #76]	; (8010848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80107fc:	881a      	ldrh	r2, [r3, #0]
 80107fe:	4b11      	ldr	r3, [pc, #68]	; (8010844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010800:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8010802:	4a11      	ldr	r2, [pc, #68]	; (8010848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010804:	89bb      	ldrh	r3, [r7, #12]
 8010806:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8010808:	4b0d      	ldr	r3, [pc, #52]	; (8010840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801080a:	2201      	movs	r2, #1
 801080c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801080e:	e010      	b.n	8010832 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8010810:	4b0b      	ldr	r3, [pc, #44]	; (8010840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d00c      	beq.n	8010832 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8010818:	4b0a      	ldr	r3, [pc, #40]	; (8010844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801081a:	881b      	ldrh	r3, [r3, #0]
 801081c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801081e:	4b0a      	ldr	r3, [pc, #40]	; (8010848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010820:	881a      	ldrh	r2, [r3, #0]
 8010822:	4b08      	ldr	r3, [pc, #32]	; (8010844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010824:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8010826:	4a08      	ldr	r2, [pc, #32]	; (8010848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010828:	89fb      	ldrh	r3, [r7, #14]
 801082a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 801082c:	4b04      	ldr	r3, [pc, #16]	; (8010840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801082e:	2200      	movs	r2, #0
 8010830:	701a      	strb	r2, [r3, #0]
    }
 8010832:	bf00      	nop
 8010834:	3714      	adds	r7, #20
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop
 8010840:	20025828 	.word	0x20025828
 8010844:	20025826 	.word	0x20025826
 8010848:	20025824 	.word	0x20025824

0801084c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
    {
    }
 8010854:	bf00      	nop
 8010856:	370c      	adds	r7, #12
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr

08010860 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
    {
    }
 8010868:	bf00      	nop
 801086a:	370c      	adds	r7, #12
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr

08010874 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	4618      	mov	r0, r3
 8010880:	f001 fe96 	bl	80125b0 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8010884:	bf00      	nop
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	4a05      	ldr	r2, [pc, #20]	; (80108ac <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	601a      	str	r2, [r3, #0]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4618      	mov	r0, r3
 801089e:	f7ff fe79 	bl	8010594 <_ZN8touchgfx3HALD1Ev>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4618      	mov	r0, r3
 80108a6:	3708      	adds	r7, #8
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	08028e9c 	.word	0x08028e9c

080108b0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7ff ffe7 	bl	801088c <_ZN20TouchGFXGeneratedHALD1Ev>
 80108be:	217c      	movs	r1, #124	; 0x7c
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f015 fd7e 	bl	80263c2 <_ZdlPvj>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	4618      	mov	r0, r3
 80108ca:	3708      	adds	r7, #8
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	4618      	mov	r0, r3
 80108dc:	f7ff ffca 	bl	8010874 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80108e0:	bf00      	nop
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <_ZN11TouchGFXHAL10initializeEv>:
 */
#warning "A user must call touchgfx::startNewTransfer(); once touchgfxDisplayDriverTransmitBlock() has succesfully sent a block."
#warning "A user must implement C-methods touchgfxDisplayDriverTransmitActive() and touchgfxDisplayDriverTransmitBlock() used by the Partial Framebuffer Strategy."

void TouchGFXHAL::initialize()
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	4618      	mov	r0, r3
 80108f4:	f000 ffce 	bl	8011894 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80108f8:	bf00      	nop
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4618      	mov	r0, r3
 801090c:	f001 f840 	bl	8011990 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8010910:	4603      	mov	r3, r0
}
 8010912:	4618      	mov	r0, r3
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801091a:	b580      	push	{r7, lr}
 801091c:	b082      	sub	sp, #8
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
 8010922:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6839      	ldr	r1, [r7, #0]
 8010928:	4618      	mov	r0, r3
 801092a:	f001 f83c 	bl	80119a6 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801092e:	bf00      	nop
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8010936:	b580      	push	{r7, lr}
 8010938:	b082      	sub	sp, #8
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
 801093e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6839      	ldr	r1, [r7, #0]
 8010944:	4618      	mov	r0, r3
 8010946:	f001 f839 	bl	80119bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801094a:	bf00      	nop
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b084      	sub	sp, #16
 8010956:	af00      	add	r7, sp, #0
 8010958:	60f8      	str	r0, [r7, #12]
 801095a:	60b9      	str	r1, [r7, #8]
 801095c:	607a      	str	r2, [r7, #4]
 801095e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	68b9      	ldr	r1, [r7, #8]
 8010968:	f001 f86b 	bl	8011a42 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 801096c:	4603      	mov	r3, r0
}
 801096e:	4618      	mov	r0, r3
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b082      	sub	sp, #8
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	4618      	mov	r0, r3
 8010982:	f000 ffb7 	bl	80118f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8010986:	bf00      	nop
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b082      	sub	sp, #8
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4618      	mov	r0, r3
 801099a:	f000 ffb5 	bl	8011908 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801099e:	bf00      	nop
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b082      	sub	sp, #8
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4618      	mov	r0, r3
 80109b2:	f000 ffb3 	bl	801191c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80109be:	b580      	push	{r7, lr}
 80109c0:	b082      	sub	sp, #8
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	f000 ffb1 	bl	8011930 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80109ce:	bf00      	nop
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b082      	sub	sp, #8
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f000 ffaf 	bl	8011944 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80109e6:	4603      	mov	r3, r0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3708      	adds	r7, #8
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	4618      	mov	r0, r3
 80109fc:	f000 ffaf 	bl	801195e <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	4a05      	ldr	r2, [pc, #20]	; (8010a28 <_ZN11TouchGFXHALD1Ev+0x20>)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	601a      	str	r2, [r3, #0]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7ff ff37 	bl	801088c <_ZN20TouchGFXGeneratedHALD1Ev>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	08028c50 	.word	0x08028c50

08010a2c <_ZN11TouchGFXHALD0Ev>:
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f7ff ffe7 	bl	8010a08 <_ZN11TouchGFXHALD1Ev>
 8010a3a:	217c      	movs	r1, #124	; 0x7c
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f015 fcc0 	bl	80263c2 <_ZdlPvj>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4618      	mov	r0, r3
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	af00      	add	r7, sp, #0
    fb_sem = 0;
 8010a50:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	601a      	str	r2, [r3, #0]
    vsync_sem = 0;
 8010a56:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <_ZN8touchgfx10OSWrappers10initializeEv+0x20>)
 8010a58:	2200      	movs	r2, #0
 8010a5a:	601a      	str	r2, [r3, #0]
}
 8010a5c:	bf00      	nop
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop
 8010a68:	20023ca0 	.word	0x20023ca0
 8010a6c:	20023ca4 	.word	0x20023ca4

08010a70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8010a70:	b480      	push	{r7}
 8010a72:	af00      	add	r7, sp, #0
    while (fb_sem);
 8010a74:	bf00      	nop
 8010a76:	4b08      	ldr	r3, [pc, #32]	; (8010a98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	bf14      	ite	ne
 8010a7e:	2301      	movne	r3, #1
 8010a80:	2300      	moveq	r3, #0
 8010a82:	b2db      	uxtb	r3, r3
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1f6      	bne.n	8010a76 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x6>
    fb_sem = 1;
 8010a88:	4b03      	ldr	r3, [pc, #12]	; (8010a98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	601a      	str	r2, [r3, #0]
}
 8010a8e:	bf00      	nop
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr
 8010a98:	20023ca0 	.word	0x20023ca0

08010a9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	af00      	add	r7, sp, #0
    fb_sem = 0;
 8010aa0:	4b03      	ldr	r3, [pc, #12]	; (8010ab0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	601a      	str	r2, [r3, #0]
}
 8010aa6:	bf00      	nop
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr
 8010ab0:	20023ca0 	.word	0x20023ca0

08010ab4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	af00      	add	r7, sp, #0
    fb_sem = 1;
 8010ab8:	4b03      	ldr	r3, [pc, #12]	; (8010ac8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8010aba:	2201      	movs	r2, #1
 8010abc:	601a      	str	r2, [r3, #0]
}
 8010abe:	bf00      	nop
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr
 8010ac8:	20023ca0 	.word	0x20023ca0

08010acc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8010acc:	b480      	push	{r7}
 8010ace:	af00      	add	r7, sp, #0
    fb_sem = 0;
 8010ad0:	4b03      	ldr	r3, [pc, #12]	; (8010ae0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	601a      	str	r2, [r3, #0]
}
 8010ad6:	bf00      	nop
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr
 8010ae0:	20023ca0 	.word	0x20023ca0

08010ae4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	af00      	add	r7, sp, #0
    vsync_sem = 1;
 8010ae8:	4b03      	ldr	r3, [pc, #12]	; (8010af8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8010aea:	2201      	movs	r2, #1
 8010aec:	601a      	str	r2, [r3, #0]
}
 8010aee:	bf00      	nop
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr
 8010af8:	20023ca4 	.word	0x20023ca4

08010afc <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>:
/*
  * Signal that the rendering of the frame has completed. Used by
  * some systems to avoid using any previous vsync.
  */
void OSWrappers::signalRenderingDone()
{
 8010afc:	b480      	push	{r7}
 8010afe:	af00      	add	r7, sp, #0
    vsync_sem = 0;
 8010b00:	4b03      	ldr	r3, [pc, #12]	; (8010b10 <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv+0x14>)
 8010b02:	2200      	movs	r2, #0
 8010b04:	601a      	str	r2, [r3, #0]
}
 8010b06:	bf00      	nop
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr
 8010b10:	20023ca4 	.word	0x20023ca4

08010b14 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>:
 * @note signalRenderingDone is typically used together with this function.
 *
 * @return True if VSync occurred.
 */
bool OSWrappers::isVSyncAvailable()
{
 8010b14:	b480      	push	{r7}
 8010b16:	af00      	add	r7, sp, #0
    return vsync_sem;
 8010b18:	4b05      	ldr	r3, [pc, #20]	; (8010b30 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv+0x1c>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	bf14      	ite	ne
 8010b20:	2301      	movne	r3, #1
 8010b22:	2300      	moveq	r3, #0
 8010b24:	b2db      	uxtb	r3, r3
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr
 8010b30:	20023ca4 	.word	0x20023ca4

08010b34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	af00      	add	r7, sp, #0
    if (vsync_sem)
 8010b38:	4b0a      	ldr	r3, [pc, #40]	; (8010b64 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	bf14      	ite	ne
 8010b40:	2301      	movne	r3, #1
 8010b42:	2300      	moveq	r3, #0
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00a      	beq.n	8010b60 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        vsync_sem = 0;
 8010b4a:	4b06      	ldr	r3, [pc, #24]	; (8010b64 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	601a      	str	r2, [r3, #0]
        HAL::getInstance()->backPorchExited();
 8010b50:	f7fd f902 	bl	800dd58 <_ZN8touchgfx3HAL11getInstanceEv>
 8010b54:	4603      	mov	r3, r0
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	3270      	adds	r2, #112	; 0x70
 8010b5a:	6812      	ldr	r2, [r2, #0]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	4790      	blx	r2
    }
}
 8010b60:	bf00      	nop
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	20023ca4 	.word	0x20023ca4

08010b68 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
        : color(0)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	601a      	str	r2, [r3, #0]
    }
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	370c      	adds	r7, #12
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr

08010b84 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
    {
 8010b8c:	4a04      	ldr	r2, [pc, #16]	; (8010ba0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	601a      	str	r2, [r3, #0]
    }
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	4618      	mov	r0, r3
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr
 8010ba0:	08028d78 	.word	0x08028d78

08010ba4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
    }
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f7ff ffe9 	bl	8010b84 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010bb2:	2104      	movs	r1, #4
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f015 fc04 	bl	80263c2 <_ZdlPvj>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
    {
    }
 8010bcc:	bf00      	nop
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 8010bd8:	b480      	push	{r7}
 8010bda:	b083      	sub	sp, #12
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8010be0:	2300      	movs	r3, #0
    }
 8010be2:	4618      	mov	r0, r3
 8010be4:	370c      	adds	r7, #12
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
	...

08010bf0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8010bf0:	b480      	push	{r7}
 8010bf2:	b083      	sub	sp, #12
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
    {
 8010bf8:	4a04      	ldr	r2, [pc, #16]	; (8010c0c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	601a      	str	r2, [r3, #0]
    }
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4618      	mov	r0, r3
 8010c02:	370c      	adds	r7, #12
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr
 8010c0c:	08029148 	.word	0x08029148

08010c10 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
    }
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7ff ffe9 	bl	8010bf0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010c1e:	210c      	movs	r1, #12
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f015 fbce 	bl	80263c2 <_ZdlPvj>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8010c3a:	4a09      	ldr	r2, [pc, #36]	; (8010c60 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	683a      	ldr	r2, [r7, #0]
 8010c44:	605a      	str	r2, [r3, #4]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	721a      	strb	r2, [r3, #8]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	725a      	strb	r2, [r3, #9]
    {
    }
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4618      	mov	r0, r3
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr
 8010c60:	08029148 	.word	0x08029148

08010c64 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 8010c64:	b480      	push	{r7}
 8010c66:	b083      	sub	sp, #12
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
    {
    }
 8010c6c:	bf00      	nop
 8010c6e:	370c      	adds	r7, #12
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
    {
    }
 8010c80:	bf00      	nop
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	330c      	adds	r3, #12
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7ff ff65 	bl	8010b68 <_ZN8touchgfx9colortypeC1Ev>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	330c      	adds	r3, #12
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	4610      	mov	r0, r2
 8010cba:	f7ff ffb9 	bl	8010c30 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8010cbe:	4a0b      	ldr	r2, [pc, #44]	; (8010cec <_ZN8STM32DMAC1Ev+0x44>)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	601a      	str	r2, [r3, #0]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f103 000c 	add.w	r0, r3, #12
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	3320      	adds	r3, #32
 8010cce:	2201      	movs	r2, #1
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	f002 fb49 	bl	8013368 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	3320      	adds	r3, #32
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7ff ffd6 	bl	8010c8c <_ZN8touchgfx6BlitOpC1Ev>
{
}
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3708      	adds	r7, #8
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	08028d28 	.word	0x08028d28

08010cf0 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 8010cf8:	2300      	movs	r3, #0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	370c      	adds	r7, #12
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr
	...

08010d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8010d12:	4b03      	ldr	r3, [pc, #12]	; (8010d20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 8010d14:	4a03      	ldr	r2, [pc, #12]	; (8010d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 8010d16:	2122      	movs	r1, #34	; 0x22
 8010d18:	4803      	ldr	r0, [pc, #12]	; (8010d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 8010d1a:	f015 fb81 	bl	8026420 <__assert_func>
 8010d1e:	bf00      	nop
 8010d20:	08027d10 	.word	0x08027d10
 8010d24:	08027d34 	.word	0x08027d34
 8010d28:	08027d74 	.word	0x08027d74

08010d2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8010d36:	4b03      	ldr	r3, [pc, #12]	; (8010d44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 8010d38:	4a03      	ldr	r2, [pc, #12]	; (8010d48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 8010d3a:	2127      	movs	r1, #39	; 0x27
 8010d3c:	4803      	ldr	r0, [pc, #12]	; (8010d4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 8010d3e:	f015 fb6f 	bl	8026420 <__assert_func>
 8010d42:	bf00      	nop
 8010d44:	08027d10 	.word	0x08027d10
 8010d48:	08027da0 	.word	0x08027da0
 8010d4c:	08027d74 	.word	0x08027d74

08010d50 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	4a08      	ldr	r2, [pc, #32]	; (8010d7c <_ZN8STM32DMAD1Ev+0x2c>)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	601a      	str	r2, [r3, #0]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	330c      	adds	r3, #12
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 f81c 	bl	8010da0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7ff ff40 	bl	8010bf0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	4618      	mov	r0, r3
 8010d74:	3708      	adds	r7, #8
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	08028d28 	.word	0x08028d28

08010d80 <_ZN8STM32DMAD0Ev>:
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f7ff ffe1 	bl	8010d50 <_ZN8STM32DMAD1Ev>
 8010d8e:	2144      	movs	r1, #68	; 0x44
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f015 fb16 	bl	80263c2 <_ZdlPvj>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	4a05      	ldr	r2, [pc, #20]	; (8010dc0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	601a      	str	r2, [r3, #0]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff fee7 	bl	8010b84 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	4618      	mov	r0, r3
 8010dba:	3708      	adds	r7, #8
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	08029198 	.word	0x08029198

08010dc4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7ff ffe7 	bl	8010da0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010dd2:	2114      	movs	r1, #20
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f015 faf4 	bl	80263c2 <_ZdlPvj>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3708      	adds	r7, #8
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}

08010de4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8010dec:	4a04      	ldr	r2, [pc, #16]	; (8010e00 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6013      	str	r3, [r2, #0]
    }
 8010df2:	bf00      	nop
 8010df4:	370c      	adds	r7, #12
 8010df6:	46bd      	mov	sp, r7
 8010df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop
 8010e00:	2002588c 	.word	0x2002588c

08010e04 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8010e04:	b480      	push	{r7}
 8010e06:	b085      	sub	sp, #20
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	60b9      	str	r1, [r7, #8]
 8010e0e:	607a      	str	r2, [r7, #4]
 8010e10:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8010e12:	4a0b      	ldr	r2, [pc, #44]	; (8010e40 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	68ba      	ldr	r2, [r7, #8]
 8010e1c:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	683a      	ldr	r2, [r7, #0]
 8010e28:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	69ba      	ldr	r2, [r7, #24]
 8010e2e:	611a      	str	r2, [r3, #16]
    {
    }
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	4618      	mov	r0, r3
 8010e34:	3714      	adds	r7, #20
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop
 8010e40:	08028e60 	.word	0x08028e60

08010e44 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
    {
 8010e4c:	4a04      	ldr	r2, [pc, #16]	; (8010e60 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	601a      	str	r2, [r3, #0]
    }
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	4618      	mov	r0, r3
 8010e56:	370c      	adds	r7, #12
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr
 8010e60:	08028e60 	.word	0x08028e60

08010e64 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
    }
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f7ff ffe9 	bl	8010e44 <_ZN8touchgfx7MVPHeapD1Ev>
 8010e72:	2114      	movs	r1, #20
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f015 faa4 	bl	80263c2 <_ZdlPvj>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3708      	adds	r7, #8
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
    {
 8010e8c:	4a04      	ldr	r2, [pc, #16]	; (8010ea0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	601a      	str	r2, [r3, #0]
    }
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4618      	mov	r0, r3
 8010e96:	370c      	adds	r7, #12
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr
 8010ea0:	08029570 	.word	0x08029570

08010ea4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
    }
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f7ff ffe9 	bl	8010e84 <_ZN8touchgfx3LCDD1Ev>
 8010eb2:	2108      	movs	r1, #8
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f015 fa84 	bl	80263c2 <_ZdlPvj>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3708      	adds	r7, #8
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8010ec4:	b480      	push	{r7}
 8010ec6:	b083      	sub	sp, #12
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
            : startX(0),
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	801a      	strh	r2, [r3, #0]
              startY(0),
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	805a      	strh	r2, [r3, #2]
              downX(0),
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2200      	movs	r2, #0
 8010edc:	809a      	strh	r2, [r3, #4]
              downY(0),
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	739a      	strb	r2, [r3, #14]
        {
        }
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	4618      	mov	r0, r3
 8010f00:	370c      	adds	r7, #12
 8010f02:	46bd      	mov	sp, r7
 8010f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f08:	4770      	bx	lr

08010f0a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b082      	sub	sp, #8
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7ff ffd5 	bl	8010ec4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	611a      	str	r2, [r3, #16]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	829a      	strh	r2, [r3, #20]
    {
    }
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
 8010f3c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8010f3e:	4a55      	ldr	r2, [pc, #340]	; (8011094 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	683a      	ldr	r2, [r7, #0]
 8010f54:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	2200      	movs	r2, #0
 8010f66:	619a      	str	r2, [r3, #24]
          gestures(),
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	331c      	adds	r3, #28
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7ff ffcc 	bl	8010f0a <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2200      	movs	r2, #0
 8010f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2200      	movs	r2, #0
 8010f84:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2200      	movs	r2, #0
 8010fae:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	3350      	adds	r3, #80	; 0x50
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7fd fb64 	bl	800e68a <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2201      	movs	r2, #1
 8010fe0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2200      	movs	r2, #0
 8011000:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2200      	movs	r2, #0
 8011008:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2200      	movs	r2, #0
 8011010:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2200      	movs	r2, #0
 8011018:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2200      	movs	r2, #0
 8011020:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2200      	movs	r2, #0
 8011028:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2200      	movs	r2, #0
 801102e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2200      	movs	r2, #0
 8011036:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2201      	movs	r2, #1
 801103e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2201      	movs	r2, #1
 8011046:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 801104a:	4a13      	ldr	r2, [pc, #76]	; (8011098 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8011050:	4a12      	ldr	r2, [pc, #72]	; (801109c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011052:	8b3b      	ldrh	r3, [r7, #24]
 8011054:	8013      	strh	r3, [r2, #0]
 8011056:	4b11      	ldr	r3, [pc, #68]	; (801109c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011058:	881a      	ldrh	r2, [r3, #0]
 801105a:	4b11      	ldr	r3, [pc, #68]	; (80110a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 801105c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 801105e:	4a11      	ldr	r2, [pc, #68]	; (80110a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011060:	8bbb      	ldrh	r3, [r7, #28]
 8011062:	8013      	strh	r3, [r2, #0]
 8011064:	4b0f      	ldr	r3, [pc, #60]	; (80110a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011066:	881a      	ldrh	r2, [r3, #0]
 8011068:	4b0f      	ldr	r3, [pc, #60]	; (80110a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 801106a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 801106c:	4b0f      	ldr	r3, [pc, #60]	; (80110ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 801106e:	2200      	movs	r2, #0
 8011070:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011072:	8b3a      	ldrh	r2, [r7, #24]
 8011074:	8bbb      	ldrh	r3, [r7, #28]
 8011076:	429a      	cmp	r2, r3
 8011078:	bf34      	ite	cc
 801107a:	2301      	movcc	r3, #1
 801107c:	2300      	movcs	r3, #0
 801107e:	b2db      	uxtb	r3, r3
 8011080:	461a      	mov	r2, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	4618      	mov	r0, r3
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	08029070 	.word	0x08029070
 8011098:	20025830 	.word	0x20025830
 801109c:	20025824 	.word	0x20025824
 80110a0:	2002582a 	.word	0x2002582a
 80110a4:	20025826 	.word	0x20025826
 80110a8:	2002582c 	.word	0x2002582c
 80110ac:	20025828 	.word	0x20025828

080110b0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fd f847 	bl	800e150 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80110c2:	bf00      	nop
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
	...

080110cc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af02      	add	r7, sp, #8
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
 80110d8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	9300      	str	r3, [sp, #0]
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	68b9      	ldr	r1, [r7, #8]
 80110e6:	f7ff fe8d 	bl	8010e04 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80110ea:	4a04      	ldr	r2, [pc, #16]	; (80110fc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	601a      	str	r2, [r3, #0]
    {

    }
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	4618      	mov	r0, r3
 80110f4:	3710      	adds	r7, #16
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	08028e4c 	.word	0x08028e4c

08011100 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011100:	b580      	push	{r7, lr}
 8011102:	af00      	add	r7, sp, #0
 8011104:	4801      	ldr	r0, [pc, #4]	; (801110c <__tcf_0+0xc>)
 8011106:	f000 f969 	bl	80113dc <_ZN12FrontendHeapD1Ev>
 801110a:	bd80      	pop	{r7, pc}
 801110c:	20023ca8 	.word	0x20023ca8

08011110 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8011110:	b580      	push	{r7, lr}
 8011112:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8011114:	4b11      	ldr	r3, [pc, #68]	; (801115c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	f3bf 8f5b 	dmb	ish
 801111c:	f003 0301 	and.w	r3, r3, #1
 8011120:	2b00      	cmp	r3, #0
 8011122:	bf0c      	ite	eq
 8011124:	2301      	moveq	r3, #1
 8011126:	2300      	movne	r3, #0
 8011128:	b2db      	uxtb	r3, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	d013      	beq.n	8011156 <_ZN12FrontendHeap11getInstanceEv+0x46>
 801112e:	480b      	ldr	r0, [pc, #44]	; (801115c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8011130:	f015 f949 	bl	80263c6 <__cxa_guard_acquire>
 8011134:	4603      	mov	r3, r0
 8011136:	2b00      	cmp	r3, #0
 8011138:	bf14      	ite	ne
 801113a:	2301      	movne	r3, #1
 801113c:	2300      	moveq	r3, #0
 801113e:	b2db      	uxtb	r3, r3
 8011140:	2b00      	cmp	r3, #0
 8011142:	d008      	beq.n	8011156 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8011144:	4806      	ldr	r0, [pc, #24]	; (8011160 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8011146:	f000 f867 	bl	8011218 <_ZN12FrontendHeapC1Ev>
 801114a:	4806      	ldr	r0, [pc, #24]	; (8011164 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 801114c:	f015 f986 	bl	802645c <atexit>
 8011150:	4802      	ldr	r0, [pc, #8]	; (801115c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8011152:	f015 f944 	bl	80263de <__cxa_guard_release>
        return instance;
 8011156:	4b02      	ldr	r3, [pc, #8]	; (8011160 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8011158:	4618      	mov	r0, r3
 801115a:	bd80      	pop	{r7, pc}
 801115c:	2002402c 	.word	0x2002402c
 8011160:	20023ca8 	.word	0x20023ca8
 8011164:	08011101 	.word	0x08011101

08011168 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	4a05      	ldr	r2, [pc, #20]	; (8011188 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	601a      	str	r2, [r3, #0]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff fe63 	bl	8010e44 <_ZN8touchgfx7MVPHeapD1Ev>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	4618      	mov	r0, r3
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	08028e4c 	.word	0x08028e4c

0801118c <_ZN16FrontendHeapBaseD0Ev>:
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f7ff ffe7 	bl	8011168 <_ZN16FrontendHeapBaseD1Ev>
 801119a:	2114      	movs	r1, #20
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f015 f910 	bl	80263c2 <_ZdlPvj>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	4618      	mov	r0, r3
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	4618      	mov	r0, r3
 80111b8:	f000 ff58 	bl	801206c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80111bc:	4a03      	ldr	r2, [pc, #12]	; (80111cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	601a      	str	r2, [r3, #0]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	4618      	mov	r0, r3
 80111c6:	3708      	adds	r7, #8
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	08028e18 	.word	0x08028e18

080111d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4618      	mov	r0, r3
 80111dc:	f000 ff46 	bl	801206c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80111e0:	4a03      	ldr	r2, [pc, #12]	; (80111f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	601a      	str	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4618      	mov	r0, r3
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	08028de4 	.word	0x08028de4

080111f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	4618      	mov	r0, r3
 8011200:	f000 ff34 	bl	801206c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011204:	4a03      	ldr	r2, [pc, #12]	; (8011214 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	601a      	str	r2, [r3, #0]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4618      	mov	r0, r3
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	08028db0 	.word	0x08028db0

08011218 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011218:	b590      	push	{r4, r7, lr}
 801121a:	b085      	sub	sp, #20
 801121c:	af02      	add	r7, sp, #8
 801121e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f103 0114 	add.w	r1, r3, #20
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f503 7404 	add.w	r4, r3, #528	; 0x210
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f503 730a 	add.w	r3, r3, #552	; 0x228
                     app(model, *this)
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	4623      	mov	r3, r4
 801123e:	f7ff ff45 	bl	80110cc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8011242:	4a18      	ldr	r2, [pc, #96]	; (80112a4 <_ZN12FrontendHeapC1Ev+0x8c>)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	601a      	str	r2, [r3, #0]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	3314      	adds	r3, #20
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff ffad 	bl	80111ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	332c      	adds	r3, #44	; 0x2c
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff ffba 	bl	80111d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8011262:	4618      	mov	r0, r3
 8011264:	f7ff ffc6 	bl	80111f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 801126e:	4618      	mov	r0, r3
 8011270:	f7fe ff8e 	bl	8010190 <_ZN5ModelC1Ev>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f503 700a 	add.w	r0, r3, #552	; 0x228
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	4619      	mov	r1, r3
 8011284:	f7fe ff6e 	bl	8010164 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8011290:	4619      	mov	r1, r3
 8011292:	4610      	mov	r0, r2
 8011294:	f7ff ff0c 	bl	80110b0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	4618      	mov	r0, r3
 801129c:	370c      	adds	r7, #12
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd90      	pop	{r4, r7, pc}
 80112a2:	bf00      	nop
 80112a4:	08028d9c 	.word	0x08028d9c

080112a8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b086      	sub	sp, #24
 80112ac:	af02      	add	r7, sp, #8
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
 80112b4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	8bbb      	ldrh	r3, [r7, #28]
 80112ba:	9301      	str	r3, [sp, #4]
 80112bc:	8b3b      	ldrh	r3, [r7, #24]
 80112be:	9300      	str	r3, [sp, #0]
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	687a      	ldr	r2, [r7, #4]
 80112c4:	68b9      	ldr	r1, [r7, #8]
 80112c6:	f7ff fe33 	bl	8010f30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80112ca:	4a04      	ldr	r2, [pc, #16]	; (80112dc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	601a      	str	r2, [r3, #0]
    }
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	4618      	mov	r0, r3
 80112d4:	3710      	adds	r7, #16
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	08028e9c 	.word	0x08028e9c

080112e0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af02      	add	r7, sp, #8
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	60b9      	str	r1, [r7, #8]
 80112ea:	607a      	str	r2, [r7, #4]
 80112ec:	603b      	str	r3, [r7, #0]
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	8bbb      	ldrh	r3, [r7, #28]
 80112f2:	9301      	str	r3, [sp, #4]
 80112f4:	8b3b      	ldrh	r3, [r7, #24]
 80112f6:	9300      	str	r3, [sp, #0]
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	68b9      	ldr	r1, [r7, #8]
 80112fe:	f7ff ffd3 	bl	80112a8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011302:	4a04      	ldr	r2, [pc, #16]	; (8011314 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	601a      	str	r2, [r3, #0]
    }
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	4618      	mov	r0, r3
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	08028c50 	.word	0x08028c50

08011318 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8011318:	b480      	push	{r7}
 801131a:	b083      	sub	sp, #12
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	4a04      	ldr	r2, [pc, #16]	; (8011334 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	601a      	str	r2, [r3, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4618      	mov	r0, r3
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr
 8011334:	08028c38 	.word	0x08028c38

08011338 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	4618      	mov	r0, r3
 8011344:	f7ff ffe8 	bl	8011318 <_ZN8touchgfx15TouchControllerC1Ev>
 8011348:	4a03      	ldr	r2, [pc, #12]	; (8011358 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	601a      	str	r2, [r3, #0]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4618      	mov	r0, r3
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	08028c20 	.word	0x08028c20

0801135c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 320, 240);

void touchgfx_init()
{
 801135c:	b590      	push	{r4, r7, lr}
 801135e:	b085      	sub	sp, #20
 8011360:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8011362:	f7fe fccf 	bl	800fd04 <_ZN14BitmapDatabase11getInstanceEv>
 8011366:	4604      	mov	r4, r0
 8011368:	f7fe fcd6 	bl	800fd18 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801136c:	4603      	mov	r3, r0
 801136e:	4619      	mov	r1, r3
 8011370:	2300      	movs	r3, #0
 8011372:	9300      	str	r3, [sp, #0]
 8011374:	2300      	movs	r3, #0
 8011376:	2200      	movs	r2, #0
 8011378:	4620      	mov	r0, r4
 801137a:	f007 fbdd 	bl	8018b38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801137e:	4809      	ldr	r0, [pc, #36]	; (80113a4 <touchgfx_init+0x48>)
 8011380:	f7ff fd30 	bl	8010de4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8011384:	2000      	movs	r0, #0
 8011386:	f7fe fe0b 	bl	800ffa0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801138a:	4807      	ldr	r0, [pc, #28]	; (80113a8 <touchgfx_init+0x4c>)
 801138c:	f007 fb3c 	bl	8018a08 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8011390:	f7ff febe 	bl	8011110 <_ZN12FrontendHeap11getInstanceEv>
 8011394:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8011396:	4805      	ldr	r0, [pc, #20]	; (80113ac <touchgfx_init+0x50>)
 8011398:	f7ff faa6 	bl	80108e8 <_ZN11TouchGFXHAL10initializeEv>
}
 801139c:	bf00      	nop
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd90      	pop	{r4, r7, pc}
 80113a4:	200240fc 	.word	0x200240fc
 80113a8:	2000026c 	.word	0x2000026c
 80113ac:	20024100 	.word	0x20024100

080113b0 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80113b0:	b480      	push	{r7}
 80113b2:	af00      	add	r7, sp, #0
}
 80113b4:	bf00      	nop
 80113b6:	46bd      	mov	sp, r7
 80113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113bc:	4770      	bx	lr
	...

080113c0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	af00      	add	r7, sp, #0
    /*
     * Main event loop will check for VSYNC signal, and then process next frame.
     *
     * Note This function returns immediately if there is no VSYNC signal.
     */
     if (OSWrappers::isVSyncAvailable())
 80113c4:	f7ff fba6 	bl	8010b14 <_ZN8touchgfx10OSWrappers16isVSyncAvailableEv>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d002      	beq.n	80113d4 <touchgfx_taskEntry+0x14>
     {
         hal.backPorchExited();
 80113ce:	4802      	ldr	r0, [pc, #8]	; (80113d8 <touchgfx_taskEntry+0x18>)
 80113d0:	f7ff f95c 	bl	801068c <_ZN8touchgfx3HAL15backPorchExitedEv>
     }
}
 80113d4:	bf00      	nop
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	20024100 	.word	0x20024100

080113dc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	4a10      	ldr	r2, [pc, #64]	; (8011428 <_ZN12FrontendHeapD1Ev+0x4c>)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	601a      	str	r2, [r3, #0]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fe fe81 	bl	80100f8 <_ZN19FrontendApplicationD1Ev>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80113fc:	4618      	mov	r0, r3
 80113fe:	f000 f827 	bl	8011450 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	332c      	adds	r3, #44	; 0x2c
 8011406:	4618      	mov	r0, r3
 8011408:	f000 f844 	bl	8011494 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	3314      	adds	r3, #20
 8011410:	4618      	mov	r0, r3
 8011412:	f000 f863 	bl	80114dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	4618      	mov	r0, r3
 801141a:	f7ff fea5 	bl	8011168 <_ZN16FrontendHeapBaseD1Ev>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	4618      	mov	r0, r3
 8011422:	3708      	adds	r7, #8
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}
 8011428:	08028d9c 	.word	0x08028d9c

0801142c <_ZN12FrontendHeapD0Ev>:
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f7ff ffd1 	bl	80113dc <_ZN12FrontendHeapD1Ev>
 801143a:	f44f 7161 	mov.w	r1, #900	; 0x384
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f014 ffbf 	bl	80263c2 <_ZdlPvj>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	4618      	mov	r0, r3
 8011448:	3708      	adds	r7, #8
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
	...

08011450 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	4a05      	ldr	r2, [pc, #20]	; (8011470 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	601a      	str	r2, [r3, #0]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4618      	mov	r0, r3
 8011462:	f000 fe02 	bl	801206a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4618      	mov	r0, r3
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}
 8011470:	08028db0 	.word	0x08028db0

08011474 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7ff ffe7 	bl	8011450 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011482:	2114      	movs	r1, #20
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f014 ff9c 	bl	80263c2 <_ZdlPvj>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	4618      	mov	r0, r3
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	4a05      	ldr	r2, [pc, #20]	; (80114b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	601a      	str	r2, [r3, #0]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4618      	mov	r0, r3
 80114a6:	f000 fde0 	bl	801206a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4618      	mov	r0, r3
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	08028de4 	.word	0x08028de4

080114b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f7ff ffe7 	bl	8011494 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80114c6:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f014 ff79 	bl	80263c2 <_ZdlPvj>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	4618      	mov	r0, r3
 80114d4:	3708      	adds	r7, #8
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
	...

080114dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	4a05      	ldr	r2, [pc, #20]	; (80114fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	601a      	str	r2, [r3, #0]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4618      	mov	r0, r3
 80114ee:	f000 fdbc 	bl	801206a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	4618      	mov	r0, r3
 80114f6:	3708      	adds	r7, #8
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	08028e18 	.word	0x08028e18

08011500 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f7ff ffe7 	bl	80114dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801150e:	2118      	movs	r1, #24
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f014 ff56 	bl	80263c2 <_ZdlPvj>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	4618      	mov	r0, r3
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	4a05      	ldr	r2, [pc, #20]	; (8011540 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4618      	mov	r0, r3
 8011532:	f7ff fca7 	bl	8010e84 <_ZN8touchgfx3LCDD1Ev>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	4618      	mov	r0, r3
 801153a:	3708      	adds	r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	080299d8 	.word	0x080299d8

08011544 <_ZN8touchgfx8LCD16bppD0Ev>:
 8011544:	b580      	push	{r7, lr}
 8011546:	b082      	sub	sp, #8
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f7ff ffe7 	bl	8011520 <_ZN8touchgfx8LCD16bppD1Ev>
 8011552:	2184      	movs	r1, #132	; 0x84
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f014 ff34 	bl	80263c2 <_ZdlPvj>
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4618      	mov	r0, r3
 801155e:	3708      	adds	r7, #8
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <_Z41__static_initialization_and_destruction_0ii>:
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af02      	add	r7, sp, #8
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2b01      	cmp	r3, #1
 8011572:	d118      	bne.n	80115a6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801157a:	4293      	cmp	r3, r2
 801157c:	d113      	bne.n	80115a6 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 801157e:	4817      	ldr	r0, [pc, #92]	; (80115dc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8011580:	f7ff feda 	bl	8011338 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8011584:	4816      	ldr	r0, [pc, #88]	; (80115e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8011586:	f7ff fb8f 	bl	8010ca8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801158a:	4816      	ldr	r0, [pc, #88]	; (80115e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801158c:	f00b fd98 	bl	801d0c0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 320, 240);
 8011590:	23f0      	movs	r3, #240	; 0xf0
 8011592:	9301      	str	r3, [sp, #4]
 8011594:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8011598:	9300      	str	r3, [sp, #0]
 801159a:	4b10      	ldr	r3, [pc, #64]	; (80115dc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801159c:	4a11      	ldr	r2, [pc, #68]	; (80115e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801159e:	4910      	ldr	r1, [pc, #64]	; (80115e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80115a0:	4811      	ldr	r0, [pc, #68]	; (80115e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80115a2:	f7ff fe9d 	bl	80112e0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d113      	bne.n	80115d4 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d10e      	bne.n	80115d4 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80115b6:	480c      	ldr	r0, [pc, #48]	; (80115e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80115b8:	f7ff fa26 	bl	8010a08 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80115bc:	480b      	ldr	r0, [pc, #44]	; (80115ec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80115be:	f7fc f82b 	bl	800d618 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80115c2:	4808      	ldr	r0, [pc, #32]	; (80115e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80115c4:	f7ff ffac 	bl	8011520 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80115c8:	4805      	ldr	r0, [pc, #20]	; (80115e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80115ca:	f7ff fbc1 	bl	8010d50 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80115ce:	4803      	ldr	r0, [pc, #12]	; (80115dc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80115d0:	f7fe ff62 	bl	8010498 <_ZN20STM32TouchControllerD1Ev>
}
 80115d4:	bf00      	nop
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	20024030 	.word	0x20024030
 80115e0:	20024034 	.word	0x20024034
 80115e4:	20024078 	.word	0x20024078
 80115e8:	20024100 	.word	0x20024100
 80115ec:	2000026c 	.word	0x2000026c

080115f0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80115f0:	b480      	push	{r7}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80115f8:	2301      	movs	r3, #1
    }
 80115fa:	4618      	mov	r0, r3
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr

08011606 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8011606:	b480      	push	{r7}
 8011608:	b083      	sub	sp, #12
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801160e:	230c      	movs	r3, #12
    }
 8011610:	4618      	mov	r0, r3
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	460b      	mov	r3, r1
 8011626:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8011628:	887a      	ldrh	r2, [r7, #2]
 801162a:	4613      	mov	r3, r2
 801162c:	005b      	lsls	r3, r3, #1
 801162e:	4413      	add	r3, r2
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	3308      	adds	r3, #8
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	4413      	add	r3, r2
    }
 8011638:	4618      	mov	r0, r3
 801163a:	370c      	adds	r7, #12
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr

08011644 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8011644:	b480      	push	{r7}
 8011646:	b083      	sub	sp, #12
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	460b      	mov	r3, r1
 801164e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8011650:	887a      	ldrh	r2, [r7, #2]
 8011652:	4613      	mov	r3, r2
 8011654:	005b      	lsls	r3, r3, #1
 8011656:	4413      	add	r3, r2
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	3308      	adds	r3, #8
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	4413      	add	r3, r2
    }
 8011660:	4618      	mov	r0, r3
 8011662:	370c      	adds	r7, #12
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr

0801166c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8011674:	2301      	movs	r3, #1
    }
 8011676:	4618      	mov	r0, r3
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr

08011682 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011682:	b480      	push	{r7}
 8011684:	b083      	sub	sp, #12
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801168a:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
    }
 801168e:	4618      	mov	r0, r3
 8011690:	370c      	adds	r7, #12
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr

0801169a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801169a:	b480      	push	{r7}
 801169c:	b083      	sub	sp, #12
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
 80116a2:	460b      	mov	r3, r1
 80116a4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80116a6:	887b      	ldrh	r3, [r7, #2]
 80116a8:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 80116ac:	fb02 f303 	mul.w	r3, r2, r3
 80116b0:	3308      	adds	r3, #8
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	4413      	add	r3, r2
    }
 80116b6:	4618      	mov	r0, r3
 80116b8:	370c      	adds	r7, #12
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr

080116c2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80116c2:	b480      	push	{r7}
 80116c4:	b083      	sub	sp, #12
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
 80116ca:	460b      	mov	r3, r1
 80116cc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80116ce:	887b      	ldrh	r3, [r7, #2]
 80116d0:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 80116d4:	fb02 f303 	mul.w	r3, r2, r3
 80116d8:	3308      	adds	r3, #8
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	4413      	add	r3, r2
    }
 80116de:	4618      	mov	r0, r3
 80116e0:	370c      	adds	r7, #12
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr

080116ea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80116ea:	b480      	push	{r7}
 80116ec:	b083      	sub	sp, #12
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80116f2:	2301      	movs	r3, #1
    }
 80116f4:	4618      	mov	r0, r3
 80116f6:	370c      	adds	r7, #12
 80116f8:	46bd      	mov	sp, r7
 80116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fe:	4770      	bx	lr

08011700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011700:	b480      	push	{r7}
 8011702:	b083      	sub	sp, #12
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011708:	2310      	movs	r3, #16
    }
 801170a:	4618      	mov	r0, r3
 801170c:	370c      	adds	r7, #12
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr

08011716 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011716:	b480      	push	{r7}
 8011718:	b083      	sub	sp, #12
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
 801171e:	460b      	mov	r3, r1
 8011720:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011722:	887b      	ldrh	r3, [r7, #2]
 8011724:	011b      	lsls	r3, r3, #4
 8011726:	3308      	adds	r3, #8
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	4413      	add	r3, r2
    }
 801172c:	4618      	mov	r0, r3
 801172e:	370c      	adds	r7, #12
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	460b      	mov	r3, r1
 8011742:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011744:	887b      	ldrh	r3, [r7, #2]
 8011746:	011b      	lsls	r3, r3, #4
 8011748:	3308      	adds	r3, #8
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	4413      	add	r3, r2
    }
 801174e:	4618      	mov	r0, r3
 8011750:	370c      	adds	r7, #12
 8011752:	46bd      	mov	sp, r7
 8011754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011758:	4770      	bx	lr

0801175a <_GLOBAL__sub_I_touchgfx_init>:
 801175a:	b580      	push	{r7, lr}
 801175c:	af00      	add	r7, sp, #0
 801175e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011762:	2001      	movs	r0, #1
 8011764:	f7ff fefe 	bl	8011564 <_Z41__static_initialization_and_destruction_0ii>
 8011768:	bd80      	pop	{r7, pc}

0801176a <_GLOBAL__sub_D_touchgfx_init>:
 801176a:	b580      	push	{r7, lr}
 801176c:	af00      	add	r7, sp, #0
 801176e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011772:	2000      	movs	r0, #0
 8011774:	f7ff fef6 	bl	8011564 <_Z41__static_initialization_and_destruction_0ii>
 8011778:	bd80      	pop	{r7, pc}
	...

0801177c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
    {
 8011784:	4a04      	ldr	r2, [pc, #16]	; (8011798 <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x1c>)
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	601a      	str	r2, [r3, #0]
    }
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	4618      	mov	r0, r3
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr
 8011798:	08028f74 	.word	0x08028f74

0801179c <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
    }
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f7ff ffe9 	bl	801177c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 80117aa:	2104      	movs	r1, #4
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f014 fe08 	bl	80263c2 <_ZdlPvj>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4618      	mov	r0, r3
 80117b6:	3708      	adds	r7, #8
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80117ca:	3301      	adds	r3, #1
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 80117d4:	bf00      	nop
 80117d6:	370c      	adds	r7, #12
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	683a      	ldr	r2, [r7, #0]
 80117ee:	619a      	str	r2, [r3, #24]
    }
 80117f0:	bf00      	nop
 80117f2:	370c      	adds	r7, #12
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr

080117fc <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>:
    FrameBufferAllocator* getFrameBufferAllocator()
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
        return frameBufferAllocator;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	699b      	ldr	r3, [r3, #24]
    }
 8011808:	4618      	mov	r0, r3
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	460b      	mov	r3, r1
 801181e:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8011820:	78fb      	ldrb	r3, [r7, #3]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d002      	beq.n	801182c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8011826:	78fb      	ldrb	r3, [r7, #3]
 8011828:	2b02      	cmp	r3, #2
 801182a:	d105      	bne.n	8011838 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	78fa      	ldrb	r2, [r7, #3]
 8011830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8011834:	2301      	movs	r3, #1
 8011836:	e027      	b.n	8011888 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8011838:	78fb      	ldrb	r3, [r7, #3]
 801183a:	2b01      	cmp	r3, #1
 801183c:	d123      	bne.n	8011886 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011842:	2b00      	cmp	r3, #0
 8011844:	d014      	beq.n	8011870 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	339c      	adds	r3, #156	; 0x9c
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	4798      	blx	r3
 8011852:	4603      	mov	r3, r0
 8011854:	461a      	mov	r2, r3
 8011856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801185a:	429a      	cmp	r2, r3
 801185c:	d008      	beq.n	8011870 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801185e:	4b0c      	ldr	r3, [pc, #48]	; (8011890 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	f083 0301 	eor.w	r3, r3, #1
 8011866:	b2db      	uxtb	r3, r3
 8011868:	2b00      	cmp	r3, #0
 801186a:	d001      	beq.n	8011870 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801186c:	2301      	movs	r3, #1
 801186e:	e000      	b.n	8011872 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8011870:	2300      	movs	r3, #0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d005      	beq.n	8011882 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	78fa      	ldrb	r2, [r7, #3]
 801187a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801187e:	2301      	movs	r3, #1
 8011880:	e002      	b.n	8011888 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8011882:	2300      	movs	r3, #0
 8011884:	e000      	b.n	8011888 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8011886:	2300      	movs	r3, #0
    }
 8011888:	4618      	mov	r0, r3
 801188a:	3708      	adds	r7, #8
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	2002582e 	.word	0x2002582e

08011894 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
                   3, /* number of blocks */
                   2  /* bytes per pixel */
                   > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 8011894:	b5b0      	push	{r4, r5, r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	4618      	mov	r0, r3
 80118a0:	f000 fedb 	bl	801265a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80118a4:	687d      	ldr	r5, [r7, #4]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	3364      	adds	r3, #100	; 0x64
 80118ac:	681c      	ldr	r4, [r3, #0]
 80118ae:	f004 f859 	bl	8015964 <_ZN8touchgfx11Application11getInstanceEv>
 80118b2:	4603      	mov	r3, r0
 80118b4:	4619      	mov	r1, r3
 80118b6:	4628      	mov	r0, r5
 80118b8:	47a0      	blx	r4
    enableLCDControllerInterrupt();
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	3380      	adds	r3, #128	; 0x80
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	4798      	blx	r3
    enableInterrupts();
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	3378      	adds	r3, #120	; 0x78
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	4798      	blx	r3
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	4906      	ldr	r1, [pc, #24]	; (80118f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7ff ff82 	bl	80117e0 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2102      	movs	r1, #2
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7ff ff97 	bl	8011814 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 80118e6:	bf00      	nop
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bdb0      	pop	{r4, r5, r7, pc}
 80118ee:	bf00      	nop
 80118f0:	2002417c 	.word	0x2002417c

080118f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
}
 80118fc:	bf00      	nop
 80118fe:	370c      	adds	r7, #12
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr

08011908 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
}
 8011910:	bf00      	nop
 8011912:	370c      	adds	r7, #12
 8011914:	46bd      	mov	sp, r7
 8011916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191a:	4770      	bx	lr

0801191c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
}
 8011924:	bf00      	nop
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr

08011930 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8011930:	b480      	push	{r7}
 8011932:	b083      	sub	sp, #12
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
}
 8011938:	bf00      	nop
 801193a:	370c      	adds	r7, #12
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr

08011944 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	4618      	mov	r0, r3
 8011950:	f000 fe6a 	bl	8012628 <_ZN8touchgfx3HAL10beginFrameEv>
 8011954:	4603      	mov	r3, r0
}
 8011956:	4618      	mov	r0, r3
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b082      	sub	sp, #8
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
    // We must guard the next frame until we're done transferring all blocks over our display interface
    // through either a semaphore if user is running an OS or a simple variable if not
    // Wait until all blocks have been transmitted
    while (touchgfxDisplayDriverTransmitActive()){}
 8011966:	bf00      	nop
 8011968:	f7f3 fb58 	bl	800501c <touchgfxDisplayDriverTransmitActive>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	bf14      	ite	ne
 8011972:	2301      	movne	r3, #1
 8011974:	2300      	moveq	r3, #0
 8011976:	b2db      	uxtb	r3, r3
 8011978:	2b00      	cmp	r3, #0
 801197a:	d1f5      	bne.n	8011968 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xa>

    HAL::endFrame();
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	4618      	mov	r0, r3
 8011980:	f000 fe5e 	bl	8012640 <_ZN8touchgfx3HAL8endFrameEv>
    touchgfx::OSWrappers::signalRenderingDone();
 8011984:	f7ff f8ba 	bl	8010afc <_ZN8touchgfx10OSWrappers19signalRenderingDoneEv>
}
 8011988:	bf00      	nop
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}

08011990 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8011990:	b480      	push	{r7}
 8011992:	b083      	sub	sp, #12
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 8011998:	2300      	movs	r3, #0
}
 801199a:	4618      	mov	r0, r3
 801199c:	370c      	adds	r7, #12
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr

080119a6 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80119a6:	b480      	push	{r7}
 80119a8:	b083      	sub	sp, #12
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
 80119ae:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 80119b0:	bf00      	nop
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b088      	sub	sp, #32
 80119c0:	af02      	add	r7, sp, #8
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6839      	ldr	r1, [r7, #0]
 80119ca:	4618      	mov	r0, r3
 80119cc:	f000 fdf6 	bl	80125bc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // Once flushFrameBuffer() is called by the framework a block is already for transfer
    // Mark it ready for transfer and transmit it if user defined method isTransmittingData() does not return false
    // If data is not being transmitted, transfer the data with user defined method transmitFrameBufferBlock().
    frameBufferAllocator->markBlockReadyForTransfer();
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	699a      	ldr	r2, [r3, #24]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	699b      	ldr	r3, [r3, #24]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	3304      	adds	r3, #4
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	4610      	mov	r0, r2
 80119e0:	4798      	blx	r3
    if (!touchgfxDisplayDriverTransmitActive())
 80119e2:	f7f3 fb1b 	bl	800501c <touchgfxDisplayDriverTransmitActive>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	bf0c      	ite	eq
 80119ec:	2301      	moveq	r3, #1
 80119ee:	2300      	movne	r3, #0
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d021      	beq.n	8011a3a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x7e>
    {
        touchgfx::Rect r;
 80119f6:	f107 030c 	add.w	r3, r7, #12
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fc fe45 	bl	800e68a <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = frameBufferAllocator->getBlockForTransfer(r);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	699a      	ldr	r2, [r3, #24]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	699b      	ldr	r3, [r3, #24]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	330c      	adds	r3, #12
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f107 010c 	add.w	r1, r7, #12
 8011a12:	4610      	mov	r0, r2
 8011a14:	4798      	blx	r3
 8011a16:	6178      	str	r0, [r7, #20]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8011a18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011a1c:	b299      	uxth	r1, r3
 8011a1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011a22:	b29a      	uxth	r2, r3
 8011a24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011a28:	b298      	uxth	r0, r3
 8011a2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	9300      	str	r3, [sp, #0]
 8011a32:	4603      	mov	r3, r0
 8011a34:	6978      	ldr	r0, [r7, #20]
 8011a36:	f7f3 fb03 	bl	8005040 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8011a3a:	bf00      	nop
 8011a3c:	3718      	adds	r7, #24
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}

08011a42 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011a42:	b580      	push	{r7, lr}
 8011a44:	b084      	sub	sp, #16
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	60f8      	str	r0, [r7, #12]
 8011a4a:	60b9      	str	r1, [r7, #8]
 8011a4c:	607a      	str	r2, [r7, #4]
 8011a4e:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	68b9      	ldr	r1, [r7, #8]
 8011a58:	f000 ff21 	bl	801289e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8011a5c:	4603      	mov	r3, r0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
void FrameBufferAllocatorWaitOnTransfer()
{
 8011a66:	b480      	push	{r7}
 8011a68:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
   */
}
 8011a6a:	bf00      	nop
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr

08011a74 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
void FrameBufferAllocatorSignalBlockDrawn()
{
 8011a74:	b480      	push	{r7}
 8011a76:	af00      	add	r7, sp, #0
  /* NOTE: This function should not be modified, when the fuction is needed,
   *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
   */
}
 8011a78:	bf00      	nop
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a80:	4770      	bx	lr

08011a82 <_ZN8touchgfx16startNewTransferEv>:

// A user must call touchgfx::startNewTransfer(); once transmitFrameBufferBlock() has successfully sent a block.
void startNewTransfer()
{
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b086      	sub	sp, #24
 8011a86:	af02      	add	r7, sp, #8
    FrameBufferAllocator* fba = HAL::getInstance()->getFrameBufferAllocator();
 8011a88:	f7fc f966 	bl	800dd58 <_ZN8touchgfx3HAL11getInstanceEv>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7ff feb4 	bl	80117fc <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>
 8011a94:	60f8      	str	r0, [r7, #12]

  // Free the previous transmitted block, marking it ready for rendering
    fba->freeBlockAfterTransfer();
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	3318      	adds	r3, #24
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	68f8      	ldr	r0, [r7, #12]
 8011aa0:	4798      	blx	r3
    if (fba->hasBlockReadyForTransfer())
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	3308      	adds	r3, #8
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	68f8      	ldr	r0, [r7, #12]
 8011aac:	4798      	blx	r3
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d01d      	beq.n	8011af0 <_ZN8touchgfx16startNewTransferEv+0x6e>
    {
        touchgfx::Rect r;
 8011ab4:	463b      	mov	r3, r7
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7fc fde7 	bl	800e68a <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = fba->getBlockForTransfer(r);
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	330c      	adds	r3, #12
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	463a      	mov	r2, r7
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	4798      	blx	r3
 8011acc:	60b8      	str	r0, [r7, #8]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8011ace:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011ad2:	b299      	uxth	r1, r3
 8011ad4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011ad8:	b29a      	uxth	r2, r3
 8011ada:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011ade:	b298      	uxth	r0, r3
 8011ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	9300      	str	r3, [sp, #0]
 8011ae8:	4603      	mov	r3, r0
 8011aea:	68b8      	ldr	r0, [r7, #8]
 8011aec:	f7f3 faa8 	bl	8005040 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8011af0:	bf00      	nop
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	af00      	add	r7, sp, #0
  // After completed transmission start new transfer if blocks are ready.
    touchgfx::startNewTransfer();
 8011afc:	f7ff ffc1 	bl	8011a82 <_ZN8touchgfx16startNewTransferEv>
}
 8011b00:	bf00      	nop
 8011b02:	bd80      	pop	{r7, pc}

08011b04 <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 8011b08:	f7fc f926 	bl	800dd58 <_ZN8touchgfx3HAL11getInstanceEv>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7ff fe54 	bl	80117bc <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 8011b14:	f7fe ffe6 	bl	8010ae4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8011b18:	bf00      	nop
 8011b1a:	bd80      	pop	{r7, pc}

08011b1c <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 8011b1c:	b480      	push	{r7}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	4a04      	ldr	r2, [pc, #16]	; (8011b38 <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x1c>)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	601a      	str	r2, [r3, #0]
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr
 8011b38:	08028f74 	.word	0x08028f74

08011b3c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 8011b3c:	b5b0      	push	{r4, r5, r7, lr}
 8011b3e:	b084      	sub	sp, #16
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
    {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7ff ffe8 	bl	8011b1c <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 8011b4c:	4a1a      	ldr	r2, [pc, #104]	; (8011bb8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x7c>)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8011b58:	3308      	adds	r3, #8
 8011b5a:	2402      	movs	r4, #2
 8011b5c:	461d      	mov	r5, r3
 8011b5e:	e004      	b.n	8011b6a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x2e>
 8011b60:	4628      	mov	r0, r5
 8011b62:	f7fc fd92 	bl	800e68a <_ZN8touchgfx4RectC1Ev>
 8011b66:	3508      	adds	r5, #8
 8011b68:	3c01      	subs	r4, #1
 8011b6a:	2c00      	cmp	r4, #0
 8011b6c:	daf8      	bge.n	8011b60 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x24>
        sendingBlock = -1;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b74:	461a      	mov	r2, r3
 8011b76:	f04f 33ff 	mov.w	r3, #4294967295
 8011b7a:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        drawingBlock = -1;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b84:	461a      	mov	r2, r3
 8011b86:	f04f 33ff 	mov.w	r3, #4294967295
 8011b8a:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        for (uint32_t i = 0; i < blocks; i++)
 8011b8e:	2300      	movs	r3, #0
 8011b90:	60fb      	str	r3, [r7, #12]
 8011b92:	e008      	b.n	8011ba6 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x6a>
        {
            state[i] = EMPTY;
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	4413      	add	r3, r2
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	60fb      	str	r3, [r7, #12]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	d9f3      	bls.n	8011b94 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev+0x58>
        }
    }
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3710      	adds	r7, #16
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	08028e70 	.word	0x08028e70

08011bbc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	4a05      	ldr	r2, [pc, #20]	; (8011bdc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev+0x20>)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	601a      	str	r2, [r3, #0]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7ff fdd5 	bl	801177c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3708      	adds	r7, #8
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	08028e70 	.word	0x08028e70

08011be0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED0Ev>:
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7ff ffe7 	bl	8011bbc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
 8011bee:	f241 61a8 	movw	r1, #5800	; 0x16a8
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f014 fbe5 	bl	80263c2 <_ZdlPvj>
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
	...

08011c04 <_Z41__static_initialization_and_destruction_0ii>:
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d107      	bne.n	8011c24 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d102      	bne.n	8011c24 <_Z41__static_initialization_and_destruction_0ii+0x20>
                   > blockAllocator;
 8011c1e:	4809      	ldr	r0, [pc, #36]	; (8011c44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011c20:	f7ff ff8c 	bl	8011b3c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EEC1Ev>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d107      	bne.n	8011c3a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d102      	bne.n	8011c3a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8011c34:	4803      	ldr	r0, [pc, #12]	; (8011c44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011c36:	f7ff ffc1 	bl	8011bbc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EED1Ev>
}
 8011c3a:	bf00      	nop
 8011c3c:	3708      	adds	r7, #8
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	2002417c 	.word	0x2002417c

08011c48 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b086      	sub	sp, #24
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	4608      	mov	r0, r1
 8011c52:	4611      	mov	r1, r2
 8011c54:	461a      	mov	r2, r3
 8011c56:	4603      	mov	r3, r0
 8011c58:	817b      	strh	r3, [r7, #10]
 8011c5a:	460b      	mov	r3, r1
 8011c5c:	813b      	strh	r3, [r7, #8]
 8011c5e:	4613      	mov	r3, r2
 8011c60:	80fb      	strh	r3, [r7, #6]
    {
        drawingBlock++;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c68:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011c74:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        if (drawingBlock == blocks)
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c7e:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011c82:	2b03      	cmp	r3, #3
 8011c84:	d109      	bne.n	8011c9a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x52>
        {
            drawingBlock = 0;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	2300      	movs	r3, #0
 8011c90:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
        }
        while (state[drawingBlock] != EMPTY)
 8011c94:	e001      	b.n	8011c9a <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x52>
        {
            FrameBufferAllocatorWaitOnTransfer();
 8011c96:	f7ff fee6 	bl	8011a66 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ca0:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011ca4:	68fa      	ldr	r2, [r7, #12]
 8011ca6:	4413      	add	r3, r2
 8011ca8:	791b      	ldrb	r3, [r3, #4]
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	bf14      	ite	ne
 8011cb0:	2301      	movne	r3, #1
 8011cb2:	2300      	moveq	r3, #0
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1ed      	bne.n	8011c96 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x4e>
        }
        assert(state[drawingBlock] == EMPTY);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cc0:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011cc4:	68fa      	ldr	r2, [r7, #12]
 8011cc6:	4413      	add	r3, r2
 8011cc8:	791b      	ldrb	r3, [r3, #4]
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d005      	beq.n	8011cdc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x94>
 8011cd0:	4b38      	ldr	r3, [pc, #224]	; (8011db4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x16c>)
 8011cd2:	4a39      	ldr	r2, [pc, #228]	; (8011db8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x170>)
 8011cd4:	21aa      	movs	r1, #170	; 0xaa
 8011cd6:	4839      	ldr	r0, [pc, #228]	; (8011dbc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13allocateBlockEttttPPh+0x174>)
 8011cd8:	f014 fba2 	bl	8026420 <__assert_func>
        state[drawingBlock] = ALLOCATED;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ce2:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011ce6:	68fa      	ldr	r2, [r7, #12]
 8011ce8:	4413      	add	r3, r2
 8011cea:	2201      	movs	r2, #1
 8011cec:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 8011cee:	88fb      	ldrh	r3, [r7, #6]
 8011cf0:	005b      	lsls	r3, r3, #1
 8011cf2:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8011cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cfe:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d06:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 8011d0a:	4613      	mov	r3, r2
 8011d0c:	011b      	lsls	r3, r3, #4
 8011d0e:	1a9b      	subs	r3, r3, r2
 8011d10:	01db      	lsls	r3, r3, #7
 8011d12:	3308      	adds	r3, #8
 8011d14:	68fa      	ldr	r2, [r7, #12]
 8011d16:	441a      	add	r2, r3
 8011d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1a:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d22:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 8011d26:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	f202 22d1 	addw	r2, r2, #721	; 0x2d1
 8011d30:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
        blockRect[drawingBlock].y = y;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d3a:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011d3e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8011d42:	68fa      	ldr	r2, [r7, #12]
 8011d44:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011d48:	00db      	lsls	r3, r3, #3
 8011d4a:	4413      	add	r3, r2
 8011d4c:	460a      	mov	r2, r1
 8011d4e:	805a      	strh	r2, [r3, #2]
        blockRect[drawingBlock].width = width;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d56:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011d5a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8011d5e:	68fa      	ldr	r2, [r7, #12]
 8011d60:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011d64:	00db      	lsls	r3, r3, #3
 8011d66:	4413      	add	r3, r2
 8011d68:	460a      	mov	r2, r1
 8011d6a:	809a      	strh	r2, [r3, #4]
        blockRect[drawingBlock].height = MIN(height, lines);
 8011d6c:	8c3a      	ldrh	r2, [r7, #32]
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	429a      	cmp	r2, r3
 8011d72:	bfa8      	it	ge
 8011d74:	461a      	movge	r2, r3
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d7c:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011d80:	b211      	sxth	r1, r2
 8011d82:	68fa      	ldr	r2, [r7, #12]
 8011d84:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011d88:	00db      	lsls	r3, r3, #3
 8011d8a:	4413      	add	r3, r2
 8011d8c:	460a      	mov	r2, r1
 8011d8e:	80da      	strh	r2, [r3, #6]
        return blockRect[drawingBlock].height;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d96:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011d9a:	68fa      	ldr	r2, [r7, #12]
 8011d9c:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011da0:	00db      	lsls	r3, r3, #3
 8011da2:	4413      	add	r3, r2
 8011da4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011da8:	b29b      	uxth	r3, r3
    }
 8011daa:	4618      	mov	r0, r3
 8011dac:	3718      	adds	r7, #24
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	08027f54 	.word	0x08027f54
 8011db8:	08027f74 	.word	0x08027f74
 8011dbc:	080280a8 	.word	0x080280a8

08011dc0 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dce:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	791b      	ldrb	r3, [r3, #4]
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d005      	beq.n	8011dea <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x2a>
 8011dde:	4b0a      	ldr	r3, [pc, #40]	; (8011e08 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 8011de0:	4a0a      	ldr	r2, [pc, #40]	; (8011e0c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 8011de2:	21b9      	movs	r1, #185	; 0xb9
 8011de4:	480a      	ldr	r0, [pc, #40]	; (8011e10 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE25markBlockReadyForTransferEv+0x50>)
 8011de6:	f014 fb1b 	bl	8026420 <__assert_func>
        state[drawingBlock] = DRAWN;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011df0:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	4413      	add	r3, r2
 8011df8:	2202      	movs	r2, #2
 8011dfa:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 8011dfc:	f7ff fe3a 	bl	8011a74 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 8011e00:	bf00      	nop
 8011e02:	3708      	adds	r7, #8
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	080280fc 	.word	0x080280fc
 8011e0c:	08028120 	.word	0x08028120
 8011e10:	080280a8 	.word	0x080280a8

08011e14 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 8011e14:	b480      	push	{r7}
 8011e16:	b085      	sub	sp, #20
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	60fb      	str	r3, [r7, #12]
 8011e20:	e011      	b.n	8011e46 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x32>
        {
            if (state[i] == DRAWN)
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	4413      	add	r3, r2
 8011e28:	3304      	adds	r3, #4
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	b2db      	uxtb	r3, r3
 8011e2e:	2b02      	cmp	r3, #2
 8011e30:	bf0c      	ite	eq
 8011e32:	2301      	moveq	r3, #1
 8011e34:	2300      	movne	r3, #0
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x2c>
            {
                return true;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	e006      	b.n	8011e4e <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0x3a>
        for (uint32_t i = 0; i < blocks; i++)
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	3301      	adds	r3, #1
 8011e44:	60fb      	str	r3, [r7, #12]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	d9ea      	bls.n	8011e22 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE24hasBlockReadyForTransferEv+0xe>
            }
        }
        return false;
 8011e4c:	2300      	movs	r3, #0
    }
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3714      	adds	r7, #20
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr
	...

08011e5c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e6c:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8011e70:	3301      	adds	r3, #1
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011e78:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        if (sendingBlock == blocks)
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e82:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8011e86:	2b03      	cmp	r3, #3
 8011e88:	d106      	bne.n	8011e98 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x3c>
        {
            sendingBlock = 0;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e90:	461a      	mov	r2, r3
 8011e92:	2300      	movs	r3, #0
 8011e94:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
        }
        assert(state[sendingBlock] == DRAWN);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011e9e:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8011ea2:	687a      	ldr	r2, [r7, #4]
 8011ea4:	4413      	add	r3, r2
 8011ea6:	791b      	ldrb	r3, [r3, #4]
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	2b02      	cmp	r3, #2
 8011eac:	d005      	beq.n	8011eba <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x5e>
 8011eae:	4b16      	ldr	r3, [pc, #88]	; (8011f08 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xac>)
 8011eb0:	4a16      	ldr	r2, [pc, #88]	; (8011f0c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb0>)
 8011eb2:	21dd      	movs	r1, #221	; 0xdd
 8011eb4:	4816      	ldr	r0, [pc, #88]	; (8011f10 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xb4>)
 8011eb6:	f014 fab3 	bl	8026420 <__assert_func>
        rect = blockRect[sendingBlock];
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ec0:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8011ec4:	683a      	ldr	r2, [r7, #0]
 8011ec6:	6879      	ldr	r1, [r7, #4]
 8011ec8:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011ecc:	00db      	lsls	r3, r3, #3
 8011ece:	440b      	add	r3, r1
 8011ed0:	cb03      	ldmia	r3!, {r0, r1}
 8011ed2:	6010      	str	r0, [r2, #0]
 8011ed4:	6051      	str	r1, [r2, #4]
        state[sendingBlock] = SENDING;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011edc:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	2203      	movs	r2, #3
 8011ee6:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011eee:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	011b      	lsls	r3, r3, #4
 8011ef6:	1a9b      	subs	r3, r3, r2
 8011ef8:	01db      	lsls	r3, r3, #7
 8011efa:	3308      	adds	r3, #8
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	4413      	add	r3, r2
    }
 8011f00:	4618      	mov	r0, r3
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	080281f4 	.word	0x080281f4
 8011f0c:	08028214 	.word	0x08028214
 8011f10:	080280a8 	.word	0x080280a8

08011f14 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f22:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8011f26:	3301      	adds	r3, #1
 8011f28:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2b03      	cmp	r3, #3
 8011f2e:	d101      	bne.n	8011f34 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x20>
        {
            nextSendingBlock = 0;
 8011f30:	2300      	movs	r3, #0
 8011f32:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	4413      	add	r3, r2
 8011f3a:	3304      	adds	r3, #4
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	2b02      	cmp	r3, #2
 8011f42:	d005      	beq.n	8011f50 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x3c>
 8011f44:	4b07      	ldr	r3, [pc, #28]	; (8011f64 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 8011f46:	4a08      	ldr	r2, [pc, #32]	; (8011f68 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 8011f48:	21ea      	movs	r1, #234	; 0xea
 8011f4a:	4808      	ldr	r0, [pc, #32]	; (8011f6c <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 8011f4c:	f014 fa68 	bl	8026420 <__assert_func>
        return blockRect[nextSendingBlock];
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8011f56:	00db      	lsls	r3, r3, #3
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	4413      	add	r3, r2
    }
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3710      	adds	r7, #16
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	08028314 	.word	0x08028314
 8011f68:	08028338 	.word	0x08028338
 8011f6c:	080280a8 	.word	0x080280a8

08011f70 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 8011f70:	b480      	push	{r7}
 8011f72:	b085      	sub	sp, #20
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f7e:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8011f82:	3301      	adds	r3, #1
 8011f84:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2b03      	cmp	r3, #3
 8011f8a:	d101      	bne.n	8011f90 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE13hasEmptyBlockEv+0x20>
        {
            nextDrawingBlock = 0;
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 8011f90:	687a      	ldr	r2, [r7, #4]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	4413      	add	r3, r2
 8011f96:	3304      	adds	r3, #4
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	bf0c      	ite	eq
 8011fa0:	2301      	moveq	r3, #1
 8011fa2:	2300      	movne	r3, #0
 8011fa4:	b2db      	uxtb	r3, r3
    }
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3714      	adds	r7, #20
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr
	...

08011fb4 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fc2:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	4413      	add	r3, r2
 8011fca:	791b      	ldrb	r3, [r3, #4]
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	2b03      	cmp	r3, #3
 8011fd0:	d005      	beq.n	8011fde <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x2a>
 8011fd2:	4b09      	ldr	r3, [pc, #36]	; (8011ff8 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x44>)
 8011fd4:	4a09      	ldr	r2, [pc, #36]	; (8011ffc <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 8011fd6:	21ff      	movs	r1, #255	; 0xff
 8011fd8:	4809      	ldr	r0, [pc, #36]	; (8012000 <_ZN8touchgfx18ManyBlockAllocatorILm1920ELm3ELm2EE22freeBlockAfterTransferEv+0x4c>)
 8011fda:	f014 fa21 	bl	8026420 <__assert_func>
        state[sendingBlock] = EMPTY;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fe4:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8011fe8:	687a      	ldr	r2, [r7, #4]
 8011fea:	4413      	add	r3, r2
 8011fec:	2200      	movs	r2, #0
 8011fee:	711a      	strb	r2, [r3, #4]
    }
 8011ff0:	bf00      	nop
 8011ff2:	3708      	adds	r7, #8
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	08028418 	.word	0x08028418
 8011ffc:	08028438 	.word	0x08028438
 8012000:	080280a8 	.word	0x080280a8

08012004 <_GLOBAL__sub_I__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8012004:	b580      	push	{r7, lr}
 8012006:	af00      	add	r7, sp, #0
 8012008:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801200c:	2001      	movs	r0, #1
 801200e:	f7ff fdf9 	bl	8011c04 <_Z41__static_initialization_and_destruction_0ii>
 8012012:	bd80      	pop	{r7, pc}

08012014 <_GLOBAL__sub_D__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8012014:	b580      	push	{r7, lr}
 8012016:	af00      	add	r7, sp, #0
 8012018:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801201c:	2000      	movs	r0, #0
 801201e:	f7ff fdf1 	bl	8011c04 <_Z41__static_initialization_and_destruction_0ii>
 8012022:	bd80      	pop	{r7, pc}

08012024 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012024:	8880      	ldrh	r0, [r0, #4]
 8012026:	4770      	bx	lr

08012028 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012028:	b570      	push	{r4, r5, r6, lr}
 801202a:	6803      	ldr	r3, [r0, #0]
 801202c:	4605      	mov	r5, r0
 801202e:	460c      	mov	r4, r1
 8012030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012032:	2100      	movs	r1, #0
 8012034:	4798      	blx	r3
 8012036:	682b      	ldr	r3, [r5, #0]
 8012038:	4606      	mov	r6, r0
 801203a:	6a1b      	ldr	r3, [r3, #32]
 801203c:	4628      	mov	r0, r5
 801203e:	4798      	blx	r3
 8012040:	1ba4      	subs	r4, r4, r6
 8012042:	b2a4      	uxth	r4, r4
 8012044:	fbb4 f0f0 	udiv	r0, r4, r0
 8012048:	bd70      	pop	{r4, r5, r6, pc}

0801204a <_ZN8touchgfx17AbstractPartition5clearEv>:
 801204a:	2300      	movs	r3, #0
 801204c:	8083      	strh	r3, [r0, #4]
 801204e:	4770      	bx	lr

08012050 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012050:	b510      	push	{r4, lr}
 8012052:	6803      	ldr	r3, [r0, #0]
 8012054:	8881      	ldrh	r1, [r0, #4]
 8012056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012058:	4604      	mov	r4, r0
 801205a:	4798      	blx	r3
 801205c:	88a3      	ldrh	r3, [r4, #4]
 801205e:	3301      	adds	r3, #1
 8012060:	80a3      	strh	r3, [r4, #4]
 8012062:	bd10      	pop	{r4, pc}

08012064 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012064:	6803      	ldr	r3, [r0, #0]
 8012066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012068:	4718      	bx	r3

0801206a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801206a:	4770      	bx	lr

0801206c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801206c:	4a02      	ldr	r2, [pc, #8]	; (8012078 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801206e:	6002      	str	r2, [r0, #0]
 8012070:	2200      	movs	r2, #0
 8012072:	8082      	strh	r2, [r0, #4]
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop
 8012078:	08028fa0 	.word	0x08028fa0

0801207c <_ZN8touchgfx9Container13getFirstChildEv>:
 801207c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801207e:	4770      	bx	lr

08012080 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012080:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012082:	2000      	movs	r0, #0
 8012084:	b12b      	cbz	r3, 8012092 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012086:	b920      	cbnz	r0, 8012092 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012088:	1a5a      	subs	r2, r3, r1
 801208a:	4250      	negs	r0, r2
 801208c:	4150      	adcs	r0, r2
 801208e:	699b      	ldr	r3, [r3, #24]
 8012090:	e7f8      	b.n	8012084 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012092:	4770      	bx	lr

08012094 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012094:	2300      	movs	r3, #0
 8012096:	6148      	str	r0, [r1, #20]
 8012098:	618b      	str	r3, [r1, #24]
 801209a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801209c:	b913      	cbnz	r3, 80120a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801209e:	6281      	str	r1, [r0, #40]	; 0x28
 80120a0:	4770      	bx	lr
 80120a2:	4613      	mov	r3, r2
 80120a4:	699a      	ldr	r2, [r3, #24]
 80120a6:	2a00      	cmp	r2, #0
 80120a8:	d1fb      	bne.n	80120a2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80120aa:	6199      	str	r1, [r3, #24]
 80120ac:	4770      	bx	lr

080120ae <_ZN8touchgfx9Container9removeAllEv>:
 80120ae:	2200      	movs	r2, #0
 80120b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80120b2:	b123      	cbz	r3, 80120be <_ZN8touchgfx9Container9removeAllEv+0x10>
 80120b4:	6999      	ldr	r1, [r3, #24]
 80120b6:	6281      	str	r1, [r0, #40]	; 0x28
 80120b8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80120bc:	e7f8      	b.n	80120b0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80120be:	4770      	bx	lr

080120c0 <_ZN8touchgfx9Container6unlinkEv>:
 80120c0:	2300      	movs	r3, #0
 80120c2:	6283      	str	r3, [r0, #40]	; 0x28
 80120c4:	4770      	bx	lr

080120c6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80120c6:	2200      	movs	r2, #0
 80120c8:	8002      	strh	r2, [r0, #0]
 80120ca:	8042      	strh	r2, [r0, #2]
 80120cc:	8082      	strh	r2, [r0, #4]
 80120ce:	80c2      	strh	r2, [r0, #6]
 80120d0:	4770      	bx	lr

080120d2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80120d2:	b570      	push	{r4, r5, r6, lr}
 80120d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80120d6:	460d      	mov	r5, r1
 80120d8:	4616      	mov	r6, r2
 80120da:	b13c      	cbz	r4, 80120ec <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80120dc:	6823      	ldr	r3, [r4, #0]
 80120de:	4620      	mov	r0, r4
 80120e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120e2:	4632      	mov	r2, r6
 80120e4:	4629      	mov	r1, r5
 80120e6:	4798      	blx	r3
 80120e8:	69a4      	ldr	r4, [r4, #24]
 80120ea:	e7f6      	b.n	80120da <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80120ec:	bd70      	pop	{r4, r5, r6, pc}

080120ee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80120ee:	b538      	push	{r3, r4, r5, lr}
 80120f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80120f2:	460d      	mov	r5, r1
 80120f4:	b134      	cbz	r4, 8012104 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80120f6:	682b      	ldr	r3, [r5, #0]
 80120f8:	4621      	mov	r1, r4
 80120fa:	689b      	ldr	r3, [r3, #8]
 80120fc:	4628      	mov	r0, r5
 80120fe:	4798      	blx	r3
 8012100:	69a4      	ldr	r4, [r4, #24]
 8012102:	e7f7      	b.n	80120f4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012104:	bd38      	pop	{r3, r4, r5, pc}

08012106 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012106:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012108:	b19b      	cbz	r3, 8012132 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801210a:	428b      	cmp	r3, r1
 801210c:	d109      	bne.n	8012122 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801210e:	699a      	ldr	r2, [r3, #24]
 8012110:	2100      	movs	r1, #0
 8012112:	6159      	str	r1, [r3, #20]
 8012114:	6282      	str	r2, [r0, #40]	; 0x28
 8012116:	b902      	cbnz	r2, 801211a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012118:	4770      	bx	lr
 801211a:	6199      	str	r1, [r3, #24]
 801211c:	4770      	bx	lr
 801211e:	4613      	mov	r3, r2
 8012120:	b13a      	cbz	r2, 8012132 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012122:	699a      	ldr	r2, [r3, #24]
 8012124:	428a      	cmp	r2, r1
 8012126:	d1fa      	bne.n	801211e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012128:	698a      	ldr	r2, [r1, #24]
 801212a:	619a      	str	r2, [r3, #24]
 801212c:	2300      	movs	r3, #0
 801212e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012132:	4770      	bx	lr

08012134 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012134:	b410      	push	{r4}
 8012136:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012138:	4604      	mov	r4, r0
 801213a:	b92b      	cbnz	r3, 8012148 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801213c:	6803      	ldr	r3, [r0, #0]
 801213e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012144:	4611      	mov	r1, r2
 8012146:	4718      	bx	r3
 8012148:	b941      	cbnz	r1, 801215c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801214a:	6193      	str	r3, [r2, #24]
 801214c:	6282      	str	r2, [r0, #40]	; 0x28
 801214e:	6154      	str	r4, [r2, #20]
 8012150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012154:	4770      	bx	lr
 8012156:	4603      	mov	r3, r0
 8012158:	2800      	cmp	r0, #0
 801215a:	d0f9      	beq.n	8012150 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801215c:	4299      	cmp	r1, r3
 801215e:	6998      	ldr	r0, [r3, #24]
 8012160:	d1f9      	bne.n	8012156 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012162:	6190      	str	r0, [r2, #24]
 8012164:	618a      	str	r2, [r1, #24]
 8012166:	e7f2      	b.n	801214e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012168 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801216c:	461f      	mov	r7, r3
 801216e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012172:	460d      	mov	r5, r1
 8012174:	4616      	mov	r6, r2
 8012176:	b103      	cbz	r3, 801217a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012178:	6038      	str	r0, [r7, #0]
 801217a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801217c:	b314      	cbz	r4, 80121c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801217e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012182:	b1eb      	cbz	r3, 80121c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012184:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012188:	428d      	cmp	r5, r1
 801218a:	db19      	blt.n	80121c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801218c:	8923      	ldrh	r3, [r4, #8]
 801218e:	b289      	uxth	r1, r1
 8012190:	440b      	add	r3, r1
 8012192:	b21b      	sxth	r3, r3
 8012194:	429d      	cmp	r5, r3
 8012196:	da13      	bge.n	80121c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012198:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801219c:	4296      	cmp	r6, r2
 801219e:	db0f      	blt.n	80121c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80121a0:	8963      	ldrh	r3, [r4, #10]
 80121a2:	b292      	uxth	r2, r2
 80121a4:	4413      	add	r3, r2
 80121a6:	b21b      	sxth	r3, r3
 80121a8:	429e      	cmp	r6, r3
 80121aa:	da09      	bge.n	80121c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80121ac:	6823      	ldr	r3, [r4, #0]
 80121ae:	1ab2      	subs	r2, r6, r2
 80121b0:	1a69      	subs	r1, r5, r1
 80121b2:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80121b6:	b212      	sxth	r2, r2
 80121b8:	463b      	mov	r3, r7
 80121ba:	b209      	sxth	r1, r1
 80121bc:	4620      	mov	r0, r4
 80121be:	47c0      	blx	r8
 80121c0:	69a4      	ldr	r4, [r4, #24]
 80121c2:	e7db      	b.n	801217c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80121c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80121c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121cc:	4c6e      	ldr	r4, [pc, #440]	; (8012388 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80121ce:	b0a1      	sub	sp, #132	; 0x84
 80121d0:	6824      	ldr	r4, [r4, #0]
 80121d2:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80121d4:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80121d8:	9303      	str	r3, [sp, #12]
 80121da:	2400      	movs	r4, #0
 80121dc:	802c      	strh	r4, [r5, #0]
 80121de:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80121e0:	802c      	strh	r4, [r5, #0]
 80121e2:	601c      	str	r4, [r3, #0]
 80121e4:	4606      	mov	r6, r0
 80121e6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80121ea:	f7ff ffbd 	bl	8012168 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80121ee:	f1b9 0f03 	cmp.w	r9, #3
 80121f2:	f340 80c2 	ble.w	801237a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80121f6:	4631      	mov	r1, r6
 80121f8:	a80c      	add	r0, sp, #48	; 0x30
 80121fa:	f004 fd0f 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80121fe:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012202:	9306      	str	r3, [sp, #24]
 8012204:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012208:	9307      	str	r3, [sp, #28]
 801220a:	9b03      	ldr	r3, [sp, #12]
 801220c:	f8d3 a000 	ldr.w	sl, [r3]
 8012210:	f1ba 0f00 	cmp.w	sl, #0
 8012214:	f000 80b4 	beq.w	8012380 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8012218:	4651      	mov	r1, sl
 801221a:	a810      	add	r0, sp, #64	; 0x40
 801221c:	f004 fcfe 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012220:	9b01      	ldr	r3, [sp, #4]
 8012222:	9a06      	ldr	r2, [sp, #24]
 8012224:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8012228:	189d      	adds	r5, r3, r2
 801222a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801222e:	9a07      	ldr	r2, [sp, #28]
 8012230:	2002      	movs	r0, #2
 8012232:	fb91 f1f0 	sdiv	r1, r1, r0
 8012236:	4419      	add	r1, r3
 8012238:	1a6d      	subs	r5, r5, r1
 801223a:	9b02      	ldr	r3, [sp, #8]
 801223c:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012240:	4413      	add	r3, r2
 8012242:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012246:	fb92 f2f0 	sdiv	r2, r2, r0
 801224a:	440a      	add	r2, r1
 801224c:	1a9b      	subs	r3, r3, r2
 801224e:	435b      	muls	r3, r3
 8012250:	fb05 3505 	mla	r5, r5, r5, r3
 8012254:	4f4d      	ldr	r7, [pc, #308]	; (801238c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8012256:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012258:	ac10      	add	r4, sp, #64	; 0x40
 801225a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801225c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012260:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012264:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012268:	f1b9 0f0c 	cmp.w	r9, #12
 801226c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012270:	f04f 0303 	mov.w	r3, #3
 8012274:	bfc8      	it	gt
 8012276:	4698      	movgt	r8, r3
 8012278:	f8cd 9000 	str.w	r9, [sp]
 801227c:	f04f 0400 	mov.w	r4, #0
 8012280:	bfdc      	itt	le
 8012282:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012286:	fb92 f8f3 	sdivle	r8, r2, r3
 801228a:	1c63      	adds	r3, r4, #1
 801228c:	aa10      	add	r2, sp, #64	; 0x40
 801228e:	f004 0401 	and.w	r4, r4, #1
 8012292:	9308      	str	r3, [sp, #32]
 8012294:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012298:	9b00      	ldr	r3, [sp, #0]
 801229a:	fb93 f3f8 	sdiv	r3, r3, r8
 801229e:	b29b      	uxth	r3, r3
 80122a0:	3404      	adds	r4, #4
 80122a2:	f04f 0b00 	mov.w	fp, #0
 80122a6:	9304      	str	r3, [sp, #16]
 80122a8:	9a04      	ldr	r2, [sp, #16]
 80122aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80122ae:	fb13 f302 	smulbb	r3, r3, r2
 80122b2:	9a01      	ldr	r2, [sp, #4]
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	1899      	adds	r1, r3, r2
 80122b8:	9305      	str	r3, [sp, #20]
 80122ba:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80122be:	b209      	sxth	r1, r1
 80122c0:	4299      	cmp	r1, r3
 80122c2:	db4d      	blt.n	8012360 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80122c4:	8932      	ldrh	r2, [r6, #8]
 80122c6:	4413      	add	r3, r2
 80122c8:	b21b      	sxth	r3, r3
 80122ca:	4299      	cmp	r1, r3
 80122cc:	da48      	bge.n	8012360 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80122ce:	9b04      	ldr	r3, [sp, #16]
 80122d0:	6827      	ldr	r7, [r4, #0]
 80122d2:	fb17 f703 	smulbb	r7, r7, r3
 80122d6:	9b02      	ldr	r3, [sp, #8]
 80122d8:	b2bf      	uxth	r7, r7
 80122da:	18fa      	adds	r2, r7, r3
 80122dc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80122e0:	b212      	sxth	r2, r2
 80122e2:	429a      	cmp	r2, r3
 80122e4:	db3c      	blt.n	8012360 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80122e6:	8970      	ldrh	r0, [r6, #10]
 80122e8:	4403      	add	r3, r0
 80122ea:	b21b      	sxth	r3, r3
 80122ec:	429a      	cmp	r2, r3
 80122ee:	da37      	bge.n	8012360 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80122f0:	2300      	movs	r3, #0
 80122f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80122f4:	4630      	mov	r0, r6
 80122f6:	ab0b      	add	r3, sp, #44	; 0x2c
 80122f8:	f7ff ff36 	bl	8012168 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80122fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80122fe:	b37a      	cbz	r2, 8012360 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012300:	4552      	cmp	r2, sl
 8012302:	d02d      	beq.n	8012360 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012304:	4611      	mov	r1, r2
 8012306:	a80e      	add	r0, sp, #56	; 0x38
 8012308:	9209      	str	r2, [sp, #36]	; 0x24
 801230a:	f004 fc87 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801230e:	9a06      	ldr	r2, [sp, #24]
 8012310:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8012314:	9b01      	ldr	r3, [sp, #4]
 8012316:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801231a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801231e:	4413      	add	r3, r2
 8012320:	f04f 0e02 	mov.w	lr, #2
 8012324:	fb91 f1fe 	sdiv	r1, r1, lr
 8012328:	4401      	add	r1, r0
 801232a:	1a58      	subs	r0, r3, r1
 801232c:	9a07      	ldr	r2, [sp, #28]
 801232e:	9b02      	ldr	r3, [sp, #8]
 8012330:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012334:	fb9c fcfe 	sdiv	ip, ip, lr
 8012338:	4413      	add	r3, r2
 801233a:	448c      	add	ip, r1
 801233c:	eba3 030c 	sub.w	r3, r3, ip
 8012340:	435b      	muls	r3, r3
 8012342:	fb00 3300 	mla	r3, r0, r0, r3
 8012346:	42ab      	cmp	r3, r5
 8012348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801234a:	d208      	bcs.n	801235e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 801234c:	9803      	ldr	r0, [sp, #12]
 801234e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012350:	6001      	str	r1, [r0, #0]
 8012352:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012354:	9805      	ldr	r0, [sp, #20]
 8012356:	8008      	strh	r0, [r1, #0]
 8012358:	992b      	ldr	r1, [sp, #172]	; 0xac
 801235a:	461d      	mov	r5, r3
 801235c:	800f      	strh	r7, [r1, #0]
 801235e:	4692      	mov	sl, r2
 8012360:	f10b 0b01 	add.w	fp, fp, #1
 8012364:	f1bb 0f04 	cmp.w	fp, #4
 8012368:	f104 0408 	add.w	r4, r4, #8
 801236c:	d19c      	bne.n	80122a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 801236e:	9b00      	ldr	r3, [sp, #0]
 8012370:	9c08      	ldr	r4, [sp, #32]
 8012372:	444b      	add	r3, r9
 8012374:	4544      	cmp	r4, r8
 8012376:	9300      	str	r3, [sp, #0]
 8012378:	d187      	bne.n	801228a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801237a:	b021      	add	sp, #132	; 0x84
 801237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012380:	f04f 35ff 	mov.w	r5, #4294967295
 8012384:	e766      	b.n	8012254 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012386:	bf00      	nop
 8012388:	20025830 	.word	0x20025830
 801238c:	08028508 	.word	0x08028508

08012390 <_ZN8touchgfx4RectaNERKS0_>:
 8012390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012394:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012398:	888c      	ldrh	r4, [r1, #4]
 801239a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801239e:	443c      	add	r4, r7
 80123a0:	b2a4      	uxth	r4, r4
 80123a2:	fa0f f884 	sxth.w	r8, r4
 80123a6:	45c1      	cmp	r9, r8
 80123a8:	da2f      	bge.n	801240a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80123aa:	8882      	ldrh	r2, [r0, #4]
 80123ac:	444a      	add	r2, r9
 80123ae:	b292      	uxth	r2, r2
 80123b0:	fa0f fe82 	sxth.w	lr, r2
 80123b4:	4577      	cmp	r7, lr
 80123b6:	da28      	bge.n	801240a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80123b8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80123bc:	88cb      	ldrh	r3, [r1, #6]
 80123be:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80123c2:	442b      	add	r3, r5
 80123c4:	b21b      	sxth	r3, r3
 80123c6:	429e      	cmp	r6, r3
 80123c8:	da1f      	bge.n	801240a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80123ca:	88c3      	ldrh	r3, [r0, #6]
 80123cc:	4433      	add	r3, r6
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	fa0f fc83 	sxth.w	ip, r3
 80123d4:	4565      	cmp	r5, ip
 80123d6:	da18      	bge.n	801240a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80123d8:	454f      	cmp	r7, r9
 80123da:	bfb8      	it	lt
 80123dc:	464f      	movlt	r7, r9
 80123de:	42b5      	cmp	r5, r6
 80123e0:	bfb8      	it	lt
 80123e2:	4635      	movlt	r5, r6
 80123e4:	45f0      	cmp	r8, lr
 80123e6:	bfd8      	it	le
 80123e8:	4622      	movle	r2, r4
 80123ea:	1bd2      	subs	r2, r2, r7
 80123ec:	8082      	strh	r2, [r0, #4]
 80123ee:	884a      	ldrh	r2, [r1, #2]
 80123f0:	88c9      	ldrh	r1, [r1, #6]
 80123f2:	8007      	strh	r7, [r0, #0]
 80123f4:	440a      	add	r2, r1
 80123f6:	b292      	uxth	r2, r2
 80123f8:	b211      	sxth	r1, r2
 80123fa:	458c      	cmp	ip, r1
 80123fc:	bfa8      	it	ge
 80123fe:	4613      	movge	r3, r2
 8012400:	1b5b      	subs	r3, r3, r5
 8012402:	80c3      	strh	r3, [r0, #6]
 8012404:	8045      	strh	r5, [r0, #2]
 8012406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801240a:	2300      	movs	r3, #0
 801240c:	8003      	strh	r3, [r0, #0]
 801240e:	8043      	strh	r3, [r0, #2]
 8012410:	8083      	strh	r3, [r0, #4]
 8012412:	80c3      	strh	r3, [r0, #6]
 8012414:	e7f7      	b.n	8012406 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012416 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012416:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	dd06      	ble.n	801242c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801241e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012422:	2800      	cmp	r0, #0
 8012424:	bfcc      	ite	gt
 8012426:	2000      	movgt	r0, #0
 8012428:	2001      	movle	r0, #1
 801242a:	4770      	bx	lr
 801242c:	2001      	movs	r0, #1
 801242e:	4770      	bx	lr

08012430 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012434:	2300      	movs	r3, #0
 8012436:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012438:	8003      	strh	r3, [r0, #0]
 801243a:	4604      	mov	r4, r0
 801243c:	8043      	strh	r3, [r0, #2]
 801243e:	8083      	strh	r3, [r0, #4]
 8012440:	80c3      	strh	r3, [r0, #6]
 8012442:	2d00      	cmp	r5, #0
 8012444:	d040      	beq.n	80124c8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012446:	1d28      	adds	r0, r5, #4
 8012448:	f7ff ffe5 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 801244c:	b988      	cbnz	r0, 8012472 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801244e:	4620      	mov	r0, r4
 8012450:	f7ff ffe1 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012454:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012458:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801245c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012460:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012464:	b138      	cbz	r0, 8012476 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012466:	8022      	strh	r2, [r4, #0]
 8012468:	8063      	strh	r3, [r4, #2]
 801246a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801246e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012472:	69ad      	ldr	r5, [r5, #24]
 8012474:	e7e5      	b.n	8012442 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012476:	f9b4 0000 	ldrsh.w	r0, [r4]
 801247a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801247e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012482:	4290      	cmp	r0, r2
 8012484:	4607      	mov	r7, r0
 8012486:	bfa8      	it	ge
 8012488:	4617      	movge	r7, r2
 801248a:	4472      	add	r2, lr
 801248c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012490:	8027      	strh	r7, [r4, #0]
 8012492:	4299      	cmp	r1, r3
 8012494:	460e      	mov	r6, r1
 8012496:	4440      	add	r0, r8
 8012498:	bfa8      	it	ge
 801249a:	461e      	movge	r6, r3
 801249c:	4471      	add	r1, lr
 801249e:	4463      	add	r3, ip
 80124a0:	b200      	sxth	r0, r0
 80124a2:	b212      	sxth	r2, r2
 80124a4:	b209      	sxth	r1, r1
 80124a6:	b21b      	sxth	r3, r3
 80124a8:	4290      	cmp	r0, r2
 80124aa:	bfac      	ite	ge
 80124ac:	ebc7 0200 	rsbge	r2, r7, r0
 80124b0:	ebc7 0202 	rsblt	r2, r7, r2
 80124b4:	4299      	cmp	r1, r3
 80124b6:	bfac      	ite	ge
 80124b8:	ebc6 0301 	rsbge	r3, r6, r1
 80124bc:	ebc6 0303 	rsblt	r3, r6, r3
 80124c0:	8066      	strh	r6, [r4, #2]
 80124c2:	80a2      	strh	r2, [r4, #4]
 80124c4:	80e3      	strh	r3, [r4, #6]
 80124c6:	e7d4      	b.n	8012472 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80124c8:	4620      	mov	r0, r4
 80124ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080124ce <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80124ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80124d2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80124d6:	b383      	cbz	r3, 801253a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80124d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80124da:	b374      	cbz	r4, 801253a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80124dc:	f9b1 5000 	ldrsh.w	r5, [r1]
 80124e0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80124e4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80124e8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80124ec:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80124f0:	b303      	cbz	r3, 8012534 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80124f2:	4668      	mov	r0, sp
 80124f4:	1d21      	adds	r1, r4, #4
 80124f6:	f8ad 5000 	strh.w	r5, [sp]
 80124fa:	f8ad 6002 	strh.w	r6, [sp, #2]
 80124fe:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012502:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012506:	f7ff ff43 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 801250a:	4668      	mov	r0, sp
 801250c:	f7ff ff83 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012510:	b980      	cbnz	r0, 8012534 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012512:	f8bd 3000 	ldrh.w	r3, [sp]
 8012516:	88a2      	ldrh	r2, [r4, #4]
 8012518:	1a9b      	subs	r3, r3, r2
 801251a:	f8ad 3000 	strh.w	r3, [sp]
 801251e:	88e2      	ldrh	r2, [r4, #6]
 8012520:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012524:	1a9b      	subs	r3, r3, r2
 8012526:	f8ad 3002 	strh.w	r3, [sp, #2]
 801252a:	6823      	ldr	r3, [r4, #0]
 801252c:	4669      	mov	r1, sp
 801252e:	689b      	ldr	r3, [r3, #8]
 8012530:	4620      	mov	r0, r4
 8012532:	4798      	blx	r3
 8012534:	69a4      	ldr	r4, [r4, #24]
 8012536:	2c00      	cmp	r4, #0
 8012538:	d1d8      	bne.n	80124ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801253a:	b002      	add	sp, #8
 801253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012540 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012540:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012542:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012546:	460d      	mov	r5, r1
 8012548:	4616      	mov	r6, r2
 801254a:	b323      	cbz	r3, 8012596 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801254c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801254e:	b314      	cbz	r4, 8012596 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012550:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012554:	b1eb      	cbz	r3, 8012592 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012556:	6828      	ldr	r0, [r5, #0]
 8012558:	6869      	ldr	r1, [r5, #4]
 801255a:	466b      	mov	r3, sp
 801255c:	c303      	stmia	r3!, {r0, r1}
 801255e:	4668      	mov	r0, sp
 8012560:	1d21      	adds	r1, r4, #4
 8012562:	f7ff ff15 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8012566:	4668      	mov	r0, sp
 8012568:	f7ff ff55 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 801256c:	b988      	cbnz	r0, 8012592 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801256e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012572:	88a2      	ldrh	r2, [r4, #4]
 8012574:	1a9b      	subs	r3, r3, r2
 8012576:	f8ad 3000 	strh.w	r3, [sp]
 801257a:	88e2      	ldrh	r2, [r4, #6]
 801257c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012580:	1a9b      	subs	r3, r3, r2
 8012582:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012586:	6823      	ldr	r3, [r4, #0]
 8012588:	4632      	mov	r2, r6
 801258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801258c:	4669      	mov	r1, sp
 801258e:	4620      	mov	r0, r4
 8012590:	4798      	blx	r3
 8012592:	69a4      	ldr	r4, [r4, #24]
 8012594:	e7db      	b.n	801254e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012596:	b002      	add	sp, #8
 8012598:	bd70      	pop	{r4, r5, r6, pc}

0801259a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801259a:	b513      	push	{r0, r1, r4, lr}
 801259c:	6803      	ldr	r3, [r0, #0]
 801259e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80125a2:	2300      	movs	r3, #0
 80125a4:	e9cd 3300 	strd	r3, r3, [sp]
 80125a8:	466b      	mov	r3, sp
 80125aa:	47a0      	blx	r4
 80125ac:	b002      	add	sp, #8
 80125ae:	bd10      	pop	{r4, pc}

080125b0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80125b0:	2301      	movs	r3, #1
 80125b2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80125b6:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80125ba:	4770      	bx	lr

080125bc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80125bc:	2301      	movs	r3, #1
 80125be:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80125c2:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80125c6:	4770      	bx	lr

080125c8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80125c8:	6843      	ldr	r3, [r0, #4]
 80125ca:	2201      	movs	r2, #1
 80125cc:	725a      	strb	r2, [r3, #9]
 80125ce:	6840      	ldr	r0, [r0, #4]
 80125d0:	6803      	ldr	r3, [r0, #0]
 80125d2:	691b      	ldr	r3, [r3, #16]
 80125d4:	4718      	bx	r3

080125d6 <_ZN8touchgfx3HAL8flushDMAEv>:
 80125d6:	6840      	ldr	r0, [r0, #4]
 80125d8:	6803      	ldr	r3, [r0, #0]
 80125da:	689b      	ldr	r3, [r3, #8]
 80125dc:	4718      	bx	r3

080125de <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80125de:	b530      	push	{r4, r5, lr}
 80125e0:	b08b      	sub	sp, #44	; 0x2c
 80125e2:	6804      	ldr	r4, [r0, #0]
 80125e4:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80125e8:	9509      	str	r5, [sp, #36]	; 0x24
 80125ea:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80125ee:	9508      	str	r5, [sp, #32]
 80125f0:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80125f4:	9507      	str	r5, [sp, #28]
 80125f6:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80125fa:	9506      	str	r5, [sp, #24]
 80125fc:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8012600:	9505      	str	r5, [sp, #20]
 8012602:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8012606:	9504      	str	r5, [sp, #16]
 8012608:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801260c:	9503      	str	r5, [sp, #12]
 801260e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8012612:	9502      	str	r5, [sp, #8]
 8012614:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012618:	e9cd 3500 	strd	r3, r5, [sp]
 801261c:	4613      	mov	r3, r2
 801261e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8012620:	2200      	movs	r2, #0
 8012622:	47a0      	blx	r4
 8012624:	b00b      	add	sp, #44	; 0x2c
 8012626:	bd30      	pop	{r4, r5, pc}

08012628 <_ZN8touchgfx3HAL10beginFrameEv>:
 8012628:	4b04      	ldr	r3, [pc, #16]	; (801263c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	b123      	cbz	r3, 8012638 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801262e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8012632:	f080 0001 	eor.w	r0, r0, #1
 8012636:	4770      	bx	lr
 8012638:	2001      	movs	r0, #1
 801263a:	4770      	bx	lr
 801263c:	2002582e 	.word	0x2002582e

08012640 <_ZN8touchgfx3HAL8endFrameEv>:
 8012640:	b510      	push	{r4, lr}
 8012642:	4604      	mov	r4, r0
 8012644:	6840      	ldr	r0, [r0, #4]
 8012646:	6803      	ldr	r3, [r0, #0]
 8012648:	689b      	ldr	r3, [r3, #8]
 801264a:	4798      	blx	r3
 801264c:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8012650:	b113      	cbz	r3, 8012658 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012652:	2301      	movs	r3, #1
 8012654:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8012658:	bd10      	pop	{r4, pc}

0801265a <_ZN8touchgfx3HAL10initializeEv>:
 801265a:	b510      	push	{r4, lr}
 801265c:	4604      	mov	r4, r0
 801265e:	f7fe f9f5 	bl	8010a4c <_ZN8touchgfx10OSWrappers10initializeEv>
 8012662:	f7fd ff3b 	bl	80104dc <_ZN8touchgfx4GPIO4initEv>
 8012666:	6860      	ldr	r0, [r4, #4]
 8012668:	6803      	ldr	r3, [r0, #0]
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	4798      	blx	r3
 801266e:	68e0      	ldr	r0, [r4, #12]
 8012670:	6803      	ldr	r3, [r0, #0]
 8012672:	689b      	ldr	r3, [r3, #8]
 8012674:	4798      	blx	r3
 8012676:	6823      	ldr	r3, [r4, #0]
 8012678:	4620      	mov	r0, r4
 801267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801267c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012680:	4718      	bx	r3

08012682 <_ZN8touchgfx3HAL9taskEntryEv>:
 8012682:	b508      	push	{r3, lr}
 8012684:	6803      	ldr	r3, [r0, #0]
 8012686:	4604      	mov	r4, r0
 8012688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801268c:	4798      	blx	r3
 801268e:	6823      	ldr	r3, [r4, #0]
 8012690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012692:	4620      	mov	r0, r4
 8012694:	4798      	blx	r3
 8012696:	f7fe fa4d 	bl	8010b34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801269a:	6823      	ldr	r3, [r4, #0]
 801269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801269e:	e7f8      	b.n	8012692 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080126a0 <_ZN8touchgfx3HAL4tickEv>:
 80126a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80126a2:	6803      	ldr	r3, [r0, #0]
 80126a4:	4d5b      	ldr	r5, [pc, #364]	; (8012814 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80126a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80126aa:	4604      	mov	r4, r0
 80126ac:	4798      	blx	r3
 80126ae:	2800      	cmp	r0, #0
 80126b0:	f000 8095 	beq.w	80127de <_ZN8touchgfx3HAL4tickEv+0x13e>
 80126b4:	2001      	movs	r0, #1
 80126b6:	f7fd ff19 	bl	80104ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80126ba:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80126be:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80126c2:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80126c6:	2600      	movs	r6, #0
 80126c8:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 80126cc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80126d0:	b133      	cbz	r3, 80126e0 <_ZN8touchgfx3HAL4tickEv+0x40>
 80126d2:	6823      	ldr	r3, [r4, #0]
 80126d4:	4620      	mov	r0, r4
 80126d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80126da:	4798      	blx	r3
 80126dc:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 80126e0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80126e4:	6862      	ldr	r2, [r4, #4]
 80126e6:	f083 0301 	eor.w	r3, r3, #1
 80126ea:	7253      	strb	r3, [r2, #9]
 80126ec:	2601      	movs	r6, #1
 80126ee:	702e      	strb	r6, [r5, #0]
 80126f0:	f003 f938 	bl	8015964 <_ZN8touchgfx11Application11getInstanceEv>
 80126f4:	6803      	ldr	r3, [r0, #0]
 80126f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126f8:	4798      	blx	r3
 80126fa:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 80126fe:	b90b      	cbnz	r3, 8012704 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012700:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8012704:	f003 f92e 	bl	8015964 <_ZN8touchgfx11Application11getInstanceEv>
 8012708:	6803      	ldr	r3, [r0, #0]
 801270a:	695b      	ldr	r3, [r3, #20]
 801270c:	4798      	blx	r3
 801270e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8012710:	6803      	ldr	r3, [r0, #0]
 8012712:	691b      	ldr	r3, [r3, #16]
 8012714:	4798      	blx	r3
 8012716:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801271a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 801271e:	3b01      	subs	r3, #1
 8012720:	b2db      	uxtb	r3, r3
 8012722:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012726:	b10a      	cbz	r2, 801272c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012728:	2b00      	cmp	r3, #0
 801272a:	d1eb      	bne.n	8012704 <_ZN8touchgfx3HAL4tickEv+0x64>
 801272c:	4a3a      	ldr	r2, [pc, #232]	; (8012818 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801272e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8012732:	7813      	ldrb	r3, [r2, #0]
 8012734:	3301      	adds	r3, #1
 8012736:	b25b      	sxtb	r3, r3
 8012738:	4299      	cmp	r1, r3
 801273a:	7013      	strb	r3, [r2, #0]
 801273c:	dc10      	bgt.n	8012760 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801273e:	68e0      	ldr	r0, [r4, #12]
 8012740:	2300      	movs	r3, #0
 8012742:	7013      	strb	r3, [r2, #0]
 8012744:	6803      	ldr	r3, [r0, #0]
 8012746:	aa03      	add	r2, sp, #12
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	a902      	add	r1, sp, #8
 801274c:	4798      	blx	r3
 801274e:	6823      	ldr	r3, [r4, #0]
 8012750:	2800      	cmp	r0, #0
 8012752:	d050      	beq.n	80127f6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8012754:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012758:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801275c:	4620      	mov	r0, r4
 801275e:	4798      	blx	r3
 8012760:	6960      	ldr	r0, [r4, #20]
 8012762:	2300      	movs	r3, #0
 8012764:	f88d 3007 	strb.w	r3, [sp, #7]
 8012768:	b158      	cbz	r0, 8012782 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801276a:	6803      	ldr	r3, [r0, #0]
 801276c:	f10d 0107 	add.w	r1, sp, #7
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	4798      	blx	r3
 8012774:	b128      	cbz	r0, 8012782 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012776:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8012778:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801277c:	6803      	ldr	r3, [r0, #0]
 801277e:	68db      	ldr	r3, [r3, #12]
 8012780:	4798      	blx	r3
 8012782:	f104 001c 	add.w	r0, r4, #28
 8012786:	f013 fd67 	bl	8026258 <_ZN8touchgfx8Gestures4tickEv>
 801278a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 801278e:	b30b      	cbz	r3, 80127d4 <_ZN8touchgfx3HAL4tickEv+0x134>
 8012790:	6920      	ldr	r0, [r4, #16]
 8012792:	6803      	ldr	r3, [r0, #0]
 8012794:	691b      	ldr	r3, [r3, #16]
 8012796:	4798      	blx	r3
 8012798:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801279a:	4606      	mov	r6, r0
 801279c:	b903      	cbnz	r3, 80127a0 <_ZN8touchgfx3HAL4tickEv+0x100>
 801279e:	6760      	str	r0, [r4, #116]	; 0x74
 80127a0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80127a2:	4a1e      	ldr	r2, [pc, #120]	; (801281c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80127a4:	1af3      	subs	r3, r6, r3
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d914      	bls.n	80127d4 <_ZN8touchgfx3HAL4tickEv+0x134>
 80127aa:	6920      	ldr	r0, [r4, #16]
 80127ac:	6803      	ldr	r3, [r0, #0]
 80127ae:	699b      	ldr	r3, [r3, #24]
 80127b0:	4798      	blx	r3
 80127b2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80127b4:	2264      	movs	r2, #100	; 0x64
 80127b6:	1af3      	subs	r3, r6, r3
 80127b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80127bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80127c0:	2800      	cmp	r0, #0
 80127c2:	dc1d      	bgt.n	8012800 <_ZN8touchgfx3HAL4tickEv+0x160>
 80127c4:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 80127c8:	6920      	ldr	r0, [r4, #16]
 80127ca:	6803      	ldr	r3, [r0, #0]
 80127cc:	2100      	movs	r1, #0
 80127ce:	69db      	ldr	r3, [r3, #28]
 80127d0:	4798      	blx	r3
 80127d2:	6766      	str	r6, [r4, #116]	; 0x74
 80127d4:	f003 f8c6 	bl	8015964 <_ZN8touchgfx11Application11getInstanceEv>
 80127d8:	6803      	ldr	r3, [r0, #0]
 80127da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127dc:	4798      	blx	r3
 80127de:	6823      	ldr	r3, [r4, #0]
 80127e0:	4620      	mov	r0, r4
 80127e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80127e6:	4798      	blx	r3
 80127e8:	2001      	movs	r0, #1
 80127ea:	f7fd fe9b 	bl	8010524 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80127ee:	2300      	movs	r3, #0
 80127f0:	702b      	strb	r3, [r5, #0]
 80127f2:	b004      	add	sp, #16
 80127f4:	bd70      	pop	{r4, r5, r6, pc}
 80127f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80127fa:	4620      	mov	r0, r4
 80127fc:	4798      	blx	r3
 80127fe:	e7af      	b.n	8012760 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012800:	2863      	cmp	r0, #99	; 0x63
 8012802:	bfcb      	itete	gt
 8012804:	2300      	movgt	r3, #0
 8012806:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801280a:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 801280e:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8012812:	e7d9      	b.n	80127c8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8012814:	20025834 	.word	0x20025834
 8012818:	20025835 	.word	0x20025835
 801281c:	05f5e100 	.word	0x05f5e100

08012820 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012820:	b510      	push	{r4, lr}
 8012822:	4604      	mov	r4, r0
 8012824:	f7fe f93a 	bl	8010a9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8012828:	6863      	ldr	r3, [r4, #4]
 801282a:	2200      	movs	r2, #0
 801282c:	729a      	strb	r2, [r3, #10]
 801282e:	bd10      	pop	{r4, pc}

08012830 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012830:	65c1      	str	r1, [r0, #92]	; 0x5c
 8012832:	301c      	adds	r0, #28
 8012834:	f013 bd0e 	b.w	8026254 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012838 <_ZN8touchgfx3HAL5touchEll>:
 8012838:	b530      	push	{r4, r5, lr}
 801283a:	b087      	sub	sp, #28
 801283c:	4604      	mov	r4, r0
 801283e:	a804      	add	r0, sp, #16
 8012840:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012844:	f002 fe80 	bl	8015548 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012848:	9b04      	ldr	r3, [sp, #16]
 801284a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801284e:	a906      	add	r1, sp, #24
 8012850:	9b05      	ldr	r3, [sp, #20]
 8012852:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012856:	a803      	add	r0, sp, #12
 8012858:	f002 fec8 	bl	80155ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801285c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 8012860:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012864:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012868:	f104 001c 	add.w	r0, r4, #28
 801286c:	b189      	cbz	r1, 8012892 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801286e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8012878:	4613      	mov	r3, r2
 801287a:	462a      	mov	r2, r5
 801287c:	f013 fcfa 	bl	8026274 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8012880:	b128      	cbz	r0, 801288e <_ZN8touchgfx3HAL5touchEll+0x56>
 8012882:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012886:	6623      	str	r3, [r4, #96]	; 0x60
 8012888:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801288c:	6663      	str	r3, [r4, #100]	; 0x64
 801288e:	b007      	add	sp, #28
 8012890:	bd30      	pop	{r4, r5, pc}
 8012892:	f013 fd2f 	bl	80262f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012896:	2301      	movs	r3, #1
 8012898:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 801289c:	e7f1      	b.n	8012882 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801289e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801289e:	b510      	push	{r4, lr}
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d046      	beq.n	8012932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80128a4:	ea81 0002 	eor.w	r0, r1, r2
 80128a8:	07c4      	lsls	r4, r0, #31
 80128aa:	d508      	bpl.n	80128be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80128ac:	440b      	add	r3, r1
 80128ae:	3a01      	subs	r2, #1
 80128b0:	428b      	cmp	r3, r1
 80128b2:	d93e      	bls.n	8012932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80128b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80128b8:	f801 0b01 	strb.w	r0, [r1], #1
 80128bc:	e7f8      	b.n	80128b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80128be:	07d0      	lsls	r0, r2, #31
 80128c0:	bf42      	ittt	mi
 80128c2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80128c6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80128ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d911      	bls.n	80128f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80128d2:	ea81 0402 	eor.w	r4, r1, r2
 80128d6:	07a4      	lsls	r4, r4, #30
 80128d8:	4610      	mov	r0, r2
 80128da:	d022      	beq.n	8012922 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80128dc:	f023 0401 	bic.w	r4, r3, #1
 80128e0:	440c      	add	r4, r1
 80128e2:	428c      	cmp	r4, r1
 80128e4:	4602      	mov	r2, r0
 80128e6:	d904      	bls.n	80128f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80128e8:	8812      	ldrh	r2, [r2, #0]
 80128ea:	f821 2b02 	strh.w	r2, [r1], #2
 80128ee:	3002      	adds	r0, #2
 80128f0:	e7f7      	b.n	80128e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80128f2:	f003 0301 	and.w	r3, r3, #1
 80128f6:	f023 0003 	bic.w	r0, r3, #3
 80128fa:	4408      	add	r0, r1
 80128fc:	4288      	cmp	r0, r1
 80128fe:	4614      	mov	r4, r2
 8012900:	d904      	bls.n	801290c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8012902:	6824      	ldr	r4, [r4, #0]
 8012904:	f841 4b04 	str.w	r4, [r1], #4
 8012908:	3204      	adds	r2, #4
 801290a:	e7f7      	b.n	80128fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801290c:	f003 0303 	and.w	r3, r3, #3
 8012910:	440b      	add	r3, r1
 8012912:	3a01      	subs	r2, #1
 8012914:	428b      	cmp	r3, r1
 8012916:	d90c      	bls.n	8012932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012918:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801291c:	f801 0b01 	strb.w	r0, [r1], #1
 8012920:	e7f8      	b.n	8012914 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8012922:	0790      	lsls	r0, r2, #30
 8012924:	d0e7      	beq.n	80128f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012926:	f832 0b02 	ldrh.w	r0, [r2], #2
 801292a:	f821 0b02 	strh.w	r0, [r1], #2
 801292e:	3b02      	subs	r3, #2
 8012930:	e7e1      	b.n	80128f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012932:	2001      	movs	r0, #1
 8012934:	bd10      	pop	{r4, pc}

08012936 <_ZN8touchgfx3HAL7noTouchEv>:
 8012936:	b510      	push	{r4, lr}
 8012938:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 801293c:	4604      	mov	r4, r0
 801293e:	b153      	cbz	r3, 8012956 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012940:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8012944:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8012948:	2101      	movs	r1, #1
 801294a:	301c      	adds	r0, #28
 801294c:	f013 fcd2 	bl	80262f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012950:	2300      	movs	r3, #0
 8012952:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8012956:	bd10      	pop	{r4, pc}

08012958 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801295c:	b085      	sub	sp, #20
 801295e:	ad04      	add	r5, sp, #16
 8012960:	4604      	mov	r4, r0
 8012962:	2000      	movs	r0, #0
 8012964:	f845 0d04 	str.w	r0, [r5, #-4]!
 8012968:	69a0      	ldr	r0, [r4, #24]
 801296a:	6806      	ldr	r6, [r0, #0]
 801296c:	9501      	str	r5, [sp, #4]
 801296e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8012972:	9500      	str	r5, [sp, #0]
 8012974:	6835      	ldr	r5, [r6, #0]
 8012976:	4699      	mov	r9, r3
 8012978:	460f      	mov	r7, r1
 801297a:	4690      	mov	r8, r2
 801297c:	47a8      	blx	r5
 801297e:	4d10      	ldr	r5, [pc, #64]	; (80129c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8012980:	4606      	mov	r6, r0
 8012982:	f8a5 9000 	strh.w	r9, [r5]
 8012986:	f7fb f9f3 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 801298a:	6803      	ldr	r3, [r0, #0]
 801298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801298e:	4798      	blx	r3
 8012990:	b128      	cbz	r0, 801299e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8012992:	2801      	cmp	r0, #1
 8012994:	d00b      	beq.n	80129ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8012996:	4630      	mov	r0, r6
 8012998:	b005      	add	sp, #20
 801299a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801299e:	882b      	ldrh	r3, [r5, #0]
 80129a0:	fb08 7203 	mla	r2, r8, r3, r7
 80129a4:	9b03      	ldr	r3, [sp, #12]
 80129a6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80129aa:	63e3      	str	r3, [r4, #60]	; 0x3c
 80129ac:	e7f3      	b.n	8012996 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80129ae:	882a      	ldrh	r2, [r5, #0]
 80129b0:	9b03      	ldr	r3, [sp, #12]
 80129b2:	fb08 7202 	mla	r2, r8, r2, r7
 80129b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80129ba:	1a9a      	subs	r2, r3, r2
 80129bc:	63e2      	str	r2, [r4, #60]	; 0x3c
 80129be:	e7ea      	b.n	8012996 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80129c0:	2002582a 	.word	0x2002582a

080129c4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80129c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129c6:	b08b      	sub	sp, #44	; 0x2c
 80129c8:	4617      	mov	r7, r2
 80129ca:	4604      	mov	r4, r0
 80129cc:	460e      	mov	r6, r1
 80129ce:	461d      	mov	r5, r3
 80129d0:	f7fb f9ce 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 80129d4:	6803      	ldr	r3, [r0, #0]
 80129d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129d8:	4798      	blx	r3
 80129da:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80129de:	9007      	str	r0, [sp, #28]
 80129e0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80129e4:	4b0d      	ldr	r3, [pc, #52]	; (8012a1c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80129e6:	6822      	ldr	r2, [r4, #0]
 80129e8:	881b      	ldrh	r3, [r3, #0]
 80129ea:	9306      	str	r3, [sp, #24]
 80129ec:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80129f0:	9305      	str	r3, [sp, #20]
 80129f2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80129f6:	9304      	str	r3, [sp, #16]
 80129f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80129fc:	9303      	str	r3, [sp, #12]
 80129fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012a02:	9302      	str	r3, [sp, #8]
 8012a04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012a08:	e9cd 5300 	strd	r5, r3, [sp]
 8012a0c:	4631      	mov	r1, r6
 8012a0e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8012a10:	463b      	mov	r3, r7
 8012a12:	2200      	movs	r2, #0
 8012a14:	4620      	mov	r0, r4
 8012a16:	47a8      	blx	r5
 8012a18:	b00b      	add	sp, #44	; 0x2c
 8012a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a1c:	2002582a 	.word	0x2002582a

08012a20 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a24:	4698      	mov	r8, r3
 8012a26:	6803      	ldr	r3, [r0, #0]
 8012a28:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8012a2a:	4b15      	ldr	r3, [pc, #84]	; (8012a80 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8012a2c:	b08b      	sub	sp, #44	; 0x2c
 8012a2e:	4617      	mov	r7, r2
 8012a30:	f8b3 9000 	ldrh.w	r9, [r3]
 8012a34:	460e      	mov	r6, r1
 8012a36:	4604      	mov	r4, r0
 8012a38:	f7fb f99a 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8012a3c:	6803      	ldr	r3, [r0, #0]
 8012a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a40:	4798      	blx	r3
 8012a42:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012a46:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012a4a:	2302      	movs	r3, #2
 8012a4c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012a50:	2301      	movs	r3, #1
 8012a52:	9305      	str	r3, [sp, #20]
 8012a54:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012a58:	9304      	str	r3, [sp, #16]
 8012a5a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012a5e:	9303      	str	r3, [sp, #12]
 8012a60:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012a64:	9302      	str	r3, [sp, #8]
 8012a66:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	e9cd 8300 	strd	r8, r3, [sp]
 8012a70:	4631      	mov	r1, r6
 8012a72:	463b      	mov	r3, r7
 8012a74:	4620      	mov	r0, r4
 8012a76:	47a8      	blx	r5
 8012a78:	b00b      	add	sp, #44	; 0x2c
 8012a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a7e:	bf00      	nop
 8012a80:	2002582a 	.word	0x2002582a

08012a84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8012a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a88:	4698      	mov	r8, r3
 8012a8a:	6803      	ldr	r3, [r0, #0]
 8012a8c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8012a8e:	4b11      	ldr	r3, [pc, #68]	; (8012ad4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8012a90:	b087      	sub	sp, #28
 8012a92:	f8b3 9000 	ldrh.w	r9, [r3]
 8012a96:	460e      	mov	r6, r1
 8012a98:	4617      	mov	r7, r2
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	f7fb f968 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8012aa0:	6803      	ldr	r3, [r0, #0]
 8012aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa4:	4798      	blx	r3
 8012aa6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8012aaa:	f8cd 900c 	str.w	r9, [sp, #12]
 8012aae:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8012ab2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8012ab6:	9302      	str	r3, [sp, #8]
 8012ab8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012abc:	9301      	str	r3, [sp, #4]
 8012abe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012ac2:	9300      	str	r3, [sp, #0]
 8012ac4:	463a      	mov	r2, r7
 8012ac6:	4643      	mov	r3, r8
 8012ac8:	4631      	mov	r1, r6
 8012aca:	4620      	mov	r0, r4
 8012acc:	47a8      	blx	r5
 8012ace:	b007      	add	sp, #28
 8012ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ad4:	2002582a 	.word	0x2002582a

08012ad8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012adc:	4604      	mov	r4, r0
 8012ade:	b08f      	sub	sp, #60	; 0x3c
 8012ae0:	4610      	mov	r0, r2
 8012ae2:	460d      	mov	r5, r1
 8012ae4:	4691      	mov	r9, r2
 8012ae6:	461e      	mov	r6, r3
 8012ae8:	f005 ffa6 	bl	8018a38 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012aec:	2800      	cmp	r0, #0
 8012aee:	f000 809d 	beq.w	8012c2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8012af2:	6823      	ldr	r3, [r4, #0]
 8012af4:	f8df b198 	ldr.w	fp, [pc, #408]	; 8012c90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8012af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012afa:	f8df a198 	ldr.w	sl, [pc, #408]	; 8012c94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8012afe:	4f61      	ldr	r7, [pc, #388]	; (8012c84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012b00:	4620      	mov	r0, r4
 8012b02:	4798      	blx	r3
 8012b04:	6823      	ldr	r3, [r4, #0]
 8012b06:	4620      	mov	r0, r4
 8012b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b0a:	4798      	blx	r3
 8012b0c:	f8bb 3000 	ldrh.w	r3, [fp]
 8012b10:	9301      	str	r3, [sp, #4]
 8012b12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012b16:	f8ba 3000 	ldrh.w	r3, [sl]
 8012b1a:	9302      	str	r3, [sp, #8]
 8012b1c:	883b      	ldrh	r3, [r7, #0]
 8012b1e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8012b22:	9303      	str	r3, [sp, #12]
 8012b24:	4b58      	ldr	r3, [pc, #352]	; (8012c88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012b26:	9305      	str	r3, [sp, #20]
 8012b28:	881a      	ldrh	r2, [r3, #0]
 8012b2a:	9204      	str	r2, [sp, #16]
 8012b2c:	4640      	mov	r0, r8
 8012b2e:	f006 f817 	bl	8018b60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012b32:	8038      	strh	r0, [r7, #0]
 8012b34:	4640      	mov	r0, r8
 8012b36:	f006 f847 	bl	8018bc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012b3a:	9b05      	ldr	r3, [sp, #20]
 8012b3c:	b280      	uxth	r0, r0
 8012b3e:	8018      	strh	r0, [r3, #0]
 8012b40:	4b52      	ldr	r3, [pc, #328]	; (8012c8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d174      	bne.n	8012c32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8012b48:	883b      	ldrh	r3, [r7, #0]
 8012b4a:	f8ab 3000 	strh.w	r3, [fp]
 8012b4e:	f8aa 0000 	strh.w	r0, [sl]
 8012b52:	4648      	mov	r0, r9
 8012b54:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8012b58:	f005 ff6e 	bl	8018a38 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012b5c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8012b60:	2200      	movs	r2, #0
 8012b62:	4611      	mov	r1, r2
 8012b64:	4628      	mov	r0, r5
 8012b66:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8012b6a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8012b6e:	f7fb fe9a 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
 8012b72:	2301      	movs	r3, #1
 8012b74:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8012b78:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8012b7c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	dd5c      	ble.n	8012c3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012b84:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	dd58      	ble.n	8012c3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012b8c:	462a      	mov	r2, r5
 8012b8e:	ab0a      	add	r3, sp, #40	; 0x28
 8012b90:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012b94:	6851      	ldr	r1, [r2, #4]
 8012b96:	c303      	stmia	r3!, {r0, r1}
 8012b98:	4631      	mov	r1, r6
 8012b9a:	a80a      	add	r0, sp, #40	; 0x28
 8012b9c:	f7ff fbf8 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8012ba0:	4b38      	ldr	r3, [pc, #224]	; (8012c84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012ba2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ba6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012baa:	2100      	movs	r1, #0
 8012bac:	aa0a      	add	r2, sp, #40	; 0x28
 8012bae:	4b36      	ldr	r3, [pc, #216]	; (8012c88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012bb0:	910c      	str	r1, [sp, #48]	; 0x30
 8012bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012bba:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012bbe:	ab08      	add	r3, sp, #32
 8012bc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	a90c      	add	r1, sp, #48	; 0x30
 8012bc8:	f7ff fbe2 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8012bcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d13c      	bne.n	8012c4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8012bd2:	2000      	movs	r0, #0
 8012bd4:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8012bd8:	2600      	movs	r6, #0
 8012bda:	682a      	ldr	r2, [r5, #0]
 8012bdc:	696b      	ldr	r3, [r5, #20]
 8012bde:	616e      	str	r6, [r5, #20]
 8012be0:	9305      	str	r3, [sp, #20]
 8012be2:	6892      	ldr	r2, [r2, #8]
 8012be4:	a908      	add	r1, sp, #32
 8012be6:	4628      	mov	r0, r5
 8012be8:	4790      	blx	r2
 8012bea:	9b05      	ldr	r3, [sp, #20]
 8012bec:	616b      	str	r3, [r5, #20]
 8012bee:	4652      	mov	r2, sl
 8012bf0:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8012bf4:	4649      	mov	r1, r9
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8012bfc:	f7fb fe53 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
 8012c00:	4b23      	ldr	r3, [pc, #140]	; (8012c90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8012c02:	9a01      	ldr	r2, [sp, #4]
 8012c04:	801a      	strh	r2, [r3, #0]
 8012c06:	4b23      	ldr	r3, [pc, #140]	; (8012c94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8012c08:	9a02      	ldr	r2, [sp, #8]
 8012c0a:	801a      	strh	r2, [r3, #0]
 8012c0c:	4b1d      	ldr	r3, [pc, #116]	; (8012c84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012c0e:	9a03      	ldr	r2, [sp, #12]
 8012c10:	801a      	strh	r2, [r3, #0]
 8012c12:	4b1d      	ldr	r3, [pc, #116]	; (8012c88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012c14:	9a04      	ldr	r2, [sp, #16]
 8012c16:	801a      	strh	r2, [r3, #0]
 8012c18:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8012c1c:	6823      	ldr	r3, [r4, #0]
 8012c1e:	4620      	mov	r0, r4
 8012c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c22:	4798      	blx	r3
 8012c24:	6823      	ldr	r3, [r4, #0]
 8012c26:	4620      	mov	r0, r4
 8012c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c2a:	4798      	blx	r3
 8012c2c:	b00f      	add	sp, #60	; 0x3c
 8012c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c32:	883b      	ldrh	r3, [r7, #0]
 8012c34:	f8ab 0000 	strh.w	r0, [fp]
 8012c38:	f8aa 3000 	strh.w	r3, [sl]
 8012c3c:	e789      	b.n	8012b52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8012c3e:	462a      	mov	r2, r5
 8012c40:	ab0a      	add	r3, sp, #40	; 0x28
 8012c42:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012c46:	6851      	ldr	r1, [r2, #4]
 8012c48:	c303      	stmia	r3!, {r0, r1}
 8012c4a:	e7a9      	b.n	8012ba0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8012c4c:	a807      	add	r0, sp, #28
 8012c4e:	f006 f8f7 	bl	8018e40 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012c52:	4606      	mov	r6, r0
 8012c54:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012c56:	6803      	ldr	r3, [r0, #0]
 8012c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c5a:	4798      	blx	r3
 8012c5c:	4286      	cmp	r6, r0
 8012c5e:	d1b8      	bne.n	8012bd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012c60:	f7fb f886 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8012c64:	6803      	ldr	r3, [r0, #0]
 8012c66:	4606      	mov	r6, r0
 8012c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c6a:	9305      	str	r3, [sp, #20]
 8012c6c:	a807      	add	r0, sp, #28
 8012c6e:	f006 f8e7 	bl	8018e40 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012c72:	9b05      	ldr	r3, [sp, #20]
 8012c74:	4601      	mov	r1, r0
 8012c76:	4630      	mov	r0, r6
 8012c78:	4798      	blx	r3
 8012c7a:	f080 0001 	eor.w	r0, r0, #1
 8012c7e:	b2c0      	uxtb	r0, r0
 8012c80:	e7a8      	b.n	8012bd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8012c82:	bf00      	nop
 8012c84:	20025824 	.word	0x20025824
 8012c88:	20025826 	.word	0x20025826
 8012c8c:	20025828 	.word	0x20025828
 8012c90:	2002582a 	.word	0x2002582a
 8012c94:	2002582c 	.word	0x2002582c

08012c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012c98:	b510      	push	{r4, lr}
 8012c9a:	4b07      	ldr	r3, [pc, #28]	; (8012cb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	b13b      	cbz	r3, 8012cb2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012ca2:	6803      	ldr	r3, [r0, #0]
 8012ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca6:	4798      	blx	r3
 8012ca8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012caa:	4283      	cmp	r3, r0
 8012cac:	d101      	bne.n	8012cb2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012cae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012cb0:	bd10      	pop	{r4, pc}
 8012cb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012cb4:	e7fc      	b.n	8012cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012cb6:	bf00      	nop
 8012cb8:	2002582e 	.word	0x2002582e

08012cbc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8012cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc0:	b08a      	sub	sp, #40	; 0x28
 8012cc2:	461d      	mov	r5, r3
 8012cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cc8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012ccc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012cd0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012cd4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012cd8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012cdc:	2400      	movs	r4, #0
 8012cde:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012ce2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8012ce6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012cea:	4690      	mov	r8, r2
 8012cec:	4607      	mov	r7, r0
 8012cee:	9404      	str	r4, [sp, #16]
 8012cf0:	f88d 4020 	strb.w	r4, [sp, #32]
 8012cf4:	f7ff ffd0 	bl	8012c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012cf8:	fb06 8505 	mla	r5, r6, r5, r8
 8012cfc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	9505      	str	r5, [sp, #20]
 8012d04:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012d08:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012d0c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8012d10:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012d14:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012d18:	6803      	ldr	r3, [r0, #0]
 8012d1a:	a901      	add	r1, sp, #4
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	4798      	blx	r3
 8012d20:	b00a      	add	sp, #40	; 0x28
 8012d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d26 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012d26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d2a:	b08b      	sub	sp, #44	; 0x2c
 8012d2c:	2400      	movs	r4, #0
 8012d2e:	461d      	mov	r5, r3
 8012d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d34:	4688      	mov	r8, r1
 8012d36:	4691      	mov	r9, r2
 8012d38:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8012d3c:	9404      	str	r4, [sp, #16]
 8012d3e:	4607      	mov	r7, r0
 8012d40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d44:	f7ff ffa8 	bl	8012c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012d48:	fb06 9505 	mla	r5, r6, r5, r9
 8012d4c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012d50:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012d54:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012d58:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	9505      	str	r5, [sp, #20]
 8012d60:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012d64:	f8ad 401c 	strh.w	r4, [sp, #28]
 8012d68:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012d6c:	f8cd 8010 	str.w	r8, [sp, #16]
 8012d70:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012d74:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012d78:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012d7c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012d80:	6803      	ldr	r3, [r0, #0]
 8012d82:	a901      	add	r1, sp, #4
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	4798      	blx	r3
 8012d88:	b00b      	add	sp, #44	; 0x2c
 8012d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08012d90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8012d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d94:	b08a      	sub	sp, #40	; 0x28
 8012d96:	4698      	mov	r8, r3
 8012d98:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8012d9c:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8012da0:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8012da4:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8012da8:	2300      	movs	r3, #0
 8012daa:	2d0b      	cmp	r5, #11
 8012dac:	4606      	mov	r6, r0
 8012dae:	9304      	str	r3, [sp, #16]
 8012db0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8012db4:	d138      	bne.n	8012e28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8012db6:	2380      	movs	r3, #128	; 0x80
 8012db8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012dbc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012dc0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012dc4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012dc8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012dcc:	f88d 0020 	strb.w	r0, [sp, #32]
 8012dd0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012dd4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012dd8:	4630      	mov	r0, r6
 8012dda:	9203      	str	r2, [sp, #12]
 8012ddc:	f7ff ff5c 	bl	8012c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012de0:	2c0b      	cmp	r4, #11
 8012de2:	bf98      	it	ls
 8012de4:	4b1b      	ldrls	r3, [pc, #108]	; (8012e54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8012de6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8012dea:	bf98      	it	ls
 8012dec:	5d19      	ldrbls	r1, [r3, r4]
 8012dee:	f8ad 701e 	strh.w	r7, [sp, #30]
 8012df2:	bf88      	it	hi
 8012df4:	2100      	movhi	r1, #0
 8012df6:	fb02 8307 	mla	r3, r2, r7, r8
 8012dfa:	10c9      	asrs	r1, r1, #3
 8012dfc:	fb01 0003 	mla	r0, r1, r3, r0
 8012e00:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8012e04:	9005      	str	r0, [sp, #20]
 8012e06:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8012e0a:	6870      	ldr	r0, [r6, #4]
 8012e0c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012e10:	2300      	movs	r3, #0
 8012e12:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012e16:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012e1a:	6803      	ldr	r3, [r0, #0]
 8012e1c:	a901      	add	r1, sp, #4
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	4798      	blx	r3
 8012e22:	b00a      	add	sp, #40	; 0x28
 8012e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e28:	2d02      	cmp	r5, #2
 8012e2a:	d109      	bne.n	8012e40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8012e2c:	28ff      	cmp	r0, #255	; 0xff
 8012e2e:	d105      	bne.n	8012e3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8012e30:	f1bc 0f00 	cmp.w	ip, #0
 8012e34:	bf14      	ite	ne
 8012e36:	2340      	movne	r3, #64	; 0x40
 8012e38:	2320      	moveq	r3, #32
 8012e3a:	e7bd      	b.n	8012db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012e3c:	2340      	movs	r3, #64	; 0x40
 8012e3e:	e7bb      	b.n	8012db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012e40:	28ff      	cmp	r0, #255	; 0xff
 8012e42:	d105      	bne.n	8012e50 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8012e44:	f1bc 0f00 	cmp.w	ip, #0
 8012e48:	bf14      	ite	ne
 8012e4a:	2304      	movne	r3, #4
 8012e4c:	2301      	moveq	r3, #1
 8012e4e:	e7b3      	b.n	8012db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012e50:	2304      	movs	r3, #4
 8012e52:	e7b1      	b.n	8012db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012e54:	0802905c 	.word	0x0802905c

08012e58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8012e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e5c:	b08b      	sub	sp, #44	; 0x2c
 8012e5e:	461d      	mov	r5, r3
 8012e60:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8012e64:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8012e68:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8012e6c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012e70:	bf14      	ite	ne
 8012e72:	2308      	movne	r3, #8
 8012e74:	2302      	moveq	r3, #2
 8012e76:	2400      	movs	r4, #0
 8012e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e7c:	4688      	mov	r8, r1
 8012e7e:	4693      	mov	fp, r2
 8012e80:	9404      	str	r4, [sp, #16]
 8012e82:	4607      	mov	r7, r0
 8012e84:	f7ff ff08 	bl	8012c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012e88:	2e0b      	cmp	r6, #11
 8012e8a:	bf98      	it	ls
 8012e8c:	4b15      	ldrls	r3, [pc, #84]	; (8012ee4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8012e8e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012e92:	bf98      	it	ls
 8012e94:	5d9c      	ldrbls	r4, [r3, r6]
 8012e96:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012e9a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012e9e:	fb05 b50a 	mla	r5, r5, sl, fp
 8012ea2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012ea6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012eaa:	10e4      	asrs	r4, r4, #3
 8012eac:	fb04 0405 	mla	r4, r4, r5, r0
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	9405      	str	r4, [sp, #20]
 8012eb6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012eba:	f8ad a01e 	strh.w	sl, [sp, #30]
 8012ebe:	f8cd 8010 	str.w	r8, [sp, #16]
 8012ec2:	f88d 9020 	strb.w	r9, [sp, #32]
 8012ec6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8012eca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012ece:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8012ed2:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8012ed6:	6803      	ldr	r3, [r0, #0]
 8012ed8:	a901      	add	r1, sp, #4
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	4798      	blx	r3
 8012ede:	b00b      	add	sp, #44	; 0x2c
 8012ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee4:	0802905c 	.word	0x0802905c

08012ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8012ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eec:	461e      	mov	r6, r3
 8012eee:	4b0a      	ldr	r3, [pc, #40]	; (8012f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8012ef0:	460f      	mov	r7, r1
 8012ef2:	881d      	ldrh	r5, [r3, #0]
 8012ef4:	4690      	mov	r8, r2
 8012ef6:	f7fa ff3b 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8012efa:	6803      	ldr	r3, [r0, #0]
 8012efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012efe:	4798      	blx	r3
 8012f00:	280b      	cmp	r0, #11
 8012f02:	bf9a      	itte	ls
 8012f04:	4b05      	ldrls	r3, [pc, #20]	; (8012f1c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8012f06:	5c1c      	ldrbls	r4, [r3, r0]
 8012f08:	2400      	movhi	r4, #0
 8012f0a:	fb08 7005 	mla	r0, r8, r5, r7
 8012f0e:	10e4      	asrs	r4, r4, #3
 8012f10:	fb04 6000 	mla	r0, r4, r0, r6
 8012f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f18:	2002582a 	.word	0x2002582a
 8012f1c:	0802905c 	.word	0x0802905c

08012f20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8012f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f22:	b08b      	sub	sp, #44	; 0x2c
 8012f24:	461f      	mov	r7, r3
 8012f26:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012f2a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012f2e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012f32:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012f36:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012f3a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012f3e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012f42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012f46:	2500      	movs	r5, #0
 8012f48:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012f4c:	f88d 3020 	strb.w	r3, [sp, #32]
 8012f50:	4604      	mov	r4, r0
 8012f52:	4616      	mov	r6, r2
 8012f54:	9504      	str	r5, [sp, #16]
 8012f56:	f7ff fe9f 	bl	8012c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012f5a:	463a      	mov	r2, r7
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	4603      	mov	r3, r0
 8012f60:	4620      	mov	r0, r4
 8012f62:	f7ff ffc1 	bl	8012ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012f66:	4b0e      	ldr	r3, [pc, #56]	; (8012fa0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8012f68:	9005      	str	r0, [sp, #20]
 8012f6a:	881b      	ldrh	r3, [r3, #0]
 8012f6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012f70:	f7fa fefe 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8012f74:	6803      	ldr	r3, [r0, #0]
 8012f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f78:	4798      	blx	r3
 8012f7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012f7c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8012f80:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8012f84:	9304      	str	r3, [sp, #16]
 8012f86:	6860      	ldr	r0, [r4, #4]
 8012f88:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012f8c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8012f90:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8012f94:	6803      	ldr	r3, [r0, #0]
 8012f96:	a901      	add	r1, sp, #4
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	4798      	blx	r3
 8012f9c:	b00b      	add	sp, #44	; 0x2c
 8012f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fa0:	2002582a 	.word	0x2002582a

08012fa4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fa6:	b08d      	sub	sp, #52	; 0x34
 8012fa8:	466b      	mov	r3, sp
 8012faa:	e883 0006 	stmia.w	r3, {r1, r2}
 8012fae:	2300      	movs	r3, #0
 8012fb0:	9306      	str	r3, [sp, #24]
 8012fb2:	6803      	ldr	r3, [r0, #0]
 8012fb4:	f8bd 6000 	ldrh.w	r6, [sp]
 8012fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fba:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8012fbe:	2501      	movs	r5, #1
 8012fc0:	9503      	str	r5, [sp, #12]
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	4798      	blx	r3
 8012fc6:	463a      	mov	r2, r7
 8012fc8:	4631      	mov	r1, r6
 8012fca:	4603      	mov	r3, r0
 8012fcc:	4620      	mov	r0, r4
 8012fce:	f7ff ff8b 	bl	8012ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012fd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012fd4:	9307      	str	r3, [sp, #28]
 8012fd6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012fda:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012fde:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012fe2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012fe6:	4b0f      	ldr	r3, [pc, #60]	; (8013024 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8012fe8:	9004      	str	r0, [sp, #16]
 8012fea:	881b      	ldrh	r3, [r3, #0]
 8012fec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012ff0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012ff4:	f7fa febc 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8012ff8:	6803      	ldr	r3, [r0, #0]
 8012ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ffc:	4798      	blx	r3
 8012ffe:	23ff      	movs	r3, #255	; 0xff
 8013000:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013004:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013008:	6860      	ldr	r0, [r4, #4]
 801300a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801300e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013012:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013016:	6803      	ldr	r3, [r0, #0]
 8013018:	a903      	add	r1, sp, #12
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	4798      	blx	r3
 801301e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013020:	b00d      	add	sp, #52	; 0x34
 8013022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013024:	2002582a 	.word	0x2002582a

08013028 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302c:	b08c      	sub	sp, #48	; 0x30
 801302e:	461e      	mov	r6, r3
 8013030:	466d      	mov	r5, sp
 8013032:	2300      	movs	r3, #0
 8013034:	e885 0006 	stmia.w	r5, {r1, r2}
 8013038:	9306      	str	r3, [sp, #24]
 801303a:	6803      	ldr	r3, [r0, #0]
 801303c:	f8bd 7000 	ldrh.w	r7, [sp]
 8013040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013042:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013046:	2501      	movs	r5, #1
 8013048:	9503      	str	r5, [sp, #12]
 801304a:	4604      	mov	r4, r0
 801304c:	4798      	blx	r3
 801304e:	4642      	mov	r2, r8
 8013050:	4639      	mov	r1, r7
 8013052:	4603      	mov	r3, r0
 8013054:	4620      	mov	r0, r4
 8013056:	f7ff ff47 	bl	8012ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801305a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801305e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013062:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013066:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801306a:	4b11      	ldr	r3, [pc, #68]	; (80130b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801306c:	9004      	str	r0, [sp, #16]
 801306e:	881b      	ldrh	r3, [r3, #0]
 8013070:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013074:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013076:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801307a:	9607      	str	r6, [sp, #28]
 801307c:	f7fa fe78 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8013080:	6803      	ldr	r3, [r0, #0]
 8013082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013084:	4798      	blx	r3
 8013086:	23ff      	movs	r3, #255	; 0xff
 8013088:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801308c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013090:	6860      	ldr	r0, [r4, #4]
 8013092:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013096:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801309a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801309e:	6803      	ldr	r3, [r0, #0]
 80130a0:	a903      	add	r1, sp, #12
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	4798      	blx	r3
 80130a6:	4630      	mov	r0, r6
 80130a8:	b00c      	add	sp, #48	; 0x30
 80130aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ae:	bf00      	nop
 80130b0:	2002582a 	.word	0x2002582a

080130b4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80130b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130b6:	b085      	sub	sp, #20
 80130b8:	ac02      	add	r4, sp, #8
 80130ba:	e884 0006 	stmia.w	r4, {r1, r2}
 80130be:	4605      	mov	r5, r0
 80130c0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80130c4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80130c8:	f7ff fde6 	bl	8012c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80130cc:	463a      	mov	r2, r7
 80130ce:	4603      	mov	r3, r0
 80130d0:	4631      	mov	r1, r6
 80130d2:	4628      	mov	r0, r5
 80130d4:	f7ff ff08 	bl	8012ee8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80130d8:	4a05      	ldr	r2, [pc, #20]	; (80130f0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80130da:	682b      	ldr	r3, [r5, #0]
 80130dc:	8812      	ldrh	r2, [r2, #0]
 80130de:	9200      	str	r2, [sp, #0]
 80130e0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80130e2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80130e6:	4603      	mov	r3, r0
 80130e8:	4628      	mov	r0, r5
 80130ea:	47b0      	blx	r6
 80130ec:	b005      	add	sp, #20
 80130ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130f0:	2002582a 	.word	0x2002582a

080130f4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80130f4:	b570      	push	{r4, r5, r6, lr}
 80130f6:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 80130fa:	4604      	mov	r4, r0
 80130fc:	b19b      	cbz	r3, 8013126 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80130fe:	2002      	movs	r0, #2
 8013100:	f7fd fa2c 	bl	801055c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013104:	2300      	movs	r3, #0
 8013106:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 801310a:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 801310e:	6823      	ldr	r3, [r4, #0]
 8013110:	4620      	mov	r0, r4
 8013112:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8013116:	f7ff fdbf 	bl	8012c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801311a:	462b      	mov	r3, r5
 801311c:	4601      	mov	r1, r0
 801311e:	4620      	mov	r0, r4
 8013120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013124:	4718      	bx	r3
 8013126:	bd70      	pop	{r4, r5, r6, pc}

08013128 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013128:	b538      	push	{r3, r4, r5, lr}
 801312a:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 801312e:	428b      	cmp	r3, r1
 8013130:	4604      	mov	r4, r0
 8013132:	460d      	mov	r5, r1
 8013134:	d006      	beq.n	8013144 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013136:	6803      	ldr	r3, [r0, #0]
 8013138:	b929      	cbnz	r1, 8013146 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801313a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801313e:	4798      	blx	r3
 8013140:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8013144:	bd38      	pop	{r3, r4, r5, pc}
 8013146:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801314a:	e7f8      	b.n	801313e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801314c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801314c:	b510      	push	{r4, lr}
 801314e:	4b0d      	ldr	r3, [pc, #52]	; (8013184 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	4604      	mov	r4, r0
 8013154:	b95b      	cbnz	r3, 801316e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013156:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801315a:	2b02      	cmp	r3, #2
 801315c:	d007      	beq.n	801316e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801315e:	6840      	ldr	r0, [r0, #4]
 8013160:	f000 f90e 	bl	8013380 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013164:	b118      	cbz	r0, 801316e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013166:	6862      	ldr	r2, [r4, #4]
 8013168:	7a53      	ldrb	r3, [r2, #9]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d0fc      	beq.n	8013168 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801316e:	f7fd fc7f 	bl	8010a70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013172:	4620      	mov	r0, r4
 8013174:	2100      	movs	r1, #0
 8013176:	f7ff ffd7 	bl	8013128 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801317a:	4620      	mov	r0, r4
 801317c:	f7ff fd8c 	bl	8012c98 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013180:	bd10      	pop	{r4, pc}
 8013182:	bf00      	nop
 8013184:	2002582e 	.word	0x2002582e

08013188 <_ZN8touchgfx13DMA_Interface5flushEv>:
 8013188:	6803      	ldr	r3, [r0, #0]
 801318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801318c:	4718      	bx	r3

0801318e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801318e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013192:	1a13      	subs	r3, r2, r0
 8013194:	4258      	negs	r0, r3
 8013196:	4158      	adcs	r0, r3
 8013198:	4770      	bx	lr

0801319a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801319a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801319e:	1a9b      	subs	r3, r3, r2
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	bfdc      	itt	le
 80131a4:	6882      	ldrle	r2, [r0, #8]
 80131a6:	189b      	addle	r3, r3, r2
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	bfcc      	ite	gt
 80131ac:	2000      	movgt	r0, #0
 80131ae:	2001      	movle	r0, #1
 80131b0:	4770      	bx	lr

080131b2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80131b2:	6902      	ldr	r2, [r0, #16]
 80131b4:	6843      	ldr	r3, [r0, #4]
 80131b6:	2024      	movs	r0, #36	; 0x24
 80131b8:	fb00 3002 	mla	r0, r0, r2, r3
 80131bc:	4770      	bx	lr

080131be <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80131be:	6803      	ldr	r3, [r0, #0]
 80131c0:	691b      	ldr	r3, [r3, #16]
 80131c2:	4718      	bx	r3

080131c4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80131c4:	b570      	push	{r4, r5, r6, lr}
 80131c6:	2301      	movs	r3, #1
 80131c8:	7203      	strb	r3, [r0, #8]
 80131ca:	4604      	mov	r4, r0
 80131cc:	6840      	ldr	r0, [r0, #4]
 80131ce:	6803      	ldr	r3, [r0, #0]
 80131d0:	699b      	ldr	r3, [r3, #24]
 80131d2:	4798      	blx	r3
 80131d4:	6803      	ldr	r3, [r0, #0]
 80131d6:	2b40      	cmp	r3, #64	; 0x40
 80131d8:	4605      	mov	r5, r0
 80131da:	d00c      	beq.n	80131f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80131dc:	d810      	bhi.n	8013200 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80131de:	2b04      	cmp	r3, #4
 80131e0:	d01d      	beq.n	801321e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80131e2:	d804      	bhi.n	80131ee <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d006      	beq.n	80131f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80131e8:	2b02      	cmp	r3, #2
 80131ea:	d02c      	beq.n	8013246 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80131ec:	bd70      	pop	{r4, r5, r6, pc}
 80131ee:	2b08      	cmp	r3, #8
 80131f0:	d01d      	beq.n	801322e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80131f2:	2b20      	cmp	r3, #32
 80131f4:	d1fa      	bne.n	80131ec <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80131f6:	6823      	ldr	r3, [r4, #0]
 80131f8:	4620      	mov	r0, r4
 80131fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131fc:	4798      	blx	r3
 80131fe:	e013      	b.n	8013228 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013204:	d0f7      	beq.n	80131f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013206:	d804      	bhi.n	8013212 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013208:	2b80      	cmp	r3, #128	; 0x80
 801320a:	d0f4      	beq.n	80131f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801320c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013210:	e7f0      	b.n	80131f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013216:	d0ee      	beq.n	80131f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801321c:	e7e5      	b.n	80131ea <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801321e:	6823      	ldr	r3, [r4, #0]
 8013220:	7f01      	ldrb	r1, [r0, #28]
 8013222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013224:	4620      	mov	r0, r4
 8013226:	4798      	blx	r3
 8013228:	6823      	ldr	r3, [r4, #0]
 801322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801322c:	e006      	b.n	801323c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801322e:	6823      	ldr	r3, [r4, #0]
 8013230:	7f01      	ldrb	r1, [r0, #28]
 8013232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013234:	4620      	mov	r0, r4
 8013236:	4798      	blx	r3
 8013238:	6823      	ldr	r3, [r4, #0]
 801323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801323c:	4629      	mov	r1, r5
 801323e:	4620      	mov	r0, r4
 8013240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013244:	4718      	bx	r3
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	4620      	mov	r0, r4
 801324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801324c:	4798      	blx	r3
 801324e:	e7f3      	b.n	8013238 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013250 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013250:	4770      	bx	lr

08013252 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013252:	4770      	bx	lr

08013254 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013254:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013258:	1ad2      	subs	r2, r2, r3
 801325a:	2a00      	cmp	r2, #0
 801325c:	b510      	push	{r4, lr}
 801325e:	bfdc      	itt	le
 8013260:	6884      	ldrle	r4, [r0, #8]
 8013262:	1912      	addle	r2, r2, r4
 8013264:	2a01      	cmp	r2, #1
 8013266:	dd16      	ble.n	8013296 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013268:	6842      	ldr	r2, [r0, #4]
 801326a:	2424      	movs	r4, #36	; 0x24
 801326c:	fb04 2303 	mla	r3, r4, r3, r2
 8013270:	f101 0220 	add.w	r2, r1, #32
 8013274:	f851 4b04 	ldr.w	r4, [r1], #4
 8013278:	f843 4b04 	str.w	r4, [r3], #4
 801327c:	4291      	cmp	r1, r2
 801327e:	d1f9      	bne.n	8013274 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013280:	780a      	ldrb	r2, [r1, #0]
 8013282:	701a      	strb	r2, [r3, #0]
 8013284:	68c3      	ldr	r3, [r0, #12]
 8013286:	6882      	ldr	r2, [r0, #8]
 8013288:	f3bf 8f5b 	dmb	ish
 801328c:	3301      	adds	r3, #1
 801328e:	429a      	cmp	r2, r3
 8013290:	bfd8      	it	le
 8013292:	1a9b      	suble	r3, r3, r2
 8013294:	60c3      	str	r3, [r0, #12]
 8013296:	bd10      	pop	{r4, pc}

08013298 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013298:	6903      	ldr	r3, [r0, #16]
 801329a:	6882      	ldr	r2, [r0, #8]
 801329c:	f3bf 8f5b 	dmb	ish
 80132a0:	3301      	adds	r3, #1
 80132a2:	429a      	cmp	r2, r3
 80132a4:	bfd8      	it	le
 80132a6:	1a9b      	suble	r3, r3, r2
 80132a8:	6103      	str	r3, [r0, #16]
 80132aa:	4770      	bx	lr

080132ac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80132ac:	b570      	push	{r4, r5, r6, lr}
 80132ae:	4604      	mov	r4, r0
 80132b0:	460e      	mov	r6, r1
 80132b2:	6860      	ldr	r0, [r4, #4]
 80132b4:	6803      	ldr	r3, [r0, #0]
 80132b6:	685b      	ldr	r3, [r3, #4]
 80132b8:	4798      	blx	r3
 80132ba:	2800      	cmp	r0, #0
 80132bc:	d1f9      	bne.n	80132b2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80132be:	4d0d      	ldr	r5, [pc, #52]	; (80132f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80132c0:	6828      	ldr	r0, [r5, #0]
 80132c2:	6803      	ldr	r3, [r0, #0]
 80132c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80132c6:	4798      	blx	r3
 80132c8:	f7fd fbf4 	bl	8010ab4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80132cc:	6828      	ldr	r0, [r5, #0]
 80132ce:	2101      	movs	r1, #1
 80132d0:	f7ff ff2a 	bl	8013128 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80132d4:	6860      	ldr	r0, [r4, #4]
 80132d6:	6803      	ldr	r3, [r0, #0]
 80132d8:	4631      	mov	r1, r6
 80132da:	689b      	ldr	r3, [r3, #8]
 80132dc:	4798      	blx	r3
 80132de:	6823      	ldr	r3, [r4, #0]
 80132e0:	4620      	mov	r0, r4
 80132e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132e4:	4798      	blx	r3
 80132e6:	6828      	ldr	r0, [r5, #0]
 80132e8:	6803      	ldr	r3, [r0, #0]
 80132ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80132f0:	4718      	bx	r3
 80132f2:	bf00      	nop
 80132f4:	20025830 	.word	0x20025830

080132f8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80132f8:	b508      	push	{r3, lr}
 80132fa:	f7fd fbb9 	bl	8010a70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80132fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013302:	f7fd bbcb 	b.w	8010a9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013306 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013306:	b510      	push	{r4, lr}
 8013308:	4604      	mov	r4, r0
 801330a:	6840      	ldr	r0, [r0, #4]
 801330c:	6803      	ldr	r3, [r0, #0]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	4798      	blx	r3
 8013312:	b948      	cbnz	r0, 8013328 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013314:	7a63      	ldrb	r3, [r4, #9]
 8013316:	b13b      	cbz	r3, 8013328 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013318:	7a23      	ldrb	r3, [r4, #8]
 801331a:	b92b      	cbnz	r3, 8013328 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801331c:	6823      	ldr	r3, [r4, #0]
 801331e:	4620      	mov	r0, r4
 8013320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013326:	4718      	bx	r3
 8013328:	bd10      	pop	{r4, pc}

0801332a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801332a:	b570      	push	{r4, r5, r6, lr}
 801332c:	4604      	mov	r4, r0
 801332e:	6840      	ldr	r0, [r0, #4]
 8013330:	6803      	ldr	r3, [r0, #0]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	4798      	blx	r3
 8013336:	4605      	mov	r5, r0
 8013338:	b930      	cbnz	r0, 8013348 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801333a:	7a23      	ldrb	r3, [r4, #8]
 801333c:	b123      	cbz	r3, 8013348 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801333e:	6860      	ldr	r0, [r4, #4]
 8013340:	6803      	ldr	r3, [r0, #0]
 8013342:	695b      	ldr	r3, [r3, #20]
 8013344:	4798      	blx	r3
 8013346:	7225      	strb	r5, [r4, #8]
 8013348:	6860      	ldr	r0, [r4, #4]
 801334a:	6803      	ldr	r3, [r0, #0]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	4798      	blx	r3
 8013350:	b928      	cbnz	r0, 801335e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013352:	6823      	ldr	r3, [r4, #0]
 8013354:	4620      	mov	r0, r4
 8013356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801335c:	4718      	bx	r3
 801335e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013362:	f7fd bbb3 	b.w	8010acc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013368 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013368:	b510      	push	{r4, lr}
 801336a:	4c04      	ldr	r4, [pc, #16]	; (801337c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801336c:	6082      	str	r2, [r0, #8]
 801336e:	2200      	movs	r2, #0
 8013370:	e9c0 4100 	strd	r4, r1, [r0]
 8013374:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013378:	bd10      	pop	{r4, pc}
 801337a:	bf00      	nop
 801337c:	08029198 	.word	0x08029198

08013380 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013380:	6840      	ldr	r0, [r0, #4]
 8013382:	6803      	ldr	r3, [r0, #0]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	4718      	bx	r3

08013388 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013388:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801338c:	4770      	bx	lr

0801338e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801338e:	b510      	push	{r4, lr}
 8013390:	4604      	mov	r4, r0
 8013392:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013394:	b150      	cbz	r0, 80133ac <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013396:	6803      	ldr	r3, [r0, #0]
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	4798      	blx	r3
 801339c:	b130      	cbz	r0, 80133ac <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801339e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80133a0:	6803      	ldr	r3, [r0, #0]
 80133a2:	4621      	mov	r1, r4
 80133a4:	689b      	ldr	r3, [r3, #8]
 80133a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133aa:	4718      	bx	r3
 80133ac:	bd10      	pop	{r4, pc}

080133ae <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80133ae:	b570      	push	{r4, r5, r6, lr}
 80133b0:	790b      	ldrb	r3, [r1, #4]
 80133b2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	bf0c      	ite	eq
 80133ba:	2301      	moveq	r3, #1
 80133bc:	2300      	movne	r3, #0
 80133be:	4604      	mov	r4, r0
 80133c0:	460e      	mov	r6, r1
 80133c2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80133c6:	d109      	bne.n	80133dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80133c8:	b14d      	cbz	r5, 80133de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80133ca:	7933      	ldrb	r3, [r6, #4]
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	d10c      	bne.n	80133ea <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80133d0:	6823      	ldr	r3, [r4, #0]
 80133d2:	4620      	mov	r0, r4
 80133d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80133d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133da:	4718      	bx	r3
 80133dc:	b12d      	cbz	r5, 80133ea <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80133de:	6823      	ldr	r3, [r4, #0]
 80133e0:	4620      	mov	r0, r4
 80133e2:	695b      	ldr	r3, [r3, #20]
 80133e4:	4798      	blx	r3
 80133e6:	2d00      	cmp	r5, #0
 80133e8:	d1ef      	bne.n	80133ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80133ea:	bd70      	pop	{r4, r5, r6, pc}

080133ec <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 80133ec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80133f0:	b133      	cbz	r3, 8013400 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 80133f2:	790b      	ldrb	r3, [r1, #4]
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	bf01      	itttt	eq
 80133f8:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 80133fa:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 80133fc:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 80133fe:	8603      	strheq	r3, [r0, #48]	; 0x30
 8013400:	f7ff bfd5 	b.w	80133ae <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08013404 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8013404:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8013408:	b12a      	cbz	r2, 8013416 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801340a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801340e:	b112      	cbz	r2, 8013416 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013410:	6803      	ldr	r3, [r0, #0]
 8013412:	695b      	ldr	r3, [r3, #20]
 8013414:	4718      	bx	r3
 8013416:	4770      	bx	lr

08013418 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013418:	2000      	movs	r0, #0
 801341a:	4770      	bx	lr

0801341c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801341c:	4b07      	ldr	r3, [pc, #28]	; (801343c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801341e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013420:	881b      	ldrh	r3, [r3, #0]
 8013422:	4293      	cmp	r3, r2
 8013424:	bf81      	itttt	hi
 8013426:	4b06      	ldrhi	r3, [pc, #24]	; (8013440 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013428:	681b      	ldrhi	r3, [r3, #0]
 801342a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801342e:	7858      	ldrbhi	r0, [r3, #1]
 8013430:	bf8c      	ite	hi
 8013432:	f000 0003 	andhi.w	r0, r0, #3
 8013436:	2000      	movls	r0, #0
 8013438:	4770      	bx	lr
 801343a:	bf00      	nop
 801343c:	20025884 	.word	0x20025884
 8013440:	20025880 	.word	0x20025880

08013444 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013448:	4b10      	ldr	r3, [pc, #64]	; (801348c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801344a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801344c:	881b      	ldrh	r3, [r3, #0]
 801344e:	428b      	cmp	r3, r1
 8013450:	4604      	mov	r4, r0
 8013452:	d918      	bls.n	8013486 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013454:	6803      	ldr	r3, [r0, #0]
 8013456:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8013458:	4b0d      	ldr	r3, [pc, #52]	; (8013490 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801345a:	6818      	ldr	r0, [r3, #0]
 801345c:	f7fc fdf6 	bl	801004c <_ZNK8touchgfx5Texts7getTextEt>
 8013460:	6823      	ldr	r3, [r4, #0]
 8013462:	4606      	mov	r6, r0
 8013464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013466:	4620      	mov	r0, r4
 8013468:	4798      	blx	r3
 801346a:	6823      	ldr	r3, [r4, #0]
 801346c:	4607      	mov	r7, r0
 801346e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013472:	4620      	mov	r0, r4
 8013474:	4798      	blx	r3
 8013476:	463a      	mov	r2, r7
 8013478:	4603      	mov	r3, r0
 801347a:	4631      	mov	r1, r6
 801347c:	4620      	mov	r0, r4
 801347e:	46ac      	mov	ip, r5
 8013480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013484:	4760      	bx	ip
 8013486:	2000      	movs	r0, #0
 8013488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801348c:	20025884 	.word	0x20025884
 8013490:	2002588c 	.word	0x2002588c

08013494 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013498:	4b17      	ldr	r3, [pc, #92]	; (80134f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801349a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801349c:	881b      	ldrh	r3, [r3, #0]
 801349e:	428b      	cmp	r3, r1
 80134a0:	4604      	mov	r4, r0
 80134a2:	d926      	bls.n	80134f2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80134a4:	4b15      	ldr	r3, [pc, #84]	; (80134fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80134ac:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80134b0:	4b13      	ldr	r3, [pc, #76]	; (8013500 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80134b2:	7855      	ldrb	r5, [r2, #1]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80134ba:	6833      	ldr	r3, [r6, #0]
 80134bc:	69df      	ldr	r7, [r3, #28]
 80134be:	4b11      	ldr	r3, [pc, #68]	; (8013504 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80134c0:	6818      	ldr	r0, [r3, #0]
 80134c2:	f7fc fdc3 	bl	801004c <_ZNK8touchgfx5Texts7getTextEt>
 80134c6:	6823      	ldr	r3, [r4, #0]
 80134c8:	4680      	mov	r8, r0
 80134ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134cc:	4620      	mov	r0, r4
 80134ce:	4798      	blx	r3
 80134d0:	6823      	ldr	r3, [r4, #0]
 80134d2:	4681      	mov	r9, r0
 80134d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134d8:	4620      	mov	r0, r4
 80134da:	4798      	blx	r3
 80134dc:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80134e0:	9000      	str	r0, [sp, #0]
 80134e2:	464b      	mov	r3, r9
 80134e4:	4642      	mov	r2, r8
 80134e6:	4629      	mov	r1, r5
 80134e8:	4630      	mov	r0, r6
 80134ea:	47b8      	blx	r7
 80134ec:	b003      	add	sp, #12
 80134ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134f2:	2000      	movs	r0, #0
 80134f4:	e7fa      	b.n	80134ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80134f6:	bf00      	nop
 80134f8:	20025884 	.word	0x20025884
 80134fc:	20025880 	.word	0x20025880
 8013500:	20025888 	.word	0x20025888
 8013504:	2002588c 	.word	0x2002588c

08013508 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8013508:	b40e      	push	{r1, r2, r3}
 801350a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801350e:	4b2f      	ldr	r3, [pc, #188]	; (80135cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013510:	881a      	ldrh	r2, [r3, #0]
 8013512:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8013514:	429a      	cmp	r2, r3
 8013516:	b09d      	sub	sp, #116	; 0x74
 8013518:	4604      	mov	r4, r0
 801351a:	d954      	bls.n	80135c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801351c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80135d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013520:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80135d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8013524:	aa26      	add	r2, sp, #152	; 0x98
 8013526:	9202      	str	r2, [sp, #8]
 8013528:	f8d9 2000 	ldr.w	r2, [r9]
 801352c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013530:	f8d8 3000 	ldr.w	r3, [r8]
 8013534:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013538:	682b      	ldr	r3, [r5, #0]
 801353a:	4628      	mov	r0, r5
 801353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801353e:	4798      	blx	r3
 8013540:	b207      	sxth	r7, r0
 8013542:	4606      	mov	r6, r0
 8013544:	a803      	add	r0, sp, #12
 8013546:	f003 ff80 	bl	801744a <_ZN8touchgfx12TextProviderC1Ev>
 801354a:	682b      	ldr	r3, [r5, #0]
 801354c:	4628      	mov	r0, r5
 801354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013550:	4798      	blx	r3
 8013552:	682b      	ldr	r3, [r5, #0]
 8013554:	4682      	mov	sl, r0
 8013556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013558:	4628      	mov	r0, r5
 801355a:	4798      	blx	r3
 801355c:	4653      	mov	r3, sl
 801355e:	9000      	str	r0, [sp, #0]
 8013560:	9a02      	ldr	r2, [sp, #8]
 8013562:	9925      	ldr	r1, [sp, #148]	; 0x94
 8013564:	a803      	add	r0, sp, #12
 8013566:	f003 ffcb 	bl	8017500 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801356a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801356c:	f8d9 3000 	ldr.w	r3, [r9]
 8013570:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8013574:	8925      	ldrh	r5, [r4, #8]
 8013576:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801357a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801357e:	eba5 050c 	sub.w	r5, r5, ip
 8013582:	784a      	ldrb	r2, [r1, #1]
 8013584:	f8d8 3000 	ldr.w	r3, [r8]
 8013588:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801358c:	b22d      	sxth	r5, r5
 801358e:	9500      	str	r5, [sp, #0]
 8013590:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013594:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013598:	a803      	add	r0, sp, #12
 801359a:	f001 fd5b 	bl	8015054 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801359e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80135a2:	18b9      	adds	r1, r7, r2
 80135a4:	2900      	cmp	r1, #0
 80135a6:	b203      	sxth	r3, r0
 80135a8:	dd0b      	ble.n	80135c2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80135aa:	3b01      	subs	r3, #1
 80135ac:	fb13 f302 	smulbb	r3, r3, r2
 80135b0:	fb16 3300 	smlabb	r3, r6, r0, r3
 80135b4:	b21f      	sxth	r7, r3
 80135b6:	4638      	mov	r0, r7
 80135b8:	b01d      	add	sp, #116	; 0x74
 80135ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135be:	b003      	add	sp, #12
 80135c0:	4770      	bx	lr
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	dcf7      	bgt.n	80135b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80135c6:	2700      	movs	r7, #0
 80135c8:	e7f5      	b.n	80135b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80135ca:	bf00      	nop
 80135cc:	20025884 	.word	0x20025884
 80135d0:	20025880 	.word	0x20025880
 80135d4:	20025888 	.word	0x20025888

080135d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 80135d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135dc:	4bbc      	ldr	r3, [pc, #752]	; (80138d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 80135de:	460c      	mov	r4, r1
 80135e0:	881b      	ldrh	r3, [r3, #0]
 80135e2:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80135e4:	428b      	cmp	r3, r1
 80135e6:	b0a9      	sub	sp, #164	; 0xa4
 80135e8:	4680      	mov	r8, r0
 80135ea:	d809      	bhi.n	8013600 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 80135ec:	2300      	movs	r3, #0
 80135ee:	f04f 32ff 	mov.w	r2, #4294967295
 80135f2:	e9c0 3200 	strd	r3, r2, [r0]
 80135f6:	6083      	str	r3, [r0, #8]
 80135f8:	4640      	mov	r0, r8
 80135fa:	b029      	add	sp, #164	; 0xa4
 80135fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013600:	4eb4      	ldr	r6, [pc, #720]	; (80138d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8013602:	6833      	ldr	r3, [r6, #0]
 8013604:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8013608:	4bb3      	ldr	r3, [pc, #716]	; (80138d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013610:	4bb2      	ldr	r3, [pc, #712]	; (80138dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013612:	6818      	ldr	r0, [r3, #0]
 8013614:	f7fc fd1a 	bl	801004c <_ZNK8touchgfx5Texts7getTextEt>
 8013618:	682b      	ldr	r3, [r5, #0]
 801361a:	4681      	mov	r9, r0
 801361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801361e:	4628      	mov	r0, r5
 8013620:	4798      	blx	r3
 8013622:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8013624:	b203      	sxth	r3, r0
 8013626:	4407      	add	r7, r0
 8013628:	9304      	str	r3, [sp, #16]
 801362a:	b2bb      	uxth	r3, r7
 801362c:	9303      	str	r3, [sp, #12]
 801362e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8013632:	4682      	mov	sl, r0
 8013634:	a80f      	add	r0, sp, #60	; 0x3c
 8013636:	2b00      	cmp	r3, #0
 8013638:	f040 80a6 	bne.w	8013788 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 801363c:	f003 ff05 	bl	801744a <_ZN8touchgfx12TextProviderC1Ev>
 8013640:	682b      	ldr	r3, [r5, #0]
 8013642:	4628      	mov	r0, r5
 8013644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013646:	4798      	blx	r3
 8013648:	682b      	ldr	r3, [r5, #0]
 801364a:	4606      	mov	r6, r0
 801364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801364e:	4628      	mov	r0, r5
 8013650:	4798      	blx	r3
 8013652:	6823      	ldr	r3, [r4, #0]
 8013654:	4607      	mov	r7, r0
 8013656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013658:	4620      	mov	r0, r4
 801365a:	4798      	blx	r3
 801365c:	6823      	ldr	r3, [r4, #0]
 801365e:	4683      	mov	fp, r0
 8013660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013664:	4620      	mov	r0, r4
 8013666:	4798      	blx	r3
 8013668:	463b      	mov	r3, r7
 801366a:	e9cd b000 	strd	fp, r0, [sp]
 801366e:	4649      	mov	r1, r9
 8013670:	4632      	mov	r2, r6
 8013672:	a80f      	add	r0, sp, #60	; 0x3c
 8013674:	f003 ff59 	bl	801752a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013678:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801367c:	f8df b254 	ldr.w	fp, [pc, #596]	; 80138d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8013680:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013684:	f04f 0600 	mov.w	r6, #0
 8013688:	bf0c      	ite	eq
 801368a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801368e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8013692:	4637      	mov	r7, r6
 8013694:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013696:	f8db 3000 	ldr.w	r3, [fp]
 801369a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801369e:	4629      	mov	r1, r5
 80136a0:	785b      	ldrb	r3, [r3, #1]
 80136a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80136a6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80136aa:	a80f      	add	r0, sp, #60	; 0x3c
 80136ac:	f001 f9ed 	bl	8014a8a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80136b0:	9b03      	ldr	r3, [sp, #12]
 80136b2:	4286      	cmp	r6, r0
 80136b4:	bfb8      	it	lt
 80136b6:	4606      	movlt	r6, r0
 80136b8:	3701      	adds	r7, #1
 80136ba:	eba9 0903 	sub.w	r9, r9, r3
 80136be:	a80f      	add	r0, sp, #60	; 0x3c
 80136c0:	b236      	sxth	r6, r6
 80136c2:	b2bf      	uxth	r7, r7
 80136c4:	fa0f f989 	sxth.w	r9, r9
 80136c8:	f003 fee6 	bl	8017498 <_ZN8touchgfx12TextProvider11endOfStringEv>
 80136cc:	b918      	cbnz	r0, 80136d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 80136ce:	7a2b      	ldrb	r3, [r5, #8]
 80136d0:	444b      	add	r3, r9
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	dcde      	bgt.n	8013694 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 80136d6:	9b03      	ldr	r3, [sp, #12]
 80136d8:	9a04      	ldr	r2, [sp, #16]
 80136da:	f895 9009 	ldrb.w	r9, [r5, #9]
 80136de:	fb13 f707 	smulbb	r7, r3, r7
 80136e2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80136e4:	1aff      	subs	r7, r7, r3
 80136e6:	b2bf      	uxth	r7, r7
 80136e8:	b23b      	sxth	r3, r7
 80136ea:	429a      	cmp	r2, r3
 80136ec:	bfa8      	it	ge
 80136ee:	4657      	movge	r7, sl
 80136f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80136f4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80136f8:	6823      	ldr	r3, [r4, #0]
 80136fa:	bf08      	it	eq
 80136fc:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8013700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013702:	bf18      	it	ne
 8013704:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8013708:	4620      	mov	r0, r4
 801370a:	4798      	blx	r3
 801370c:	444f      	add	r7, r9
 801370e:	fa1f f987 	uxth.w	r9, r7
 8013712:	2801      	cmp	r0, #1
 8013714:	fa0f f789 	sxth.w	r7, r9
 8013718:	b2b3      	uxth	r3, r6
 801371a:	f000 80e1 	beq.w	80138e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801371e:	2802      	cmp	r0, #2
 8013720:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8013724:	f000 80e2 	beq.w	80138ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8013728:	7aea      	ldrb	r2, [r5, #11]
 801372a:	7b2d      	ldrb	r5, [r5, #12]
 801372c:	b236      	sxth	r6, r6
 801372e:	1ab6      	subs	r6, r6, r2
 8013730:	442a      	add	r2, r5
 8013732:	4413      	add	r3, r2
 8013734:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8013738:	fa1f fa86 	uxth.w	sl, r6
 801373c:	b29b      	uxth	r3, r3
 801373e:	2a02      	cmp	r2, #2
 8013740:	fa0f fb8a 	sxth.w	fp, sl
 8013744:	b21e      	sxth	r6, r3
 8013746:	f000 80d5 	beq.w	80138f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 801374a:	2a03      	cmp	r2, #3
 801374c:	f000 80dd 	beq.w	801390a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8013750:	2a01      	cmp	r2, #1
 8013752:	f040 80e5 	bne.w	8013920 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8013756:	8925      	ldrh	r5, [r4, #8]
 8013758:	4633      	mov	r3, r6
 801375a:	eba5 0909 	sub.w	r9, r5, r9
 801375e:	463e      	mov	r6, r7
 8013760:	465d      	mov	r5, fp
 8013762:	461f      	mov	r7, r3
 8013764:	fa0f fb89 	sxth.w	fp, r9
 8013768:	4b5c      	ldr	r3, [pc, #368]	; (80138dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801376a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801376c:	6818      	ldr	r0, [r3, #0]
 801376e:	f7fc fc6d 	bl	801004c <_ZNK8touchgfx5Texts7getTextEt>
 8013772:	f8a8 b000 	strh.w	fp, [r8]
 8013776:	f8a8 5002 	strh.w	r5, [r8, #2]
 801377a:	f8a8 6004 	strh.w	r6, [r8, #4]
 801377e:	f8a8 7006 	strh.w	r7, [r8, #6]
 8013782:	f8c8 0008 	str.w	r0, [r8, #8]
 8013786:	e737      	b.n	80135f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8013788:	f003 fe5f 	bl	801744a <_ZN8touchgfx12TextProviderC1Ev>
 801378c:	682b      	ldr	r3, [r5, #0]
 801378e:	4628      	mov	r0, r5
 8013790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013792:	4798      	blx	r3
 8013794:	682b      	ldr	r3, [r5, #0]
 8013796:	4607      	mov	r7, r0
 8013798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801379a:	4628      	mov	r0, r5
 801379c:	4798      	blx	r3
 801379e:	6823      	ldr	r3, [r4, #0]
 80137a0:	4683      	mov	fp, r0
 80137a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137a4:	4620      	mov	r0, r4
 80137a6:	4798      	blx	r3
 80137a8:	6822      	ldr	r2, [r4, #0]
 80137aa:	9005      	str	r0, [sp, #20]
 80137ac:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80137b0:	4620      	mov	r0, r4
 80137b2:	4790      	blx	r2
 80137b4:	9b05      	ldr	r3, [sp, #20]
 80137b6:	9001      	str	r0, [sp, #4]
 80137b8:	463a      	mov	r2, r7
 80137ba:	4649      	mov	r1, r9
 80137bc:	9300      	str	r3, [sp, #0]
 80137be:	a80f      	add	r0, sp, #60	; 0x3c
 80137c0:	465b      	mov	r3, fp
 80137c2:	f003 feb2 	bl	801752a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80137c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80137ca:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 80137ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80137d0:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80137d4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80137d8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80137dc:	bf0a      	itet	eq
 80137de:	464a      	moveq	r2, r9
 80137e0:	461a      	movne	r2, r3
 80137e2:	4699      	moveq	r9, r3
 80137e4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80137e8:	1ad2      	subs	r2, r2, r3
 80137ea:	6833      	ldr	r3, [r6, #0]
 80137ec:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 80137f0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80137f4:	af0f      	add	r7, sp, #60	; 0x3c
 80137f6:	7859      	ldrb	r1, [r3, #1]
 80137f8:	9707      	str	r7, [sp, #28]
 80137fa:	2300      	movs	r3, #0
 80137fc:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013800:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013804:	f88d 1020 	strb.w	r1, [sp, #32]
 8013808:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801380c:	9509      	str	r5, [sp, #36]	; 0x24
 801380e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013812:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8013816:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801381a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801381e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8013822:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013826:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801382a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801382e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013832:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013836:	b350      	cbz	r0, 801388e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8013838:	682b      	ldr	r3, [r5, #0]
 801383a:	4628      	mov	r0, r5
 801383c:	695b      	ldr	r3, [r3, #20]
 801383e:	4798      	blx	r3
 8013840:	4607      	mov	r7, r0
 8013842:	b320      	cbz	r0, 801388e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8013844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013846:	6803      	ldr	r3, [r0, #0]
 8013848:	4639      	mov	r1, r7
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	4798      	blx	r3
 801384e:	4606      	mov	r6, r0
 8013850:	b1e8      	cbz	r0, 801388e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8013852:	7b43      	ldrb	r3, [r0, #13]
 8013854:	7a82      	ldrb	r2, [r0, #10]
 8013856:	005b      	lsls	r3, r3, #1
 8013858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801385c:	4313      	orrs	r3, r2
 801385e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013862:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8013866:	2b06      	cmp	r3, #6
 8013868:	d111      	bne.n	801388e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 801386a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801386c:	6803      	ldr	r3, [r0, #0]
 801386e:	4632      	mov	r2, r6
 8013870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013872:	4639      	mov	r1, r7
 8013874:	4798      	blx	r3
 8013876:	7b73      	ldrb	r3, [r6, #13]
 8013878:	005b      	lsls	r3, r3, #1
 801387a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801387e:	7ab3      	ldrb	r3, [r6, #10]
 8013880:	4313      	orrs	r3, r2
 8013882:	4418      	add	r0, r3
 8013884:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013888:	4418      	add	r0, r3
 801388a:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801388e:	2600      	movs	r6, #0
 8013890:	4637      	mov	r7, r6
 8013892:	a806      	add	r0, sp, #24
 8013894:	f001 fada 	bl	8014e4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013898:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 801389c:	9b03      	ldr	r3, [sp, #12]
 801389e:	4286      	cmp	r6, r0
 80138a0:	eba9 0903 	sub.w	r9, r9, r3
 80138a4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80138a8:	bfb8      	it	lt
 80138aa:	4606      	movlt	r6, r0
 80138ac:	3701      	adds	r7, #1
 80138ae:	b236      	sxth	r6, r6
 80138b0:	b2bf      	uxth	r7, r7
 80138b2:	fa0f f989 	sxth.w	r9, r9
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	f43f af0d 	beq.w	80136d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 80138bc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	f47f af08 	bne.w	80136d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 80138c6:	7a2b      	ldrb	r3, [r5, #8]
 80138c8:	444b      	add	r3, r9
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	dce1      	bgt.n	8013892 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 80138ce:	e702      	b.n	80136d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 80138d0:	20025884 	.word	0x20025884
 80138d4:	20025880 	.word	0x20025880
 80138d8:	20025888 	.word	0x20025888
 80138dc:	2002588c 	.word	0x2002588c
 80138e0:	ebaa 0606 	sub.w	r6, sl, r6
 80138e4:	2002      	movs	r0, #2
 80138e6:	fb96 f6f0 	sdiv	r6, r6, r0
 80138ea:	e71d      	b.n	8013728 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 80138ec:	441e      	add	r6, r3
 80138ee:	ebaa 0606 	sub.w	r6, sl, r6
 80138f2:	e719      	b.n	8013728 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 80138f4:	8925      	ldrh	r5, [r4, #8]
 80138f6:	1aed      	subs	r5, r5, r3
 80138f8:	eba5 050a 	sub.w	r5, r5, sl
 80138fc:	fa0f fb85 	sxth.w	fp, r5
 8013900:	8965      	ldrh	r5, [r4, #10]
 8013902:	eba5 0509 	sub.w	r5, r5, r9
 8013906:	b22d      	sxth	r5, r5
 8013908:	e72e      	b.n	8013768 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 801390a:	8965      	ldrh	r5, [r4, #10]
 801390c:	1aed      	subs	r5, r5, r3
 801390e:	eba5 050a 	sub.w	r5, r5, sl
 8013912:	4633      	mov	r3, r6
 8013914:	b22d      	sxth	r5, r5
 8013916:	463e      	mov	r6, r7
 8013918:	f04f 0b00 	mov.w	fp, #0
 801391c:	461f      	mov	r7, r3
 801391e:	e723      	b.n	8013768 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8013920:	2500      	movs	r5, #0
 8013922:	e721      	b.n	8013768 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

08013924 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013924:	b513      	push	{r0, r1, r4, lr}
 8013926:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801392a:	4604      	mov	r4, r0
 801392c:	b1fb      	cbz	r3, 801396e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801392e:	4b16      	ldr	r3, [pc, #88]	; (8013988 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013930:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013932:	881b      	ldrh	r3, [r3, #0]
 8013934:	428b      	cmp	r3, r1
 8013936:	d91a      	bls.n	801396e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013938:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801393c:	2b00      	cmp	r3, #0
 801393e:	dd16      	ble.n	801396e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013940:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013944:	2b00      	cmp	r3, #0
 8013946:	dd12      	ble.n	801396e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013948:	4b10      	ldr	r3, [pc, #64]	; (801398c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801394a:	6818      	ldr	r0, [r3, #0]
 801394c:	f7fc fb7e 	bl	801004c <_ZNK8touchgfx5Texts7getTextEt>
 8013950:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013954:	6822      	ldr	r2, [r4, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	db06      	blt.n	8013968 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801395a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801395e:	2b00      	cmp	r3, #0
 8013960:	db02      	blt.n	8013968 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013962:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013964:	4298      	cmp	r0, r3
 8013966:	d004      	beq.n	8013972 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013968:	6953      	ldr	r3, [r2, #20]
 801396a:	4620      	mov	r0, r4
 801396c:	4798      	blx	r3
 801396e:	b002      	add	sp, #8
 8013970:	bd10      	pop	{r4, pc}
 8013972:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8013976:	c903      	ldmia	r1, {r0, r1}
 8013978:	466b      	mov	r3, sp
 801397a:	e883 0003 	stmia.w	r3, {r0, r1}
 801397e:	6912      	ldr	r2, [r2, #16]
 8013980:	4619      	mov	r1, r3
 8013982:	4620      	mov	r0, r4
 8013984:	4790      	blx	r2
 8013986:	e7f2      	b.n	801396e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013988:	20025884 	.word	0x20025884
 801398c:	2002588c 	.word	0x2002588c

08013990 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013994:	4b44      	ldr	r3, [pc, #272]	; (8013aa8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013996:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013998:	881b      	ldrh	r3, [r3, #0]
 801399a:	4293      	cmp	r3, r2
 801399c:	b08e      	sub	sp, #56	; 0x38
 801399e:	4604      	mov	r4, r0
 80139a0:	d97e      	bls.n	8013aa0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80139a2:	6808      	ldr	r0, [r1, #0]
 80139a4:	4d41      	ldr	r5, [pc, #260]	; (8013aac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80139a6:	6849      	ldr	r1, [r1, #4]
 80139a8:	ab05      	add	r3, sp, #20
 80139aa:	c303      	stmia	r3!, {r0, r1}
 80139ac:	4611      	mov	r1, r2
 80139ae:	6828      	ldr	r0, [r5, #0]
 80139b0:	f7fc fb4c 	bl	801004c <_ZNK8touchgfx5Texts7getTextEt>
 80139b4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	db11      	blt.n	80139e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80139bc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	db0d      	blt.n	80139e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80139c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80139c6:	4298      	cmp	r0, r3
 80139c8:	d10a      	bne.n	80139e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80139ca:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80139ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139d2:	ab09      	add	r3, sp, #36	; 0x24
 80139d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80139d8:	4619      	mov	r1, r3
 80139da:	a805      	add	r0, sp, #20
 80139dc:	f7fe fcd8 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 80139e0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	dd5b      	ble.n	8013aa0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80139e8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	dd57      	ble.n	8013aa0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80139f0:	4f2f      	ldr	r7, [pc, #188]	; (8013ab0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 80139f2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80139fa:	4b2e      	ldr	r3, [pc, #184]	; (8013ab4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013a02:	2e00      	cmp	r6, #0
 8013a04:	d04c      	beq.n	8013aa0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013a06:	6823      	ldr	r3, [r4, #0]
 8013a08:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8013a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a0e:	4620      	mov	r0, r4
 8013a10:	4798      	blx	r3
 8013a12:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8013a1a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8013a1e:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8013a22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013a24:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013a28:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8013a2c:	785b      	ldrb	r3, [r3, #1]
 8013a2e:	9609      	str	r6, [sp, #36]	; 0x24
 8013a30:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013a34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a38:	4b1f      	ldr	r3, [pc, #124]	; (8013ab8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8013a3a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8013a44:	910b      	str	r1, [sp, #44]	; 0x2c
 8013a46:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8013a4a:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8013a4e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8013a52:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8013a56:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8013a5a:	b10a      	cbz	r2, 8013a60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8013a5c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8013a5e:	b906      	cbnz	r6, 8013a62 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013a60:	689e      	ldr	r6, [r3, #8]
 8013a62:	af07      	add	r7, sp, #28
 8013a64:	4621      	mov	r1, r4
 8013a66:	4638      	mov	r0, r7
 8013a68:	f003 f8d8 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013a6c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013a6e:	6828      	ldr	r0, [r5, #0]
 8013a70:	f7fc faec 	bl	801004c <_ZNK8touchgfx5Texts7getTextEt>
 8013a74:	6823      	ldr	r3, [r4, #0]
 8013a76:	4605      	mov	r5, r0
 8013a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	4798      	blx	r3
 8013a7e:	6823      	ldr	r3, [r4, #0]
 8013a80:	4680      	mov	r8, r0
 8013a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a86:	4620      	mov	r0, r4
 8013a88:	4798      	blx	r3
 8013a8a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8013a8e:	ab09      	add	r3, sp, #36	; 0x24
 8013a90:	9300      	str	r3, [sp, #0]
 8013a92:	9501      	str	r5, [sp, #4]
 8013a94:	ab05      	add	r3, sp, #20
 8013a96:	e897 0006 	ldmia.w	r7, {r1, r2}
 8013a9a:	4630      	mov	r0, r6
 8013a9c:	f7fc fa67 	bl	800ff6e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013aa0:	b00e      	add	sp, #56	; 0x38
 8013aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aa6:	bf00      	nop
 8013aa8:	20025884 	.word	0x20025884
 8013aac:	2002588c 	.word	0x2002588c
 8013ab0:	20025880 	.word	0x20025880
 8013ab4:	20025888 	.word	0x20025888
 8013ab8:	20025830 	.word	0x20025830

08013abc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013abc:	b538      	push	{r3, r4, r5, lr}
 8013abe:	4b0e      	ldr	r3, [pc, #56]	; (8013af8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013ac0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013ac2:	881b      	ldrh	r3, [r3, #0]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	4604      	mov	r4, r0
 8013ac8:	d214      	bcs.n	8013af4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013aca:	6803      	ldr	r3, [r0, #0]
 8013acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ace:	4798      	blx	r3
 8013ad0:	6823      	ldr	r3, [r4, #0]
 8013ad2:	4605      	mov	r5, r0
 8013ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	4798      	blx	r3
 8013ada:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013ade:	b22d      	sxth	r5, r5
 8013ae0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013ae4:	4601      	mov	r1, r0
 8013ae6:	bf06      	itte	eq
 8013ae8:	4602      	moveq	r2, r0
 8013aea:	4629      	moveq	r1, r5
 8013aec:	462a      	movne	r2, r5
 8013aee:	4620      	mov	r0, r4
 8013af0:	f7fa ff35 	bl	800e95e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013af4:	bd38      	pop	{r3, r4, r5, pc}
 8013af6:	bf00      	nop
 8013af8:	20025884 	.word	0x20025884

08013afc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013afc:	b530      	push	{r4, r5, lr}
 8013afe:	888b      	ldrh	r3, [r1, #4]
 8013b00:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013b02:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013b06:	b085      	sub	sp, #20
 8013b08:	4604      	mov	r4, r0
 8013b0a:	b923      	cbnz	r3, 8013b16 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013b0c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013b10:	b90b      	cbnz	r3, 8013b16 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013b12:	f7ff ffd3 	bl	8013abc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	466d      	mov	r5, sp
 8013b1a:	4621      	mov	r1, r4
 8013b1c:	4628      	mov	r0, r5
 8013b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b22:	4798      	blx	r3
 8013b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013b28:	343c      	adds	r4, #60	; 0x3c
 8013b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013b2e:	b005      	add	sp, #20
 8013b30:	bd30      	pop	{r4, r5, pc}

08013b32 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013b32:	2300      	movs	r3, #0
 8013b34:	8083      	strh	r3, [r0, #4]
 8013b36:	80c3      	strh	r3, [r0, #6]
 8013b38:	8003      	strh	r3, [r0, #0]
 8013b3a:	8043      	strh	r3, [r0, #2]
 8013b3c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013b40:	2bff      	cmp	r3, #255	; 0xff
 8013b42:	bf01      	itttt	eq
 8013b44:	890b      	ldrheq	r3, [r1, #8]
 8013b46:	8083      	strheq	r3, [r0, #4]
 8013b48:	894b      	ldrheq	r3, [r1, #10]
 8013b4a:	80c3      	strheq	r3, [r0, #6]
 8013b4c:	4770      	bx	lr
	...

08013b50 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b52:	4604      	mov	r4, r0
 8013b54:	6808      	ldr	r0, [r1, #0]
 8013b56:	6849      	ldr	r1, [r1, #4]
 8013b58:	466b      	mov	r3, sp
 8013b5a:	c303      	stmia	r3!, {r0, r1}
 8013b5c:	6823      	ldr	r3, [r4, #0]
 8013b5e:	4669      	mov	r1, sp
 8013b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b62:	4620      	mov	r0, r4
 8013b64:	4798      	blx	r3
 8013b66:	4b08      	ldr	r3, [pc, #32]	; (8013b88 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8013b6e:	b10a      	cbz	r2, 8013b74 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013b70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013b72:	b900      	cbnz	r0, 8013b76 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013b74:	6898      	ldr	r0, [r3, #8]
 8013b76:	6803      	ldr	r3, [r0, #0]
 8013b78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013b7a:	6a1d      	ldr	r5, [r3, #32]
 8013b7c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013b80:	4669      	mov	r1, sp
 8013b82:	47a8      	blx	r5
 8013b84:	b003      	add	sp, #12
 8013b86:	bd30      	pop	{r4, r5, pc}
 8013b88:	20025830 	.word	0x20025830

08013b8c <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013b8c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8013b90:	b12a      	cbz	r2, 8013b9e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013b92:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013b96:	b112      	cbz	r2, 8013b9e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013b98:	6803      	ldr	r3, [r0, #0]
 8013b9a:	695b      	ldr	r3, [r3, #20]
 8013b9c:	4718      	bx	r3
 8013b9e:	4770      	bx	lr

08013ba0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8013ba0:	b570      	push	{r4, r5, r6, lr}
 8013ba2:	880b      	ldrh	r3, [r1, #0]
 8013ba4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8013ba6:	4605      	mov	r5, r0
 8013ba8:	8813      	ldrh	r3, [r2, #0]
 8013baa:	f825 3f30 	strh.w	r3, [r5, #48]!
 8013bae:	4604      	mov	r4, r0
 8013bb0:	4628      	mov	r0, r5
 8013bb2:	f004 ffd5 	bl	8018b60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013bb6:	4606      	mov	r6, r0
 8013bb8:	4628      	mov	r0, r5
 8013bba:	f005 f805 	bl	8018bc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013bbe:	6823      	ldr	r3, [r4, #0]
 8013bc0:	4605      	mov	r5, r0
 8013bc2:	4631      	mov	r1, r6
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bc8:	4798      	blx	r3
 8013bca:	6823      	ldr	r3, [r4, #0]
 8013bcc:	4629      	mov	r1, r5
 8013bce:	4620      	mov	r0, r4
 8013bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bd6:	4718      	bx	r3

08013bd8 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8013bd8:	b510      	push	{r4, lr}
 8013bda:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8013bde:	2bff      	cmp	r3, #255	; 0xff
 8013be0:	4604      	mov	r4, r0
 8013be2:	d006      	beq.n	8013bf2 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8013be4:	2300      	movs	r3, #0
 8013be6:	8003      	strh	r3, [r0, #0]
 8013be8:	8043      	strh	r3, [r0, #2]
 8013bea:	8083      	strh	r3, [r0, #4]
 8013bec:	80c3      	strh	r3, [r0, #6]
 8013bee:	4620      	mov	r0, r4
 8013bf0:	bd10      	pop	{r4, pc}
 8013bf2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8013bf6:	b11b      	cbz	r3, 8013c00 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8013bf8:	3130      	adds	r1, #48	; 0x30
 8013bfa:	f005 f819 	bl	8018c30 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013bfe:	e7f6      	b.n	8013bee <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8013c00:	312e      	adds	r1, #46	; 0x2e
 8013c02:	e7fa      	b.n	8013bfa <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08013c04 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8013c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c08:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013c0c:	b08a      	sub	sp, #40	; 0x28
 8013c0e:	4604      	mov	r4, r0
 8013c10:	4688      	mov	r8, r1
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d066      	beq.n	8013ce4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8013c16:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013c18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013c1c:	a805      	add	r0, sp, #20
 8013c1e:	f004 ff9f 	bl	8018b60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013c22:	4607      	mov	r7, r0
 8013c24:	a805      	add	r0, sp, #20
 8013c26:	f004 ffcf 	bl	8018bc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013c2a:	f9b8 6000 	ldrsh.w	r6, [r8]
 8013c2e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8013c32:	4432      	add	r2, r6
 8013c34:	b292      	uxth	r2, r2
 8013c36:	2300      	movs	r3, #0
 8013c38:	fa0f fc82 	sxth.w	ip, r2
 8013c3c:	459c      	cmp	ip, r3
 8013c3e:	9306      	str	r3, [sp, #24]
 8013c40:	dd52      	ble.n	8013ce8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013c42:	42b7      	cmp	r7, r6
 8013c44:	dd50      	ble.n	8013ce8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013c46:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013c4a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013c4e:	442b      	add	r3, r5
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	b219      	sxth	r1, r3
 8013c54:	2900      	cmp	r1, #0
 8013c56:	dd47      	ble.n	8013ce8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013c58:	42a8      	cmp	r0, r5
 8013c5a:	dd45      	ble.n	8013ce8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013c5c:	4567      	cmp	r7, ip
 8013c5e:	bfb8      	it	lt
 8013c60:	b2ba      	uxthlt	r2, r7
 8013c62:	4288      	cmp	r0, r1
 8013c64:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8013c68:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8013c6c:	bfb8      	it	lt
 8013c6e:	b283      	uxthlt	r3, r0
 8013c70:	1b92      	subs	r2, r2, r6
 8013c72:	1b5b      	subs	r3, r3, r5
 8013c74:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013c78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013c7c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013c80:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013c84:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d026      	beq.n	8013cde <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013c90:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	dd22      	ble.n	8013cde <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013c98:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	dd1e      	ble.n	8013cde <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013ca6:	6823      	ldr	r3, [r4, #0]
 8013ca8:	a908      	add	r1, sp, #32
 8013caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cac:	4620      	mov	r0, r4
 8013cae:	4798      	blx	r3
 8013cb0:	4b0f      	ldr	r3, [pc, #60]	; (8013cf0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8013cb8:	b10a      	cbz	r2, 8013cbe <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8013cba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013cbc:	b900      	cbnz	r0, 8013cc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8013cbe:	6898      	ldr	r0, [r3, #8]
 8013cc0:	6801      	ldr	r1, [r0, #0]
 8013cc2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8013cc6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013cca:	2501      	movs	r5, #1
 8013ccc:	9502      	str	r5, [sp, #8]
 8013cce:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8013cd2:	9401      	str	r4, [sp, #4]
 8013cd4:	ac06      	add	r4, sp, #24
 8013cd6:	9400      	str	r4, [sp, #0]
 8013cd8:	688c      	ldr	r4, [r1, #8]
 8013cda:	a905      	add	r1, sp, #20
 8013cdc:	47a0      	blx	r4
 8013cde:	b00a      	add	sp, #40	; 0x28
 8013ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8013ce6:	e797      	b.n	8013c18 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8013ce8:	2300      	movs	r3, #0
 8013cea:	9307      	str	r3, [sp, #28]
 8013cec:	e7ca      	b.n	8013c84 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8013cee:	bf00      	nop
 8013cf0:	20025830 	.word	0x20025830

08013cf4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8013cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013cf8:	4b2f      	ldr	r3, [pc, #188]	; (8013db8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8013cfa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013cfc:	881b      	ldrh	r3, [r3, #0]
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	b08d      	sub	sp, #52	; 0x34
 8013d02:	4604      	mov	r4, r0
 8013d04:	460f      	mov	r7, r1
 8013d06:	d954      	bls.n	8013db2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013d08:	4b2c      	ldr	r3, [pc, #176]	; (8013dbc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8013d0a:	6819      	ldr	r1, [r3, #0]
 8013d0c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013d10:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8013d14:	4a2a      	ldr	r2, [pc, #168]	; (8013dc0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8013d16:	6812      	ldr	r2, [r2, #0]
 8013d18:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8013d1c:	2900      	cmp	r1, #0
 8013d1e:	d048      	beq.n	8013db2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8013d20:	785a      	ldrb	r2, [r3, #1]
 8013d22:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8013d26:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013d2a:	4b26      	ldr	r3, [pc, #152]	; (8013dc4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8013d2c:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8013d30:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8013d34:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8013d38:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8013d3a:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8013d3e:	9107      	str	r1, [sp, #28]
 8013d40:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8013d44:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013d48:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	f88d 8020 	strb.w	r8, [sp, #32]
 8013d52:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8013d56:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8013d5a:	9609      	str	r6, [sp, #36]	; 0x24
 8013d5c:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8013d60:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013d64:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8013d68:	b10b      	cbz	r3, 8013d6e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8013d6a:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8013d6c:	b905      	cbnz	r5, 8013d70 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8013d6e:	6895      	ldr	r5, [r2, #8]
 8013d70:	ae05      	add	r6, sp, #20
 8013d72:	4621      	mov	r1, r4
 8013d74:	4630      	mov	r0, r6
 8013d76:	f002 ff51 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013d7a:	4b13      	ldr	r3, [pc, #76]	; (8013dc8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013d7c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013d7e:	6818      	ldr	r0, [r3, #0]
 8013d80:	f7fc f964 	bl	801004c <_ZNK8touchgfx5Texts7getTextEt>
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	4680      	mov	r8, r0
 8013d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	4798      	blx	r3
 8013d8e:	6823      	ldr	r3, [r4, #0]
 8013d90:	4681      	mov	r9, r0
 8013d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013d96:	4620      	mov	r0, r4
 8013d98:	4798      	blx	r3
 8013d9a:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8013d9e:	ab07      	add	r3, sp, #28
 8013da0:	9300      	str	r3, [sp, #0]
 8013da2:	f8cd 8004 	str.w	r8, [sp, #4]
 8013da6:	463b      	mov	r3, r7
 8013da8:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013dac:	4628      	mov	r0, r5
 8013dae:	f7fc f8de 	bl	800ff6e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013db2:	b00d      	add	sp, #52	; 0x34
 8013db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013db8:	20025884 	.word	0x20025884
 8013dbc:	20025880 	.word	0x20025880
 8013dc0:	20025888 	.word	0x20025888
 8013dc4:	20025830 	.word	0x20025830
 8013dc8:	2002588c 	.word	0x2002588c

08013dcc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8013dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013dd4:	8962      	ldrh	r2, [r4, #10]
 8013dd6:	b218      	sxth	r0, r3
 8013dd8:	460e      	mov	r6, r1
 8013dda:	005b      	lsls	r3, r3, #1
 8013ddc:	8921      	ldrh	r1, [r4, #8]
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	1ac9      	subs	r1, r1, r3
 8013de2:	b08e      	sub	sp, #56	; 0x38
 8013de4:	b209      	sxth	r1, r1
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	b21b      	sxth	r3, r3
 8013dea:	2900      	cmp	r1, #0
 8013dec:	f8ad 0000 	strh.w	r0, [sp]
 8013df0:	f8ad 0002 	strh.w	r0, [sp, #2]
 8013df4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013df8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013dfc:	dd5e      	ble.n	8013ebc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	dd5c      	ble.n	8013ebc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8013e02:	6830      	ldr	r0, [r6, #0]
 8013e04:	6871      	ldr	r1, [r6, #4]
 8013e06:	ab02      	add	r3, sp, #8
 8013e08:	c303      	stmia	r3!, {r0, r1}
 8013e0a:	4669      	mov	r1, sp
 8013e0c:	a802      	add	r0, sp, #8
 8013e0e:	f7fe fabf 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8013e12:	4620      	mov	r0, r4
 8013e14:	a902      	add	r1, sp, #8
 8013e16:	f7ff fe9b 	bl	8013b50 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8013e1a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8013e1c:	2800      	cmp	r0, #0
 8013e1e:	d05f      	beq.n	8013ee0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8013e20:	8963      	ldrh	r3, [r4, #10]
 8013e22:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013e26:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013e2a:	1a1f      	subs	r7, r3, r0
 8013e2c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8013e30:	b202      	sxth	r2, r0
 8013e32:	2500      	movs	r5, #0
 8013e34:	b21b      	sxth	r3, r3
 8013e36:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8013e3a:	1a09      	subs	r1, r1, r0
 8013e3c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013e40:	9506      	str	r5, [sp, #24]
 8013e42:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013e46:	f8ad 5020 	strh.w	r5, [sp, #32]
 8013e4a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8013e4e:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8013e52:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013e56:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8013e5a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013e5e:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8013e62:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8013e66:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013e6a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013e6e:	af04      	add	r7, sp, #16
 8013e70:	ab06      	add	r3, sp, #24
 8013e72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013e76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013e7a:	e887 0003 	stmia.w	r7, {r0, r1}
 8013e7e:	4631      	mov	r1, r6
 8013e80:	4638      	mov	r0, r7
 8013e82:	f7fe fa85 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8013e86:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	dd12      	ble.n	8013eb4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8013e8e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	dd0e      	ble.n	8013eb4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8013e96:	6823      	ldr	r3, [r4, #0]
 8013e98:	4639      	mov	r1, r7
 8013e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	4798      	blx	r3
 8013ea0:	f7f9 ff66 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8013ea4:	6803      	ldr	r3, [r0, #0]
 8013ea6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013ea8:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8013eac:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013eb0:	4639      	mov	r1, r7
 8013eb2:	47c0      	blx	r8
 8013eb4:	3501      	adds	r5, #1
 8013eb6:	2d04      	cmp	r5, #4
 8013eb8:	d1da      	bne.n	8013e70 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8013eba:	e011      	b.n	8013ee0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8013ebc:	6830      	ldr	r0, [r6, #0]
 8013ebe:	6871      	ldr	r1, [r6, #4]
 8013ec0:	ab06      	add	r3, sp, #24
 8013ec2:	c303      	stmia	r3!, {r0, r1}
 8013ec4:	6823      	ldr	r3, [r4, #0]
 8013ec6:	a906      	add	r1, sp, #24
 8013ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eca:	4620      	mov	r0, r4
 8013ecc:	4798      	blx	r3
 8013ece:	f7f9 ff4f 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8013ed2:	6803      	ldr	r3, [r0, #0]
 8013ed4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013ed6:	6a1d      	ldr	r5, [r3, #32]
 8013ed8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013edc:	a906      	add	r1, sp, #24
 8013ede:	47a8      	blx	r5
 8013ee0:	b00e      	add	sp, #56	; 0x38
 8013ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ee6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8013ee6:	b570      	push	{r4, r5, r6, lr}
 8013ee8:	880b      	ldrh	r3, [r1, #0]
 8013eea:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013eec:	4604      	mov	r4, r0
 8013eee:	4608      	mov	r0, r1
 8013ef0:	460d      	mov	r5, r1
 8013ef2:	f004 fe35 	bl	8018b60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013ef6:	4606      	mov	r6, r0
 8013ef8:	4628      	mov	r0, r5
 8013efa:	f004 fe65 	bl	8018bc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013efe:	6823      	ldr	r3, [r4, #0]
 8013f00:	4605      	mov	r5, r0
 8013f02:	4631      	mov	r1, r6
 8013f04:	4620      	mov	r0, r4
 8013f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f08:	4798      	blx	r3
 8013f0a:	6823      	ldr	r3, [r4, #0]
 8013f0c:	4629      	mov	r1, r5
 8013f0e:	4620      	mov	r0, r4
 8013f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f16:	4718      	bx	r3

08013f18 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013f18:	b510      	push	{r4, lr}
 8013f1a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8013f1e:	2bff      	cmp	r3, #255	; 0xff
 8013f20:	4604      	mov	r4, r0
 8013f22:	d006      	beq.n	8013f32 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8013f24:	2300      	movs	r3, #0
 8013f26:	8003      	strh	r3, [r0, #0]
 8013f28:	8043      	strh	r3, [r0, #2]
 8013f2a:	8083      	strh	r3, [r0, #4]
 8013f2c:	80c3      	strh	r3, [r0, #6]
 8013f2e:	4620      	mov	r0, r4
 8013f30:	bd10      	pop	{r4, pc}
 8013f32:	3126      	adds	r1, #38	; 0x26
 8013f34:	f004 fe7c 	bl	8018c30 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013f38:	e7f9      	b.n	8013f2e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013f3a <_ZNK8touchgfx5Image17invalidateContentEv>:
 8013f3a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8013f3e:	b12a      	cbz	r2, 8013f4c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013f40:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013f44:	b112      	cbz	r2, 8013f4c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013f46:	6803      	ldr	r3, [r0, #0]
 8013f48:	695b      	ldr	r3, [r3, #20]
 8013f4a:	4718      	bx	r3
 8013f4c:	4770      	bx	lr
	...

08013f50 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f54:	4604      	mov	r4, r0
 8013f56:	b088      	sub	sp, #32
 8013f58:	f854 3b26 	ldr.w	r3, [r4], #38
 8013f5c:	2500      	movs	r5, #0
 8013f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f60:	460f      	mov	r7, r1
 8013f62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013f66:	a904      	add	r1, sp, #16
 8013f68:	4606      	mov	r6, r0
 8013f6a:	4798      	blx	r3
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f004 fdf7 	bl	8018b60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013f72:	4680      	mov	r8, r0
 8013f74:	4620      	mov	r0, r4
 8013f76:	f004 fe27 	bl	8018bc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013f7a:	9506      	str	r5, [sp, #24]
 8013f7c:	ad06      	add	r5, sp, #24
 8013f7e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013f82:	4639      	mov	r1, r7
 8013f84:	4628      	mov	r0, r5
 8013f86:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013f8a:	f7fe fa01 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8013f8e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	dd19      	ble.n	8013fca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013f96:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	dd15      	ble.n	8013fca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013f9e:	4b0c      	ldr	r3, [pc, #48]	; (8013fd0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8013fa6:	b10a      	cbz	r2, 8013fac <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013fa8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013faa:	b900      	cbnz	r0, 8013fae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8013fac:	6898      	ldr	r0, [r3, #8]
 8013fae:	6801      	ldr	r1, [r0, #0]
 8013fb0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8013fb4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013fb8:	2701      	movs	r7, #1
 8013fba:	9702      	str	r7, [sp, #8]
 8013fbc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8013fc0:	e9cd 5600 	strd	r5, r6, [sp]
 8013fc4:	688d      	ldr	r5, [r1, #8]
 8013fc6:	4621      	mov	r1, r4
 8013fc8:	47a8      	blx	r5
 8013fca:	b008      	add	sp, #32
 8013fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fd0:	20025830 	.word	0x20025830

08013fd4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8013fd4:	b510      	push	{r4, lr}
 8013fd6:	6803      	ldr	r3, [r0, #0]
 8013fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fda:	460c      	mov	r4, r1
 8013fdc:	4798      	blx	r3
 8013fde:	1b03      	subs	r3, r0, r4
 8013fe0:	4258      	negs	r0, r3
 8013fe2:	4158      	adcs	r0, r3
 8013fe4:	bd10      	pop	{r4, pc}
	...

08013fe8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8013fe8:	4b01      	ldr	r3, [pc, #4]	; (8013ff0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8013fea:	6019      	str	r1, [r3, #0]
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop
 8013ff0:	20025838 	.word	0x20025838

08013ff4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff8:	4696      	mov	lr, r2
 8013ffa:	4605      	mov	r5, r0
 8013ffc:	4614      	mov	r4, r2
 8013ffe:	460e      	mov	r6, r1
 8014000:	461f      	mov	r7, r3
 8014002:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014006:	b097      	sub	sp, #92	; 0x5c
 8014008:	f10d 0c1c 	add.w	ip, sp, #28
 801400c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014010:	f8de 3000 	ldr.w	r3, [lr]
 8014014:	f8cc 3000 	str.w	r3, [ip]
 8014018:	f104 0e14 	add.w	lr, r4, #20
 801401c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014020:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014024:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014028:	f8de 3000 	ldr.w	r3, [lr]
 801402c:	f8cc 3000 	str.w	r3, [ip]
 8014030:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014034:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014038:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801403c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014040:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8014044:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8014048:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801404c:	f8de 3000 	ldr.w	r3, [lr]
 8014050:	f8cc 3000 	str.w	r3, [ip]
 8014054:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014056:	682b      	ldr	r3, [r5, #0]
 8014058:	9201      	str	r2, [sp, #4]
 801405a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801405e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014060:	9200      	str	r2, [sp, #0]
 8014062:	f8cd 8008 	str.w	r8, [sp, #8]
 8014066:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801406a:	aa07      	add	r2, sp, #28
 801406c:	463b      	mov	r3, r7
 801406e:	4631      	mov	r1, r6
 8014070:	4628      	mov	r0, r5
 8014072:	47d8      	blx	fp
 8014074:	46a6      	mov	lr, r4
 8014076:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801407a:	f10d 0c1c 	add.w	ip, sp, #28
 801407e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014082:	f8de 3000 	ldr.w	r3, [lr]
 8014086:	f8cc 3000 	str.w	r3, [ip]
 801408a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801408e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014092:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801409a:	343c      	adds	r4, #60	; 0x3c
 801409c:	f8de 3000 	ldr.w	r3, [lr]
 80140a0:	f8cc 3000 	str.w	r3, [ip]
 80140a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80140a6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80140aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140ae:	6823      	ldr	r3, [r4, #0]
 80140b0:	f8cc 3000 	str.w	r3, [ip]
 80140b4:	682b      	ldr	r3, [r5, #0]
 80140b6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80140ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80140bc:	9201      	str	r2, [sp, #4]
 80140be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80140c0:	9200      	str	r2, [sp, #0]
 80140c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80140c6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80140c8:	aa07      	add	r2, sp, #28
 80140ca:	463b      	mov	r3, r7
 80140cc:	4631      	mov	r1, r6
 80140ce:	4628      	mov	r0, r5
 80140d0:	47a0      	blx	r4
 80140d2:	b017      	add	sp, #92	; 0x5c
 80140d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080140d8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80140d8:	2000      	movs	r0, #0
 80140da:	4770      	bx	lr

080140dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80140dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e0:	b08d      	sub	sp, #52	; 0x34
 80140e2:	4688      	mov	r8, r1
 80140e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80140e6:	f8d3 c000 	ldr.w	ip, [r3]
 80140ea:	680f      	ldr	r7, [r1, #0]
 80140ec:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80140f0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80140f4:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80140f8:	edd3 6a07 	vldr	s13, [r3, #28]
 80140fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80140fe:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8014102:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014106:	f9ba 1000 	ldrsh.w	r1, [sl]
 801410a:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801410e:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014112:	eba7 070c 	sub.w	r7, r7, ip
 8014116:	42bc      	cmp	r4, r7
 8014118:	bfa8      	it	ge
 801411a:	463c      	movge	r4, r7
 801411c:	ee07 4a90 	vmov	s15, r4
 8014120:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014124:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8014128:	ee25 4a04 	vmul.f32	s8, s10, s8
 801412c:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014130:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014134:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014138:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801413c:	eb09 0e0c 	add.w	lr, r9, ip
 8014140:	4571      	cmp	r1, lr
 8014142:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014146:	ee32 1a05 	vadd.f32	s2, s4, s10
 801414a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801414e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014152:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014156:	f340 808d 	ble.w	8014274 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801415a:	eba1 060e 	sub.w	r6, r1, lr
 801415e:	fb96 f5f4 	sdiv	r5, r6, r4
 8014162:	ee07 5a10 	vmov	s14, r5
 8014166:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801416a:	2d00      	cmp	r5, #0
 801416c:	fb04 6615 	mls	r6, r4, r5, r6
 8014170:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014174:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014178:	eea7 1a05 	vfma.f32	s2, s14, s10
 801417c:	dd13      	ble.n	80141a6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 801417e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014182:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014186:	eef5 6a40 	vcmp.f32	s13, #0.0
 801418a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801418e:	bf18      	it	ne
 8014190:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014194:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014198:	bf08      	it	eq
 801419a:	eeb0 7a67 	vmoveq.f32	s14, s15
 801419e:	ee61 1a87 	vmul.f32	s3, s3, s14
 80141a2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80141a6:	fb05 f204 	mul.w	r2, r5, r4
 80141aa:	1abf      	subs	r7, r7, r2
 80141ac:	4494      	add	ip, r2
 80141ae:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80141b2:	4411      	add	r1, r2
 80141b4:	eb09 020c 	add.w	r2, r9, ip
 80141b8:	443a      	add	r2, r7
 80141ba:	b209      	sxth	r1, r1
 80141bc:	428a      	cmp	r2, r1
 80141be:	bfc4      	itt	gt
 80141c0:	eba1 0209 	subgt.w	r2, r1, r9
 80141c4:	eba2 070c 	subgt.w	r7, r2, ip
 80141c8:	2f00      	cmp	r7, #0
 80141ca:	dd50      	ble.n	801426e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 80141cc:	fb97 f1f4 	sdiv	r1, r7, r4
 80141d0:	fb04 7211 	mls	r2, r4, r1, r7
 80141d4:	b90a      	cbnz	r2, 80141da <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 80141d6:	3901      	subs	r1, #1
 80141d8:	4622      	mov	r2, r4
 80141da:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80141de:	6840      	ldr	r0, [r0, #4]
 80141e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80141e2:	f8d0 a000 	ldr.w	sl, [r0]
 80141e6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80141e8:	9008      	str	r0, [sp, #32]
 80141ea:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80141ee:	9818      	ldr	r0, [sp, #96]	; 0x60
 80141f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80141f4:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80141f8:	695b      	ldr	r3, [r3, #20]
 80141fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80141fc:	445b      	add	r3, fp
 80141fe:	eef0 6a42 	vmov.f32	s13, s4
 8014202:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014206:	ee21 3a23 	vmul.f32	s6, s2, s7
 801420a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801420e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014212:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014216:	9307      	str	r3, [sp, #28]
 8014218:	ee17 7a90 	vmov	r7, s15
 801421c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014220:	eeb0 7a61 	vmov.f32	s14, s3
 8014224:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014228:	ee16 3a90 	vmov	r3, s13
 801422c:	fb97 f7f4 	sdiv	r7, r7, r4
 8014230:	ee17 ca90 	vmov	ip, s15
 8014234:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014238:	fb9c fcf4 	sdiv	ip, ip, r4
 801423c:	fb0c 3306 	mla	r3, ip, r6, r3
 8014240:	9302      	str	r3, [sp, #8]
 8014242:	ee17 3a10 	vmov	r3, s14
 8014246:	44b6      	add	lr, r6
 8014248:	fb04 e505 	mla	r5, r4, r5, lr
 801424c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014250:	fb07 3706 	mla	r7, r7, r6, r3
 8014254:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014258:	e9cd 4700 	strd	r4, r7, [sp]
 801425c:	2900      	cmp	r1, #0
 801425e:	bfcc      	ite	gt
 8014260:	46a1      	movgt	r9, r4
 8014262:	4691      	movle	r9, r2
 8014264:	eba9 0306 	sub.w	r3, r9, r6
 8014268:	f8da 4008 	ldr.w	r4, [sl, #8]
 801426c:	47a0      	blx	r4
 801426e:	b00d      	add	sp, #52	; 0x34
 8014270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014274:	2500      	movs	r5, #0
 8014276:	462e      	mov	r6, r5
 8014278:	e799      	b.n	80141ae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0801427c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014280:	b0db      	sub	sp, #364	; 0x16c
 8014282:	461d      	mov	r5, r3
 8014284:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014288:	930a      	str	r3, [sp, #40]	; 0x28
 801428a:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801428e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014290:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014294:	9310      	str	r3, [sp, #64]	; 0x40
 8014296:	6803      	ldr	r3, [r0, #0]
 8014298:	910f      	str	r1, [sp, #60]	; 0x3c
 801429a:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801429c:	9009      	str	r0, [sp, #36]	; 0x24
 801429e:	4614      	mov	r4, r2
 80142a0:	4629      	mov	r1, r5
 80142a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80142a6:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80142aa:	47b8      	blx	r7
 80142ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142ae:	6058      	str	r0, [r3, #4]
 80142b0:	2800      	cmp	r0, #0
 80142b2:	f000 83a1 	beq.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80142b6:	682b      	ldr	r3, [r5, #0]
 80142b8:	9314      	str	r3, [sp, #80]	; 0x50
 80142ba:	686b      	ldr	r3, [r5, #4]
 80142bc:	9315      	str	r3, [sp, #84]	; 0x54
 80142be:	4bc4      	ldr	r3, [pc, #784]	; (80145d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80142c0:	ed94 7a02 	vldr	s14, [r4, #8]
 80142c4:	7819      	ldrb	r1, [r3, #0]
 80142c6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80142ca:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80142ce:	2900      	cmp	r1, #0
 80142d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142d4:	bf16      	itet	ne
 80142d6:	4619      	movne	r1, r3
 80142d8:	4611      	moveq	r1, r2
 80142da:	4613      	movne	r3, r2
 80142dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e0:	9116      	str	r1, [sp, #88]	; 0x58
 80142e2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80142e6:	f240 8387 	bls.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80142ea:	ed94 7a07 	vldr	s14, [r4, #28]
 80142ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f6:	f240 837f 	bls.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80142fa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80142fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014306:	f240 8377 	bls.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801430a:	6822      	ldr	r2, [r4, #0]
 801430c:	4bb1      	ldr	r3, [pc, #708]	; (80145d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801430e:	429a      	cmp	r2, r3
 8014310:	f2c0 8372 	blt.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014314:	49b0      	ldr	r1, [pc, #704]	; (80145d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014316:	6963      	ldr	r3, [r4, #20]
 8014318:	428a      	cmp	r2, r1
 801431a:	f300 836d 	bgt.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801431e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014322:	48ae      	ldr	r0, [pc, #696]	; (80145dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014324:	33ff      	adds	r3, #255	; 0xff
 8014326:	4283      	cmp	r3, r0
 8014328:	f200 8366 	bhi.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801432c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801432e:	4dac      	ldr	r5, [pc, #688]	; (80145e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014330:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014334:	33ff      	adds	r3, #255	; 0xff
 8014336:	42ab      	cmp	r3, r5
 8014338:	f200 835e 	bhi.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801433c:	6862      	ldr	r2, [r4, #4]
 801433e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8014342:	33ff      	adds	r3, #255	; 0xff
 8014344:	4283      	cmp	r3, r0
 8014346:	f200 8357 	bhi.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801434a:	69a1      	ldr	r1, [r4, #24]
 801434c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014350:	33ff      	adds	r3, #255	; 0xff
 8014352:	4283      	cmp	r3, r0
 8014354:	f200 8350 	bhi.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801435a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801435e:	30ff      	adds	r0, #255	; 0xff
 8014360:	42a8      	cmp	r0, r5
 8014362:	f200 8349 	bhi.w	80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014366:	428a      	cmp	r2, r1
 8014368:	f280 8110 	bge.w	801458c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801436c:	429a      	cmp	r2, r3
 801436e:	f300 8119 	bgt.w	80145a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014372:	4299      	cmp	r1, r3
 8014374:	f280 811d 	bge.w	80145b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014378:	2502      	movs	r5, #2
 801437a:	2701      	movs	r7, #1
 801437c:	46a9      	mov	r9, r5
 801437e:	46b8      	mov	r8, r7
 8014380:	f04f 0a00 	mov.w	sl, #0
 8014384:	4621      	mov	r1, r4
 8014386:	a849      	add	r0, sp, #292	; 0x124
 8014388:	f003 fda6 	bl	8017ed8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801438c:	4622      	mov	r2, r4
 801438e:	4653      	mov	r3, sl
 8014390:	a949      	add	r1, sp, #292	; 0x124
 8014392:	f8cd 9000 	str.w	r9, [sp]
 8014396:	a819      	add	r0, sp, #100	; 0x64
 8014398:	f003 fece 	bl	8018138 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801439c:	4622      	mov	r2, r4
 801439e:	4653      	mov	r3, sl
 80143a0:	a949      	add	r1, sp, #292	; 0x124
 80143a2:	f8cd 8000 	str.w	r8, [sp]
 80143a6:	a829      	add	r0, sp, #164	; 0xa4
 80143a8:	f003 fec6 	bl	8018138 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80143ac:	4643      	mov	r3, r8
 80143ae:	4622      	mov	r2, r4
 80143b0:	a949      	add	r1, sp, #292	; 0x124
 80143b2:	f8cd 9000 	str.w	r9, [sp]
 80143b6:	a839      	add	r0, sp, #228	; 0xe4
 80143b8:	f003 febe 	bl	8018138 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80143bc:	42af      	cmp	r7, r5
 80143be:	bfb5      	itete	lt
 80143c0:	2300      	movlt	r3, #0
 80143c2:	2301      	movge	r3, #1
 80143c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80143c6:	930e      	strge	r3, [sp, #56]	; 0x38
 80143c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80143ce:	af12      	add	r7, sp, #72	; 0x48
 80143d0:	bfb9      	ittee	lt
 80143d2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80143d4:	ac19      	addlt	r4, sp, #100	; 0x64
 80143d6:	ad19      	addge	r5, sp, #100	; 0x64
 80143d8:	ac29      	addge	r4, sp, #164	; 0xa4
 80143da:	e887 0003 	stmia.w	r7, {r0, r1}
 80143de:	b928      	cbnz	r0, 80143ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80143e0:	4b80      	ldr	r3, [pc, #512]	; (80145e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80143e2:	6818      	ldr	r0, [r3, #0]
 80143e4:	6803      	ldr	r3, [r0, #0]
 80143e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143e8:	4798      	blx	r3
 80143ea:	6038      	str	r0, [r7, #0]
 80143ec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80143ee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80143f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80143f6:	930c      	str	r3, [sp, #48]	; 0x30
 80143f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80143fa:	6963      	ldr	r3, [r4, #20]
 80143fc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80143fe:	440b      	add	r3, r1
 8014400:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014404:	4408      	add	r0, r1
 8014406:	b200      	sxth	r0, r0
 8014408:	4283      	cmp	r3, r0
 801440a:	900d      	str	r0, [sp, #52]	; 0x34
 801440c:	f280 80dd 	bge.w	80145ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014410:	428b      	cmp	r3, r1
 8014412:	da08      	bge.n	8014426 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014414:	2a00      	cmp	r2, #0
 8014416:	dd06      	ble.n	8014426 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014418:	1acb      	subs	r3, r1, r3
 801441a:	429a      	cmp	r2, r3
 801441c:	f2c0 80e4 	blt.w	80145e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014420:	2b00      	cmp	r3, #0
 8014422:	f300 80e2 	bgt.w	80145ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014426:	6967      	ldr	r7, [r4, #20]
 8014428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801442a:	443b      	add	r3, r7
 801442c:	461f      	mov	r7, r3
 801442e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014430:	1bdf      	subs	r7, r3, r7
 8014432:	4297      	cmp	r7, r2
 8014434:	bfa8      	it	ge
 8014436:	4617      	movge	r7, r2
 8014438:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801443c:	2f00      	cmp	r7, #0
 801443e:	f340 8166 	ble.w	801470e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014442:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014444:	6829      	ldr	r1, [r5, #0]
 8014446:	f9b3 2000 	ldrsh.w	r2, [r3]
 801444a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801444e:	6820      	ldr	r0, [r4, #0]
 8014450:	4411      	add	r1, r2
 8014452:	4299      	cmp	r1, r3
 8014454:	dd1a      	ble.n	801448c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014456:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801445a:	440b      	add	r3, r1
 801445c:	4402      	add	r2, r0
 801445e:	b21b      	sxth	r3, r3
 8014460:	429a      	cmp	r2, r3
 8014462:	dc13      	bgt.n	801448c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014466:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	9206      	str	r2, [sp, #24]
 801446c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801446e:	9205      	str	r2, [sp, #20]
 8014470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014472:	9500      	str	r5, [sp, #0]
 8014474:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014478:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801447a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801447c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014480:	a912      	add	r1, sp, #72	; 0x48
 8014482:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014486:	aa49      	add	r2, sp, #292	; 0x124
 8014488:	4623      	mov	r3, r4
 801448a:	47c8      	blx	r9
 801448c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014490:	441a      	add	r2, r3
 8014492:	6963      	ldr	r3, [r4, #20]
 8014494:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014498:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801449c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80144a0:	68a1      	ldr	r1, [r4, #8]
 80144a2:	ed94 6a08 	vldr	s12, [r4, #32]
 80144a6:	6022      	str	r2, [r4, #0]
 80144a8:	3301      	adds	r3, #1
 80144aa:	6163      	str	r3, [r4, #20]
 80144ac:	69a3      	ldr	r3, [r4, #24]
 80144ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80144b2:	3b01      	subs	r3, #1
 80144b4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80144b8:	61a3      	str	r3, [r4, #24]
 80144ba:	6923      	ldr	r3, [r4, #16]
 80144bc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80144c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144c4:	edd4 6a07 	vldr	s13, [r4, #28]
 80144c8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80144cc:	440b      	add	r3, r1
 80144ce:	68e1      	ldr	r1, [r4, #12]
 80144d0:	6123      	str	r3, [r4, #16]
 80144d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80144d6:	428b      	cmp	r3, r1
 80144d8:	edc4 6a07 	vstr	s13, [r4, #28]
 80144dc:	db15      	blt.n	801450a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80144de:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80144e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80144e6:	3201      	adds	r2, #1
 80144e8:	edc4 6a07 	vstr	s13, [r4, #28]
 80144ec:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80144f0:	6022      	str	r2, [r4, #0]
 80144f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80144f6:	1a5b      	subs	r3, r3, r1
 80144f8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80144fc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014500:	6123      	str	r3, [r4, #16]
 8014502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014506:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801450a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801450e:	441a      	add	r2, r3
 8014510:	696b      	ldr	r3, [r5, #20]
 8014512:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014516:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801451a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801451e:	68a9      	ldr	r1, [r5, #8]
 8014520:	ed95 6a08 	vldr	s12, [r5, #32]
 8014524:	602a      	str	r2, [r5, #0]
 8014526:	3301      	adds	r3, #1
 8014528:	616b      	str	r3, [r5, #20]
 801452a:	69ab      	ldr	r3, [r5, #24]
 801452c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014530:	3b01      	subs	r3, #1
 8014532:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014536:	61ab      	str	r3, [r5, #24]
 8014538:	692b      	ldr	r3, [r5, #16]
 801453a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014542:	edd5 6a07 	vldr	s13, [r5, #28]
 8014546:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801454a:	440b      	add	r3, r1
 801454c:	68e9      	ldr	r1, [r5, #12]
 801454e:	612b      	str	r3, [r5, #16]
 8014550:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014554:	428b      	cmp	r3, r1
 8014556:	edc5 6a07 	vstr	s13, [r5, #28]
 801455a:	db15      	blt.n	8014588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801455c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014560:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014564:	3201      	adds	r2, #1
 8014566:	edc5 6a07 	vstr	s13, [r5, #28]
 801456a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801456e:	602a      	str	r2, [r5, #0]
 8014570:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014574:	1a5b      	subs	r3, r3, r1
 8014576:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801457a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801457e:	612b      	str	r3, [r5, #16]
 8014580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014584:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014588:	3f01      	subs	r7, #1
 801458a:	e757      	b.n	801443c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801458c:	4299      	cmp	r1, r3
 801458e:	dc13      	bgt.n	80145b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8014590:	429a      	cmp	r2, r3
 8014592:	da14      	bge.n	80145be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014594:	2502      	movs	r5, #2
 8014596:	2703      	movs	r7, #3
 8014598:	46a9      	mov	r9, r5
 801459a:	f04f 0800 	mov.w	r8, #0
 801459e:	f04f 0a01 	mov.w	sl, #1
 80145a2:	e6ef      	b.n	8014384 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80145a4:	2501      	movs	r5, #1
 80145a6:	2700      	movs	r7, #0
 80145a8:	46a9      	mov	r9, r5
 80145aa:	46b8      	mov	r8, r7
 80145ac:	f04f 0a02 	mov.w	sl, #2
 80145b0:	e6e8      	b.n	8014384 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80145b2:	2501      	movs	r5, #1
 80145b4:	2702      	movs	r7, #2
 80145b6:	e6e1      	b.n	801437c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80145b8:	2500      	movs	r5, #0
 80145ba:	2701      	movs	r7, #1
 80145bc:	e7f4      	b.n	80145a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80145be:	2702      	movs	r7, #2
 80145c0:	2503      	movs	r5, #3
 80145c2:	f04f 0900 	mov.w	r9, #0
 80145c6:	46b8      	mov	r8, r7
 80145c8:	e7e9      	b.n	801459e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80145ca:	4613      	mov	r3, r2
 80145cc:	e728      	b.n	8014420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80145ce:	bf00      	nop
 80145d0:	20025828 	.word	0x20025828
 80145d4:	fffd8f01 	.word	0xfffd8f01
 80145d8:	00027100 	.word	0x00027100
 80145dc:	0004e1ff 	.word	0x0004e1ff
 80145e0:	0004e1fe 	.word	0x0004e1fe
 80145e4:	20025830 	.word	0x20025830
 80145e8:	4613      	mov	r3, r2
 80145ea:	992b      	ldr	r1, [sp, #172]	; 0xac
 80145ec:	9111      	str	r1, [sp, #68]	; 0x44
 80145ee:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80145f2:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80145f6:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80145f8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80145fc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014600:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8014604:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014608:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801460c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014610:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8014614:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014618:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801461c:	469e      	mov	lr, r3
 801461e:	469c      	mov	ip, r3
 8014620:	f04f 0900 	mov.w	r9, #0
 8014624:	f1bc 0f00 	cmp.w	ip, #0
 8014628:	d147      	bne.n	80146ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801462a:	eb03 0c07 	add.w	ip, r3, r7
 801462e:	1ad7      	subs	r7, r2, r3
 8014630:	f1b9 0f00 	cmp.w	r9, #0
 8014634:	d009      	beq.n	801464a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8014636:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801463a:	9029      	str	r0, [sp, #164]	; 0xa4
 801463c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014640:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014644:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8014648:	912d      	str	r1, [sp, #180]	; 0xb4
 801464a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801464c:	9111      	str	r1, [sp, #68]	; 0x44
 801464e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014652:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014656:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801465a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801465e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014662:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014666:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801466a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801466e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014672:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014676:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801467a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801467e:	f04f 0800 	mov.w	r8, #0
 8014682:	f1be 0f00 	cmp.w	lr, #0
 8014686:	d031      	beq.n	80146ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014688:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801468a:	4431      	add	r1, r6
 801468c:	4549      	cmp	r1, r9
 801468e:	4450      	add	r0, sl
 8014690:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014694:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014698:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801469c:	db08      	blt.n	80146b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801469e:	ee77 7a85 	vadd.f32	s15, s15, s10
 80146a2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80146a6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80146aa:	3001      	adds	r0, #1
 80146ac:	eba1 0109 	sub.w	r1, r1, r9
 80146b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80146b4:	f04f 0801 	mov.w	r8, #1
 80146b8:	e7e3      	b.n	8014682 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80146ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80146bc:	4431      	add	r1, r6
 80146be:	4541      	cmp	r1, r8
 80146c0:	4450      	add	r0, sl
 80146c2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80146c6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80146ca:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80146ce:	db08      	blt.n	80146e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80146d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80146d4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80146d8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80146dc:	3001      	adds	r0, #1
 80146de:	eba1 0108 	sub.w	r1, r1, r8
 80146e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80146e6:	f04f 0901 	mov.w	r9, #1
 80146ea:	e79b      	b.n	8014624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80146ec:	449c      	add	ip, r3
 80146ee:	1aff      	subs	r7, r7, r3
 80146f0:	f1b8 0f00 	cmp.w	r8, #0
 80146f4:	d009      	beq.n	801470a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80146f6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80146fa:	9019      	str	r0, [sp, #100]	; 0x64
 80146fc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014700:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014704:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014708:	911d      	str	r1, [sp, #116]	; 0x74
 801470a:	1ad2      	subs	r2, r2, r3
 801470c:	e68b      	b.n	8014426 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801470e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014710:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8014712:	2b00      	cmp	r3, #0
 8014714:	f000 80d1 	beq.w	80148ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014718:	ad19      	add	r5, sp, #100	; 0x64
 801471a:	ac39      	add	r4, sp, #228	; 0xe4
 801471c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801471e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014722:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014726:	930c      	str	r3, [sp, #48]	; 0x30
 8014728:	990c      	ldr	r1, [sp, #48]	; 0x30
 801472a:	6963      	ldr	r3, [r4, #20]
 801472c:	440b      	add	r3, r1
 801472e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014732:	4408      	add	r0, r1
 8014734:	b200      	sxth	r0, r0
 8014736:	4283      	cmp	r3, r0
 8014738:	900d      	str	r0, [sp, #52]	; 0x34
 801473a:	f280 80c1 	bge.w	80148c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801473e:	428b      	cmp	r3, r1
 8014740:	da08      	bge.n	8014754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014742:	2a00      	cmp	r2, #0
 8014744:	dd06      	ble.n	8014754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014746:	1acb      	subs	r3, r1, r3
 8014748:	429a      	cmp	r2, r3
 801474a:	f2c0 80bb 	blt.w	80148c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801474e:	2b00      	cmp	r3, #0
 8014750:	f300 80b9 	bgt.w	80148c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8014754:	6967      	ldr	r7, [r4, #20]
 8014756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014758:	443b      	add	r3, r7
 801475a:	461f      	mov	r7, r3
 801475c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801475e:	1bdf      	subs	r7, r3, r7
 8014760:	4297      	cmp	r7, r2
 8014762:	bfa8      	it	ge
 8014764:	4617      	movge	r7, r2
 8014766:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801476a:	2f00      	cmp	r7, #0
 801476c:	f340 813c 	ble.w	80149e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014770:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014772:	6829      	ldr	r1, [r5, #0]
 8014774:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014778:	f9bb 3000 	ldrsh.w	r3, [fp]
 801477c:	6820      	ldr	r0, [r4, #0]
 801477e:	4411      	add	r1, r2
 8014780:	4299      	cmp	r1, r3
 8014782:	dd1a      	ble.n	80147ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014784:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014788:	440b      	add	r3, r1
 801478a:	4402      	add	r2, r0
 801478c:	b21b      	sxth	r3, r3
 801478e:	429a      	cmp	r2, r3
 8014790:	dc13      	bgt.n	80147ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014794:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	9206      	str	r2, [sp, #24]
 801479a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801479c:	9205      	str	r2, [sp, #20]
 801479e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147a0:	9500      	str	r5, [sp, #0]
 80147a2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80147a6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80147a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80147aa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80147ae:	a912      	add	r1, sp, #72	; 0x48
 80147b0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80147b4:	aa49      	add	r2, sp, #292	; 0x124
 80147b6:	4623      	mov	r3, r4
 80147b8:	47c8      	blx	r9
 80147ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80147be:	441a      	add	r2, r3
 80147c0:	6963      	ldr	r3, [r4, #20]
 80147c2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80147c6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80147ca:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80147ce:	68a1      	ldr	r1, [r4, #8]
 80147d0:	ed94 6a08 	vldr	s12, [r4, #32]
 80147d4:	6022      	str	r2, [r4, #0]
 80147d6:	3301      	adds	r3, #1
 80147d8:	6163      	str	r3, [r4, #20]
 80147da:	69a3      	ldr	r3, [r4, #24]
 80147dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80147e0:	3b01      	subs	r3, #1
 80147e2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80147e6:	61a3      	str	r3, [r4, #24]
 80147e8:	6923      	ldr	r3, [r4, #16]
 80147ea:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80147ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80147f2:	edd4 6a07 	vldr	s13, [r4, #28]
 80147f6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80147fa:	440b      	add	r3, r1
 80147fc:	68e1      	ldr	r1, [r4, #12]
 80147fe:	6123      	str	r3, [r4, #16]
 8014800:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014804:	428b      	cmp	r3, r1
 8014806:	edc4 6a07 	vstr	s13, [r4, #28]
 801480a:	db15      	blt.n	8014838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801480c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014810:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014814:	3201      	adds	r2, #1
 8014816:	edc4 6a07 	vstr	s13, [r4, #28]
 801481a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801481e:	6022      	str	r2, [r4, #0]
 8014820:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014824:	1a5b      	subs	r3, r3, r1
 8014826:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801482a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801482e:	6123      	str	r3, [r4, #16]
 8014830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014834:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014838:	e9d5 2300 	ldrd	r2, r3, [r5]
 801483c:	441a      	add	r2, r3
 801483e:	696b      	ldr	r3, [r5, #20]
 8014840:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014844:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014848:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801484c:	68a9      	ldr	r1, [r5, #8]
 801484e:	ed95 6a08 	vldr	s12, [r5, #32]
 8014852:	602a      	str	r2, [r5, #0]
 8014854:	3301      	adds	r3, #1
 8014856:	616b      	str	r3, [r5, #20]
 8014858:	69ab      	ldr	r3, [r5, #24]
 801485a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801485e:	3b01      	subs	r3, #1
 8014860:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014864:	61ab      	str	r3, [r5, #24]
 8014866:	692b      	ldr	r3, [r5, #16]
 8014868:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801486c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014870:	edd5 6a07 	vldr	s13, [r5, #28]
 8014874:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014878:	440b      	add	r3, r1
 801487a:	68e9      	ldr	r1, [r5, #12]
 801487c:	612b      	str	r3, [r5, #16]
 801487e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014882:	428b      	cmp	r3, r1
 8014884:	edc5 6a07 	vstr	s13, [r5, #28]
 8014888:	db15      	blt.n	80148b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801488a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801488e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014892:	3201      	adds	r2, #1
 8014894:	edc5 6a07 	vstr	s13, [r5, #28]
 8014898:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801489c:	602a      	str	r2, [r5, #0]
 801489e:	ee36 7a87 	vadd.f32	s14, s13, s14
 80148a2:	1a5b      	subs	r3, r3, r1
 80148a4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80148a8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80148ac:	612b      	str	r3, [r5, #16]
 80148ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148b2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80148b6:	3f01      	subs	r7, #1
 80148b8:	e757      	b.n	801476a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80148ba:	ad39      	add	r5, sp, #228	; 0xe4
 80148bc:	ac19      	add	r4, sp, #100	; 0x64
 80148be:	e72d      	b.n	801471c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80148c0:	4613      	mov	r3, r2
 80148c2:	e744      	b.n	801474e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80148c4:	4613      	mov	r3, r2
 80148c6:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80148ca:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80148cc:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80148d0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80148d4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80148d8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80148dc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80148e0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80148e4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80148e8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80148ea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80148ee:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80148f2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80148f6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80148fa:	960e      	str	r6, [sp, #56]	; 0x38
 80148fc:	469e      	mov	lr, r3
 80148fe:	461f      	mov	r7, r3
 8014900:	f04f 0900 	mov.w	r9, #0
 8014904:	2f00      	cmp	r7, #0
 8014906:	d146      	bne.n	8014996 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8014908:	449c      	add	ip, r3
 801490a:	1ad7      	subs	r7, r2, r3
 801490c:	f1b9 0f00 	cmp.w	r9, #0
 8014910:	d009      	beq.n	8014926 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8014912:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8014916:	9039      	str	r0, [sp, #228]	; 0xe4
 8014918:	913d      	str	r1, [sp, #244]	; 0xf4
 801491a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801491e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8014922:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8014926:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014928:	910e      	str	r1, [sp, #56]	; 0x38
 801492a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801492e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8014932:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014936:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801493a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801493e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014942:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014946:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801494a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801494e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8014952:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014956:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801495a:	f04f 0800 	mov.w	r8, #0
 801495e:	f1be 0f00 	cmp.w	lr, #0
 8014962:	d030      	beq.n	80149c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8014964:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014966:	4431      	add	r1, r6
 8014968:	4549      	cmp	r1, r9
 801496a:	4450      	add	r0, sl
 801496c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014970:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014974:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014978:	db08      	blt.n	801498c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801497a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801497e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014982:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014986:	3001      	adds	r0, #1
 8014988:	eba1 0109 	sub.w	r1, r1, r9
 801498c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014990:	f04f 0801 	mov.w	r8, #1
 8014994:	e7e3      	b.n	801495e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8014996:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014998:	4431      	add	r1, r6
 801499a:	4541      	cmp	r1, r8
 801499c:	4450      	add	r0, sl
 801499e:	ee37 7a24 	vadd.f32	s14, s14, s9
 80149a2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80149a6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80149aa:	db08      	blt.n	80149be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80149ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 80149b0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80149b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80149b8:	3001      	adds	r0, #1
 80149ba:	eba1 0108 	sub.w	r1, r1, r8
 80149be:	3f01      	subs	r7, #1
 80149c0:	f04f 0901 	mov.w	r9, #1
 80149c4:	e79e      	b.n	8014904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80149c6:	449c      	add	ip, r3
 80149c8:	1aff      	subs	r7, r7, r3
 80149ca:	f1b8 0f00 	cmp.w	r8, #0
 80149ce:	d009      	beq.n	80149e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80149d0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80149d4:	9019      	str	r0, [sp, #100]	; 0x64
 80149d6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80149da:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80149de:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80149e2:	911d      	str	r1, [sp, #116]	; 0x74
 80149e4:	1ad2      	subs	r2, r2, r3
 80149e6:	e6b5      	b.n	8014754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80149e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	b923      	cbnz	r3, 80149f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80149ee:	4b04      	ldr	r3, [pc, #16]	; (8014a00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80149f0:	6818      	ldr	r0, [r3, #0]
 80149f2:	6803      	ldr	r3, [r0, #0]
 80149f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149f6:	4798      	blx	r3
 80149f8:	b05b      	add	sp, #364	; 0x16c
 80149fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149fe:	bf00      	nop
 8014a00:	20025830 	.word	0x20025830

08014a04 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8014a04:	b570      	push	{r4, r5, r6, lr}
 8014a06:	4604      	mov	r4, r0
 8014a08:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8014a0c:	9805      	ldr	r0, [sp, #20]
 8014a0e:	6061      	str	r1, [r4, #4]
 8014a10:	2500      	movs	r5, #0
 8014a12:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8014a16:	8263      	strh	r3, [r4, #18]
 8014a18:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014a1c:	8025      	strh	r5, [r4, #0]
 8014a1e:	7221      	strb	r1, [r4, #8]
 8014a20:	7266      	strb	r6, [r4, #9]
 8014a22:	60e0      	str	r0, [r4, #12]
 8014a24:	8222      	strh	r2, [r4, #16]
 8014a26:	82a3      	strh	r3, [r4, #20]
 8014a28:	82e5      	strh	r5, [r4, #22]
 8014a2a:	8325      	strh	r5, [r4, #24]
 8014a2c:	8365      	strh	r5, [r4, #26]
 8014a2e:	83a5      	strh	r5, [r4, #28]
 8014a30:	83e5      	strh	r5, [r4, #30]
 8014a32:	8425      	strh	r5, [r4, #32]
 8014a34:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8014a38:	b32e      	cbz	r6, 8014a86 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014a3a:	6803      	ldr	r3, [r0, #0]
 8014a3c:	695b      	ldr	r3, [r3, #20]
 8014a3e:	4798      	blx	r3
 8014a40:	4606      	mov	r6, r0
 8014a42:	b300      	cbz	r0, 8014a86 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014a44:	68e0      	ldr	r0, [r4, #12]
 8014a46:	6803      	ldr	r3, [r0, #0]
 8014a48:	4631      	mov	r1, r6
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	4798      	blx	r3
 8014a4e:	4605      	mov	r5, r0
 8014a50:	b1c8      	cbz	r0, 8014a86 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014a52:	7b43      	ldrb	r3, [r0, #13]
 8014a54:	7a82      	ldrb	r2, [r0, #10]
 8014a56:	005b      	lsls	r3, r3, #1
 8014a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a5c:	4313      	orrs	r3, r2
 8014a5e:	8423      	strh	r3, [r4, #32]
 8014a60:	7a63      	ldrb	r3, [r4, #9]
 8014a62:	2b06      	cmp	r3, #6
 8014a64:	d10f      	bne.n	8014a86 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014a66:	68e0      	ldr	r0, [r4, #12]
 8014a68:	6803      	ldr	r3, [r0, #0]
 8014a6a:	462a      	mov	r2, r5
 8014a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a6e:	4631      	mov	r1, r6
 8014a70:	4798      	blx	r3
 8014a72:	7b6b      	ldrb	r3, [r5, #13]
 8014a74:	005b      	lsls	r3, r3, #1
 8014a76:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014a7a:	7aab      	ldrb	r3, [r5, #10]
 8014a7c:	4313      	orrs	r3, r2
 8014a7e:	4418      	add	r0, r3
 8014a80:	8c23      	ldrh	r3, [r4, #32]
 8014a82:	4418      	add	r0, r3
 8014a84:	8420      	strh	r0, [r4, #32]
 8014a86:	4620      	mov	r0, r4
 8014a88:	bd70      	pop	{r4, r5, r6, pc}

08014a8a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8014a8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a8e:	2400      	movs	r4, #0
 8014a90:	b085      	sub	sp, #20
 8014a92:	4681      	mov	r9, r0
 8014a94:	4688      	mov	r8, r1
 8014a96:	4692      	mov	sl, r2
 8014a98:	469b      	mov	fp, r3
 8014a9a:	4627      	mov	r7, r4
 8014a9c:	4625      	mov	r5, r4
 8014a9e:	4626      	mov	r6, r4
 8014aa0:	4554      	cmp	r4, sl
 8014aa2:	da2a      	bge.n	8014afa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	9303      	str	r3, [sp, #12]
 8014aa8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014aac:	429d      	cmp	r5, r3
 8014aae:	d004      	beq.n	8014aba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8014ab0:	f242 030b 	movw	r3, #8203	; 0x200b
 8014ab4:	429d      	cmp	r5, r3
 8014ab6:	bf18      	it	ne
 8014ab8:	462f      	movne	r7, r5
 8014aba:	ab03      	add	r3, sp, #12
 8014abc:	4642      	mov	r2, r8
 8014abe:	4659      	mov	r1, fp
 8014ac0:	4648      	mov	r0, r9
 8014ac2:	f003 f81f 	bl	8017b04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014ac6:	4605      	mov	r5, r0
 8014ac8:	b1b8      	cbz	r0, 8014afa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014aca:	280a      	cmp	r0, #10
 8014acc:	d015      	beq.n	8014afa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014ace:	9a03      	ldr	r2, [sp, #12]
 8014ad0:	b18a      	cbz	r2, 8014af6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8014ad2:	7b50      	ldrb	r0, [r2, #13]
 8014ad4:	7a93      	ldrb	r3, [r2, #10]
 8014ad6:	8895      	ldrh	r5, [r2, #4]
 8014ad8:	0040      	lsls	r0, r0, #1
 8014ada:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014ade:	4303      	orrs	r3, r0
 8014ae0:	9301      	str	r3, [sp, #4]
 8014ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8014ae6:	4639      	mov	r1, r7
 8014ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014aea:	4640      	mov	r0, r8
 8014aec:	4798      	blx	r3
 8014aee:	9b01      	ldr	r3, [sp, #4]
 8014af0:	4418      	add	r0, r3
 8014af2:	4406      	add	r6, r0
 8014af4:	b2b6      	uxth	r6, r6
 8014af6:	3401      	adds	r4, #1
 8014af8:	e7d2      	b.n	8014aa0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8014afa:	4630      	mov	r0, r6
 8014afc:	b005      	add	sp, #20
 8014afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b02 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8014b02:	2a02      	cmp	r2, #2
 8014b04:	b530      	push	{r4, r5, lr}
 8014b06:	d011      	beq.n	8014b2c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8014b08:	2a03      	cmp	r2, #3
 8014b0a:	d01c      	beq.n	8014b46 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8014b0c:	2a01      	cmp	r2, #1
 8014b0e:	d10c      	bne.n	8014b2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014b10:	888b      	ldrh	r3, [r1, #4]
 8014b12:	8801      	ldrh	r1, [r0, #0]
 8014b14:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014b18:	8844      	ldrh	r4, [r0, #2]
 8014b1a:	8004      	strh	r4, [r0, #0]
 8014b1c:	1a5b      	subs	r3, r3, r1
 8014b1e:	1a9b      	subs	r3, r3, r2
 8014b20:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014b24:	8043      	strh	r3, [r0, #2]
 8014b26:	8081      	strh	r1, [r0, #4]
 8014b28:	80c2      	strh	r2, [r0, #6]
 8014b2a:	bd30      	pop	{r4, r5, pc}
 8014b2c:	88cb      	ldrh	r3, [r1, #6]
 8014b2e:	8842      	ldrh	r2, [r0, #2]
 8014b30:	1a9b      	subs	r3, r3, r2
 8014b32:	88c2      	ldrh	r2, [r0, #6]
 8014b34:	1a9b      	subs	r3, r3, r2
 8014b36:	888a      	ldrh	r2, [r1, #4]
 8014b38:	8801      	ldrh	r1, [r0, #0]
 8014b3a:	8043      	strh	r3, [r0, #2]
 8014b3c:	1a52      	subs	r2, r2, r1
 8014b3e:	8881      	ldrh	r1, [r0, #4]
 8014b40:	1a52      	subs	r2, r2, r1
 8014b42:	8002      	strh	r2, [r0, #0]
 8014b44:	e7f1      	b.n	8014b2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014b46:	88cb      	ldrh	r3, [r1, #6]
 8014b48:	8841      	ldrh	r1, [r0, #2]
 8014b4a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014b4e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014b52:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014b56:	8045      	strh	r5, [r0, #2]
 8014b58:	1a5b      	subs	r3, r3, r1
 8014b5a:	1a9b      	subs	r3, r3, r2
 8014b5c:	8003      	strh	r3, [r0, #0]
 8014b5e:	8082      	strh	r2, [r0, #4]
 8014b60:	80c4      	strh	r4, [r0, #6]
 8014b62:	e7e2      	b.n	8014b2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08014b64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8014b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b68:	b09f      	sub	sp, #124	; 0x7c
 8014b6a:	9116      	str	r1, [sp, #88]	; 0x58
 8014b6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8014b6e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014b70:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014b72:	8809      	ldrh	r1, [r1, #0]
 8014b74:	889b      	ldrh	r3, [r3, #4]
 8014b76:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8014b7a:	9212      	str	r2, [sp, #72]	; 0x48
 8014b7c:	440b      	add	r3, r1
 8014b7e:	b21b      	sxth	r3, r3
 8014b80:	9310      	str	r3, [sp, #64]	; 0x40
 8014b82:	f8d8 3000 	ldr.w	r3, [r8]
 8014b86:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8014b8a:	7b19      	ldrb	r1, [r3, #12]
 8014b8c:	7adb      	ldrb	r3, [r3, #11]
 8014b8e:	9011      	str	r0, [sp, #68]	; 0x44
 8014b90:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8014b94:	9114      	str	r1, [sp, #80]	; 0x50
 8014b96:	9315      	str	r3, [sp, #84]	; 0x54
 8014b98:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8014b9c:	2a00      	cmp	r2, #0
 8014b9e:	d06a      	beq.n	8014c76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8014ba0:	f898 3010 	ldrb.w	r3, [r8, #16]
 8014ba4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014ba6:	2b06      	cmp	r3, #6
 8014ba8:	bf14      	ite	ne
 8014baa:	2301      	movne	r3, #1
 8014bac:	2302      	moveq	r3, #2
 8014bae:	4413      	add	r3, r2
 8014bb0:	f04f 0900 	mov.w	r9, #0
 8014bb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bb6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014bba:	464c      	mov	r4, r9
 8014bbc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8014bc0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8014bc4:	4293      	cmp	r3, r2
 8014bc6:	f280 808f 	bge.w	8014ce8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014bca:	2300      	movs	r3, #0
 8014bcc:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8014bd0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8014bd4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014bd8:	429c      	cmp	r4, r3
 8014bda:	d006      	beq.n	8014bea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8014bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bde:	f242 020b 	movw	r2, #8203	; 0x200b
 8014be2:	4294      	cmp	r4, r2
 8014be4:	bf18      	it	ne
 8014be6:	4623      	movne	r3, r4
 8014be8:	930d      	str	r3, [sp, #52]	; 0x34
 8014bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bec:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8014bee:	f8d8 2000 	ldr.w	r2, [r8]
 8014bf2:	428b      	cmp	r3, r1
 8014bf4:	db41      	blt.n	8014c7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8014bf6:	6813      	ldr	r3, [r2, #0]
 8014bf8:	4610      	mov	r0, r2
 8014bfa:	695b      	ldr	r3, [r3, #20]
 8014bfc:	4798      	blx	r3
 8014bfe:	4604      	mov	r4, r0
 8014c00:	f8d8 0000 	ldr.w	r0, [r8]
 8014c04:	6803      	ldr	r3, [r0, #0]
 8014c06:	aa1d      	add	r2, sp, #116	; 0x74
 8014c08:	689d      	ldr	r5, [r3, #8]
 8014c0a:	4621      	mov	r1, r4
 8014c0c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014c10:	47a8      	blx	r5
 8014c12:	901c      	str	r0, [sp, #112]	; 0x70
 8014c14:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014c18:	429c      	cmp	r4, r3
 8014c1a:	f000 80eb 	beq.w	8014df4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014c1e:	f242 030b 	movw	r3, #8203	; 0x200b
 8014c22:	429c      	cmp	r4, r3
 8014c24:	f000 80e6 	beq.w	8014df4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014c28:	2c00      	cmp	r4, #0
 8014c2a:	f000 80f8 	beq.w	8014e1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8014c2e:	2c0a      	cmp	r4, #10
 8014c30:	d060      	beq.n	8014cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014c32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c34:	b36a      	cbz	r2, 8014c92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8014c36:	8894      	ldrh	r4, [r2, #4]
 8014c38:	f1bb 0f00 	cmp.w	fp, #0
 8014c3c:	d03b      	beq.n	8014cb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8014c3e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8014c42:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8014c46:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8014c4a:	f892 900a 	ldrb.w	r9, [r2, #10]
 8014c4e:	f1bb 0f01 	cmp.w	fp, #1
 8014c52:	ea49 0903 	orr.w	r9, r9, r3
 8014c56:	d134      	bne.n	8014cc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8014c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c5a:	eba6 0609 	sub.w	r6, r6, r9
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d14f      	bne.n	8014d02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014c62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c64:	eb09 0306 	add.w	r3, r9, r6
 8014c68:	4413      	add	r3, r2
 8014c6a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014c6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014c70:	4293      	cmp	r3, r2
 8014c72:	da51      	bge.n	8014d18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014c74:	e038      	b.n	8014ce8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014c76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c78:	e79a      	b.n	8014bb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8014c7a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014c7e:	9301      	str	r3, [sp, #4]
 8014c80:	ab1d      	add	r3, sp, #116	; 0x74
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	4659      	mov	r1, fp
 8014c86:	ab1c      	add	r3, sp, #112	; 0x70
 8014c88:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014c8a:	f002 ff84 	bl	8017b96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014c8e:	4604      	mov	r4, r0
 8014c90:	e7c0      	b.n	8014c14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8014c92:	f8d8 0000 	ldr.w	r0, [r8]
 8014c96:	6803      	ldr	r3, [r0, #0]
 8014c98:	691b      	ldr	r3, [r3, #16]
 8014c9a:	4798      	blx	r3
 8014c9c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014ca0:	4298      	cmp	r0, r3
 8014ca2:	f000 80a7 	beq.w	8014df4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014ca6:	f242 030b 	movw	r3, #8203	; 0x200b
 8014caa:	4298      	cmp	r0, r3
 8014cac:	f000 80a2 	beq.w	8014df4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014cb0:	f1bb 0f00 	cmp.w	fp, #0
 8014cb4:	d100      	bne.n	8014cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8014cb6:	444e      	add	r6, r9
 8014cb8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014cba:	2a00      	cmp	r2, #0
 8014cbc:	d1bf      	bne.n	8014c3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014cbe:	4691      	mov	r9, r2
 8014cc0:	e098      	b.n	8014df4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	f000 80ac 	beq.w	8014e22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2be>
 8014cca:	f1bb 0f00 	cmp.w	fp, #0
 8014cce:	d118      	bne.n	8014d02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014cd0:	f8d8 0000 	ldr.w	r0, [r8]
 8014cd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014cd6:	6803      	ldr	r3, [r0, #0]
 8014cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014cda:	4798      	blx	r3
 8014cdc:	4406      	add	r6, r0
 8014cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ce0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ce2:	1af3      	subs	r3, r6, r3
 8014ce4:	4293      	cmp	r3, r2
 8014ce6:	dd17      	ble.n	8014d18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014ce8:	2c00      	cmp	r4, #0
 8014cea:	f000 8098 	beq.w	8014e1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8014cee:	2c0a      	cmp	r4, #10
 8014cf0:	f040 8086 	bne.w	8014e00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8014cf4:	240a      	movs	r4, #10
 8014cf6:	fab4 f084 	clz	r0, r4
 8014cfa:	0940      	lsrs	r0, r0, #5
 8014cfc:	b01f      	add	sp, #124	; 0x7c
 8014cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d02:	f8d8 0000 	ldr.w	r0, [r8]
 8014d06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014d08:	6803      	ldr	r3, [r0, #0]
 8014d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d0c:	4798      	blx	r3
 8014d0e:	f1bb 0f01 	cmp.w	fp, #1
 8014d12:	eba6 0600 	sub.w	r6, r6, r0
 8014d16:	d0a4      	beq.n	8014c62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8014d18:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014d1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014d1c:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014d20:	f9b3 7000 	ldrsh.w	r7, [r3]
 8014d24:	7b43      	ldrb	r3, [r0, #13]
 8014d26:	015b      	lsls	r3, r3, #5
 8014d28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014d2c:	7983      	ldrb	r3, [r0, #6]
 8014d2e:	4431      	add	r1, r6
 8014d30:	4313      	orrs	r3, r2
 8014d32:	440b      	add	r3, r1
 8014d34:	42bb      	cmp	r3, r7
 8014d36:	db5d      	blt.n	8014df4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014d38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d3a:	4299      	cmp	r1, r3
 8014d3c:	da5a      	bge.n	8014df4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014d3e:	f8d8 0000 	ldr.w	r0, [r8]
 8014d42:	6803      	ldr	r3, [r0, #0]
 8014d44:	42b7      	cmp	r7, r6
 8014d46:	bfc8      	it	gt
 8014d48:	1bbf      	subgt	r7, r7, r6
 8014d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d4c:	bfcc      	ite	gt
 8014d4e:	b2bf      	uxthgt	r7, r7
 8014d50:	2700      	movle	r7, #0
 8014d52:	4798      	blx	r3
 8014d54:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014d56:	7b5a      	ldrb	r2, [r3, #13]
 8014d58:	00d1      	lsls	r1, r2, #3
 8014d5a:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8014d5e:	7a19      	ldrb	r1, [r3, #8]
 8014d60:	4329      	orrs	r1, r5
 8014d62:	0655      	lsls	r5, r2, #25
 8014d64:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014d66:	bf44      	itt	mi
 8014d68:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8014d6c:	b209      	sxthmi	r1, r1
 8014d6e:	1945      	adds	r5, r0, r5
 8014d70:	1a6d      	subs	r5, r5, r1
 8014d72:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014d74:	b2ad      	uxth	r5, r5
 8014d76:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014d7a:	fa0f fa85 	sxth.w	sl, r5
 8014d7e:	4551      	cmp	r1, sl
 8014d80:	dd3c      	ble.n	8014dfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8014d82:	0112      	lsls	r2, r2, #4
 8014d84:	79d8      	ldrb	r0, [r3, #7]
 8014d86:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014d8a:	4302      	orrs	r2, r0
 8014d8c:	4492      	add	sl, r2
 8014d8e:	4551      	cmp	r1, sl
 8014d90:	dc30      	bgt.n	8014df4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014d92:	1b4d      	subs	r5, r1, r5
 8014d94:	b22d      	sxth	r5, r5
 8014d96:	468a      	mov	sl, r1
 8014d98:	9319      	str	r3, [sp, #100]	; 0x64
 8014d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d9c:	f8d8 0000 	ldr.w	r0, [r8]
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	6801      	ldr	r1, [r0, #0]
 8014da4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014da6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014da8:	9313      	str	r3, [sp, #76]	; 0x4c
 8014daa:	9218      	str	r2, [sp, #96]	; 0x60
 8014dac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014dae:	4788      	blx	r1
 8014db0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014db4:	910b      	str	r1, [sp, #44]	; 0x2c
 8014db6:	f898 100e 	ldrb.w	r1, [r8, #14]
 8014dba:	910a      	str	r1, [sp, #40]	; 0x28
 8014dbc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8014dc0:	9109      	str	r1, [sp, #36]	; 0x24
 8014dc2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014dc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014dc8:	9305      	str	r3, [sp, #20]
 8014dca:	b2ad      	uxth	r5, r5
 8014dcc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8014dd0:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8014dd4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014dd6:	9304      	str	r3, [sp, #16]
 8014dd8:	4437      	add	r7, r6
 8014dda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014dde:	9206      	str	r2, [sp, #24]
 8014de0:	b23f      	sxth	r7, r7
 8014de2:	f8cd a004 	str.w	sl, [sp, #4]
 8014de6:	9700      	str	r7, [sp, #0]
 8014de8:	681a      	ldr	r2, [r3, #0]
 8014dea:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014df0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014df2:	47a8      	blx	r5
 8014df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014df6:	3301      	adds	r3, #1
 8014df8:	930e      	str	r3, [sp, #56]	; 0x38
 8014dfa:	e6e1      	b.n	8014bc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8014dfc:	2500      	movs	r5, #0
 8014dfe:	e7cb      	b.n	8014d98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8014e00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014e02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014e04:	3501      	adds	r5, #1
 8014e06:	429d      	cmp	r5, r3
 8014e08:	f6bf af75 	bge.w	8014cf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014e0c:	4659      	mov	r1, fp
 8014e0e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014e10:	f7fa fffc 	bl	800fe0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014e14:	4604      	mov	r4, r0
 8014e16:	b110      	cbz	r0, 8014e1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8014e18:	280a      	cmp	r0, #10
 8014e1a:	d1f2      	bne.n	8014e02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8014e1c:	e76a      	b.n	8014cf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014e1e:	2400      	movs	r4, #0
 8014e20:	e769      	b.n	8014cf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014e22:	f1bb 0f00 	cmp.w	fp, #0
 8014e26:	f43f af5a 	beq.w	8014cde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8014e2a:	e775      	b.n	8014d18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08014e2c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8014e2c:	b530      	push	{r4, r5, lr}
 8014e2e:	8ac4      	ldrh	r4, [r0, #22]
 8014e30:	8b45      	ldrh	r5, [r0, #26]
 8014e32:	8343      	strh	r3, [r0, #26]
 8014e34:	442c      	add	r4, r5
 8014e36:	1ae4      	subs	r4, r4, r3
 8014e38:	82c4      	strh	r4, [r0, #22]
 8014e3a:	8b83      	ldrh	r3, [r0, #28]
 8014e3c:	8b04      	ldrh	r4, [r0, #24]
 8014e3e:	4422      	add	r2, r4
 8014e40:	440c      	add	r4, r1
 8014e42:	1a59      	subs	r1, r3, r1
 8014e44:	83c2      	strh	r2, [r0, #30]
 8014e46:	8304      	strh	r4, [r0, #24]
 8014e48:	8381      	strh	r1, [r0, #28]
 8014e4a:	bd30      	pop	{r4, r5, pc}

08014e4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8014e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e50:	4604      	mov	r4, r0
 8014e52:	8a47      	ldrh	r7, [r0, #18]
 8014e54:	68c0      	ldr	r0, [r0, #12]
 8014e56:	6803      	ldr	r3, [r0, #0]
 8014e58:	b085      	sub	sp, #20
 8014e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e5c:	4798      	blx	r3
 8014e5e:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8014e62:	7a63      	ldrb	r3, [r4, #9]
 8014e64:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8014e68:	42b7      	cmp	r7, r6
 8014e6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014e6e:	bfac      	ite	ge
 8014e70:	f04f 0900 	movge.w	r9, #0
 8014e74:	f04f 0901 	movlt.w	r9, #1
 8014e78:	2b05      	cmp	r3, #5
 8014e7a:	d804      	bhi.n	8014e86 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 8014e7c:	e8df f003 	tbb	[pc, r3]
 8014e80:	470e0854 	.word	0x470e0854
 8014e84:	4c4c      	.short	0x4c4c
 8014e86:	2500      	movs	r5, #0
 8014e88:	46a9      	mov	r9, r5
 8014e8a:	462e      	mov	r6, r5
 8014e8c:	462f      	mov	r7, r5
 8014e8e:	e00d      	b.n	8014eac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014e90:	42b7      	cmp	r7, r6
 8014e92:	bfb4      	ite	lt
 8014e94:	2600      	movlt	r6, #0
 8014e96:	2601      	movge	r6, #1
 8014e98:	2500      	movs	r5, #0
 8014e9a:	e7f7      	b.n	8014e8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8014e9c:	42b7      	cmp	r7, r6
 8014e9e:	464d      	mov	r5, r9
 8014ea0:	f04f 0900 	mov.w	r9, #0
 8014ea4:	bfb4      	ite	lt
 8014ea6:	2600      	movlt	r6, #0
 8014ea8:	2601      	movge	r6, #1
 8014eaa:	464f      	mov	r7, r9
 8014eac:	f04f 0800 	mov.w	r8, #0
 8014eb0:	f8a4 8016 	strh.w	r8, [r4, #22]
 8014eb4:	f8a4 8018 	strh.w	r8, [r4, #24]
 8014eb8:	f8cd 8004 	str.w	r8, [sp, #4]
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	9303      	str	r3, [sp, #12]
 8014ec0:	8823      	ldrh	r3, [r4, #0]
 8014ec2:	2b20      	cmp	r3, #32
 8014ec4:	d034      	beq.n	8014f30 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 8014ec6:	f242 010b 	movw	r1, #8203	; 0x200b
 8014eca:	1a5a      	subs	r2, r3, r1
 8014ecc:	f1d2 0a00 	rsbs	sl, r2, #0
 8014ed0:	eb4a 0a02 	adc.w	sl, sl, r2
 8014ed4:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8014ed8:	4293      	cmp	r3, r2
 8014eda:	d009      	beq.n	8014ef0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 8014edc:	428b      	cmp	r3, r1
 8014ede:	9a01      	ldr	r2, [sp, #4]
 8014ee0:	bf18      	it	ne
 8014ee2:	461a      	movne	r2, r3
 8014ee4:	9201      	str	r2, [sp, #4]
 8014ee6:	bf0c      	ite	eq
 8014ee8:	f04f 0a01 	moveq.w	sl, #1
 8014eec:	f04f 0a00 	movne.w	sl, #0
 8014ef0:	ab03      	add	r3, sp, #12
 8014ef2:	68e2      	ldr	r2, [r4, #12]
 8014ef4:	7a21      	ldrb	r1, [r4, #8]
 8014ef6:	6860      	ldr	r0, [r4, #4]
 8014ef8:	f002 fe04 	bl	8017b04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014efc:	8020      	strh	r0, [r4, #0]
 8014efe:	b9d8      	cbnz	r0, 8014f38 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 8014f00:	8ba2      	ldrh	r2, [r4, #28]
 8014f02:	2300      	movs	r3, #0
 8014f04:	4611      	mov	r1, r2
 8014f06:	4620      	mov	r0, r4
 8014f08:	f7ff ff90 	bl	8014e2c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8014f0c:	e06e      	b.n	8014fec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 8014f0e:	2500      	movs	r5, #0
 8014f10:	46a9      	mov	r9, r5
 8014f12:	462e      	mov	r6, r5
 8014f14:	2701      	movs	r7, #1
 8014f16:	e7c9      	b.n	8014eac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014f18:	42b7      	cmp	r7, r6
 8014f1a:	f04f 0500 	mov.w	r5, #0
 8014f1e:	bfb4      	ite	lt
 8014f20:	2700      	movlt	r7, #0
 8014f22:	2701      	movge	r7, #1
 8014f24:	462e      	mov	r6, r5
 8014f26:	e7c1      	b.n	8014eac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014f28:	2500      	movs	r5, #0
 8014f2a:	46a9      	mov	r9, r5
 8014f2c:	2601      	movs	r6, #1
 8014f2e:	e7ad      	b.n	8014e8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8014f30:	9301      	str	r3, [sp, #4]
 8014f32:	f04f 0a01 	mov.w	sl, #1
 8014f36:	e7db      	b.n	8014ef0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 8014f38:	8b63      	ldrh	r3, [r4, #26]
 8014f3a:	280a      	cmp	r0, #10
 8014f3c:	f103 0301 	add.w	r3, r3, #1
 8014f40:	8363      	strh	r3, [r4, #26]
 8014f42:	d0dd      	beq.n	8014f00 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 8014f44:	9a03      	ldr	r2, [sp, #12]
 8014f46:	bb62      	cbnz	r2, 8014fa2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 8014f48:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014f4c:	4298      	cmp	r0, r3
 8014f4e:	d003      	beq.n	8014f58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 8014f50:	f242 030b 	movw	r3, #8203	; 0x200b
 8014f54:	4298      	cmp	r0, r3
 8014f56:	d1b1      	bne.n	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014f58:	8823      	ldrh	r3, [r4, #0]
 8014f5a:	8ba1      	ldrh	r1, [r4, #28]
 8014f5c:	2b20      	cmp	r3, #32
 8014f5e:	d003      	beq.n	8014f68 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 8014f60:	f242 000b 	movw	r0, #8203	; 0x200b
 8014f64:	4283      	cmp	r3, r0
 8014f66:	d131      	bne.n	8014fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 8014f68:	f1ba 0f00 	cmp.w	sl, #0
 8014f6c:	bf0a      	itet	eq
 8014f6e:	4688      	moveq	r8, r1
 8014f70:	4650      	movne	r0, sl
 8014f72:	2001      	moveq	r0, #1
 8014f74:	440a      	add	r2, r1
 8014f76:	8b23      	ldrh	r3, [r4, #24]
 8014f78:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8014f7c:	b292      	uxth	r2, r2
 8014f7e:	83a2      	strh	r2, [r4, #28]
 8014f80:	4413      	add	r3, r2
 8014f82:	f1b9 0f00 	cmp.w	r9, #0
 8014f86:	d102      	bne.n	8014f8e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 8014f88:	2d00      	cmp	r5, #0
 8014f8a:	d042      	beq.n	8015012 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 8014f8c:	b300      	cbz	r0, 8014fd0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 8014f8e:	8c21      	ldrh	r1, [r4, #32]
 8014f90:	4419      	add	r1, r3
 8014f92:	458c      	cmp	ip, r1
 8014f94:	da37      	bge.n	8015006 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 8014f96:	8ae1      	ldrh	r1, [r4, #22]
 8014f98:	2900      	cmp	r1, #0
 8014f9a:	d034      	beq.n	8015006 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 8014f9c:	4563      	cmp	r3, ip
 8014f9e:	dd8d      	ble.n	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014fa0:	e01d      	b.n	8014fde <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 8014fa2:	8893      	ldrh	r3, [r2, #4]
 8014fa4:	8023      	strh	r3, [r4, #0]
 8014fa6:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8014faa:	9901      	ldr	r1, [sp, #4]
 8014fac:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8014fb0:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8014fb4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8014fb8:	ea4b 0b00 	orr.w	fp, fp, r0
 8014fbc:	68e0      	ldr	r0, [r4, #12]
 8014fbe:	6803      	ldr	r3, [r0, #0]
 8014fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fc2:	4798      	blx	r3
 8014fc4:	eb0b 0200 	add.w	r2, fp, r0
 8014fc8:	b292      	uxth	r2, r2
 8014fca:	e7c5      	b.n	8014f58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 8014fcc:	2000      	movs	r0, #0
 8014fce:	e7d1      	b.n	8014f74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 8014fd0:	4563      	cmp	r3, ip
 8014fd2:	f77f af73 	ble.w	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014fd6:	8ae3      	ldrh	r3, [r4, #22]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	f43f af6f 	beq.w	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014fde:	2301      	movs	r3, #1
 8014fe0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8014fe4:	8c22      	ldrh	r2, [r4, #32]
 8014fe6:	8be3      	ldrh	r3, [r4, #30]
 8014fe8:	4413      	add	r3, r2
 8014fea:	83e3      	strh	r3, [r4, #30]
 8014fec:	68e0      	ldr	r0, [r4, #12]
 8014fee:	6803      	ldr	r3, [r0, #0]
 8014ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ff2:	4798      	blx	r3
 8014ff4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8014ff8:	4418      	add	r0, r3
 8014ffa:	8a63      	ldrh	r3, [r4, #18]
 8014ffc:	1a18      	subs	r0, r3, r0
 8014ffe:	8260      	strh	r0, [r4, #18]
 8015000:	b005      	add	sp, #20
 8015002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015006:	2300      	movs	r3, #0
 8015008:	4611      	mov	r1, r2
 801500a:	4620      	mov	r0, r4
 801500c:	f7ff ff0e 	bl	8014e2c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015010:	e754      	b.n	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015012:	4563      	cmp	r3, ip
 8015014:	dd14      	ble.n	8015040 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 8015016:	b117      	cbz	r7, 801501e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 8015018:	2301      	movs	r3, #1
 801501a:	460a      	mov	r2, r1
 801501c:	e772      	b.n	8014f04 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801501e:	2e00      	cmp	r6, #0
 8015020:	f43f af4c 	beq.w	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015024:	2800      	cmp	r0, #0
 8015026:	f47f af49 	bne.w	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801502a:	f1ba 0f00 	cmp.w	sl, #0
 801502e:	d002      	beq.n	8015036 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 8015030:	2301      	movs	r3, #1
 8015032:	4642      	mov	r2, r8
 8015034:	e767      	b.n	8014f06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 8015036:	8ae3      	ldrh	r3, [r4, #22]
 8015038:	2b00      	cmp	r3, #0
 801503a:	f43f af3f 	beq.w	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801503e:	e7d5      	b.n	8014fec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 8015040:	2800      	cmp	r0, #0
 8015042:	f47f af3b 	bne.w	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015046:	f1ba 0f00 	cmp.w	sl, #0
 801504a:	f43f af37 	beq.w	8014ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801504e:	2301      	movs	r3, #1
 8015050:	4642      	mov	r2, r8
 8015052:	e7da      	b.n	801500a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

08015054 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015056:	4605      	mov	r5, r0
 8015058:	b08f      	sub	sp, #60	; 0x3c
 801505a:	4617      	mov	r7, r2
 801505c:	461c      	mov	r4, r3
 801505e:	460e      	mov	r6, r1
 8015060:	b1d1      	cbz	r1, 8015098 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	4620      	mov	r0, r4
 8015066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015068:	4798      	blx	r3
 801506a:	4240      	negs	r0, r0
 801506c:	b200      	sxth	r0, r0
 801506e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015072:	9603      	str	r6, [sp, #12]
 8015074:	9700      	str	r7, [sp, #0]
 8015076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801507a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801507e:	4629      	mov	r1, r5
 8015080:	a805      	add	r0, sp, #20
 8015082:	f7ff fcbf 	bl	8014a04 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015086:	2401      	movs	r4, #1
 8015088:	a805      	add	r0, sp, #20
 801508a:	f7ff fedf 	bl	8014e4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801508e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015092:	b163      	cbz	r3, 80150ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015094:	3401      	adds	r4, #1
 8015096:	e7f7      	b.n	8015088 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015098:	f002 fe02 	bl	8017ca0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801509c:	2401      	movs	r4, #1
 801509e:	280a      	cmp	r0, #10
 80150a0:	4628      	mov	r0, r5
 80150a2:	bf08      	it	eq
 80150a4:	3401      	addeq	r4, #1
 80150a6:	f002 fdfb 	bl	8017ca0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80150aa:	2800      	cmp	r0, #0
 80150ac:	d1f7      	bne.n	801509e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80150ae:	b2a0      	uxth	r0, r4
 80150b0:	b00f      	add	sp, #60	; 0x3c
 80150b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80150b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150b8:	b0e3      	sub	sp, #396	; 0x18c
 80150ba:	461c      	mov	r4, r3
 80150bc:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 80150be:	4683      	mov	fp, r0
 80150c0:	4688      	mov	r8, r1
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	f000 8112 	beq.w	80152ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80150c8:	6823      	ldr	r3, [r4, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	f000 810e 	beq.w	80152ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80150d0:	7ba3      	ldrb	r3, [r4, #14]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	f000 810a 	beq.w	80152ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80150d8:	6810      	ldr	r0, [r2, #0]
 80150da:	6851      	ldr	r1, [r2, #4]
 80150dc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80150e0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80150e4:	ad0a      	add	r5, sp, #40	; 0x28
 80150e6:	462b      	mov	r3, r5
 80150e8:	c303      	stmia	r3!, {r0, r1}
 80150ea:	2100      	movs	r1, #0
 80150ec:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80150f0:	910c      	str	r1, [sp, #48]	; 0x30
 80150f2:	79a2      	ldrb	r2, [r4, #6]
 80150f4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80150f8:	a90c      	add	r1, sp, #48	; 0x30
 80150fa:	4628      	mov	r0, r5
 80150fc:	f7ff fd01 	bl	8014b02 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015100:	a90c      	add	r1, sp, #48	; 0x30
 8015102:	4608      	mov	r0, r1
 8015104:	79a2      	ldrb	r2, [r4, #6]
 8015106:	f7ff fcfc 	bl	8014b02 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801510a:	a817      	add	r0, sp, #92	; 0x5c
 801510c:	f002 f99d 	bl	801744a <_ZN8touchgfx12TextProviderC1Ev>
 8015110:	6820      	ldr	r0, [r4, #0]
 8015112:	6803      	ldr	r3, [r0, #0]
 8015114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015116:	4798      	blx	r3
 8015118:	4606      	mov	r6, r0
 801511a:	6820      	ldr	r0, [r4, #0]
 801511c:	6803      	ldr	r3, [r0, #0]
 801511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015120:	4798      	blx	r3
 8015122:	4633      	mov	r3, r6
 8015124:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8015126:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015128:	9000      	str	r0, [sp, #0]
 801512a:	a817      	add	r0, sp, #92	; 0x5c
 801512c:	f002 f9e8 	bl	8017500 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015130:	6820      	ldr	r0, [r4, #0]
 8015132:	f894 a004 	ldrb.w	sl, [r4, #4]
 8015136:	6803      	ldr	r3, [r0, #0]
 8015138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801513a:	4798      	blx	r3
 801513c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015140:	6823      	ldr	r3, [r4, #0]
 8015142:	4607      	mov	r7, r0
 8015144:	4406      	add	r6, r0
 8015146:	a830      	add	r0, sp, #192	; 0xc0
 8015148:	f893 9009 	ldrb.w	r9, [r3, #9]
 801514c:	f002 f97d 	bl	801744a <_ZN8touchgfx12TextProviderC1Ev>
 8015150:	7c23      	ldrb	r3, [r4, #16]
 8015152:	b17b      	cbz	r3, 8015174 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015154:	6820      	ldr	r0, [r4, #0]
 8015156:	6803      	ldr	r3, [r0, #0]
 8015158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801515a:	4798      	blx	r3
 801515c:	9009      	str	r0, [sp, #36]	; 0x24
 801515e:	6820      	ldr	r0, [r4, #0]
 8015160:	6802      	ldr	r2, [r0, #0]
 8015162:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015164:	4790      	blx	r2
 8015166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015168:	9000      	str	r0, [sp, #0]
 801516a:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801516c:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801516e:	a830      	add	r0, sp, #192	; 0xc0
 8015170:	f002 f9c6 	bl	8017500 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015174:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015178:	7be2      	ldrb	r2, [r4, #15]
 801517a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801517e:	1a8a      	subs	r2, r1, r2
 8015180:	7c21      	ldrb	r1, [r4, #16]
 8015182:	9103      	str	r1, [sp, #12]
 8015184:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015188:	9102      	str	r1, [sp, #8]
 801518a:	6821      	ldr	r1, [r4, #0]
 801518c:	9101      	str	r1, [sp, #4]
 801518e:	7961      	ldrb	r1, [r4, #5]
 8015190:	9100      	str	r1, [sp, #0]
 8015192:	b292      	uxth	r2, r2
 8015194:	a930      	add	r1, sp, #192	; 0xc0
 8015196:	a80e      	add	r0, sp, #56	; 0x38
 8015198:	f7ff fc34 	bl	8014a04 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801519c:	2e00      	cmp	r6, #0
 801519e:	dc5b      	bgt.n	8015258 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80151a0:	af17      	add	r7, sp, #92	; 0x5c
 80151a2:	f04f 0900 	mov.w	r9, #0
 80151a6:	7c23      	ldrb	r3, [r4, #16]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	f000 80b1 	beq.w	8015310 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80151ae:	a80e      	add	r0, sp, #56	; 0x38
 80151b0:	f7ff fe4c 	bl	8014e4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80151b4:	f1ba 0f00 	cmp.w	sl, #0
 80151b8:	f000 80a5 	beq.w	8015306 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80151bc:	7c23      	ldrb	r3, [r4, #16]
 80151be:	9309      	str	r3, [sp, #36]	; 0x24
 80151c0:	2264      	movs	r2, #100	; 0x64
 80151c2:	4639      	mov	r1, r7
 80151c4:	a849      	add	r0, sp, #292	; 0x124
 80151c6:	f011 fc00 	bl	80269ca <memcpy>
 80151ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	f000 80a7 	beq.w	8015320 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80151d2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80151d6:	7922      	ldrb	r2, [r4, #4]
 80151d8:	2a01      	cmp	r2, #1
 80151da:	f040 808a 	bne.w	80152f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80151de:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 80151e2:	1ac0      	subs	r0, r0, r3
 80151e4:	2302      	movs	r3, #2
 80151e6:	fb90 f0f3 	sdiv	r0, r0, r3
 80151ea:	b200      	sxth	r0, r0
 80151ec:	7c23      	ldrb	r3, [r4, #16]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f000 808b 	beq.w	801530a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80151f4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 80151f8:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 80151fc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015200:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015204:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8015208:	4410      	add	r0, r2
 801520a:	b200      	sxth	r0, r0
 801520c:	9000      	str	r0, [sp, #0]
 801520e:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8015212:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8015216:	4642      	mov	r2, r8
 8015218:	2100      	movs	r1, #0
 801521a:	4658      	mov	r0, fp
 801521c:	f7ff fca2 	bl	8014b64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015220:	2800      	cmp	r0, #0
 8015222:	d163      	bne.n	80152ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015224:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015228:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801522c:	b2b2      	uxth	r2, r6
 801522e:	4413      	add	r3, r2
 8015230:	1a8a      	subs	r2, r1, r2
 8015232:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8015236:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801523a:	b21b      	sxth	r3, r3
 801523c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015240:	2a00      	cmp	r2, #0
 8015242:	d153      	bne.n	80152ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015244:	6822      	ldr	r2, [r4, #0]
 8015246:	8869      	ldrh	r1, [r5, #2]
 8015248:	7a12      	ldrb	r2, [r2, #8]
 801524a:	1a9b      	subs	r3, r3, r2
 801524c:	88ea      	ldrh	r2, [r5, #6]
 801524e:	440a      	add	r2, r1
 8015250:	b212      	sxth	r2, r2
 8015252:	4293      	cmp	r3, r2
 8015254:	dda7      	ble.n	80151a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8015256:	e049      	b.n	80152ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015258:	7c23      	ldrb	r3, [r4, #16]
 801525a:	444f      	add	r7, r9
 801525c:	b1c3      	cbz	r3, 8015290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801525e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8015262:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015266:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801526a:	443b      	add	r3, r7
 801526c:	4293      	cmp	r3, r2
 801526e:	da97      	bge.n	80151a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015270:	a80e      	add	r0, sp, #56	; 0x38
 8015272:	f7ff fdeb 	bl	8014e4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015276:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801527a:	3b01      	subs	r3, #1
 801527c:	b29b      	uxth	r3, r3
 801527e:	454b      	cmp	r3, r9
 8015280:	9309      	str	r3, [sp, #36]	; 0x24
 8015282:	d021      	beq.n	80152c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8015284:	7961      	ldrb	r1, [r4, #5]
 8015286:	a817      	add	r0, sp, #92	; 0x5c
 8015288:	f7fa fdc0 	bl	800fe0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801528c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801528e:	e7f4      	b.n	801527a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8015290:	fa1f f986 	uxth.w	r9, r6
 8015294:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015298:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801529c:	443b      	add	r3, r7
 801529e:	4293      	cmp	r3, r2
 80152a0:	f6bf af7e 	bge.w	80151a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80152a4:	a817      	add	r0, sp, #92	; 0x5c
 80152a6:	f002 fcfb 	bl	8017ca0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80152aa:	b1f8      	cbz	r0, 80152ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80152ac:	280a      	cmp	r0, #10
 80152ae:	d1f1      	bne.n	8015294 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80152b0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80152b4:	444b      	add	r3, r9
 80152b6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80152ba:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80152be:	eba3 0309 	sub.w	r3, r3, r9
 80152c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80152c6:	e7e5      	b.n	8015294 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80152c8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80152cc:	b2b3      	uxth	r3, r6
 80152ce:	441a      	add	r2, r3
 80152d0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80152d4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 80152d8:	1ad3      	subs	r3, r2, r3
 80152da:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80152de:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80152e2:	b11b      	cbz	r3, 80152ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80152e4:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d0ba      	beq.n	8015262 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80152ec:	b063      	add	sp, #396	; 0x18c
 80152ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152f2:	2a02      	cmp	r2, #2
 80152f4:	d105      	bne.n	8015302 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80152f6:	7be2      	ldrb	r2, [r4, #15]
 80152f8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80152fc:	1a80      	subs	r0, r0, r2
 80152fe:	1ac0      	subs	r0, r0, r3
 8015300:	e773      	b.n	80151ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8015302:	2000      	movs	r0, #0
 8015304:	e772      	b.n	80151ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015306:	7be0      	ldrb	r0, [r4, #15]
 8015308:	e770      	b.n	80151ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801530a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801530e:	e773      	b.n	80151f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015310:	f1ba 0f00 	cmp.w	sl, #0
 8015314:	d0f7      	beq.n	8015306 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8015316:	2264      	movs	r2, #100	; 0x64
 8015318:	4639      	mov	r1, r7
 801531a:	a849      	add	r0, sp, #292	; 0x124
 801531c:	f011 fb55 	bl	80269ca <memcpy>
 8015320:	2300      	movs	r3, #0
 8015322:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015326:	6821      	ldr	r1, [r4, #0]
 8015328:	a849      	add	r0, sp, #292	; 0x124
 801532a:	f7ff fbae 	bl	8014a8a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801532e:	b203      	sxth	r3, r0
 8015330:	e751      	b.n	80151d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08015332 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015332:	2b03      	cmp	r3, #3
 8015334:	d818      	bhi.n	8015368 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8015336:	e8df f003 	tbb	[pc, r3]
 801533a:	0602      	.short	0x0602
 801533c:	130d      	.short	0x130d
 801533e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015342:	1850      	adds	r0, r2, r1
 8015344:	4770      	bx	lr
 8015346:	8803      	ldrh	r3, [r0, #0]
 8015348:	8880      	ldrh	r0, [r0, #4]
 801534a:	4418      	add	r0, r3
 801534c:	b200      	sxth	r0, r0
 801534e:	1a80      	subs	r0, r0, r2
 8015350:	3801      	subs	r0, #1
 8015352:	4770      	bx	lr
 8015354:	8803      	ldrh	r3, [r0, #0]
 8015356:	8880      	ldrh	r0, [r0, #4]
 8015358:	4418      	add	r0, r3
 801535a:	b200      	sxth	r0, r0
 801535c:	1a40      	subs	r0, r0, r1
 801535e:	e7f7      	b.n	8015350 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015360:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015364:	4410      	add	r0, r2
 8015366:	4770      	bx	lr
 8015368:	2000      	movs	r0, #0
 801536a:	4770      	bx	lr

0801536c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801536c:	2b03      	cmp	r3, #3
 801536e:	d817      	bhi.n	80153a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015370:	e8df f003 	tbb	[pc, r3]
 8015374:	10090602 	.word	0x10090602
 8015378:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801537c:	1850      	adds	r0, r2, r1
 801537e:	4770      	bx	lr
 8015380:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015384:	e7fa      	b.n	801537c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8015386:	8843      	ldrh	r3, [r0, #2]
 8015388:	88c0      	ldrh	r0, [r0, #6]
 801538a:	4418      	add	r0, r3
 801538c:	b200      	sxth	r0, r0
 801538e:	1a80      	subs	r0, r0, r2
 8015390:	3801      	subs	r0, #1
 8015392:	4770      	bx	lr
 8015394:	8843      	ldrh	r3, [r0, #2]
 8015396:	88c0      	ldrh	r0, [r0, #6]
 8015398:	4418      	add	r0, r3
 801539a:	b200      	sxth	r0, r0
 801539c:	1a40      	subs	r0, r0, r1
 801539e:	e7f7      	b.n	8015390 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80153a0:	2000      	movs	r0, #0
 80153a2:	4770      	bx	lr

080153a4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80153a4:	4b01      	ldr	r3, [pc, #4]	; (80153ac <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80153a6:	2200      	movs	r2, #0
 80153a8:	601a      	str	r2, [r3, #0]
 80153aa:	4770      	bx	lr
 80153ac:	20025838 	.word	0x20025838

080153b0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80153b0:	4603      	mov	r3, r0
 80153b2:	b1c8      	cbz	r0, 80153e8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80153b4:	0c02      	lsrs	r2, r0, #16
 80153b6:	0412      	lsls	r2, r2, #16
 80153b8:	b9a2      	cbnz	r2, 80153e4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80153ba:	0403      	lsls	r3, r0, #16
 80153bc:	2010      	movs	r0, #16
 80153be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80153c2:	bf04      	itt	eq
 80153c4:	021b      	lsleq	r3, r3, #8
 80153c6:	3008      	addeq	r0, #8
 80153c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80153cc:	bf04      	itt	eq
 80153ce:	011b      	lsleq	r3, r3, #4
 80153d0:	3004      	addeq	r0, #4
 80153d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80153d6:	bf04      	itt	eq
 80153d8:	009b      	lsleq	r3, r3, #2
 80153da:	3002      	addeq	r0, #2
 80153dc:	2b00      	cmp	r3, #0
 80153de:	db04      	blt.n	80153ea <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80153e0:	3001      	adds	r0, #1
 80153e2:	4770      	bx	lr
 80153e4:	2000      	movs	r0, #0
 80153e6:	e7ea      	b.n	80153be <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80153e8:	2020      	movs	r0, #32
 80153ea:	4770      	bx	lr

080153ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80153ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153f0:	b087      	sub	sp, #28
 80153f2:	460d      	mov	r5, r1
 80153f4:	4616      	mov	r6, r2
 80153f6:	4698      	mov	r8, r3
 80153f8:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80153fc:	4601      	mov	r1, r0
 80153fe:	b120      	cbz	r0, 801540a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8015400:	b11a      	cbz	r2, 801540a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8015402:	2d1f      	cmp	r5, #31
 8015404:	d801      	bhi.n	801540a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8015406:	2b1f      	cmp	r3, #31
 8015408:	d904      	bls.n	8015414 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801540a:	2000      	movs	r0, #0
 801540c:	6038      	str	r0, [r7, #0]
 801540e:	b007      	add	sp, #28
 8015410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015414:	b97d      	cbnz	r5, 8015436 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8015416:	b143      	cbz	r3, 801542a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8015418:	4602      	mov	r2, r0
 801541a:	e9cd 4700 	strd	r4, r7, [sp]
 801541e:	462b      	mov	r3, r5
 8015420:	4641      	mov	r1, r8
 8015422:	4630      	mov	r0, r6
 8015424:	f7ff ffe2 	bl	80153ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015428:	e7f1      	b.n	801540e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801542a:	f04f 33ff 	mov.w	r3, #4294967295
 801542e:	603b      	str	r3, [r7, #0]
 8015430:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015434:	e7eb      	b.n	801540e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8015436:	fa32 fa05 	lsrs.w	sl, r2, r5
 801543a:	d106      	bne.n	801544a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801543c:	4346      	muls	r6, r0
 801543e:	fbb6 f0f4 	udiv	r0, r6, r4
 8015442:	fb04 6610 	mls	r6, r4, r0, r6
 8015446:	603e      	str	r6, [r7, #0]
 8015448:	e7e1      	b.n	801540e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801544a:	2201      	movs	r2, #1
 801544c:	40aa      	lsls	r2, r5
 801544e:	3a01      	subs	r2, #1
 8015450:	4016      	ands	r6, r2
 8015452:	fa00 fb05 	lsl.w	fp, r0, r5
 8015456:	4630      	mov	r0, r6
 8015458:	fbbb f9f4 	udiv	r9, fp, r4
 801545c:	fb0a f309 	mul.w	r3, sl, r9
 8015460:	9303      	str	r3, [sp, #12]
 8015462:	f7ff ffa5 	bl	80153b0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015466:	462b      	mov	r3, r5
 8015468:	460a      	mov	r2, r1
 801546a:	e9cd 4700 	strd	r4, r7, [sp]
 801546e:	4601      	mov	r1, r0
 8015470:	4630      	mov	r0, r6
 8015472:	f7ff ffbb 	bl	80153ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015476:	fb04 b919 	mls	r9, r4, r9, fp
 801547a:	4606      	mov	r6, r0
 801547c:	4648      	mov	r0, r9
 801547e:	eb05 0108 	add.w	r1, r5, r8
 8015482:	f7ff ff95 	bl	80153b0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015486:	ab05      	add	r3, sp, #20
 8015488:	e9cd 4300 	strd	r4, r3, [sp]
 801548c:	464a      	mov	r2, r9
 801548e:	4603      	mov	r3, r0
 8015490:	4650      	mov	r0, sl
 8015492:	f7ff ffab 	bl	80153ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015496:	6839      	ldr	r1, [r7, #0]
 8015498:	9a05      	ldr	r2, [sp, #20]
 801549a:	9b03      	ldr	r3, [sp, #12]
 801549c:	4411      	add	r1, r2
 801549e:	fbb1 f2f4 	udiv	r2, r1, r4
 80154a2:	18d3      	adds	r3, r2, r3
 80154a4:	441e      	add	r6, r3
 80154a6:	fb04 1412 	mls	r4, r4, r2, r1
 80154aa:	4430      	add	r0, r6
 80154ac:	603c      	str	r4, [r7, #0]
 80154ae:	e7ae      	b.n	801540e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080154b0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80154b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154b4:	b085      	sub	sp, #20
 80154b6:	f1b0 0900 	subs.w	r9, r0, #0
 80154ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80154bc:	461d      	mov	r5, r3
 80154be:	bfbf      	itttt	lt
 80154c0:	6823      	ldrlt	r3, [r4, #0]
 80154c2:	425b      	neglt	r3, r3
 80154c4:	f1c9 0900 	rsblt	r9, r9, #0
 80154c8:	6023      	strlt	r3, [r4, #0]
 80154ca:	bfb4      	ite	lt
 80154cc:	f04f 36ff 	movlt.w	r6, #4294967295
 80154d0:	2601      	movge	r6, #1
 80154d2:	2a00      	cmp	r2, #0
 80154d4:	4617      	mov	r7, r2
 80154d6:	da04      	bge.n	80154e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80154d8:	6823      	ldr	r3, [r4, #0]
 80154da:	425b      	negs	r3, r3
 80154dc:	4257      	negs	r7, r2
 80154de:	4276      	negs	r6, r6
 80154e0:	6023      	str	r3, [r4, #0]
 80154e2:	2d00      	cmp	r5, #0
 80154e4:	4638      	mov	r0, r7
 80154e6:	bfba      	itte	lt
 80154e8:	426d      	neglt	r5, r5
 80154ea:	f04f 38ff 	movlt.w	r8, #4294967295
 80154ee:	f04f 0801 	movge.w	r8, #1
 80154f2:	f7ff ff5d 	bl	80153b0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80154f6:	ab03      	add	r3, sp, #12
 80154f8:	e9cd 5300 	strd	r5, r3, [sp]
 80154fc:	463a      	mov	r2, r7
 80154fe:	4603      	mov	r3, r0
 8015500:	4648      	mov	r0, r9
 8015502:	f7ff ff73 	bl	80153ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015506:	6823      	ldr	r3, [r4, #0]
 8015508:	9a03      	ldr	r2, [sp, #12]
 801550a:	4546      	cmp	r6, r8
 801550c:	441a      	add	r2, r3
 801550e:	fb92 f3f5 	sdiv	r3, r2, r5
 8015512:	4418      	add	r0, r3
 8015514:	bf18      	it	ne
 8015516:	4240      	negne	r0, r0
 8015518:	fb05 2313 	mls	r3, r5, r3, r2
 801551c:	1c72      	adds	r2, r6, #1
 801551e:	6023      	str	r3, [r4, #0]
 8015520:	d105      	bne.n	801552e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015522:	2b00      	cmp	r3, #0
 8015524:	f1c3 0200 	rsb	r2, r3, #0
 8015528:	db0b      	blt.n	8015542 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801552a:	6022      	str	r2, [r4, #0]
 801552c:	e006      	b.n	801553c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801552e:	2e01      	cmp	r6, #1
 8015530:	d104      	bne.n	801553c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015532:	2b00      	cmp	r3, #0
 8015534:	da02      	bge.n	801553c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015536:	442b      	add	r3, r5
 8015538:	3801      	subs	r0, #1
 801553a:	6023      	str	r3, [r4, #0]
 801553c:	b005      	add	sp, #20
 801553e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015542:	3801      	subs	r0, #1
 8015544:	1b52      	subs	r2, r2, r5
 8015546:	e7f0      	b.n	801552a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08015548 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015548:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801554c:	4c1c      	ldr	r4, [pc, #112]	; (80155c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801554e:	6807      	ldr	r7, [r0, #0]
 8015550:	69a3      	ldr	r3, [r4, #24]
 8015552:	4605      	mov	r5, r0
 8015554:	b92b      	cbnz	r3, 8015562 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8015556:	6840      	ldr	r0, [r0, #4]
 8015558:	e9c5 7000 	strd	r7, r0, [r5]
 801555c:	b004      	add	sp, #16
 801555e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015562:	68a2      	ldr	r2, [r4, #8]
 8015564:	6820      	ldr	r0, [r4, #0]
 8015566:	ae04      	add	r6, sp, #16
 8015568:	f04f 0802 	mov.w	r8, #2
 801556c:	fb93 f1f8 	sdiv	r1, r3, r8
 8015570:	440a      	add	r2, r1
 8015572:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015576:	69e1      	ldr	r1, [r4, #28]
 8015578:	9600      	str	r6, [sp, #0]
 801557a:	463a      	mov	r2, r7
 801557c:	f7ff ff98 	bl	80154b0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015580:	69a3      	ldr	r3, [r4, #24]
 8015582:	686a      	ldr	r2, [r5, #4]
 8015584:	6a21      	ldr	r1, [r4, #32]
 8015586:	9600      	str	r6, [sp, #0]
 8015588:	4607      	mov	r7, r0
 801558a:	6860      	ldr	r0, [r4, #4]
 801558c:	f7ff ff90 	bl	80154b0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015590:	6962      	ldr	r2, [r4, #20]
 8015592:	69a3      	ldr	r3, [r4, #24]
 8015594:	fb93 f8f8 	sdiv	r8, r3, r8
 8015598:	4442      	add	r2, r8
 801559a:	9203      	str	r2, [sp, #12]
 801559c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801559e:	682a      	ldr	r2, [r5, #0]
 80155a0:	9600      	str	r6, [sp, #0]
 80155a2:	4407      	add	r7, r0
 80155a4:	68e0      	ldr	r0, [r4, #12]
 80155a6:	f7ff ff83 	bl	80154b0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80155aa:	9600      	str	r6, [sp, #0]
 80155ac:	4680      	mov	r8, r0
 80155ae:	69a3      	ldr	r3, [r4, #24]
 80155b0:	686a      	ldr	r2, [r5, #4]
 80155b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80155b4:	6920      	ldr	r0, [r4, #16]
 80155b6:	f7ff ff7b 	bl	80154b0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80155ba:	4440      	add	r0, r8
 80155bc:	e7cc      	b.n	8015558 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80155be:	bf00      	nop
 80155c0:	2002583c 	.word	0x2002583c

080155c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80155c4:	4b07      	ldr	r3, [pc, #28]	; (80155e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d109      	bne.n	80155e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80155cc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80155d0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80155d4:	8003      	strh	r3, [r0, #0]
 80155d6:	4b04      	ldr	r3, [pc, #16]	; (80155e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80155d8:	881b      	ldrh	r3, [r3, #0]
 80155da:	3b01      	subs	r3, #1
 80155dc:	1a9b      	subs	r3, r3, r2
 80155de:	800b      	strh	r3, [r1, #0]
 80155e0:	4770      	bx	lr
 80155e2:	bf00      	nop
 80155e4:	20025828 	.word	0x20025828
 80155e8:	20025824 	.word	0x20025824

080155ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80155ec:	b510      	push	{r4, lr}
 80155ee:	4b07      	ldr	r3, [pc, #28]	; (801560c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80155f0:	781b      	ldrb	r3, [r3, #0]
 80155f2:	2b01      	cmp	r3, #1
 80155f4:	d108      	bne.n	8015608 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80155f6:	4b06      	ldr	r3, [pc, #24]	; (8015610 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80155f8:	880c      	ldrh	r4, [r1, #0]
 80155fa:	881b      	ldrh	r3, [r3, #0]
 80155fc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015600:	3b01      	subs	r3, #1
 8015602:	1b1b      	subs	r3, r3, r4
 8015604:	8003      	strh	r3, [r0, #0]
 8015606:	800a      	strh	r2, [r1, #0]
 8015608:	bd10      	pop	{r4, pc}
 801560a:	bf00      	nop
 801560c:	20025828 	.word	0x20025828
 8015610:	20025824 	.word	0x20025824

08015614 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015614:	b510      	push	{r4, lr}
 8015616:	4b0a      	ldr	r3, [pc, #40]	; (8015640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015618:	781b      	ldrb	r3, [r3, #0]
 801561a:	2b01      	cmp	r3, #1
 801561c:	d10e      	bne.n	801563c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801561e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015622:	8843      	ldrh	r3, [r0, #2]
 8015624:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015628:	8044      	strh	r4, [r0, #2]
 801562a:	18ca      	adds	r2, r1, r3
 801562c:	4b05      	ldr	r3, [pc, #20]	; (8015644 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801562e:	881b      	ldrh	r3, [r3, #0]
 8015630:	1a9b      	subs	r3, r3, r2
 8015632:	8003      	strh	r3, [r0, #0]
 8015634:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015638:	80c3      	strh	r3, [r0, #6]
 801563a:	8081      	strh	r1, [r0, #4]
 801563c:	bd10      	pop	{r4, pc}
 801563e:	bf00      	nop
 8015640:	20025828 	.word	0x20025828
 8015644:	20025824 	.word	0x20025824

08015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8015648:	4b08      	ldr	r3, [pc, #32]	; (801566c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	2b01      	cmp	r3, #1
 801564e:	d10c      	bne.n	801566a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8015650:	8803      	ldrh	r3, [r0, #0]
 8015652:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015656:	8842      	ldrh	r2, [r0, #2]
 8015658:	8002      	strh	r2, [r0, #0]
 801565a:	185a      	adds	r2, r3, r1
 801565c:	4b04      	ldr	r3, [pc, #16]	; (8015670 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801565e:	881b      	ldrh	r3, [r3, #0]
 8015660:	1a9b      	subs	r3, r3, r2
 8015662:	8043      	strh	r3, [r0, #2]
 8015664:	88c3      	ldrh	r3, [r0, #6]
 8015666:	8083      	strh	r3, [r0, #4]
 8015668:	80c1      	strh	r1, [r0, #6]
 801566a:	4770      	bx	lr
 801566c:	20025828 	.word	0x20025828
 8015670:	20025824 	.word	0x20025824

08015674 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015674:	b510      	push	{r4, lr}
 8015676:	4b07      	ldr	r3, [pc, #28]	; (8015694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	2b01      	cmp	r3, #1
 801567c:	d108      	bne.n	8015690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801567e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015682:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015686:	8003      	strh	r3, [r0, #0]
 8015688:	8893      	ldrh	r3, [r2, #4]
 801568a:	3b01      	subs	r3, #1
 801568c:	1b1b      	subs	r3, r3, r4
 801568e:	800b      	strh	r3, [r1, #0]
 8015690:	bd10      	pop	{r4, pc}
 8015692:	bf00      	nop
 8015694:	20025828 	.word	0x20025828

08015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015698:	b510      	push	{r4, lr}
 801569a:	4b0a      	ldr	r3, [pc, #40]	; (80156c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	2b01      	cmp	r3, #1
 80156a0:	460a      	mov	r2, r1
 80156a2:	d10d      	bne.n	80156c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80156a4:	8881      	ldrh	r1, [r0, #4]
 80156a6:	8803      	ldrh	r3, [r0, #0]
 80156a8:	440b      	add	r3, r1
 80156aa:	4601      	mov	r1, r0
 80156ac:	3b01      	subs	r3, #1
 80156ae:	f821 3b02 	strh.w	r3, [r1], #2
 80156b2:	f7ff ffdf 	bl	8015674 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80156b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80156ba:	88c2      	ldrh	r2, [r0, #6]
 80156bc:	8082      	strh	r2, [r0, #4]
 80156be:	80c3      	strh	r3, [r0, #6]
 80156c0:	bd10      	pop	{r4, pc}
 80156c2:	bf00      	nop
 80156c4:	20025828 	.word	0x20025828

080156c8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80156c8:	4b06      	ldr	r3, [pc, #24]	; (80156e4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80156ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80156ce:	4b06      	ldr	r3, [pc, #24]	; (80156e8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80156d0:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80156d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156d8:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80156dc:	2100      	movs	r1, #0
 80156de:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80156e2:	4770      	bx	lr
 80156e4:	20025824 	.word	0x20025824
 80156e8:	20025826 	.word	0x20025826

080156ec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80156ec:	4b03      	ldr	r3, [pc, #12]	; (80156fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80156ee:	6818      	ldr	r0, [r3, #0]
 80156f0:	b110      	cbz	r0, 80156f8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80156f2:	6803      	ldr	r3, [r0, #0]
 80156f4:	699b      	ldr	r3, [r3, #24]
 80156f6:	4718      	bx	r3
 80156f8:	4770      	bx	lr
 80156fa:	bf00      	nop
 80156fc:	2002586c 	.word	0x2002586c

08015700 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015700:	4770      	bx	lr
	...

08015704 <_ZN8touchgfx11Application4drawEv>:
 8015704:	b507      	push	{r0, r1, r2, lr}
 8015706:	4b09      	ldr	r3, [pc, #36]	; (801572c <_ZN8touchgfx11Application4drawEv+0x28>)
 8015708:	f9b3 2000 	ldrsh.w	r2, [r3]
 801570c:	4b08      	ldr	r3, [pc, #32]	; (8015730 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801570e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015716:	f8ad 3006 	strh.w	r3, [sp, #6]
 801571a:	6803      	ldr	r3, [r0, #0]
 801571c:	2100      	movs	r1, #0
 801571e:	9100      	str	r1, [sp, #0]
 8015720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015722:	4669      	mov	r1, sp
 8015724:	4798      	blx	r3
 8015726:	b003      	add	sp, #12
 8015728:	f85d fb04 	ldr.w	pc, [sp], #4
 801572c:	20025824 	.word	0x20025824
 8015730:	20025826 	.word	0x20025826

08015734 <_ZN8touchgfx11Application10invalidateEv>:
 8015734:	4b09      	ldr	r3, [pc, #36]	; (801575c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8015736:	f9b3 2000 	ldrsh.w	r2, [r3]
 801573a:	4b09      	ldr	r3, [pc, #36]	; (8015760 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801573c:	b082      	sub	sp, #8
 801573e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015742:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015746:	2100      	movs	r1, #0
 8015748:	f8ad 3006 	strh.w	r3, [sp, #6]
 801574c:	9100      	str	r1, [sp, #0]
 801574e:	6803      	ldr	r3, [r0, #0]
 8015750:	aa02      	add	r2, sp, #8
 8015752:	e912 0006 	ldmdb	r2, {r1, r2}
 8015756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015758:	b002      	add	sp, #8
 801575a:	4718      	bx	r3
 801575c:	20025824 	.word	0x20025824
 8015760:	20025826 	.word	0x20025826

08015764 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015764:	4b03      	ldr	r3, [pc, #12]	; (8015774 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015766:	6818      	ldr	r0, [r3, #0]
 8015768:	b110      	cbz	r0, 8015770 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801576a:	6803      	ldr	r3, [r0, #0]
 801576c:	69db      	ldr	r3, [r3, #28]
 801576e:	4718      	bx	r3
 8015770:	4770      	bx	lr
 8015772:	bf00      	nop
 8015774:	2002586c 	.word	0x2002586c

08015778 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015778:	4b03      	ldr	r3, [pc, #12]	; (8015788 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801577a:	6818      	ldr	r0, [r3, #0]
 801577c:	b110      	cbz	r0, 8015784 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801577e:	6803      	ldr	r3, [r0, #0]
 8015780:	6a1b      	ldr	r3, [r3, #32]
 8015782:	4718      	bx	r3
 8015784:	4770      	bx	lr
 8015786:	bf00      	nop
 8015788:	2002586c 	.word	0x2002586c

0801578c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801578c:	2300      	movs	r3, #0
 801578e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8015792:	4770      	bx	lr

08015794 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015794:	4b03      	ldr	r3, [pc, #12]	; (80157a4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8015796:	6818      	ldr	r0, [r3, #0]
 8015798:	b110      	cbz	r0, 80157a0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801579a:	6803      	ldr	r3, [r0, #0]
 801579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801579e:	4718      	bx	r3
 80157a0:	4770      	bx	lr
 80157a2:	bf00      	nop
 80157a4:	2002586c 	.word	0x2002586c

080157a8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80157a8:	b510      	push	{r4, lr}
 80157aa:	f9b1 4000 	ldrsh.w	r4, [r1]
 80157ae:	888a      	ldrh	r2, [r1, #4]
 80157b0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80157b4:	4422      	add	r2, r4
 80157b6:	b212      	sxth	r2, r2
 80157b8:	4293      	cmp	r3, r2
 80157ba:	da15      	bge.n	80157e8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80157bc:	8882      	ldrh	r2, [r0, #4]
 80157be:	4413      	add	r3, r2
 80157c0:	b21b      	sxth	r3, r3
 80157c2:	429c      	cmp	r4, r3
 80157c4:	da10      	bge.n	80157e8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80157c6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80157ca:	88c9      	ldrh	r1, [r1, #6]
 80157cc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80157d0:	4419      	add	r1, r3
 80157d2:	b209      	sxth	r1, r1
 80157d4:	428a      	cmp	r2, r1
 80157d6:	da07      	bge.n	80157e8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80157d8:	88c0      	ldrh	r0, [r0, #6]
 80157da:	4410      	add	r0, r2
 80157dc:	b200      	sxth	r0, r0
 80157de:	4283      	cmp	r3, r0
 80157e0:	bfac      	ite	ge
 80157e2:	2000      	movge	r0, #0
 80157e4:	2001      	movlt	r0, #1
 80157e6:	bd10      	pop	{r4, pc}
 80157e8:	2000      	movs	r0, #0
 80157ea:	e7fc      	b.n	80157e6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080157ec <_ZN8touchgfx4Rect10restrictToEss>:
 80157ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	b510      	push	{r4, lr}
 80157f4:	da04      	bge.n	8015800 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80157f6:	8884      	ldrh	r4, [r0, #4]
 80157f8:	4423      	add	r3, r4
 80157fa:	8083      	strh	r3, [r0, #4]
 80157fc:	2300      	movs	r3, #0
 80157fe:	8003      	strh	r3, [r0, #0]
 8015800:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015804:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015808:	1b09      	subs	r1, r1, r4
 801580a:	428b      	cmp	r3, r1
 801580c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015810:	bfc8      	it	gt
 8015812:	8081      	strhgt	r1, [r0, #4]
 8015814:	2b00      	cmp	r3, #0
 8015816:	da04      	bge.n	8015822 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8015818:	88c1      	ldrh	r1, [r0, #6]
 801581a:	440b      	add	r3, r1
 801581c:	80c3      	strh	r3, [r0, #6]
 801581e:	2300      	movs	r3, #0
 8015820:	8043      	strh	r3, [r0, #2]
 8015822:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015826:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801582a:	1a52      	subs	r2, r2, r1
 801582c:	4293      	cmp	r3, r2
 801582e:	bfc8      	it	gt
 8015830:	80c2      	strhgt	r2, [r0, #6]
 8015832:	bd10      	pop	{r4, pc}

08015834 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015834:	b510      	push	{r4, lr}
 8015836:	4b10      	ldr	r3, [pc, #64]	; (8015878 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8015838:	f9b3 2000 	ldrsh.w	r2, [r3]
 801583c:	4b0f      	ldr	r3, [pc, #60]	; (801587c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801583e:	460c      	mov	r4, r1
 8015840:	4620      	mov	r0, r4
 8015842:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015846:	f7ff ffd1 	bl	80157ec <_ZN8touchgfx4Rect10restrictToEss>
 801584a:	4b0d      	ldr	r3, [pc, #52]	; (8015880 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801584c:	6818      	ldr	r0, [r3, #0]
 801584e:	b190      	cbz	r0, 8015876 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8015850:	6803      	ldr	r3, [r0, #0]
 8015852:	4621      	mov	r1, r4
 8015854:	689b      	ldr	r3, [r3, #8]
 8015856:	4798      	blx	r3
 8015858:	4b0a      	ldr	r3, [pc, #40]	; (8015884 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801585a:	6818      	ldr	r0, [r3, #0]
 801585c:	b118      	cbz	r0, 8015866 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801585e:	6803      	ldr	r3, [r0, #0]
 8015860:	4621      	mov	r1, r4
 8015862:	689b      	ldr	r3, [r3, #8]
 8015864:	4798      	blx	r3
 8015866:	4b08      	ldr	r3, [pc, #32]	; (8015888 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8015868:	6818      	ldr	r0, [r3, #0]
 801586a:	6803      	ldr	r3, [r0, #0]
 801586c:	4621      	mov	r1, r4
 801586e:	69db      	ldr	r3, [r3, #28]
 8015870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015874:	4718      	bx	r3
 8015876:	bd10      	pop	{r4, pc}
 8015878:	20025826 	.word	0x20025826
 801587c:	20025824 	.word	0x20025824
 8015880:	2002586c 	.word	0x2002586c
 8015884:	20025868 	.word	0x20025868
 8015888:	20025830 	.word	0x20025830

0801588c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801588e:	4606      	mov	r6, r0
 8015890:	4608      	mov	r0, r1
 8015892:	460f      	mov	r7, r1
 8015894:	f7fc fdbf 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015898:	b9e8      	cbnz	r0, 80158d6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801589a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801589e:	f9b6 4000 	ldrsh.w	r4, [r6]
 80158a2:	42a5      	cmp	r5, r4
 80158a4:	db17      	blt.n	80158d6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80158a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80158aa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80158ae:	429a      	cmp	r2, r3
 80158b0:	db11      	blt.n	80158d6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80158b2:	88b9      	ldrh	r1, [r7, #4]
 80158b4:	440d      	add	r5, r1
 80158b6:	88b1      	ldrh	r1, [r6, #4]
 80158b8:	440c      	add	r4, r1
 80158ba:	b22d      	sxth	r5, r5
 80158bc:	b224      	sxth	r4, r4
 80158be:	42a5      	cmp	r5, r4
 80158c0:	dc09      	bgt.n	80158d6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80158c2:	88f8      	ldrh	r0, [r7, #6]
 80158c4:	4410      	add	r0, r2
 80158c6:	88f2      	ldrh	r2, [r6, #6]
 80158c8:	4413      	add	r3, r2
 80158ca:	b200      	sxth	r0, r0
 80158cc:	b21b      	sxth	r3, r3
 80158ce:	4298      	cmp	r0, r3
 80158d0:	bfcc      	ite	gt
 80158d2:	2000      	movgt	r0, #0
 80158d4:	2001      	movle	r0, #1
 80158d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080158d8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80158d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158da:	4604      	mov	r4, r0
 80158dc:	4608      	mov	r0, r1
 80158de:	460d      	mov	r5, r1
 80158e0:	f7fc fd99 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 80158e4:	b978      	cbnz	r0, 8015906 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80158e6:	4620      	mov	r0, r4
 80158e8:	f7fc fd95 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 80158ec:	f9b5 6000 	ldrsh.w	r6, [r5]
 80158f0:	b150      	cbz	r0, 8015908 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80158f2:	8026      	strh	r6, [r4, #0]
 80158f4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80158f8:	8063      	strh	r3, [r4, #2]
 80158fa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80158fe:	80a3      	strh	r3, [r4, #4]
 8015900:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015904:	80e3      	strh	r3, [r4, #6]
 8015906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015908:	f9b4 1000 	ldrsh.w	r1, [r4]
 801590c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015910:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015914:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8015918:	88ed      	ldrh	r5, [r5, #6]
 801591a:	42b1      	cmp	r1, r6
 801591c:	460f      	mov	r7, r1
 801591e:	bfa8      	it	ge
 8015920:	4637      	movge	r7, r6
 8015922:	4293      	cmp	r3, r2
 8015924:	4618      	mov	r0, r3
 8015926:	4466      	add	r6, ip
 8015928:	bfa8      	it	ge
 801592a:	4610      	movge	r0, r2
 801592c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015930:	8027      	strh	r7, [r4, #0]
 8015932:	442a      	add	r2, r5
 8015934:	88e5      	ldrh	r5, [r4, #6]
 8015936:	8060      	strh	r0, [r4, #2]
 8015938:	4461      	add	r1, ip
 801593a:	442b      	add	r3, r5
 801593c:	b236      	sxth	r6, r6
 801593e:	b209      	sxth	r1, r1
 8015940:	b212      	sxth	r2, r2
 8015942:	b21b      	sxth	r3, r3
 8015944:	428e      	cmp	r6, r1
 8015946:	bfac      	ite	ge
 8015948:	ebc7 0106 	rsbge	r1, r7, r6
 801594c:	ebc7 0101 	rsblt	r1, r7, r1
 8015950:	429a      	cmp	r2, r3
 8015952:	bfac      	ite	ge
 8015954:	ebc0 0202 	rsbge	r2, r0, r2
 8015958:	ebc0 0203 	rsblt	r2, r0, r3
 801595c:	80a1      	strh	r1, [r4, #4]
 801595e:	80e2      	strh	r2, [r4, #6]
 8015960:	e7d1      	b.n	8015906 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08015964 <_ZN8touchgfx11Application11getInstanceEv>:
 8015964:	4b01      	ldr	r3, [pc, #4]	; (801596c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8015966:	6818      	ldr	r0, [r3, #0]
 8015968:	4770      	bx	lr
 801596a:	bf00      	nop
 801596c:	2002587c 	.word	0x2002587c

08015970 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8015970:	b510      	push	{r4, lr}
 8015972:	2300      	movs	r3, #0
 8015974:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8015978:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801597c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8015980:	4604      	mov	r4, r0
 8015982:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8015986:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801598a:	429a      	cmp	r2, r3
 801598c:	d90e      	bls.n	80159ac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801598e:	18e2      	adds	r2, r4, r3
 8015990:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8015994:	b122      	cbz	r2, 80159a0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8015996:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801599a:	6803      	ldr	r3, [r0, #0]
 801599c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801599e:	4798      	blx	r3
 80159a0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80159a4:	3301      	adds	r3, #1
 80159a6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80159aa:	e7ea      	b.n	8015982 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80159ac:	bd10      	pop	{r4, pc}

080159ae <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 80159ae:	b530      	push	{r4, r5, lr}
 80159b0:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 80159b4:	2200      	movs	r2, #0
 80159b6:	b293      	uxth	r3, r2
 80159b8:	429d      	cmp	r5, r3
 80159ba:	d90e      	bls.n	80159da <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80159bc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80159c0:	428b      	cmp	r3, r1
 80159c2:	d10b      	bne.n	80159dc <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80159c4:	1884      	adds	r4, r0, r2
 80159c6:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80159ca:	b13b      	cbz	r3, 80159dc <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80159cc:	3b01      	subs	r3, #1
 80159ce:	b2db      	uxtb	r3, r3
 80159d0:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 80159d4:	b90b      	cbnz	r3, 80159da <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80159d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80159da:	bd30      	pop	{r4, r5, pc}
 80159dc:	3201      	adds	r2, #1
 80159de:	e7ea      	b.n	80159b6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080159e0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80159e0:	2300      	movs	r3, #0
 80159e2:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 80159e6:	f100 0284 	add.w	r2, r0, #132	; 0x84
 80159ea:	30a4      	adds	r0, #164	; 0xa4
 80159ec:	f802 3b01 	strb.w	r3, [r2], #1
 80159f0:	4282      	cmp	r2, r0
 80159f2:	d1fb      	bne.n	80159ec <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80159f4:	4770      	bx	lr
	...

080159f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80159f8:	b570      	push	{r4, r5, r6, lr}
 80159fa:	4c0b      	ldr	r4, [pc, #44]	; (8015a28 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80159fc:	4605      	mov	r5, r0
 80159fe:	6820      	ldr	r0, [r4, #0]
 8015a00:	460e      	mov	r6, r1
 8015a02:	b110      	cbz	r0, 8015a0a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8015a04:	6803      	ldr	r3, [r0, #0]
 8015a06:	695b      	ldr	r3, [r3, #20]
 8015a08:	4798      	blx	r3
 8015a0a:	1d28      	adds	r0, r5, #4
 8015a0c:	f7ff ffe8 	bl	80159e0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015a10:	6026      	str	r6, [r4, #0]
 8015a12:	6833      	ldr	r3, [r6, #0]
 8015a14:	4630      	mov	r0, r6
 8015a16:	68db      	ldr	r3, [r3, #12]
 8015a18:	4798      	blx	r3
 8015a1a:	682b      	ldr	r3, [r5, #0]
 8015a1c:	4628      	mov	r0, r5
 8015a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a24:	4718      	bx	r3
 8015a26:	bf00      	nop
 8015a28:	2002586c 	.word	0x2002586c

08015a2c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8015a32:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8015a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a38:	461a      	mov	r2, r3
 8015a3a:	461c      	mov	r4, r3
 8015a3c:	461d      	mov	r5, r3
 8015a3e:	459c      	cmp	ip, r3
 8015a40:	dd1a      	ble.n	8015a78 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8015a42:	18c6      	adds	r6, r0, r3
 8015a44:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8015a48:	b16e      	cbz	r6, 8015a66 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d008      	beq.n	8015a60 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8015a4e:	fa1f fe82 	uxth.w	lr, r2
 8015a52:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8015a56:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8015a5a:	1887      	adds	r7, r0, r2
 8015a5c:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8015a60:	3201      	adds	r2, #1
 8015a62:	3301      	adds	r3, #1
 8015a64:	e7eb      	b.n	8015a3e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8015a66:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8015a6a:	4299      	cmp	r1, r3
 8015a6c:	bfa8      	it	ge
 8015a6e:	3501      	addge	r5, #1
 8015a70:	429e      	cmp	r6, r3
 8015a72:	bfc8      	it	gt
 8015a74:	3401      	addgt	r4, #1
 8015a76:	e7f4      	b.n	8015a62 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8015a78:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8015a7c:	1b49      	subs	r1, r1, r5
 8015a7e:	1b1b      	subs	r3, r3, r4
 8015a80:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8015a84:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8015a88:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	dd03      	ble.n	8015a98 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8015a90:	3b01      	subs	r3, #1
 8015a92:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8015a96:	e7f7      	b.n	8015a88 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8015a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015a9c <_ZN8touchgfx11Application15handleTickEventEv>:
 8015a9c:	b570      	push	{r4, r5, r6, lr}
 8015a9e:	4d16      	ldr	r5, [pc, #88]	; (8015af8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8015aa0:	4604      	mov	r4, r0
 8015aa2:	6828      	ldr	r0, [r5, #0]
 8015aa4:	b140      	cbz	r0, 8015ab8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015aa6:	7a03      	ldrb	r3, [r0, #8]
 8015aa8:	b933      	cbnz	r3, 8015ab8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015aaa:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8015aae:	6803      	ldr	r3, [r0, #0]
 8015ab0:	689b      	ldr	r3, [r3, #8]
 8015ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ab6:	4718      	bx	r3
 8015ab8:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8015abc:	4e0f      	ldr	r6, [pc, #60]	; (8015afc <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8015abe:	b973      	cbnz	r3, 8015ade <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015ac0:	b168      	cbz	r0, 8015ade <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015ac2:	7a03      	ldrb	r3, [r0, #8]
 8015ac4:	b15b      	cbz	r3, 8015ade <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015ac6:	6830      	ldr	r0, [r6, #0]
 8015ac8:	b110      	cbz	r0, 8015ad0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8015aca:	6803      	ldr	r3, [r0, #0]
 8015acc:	691b      	ldr	r3, [r3, #16]
 8015ace:	4798      	blx	r3
 8015ad0:	6828      	ldr	r0, [r5, #0]
 8015ad2:	6803      	ldr	r3, [r0, #0]
 8015ad4:	68db      	ldr	r3, [r3, #12]
 8015ad6:	4798      	blx	r3
 8015ad8:	2301      	movs	r3, #1
 8015ada:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8015ade:	3404      	adds	r4, #4
 8015ae0:	4620      	mov	r0, r4
 8015ae2:	f7ff ff45 	bl	8015970 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8015ae6:	4620      	mov	r0, r4
 8015ae8:	f7ff ffa0 	bl	8015a2c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8015aec:	6830      	ldr	r0, [r6, #0]
 8015aee:	b110      	cbz	r0, 8015af6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8015af0:	6803      	ldr	r3, [r0, #0]
 8015af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015af4:	e7dd      	b.n	8015ab2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8015af6:	bd70      	pop	{r4, r5, r6, pc}
 8015af8:	20025870 	.word	0x20025870
 8015afc:	2002586c 	.word	0x2002586c

08015b00 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8015b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b02:	2300      	movs	r3, #0
 8015b04:	4604      	mov	r4, r0
 8015b06:	460d      	mov	r5, r1
 8015b08:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	b29a      	uxth	r2, r3
 8015b10:	4291      	cmp	r1, r2
 8015b12:	d911      	bls.n	8015b38 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x38>
 8015b14:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8015b18:	18e6      	adds	r6, r4, r3
 8015b1a:	42af      	cmp	r7, r5
 8015b1c:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 8015b20:	d105      	bne.n	8015b2e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8015b22:	2aff      	cmp	r2, #255	; 0xff
 8015b24:	d002      	beq.n	8015b2c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8015b26:	3201      	adds	r2, #1
 8015b28:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 8015b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b2e:	2a00      	cmp	r2, #0
 8015b30:	bf08      	it	eq
 8015b32:	2001      	moveq	r0, #1
 8015b34:	3301      	adds	r3, #1
 8015b36:	e7ea      	b.n	8015b0e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8015b38:	b120      	cbz	r0, 8015b44 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8015b3a:	2920      	cmp	r1, #32
 8015b3c:	d102      	bne.n	8015b44 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8015b3e:	4620      	mov	r0, r4
 8015b40:	f7ff ff74 	bl	8015a2c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8015b44:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8015b48:	2b1f      	cmp	r3, #31
 8015b4a:	d8ef      	bhi.n	8015b2c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8015b4c:	18e2      	adds	r2, r4, r3
 8015b4e:	2101      	movs	r1, #1
 8015b50:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 8015b54:	185a      	adds	r2, r3, r1
 8015b56:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 8015b5a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8015b5e:	e7e5      	b.n	8015b2c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08015b60 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015b60:	4603      	mov	r3, r0
 8015b62:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8015b66:	2200      	movs	r2, #0
 8015b68:	801a      	strh	r2, [r3, #0]
 8015b6a:	805a      	strh	r2, [r3, #2]
 8015b6c:	809a      	strh	r2, [r3, #4]
 8015b6e:	80da      	strh	r2, [r3, #6]
 8015b70:	3308      	adds	r3, #8
 8015b72:	428b      	cmp	r3, r1
 8015b74:	d1f8      	bne.n	8015b68 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015b76:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8015b7a:	4770      	bx	lr

08015b7c <_ZN8touchgfx11ApplicationC1Ev>:
 8015b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b7e:	4606      	mov	r6, r0
 8015b80:	4b1c      	ldr	r3, [pc, #112]	; (8015bf4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8015b82:	f846 3b04 	str.w	r3, [r6], #4
 8015b86:	4604      	mov	r4, r0
 8015b88:	2500      	movs	r5, #0
 8015b8a:	22a8      	movs	r2, #168	; 0xa8
 8015b8c:	2100      	movs	r1, #0
 8015b8e:	4630      	mov	r0, r6
 8015b90:	f010 fe4b 	bl	802682a <memset>
 8015b94:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8015b98:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8015b9c:	f7ff ffe0 	bl	8015b60 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015ba0:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8015ba4:	f7ff ffdc 	bl	8015b60 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015ba8:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8015bac:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8015bb0:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8015bb4:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8015bb8:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8015bbc:	490e      	ldr	r1, [pc, #56]	; (8015bf8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8015bbe:	480f      	ldr	r0, [pc, #60]	; (8015bfc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8015bc0:	4f0f      	ldr	r7, [pc, #60]	; (8015c00 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8015bc2:	f010 faf5 	bl	80261b0 <CRC_Lock>
 8015bc6:	4b0f      	ldr	r3, [pc, #60]	; (8015c04 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8015bc8:	b158      	cbz	r0, 8015be2 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8015bca:	801d      	strh	r5, [r3, #0]
 8015bcc:	4a0e      	ldr	r2, [pc, #56]	; (8015c08 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8015bce:	2300      	movs	r3, #0
 8015bd0:	6013      	str	r3, [r2, #0]
 8015bd2:	4a0e      	ldr	r2, [pc, #56]	; (8015c0c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8015bd4:	603b      	str	r3, [r7, #0]
 8015bd6:	4630      	mov	r0, r6
 8015bd8:	6013      	str	r3, [r2, #0]
 8015bda:	f7ff ff01 	bl	80159e0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015bde:	4620      	mov	r0, r4
 8015be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015be6:	2002      	movs	r0, #2
 8015be8:	801a      	strh	r2, [r3, #0]
 8015bea:	6038      	str	r0, [r7, #0]
 8015bec:	f001 fa52 	bl	8017094 <_ZN8touchgfx6Screen4drawEv>
 8015bf0:	e7ec      	b.n	8015bcc <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8015bf2:	bf00      	nop
 8015bf4:	080295c8 	.word	0x080295c8
 8015bf8:	b5e8b5cd 	.word	0xb5e8b5cd
 8015bfc:	f407a5c2 	.word	0xf407a5c2
 8015c00:	2002586c 	.word	0x2002586c
 8015c04:	20000270 	.word	0x20000270
 8015c08:	2002587c 	.word	0x2002587c
 8015c0c:	20025870 	.word	0x20025870

08015c10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015c10:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8015c14:	3b01      	subs	r3, #1
 8015c16:	b29b      	uxth	r3, r3
 8015c18:	428b      	cmp	r3, r1
 8015c1a:	b510      	push	{r4, lr}
 8015c1c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8015c20:	d908      	bls.n	8015c34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8015c22:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015c26:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015c2a:	681a      	ldr	r2, [r3, #0]
 8015c2c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015c30:	685a      	ldr	r2, [r3, #4]
 8015c32:	6062      	str	r2, [r4, #4]
 8015c34:	bd10      	pop	{r4, pc}
	...

08015c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c3c:	4b8f      	ldr	r3, [pc, #572]	; (8015e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8015c3e:	b08f      	sub	sp, #60	; 0x3c
 8015c40:	ac0a      	add	r4, sp, #40	; 0x28
 8015c42:	e884 0006 	stmia.w	r4, {r1, r2}
 8015c46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c4a:	4b8d      	ldr	r3, [pc, #564]	; (8015e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8015c4c:	4683      	mov	fp, r0
 8015c4e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015c52:	4620      	mov	r0, r4
 8015c54:	f7ff fdca 	bl	80157ec <_ZN8touchgfx4Rect10restrictToEss>
 8015c58:	4620      	mov	r0, r4
 8015c5a:	f7fc fbdc 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	d16a      	bne.n	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015c62:	9403      	str	r4, [sp, #12]
 8015c64:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8015c68:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8015c6c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8015c70:	35a4      	adds	r5, #164	; 0xa4
 8015c72:	9301      	str	r3, [sp, #4]
 8015c74:	b15c      	cbz	r4, 8015c8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8015c76:	4629      	mov	r1, r5
 8015c78:	9803      	ldr	r0, [sp, #12]
 8015c7a:	f7ff fe07 	bl	801588c <_ZNK8touchgfx4Rect8includesERKS0_>
 8015c7e:	3c01      	subs	r4, #1
 8015c80:	b118      	cbz	r0, 8015c8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8015c82:	b2a1      	uxth	r1, r4
 8015c84:	9801      	ldr	r0, [sp, #4]
 8015c86:	f7ff ffc3 	bl	8015c10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015c8a:	3d08      	subs	r5, #8
 8015c8c:	e7f2      	b.n	8015c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8015c8e:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 8015c92:	f8cd a010 	str.w	sl, [sp, #16]
 8015c96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015c9a:	9302      	str	r3, [sp, #8]
 8015c9c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015ca0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8015ca4:	9306      	str	r3, [sp, #24]
 8015ca6:	445c      	add	r4, fp
 8015ca8:	2500      	movs	r5, #0
 8015caa:	4626      	mov	r6, r4
 8015cac:	f8cd a014 	str.w	sl, [sp, #20]
 8015cb0:	462f      	mov	r7, r5
 8015cb2:	9b05      	ldr	r3, [sp, #20]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d073      	beq.n	8015da0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015cb8:	9903      	ldr	r1, [sp, #12]
 8015cba:	4630      	mov	r0, r6
 8015cbc:	f7ff fd74 	bl	80157a8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015cc0:	b350      	cbz	r0, 8015d18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015cc2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8015cc6:	f9b6 c000 	ldrsh.w	ip, [r6]
 8015cca:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8015cce:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8015cd2:	45e6      	cmp	lr, ip
 8015cd4:	db33      	blt.n	8015d3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015cd6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015cda:	88b3      	ldrh	r3, [r6, #4]
 8015cdc:	4472      	add	r2, lr
 8015cde:	4463      	add	r3, ip
 8015ce0:	b212      	sxth	r2, r2
 8015ce2:	b21b      	sxth	r3, r3
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	dc2a      	bgt.n	8015d3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015ce8:	88f3      	ldrh	r3, [r6, #6]
 8015cea:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015cee:	fa1f f289 	uxth.w	r2, r9
 8015cf2:	4413      	add	r3, r2
 8015cf4:	b29b      	uxth	r3, r3
 8015cf6:	45c8      	cmp	r8, r9
 8015cf8:	fa1f fc88 	uxth.w	ip, r8
 8015cfc:	fa0f fe83 	sxth.w	lr, r3
 8015d00:	db0f      	blt.n	8015d22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015d02:	eba3 030c 	sub.w	r3, r3, ip
 8015d06:	1ac9      	subs	r1, r1, r3
 8015d08:	b209      	sxth	r1, r1
 8015d0a:	2900      	cmp	r1, #0
 8015d0c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015d10:	dd12      	ble.n	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015d12:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8015d16:	4605      	mov	r5, r0
 8015d18:	9b05      	ldr	r3, [sp, #20]
 8015d1a:	3b01      	subs	r3, #1
 8015d1c:	9305      	str	r3, [sp, #20]
 8015d1e:	3e08      	subs	r6, #8
 8015d20:	e7c7      	b.n	8015cb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8015d22:	4461      	add	r1, ip
 8015d24:	b209      	sxth	r1, r1
 8015d26:	4571      	cmp	r1, lr
 8015d28:	dc38      	bgt.n	8015d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015d2a:	eba2 020c 	sub.w	r2, r2, ip
 8015d2e:	b212      	sxth	r2, r2
 8015d30:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8015d34:	2a00      	cmp	r2, #0
 8015d36:	dcee      	bgt.n	8015d16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015d38:	b00f      	add	sp, #60	; 0x3c
 8015d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d3e:	45c8      	cmp	r8, r9
 8015d40:	db2c      	blt.n	8015d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015d42:	88f3      	ldrh	r3, [r6, #6]
 8015d44:	4499      	add	r9, r3
 8015d46:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015d4a:	4498      	add	r8, r3
 8015d4c:	fa0f f989 	sxth.w	r9, r9
 8015d50:	fa0f f888 	sxth.w	r8, r8
 8015d54:	45c1      	cmp	r9, r8
 8015d56:	db21      	blt.n	8015d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015d58:	88b3      	ldrh	r3, [r6, #4]
 8015d5a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015d5e:	fa1f f28c 	uxth.w	r2, ip
 8015d62:	4413      	add	r3, r2
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	45e6      	cmp	lr, ip
 8015d68:	fa1f f88e 	uxth.w	r8, lr
 8015d6c:	fa0f f983 	sxth.w	r9, r3
 8015d70:	db0a      	blt.n	8015d88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8015d72:	eba3 0308 	sub.w	r3, r3, r8
 8015d76:	1ac9      	subs	r1, r1, r3
 8015d78:	b209      	sxth	r1, r1
 8015d7a:	2900      	cmp	r1, #0
 8015d7c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8015d80:	ddda      	ble.n	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015d82:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8015d86:	e7c6      	b.n	8015d16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015d88:	4441      	add	r1, r8
 8015d8a:	b209      	sxth	r1, r1
 8015d8c:	4549      	cmp	r1, r9
 8015d8e:	dc05      	bgt.n	8015d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015d90:	eba2 0208 	sub.w	r2, r2, r8
 8015d94:	b212      	sxth	r2, r2
 8015d96:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015d9a:	e7cb      	b.n	8015d34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8015d9c:	4607      	mov	r7, r0
 8015d9e:	e7bb      	b.n	8015d18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015da0:	2d00      	cmp	r5, #0
 8015da2:	d181      	bne.n	8015ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8015da4:	2f00      	cmp	r7, #0
 8015da6:	f000 81dd 	beq.w	8016164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015daa:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8015dae:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8015db2:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8015db6:	b2b3      	uxth	r3, r6
 8015db8:	9305      	str	r3, [sp, #20]
 8015dba:	9a05      	ldr	r2, [sp, #20]
 8015dbc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8015dc0:	4413      	add	r3, r2
 8015dc2:	b2ba      	uxth	r2, r7
 8015dc4:	4492      	add	sl, r2
 8015dc6:	b29b      	uxth	r3, r3
 8015dc8:	fa1f fa8a 	uxth.w	sl, sl
 8015dcc:	fa0f f883 	sxth.w	r8, r3
 8015dd0:	fa0f f98a 	sxth.w	r9, sl
 8015dd4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015dd8:	9b04      	ldr	r3, [sp, #16]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d052      	beq.n	8015e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8015dde:	9903      	ldr	r1, [sp, #12]
 8015de0:	4620      	mov	r0, r4
 8015de2:	f7ff fce1 	bl	80157a8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015de6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015dea:	b1c0      	cbz	r0, 8015e1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015dec:	f9b4 e000 	ldrsh.w	lr, [r4]
 8015df0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015df4:	4576      	cmp	r6, lr
 8015df6:	dc22      	bgt.n	8015e3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015df8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015dfc:	44f4      	add	ip, lr
 8015dfe:	fa0f fc8c 	sxth.w	ip, ip
 8015e02:	45e0      	cmp	r8, ip
 8015e04:	db1b      	blt.n	8015e3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015e06:	428f      	cmp	r7, r1
 8015e08:	fa1f fc81 	uxth.w	ip, r1
 8015e0c:	88e1      	ldrh	r1, [r4, #6]
 8015e0e:	dc0d      	bgt.n	8015e2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8015e10:	ebaa 0c0c 	sub.w	ip, sl, ip
 8015e14:	eba1 010c 	sub.w	r1, r1, ip
 8015e18:	f8a4 9002 	strh.w	r9, [r4, #2]
 8015e1c:	80e1      	strh	r1, [r4, #6]
 8015e1e:	4628      	mov	r0, r5
 8015e20:	9904      	ldr	r1, [sp, #16]
 8015e22:	3901      	subs	r1, #1
 8015e24:	9104      	str	r1, [sp, #16]
 8015e26:	3c08      	subs	r4, #8
 8015e28:	4605      	mov	r5, r0
 8015e2a:	e7d3      	b.n	8015dd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8015e2c:	4461      	add	r1, ip
 8015e2e:	b209      	sxth	r1, r1
 8015e30:	4549      	cmp	r1, r9
 8015e32:	dcf5      	bgt.n	8015e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015e34:	eba2 0c0c 	sub.w	ip, r2, ip
 8015e38:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015e3c:	e7ef      	b.n	8015e1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015e3e:	428f      	cmp	r7, r1
 8015e40:	dcee      	bgt.n	8015e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015e42:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8015e46:	4461      	add	r1, ip
 8015e48:	b209      	sxth	r1, r1
 8015e4a:	4589      	cmp	r9, r1
 8015e4c:	dbe8      	blt.n	8015e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015e4e:	4576      	cmp	r6, lr
 8015e50:	fa1f fc8e 	uxth.w	ip, lr
 8015e54:	88a1      	ldrh	r1, [r4, #4]
 8015e56:	dc07      	bgt.n	8015e68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8015e58:	eba3 0c0c 	sub.w	ip, r3, ip
 8015e5c:	eba1 010c 	sub.w	r1, r1, ip
 8015e60:	f8a4 8000 	strh.w	r8, [r4]
 8015e64:	80a1      	strh	r1, [r4, #4]
 8015e66:	e7da      	b.n	8015e1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015e68:	4461      	add	r1, ip
 8015e6a:	b209      	sxth	r1, r1
 8015e6c:	4588      	cmp	r8, r1
 8015e6e:	dbd7      	blt.n	8015e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015e70:	9905      	ldr	r1, [sp, #20]
 8015e72:	eba1 0c0c 	sub.w	ip, r1, ip
 8015e76:	f8a4 c004 	strh.w	ip, [r4, #4]
 8015e7a:	e7d0      	b.n	8015e1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015e7c:	20025826 	.word	0x20025826
 8015e80:	20025824 	.word	0x20025824
 8015e84:	2d00      	cmp	r5, #0
 8015e86:	f000 816d 	beq.w	8016164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015e8a:	9b06      	ldr	r3, [sp, #24]
 8015e8c:	445b      	add	r3, fp
 8015e8e:	461c      	mov	r4, r3
 8015e90:	9b02      	ldr	r3, [sp, #8]
 8015e92:	3301      	adds	r3, #1
 8015e94:	f000 8166 	beq.w	8016164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015e98:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8015e9c:	4629      	mov	r1, r5
 8015e9e:	9803      	ldr	r0, [sp, #12]
 8015ea0:	f7ff fcf4 	bl	801588c <_ZNK8touchgfx4Rect8includesERKS0_>
 8015ea4:	b120      	cbz	r0, 8015eb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8015ea6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8015eaa:	9801      	ldr	r0, [sp, #4]
 8015eac:	f7ff feb0 	bl	8015c10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015eb0:	9903      	ldr	r1, [sp, #12]
 8015eb2:	4628      	mov	r0, r5
 8015eb4:	f7ff fc78 	bl	80157a8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	f000 809c 	beq.w	8015ff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8015ebe:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8015ec2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8015ec6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8015eca:	9309      	str	r3, [sp, #36]	; 0x24
 8015ecc:	fa1f f189 	uxth.w	r1, r9
 8015ed0:	eb01 0c03 	add.w	ip, r1, r3
 8015ed4:	fa1f fa8c 	uxth.w	sl, ip
 8015ed8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8015edc:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8015ee0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8015ee4:	b283      	uxth	r3, r0
 8015ee6:	eb03 050c 	add.w	r5, r3, ip
 8015eea:	b2ad      	uxth	r5, r5
 8015eec:	9505      	str	r5, [sp, #20]
 8015eee:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8015ef2:	9504      	str	r5, [sp, #16]
 8015ef4:	4548      	cmp	r0, r9
 8015ef6:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8015efa:	f340 8099 	ble.w	8016030 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8015efe:	1a5b      	subs	r3, r3, r1
 8015f00:	b29b      	uxth	r3, r3
 8015f02:	4596      	cmp	lr, r2
 8015f04:	fa0f f08a 	sxth.w	r0, sl
 8015f08:	b21e      	sxth	r6, r3
 8015f0a:	dd2e      	ble.n	8015f6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8015f0c:	9f02      	ldr	r7, [sp, #8]
 8015f0e:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8015f12:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8015f16:	9f04      	ldr	r7, [sp, #16]
 8015f18:	1a3f      	subs	r7, r7, r0
 8015f1a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8015f1e:	fa1f fe8e 	uxth.w	lr, lr
 8015f22:	b292      	uxth	r2, r2
 8015f24:	ebae 0102 	sub.w	r1, lr, r2
 8015f28:	44a6      	add	lr, r4
 8015f2a:	4402      	add	r2, r0
 8015f2c:	b289      	uxth	r1, r1
 8015f2e:	fa0f fe8e 	sxth.w	lr, lr
 8015f32:	b212      	sxth	r2, r2
 8015f34:	b20d      	sxth	r5, r1
 8015f36:	ebae 0202 	sub.w	r2, lr, r2
 8015f3a:	436f      	muls	r7, r5
 8015f3c:	4372      	muls	r2, r6
 8015f3e:	4297      	cmp	r7, r2
 8015f40:	db09      	blt.n	8015f56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8015f42:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8015f46:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8015f4a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015f4e:	449c      	add	ip, r3
 8015f50:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015f54:	e686      	b.n	8015c64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015f56:	4421      	add	r1, r4
 8015f58:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8015f5c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8015f60:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015f64:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015f68:	e67c      	b.n	8015c64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015f6a:	9f04      	ldr	r7, [sp, #16]
 8015f6c:	42b8      	cmp	r0, r7
 8015f6e:	da27      	bge.n	8015fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8015f70:	9902      	ldr	r1, [sp, #8]
 8015f72:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8015f76:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8015f7a:	eb05 010e 	add.w	r1, r5, lr
 8015f7e:	fa1f f881 	uxth.w	r8, r1
 8015f82:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8015f86:	4411      	add	r1, r2
 8015f88:	eba1 0108 	sub.w	r1, r1, r8
 8015f8c:	b289      	uxth	r1, r1
 8015f8e:	fa0f f988 	sxth.w	r9, r8
 8015f92:	eba2 020e 	sub.w	r2, r2, lr
 8015f96:	fa0f f881 	sxth.w	r8, r1
 8015f9a:	1a3f      	subs	r7, r7, r0
 8015f9c:	4372      	muls	r2, r6
 8015f9e:	fb08 f707 	mul.w	r7, r8, r7
 8015fa2:	42ba      	cmp	r2, r7
 8015fa4:	dc06      	bgt.n	8015fb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8015fa6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8015faa:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8015fae:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8015fb2:	e7ca      	b.n	8015f4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8015fb4:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8015fb8:	4429      	add	r1, r5
 8015fba:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015fbe:	e651      	b.n	8015c64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015fc0:	9805      	ldr	r0, [sp, #20]
 8015fc2:	ebaa 0000 	sub.w	r0, sl, r0
 8015fc6:	b280      	uxth	r0, r0
 8015fc8:	2d06      	cmp	r5, #6
 8015fca:	fa0f fe80 	sxth.w	lr, r0
 8015fce:	d817      	bhi.n	8016000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8015fd0:	9b04      	ldr	r3, [sp, #16]
 8015fd2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8015fd6:	1c6b      	adds	r3, r5, #1
 8015fd8:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8015fdc:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8015fe0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8015fe4:	9b01      	ldr	r3, [sp, #4]
 8015fe6:	9801      	ldr	r0, [sp, #4]
 8015fe8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015fec:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8015ff0:	805a      	strh	r2, [r3, #2]
 8015ff2:	809e      	strh	r6, [r3, #4]
 8015ff4:	80d9      	strh	r1, [r3, #6]
 8015ff6:	9b02      	ldr	r3, [sp, #8]
 8015ff8:	3b01      	subs	r3, #1
 8015ffa:	9302      	str	r3, [sp, #8]
 8015ffc:	3c08      	subs	r4, #8
 8015ffe:	e747      	b.n	8015e90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016000:	9a02      	ldr	r2, [sp, #8]
 8016002:	45b6      	cmp	lr, r6
 8016004:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016008:	db0d      	blt.n	8016026 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801600a:	449c      	add	ip, r3
 801600c:	fa1f fc8c 	uxth.w	ip, ip
 8016010:	445a      	add	r2, fp
 8016012:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016016:	448c      	add	ip, r1
 8016018:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801601c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8016020:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8016024:	e61e      	b.n	8015c64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016026:	445a      	add	r2, fp
 8016028:	4484      	add	ip, r0
 801602a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801602e:	e78f      	b.n	8015f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016030:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8016034:	fa1f f18e 	uxth.w	r1, lr
 8016038:	eb01 0806 	add.w	r8, r1, r6
 801603c:	b293      	uxth	r3, r2
 801603e:	fa1f f888 	uxth.w	r8, r8
 8016042:	9306      	str	r3, [sp, #24]
 8016044:	fa0f f388 	sxth.w	r3, r8
 8016048:	9307      	str	r3, [sp, #28]
 801604a:	9f06      	ldr	r7, [sp, #24]
 801604c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8016050:	443b      	add	r3, r7
 8016052:	b29b      	uxth	r3, r3
 8016054:	4596      	cmp	lr, r2
 8016056:	9308      	str	r3, [sp, #32]
 8016058:	da24      	bge.n	80160a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801605a:	9905      	ldr	r1, [sp, #20]
 801605c:	eba3 0308 	sub.w	r3, r3, r8
 8016060:	ebaa 0401 	sub.w	r4, sl, r1
 8016064:	b2a4      	uxth	r4, r4
 8016066:	b29b      	uxth	r3, r3
 8016068:	b225      	sxth	r5, r4
 801606a:	b219      	sxth	r1, r3
 801606c:	eba2 020e 	sub.w	r2, r2, lr
 8016070:	eba9 0000 	sub.w	r0, r9, r0
 8016074:	436a      	muls	r2, r5
 8016076:	4348      	muls	r0, r1
 8016078:	4282      	cmp	r2, r0
 801607a:	9a02      	ldr	r2, [sp, #8]
 801607c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016080:	445a      	add	r2, fp
 8016082:	dc06      	bgt.n	8016092 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8016084:	9b07      	ldr	r3, [sp, #28]
 8016086:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801608a:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801608e:	44a4      	add	ip, r4
 8016090:	e75e      	b.n	8015f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016092:	9904      	ldr	r1, [sp, #16]
 8016094:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8016098:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801609c:	4433      	add	r3, r6
 801609e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80160a2:	e5df      	b.n	8015c64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80160a4:	9f06      	ldr	r7, [sp, #24]
 80160a6:	9b04      	ldr	r3, [sp, #16]
 80160a8:	1bc9      	subs	r1, r1, r7
 80160aa:	fa0f f78a 	sxth.w	r7, sl
 80160ae:	b289      	uxth	r1, r1
 80160b0:	429f      	cmp	r7, r3
 80160b2:	fa0f fe81 	sxth.w	lr, r1
 80160b6:	dd23      	ble.n	8016100 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80160b8:	9a05      	ldr	r2, [sp, #20]
 80160ba:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80160be:	9d07      	ldr	r5, [sp, #28]
 80160c0:	ebaa 0202 	sub.w	r2, sl, r2
 80160c4:	b292      	uxth	r2, r2
 80160c6:	eba5 0a03 	sub.w	sl, r5, r3
 80160ca:	b214      	sxth	r4, r2
 80160cc:	eba9 0000 	sub.w	r0, r9, r0
 80160d0:	9b02      	ldr	r3, [sp, #8]
 80160d2:	fb0e f000 	mul.w	r0, lr, r0
 80160d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80160da:	00db      	lsls	r3, r3, #3
 80160dc:	4550      	cmp	r0, sl
 80160de:	445b      	add	r3, fp
 80160e0:	db03      	blt.n	80160ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80160e2:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 80160e6:	4494      	add	ip, r2
 80160e8:	e732      	b.n	8015f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80160ea:	9a04      	ldr	r2, [sp, #16]
 80160ec:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80160f0:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 80160f4:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80160f8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80160fc:	4431      	add	r1, r6
 80160fe:	e75c      	b.n	8015fba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016100:	9b08      	ldr	r3, [sp, #32]
 8016102:	eba3 0308 	sub.w	r3, r3, r8
 8016106:	b29b      	uxth	r3, r3
 8016108:	2d06      	cmp	r5, #6
 801610a:	b218      	sxth	r0, r3
 801610c:	d813      	bhi.n	8016136 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801610e:	9b07      	ldr	r3, [sp, #28]
 8016110:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8016114:	1c6b      	adds	r3, r5, #1
 8016116:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801611a:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801611e:	9b01      	ldr	r3, [sp, #4]
 8016120:	9901      	ldr	r1, [sp, #4]
 8016122:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016126:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801612a:	805a      	strh	r2, [r3, #2]
 801612c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801612e:	809a      	strh	r2, [r3, #4]
 8016130:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016134:	e75f      	b.n	8015ff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016136:	9c02      	ldr	r4, [sp, #8]
 8016138:	4570      	cmp	r0, lr
 801613a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801613e:	db0d      	blt.n	801615c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8016140:	4431      	add	r1, r6
 8016142:	9b06      	ldr	r3, [sp, #24]
 8016144:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8016148:	b289      	uxth	r1, r1
 801614a:	445c      	add	r4, fp
 801614c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016150:	4419      	add	r1, r3
 8016152:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8016156:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801615a:	e583      	b.n	8015c64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801615c:	445c      	add	r4, fp
 801615e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8016162:	e79b      	b.n	801609c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016164:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8016168:	1e65      	subs	r5, r4, #1
 801616a:	b2ad      	uxth	r5, r5
 801616c:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8016170:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016174:	42b5      	cmp	r5, r6
 8016176:	d044      	beq.n	8016202 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8016178:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801617c:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 8016180:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8016184:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 8016188:	4282      	cmp	r2, r0
 801618a:	d11f      	bne.n	80161cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801618c:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8016190:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8016194:	459c      	cmp	ip, r3
 8016196:	d119      	bne.n	80161cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016198:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 801619c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80161a0:	19d8      	adds	r0, r3, r7
 80161a2:	b200      	sxth	r0, r0
 80161a4:	4288      	cmp	r0, r1
 80161a6:	d109      	bne.n	80161bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80161a8:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 80161ac:	4413      	add	r3, r2
 80161ae:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80161b2:	4629      	mov	r1, r5
 80161b4:	9801      	ldr	r0, [sp, #4]
 80161b6:	f7ff fd2b 	bl	8015c10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80161ba:	e003      	b.n	80161c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80161bc:	4411      	add	r1, r2
 80161be:	b209      	sxth	r1, r1
 80161c0:	42b9      	cmp	r1, r7
 80161c2:	d0f3      	beq.n	80161ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80161c4:	3d01      	subs	r5, #1
 80161c6:	b2ad      	uxth	r5, r5
 80161c8:	3c08      	subs	r4, #8
 80161ca:	e7d3      	b.n	8016174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80161cc:	42b9      	cmp	r1, r7
 80161ce:	d1f9      	bne.n	80161c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80161d0:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 80161d4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80161d8:	4299      	cmp	r1, r3
 80161da:	d1f3      	bne.n	80161c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80161dc:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80161e0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80161e4:	181f      	adds	r7, r3, r0
 80161e6:	b23f      	sxth	r7, r7
 80161e8:	42ba      	cmp	r2, r7
 80161ea:	d105      	bne.n	80161f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 80161ec:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 80161f0:	440b      	add	r3, r1
 80161f2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80161f6:	e7dc      	b.n	80161b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80161f8:	440a      	add	r2, r1
 80161fa:	b212      	sxth	r2, r2
 80161fc:	4290      	cmp	r0, r2
 80161fe:	d1e1      	bne.n	80161c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016200:	e7f6      	b.n	80161f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8016202:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8016206:	2e07      	cmp	r6, #7
 8016208:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801620c:	d812      	bhi.n	8016234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801620e:	1c75      	adds	r5, r6, #1
 8016210:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8016214:	9d01      	ldr	r5, [sp, #4]
 8016216:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801621a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801621e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8016222:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8016226:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801622a:	442c      	add	r4, r5
 801622c:	8061      	strh	r1, [r4, #2]
 801622e:	80a2      	strh	r2, [r4, #4]
 8016230:	80e3      	strh	r3, [r4, #6]
 8016232:	e581      	b.n	8015d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016234:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8016238:	3e01      	subs	r6, #1
 801623a:	445c      	add	r4, fp
 801623c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8016240:	f04f 37ff 	mov.w	r7, #4294967295
 8016244:	2500      	movs	r5, #0
 8016246:	9305      	str	r3, [sp, #20]
 8016248:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801624c:	9302      	str	r3, [sp, #8]
 801624e:	1e72      	subs	r2, r6, #1
 8016250:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8016254:	9304      	str	r3, [sp, #16]
 8016256:	4691      	mov	r9, r2
 8016258:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801625c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016260:	bf14      	ite	ne
 8016262:	9905      	ldrne	r1, [sp, #20]
 8016264:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016268:	6818      	ldr	r0, [r3, #0]
 801626a:	9207      	str	r2, [sp, #28]
 801626c:	bf18      	it	ne
 801626e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016272:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016276:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801627a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801627e:	9306      	str	r3, [sp, #24]
 8016280:	fb18 f801 	smulbb	r8, r8, r1
 8016284:	6859      	ldr	r1, [r3, #4]
 8016286:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801628a:	4671      	mov	r1, lr
 801628c:	a80c      	add	r0, sp, #48	; 0x30
 801628e:	f7ff fb23 	bl	80158d8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016292:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016296:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801629a:	9b04      	ldr	r3, [sp, #16]
 801629c:	9a02      	ldr	r2, [sp, #8]
 801629e:	fb10 f001 	smulbb	r0, r0, r1
 80162a2:	fb02 8803 	mla	r8, r2, r3, r8
 80162a6:	eba0 0108 	sub.w	r1, r0, r8
 80162aa:	f04f 0c08 	mov.w	ip, #8
 80162ae:	fb90 f0fc 	sdiv	r0, r0, ip
 80162b2:	4288      	cmp	r0, r1
 80162b4:	dc20      	bgt.n	80162f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 80162b6:	4551      	cmp	r1, sl
 80162b8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80162bc:	da03      	bge.n	80162c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 80162be:	b1d9      	cbz	r1, 80162f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 80162c0:	468a      	mov	sl, r1
 80162c2:	464f      	mov	r7, r9
 80162c4:	4635      	mov	r5, r6
 80162c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80162ca:	f119 0f02 	cmn.w	r9, #2
 80162ce:	d1c5      	bne.n	801625c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80162d0:	4616      	mov	r6, r2
 80162d2:	3201      	adds	r2, #1
 80162d4:	f1a4 0408 	sub.w	r4, r4, #8
 80162d8:	d1b6      	bne.n	8016248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80162da:	9b01      	ldr	r3, [sp, #4]
 80162dc:	b2ac      	uxth	r4, r5
 80162de:	00ed      	lsls	r5, r5, #3
 80162e0:	1958      	adds	r0, r3, r5
 80162e2:	1c7b      	adds	r3, r7, #1
 80162e4:	d10b      	bne.n	80162fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 80162e6:	4601      	mov	r1, r0
 80162e8:	9803      	ldr	r0, [sp, #12]
 80162ea:	f7ff faf5 	bl	80158d8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80162ee:	4621      	mov	r1, r4
 80162f0:	9801      	ldr	r0, [sp, #4]
 80162f2:	f7ff fc8d 	bl	8015c10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80162f6:	e4b5      	b.n	8015c64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80162f8:	464f      	mov	r7, r9
 80162fa:	4635      	mov	r5, r6
 80162fc:	e7ed      	b.n	80162da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 80162fe:	9b01      	ldr	r3, [sp, #4]
 8016300:	00ff      	lsls	r7, r7, #3
 8016302:	19d9      	adds	r1, r3, r7
 8016304:	f7ff fae8 	bl	80158d8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016308:	9b03      	ldr	r3, [sp, #12]
 801630a:	cb03      	ldmia	r3!, {r0, r1}
 801630c:	445f      	add	r7, fp
 801630e:	445d      	add	r5, fp
 8016310:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8016314:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8016318:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801631c:	9b03      	ldr	r3, [sp, #12]
 801631e:	6869      	ldr	r1, [r5, #4]
 8016320:	c303      	stmia	r3!, {r0, r1}
 8016322:	e7e4      	b.n	80162ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

08016324 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016328:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801632c:	b09b      	sub	sp, #108	; 0x6c
 801632e:	4604      	mov	r4, r0
 8016330:	4630      	mov	r0, r6
 8016332:	f7fc f870 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016336:	4605      	mov	r5, r0
 8016338:	b948      	cbnz	r0, 801634e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801633a:	6823      	ldr	r3, [r4, #0]
 801633c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016342:	4620      	mov	r0, r4
 8016344:	4798      	blx	r3
 8016346:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801634a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801634e:	4bc6      	ldr	r3, [pc, #792]	; (8016668 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d03f      	beq.n	80163d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8016356:	4dc5      	ldr	r5, [pc, #788]	; (801666c <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8016358:	4628      	mov	r0, r5
 801635a:	f7fc f85c 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 801635e:	4606      	mov	r6, r0
 8016360:	2800      	cmp	r0, #0
 8016362:	d138      	bne.n	80163d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8016364:	4628      	mov	r0, r5
 8016366:	f7ff f955 	bl	8015614 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801636a:	6823      	ldr	r3, [r4, #0]
 801636c:	6829      	ldr	r1, [r5, #0]
 801636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016370:	686a      	ldr	r2, [r5, #4]
 8016372:	4620      	mov	r0, r4
 8016374:	4798      	blx	r3
 8016376:	802e      	strh	r6, [r5, #0]
 8016378:	806e      	strh	r6, [r5, #2]
 801637a:	80ae      	strh	r6, [r5, #4]
 801637c:	80ee      	strh	r6, [r5, #6]
 801637e:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8016382:	4dbb      	ldr	r5, [pc, #748]	; (8016670 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8016384:	4640      	mov	r0, r8
 8016386:	f7ff fbeb 	bl	8015b60 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801638a:	882e      	ldrh	r6, [r5, #0]
 801638c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016390:	4633      	mov	r3, r6
 8016392:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8016396:	42bb      	cmp	r3, r7
 8016398:	d224      	bcs.n	80163e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801639a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801639e:	2907      	cmp	r1, #7
 80163a0:	d816      	bhi.n	80163d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80163a2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80163a6:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80163aa:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80163ae:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80163b2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80163b6:	1c4a      	adds	r2, r1, #1
 80163b8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80163bc:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80163c0:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80163c4:	f8a2 a002 	strh.w	sl, [r2, #2]
 80163c8:	f8a2 e004 	strh.w	lr, [r2, #4]
 80163cc:	f8a2 c006 	strh.w	ip, [r2, #6]
 80163d0:	3301      	adds	r3, #1
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	e7df      	b.n	8016396 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80163d6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d1cf      	bne.n	801637e <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80163de:	b01b      	add	sp, #108	; 0x6c
 80163e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163e4:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 80163e8:	42b3      	cmp	r3, r6
 80163ea:	d90c      	bls.n	8016406 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 80163ec:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80163f0:	6822      	ldr	r2, [r4, #0]
 80163f2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80163f6:	6c17      	ldr	r7, [r2, #64]	; 0x40
 80163f8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80163fc:	4620      	mov	r0, r4
 80163fe:	3601      	adds	r6, #1
 8016400:	47b8      	blx	r7
 8016402:	b2b6      	uxth	r6, r6
 8016404:	e7ee      	b.n	80163e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8016406:	4a9b      	ldr	r2, [pc, #620]	; (8016674 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016408:	6813      	ldr	r3, [r2, #0]
 801640a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801640e:	2b01      	cmp	r3, #1
 8016410:	4691      	mov	r9, r2
 8016412:	f040 80e2 	bne.w	80165da <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8016416:	8829      	ldrh	r1, [r5, #0]
 8016418:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801641c:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8016420:	33ae      	adds	r3, #174	; 0xae
 8016422:	2600      	movs	r6, #0
 8016424:	428f      	cmp	r7, r1
 8016426:	f103 0308 	add.w	r3, r3, #8
 801642a:	dd0a      	ble.n	8016442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801642c:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8016430:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8016434:	4402      	add	r2, r0
 8016436:	b212      	sxth	r2, r2
 8016438:	4296      	cmp	r6, r2
 801643a:	bfb8      	it	lt
 801643c:	4616      	movlt	r6, r2
 801643e:	3101      	adds	r1, #1
 8016440:	e7f0      	b.n	8016424 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8016442:	4b8d      	ldr	r3, [pc, #564]	; (8016678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016444:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8016674 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 8016448:	881b      	ldrh	r3, [r3, #0]
 801644a:	2b0f      	cmp	r3, #15
 801644c:	bf88      	it	hi
 801644e:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8016452:	f04f 0300 	mov.w	r3, #0
 8016456:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801645a:	bf98      	it	ls
 801645c:	f04f 0b01 	movls.w	fp, #1
 8016460:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8016464:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8016468:	4b82      	ldr	r3, [pc, #520]	; (8016674 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801646a:	4438      	add	r0, r7
 801646c:	b207      	sxth	r7, r0
 801646e:	6818      	ldr	r0, [r3, #0]
 8016470:	42b7      	cmp	r7, r6
 8016472:	6803      	ldr	r3, [r0, #0]
 8016474:	f280 8083 	bge.w	801657e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801647c:	4798      	blx	r3
 801647e:	eb07 030b 	add.w	r3, r7, fp
 8016482:	4298      	cmp	r0, r3
 8016484:	da07      	bge.n	8016496 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 8016486:	42b0      	cmp	r0, r6
 8016488:	da05      	bge.n	8016496 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801648a:	4287      	cmp	r7, r0
 801648c:	dd6c      	ble.n	8016568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801648e:	2f00      	cmp	r7, #0
 8016490:	dd6a      	ble.n	8016568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8016492:	4630      	mov	r0, r6
 8016494:	e004      	b.n	80164a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8016496:	4287      	cmp	r7, r0
 8016498:	dcfb      	bgt.n	8016492 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801649a:	42b0      	cmp	r0, r6
 801649c:	bfa8      	it	ge
 801649e:	4630      	movge	r0, r6
 80164a0:	4b76      	ldr	r3, [pc, #472]	; (801667c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80164a2:	f8ad 7016 	strh.w	r7, [sp, #22]
 80164a6:	1bc0      	subs	r0, r0, r7
 80164a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ac:	882f      	ldrh	r7, [r5, #0]
 80164ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164b2:	2200      	movs	r2, #0
 80164b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80164b8:	f8ad 001a 	strh.w	r0, [sp, #26]
 80164bc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80164c0:	42bb      	cmp	r3, r7
 80164c2:	d9cd      	bls.n	8016460 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 80164c4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80164c8:	ab07      	add	r3, sp, #28
 80164ca:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80164ce:	6851      	ldr	r1, [r2, #4]
 80164d0:	c303      	stmia	r3!, {r0, r1}
 80164d2:	a905      	add	r1, sp, #20
 80164d4:	a807      	add	r0, sp, #28
 80164d6:	f7ff f967 	bl	80157a8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80164da:	2800      	cmp	r0, #0
 80164dc:	d04c      	beq.n	8016578 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 80164de:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80164e2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80164e6:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80164ea:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80164ee:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80164f2:	9302      	str	r3, [sp, #8]
 80164f4:	4686      	mov	lr, r0
 80164f6:	4290      	cmp	r0, r2
 80164f8:	4450      	add	r0, sl
 80164fa:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80164fe:	bfb8      	it	lt
 8016500:	4696      	movlt	lr, r2
 8016502:	4452      	add	r2, sl
 8016504:	4299      	cmp	r1, r3
 8016506:	b280      	uxth	r0, r0
 8016508:	b292      	uxth	r2, r2
 801650a:	468c      	mov	ip, r1
 801650c:	fa0f fa82 	sxth.w	sl, r2
 8016510:	bfb8      	it	lt
 8016512:	469c      	movlt	ip, r3
 8016514:	b203      	sxth	r3, r0
 8016516:	4553      	cmp	r3, sl
 8016518:	bfb8      	it	lt
 801651a:	4602      	movlt	r2, r0
 801651c:	eba2 020e 	sub.w	r2, r2, lr
 8016520:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016524:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8016528:	9b02      	ldr	r3, [sp, #8]
 801652a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801652e:	4411      	add	r1, r2
 8016530:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016534:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016538:	4413      	add	r3, r2
 801653a:	b289      	uxth	r1, r1
 801653c:	b29b      	uxth	r3, r3
 801653e:	b208      	sxth	r0, r1
 8016540:	b21a      	sxth	r2, r3
 8016542:	4290      	cmp	r0, r2
 8016544:	bfb8      	it	lt
 8016546:	460b      	movlt	r3, r1
 8016548:	eba3 030c 	sub.w	r3, r3, ip
 801654c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016550:	a807      	add	r0, sp, #28
 8016552:	f7fb ff60 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016556:	b920      	cbnz	r0, 8016562 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8016558:	6823      	ldr	r3, [r4, #0]
 801655a:	a907      	add	r1, sp, #28
 801655c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801655e:	4620      	mov	r0, r4
 8016560:	4798      	blx	r3
 8016562:	3701      	adds	r7, #1
 8016564:	b2bf      	uxth	r7, r7
 8016566:	e7a9      	b.n	80164bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8016568:	f8d9 0000 	ldr.w	r0, [r9]
 801656c:	6803      	ldr	r3, [r0, #0]
 801656e:	2101      	movs	r1, #1
 8016570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016574:	4798      	blx	r3
 8016576:	e773      	b.n	8016460 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8016578:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801657c:	e7e8      	b.n	8016550 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016580:	4798      	blx	r3
 8016582:	4b3f      	ldr	r3, [pc, #252]	; (8016680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	2b00      	cmp	r3, #0
 8016588:	f43f af29 	beq.w	80163de <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801658c:	2300      	movs	r3, #0
 801658e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8016592:	882b      	ldrh	r3, [r5, #0]
 8016594:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8016598:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801659c:	42ab      	cmp	r3, r5
 801659e:	f4bf af1e 	bcs.w	80163de <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80165a2:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 80165a6:	2907      	cmp	r1, #7
 80165a8:	d814      	bhi.n	80165d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 80165aa:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80165ae:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80165b2:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80165b6:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80165ba:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80165be:	1c4a      	adds	r2, r1, #1
 80165c0:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 80165c4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80165c8:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80165cc:	f8a2 c002 	strh.w	ip, [r2, #2]
 80165d0:	8097      	strh	r7, [r2, #4]
 80165d2:	80d6      	strh	r6, [r2, #6]
 80165d4:	3301      	adds	r3, #1
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	e7e0      	b.n	801659c <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 80165da:	2b02      	cmp	r3, #2
 80165dc:	f040 8133 	bne.w	8016846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 80165e0:	4b28      	ldr	r3, [pc, #160]	; (8016684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80165e2:	781b      	ldrb	r3, [r3, #0]
 80165e4:	2b01      	cmp	r3, #1
 80165e6:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 80165ea:	f000 8098 	beq.w	801671e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 80165ee:	882a      	ldrh	r2, [r5, #0]
 80165f0:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 80165f4:	3201      	adds	r2, #1
 80165f6:	b292      	uxth	r2, r2
 80165f8:	2900      	cmp	r1, #0
 80165fa:	d0c2      	beq.n	8016582 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80165fc:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 8016600:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8016604:	441e      	add	r6, r3
 8016606:	b236      	sxth	r6, r6
 8016608:	4694      	mov	ip, r2
 801660a:	f04f 0900 	mov.w	r9, #0
 801660e:	fa1f f38c 	uxth.w	r3, ip
 8016612:	4299      	cmp	r1, r3
 8016614:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8016618:	f240 80bf 	bls.w	801679a <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 801661c:	4427      	add	r7, r4
 801661e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8016622:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8016626:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 801662a:	4283      	cmp	r3, r0
 801662c:	f340 80a1 	ble.w	8016772 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 8016630:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 8016634:	4406      	add	r6, r0
 8016636:	b236      	sxth	r6, r6
 8016638:	429e      	cmp	r6, r3
 801663a:	bfa8      	it	ge
 801663c:	461e      	movge	r6, r3
 801663e:	46e1      	mov	r9, ip
 8016640:	f10c 0c01 	add.w	ip, ip, #1
 8016644:	e7e3      	b.n	801660e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 8016646:	d10a      	bne.n	801665e <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 8016648:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 801664c:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 8016650:	4562      	cmp	r2, ip
 8016652:	bfb8      	it	lt
 8016654:	4662      	movlt	r2, ip
 8016656:	4288      	cmp	r0, r1
 8016658:	bfb8      	it	lt
 801665a:	461f      	movlt	r7, r3
 801665c:	e087      	b.n	801676e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801665e:	428a      	cmp	r2, r1
 8016660:	bfb8      	it	lt
 8016662:	460a      	movlt	r2, r1
 8016664:	e083      	b.n	801676e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 8016666:	bf00      	nop
 8016668:	20025868 	.word	0x20025868
 801666c:	20025874 	.word	0x20025874
 8016670:	20000270 	.word	0x20000270
 8016674:	20025830 	.word	0x20025830
 8016678:	20025826 	.word	0x20025826
 801667c:	20025824 	.word	0x20025824
 8016680:	2002582e 	.word	0x2002582e
 8016684:	20025828 	.word	0x20025828
 8016688:	19a1      	adds	r1, r4, r6
 801668a:	ab07      	add	r3, sp, #28
 801668c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8016690:	6849      	ldr	r1, [r1, #4]
 8016692:	c303      	stmia	r3!, {r0, r1}
 8016694:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016698:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801669c:	2b13      	cmp	r3, #19
 801669e:	bfd8      	it	le
 80166a0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80166a4:	f8ad 201c 	strh.w	r2, [sp, #28]
 80166a8:	440b      	add	r3, r1
 80166aa:	1a9b      	subs	r3, r3, r2
 80166ac:	a807      	add	r0, sp, #28
 80166ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 80166b2:	f7fe ffc9 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80166b6:	a807      	add	r0, sp, #28
 80166b8:	f7fb fead 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 80166bc:	bb78      	cbnz	r0, 801671e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 80166be:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80166c2:	f8d9 0000 	ldr.w	r0, [r9]
 80166c6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80166ca:	f8d0 e000 	ldr.w	lr, [r0]
 80166ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80166d2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80166d6:	f1bc 0f14 	cmp.w	ip, #20
 80166da:	bfa8      	it	ge
 80166dc:	f04f 0c14 	movge.w	ip, #20
 80166e0:	fa1f fc8c 	uxth.w	ip, ip
 80166e4:	f8cd c000 	str.w	ip, [sp]
 80166e8:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 80166ec:	47d8      	blx	fp
 80166ee:	4683      	mov	fp, r0
 80166f0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80166f4:	a807      	add	r0, sp, #28
 80166f6:	f7fe ff8d 	bl	8015614 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80166fa:	6823      	ldr	r3, [r4, #0]
 80166fc:	4426      	add	r6, r4
 80166fe:	4620      	mov	r0, r4
 8016700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016702:	a907      	add	r1, sp, #28
 8016704:	4798      	blx	r3
 8016706:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801670a:	eba0 000b 	sub.w	r0, r0, fp
 801670e:	b200      	sxth	r0, r0
 8016710:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 8016714:	b918      	cbnz	r0, 801671e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 8016716:	b2b9      	uxth	r1, r7
 8016718:	4650      	mov	r0, sl
 801671a:	f7ff fa79 	bl	8015c10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801671e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8016722:	f1bb 0f00 	cmp.w	fp, #0
 8016726:	f43f af2c 	beq.w	8016582 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801672a:	882b      	ldrh	r3, [r5, #0]
 801672c:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8016730:	3301      	adds	r3, #1
 8016732:	b29b      	uxth	r3, r3
 8016734:	2700      	movs	r7, #0
 8016736:	b299      	uxth	r1, r3
 8016738:	458b      	cmp	fp, r1
 801673a:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 801673e:	d9a3      	bls.n	8016688 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 8016740:	4426      	add	r6, r4
 8016742:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8016746:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 801674a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801674e:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 8016752:	4408      	add	r0, r1
 8016754:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 8016758:	4461      	add	r1, ip
 801675a:	b200      	sxth	r0, r0
 801675c:	b209      	sxth	r1, r1
 801675e:	4288      	cmp	r0, r1
 8016760:	f6bf af71 	bge.w	8016646 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8016764:	4584      	cmp	ip, r0
 8016766:	4662      	mov	r2, ip
 8016768:	461f      	mov	r7, r3
 801676a:	bfb8      	it	lt
 801676c:	4602      	movlt	r2, r0
 801676e:	3301      	adds	r3, #1
 8016770:	e7e1      	b.n	8016736 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 8016772:	d10e      	bne.n	8016792 <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 8016774:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8016778:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 801677c:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8016780:	4473      	add	r3, lr
 8016782:	b21b      	sxth	r3, r3
 8016784:	429e      	cmp	r6, r3
 8016786:	bfa8      	it	ge
 8016788:	461e      	movge	r6, r3
 801678a:	4287      	cmp	r7, r0
 801678c:	bfb8      	it	lt
 801678e:	46e1      	movlt	r9, ip
 8016790:	e756      	b.n	8016640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8016792:	4286      	cmp	r6, r0
 8016794:	bfa8      	it	ge
 8016796:	4606      	movge	r6, r0
 8016798:	e752      	b.n	8016640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801679a:	eb0a 0007 	add.w	r0, sl, r7
 801679e:	4427      	add	r7, r4
 80167a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80167a4:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 80167a8:	f1bb 0f13 	cmp.w	fp, #19
 80167ac:	bfde      	ittt	le
 80167ae:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 80167b2:	445e      	addle	r6, fp
 80167b4:	b236      	sxthle	r6, r6
 80167b6:	f7fb fe2e 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 80167ba:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80167be:	2800      	cmp	r0, #0
 80167c0:	f47f af1a 	bne.w	80165f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 80167c4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80167c8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80167cc:	482a      	ldr	r0, [pc, #168]	; (8016878 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 80167ce:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 80167d2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80167d6:	6800      	ldr	r0, [r0, #0]
 80167d8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80167dc:	1ab6      	subs	r6, r6, r2
 80167de:	2e14      	cmp	r6, #20
 80167e0:	f8ad 201e 	strh.w	r2, [sp, #30]
 80167e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80167e8:	bfa8      	it	ge
 80167ea:	2614      	movge	r6, #20
 80167ec:	f8d0 c000 	ldr.w	ip, [r0]
 80167f0:	b2b6      	uxth	r6, r6
 80167f2:	fa1f fb8b 	uxth.w	fp, fp
 80167f6:	455e      	cmp	r6, fp
 80167f8:	bf94      	ite	ls
 80167fa:	9600      	strls	r6, [sp, #0]
 80167fc:	f8cd b000 	strhi.w	fp, [sp]
 8016800:	b292      	uxth	r2, r2
 8016802:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 8016806:	b29b      	uxth	r3, r3
 8016808:	b289      	uxth	r1, r1
 801680a:	47b0      	blx	r6
 801680c:	6823      	ldr	r3, [r4, #0]
 801680e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016814:	a907      	add	r1, sp, #28
 8016816:	4620      	mov	r0, r4
 8016818:	4798      	blx	r3
 801681a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801681e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016822:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8016826:	1a5b      	subs	r3, r3, r1
 8016828:	440a      	add	r2, r1
 801682a:	b21b      	sxth	r3, r3
 801682c:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8016830:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8016834:	2b00      	cmp	r3, #0
 8016836:	f47f aeda 	bne.w	80165ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801683a:	fa1f f189 	uxth.w	r1, r9
 801683e:	4650      	mov	r0, sl
 8016840:	f7ff f9e6 	bl	8015c10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016844:	e6d3      	b.n	80165ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016846:	882e      	ldrh	r6, [r5, #0]
 8016848:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801684c:	42b3      	cmp	r3, r6
 801684e:	f67f ae98 	bls.w	8016582 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8016852:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8016856:	ab07      	add	r3, sp, #28
 8016858:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801685c:	6851      	ldr	r1, [r2, #4]
 801685e:	c303      	stmia	r3!, {r0, r1}
 8016860:	a807      	add	r0, sp, #28
 8016862:	f7fb fdd8 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016866:	b920      	cbnz	r0, 8016872 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 8016868:	6823      	ldr	r3, [r4, #0]
 801686a:	a907      	add	r1, sp, #28
 801686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801686e:	4620      	mov	r0, r4
 8016870:	4798      	blx	r3
 8016872:	3601      	adds	r6, #1
 8016874:	b2b6      	uxth	r6, r6
 8016876:	e7e7      	b.n	8016848 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 8016878:	20025830 	.word	0x20025830

0801687c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801687c:	4b03      	ldr	r3, [pc, #12]	; (801688c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801687e:	2200      	movs	r2, #0
 8016880:	801a      	strh	r2, [r3, #0]
 8016882:	805a      	strh	r2, [r3, #2]
 8016884:	809a      	strh	r2, [r3, #4]
 8016886:	80da      	strh	r2, [r3, #6]
 8016888:	4770      	bx	lr
 801688a:	bf00      	nop
 801688c:	20025874 	.word	0x20025874

08016890 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016894:	4606      	mov	r6, r0
 8016896:	b09d      	sub	sp, #116	; 0x74
 8016898:	a803      	add	r0, sp, #12
 801689a:	4614      	mov	r4, r2
 801689c:	468a      	mov	sl, r1
 801689e:	461d      	mov	r5, r3
 80168a0:	f000 fdd3 	bl	801744a <_ZN8touchgfx12TextProviderC1Ev>
 80168a4:	6833      	ldr	r3, [r6, #0]
 80168a6:	4630      	mov	r0, r6
 80168a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80168aa:	4798      	blx	r3
 80168ac:	6833      	ldr	r3, [r6, #0]
 80168ae:	4607      	mov	r7, r0
 80168b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80168b2:	4630      	mov	r0, r6
 80168b4:	4798      	blx	r3
 80168b6:	462a      	mov	r2, r5
 80168b8:	9000      	str	r0, [sp, #0]
 80168ba:	4621      	mov	r1, r4
 80168bc:	463b      	mov	r3, r7
 80168be:	a803      	add	r0, sp, #12
 80168c0:	f000 fe1e 	bl	8017500 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80168c4:	2500      	movs	r5, #0
 80168c6:	462c      	mov	r4, r5
 80168c8:	46a9      	mov	r9, r5
 80168ca:	46a8      	mov	r8, r5
 80168cc:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80168d0:	2300      	movs	r3, #0
 80168d2:	9302      	str	r3, [sp, #8]
 80168d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80168d8:	429c      	cmp	r4, r3
 80168da:	d002      	beq.n	80168e2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80168dc:	455c      	cmp	r4, fp
 80168de:	bf18      	it	ne
 80168e0:	4625      	movne	r5, r4
 80168e2:	ab02      	add	r3, sp, #8
 80168e4:	4632      	mov	r2, r6
 80168e6:	4651      	mov	r1, sl
 80168e8:	a803      	add	r0, sp, #12
 80168ea:	f001 f90b 	bl	8017b04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80168ee:	4604      	mov	r4, r0
 80168f0:	b108      	cbz	r0, 80168f6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80168f2:	280a      	cmp	r0, #10
 80168f4:	d10a      	bne.n	801690c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80168f6:	45c1      	cmp	r9, r8
 80168f8:	bf38      	it	cc
 80168fa:	46c1      	movcc	r9, r8
 80168fc:	f04f 0800 	mov.w	r8, #0
 8016900:	2c00      	cmp	r4, #0
 8016902:	d1e5      	bne.n	80168d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016904:	4648      	mov	r0, r9
 8016906:	b01d      	add	sp, #116	; 0x74
 8016908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801690c:	9a02      	ldr	r2, [sp, #8]
 801690e:	2a00      	cmp	r2, #0
 8016910:	d0de      	beq.n	80168d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016912:	7b57      	ldrb	r7, [r2, #13]
 8016914:	6833      	ldr	r3, [r6, #0]
 8016916:	8894      	ldrh	r4, [r2, #4]
 8016918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801691a:	007f      	lsls	r7, r7, #1
 801691c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8016920:	7a97      	ldrb	r7, [r2, #10]
 8016922:	4629      	mov	r1, r5
 8016924:	4307      	orrs	r7, r0
 8016926:	4630      	mov	r0, r6
 8016928:	4798      	blx	r3
 801692a:	4438      	add	r0, r7
 801692c:	4480      	add	r8, r0
 801692e:	fa1f f888 	uxth.w	r8, r8
 8016932:	e7e5      	b.n	8016900 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08016934 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016934:	b508      	push	{r3, lr}
 8016936:	6803      	ldr	r3, [r0, #0]
 8016938:	68db      	ldr	r3, [r3, #12]
 801693a:	4798      	blx	r3
 801693c:	b128      	cbz	r0, 801694a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801693e:	7b43      	ldrb	r3, [r0, #13]
 8016940:	7a80      	ldrb	r0, [r0, #10]
 8016942:	005b      	lsls	r3, r3, #1
 8016944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016948:	4318      	orrs	r0, r3
 801694a:	bd08      	pop	{r3, pc}

0801694c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801694c:	b40e      	push	{r1, r2, r3}
 801694e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016950:	b09e      	sub	sp, #120	; 0x78
 8016952:	ab23      	add	r3, sp, #140	; 0x8c
 8016954:	4605      	mov	r5, r0
 8016956:	f853 4b04 	ldr.w	r4, [r3], #4
 801695a:	9303      	str	r3, [sp, #12]
 801695c:	a805      	add	r0, sp, #20
 801695e:	f000 fd74 	bl	801744a <_ZN8touchgfx12TextProviderC1Ev>
 8016962:	682b      	ldr	r3, [r5, #0]
 8016964:	4628      	mov	r0, r5
 8016966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016968:	4798      	blx	r3
 801696a:	682b      	ldr	r3, [r5, #0]
 801696c:	4606      	mov	r6, r0
 801696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016970:	4628      	mov	r0, r5
 8016972:	4798      	blx	r3
 8016974:	4633      	mov	r3, r6
 8016976:	ae1e      	add	r6, sp, #120	; 0x78
 8016978:	4621      	mov	r1, r4
 801697a:	9000      	str	r0, [sp, #0]
 801697c:	9a03      	ldr	r2, [sp, #12]
 801697e:	2400      	movs	r4, #0
 8016980:	a805      	add	r0, sp, #20
 8016982:	f000 fdbd 	bl	8017500 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016986:	f846 4d68 	str.w	r4, [r6, #-104]!
 801698a:	462a      	mov	r2, r5
 801698c:	4633      	mov	r3, r6
 801698e:	4621      	mov	r1, r4
 8016990:	a805      	add	r0, sp, #20
 8016992:	f001 f8b7 	bl	8017b04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016996:	b1f0      	cbz	r0, 80169d6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8016998:	280a      	cmp	r0, #10
 801699a:	d018      	beq.n	80169ce <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801699c:	9f04      	ldr	r7, [sp, #16]
 801699e:	b1b7      	cbz	r7, 80169ce <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80169a0:	7b78      	ldrb	r0, [r7, #13]
 80169a2:	7a3b      	ldrb	r3, [r7, #8]
 80169a4:	88ea      	ldrh	r2, [r5, #6]
 80169a6:	00c1      	lsls	r1, r0, #3
 80169a8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80169ac:	4319      	orrs	r1, r3
 80169ae:	0643      	lsls	r3, r0, #25
 80169b0:	bf44      	itt	mi
 80169b2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80169b6:	b219      	sxthmi	r1, r3
 80169b8:	0100      	lsls	r0, r0, #4
 80169ba:	79fb      	ldrb	r3, [r7, #7]
 80169bc:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80169c0:	4303      	orrs	r3, r0
 80169c2:	4413      	add	r3, r2
 80169c4:	1a5b      	subs	r3, r3, r1
 80169c6:	b21b      	sxth	r3, r3
 80169c8:	429c      	cmp	r4, r3
 80169ca:	bfb8      	it	lt
 80169cc:	461c      	movlt	r4, r3
 80169ce:	4633      	mov	r3, r6
 80169d0:	462a      	mov	r2, r5
 80169d2:	2100      	movs	r1, #0
 80169d4:	e7dc      	b.n	8016990 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80169d6:	b2a0      	uxth	r0, r4
 80169d8:	b01e      	add	sp, #120	; 0x78
 80169da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80169de:	b003      	add	sp, #12
 80169e0:	4770      	bx	lr

080169e2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80169e2:	7a43      	ldrb	r3, [r0, #9]
 80169e4:	8880      	ldrh	r0, [r0, #4]
 80169e6:	4418      	add	r0, r3
 80169e8:	b280      	uxth	r0, r0
 80169ea:	4770      	bx	lr

080169ec <_ZNK8touchgfx4Font13getFontHeightEv>:
 80169ec:	6803      	ldr	r3, [r0, #0]
 80169ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169f0:	4718      	bx	r3

080169f2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80169f2:	b40e      	push	{r1, r2, r3}
 80169f4:	b570      	push	{r4, r5, r6, lr}
 80169f6:	b09d      	sub	sp, #116	; 0x74
 80169f8:	ab21      	add	r3, sp, #132	; 0x84
 80169fa:	4604      	mov	r4, r0
 80169fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8016a00:	9302      	str	r3, [sp, #8]
 8016a02:	a803      	add	r0, sp, #12
 8016a04:	f000 fd21 	bl	801744a <_ZN8touchgfx12TextProviderC1Ev>
 8016a08:	6823      	ldr	r3, [r4, #0]
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a0e:	4798      	blx	r3
 8016a10:	6823      	ldr	r3, [r4, #0]
 8016a12:	4606      	mov	r6, r0
 8016a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a16:	4620      	mov	r0, r4
 8016a18:	4798      	blx	r3
 8016a1a:	4633      	mov	r3, r6
 8016a1c:	9000      	str	r0, [sp, #0]
 8016a1e:	9a02      	ldr	r2, [sp, #8]
 8016a20:	4629      	mov	r1, r5
 8016a22:	a803      	add	r0, sp, #12
 8016a24:	f000 fd6c 	bl	8017500 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016a28:	a803      	add	r0, sp, #12
 8016a2a:	f001 f939 	bl	8017ca0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016a2e:	2401      	movs	r4, #1
 8016a30:	b2a3      	uxth	r3, r4
 8016a32:	b140      	cbz	r0, 8016a46 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8016a34:	280a      	cmp	r0, #10
 8016a36:	bf08      	it	eq
 8016a38:	3301      	addeq	r3, #1
 8016a3a:	a803      	add	r0, sp, #12
 8016a3c:	bf08      	it	eq
 8016a3e:	b21c      	sxtheq	r4, r3
 8016a40:	f001 f92e 	bl	8017ca0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016a44:	e7f4      	b.n	8016a30 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8016a46:	4618      	mov	r0, r3
 8016a48:	b01d      	add	sp, #116	; 0x74
 8016a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a4e:	b003      	add	sp, #12
 8016a50:	4770      	bx	lr

08016a52 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016a52:	b40e      	push	{r1, r2, r3}
 8016a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a56:	b09e      	sub	sp, #120	; 0x78
 8016a58:	ab23      	add	r3, sp, #140	; 0x8c
 8016a5a:	4604      	mov	r4, r0
 8016a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016a60:	9303      	str	r3, [sp, #12]
 8016a62:	a805      	add	r0, sp, #20
 8016a64:	f000 fcf1 	bl	801744a <_ZN8touchgfx12TextProviderC1Ev>
 8016a68:	6823      	ldr	r3, [r4, #0]
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a6e:	4798      	blx	r3
 8016a70:	6823      	ldr	r3, [r4, #0]
 8016a72:	4606      	mov	r6, r0
 8016a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a76:	4620      	mov	r0, r4
 8016a78:	4798      	blx	r3
 8016a7a:	4633      	mov	r3, r6
 8016a7c:	4629      	mov	r1, r5
 8016a7e:	9000      	str	r0, [sp, #0]
 8016a80:	9a03      	ldr	r2, [sp, #12]
 8016a82:	a805      	add	r0, sp, #20
 8016a84:	ad1e      	add	r5, sp, #120	; 0x78
 8016a86:	f000 fd3b 	bl	8017500 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016a8a:	2100      	movs	r1, #0
 8016a8c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8016a90:	4622      	mov	r2, r4
 8016a92:	462b      	mov	r3, r5
 8016a94:	a805      	add	r0, sp, #20
 8016a96:	f001 f835 	bl	8017b04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016a9a:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8016a9e:	b1d8      	cbz	r0, 8016ad8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8016aa0:	280a      	cmp	r0, #10
 8016aa2:	d012      	beq.n	8016aca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016aa4:	9804      	ldr	r0, [sp, #16]
 8016aa6:	b180      	cbz	r0, 8016aca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016aa8:	7b47      	ldrb	r7, [r0, #13]
 8016aaa:	88e2      	ldrh	r2, [r4, #6]
 8016aac:	00fb      	lsls	r3, r7, #3
 8016aae:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016ab2:	7a03      	ldrb	r3, [r0, #8]
 8016ab4:	430b      	orrs	r3, r1
 8016ab6:	0679      	lsls	r1, r7, #25
 8016ab8:	bf44      	itt	mi
 8016aba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016abe:	b21b      	sxthmi	r3, r3
 8016ac0:	1ad3      	subs	r3, r2, r3
 8016ac2:	b21b      	sxth	r3, r3
 8016ac4:	429e      	cmp	r6, r3
 8016ac6:	bfa8      	it	ge
 8016ac8:	461e      	movge	r6, r3
 8016aca:	462b      	mov	r3, r5
 8016acc:	4622      	mov	r2, r4
 8016ace:	2100      	movs	r1, #0
 8016ad0:	a805      	add	r0, sp, #20
 8016ad2:	f001 f817 	bl	8017b04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016ad6:	e7e2      	b.n	8016a9e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8016ad8:	4630      	mov	r0, r6
 8016ada:	b01e      	add	sp, #120	; 0x78
 8016adc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ae0:	b003      	add	sp, #12
 8016ae2:	4770      	bx	lr

08016ae4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8016ae4:	b513      	push	{r0, r1, r4, lr}
 8016ae6:	6803      	ldr	r3, [r0, #0]
 8016ae8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016aec:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016af0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016af4:	2400      	movs	r4, #0
 8016af6:	9400      	str	r4, [sp, #0]
 8016af8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016afc:	691b      	ldr	r3, [r3, #16]
 8016afe:	4669      	mov	r1, sp
 8016b00:	4798      	blx	r3
 8016b02:	b002      	add	sp, #8
 8016b04:	bd10      	pop	{r4, pc}

08016b06 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8016b06:	b538      	push	{r3, r4, r5, lr}
 8016b08:	680b      	ldr	r3, [r1, #0]
 8016b0a:	460c      	mov	r4, r1
 8016b0c:	68db      	ldr	r3, [r3, #12]
 8016b0e:	4605      	mov	r5, r0
 8016b10:	4798      	blx	r3
 8016b12:	6823      	ldr	r3, [r4, #0]
 8016b14:	4620      	mov	r0, r4
 8016b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b18:	4629      	mov	r1, r5
 8016b1a:	4798      	blx	r3
 8016b1c:	4628      	mov	r0, r5
 8016b1e:	bd38      	pop	{r3, r4, r5, pc}

08016b20 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8016b20:	b410      	push	{r4}
 8016b22:	880a      	ldrh	r2, [r1, #0]
 8016b24:	8884      	ldrh	r4, [r0, #4]
 8016b26:	4422      	add	r2, r4
 8016b28:	800a      	strh	r2, [r1, #0]
 8016b2a:	88c4      	ldrh	r4, [r0, #6]
 8016b2c:	884a      	ldrh	r2, [r1, #2]
 8016b2e:	4422      	add	r2, r4
 8016b30:	804a      	strh	r2, [r1, #2]
 8016b32:	6940      	ldr	r0, [r0, #20]
 8016b34:	b120      	cbz	r0, 8016b40 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8016b36:	6803      	ldr	r3, [r0, #0]
 8016b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b3e:	4718      	bx	r3
 8016b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b44:	4770      	bx	lr

08016b46 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8016b46:	b570      	push	{r4, r5, r6, lr}
 8016b48:	8882      	ldrh	r2, [r0, #4]
 8016b4a:	880b      	ldrh	r3, [r1, #0]
 8016b4c:	4413      	add	r3, r2
 8016b4e:	800b      	strh	r3, [r1, #0]
 8016b50:	88c2      	ldrh	r2, [r0, #6]
 8016b52:	884b      	ldrh	r3, [r1, #2]
 8016b54:	460c      	mov	r4, r1
 8016b56:	4413      	add	r3, r2
 8016b58:	804b      	strh	r3, [r1, #2]
 8016b5a:	4605      	mov	r5, r0
 8016b5c:	1d01      	adds	r1, r0, #4
 8016b5e:	4620      	mov	r0, r4
 8016b60:	f7fb fc16 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8016b64:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	dd0b      	ble.n	8016b84 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016b6c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	dd07      	ble.n	8016b84 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016b74:	6968      	ldr	r0, [r5, #20]
 8016b76:	b128      	cbz	r0, 8016b84 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016b78:	6803      	ldr	r3, [r0, #0]
 8016b7a:	4621      	mov	r1, r4
 8016b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b82:	4718      	bx	r3
 8016b84:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b88 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016b88:	b570      	push	{r4, r5, r6, lr}
 8016b8a:	8882      	ldrh	r2, [r0, #4]
 8016b8c:	880b      	ldrh	r3, [r1, #0]
 8016b8e:	4413      	add	r3, r2
 8016b90:	800b      	strh	r3, [r1, #0]
 8016b92:	88c2      	ldrh	r2, [r0, #6]
 8016b94:	884b      	ldrh	r3, [r1, #2]
 8016b96:	460c      	mov	r4, r1
 8016b98:	4413      	add	r3, r2
 8016b9a:	804b      	strh	r3, [r1, #2]
 8016b9c:	4605      	mov	r5, r0
 8016b9e:	1d01      	adds	r1, r0, #4
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f7fb fbf5 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8016ba6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	dd19      	ble.n	8016be2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016bae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	dd15      	ble.n	8016be2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016bb6:	6968      	ldr	r0, [r5, #20]
 8016bb8:	b128      	cbz	r0, 8016bc6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8016bba:	6803      	ldr	r3, [r0, #0]
 8016bbc:	4621      	mov	r1, r4
 8016bbe:	691b      	ldr	r3, [r3, #16]
 8016bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bc4:	4718      	bx	r3
 8016bc6:	4b07      	ldr	r3, [pc, #28]	; (8016be4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	3304      	adds	r3, #4
 8016bcc:	429d      	cmp	r5, r3
 8016bce:	d108      	bne.n	8016be2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016bd0:	f7fe fec8 	bl	8015964 <_ZN8touchgfx11Application11getInstanceEv>
 8016bd4:	6803      	ldr	r3, [r0, #0]
 8016bd6:	6821      	ldr	r1, [r4, #0]
 8016bd8:	6862      	ldr	r2, [r4, #4]
 8016bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016be0:	4718      	bx	r3
 8016be2:	bd70      	pop	{r4, r5, r6, pc}
 8016be4:	2002586c 	.word	0x2002586c

08016be8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016be8:	b570      	push	{r4, r5, r6, lr}
 8016bea:	4604      	mov	r4, r0
 8016bec:	4616      	mov	r6, r2
 8016bee:	460d      	mov	r5, r1
 8016bf0:	b901      	cbnz	r1, 8016bf4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8016bf2:	b192      	cbz	r2, 8016c1a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8016bf4:	6823      	ldr	r3, [r4, #0]
 8016bf6:	4620      	mov	r0, r4
 8016bf8:	699b      	ldr	r3, [r3, #24]
 8016bfa:	4798      	blx	r3
 8016bfc:	88e2      	ldrh	r2, [r4, #6]
 8016bfe:	88a1      	ldrh	r1, [r4, #4]
 8016c00:	4432      	add	r2, r6
 8016c02:	4429      	add	r1, r5
 8016c04:	4620      	mov	r0, r4
 8016c06:	b212      	sxth	r2, r2
 8016c08:	b209      	sxth	r1, r1
 8016c0a:	f7f7 fe4c 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
 8016c0e:	6823      	ldr	r3, [r4, #0]
 8016c10:	4620      	mov	r0, r4
 8016c12:	699b      	ldr	r3, [r3, #24]
 8016c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c18:	4718      	bx	r3
 8016c1a:	bd70      	pop	{r4, r5, r6, pc}

08016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8016c1c:	b510      	push	{r4, lr}
 8016c1e:	4604      	mov	r4, r0
 8016c20:	4608      	mov	r0, r1
 8016c22:	2300      	movs	r3, #0
 8016c24:	8023      	strh	r3, [r4, #0]
 8016c26:	8063      	strh	r3, [r4, #2]
 8016c28:	6803      	ldr	r3, [r0, #0]
 8016c2a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016c2e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016c32:	80a1      	strh	r1, [r4, #4]
 8016c34:	80e2      	strh	r2, [r4, #6]
 8016c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c38:	4621      	mov	r1, r4
 8016c3a:	4798      	blx	r3
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	bd10      	pop	{r4, pc}

08016c40 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8016c40:	b530      	push	{r4, r5, lr}
 8016c42:	8083      	strh	r3, [r0, #4]
 8016c44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016c48:	80c3      	strh	r3, [r0, #6]
 8016c4a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8016c4e:	7203      	strb	r3, [r0, #8]
 8016c50:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016c54:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8016c58:	7243      	strb	r3, [r0, #9]
 8016c5a:	7a83      	ldrb	r3, [r0, #10]
 8016c5c:	6141      	str	r1, [r0, #20]
 8016c5e:	f365 0306 	bfi	r3, r5, #0, #7
 8016c62:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8016c66:	8302      	strh	r2, [r0, #24]
 8016c68:	f365 13c7 	bfi	r3, r5, #7, #1
 8016c6c:	7283      	strb	r3, [r0, #10]
 8016c6e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016c72:	72c3      	strb	r3, [r0, #11]
 8016c74:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016c78:	7303      	strb	r3, [r0, #12]
 8016c7a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016c7e:	81c3      	strh	r3, [r0, #14]
 8016c80:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8016c84:	8203      	strh	r3, [r0, #16]
 8016c86:	4b01      	ldr	r3, [pc, #4]	; (8016c8c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8016c88:	6003      	str	r3, [r0, #0]
 8016c8a:	bd30      	pop	{r4, r5, pc}
 8016c8c:	08029684 	.word	0x08029684

08016c90 <_ZNK8touchgfx9ConstFont4findEt>:
 8016c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c92:	6944      	ldr	r4, [r0, #20]
 8016c94:	b3bc      	cbz	r4, 8016d06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016c96:	88a3      	ldrh	r3, [r4, #4]
 8016c98:	8b02      	ldrh	r2, [r0, #24]
 8016c9a:	1acb      	subs	r3, r1, r3
 8016c9c:	f102 32ff 	add.w	r2, r2, #4294967295
 8016ca0:	d431      	bmi.n	8016d06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016ca2:	4293      	cmp	r3, r2
 8016ca4:	dd0c      	ble.n	8016cc0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8016ca6:	230e      	movs	r3, #14
 8016ca8:	fb03 4302 	mla	r3, r3, r2, r4
 8016cac:	889b      	ldrh	r3, [r3, #4]
 8016cae:	1a5b      	subs	r3, r3, r1
 8016cb0:	1ad3      	subs	r3, r2, r3
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	db27      	blt.n	8016d06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	bfbc      	itt	lt
 8016cba:	2302      	movlt	r3, #2
 8016cbc:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016cc0:	2500      	movs	r5, #0
 8016cc2:	260e      	movs	r6, #14
 8016cc4:	4295      	cmp	r5, r2
 8016cc6:	dc1e      	bgt.n	8016d06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016cc8:	fb06 4003 	mla	r0, r6, r3, r4
 8016ccc:	8887      	ldrh	r7, [r0, #4]
 8016cce:	42b9      	cmp	r1, r7
 8016cd0:	d01a      	beq.n	8016d08 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8016cd2:	d20d      	bcs.n	8016cf0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8016cd4:	1e5a      	subs	r2, r3, #1
 8016cd6:	4295      	cmp	r5, r2
 8016cd8:	dc15      	bgt.n	8016d06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016cda:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016cde:	1a5b      	subs	r3, r3, r1
 8016ce0:	1ad3      	subs	r3, r2, r3
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	db0f      	blt.n	8016d06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016ce6:	429d      	cmp	r5, r3
 8016ce8:	ddec      	ble.n	8016cc4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016cea:	1953      	adds	r3, r2, r5
 8016cec:	105b      	asrs	r3, r3, #1
 8016cee:	e7e9      	b.n	8016cc4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016cf0:	1c5d      	adds	r5, r3, #1
 8016cf2:	42aa      	cmp	r2, r5
 8016cf4:	db07      	blt.n	8016d06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016cf6:	8a43      	ldrh	r3, [r0, #18]
 8016cf8:	1acb      	subs	r3, r1, r3
 8016cfa:	442b      	add	r3, r5
 8016cfc:	429d      	cmp	r5, r3
 8016cfe:	dc02      	bgt.n	8016d06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d00:	429a      	cmp	r2, r3
 8016d02:	dadf      	bge.n	8016cc4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016d04:	e7f1      	b.n	8016cea <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8016d06:	2000      	movs	r0, #0
 8016d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d0a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d0c:	4604      	mov	r4, r0
 8016d0e:	4617      	mov	r7, r2
 8016d10:	461e      	mov	r6, r3
 8016d12:	b911      	cbnz	r1, 8016d1a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8016d14:	2500      	movs	r5, #0
 8016d16:	4628      	mov	r0, r5
 8016d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d1a:	290a      	cmp	r1, #10
 8016d1c:	d0fa      	beq.n	8016d14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016d1e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016d22:	4291      	cmp	r1, r2
 8016d24:	d0f6      	beq.n	8016d14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016d26:	f242 020b 	movw	r2, #8203	; 0x200b
 8016d2a:	4291      	cmp	r1, r2
 8016d2c:	d0f2      	beq.n	8016d14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016d2e:	f7ff ffaf 	bl	8016c90 <_ZNK8touchgfx9ConstFont4findEt>
 8016d32:	4605      	mov	r5, r0
 8016d34:	b950      	cbnz	r0, 8016d4c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016d36:	6823      	ldr	r3, [r4, #0]
 8016d38:	4620      	mov	r0, r4
 8016d3a:	691b      	ldr	r3, [r3, #16]
 8016d3c:	4798      	blx	r3
 8016d3e:	4601      	mov	r1, r0
 8016d40:	4620      	mov	r0, r4
 8016d42:	f7ff ffa5 	bl	8016c90 <_ZNK8touchgfx9ConstFont4findEt>
 8016d46:	4605      	mov	r5, r0
 8016d48:	2800      	cmp	r0, #0
 8016d4a:	d0e3      	beq.n	8016d14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016d4c:	6823      	ldr	r3, [r4, #0]
 8016d4e:	4629      	mov	r1, r5
 8016d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d52:	4620      	mov	r0, r4
 8016d54:	4798      	blx	r3
 8016d56:	6038      	str	r0, [r7, #0]
 8016d58:	6823      	ldr	r3, [r4, #0]
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d5e:	4798      	blx	r3
 8016d60:	7030      	strb	r0, [r6, #0]
 8016d62:	e7d8      	b.n	8016d16 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016d64 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016d64:	2000      	movs	r0, #0
 8016d66:	4770      	bx	lr

08016d68 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016d68:	2001      	movs	r0, #1
 8016d6a:	4770      	bx	lr

08016d6c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8016d6c:	2002      	movs	r0, #2
 8016d6e:	4770      	bx	lr

08016d70 <_ZN8touchgfx12GestureEventD1Ev>:
 8016d70:	4770      	bx	lr

08016d72 <_ZN8touchgfx9DragEventD1Ev>:
 8016d72:	4770      	bx	lr

08016d74 <_ZN8touchgfx10ClickEventD1Ev>:
 8016d74:	4770      	bx	lr

08016d76 <_ZN8touchgfx10ClickEventD0Ev>:
 8016d76:	b510      	push	{r4, lr}
 8016d78:	210c      	movs	r1, #12
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	f00f fb21 	bl	80263c2 <_ZdlPvj>
 8016d80:	4620      	mov	r0, r4
 8016d82:	bd10      	pop	{r4, pc}

08016d84 <_ZN8touchgfx9DragEventD0Ev>:
 8016d84:	b510      	push	{r4, lr}
 8016d86:	2110      	movs	r1, #16
 8016d88:	4604      	mov	r4, r0
 8016d8a:	f00f fb1a 	bl	80263c2 <_ZdlPvj>
 8016d8e:	4620      	mov	r0, r4
 8016d90:	bd10      	pop	{r4, pc}

08016d92 <_ZN8touchgfx12GestureEventD0Ev>:
 8016d92:	b510      	push	{r4, lr}
 8016d94:	210c      	movs	r1, #12
 8016d96:	4604      	mov	r4, r0
 8016d98:	f00f fb13 	bl	80263c2 <_ZdlPvj>
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	bd10      	pop	{r4, pc}

08016da0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016da0:	b530      	push	{r4, r5, lr}
 8016da2:	460d      	mov	r5, r1
 8016da4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016da6:	b087      	sub	sp, #28
 8016da8:	4604      	mov	r4, r0
 8016daa:	b301      	cbz	r1, 8016dee <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016dac:	a801      	add	r0, sp, #4
 8016dae:	f7ff ff35 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016db2:	892a      	ldrh	r2, [r5, #8]
 8016db4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016db8:	7928      	ldrb	r0, [r5, #4]
 8016dba:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016dbe:	f88d 0010 	strb.w	r0, [sp, #16]
 8016dc2:	1ad2      	subs	r2, r2, r3
 8016dc4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016dc6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016dc8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016dcc:	441a      	add	r2, r3
 8016dce:	896b      	ldrh	r3, [r5, #10]
 8016dd0:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016dd4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016dd8:	1b5b      	subs	r3, r3, r5
 8016dda:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8016ddc:	442b      	add	r3, r5
 8016dde:	4d05      	ldr	r5, [pc, #20]	; (8016df4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016de0:	9503      	str	r5, [sp, #12]
 8016de2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016de6:	6803      	ldr	r3, [r0, #0]
 8016de8:	a903      	add	r1, sp, #12
 8016dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016dec:	4798      	blx	r3
 8016dee:	b007      	add	sp, #28
 8016df0:	bd30      	pop	{r4, r5, pc}
 8016df2:	bf00      	nop
 8016df4:	0802970c 	.word	0x0802970c

08016df8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dfc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016dfe:	b08a      	sub	sp, #40	; 0x28
 8016e00:	4604      	mov	r4, r0
 8016e02:	460d      	mov	r5, r1
 8016e04:	b113      	cbz	r3, 8016e0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8016e06:	790b      	ldrb	r3, [r1, #4]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d044      	beq.n	8016e96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016e0c:	f104 0804 	add.w	r8, r4, #4
 8016e10:	4641      	mov	r1, r8
 8016e12:	a803      	add	r0, sp, #12
 8016e14:	f7ff ff02 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016e18:	792b      	ldrb	r3, [r5, #4]
 8016e1a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016e1e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016e22:	b983      	cbnz	r3, 8016e46 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016e24:	892a      	ldrh	r2, [r5, #8]
 8016e26:	88e9      	ldrh	r1, [r5, #6]
 8016e28:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8016e2c:	1b92      	subs	r2, r2, r6
 8016e2e:	1bc9      	subs	r1, r1, r7
 8016e30:	9301      	str	r3, [sp, #4]
 8016e32:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8016e36:	9300      	str	r3, [sp, #0]
 8016e38:	b212      	sxth	r2, r2
 8016e3a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016e3e:	b209      	sxth	r1, r1
 8016e40:	4640      	mov	r0, r8
 8016e42:	f7fb f9c1 	bl	80121c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016e46:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016e48:	b329      	cbz	r1, 8016e96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016e4a:	a805      	add	r0, sp, #20
 8016e4c:	f7ff fee6 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016e50:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016e54:	792b      	ldrb	r3, [r5, #4]
 8016e56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016e58:	f88d 3020 	strb.w	r3, [sp, #32]
 8016e5c:	1abf      	subs	r7, r7, r2
 8016e5e:	88ea      	ldrh	r2, [r5, #6]
 8016e60:	4417      	add	r7, r2
 8016e62:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8016e64:	4417      	add	r7, r2
 8016e66:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016e6a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8016e6e:	1ab6      	subs	r6, r6, r2
 8016e70:	892a      	ldrh	r2, [r5, #8]
 8016e72:	4416      	add	r6, r2
 8016e74:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016e76:	4416      	add	r6, r2
 8016e78:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8016e7c:	4a07      	ldr	r2, [pc, #28]	; (8016e9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8016e7e:	9207      	str	r2, [sp, #28]
 8016e80:	2600      	movs	r6, #0
 8016e82:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8016e86:	6803      	ldr	r3, [r0, #0]
 8016e88:	a907      	add	r1, sp, #28
 8016e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e8c:	4798      	blx	r3
 8016e8e:	792b      	ldrb	r3, [r5, #4]
 8016e90:	b10b      	cbz	r3, 8016e96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016e92:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8016e96:	b00a      	add	sp, #40	; 0x28
 8016e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e9c:	080296e4 	.word	0x080296e4

08016ea0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ea4:	460c      	mov	r4, r1
 8016ea6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016ea8:	b088      	sub	sp, #32
 8016eaa:	4605      	mov	r5, r0
 8016eac:	2900      	cmp	r1, #0
 8016eae:	d06d      	beq.n	8016f8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016eb0:	4668      	mov	r0, sp
 8016eb2:	f7ff feb3 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016eb6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8016eb8:	88e3      	ldrh	r3, [r4, #6]
 8016eba:	f9bd 8000 	ldrsh.w	r8, [sp]
 8016ebe:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016ec2:	440b      	add	r3, r1
 8016ec4:	b21b      	sxth	r3, r3
 8016ec6:	4543      	cmp	r3, r8
 8016ec8:	db31      	blt.n	8016f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016eca:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8016ece:	44c4      	add	ip, r8
 8016ed0:	fa0f fc8c 	sxth.w	ip, ip
 8016ed4:	4563      	cmp	r3, ip
 8016ed6:	da2a      	bge.n	8016f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016ed8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8016eda:	8926      	ldrh	r6, [r4, #8]
 8016edc:	4416      	add	r6, r2
 8016ede:	b236      	sxth	r6, r6
 8016ee0:	42be      	cmp	r6, r7
 8016ee2:	db24      	blt.n	8016f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016ee4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016ee8:	4438      	add	r0, r7
 8016eea:	b200      	sxth	r0, r0
 8016eec:	4286      	cmp	r6, r0
 8016eee:	da1e      	bge.n	8016f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016ef0:	8963      	ldrh	r3, [r4, #10]
 8016ef2:	4419      	add	r1, r3
 8016ef4:	b209      	sxth	r1, r1
 8016ef6:	4541      	cmp	r1, r8
 8016ef8:	db08      	blt.n	8016f0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016efa:	4561      	cmp	r1, ip
 8016efc:	da06      	bge.n	8016f0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016efe:	89a3      	ldrh	r3, [r4, #12]
 8016f00:	441a      	add	r2, r3
 8016f02:	b212      	sxth	r2, r2
 8016f04:	42ba      	cmp	r2, r7
 8016f06:	db01      	blt.n	8016f0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f08:	4282      	cmp	r2, r0
 8016f0a:	db10      	blt.n	8016f2e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f0c:	4b21      	ldr	r3, [pc, #132]	; (8016f94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8016f0e:	9304      	str	r3, [sp, #16]
 8016f10:	2302      	movs	r3, #2
 8016f12:	f88d 3014 	strb.w	r3, [sp, #20]
 8016f16:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016f18:	2300      	movs	r3, #0
 8016f1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016f1e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016f22:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016f26:	6803      	ldr	r3, [r0, #0]
 8016f28:	a904      	add	r1, sp, #16
 8016f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f2c:	4798      	blx	r3
 8016f2e:	1d29      	adds	r1, r5, #4
 8016f30:	a802      	add	r0, sp, #8
 8016f32:	f7ff fe73 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f36:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016f3a:	88e0      	ldrh	r0, [r4, #6]
 8016f3c:	7921      	ldrb	r1, [r4, #4]
 8016f3e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8016f42:	8922      	ldrh	r2, [r4, #8]
 8016f44:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8016f46:	f88d 1014 	strb.w	r1, [sp, #20]
 8016f4a:	eba3 0808 	sub.w	r8, r3, r8
 8016f4e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016f52:	1bdf      	subs	r7, r3, r7
 8016f54:	b2bb      	uxth	r3, r7
 8016f56:	fa1f f888 	uxth.w	r8, r8
 8016f5a:	8967      	ldrh	r7, [r4, #10]
 8016f5c:	89a4      	ldrh	r4, [r4, #12]
 8016f5e:	4440      	add	r0, r8
 8016f60:	4460      	add	r0, ip
 8016f62:	441a      	add	r2, r3
 8016f64:	44b8      	add	r8, r7
 8016f66:	4423      	add	r3, r4
 8016f68:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016f6c:	4433      	add	r3, r6
 8016f6e:	4432      	add	r2, r6
 8016f70:	44e0      	add	r8, ip
 8016f72:	4c09      	ldr	r4, [pc, #36]	; (8016f98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016f74:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016f76:	9404      	str	r4, [sp, #16]
 8016f78:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016f7c:	f8ad 801a 	strh.w	r8, [sp, #26]
 8016f80:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016f84:	6803      	ldr	r3, [r0, #0]
 8016f86:	a904      	add	r1, sp, #16
 8016f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f8a:	4798      	blx	r3
 8016f8c:	b008      	add	sp, #32
 8016f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f92:	bf00      	nop
 8016f94:	080296e4 	.word	0x080296e4
 8016f98:	080296f8 	.word	0x080296f8

08016f9c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8016f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016fa4:	3201      	adds	r2, #1
 8016fa6:	d112      	bne.n	8016fce <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016fa8:	6803      	ldr	r3, [r0, #0]
 8016faa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016fae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016fb2:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016fb6:	2500      	movs	r5, #0
 8016fb8:	9500      	str	r5, [sp, #0]
 8016fba:	466d      	mov	r5, sp
 8016fbc:	4629      	mov	r1, r5
 8016fbe:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fc4:	4798      	blx	r3
 8016fc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016fca:	e884 0003 	stmia.w	r4, {r0, r1}
 8016fce:	4620      	mov	r0, r4
 8016fd0:	b003      	add	sp, #12
 8016fd2:	bd30      	pop	{r4, r5, pc}

08016fd4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8016fd4:	b513      	push	{r0, r1, r4, lr}
 8016fd6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016fda:	3301      	adds	r3, #1
 8016fdc:	4604      	mov	r4, r0
 8016fde:	d109      	bne.n	8016ff4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016fe0:	4601      	mov	r1, r0
 8016fe2:	4668      	mov	r0, sp
 8016fe4:	f7ff fe1a 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016fe8:	f8bd 3000 	ldrh.w	r3, [sp]
 8016fec:	8423      	strh	r3, [r4, #32]
 8016fee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016ff2:	8463      	strh	r3, [r4, #34]	; 0x22
 8016ff4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016ff8:	b002      	add	sp, #8
 8016ffa:	bd10      	pop	{r4, pc}

08016ffc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8016ffc:	b513      	push	{r0, r1, r4, lr}
 8016ffe:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8017002:	3301      	adds	r3, #1
 8017004:	4604      	mov	r4, r0
 8017006:	d109      	bne.n	801701c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017008:	4601      	mov	r1, r0
 801700a:	4668      	mov	r0, sp
 801700c:	f7ff fe06 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017010:	f8bd 3000 	ldrh.w	r3, [sp]
 8017014:	8423      	strh	r3, [r4, #32]
 8017016:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801701a:	8463      	strh	r3, [r4, #34]	; 0x22
 801701c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8017020:	b002      	add	sp, #8
 8017022:	bd10      	pop	{r4, pc}

08017024 <_ZN8touchgfx6ScreenC1Ev>:
 8017024:	b570      	push	{r4, r5, r6, lr}
 8017026:	4605      	mov	r5, r0
 8017028:	4b16      	ldr	r3, [pc, #88]	; (8017084 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801702a:	f845 3b04 	str.w	r3, [r5], #4
 801702e:	2300      	movs	r3, #0
 8017030:	8103      	strh	r3, [r0, #8]
 8017032:	8143      	strh	r3, [r0, #10]
 8017034:	8183      	strh	r3, [r0, #12]
 8017036:	81c3      	strh	r3, [r0, #14]
 8017038:	8203      	strh	r3, [r0, #16]
 801703a:	8243      	strh	r3, [r0, #18]
 801703c:	8283      	strh	r3, [r0, #20]
 801703e:	82c3      	strh	r3, [r0, #22]
 8017040:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017044:	6203      	str	r3, [r0, #32]
 8017046:	8483      	strh	r3, [r0, #36]	; 0x24
 8017048:	84c3      	strh	r3, [r0, #38]	; 0x26
 801704a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801704e:	4a0e      	ldr	r2, [pc, #56]	; (8017088 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017050:	6343      	str	r3, [r0, #52]	; 0x34
 8017052:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8017056:	4b0d      	ldr	r3, [pc, #52]	; (801708c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8017058:	6042      	str	r2, [r0, #4]
 801705a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801705e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8017060:	4a0b      	ldr	r2, [pc, #44]	; (8017090 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017062:	4604      	mov	r4, r0
 8017064:	2101      	movs	r1, #1
 8017066:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801706a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801706e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017072:	4628      	mov	r0, r5
 8017074:	4798      	blx	r3
 8017076:	6863      	ldr	r3, [r4, #4]
 8017078:	4628      	mov	r0, r5
 801707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801707c:	4631      	mov	r1, r6
 801707e:	4798      	blx	r3
 8017080:	4620      	mov	r0, r4
 8017082:	bd70      	pop	{r4, r5, r6, pc}
 8017084:	08029720 	.word	0x08029720
 8017088:	08028fd4 	.word	0x08028fd4
 801708c:	20025826 	.word	0x20025826
 8017090:	20025824 	.word	0x20025824

08017094 <_ZN8touchgfx6Screen4drawEv>:
 8017094:	b507      	push	{r0, r1, r2, lr}
 8017096:	4b09      	ldr	r3, [pc, #36]	; (80170bc <_ZN8touchgfx6Screen4drawEv+0x28>)
 8017098:	f9b3 2000 	ldrsh.w	r2, [r3]
 801709c:	4b08      	ldr	r3, [pc, #32]	; (80170c0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801709e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80170a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170a6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80170aa:	6803      	ldr	r3, [r0, #0]
 80170ac:	2100      	movs	r1, #0
 80170ae:	9100      	str	r1, [sp, #0]
 80170b0:	689b      	ldr	r3, [r3, #8]
 80170b2:	4669      	mov	r1, sp
 80170b4:	4798      	blx	r3
 80170b6:	b003      	add	sp, #12
 80170b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80170bc:	20025824 	.word	0x20025824
 80170c0:	20025826 	.word	0x20025826

080170c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80170c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	b089      	sub	sp, #36	; 0x24
 80170d0:	4680      	mov	r8, r0
 80170d2:	460c      	mov	r4, r1
 80170d4:	4615      	mov	r5, r2
 80170d6:	dd0e      	ble.n	80170f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80170d8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	dd0a      	ble.n	80170f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80170e0:	4628      	mov	r0, r5
 80170e2:	f7ff ff5b 	bl	8016f9c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80170e6:	4621      	mov	r1, r4
 80170e8:	f7fe fb5e 	bl	80157a8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80170ec:	69eb      	ldr	r3, [r5, #28]
 80170ee:	b928      	cbnz	r0, 80170fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80170f0:	461d      	mov	r5, r3
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d1f4      	bne.n	80170e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80170f6:	b009      	add	sp, #36	; 0x24
 80170f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170fc:	ae04      	add	r6, sp, #16
 80170fe:	2b00      	cmp	r3, #0
 8017100:	f000 80b5 	beq.w	801726e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017104:	682b      	ldr	r3, [r5, #0]
 8017106:	4629      	mov	r1, r5
 8017108:	68db      	ldr	r3, [r3, #12]
 801710a:	a802      	add	r0, sp, #8
 801710c:	4798      	blx	r3
 801710e:	4628      	mov	r0, r5
 8017110:	f7ff ff60 	bl	8016fd4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017114:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017118:	4407      	add	r7, r0
 801711a:	4628      	mov	r0, r5
 801711c:	f7ff ff6e 	bl	8016ffc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017120:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017124:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017128:	f8ad 2014 	strh.w	r2, [sp, #20]
 801712c:	4418      	add	r0, r3
 801712e:	4621      	mov	r1, r4
 8017130:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017134:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017138:	b23f      	sxth	r7, r7
 801713a:	4630      	mov	r0, r6
 801713c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017140:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017144:	f7fb f924 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8017148:	4628      	mov	r0, r5
 801714a:	f7ff ff27 	bl	8016f9c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801714e:	4602      	mov	r2, r0
 8017150:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017154:	ab06      	add	r3, sp, #24
 8017156:	e883 0003 	stmia.w	r3, {r0, r1}
 801715a:	4611      	mov	r1, r2
 801715c:	4618      	mov	r0, r3
 801715e:	f7fb f917 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8017162:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017166:	f9b4 1000 	ldrsh.w	r1, [r4]
 801716a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801716e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017172:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017176:	4299      	cmp	r1, r3
 8017178:	d10b      	bne.n	8017192 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801717a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801717e:	4552      	cmp	r2, sl
 8017180:	d107      	bne.n	8017192 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017182:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017186:	455a      	cmp	r2, fp
 8017188:	d103      	bne.n	8017192 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801718a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801718e:	454a      	cmp	r2, r9
 8017190:	d06d      	beq.n	801726e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017192:	f1bb 0f00 	cmp.w	fp, #0
 8017196:	dd65      	ble.n	8017264 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017198:	f1b9 0f00 	cmp.w	r9, #0
 801719c:	dd62      	ble.n	8017264 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801719e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80171a2:	fa1f f08a 	uxth.w	r0, sl
 80171a6:	4552      	cmp	r2, sl
 80171a8:	9000      	str	r0, [sp, #0]
 80171aa:	da12      	bge.n	80171d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80171ac:	9301      	str	r3, [sp, #4]
 80171ae:	9b00      	ldr	r3, [sp, #0]
 80171b0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80171b4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80171b8:	1a9a      	subs	r2, r3, r2
 80171ba:	f8ad 1010 	strh.w	r1, [sp, #16]
 80171be:	f8ad 0014 	strh.w	r0, [sp, #20]
 80171c2:	f8ad 2016 	strh.w	r2, [sp, #22]
 80171c6:	69ea      	ldr	r2, [r5, #28]
 80171c8:	4631      	mov	r1, r6
 80171ca:	4640      	mov	r0, r8
 80171cc:	f7ff ff7a 	bl	80170c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80171d0:	9b01      	ldr	r3, [sp, #4]
 80171d2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	b29f      	uxth	r7, r3
 80171da:	da0d      	bge.n	80171f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80171dc:	f8ad 2010 	strh.w	r2, [sp, #16]
 80171e0:	1aba      	subs	r2, r7, r2
 80171e2:	f8ad a012 	strh.w	sl, [sp, #18]
 80171e6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80171ea:	f8ad 9016 	strh.w	r9, [sp, #22]
 80171ee:	69ea      	ldr	r2, [r5, #28]
 80171f0:	4631      	mov	r1, r6
 80171f2:	4640      	mov	r0, r8
 80171f4:	f7ff ff66 	bl	80170c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80171f8:	8822      	ldrh	r2, [r4, #0]
 80171fa:	88a3      	ldrh	r3, [r4, #4]
 80171fc:	445f      	add	r7, fp
 80171fe:	4413      	add	r3, r2
 8017200:	b29b      	uxth	r3, r3
 8017202:	b2bf      	uxth	r7, r7
 8017204:	b23a      	sxth	r2, r7
 8017206:	b219      	sxth	r1, r3
 8017208:	4291      	cmp	r1, r2
 801720a:	dd0d      	ble.n	8017228 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801720c:	1bdb      	subs	r3, r3, r7
 801720e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017212:	f8ad a012 	strh.w	sl, [sp, #18]
 8017216:	f8ad 3014 	strh.w	r3, [sp, #20]
 801721a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801721e:	69ea      	ldr	r2, [r5, #28]
 8017220:	4631      	mov	r1, r6
 8017222:	4640      	mov	r0, r8
 8017224:	f7ff ff4e 	bl	80170c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017228:	88e2      	ldrh	r2, [r4, #6]
 801722a:	8863      	ldrh	r3, [r4, #2]
 801722c:	4413      	add	r3, r2
 801722e:	9a00      	ldr	r2, [sp, #0]
 8017230:	444a      	add	r2, r9
 8017232:	b29b      	uxth	r3, r3
 8017234:	fa1f f982 	uxth.w	r9, r2
 8017238:	fa0f f289 	sxth.w	r2, r9
 801723c:	b219      	sxth	r1, r3
 801723e:	428a      	cmp	r2, r1
 8017240:	da15      	bge.n	801726e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017242:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017246:	f9b4 0000 	ldrsh.w	r0, [r4]
 801724a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801724e:	eba3 0309 	sub.w	r3, r3, r9
 8017252:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017256:	f8ad 2012 	strh.w	r2, [sp, #18]
 801725a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801725e:	69ea      	ldr	r2, [r5, #28]
 8017260:	4631      	mov	r1, r6
 8017262:	e001      	b.n	8017268 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017264:	69ea      	ldr	r2, [r5, #28]
 8017266:	4621      	mov	r1, r4
 8017268:	4640      	mov	r0, r8
 801726a:	f7ff ff2b 	bl	80170c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801726e:	4628      	mov	r0, r5
 8017270:	f7ff fe94 	bl	8016f9c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017274:	6861      	ldr	r1, [r4, #4]
 8017276:	4602      	mov	r2, r0
 8017278:	6820      	ldr	r0, [r4, #0]
 801727a:	4633      	mov	r3, r6
 801727c:	c303      	stmia	r3!, {r0, r1}
 801727e:	4611      	mov	r1, r2
 8017280:	4630      	mov	r0, r6
 8017282:	f7fb f885 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 8017286:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801728a:	2b00      	cmp	r3, #0
 801728c:	f77f af33 	ble.w	80170f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017290:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017294:	2b00      	cmp	r3, #0
 8017296:	f77f af2e 	ble.w	80170f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801729a:	4628      	mov	r0, r5
 801729c:	f7ff fe9a 	bl	8016fd4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80172a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80172a4:	1a18      	subs	r0, r3, r0
 80172a6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80172aa:	4628      	mov	r0, r5
 80172ac:	f7ff fea6 	bl	8016ffc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80172b0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80172b4:	1a18      	subs	r0, r3, r0
 80172b6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80172ba:	682b      	ldr	r3, [r5, #0]
 80172bc:	4631      	mov	r1, r6
 80172be:	689b      	ldr	r3, [r3, #8]
 80172c0:	4628      	mov	r0, r5
 80172c2:	4798      	blx	r3
 80172c4:	e717      	b.n	80170f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080172c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80172c6:	b570      	push	{r4, r5, r6, lr}
 80172c8:	460c      	mov	r4, r1
 80172ca:	b086      	sub	sp, #24
 80172cc:	1d06      	adds	r6, r0, #4
 80172ce:	2300      	movs	r3, #0
 80172d0:	4631      	mov	r1, r6
 80172d2:	4605      	mov	r5, r0
 80172d4:	a802      	add	r0, sp, #8
 80172d6:	9301      	str	r3, [sp, #4]
 80172d8:	f7ff fca0 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80172dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80172e0:	8822      	ldrh	r2, [r4, #0]
 80172e2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80172e6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80172ea:	f8ad 0014 	strh.w	r0, [sp, #20]
 80172ee:	1ad2      	subs	r2, r2, r3
 80172f0:	8863      	ldrh	r3, [r4, #2]
 80172f2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80172f6:	1a5b      	subs	r3, r3, r1
 80172f8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80172fc:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017300:	aa01      	add	r2, sp, #4
 8017302:	a904      	add	r1, sp, #16
 8017304:	4630      	mov	r0, r6
 8017306:	f8ad 3012 	strh.w	r3, [sp, #18]
 801730a:	f7fb f919 	bl	8012540 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801730e:	9a01      	ldr	r2, [sp, #4]
 8017310:	b11a      	cbz	r2, 801731a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8017312:	4621      	mov	r1, r4
 8017314:	4628      	mov	r0, r5
 8017316:	f7ff fed5 	bl	80170c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801731a:	b006      	add	sp, #24
 801731c:	bd70      	pop	{r4, r5, r6, pc}

0801731e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801731e:	b530      	push	{r4, r5, lr}
 8017320:	4602      	mov	r2, r0
 8017322:	4604      	mov	r4, r0
 8017324:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017328:	b085      	sub	sp, #20
 801732a:	460d      	mov	r5, r1
 801732c:	6851      	ldr	r1, [r2, #4]
 801732e:	466b      	mov	r3, sp
 8017330:	c303      	stmia	r3!, {r0, r1}
 8017332:	4629      	mov	r1, r5
 8017334:	4668      	mov	r0, sp
 8017336:	f7fb f82b 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 801733a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801733e:	b12b      	cbz	r3, 801734c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8017340:	4669      	mov	r1, sp
 8017342:	4620      	mov	r0, r4
 8017344:	f7ff ffbf 	bl	80172c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017348:	b005      	add	sp, #20
 801734a:	bd30      	pop	{r4, r5, pc}
 801734c:	3404      	adds	r4, #4
 801734e:	4621      	mov	r1, r4
 8017350:	a802      	add	r0, sp, #8
 8017352:	f7ff fc63 	bl	8016c1c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017356:	f8bd 3000 	ldrh.w	r3, [sp]
 801735a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801735e:	1a9b      	subs	r3, r3, r2
 8017360:	f8ad 3000 	strh.w	r3, [sp]
 8017364:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017368:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801736c:	4669      	mov	r1, sp
 801736e:	1a9b      	subs	r3, r3, r2
 8017370:	4620      	mov	r0, r4
 8017372:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017376:	f7fb f8aa 	bl	80124ce <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801737a:	e7e5      	b.n	8017348 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801737c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801737c:	680a      	ldr	r2, [r1, #0]
 801737e:	460b      	mov	r3, r1
 8017380:	6992      	ldr	r2, [r2, #24]
 8017382:	1d01      	adds	r1, r0, #4
 8017384:	4618      	mov	r0, r3
 8017386:	4710      	bx	r2

08017388 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8017388:	4298      	cmp	r0, r3
 801738a:	d200      	bcs.n	801738e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801738c:	b913      	cbnz	r3, 8017394 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801738e:	440a      	add	r2, r1
 8017390:	b210      	sxth	r0, r2
 8017392:	4770      	bx	lr
 8017394:	ee07 2a90 	vmov	s15, r2
 8017398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801739c:	ee07 0a90 	vmov	s15, r0
 80173a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80173a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80173a8:	ee07 3a10 	vmov	s14, r3
 80173ac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80173b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80173b4:	ee07 1a90 	vmov	s15, r1
 80173b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80173bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80173c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80173c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80173c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173cc:	bfcc      	ite	gt
 80173ce:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80173d2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80173d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80173da:	ee17 3a90 	vmov	r3, s15
 80173de:	b218      	sxth	r0, r3
 80173e0:	4770      	bx	lr

080173e2 <_ZN8touchgfx15EasingEquations13linearEaseOutEtsst>:
 80173e2:	f7ff bfd1 	b.w	8017388 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

080173e6 <_ZN8touchgfx15EasingEquations11quadEaseOutEtsst>:
 80173e6:	4298      	cmp	r0, r3
 80173e8:	d200      	bcs.n	80173ec <_ZN8touchgfx15EasingEquations11quadEaseOutEtsst+0x6>
 80173ea:	b913      	cbnz	r3, 80173f2 <_ZN8touchgfx15EasingEquations11quadEaseOutEtsst+0xc>
 80173ec:	1888      	adds	r0, r1, r2
 80173ee:	b200      	sxth	r0, r0
 80173f0:	4770      	bx	lr
 80173f2:	ee07 0a90 	vmov	s15, r0
 80173f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80173fa:	ee07 3a90 	vmov	s15, r3
 80173fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017402:	4253      	negs	r3, r2
 8017404:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017408:	ee07 3a10 	vmov	s14, r3
 801740c:	ee07 1a90 	vmov	s15, r1
 8017410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017414:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8017418:	ee27 7a26 	vmul.f32	s14, s14, s13
 801741c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017420:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8017424:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017428:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801742c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017434:	bfcc      	ite	gt
 8017436:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801743a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801743e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017442:	ee17 3a90 	vmov	r3, s15
 8017446:	b218      	sxth	r0, r3
 8017448:	4770      	bx	lr

0801744a <_ZN8touchgfx12TextProviderC1Ev>:
 801744a:	b538      	push	{r3, r4, r5, lr}
 801744c:	2500      	movs	r5, #0
 801744e:	2302      	movs	r3, #2
 8017450:	4604      	mov	r4, r0
 8017452:	e9c0 5500 	strd	r5, r5, [r0]
 8017456:	7403      	strb	r3, [r0, #16]
 8017458:	6145      	str	r5, [r0, #20]
 801745a:	7605      	strb	r5, [r0, #24]
 801745c:	83c5      	strh	r5, [r0, #30]
 801745e:	8405      	strh	r5, [r0, #32]
 8017460:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017462:	8705      	strh	r5, [r0, #56]	; 0x38
 8017464:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8017466:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801746a:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801746e:	220e      	movs	r2, #14
 8017470:	4629      	mov	r1, r5
 8017472:	304c      	adds	r0, #76	; 0x4c
 8017474:	f00f f9d9 	bl	802682a <memset>
 8017478:	2301      	movs	r3, #1
 801747a:	4620      	mov	r0, r4
 801747c:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8017480:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017484:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8017488:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801748c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8017490:	f7f8 fd62 	bl	800ff58 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017494:	4620      	mov	r0, r4
 8017496:	bd38      	pop	{r3, r4, r5, pc}

08017498 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8017498:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801749a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801749e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80174a0:	fab0 f080 	clz	r0, r0
 80174a4:	0940      	lsrs	r0, r0, #5
 80174a6:	4770      	bx	lr

080174a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80174a8:	b530      	push	{r4, r5, lr}
 80174aa:	2500      	movs	r5, #0
 80174ac:	2401      	movs	r4, #1
 80174ae:	6843      	ldr	r3, [r0, #4]
 80174b0:	b913      	cbnz	r3, 80174b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80174b2:	6803      	ldr	r3, [r0, #0]
 80174b4:	b313      	cbz	r3, 80174fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80174b6:	6043      	str	r3, [r0, #4]
 80174b8:	7e03      	ldrb	r3, [r0, #24]
 80174ba:	b143      	cbz	r3, 80174ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80174bc:	6943      	ldr	r3, [r0, #20]
 80174be:	b12b      	cbz	r3, 80174cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80174c0:	881a      	ldrh	r2, [r3, #0]
 80174c2:	b11a      	cbz	r2, 80174cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80174c4:	1c9a      	adds	r2, r3, #2
 80174c6:	6142      	str	r2, [r0, #20]
 80174c8:	8818      	ldrh	r0, [r3, #0]
 80174ca:	bd30      	pop	{r4, r5, pc}
 80174cc:	7605      	strb	r5, [r0, #24]
 80174ce:	6843      	ldr	r3, [r0, #4]
 80174d0:	8819      	ldrh	r1, [r3, #0]
 80174d2:	b199      	cbz	r1, 80174fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80174d4:	1c9a      	adds	r2, r3, #2
 80174d6:	2902      	cmp	r1, #2
 80174d8:	6042      	str	r2, [r0, #4]
 80174da:	d1f5      	bne.n	80174c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80174dc:	7c03      	ldrb	r3, [r0, #16]
 80174de:	2b01      	cmp	r3, #1
 80174e0:	d8e5      	bhi.n	80174ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80174e2:	1c5a      	adds	r2, r3, #1
 80174e4:	3302      	adds	r3, #2
 80174e6:	7402      	strb	r2, [r0, #16]
 80174e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80174ec:	6143      	str	r3, [r0, #20]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d0dd      	beq.n	80174ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80174f2:	881b      	ldrh	r3, [r3, #0]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d0da      	beq.n	80174ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80174f8:	7604      	strb	r4, [r0, #24]
 80174fa:	e7d8      	b.n	80174ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80174fc:	2000      	movs	r0, #0
 80174fe:	e7e4      	b.n	80174ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017500 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017500:	b430      	push	{r4, r5}
 8017502:	6001      	str	r1, [r0, #0]
 8017504:	2100      	movs	r1, #0
 8017506:	6041      	str	r1, [r0, #4]
 8017508:	6815      	ldr	r5, [r2, #0]
 801750a:	6085      	str	r5, [r0, #8]
 801750c:	6852      	ldr	r2, [r2, #4]
 801750e:	6443      	str	r3, [r0, #68]	; 0x44
 8017510:	9b02      	ldr	r3, [sp, #8]
 8017512:	60c2      	str	r2, [r0, #12]
 8017514:	7401      	strb	r1, [r0, #16]
 8017516:	6141      	str	r1, [r0, #20]
 8017518:	7601      	strb	r1, [r0, #24]
 801751a:	8701      	strh	r1, [r0, #56]	; 0x38
 801751c:	8401      	strh	r1, [r0, #32]
 801751e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017522:	6483      	str	r3, [r0, #72]	; 0x48
 8017524:	bc30      	pop	{r4, r5}
 8017526:	f7f8 bd17 	b.w	800ff58 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801752a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801752a:	b408      	push	{r3}
 801752c:	b510      	push	{r4, lr}
 801752e:	b085      	sub	sp, #20
 8017530:	ac07      	add	r4, sp, #28
 8017532:	f854 3b04 	ldr.w	r3, [r4], #4
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	4613      	mov	r3, r2
 801753a:	4622      	mov	r2, r4
 801753c:	9403      	str	r4, [sp, #12]
 801753e:	f7ff ffdf 	bl	8017500 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017542:	b005      	add	sp, #20
 8017544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017548:	b001      	add	sp, #4
 801754a:	4770      	bx	lr

0801754c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801754c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801754e:	4605      	mov	r5, r0
 8017550:	4608      	mov	r0, r1
 8017552:	b1e9      	cbz	r1, 8017590 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8017554:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017558:	460b      	mov	r3, r1
 801755a:	f101 0708 	add.w	r7, r1, #8
 801755e:	4622      	mov	r2, r4
 8017560:	6818      	ldr	r0, [r3, #0]
 8017562:	6859      	ldr	r1, [r3, #4]
 8017564:	4626      	mov	r6, r4
 8017566:	c603      	stmia	r6!, {r0, r1}
 8017568:	3308      	adds	r3, #8
 801756a:	42bb      	cmp	r3, r7
 801756c:	4634      	mov	r4, r6
 801756e:	d1f7      	bne.n	8017560 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017570:	6818      	ldr	r0, [r3, #0]
 8017572:	6030      	str	r0, [r6, #0]
 8017574:	889b      	ldrh	r3, [r3, #4]
 8017576:	80b3      	strh	r3, [r6, #4]
 8017578:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801757c:	015b      	lsls	r3, r3, #5
 801757e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017582:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8017586:	430b      	orrs	r3, r1
 8017588:	425b      	negs	r3, r3
 801758a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801758e:	4610      	mov	r0, r2
 8017590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017592 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017592:	b538      	push	{r3, r4, r5, lr}
 8017594:	460c      	mov	r4, r1
 8017596:	6811      	ldr	r1, [r2, #0]
 8017598:	4610      	mov	r0, r2
 801759a:	68cd      	ldr	r5, [r1, #12]
 801759c:	4619      	mov	r1, r3
 801759e:	47a8      	blx	r5
 80175a0:	2800      	cmp	r0, #0
 80175a2:	bf08      	it	eq
 80175a4:	4620      	moveq	r0, r4
 80175a6:	bd38      	pop	{r3, r4, r5, pc}

080175a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80175a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175aa:	4604      	mov	r4, r0
 80175ac:	4615      	mov	r5, r2
 80175ae:	4608      	mov	r0, r1
 80175b0:	b93a      	cbnz	r2, 80175c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80175b2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80175b6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80175ba:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80175be:	4628      	mov	r0, r5
 80175c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175c2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80175c6:	8893      	ldrh	r3, [r2, #4]
 80175c8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80175cc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80175d0:	79ee      	ldrb	r6, [r5, #7]
 80175d2:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80175d6:	4316      	orrs	r6, r2
 80175d8:	19da      	adds	r2, r3, r7
 80175da:	b291      	uxth	r1, r2
 80175dc:	291d      	cmp	r1, #29
 80175de:	b2b7      	uxth	r7, r6
 80175e0:	d87a      	bhi.n	80176d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 80175e2:	2201      	movs	r2, #1
 80175e4:	408a      	lsls	r2, r1
 80175e6:	4975      	ldr	r1, [pc, #468]	; (80177bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80175e8:	420a      	tst	r2, r1
 80175ea:	ea4f 06e6 	mov.w	r6, r6, asr #3
 80175ee:	d12d      	bne.n	801764c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80175f0:	f412 7f60 	tst.w	r2, #896	; 0x380
 80175f4:	d070      	beq.n	80176d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 80175f6:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80175fa:	462b      	mov	r3, r5
 80175fc:	f105 0e08 	add.w	lr, r5, #8
 8017600:	4615      	mov	r5, r2
 8017602:	6818      	ldr	r0, [r3, #0]
 8017604:	6859      	ldr	r1, [r3, #4]
 8017606:	4694      	mov	ip, r2
 8017608:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801760c:	3308      	adds	r3, #8
 801760e:	4573      	cmp	r3, lr
 8017610:	4662      	mov	r2, ip
 8017612:	d1f6      	bne.n	8017602 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8017614:	6818      	ldr	r0, [r3, #0]
 8017616:	f8cc 0000 	str.w	r0, [ip]
 801761a:	889b      	ldrh	r3, [r3, #4]
 801761c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017620:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017624:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8017628:	b2b3      	uxth	r3, r6
 801762a:	1aca      	subs	r2, r1, r3
 801762c:	b292      	uxth	r2, r2
 801762e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8017632:	10d2      	asrs	r2, r2, #3
 8017634:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017638:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801763c:	4302      	orrs	r2, r0
 801763e:	1bcf      	subs	r7, r1, r7
 8017640:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017644:	1afb      	subs	r3, r7, r3
 8017646:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801764a:	e7b8      	b.n	80175be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801764c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801764e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017652:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017654:	f640 6333 	movw	r3, #3635	; 0xe33
 8017658:	4299      	cmp	r1, r3
 801765a:	d110      	bne.n	801767e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801765c:	6803      	ldr	r3, [r0, #0]
 801765e:	68db      	ldr	r3, [r3, #12]
 8017660:	4798      	blx	r3
 8017662:	7b41      	ldrb	r1, [r0, #13]
 8017664:	00cb      	lsls	r3, r1, #3
 8017666:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801766a:	7a03      	ldrb	r3, [r0, #8]
 801766c:	0648      	lsls	r0, r1, #25
 801766e:	ea43 0302 	orr.w	r3, r3, r2
 8017672:	bf44      	itt	mi
 8017674:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017678:	b21b      	sxthmi	r3, r3
 801767a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801767e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8017682:	443b      	add	r3, r7
 8017684:	4433      	add	r3, r6
 8017686:	b29b      	uxth	r3, r3
 8017688:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801768c:	462a      	mov	r2, r5
 801768e:	f105 0c08 	add.w	ip, r5, #8
 8017692:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017696:	4635      	mov	r5, r6
 8017698:	6810      	ldr	r0, [r2, #0]
 801769a:	6851      	ldr	r1, [r2, #4]
 801769c:	4637      	mov	r7, r6
 801769e:	c703      	stmia	r7!, {r0, r1}
 80176a0:	3208      	adds	r2, #8
 80176a2:	4562      	cmp	r2, ip
 80176a4:	463e      	mov	r6, r7
 80176a6:	d1f7      	bne.n	8017698 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80176a8:	6810      	ldr	r0, [r2, #0]
 80176aa:	6038      	str	r0, [r7, #0]
 80176ac:	8892      	ldrh	r2, [r2, #4]
 80176ae:	80ba      	strh	r2, [r7, #4]
 80176b0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80176b4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80176b8:	10db      	asrs	r3, r3, #3
 80176ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80176be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80176c2:	4313      	orrs	r3, r2
 80176c4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80176c8:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80176cc:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80176d0:	1a9b      	subs	r3, r3, r2
 80176d2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80176d6:	e772      	b.n	80175be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80176d8:	f023 0204 	bic.w	r2, r3, #4
 80176dc:	f640 611b 	movw	r1, #3611	; 0xe1b
 80176e0:	428a      	cmp	r2, r1
 80176e2:	d003      	beq.n	80176ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80176e4:	f640 621d 	movw	r2, #3613	; 0xe1d
 80176e8:	4293      	cmp	r3, r2
 80176ea:	d120      	bne.n	801772e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 80176ec:	3b01      	subs	r3, #1
 80176ee:	4602      	mov	r2, r0
 80176f0:	b29b      	uxth	r3, r3
 80176f2:	4629      	mov	r1, r5
 80176f4:	4620      	mov	r0, r4
 80176f6:	f7ff ff4c 	bl	8017592 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80176fa:	7b41      	ldrb	r1, [r0, #13]
 80176fc:	00cb      	lsls	r3, r1, #3
 80176fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017702:	7a03      	ldrb	r3, [r0, #8]
 8017704:	0649      	lsls	r1, r1, #25
 8017706:	ea43 0302 	orr.w	r3, r3, r2
 801770a:	bf44      	itt	mi
 801770c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017710:	b21b      	sxthmi	r3, r3
 8017712:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017716:	7b6b      	ldrb	r3, [r5, #13]
 8017718:	7aaa      	ldrb	r2, [r5, #10]
 801771a:	005b      	lsls	r3, r3, #1
 801771c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017720:	4313      	orrs	r3, r2
 8017722:	115a      	asrs	r2, r3, #5
 8017724:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017728:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801772c:	e036      	b.n	801779c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801772e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017732:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017736:	7a2a      	ldrb	r2, [r5, #8]
 8017738:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801773c:	ea42 0201 	orr.w	r2, r2, r1
 8017740:	bf1c      	itt	ne
 8017742:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017746:	b212      	sxthne	r2, r2
 8017748:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801774c:	f640 6109 	movw	r1, #3593	; 0xe09
 8017750:	f023 0210 	bic.w	r2, r3, #16
 8017754:	428a      	cmp	r2, r1
 8017756:	d003      	beq.n	8017760 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 8017758:	f640 6213 	movw	r2, #3603	; 0xe13
 801775c:	4293      	cmp	r3, r2
 801775e:	d12a      	bne.n	80177b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8017760:	7b6e      	ldrb	r6, [r5, #13]
 8017762:	0076      	lsls	r6, r6, #1
 8017764:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017768:	7aae      	ldrb	r6, [r5, #10]
 801776a:	4316      	orrs	r6, r2
 801776c:	f640 6213 	movw	r2, #3603	; 0xe13
 8017770:	4293      	cmp	r3, r2
 8017772:	bf18      	it	ne
 8017774:	f103 33ff 	addne.w	r3, r3, #4294967295
 8017778:	4602      	mov	r2, r0
 801777a:	bf14      	ite	ne
 801777c:	b29b      	uxthne	r3, r3
 801777e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8017782:	4629      	mov	r1, r5
 8017784:	4620      	mov	r0, r4
 8017786:	f7ff ff04 	bl	8017592 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801778a:	7b43      	ldrb	r3, [r0, #13]
 801778c:	7a82      	ldrb	r2, [r0, #10]
 801778e:	005b      	lsls	r3, r3, #1
 8017790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017794:	4313      	orrs	r3, r2
 8017796:	1af6      	subs	r6, r6, r3
 8017798:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801779c:	7b69      	ldrb	r1, [r5, #13]
 801779e:	00cb      	lsls	r3, r1, #3
 80177a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80177a4:	7a2b      	ldrb	r3, [r5, #8]
 80177a6:	4313      	orrs	r3, r2
 80177a8:	064a      	lsls	r2, r1, #25
 80177aa:	bf44      	itt	mi
 80177ac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80177b0:	b21b      	sxthmi	r3, r3
 80177b2:	1bdb      	subs	r3, r3, r7
 80177b4:	e747      	b.n	8017646 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80177b6:	2300      	movs	r3, #0
 80177b8:	e7b6      	b.n	8017728 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 80177ba:	bf00      	nop
 80177bc:	3fc00079 	.word	0x3fc00079

080177c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80177c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177c4:	4604      	mov	r4, r0
 80177c6:	b942      	cbnz	r2, 80177da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80177c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80177cc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80177d0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80177d4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80177d8:	e047      	b.n	801786a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80177da:	7b51      	ldrb	r1, [r2, #13]
 80177dc:	8893      	ldrh	r3, [r2, #4]
 80177de:	010d      	lsls	r5, r1, #4
 80177e0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80177e4:	79d5      	ldrb	r5, [r2, #7]
 80177e6:	4305      	orrs	r5, r0
 80177e8:	2d04      	cmp	r5, #4
 80177ea:	bfcc      	ite	gt
 80177ec:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80177f0:	f04f 0e01 	movle.w	lr, #1
 80177f4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80177f8:	f200 80ab 	bhi.w	8017952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80177fc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8017800:	4283      	cmp	r3, r0
 8017802:	d216      	bcs.n	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017804:	f240 605b 	movw	r0, #1627	; 0x65b
 8017808:	4283      	cmp	r3, r0
 801780a:	d859      	bhi.n	80178c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801780c:	f240 6057 	movw	r0, #1623	; 0x657
 8017810:	4283      	cmp	r3, r0
 8017812:	d20e      	bcs.n	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017814:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017818:	d24a      	bcs.n	80178b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801781a:	f240 604e 	movw	r0, #1614	; 0x64e
 801781e:	4283      	cmp	r3, r0
 8017820:	d207      	bcs.n	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017822:	f240 601a 	movw	r0, #1562	; 0x61a
 8017826:	4283      	cmp	r3, r0
 8017828:	d02a      	beq.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801782a:	d821      	bhi.n	8017870 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801782c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8017830:	d35b      	bcc.n	80178ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017832:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8017836:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801783a:	f040 80d0 	bne.w	80179de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801783e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8017842:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017846:	f040 80ca 	bne.w	80179de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801784a:	00cb      	lsls	r3, r1, #3
 801784c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017850:	7a13      	ldrb	r3, [r2, #8]
 8017852:	0649      	lsls	r1, r1, #25
 8017854:	ea43 0300 	orr.w	r3, r3, r0
 8017858:	bf44      	itt	mi
 801785a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801785e:	b21b      	sxthmi	r3, r3
 8017860:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017864:	1b5d      	subs	r5, r3, r5
 8017866:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801786a:	4610      	mov	r0, r2
 801786c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017870:	f240 604b 	movw	r0, #1611	; 0x64b
 8017874:	4283      	cmp	r3, r0
 8017876:	d338      	bcc.n	80178ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017878:	f240 604c 	movw	r0, #1612	; 0x64c
 801787c:	4283      	cmp	r3, r0
 801787e:	d9d8      	bls.n	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017880:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8017884:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8017888:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801788c:	f040 80f2 	bne.w	8017a74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8017890:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017894:	f040 80ee 	bne.w	8017a74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8017898:	00cb      	lsls	r3, r1, #3
 801789a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801789e:	7a13      	ldrb	r3, [r2, #8]
 80178a0:	064e      	lsls	r6, r1, #25
 80178a2:	ea43 0300 	orr.w	r3, r3, r0
 80178a6:	bf44      	itt	mi
 80178a8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80178ac:	b21b      	sxthmi	r3, r3
 80178ae:	e7d9      	b.n	8017864 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80178b0:	f240 6054 	movw	r0, #1620	; 0x654
 80178b4:	4283      	cmp	r3, r0
 80178b6:	d8e3      	bhi.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178b8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80178bc:	d9e0      	bls.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178be:	e7b8      	b.n	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178c0:	f240 6074 	movw	r0, #1652	; 0x674
 80178c4:	4283      	cmp	r3, r0
 80178c6:	d0b4      	beq.n	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178c8:	d82d      	bhi.n	8017926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80178ca:	f240 605e 	movw	r0, #1630	; 0x65e
 80178ce:	4283      	cmp	r3, r0
 80178d0:	d804      	bhi.n	80178dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80178d2:	f240 605d 	movw	r0, #1629	; 0x65d
 80178d6:	4283      	cmp	r3, r0
 80178d8:	d3d2      	bcc.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178da:	e7aa      	b.n	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178dc:	f240 605f 	movw	r0, #1631	; 0x65f
 80178e0:	4283      	cmp	r3, r0
 80178e2:	d0cd      	beq.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178e4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80178e8:	d0a3      	beq.n	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178ea:	00cb      	lsls	r3, r1, #3
 80178ec:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80178f0:	7a13      	ldrb	r3, [r2, #8]
 80178f2:	0649      	lsls	r1, r1, #25
 80178f4:	ea43 0300 	orr.w	r3, r3, r0
 80178f8:	bf44      	itt	mi
 80178fa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80178fe:	b21b      	sxthmi	r3, r3
 8017900:	1b5d      	subs	r5, r3, r5
 8017902:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017906:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801790a:	7b53      	ldrb	r3, [r2, #13]
 801790c:	015b      	lsls	r3, r3, #5
 801790e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017912:	7993      	ldrb	r3, [r2, #6]
 8017914:	430b      	orrs	r3, r1
 8017916:	005b      	lsls	r3, r3, #1
 8017918:	2105      	movs	r1, #5
 801791a:	fb93 f3f1 	sdiv	r3, r3, r1
 801791e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8017922:	440b      	add	r3, r1
 8017924:	e756      	b.n	80177d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8017926:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801792a:	4283      	cmp	r3, r0
 801792c:	d809      	bhi.n	8017942 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801792e:	f240 60df 	movw	r0, #1759	; 0x6df
 8017932:	4283      	cmp	r3, r0
 8017934:	f4bf af7d 	bcs.w	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017938:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801793c:	2b05      	cmp	r3, #5
 801793e:	d8d4      	bhi.n	80178ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017940:	e777      	b.n	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017942:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8017946:	4283      	cmp	r3, r0
 8017948:	d09a      	beq.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801794a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801794e:	4283      	cmp	r3, r0
 8017950:	e7ca      	b.n	80178e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017952:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8017956:	d22b      	bcs.n	80179b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8017958:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801795c:	4283      	cmp	r3, r0
 801795e:	d28f      	bcs.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017960:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017964:	4283      	cmp	r3, r0
 8017966:	d816      	bhi.n	8017996 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8017968:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801796c:	4283      	cmp	r3, r0
 801796e:	f4bf af60 	bcs.w	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017972:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8017976:	4283      	cmp	r3, r0
 8017978:	d80a      	bhi.n	8017990 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801797a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801797e:	4283      	cmp	r3, r0
 8017980:	f4bf af57 	bcs.w	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017984:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8017988:	4283      	cmp	r3, r0
 801798a:	f43f af79 	beq.w	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801798e:	e7ac      	b.n	80178ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017990:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8017994:	e7f8      	b.n	8017988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8017996:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801799a:	4283      	cmp	r3, r0
 801799c:	d802      	bhi.n	80179a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801799e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80179a2:	e798      	b.n	80178d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80179a4:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80179a8:	4283      	cmp	r3, r0
 80179aa:	f47f af42 	bne.w	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80179ae:	e767      	b.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80179b0:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80179b4:	4283      	cmp	r3, r0
 80179b6:	f43f af63 	beq.w	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80179ba:	d802      	bhi.n	80179c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80179bc:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80179c0:	e7f2      	b.n	80179a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80179c2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80179c6:	4283      	cmp	r3, r0
 80179c8:	d805      	bhi.n	80179d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80179ca:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80179ce:	4283      	cmp	r3, r0
 80179d0:	f4ff af2f 	bcc.w	8017832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80179d4:	e754      	b.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80179d6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80179da:	4283      	cmp	r3, r0
 80179dc:	e7af      	b.n	801793e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80179de:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80179e2:	4617      	mov	r7, r2
 80179e4:	f102 0808 	add.w	r8, r2, #8
 80179e8:	4666      	mov	r6, ip
 80179ea:	6838      	ldr	r0, [r7, #0]
 80179ec:	6879      	ldr	r1, [r7, #4]
 80179ee:	46e6      	mov	lr, ip
 80179f0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80179f4:	3708      	adds	r7, #8
 80179f6:	4547      	cmp	r7, r8
 80179f8:	46f4      	mov	ip, lr
 80179fa:	d1f6      	bne.n	80179ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80179fc:	6838      	ldr	r0, [r7, #0]
 80179fe:	f8ce 0000 	str.w	r0, [lr]
 8017a02:	88b9      	ldrh	r1, [r7, #4]
 8017a04:	f8ae 1004 	strh.w	r1, [lr, #4]
 8017a08:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017a0c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017a10:	d009      	beq.n	8017a26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8017a12:	7b51      	ldrb	r1, [r2, #13]
 8017a14:	7992      	ldrb	r2, [r2, #6]
 8017a16:	0149      	lsls	r1, r1, #5
 8017a18:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017a1c:	4311      	orrs	r1, r2
 8017a1e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017a22:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017a26:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017a2a:	b2ad      	uxth	r5, r5
 8017a2c:	d00d      	beq.n	8017a4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8017a2e:	442b      	add	r3, r5
 8017a30:	b29b      	uxth	r3, r3
 8017a32:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017a36:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017a3a:	10db      	asrs	r3, r3, #3
 8017a3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017a40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017a44:	4313      	orrs	r3, r2
 8017a46:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017a4a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017a4e:	00cb      	lsls	r3, r1, #3
 8017a50:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017a54:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017a58:	064f      	lsls	r7, r1, #25
 8017a5a:	ea43 0302 	orr.w	r3, r3, r2
 8017a5e:	bf44      	itt	mi
 8017a60:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017a64:	b21b      	sxthmi	r3, r3
 8017a66:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017a6a:	1b5b      	subs	r3, r3, r5
 8017a6c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017a70:	4632      	mov	r2, r6
 8017a72:	e6fa      	b.n	801786a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017a74:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8017a78:	4617      	mov	r7, r2
 8017a7a:	f102 0908 	add.w	r9, r2, #8
 8017a7e:	4666      	mov	r6, ip
 8017a80:	6838      	ldr	r0, [r7, #0]
 8017a82:	6879      	ldr	r1, [r7, #4]
 8017a84:	46e0      	mov	r8, ip
 8017a86:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8017a8a:	3708      	adds	r7, #8
 8017a8c:	454f      	cmp	r7, r9
 8017a8e:	46c4      	mov	ip, r8
 8017a90:	d1f6      	bne.n	8017a80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8017a92:	6838      	ldr	r0, [r7, #0]
 8017a94:	f8c8 0000 	str.w	r0, [r8]
 8017a98:	88b9      	ldrh	r1, [r7, #4]
 8017a9a:	f8a8 1004 	strh.w	r1, [r8, #4]
 8017a9e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017aa2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017aa6:	d009      	beq.n	8017abc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8017aa8:	7b51      	ldrb	r1, [r2, #13]
 8017aaa:	7992      	ldrb	r2, [r2, #6]
 8017aac:	0149      	lsls	r1, r1, #5
 8017aae:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017ab2:	4311      	orrs	r1, r2
 8017ab4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017ab8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017abc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017ac0:	d00e      	beq.n	8017ae0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8017ac2:	eba3 030e 	sub.w	r3, r3, lr
 8017ac6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017aca:	b29b      	uxth	r3, r3
 8017acc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017ad0:	10db      	asrs	r3, r3, #3
 8017ad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017ad6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017ada:	4313      	orrs	r3, r2
 8017adc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017ae0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017ae4:	00cb      	lsls	r3, r1, #3
 8017ae6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017aea:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017aee:	0648      	lsls	r0, r1, #25
 8017af0:	ea43 0302 	orr.w	r3, r3, r2
 8017af4:	bf44      	itt	mi
 8017af6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017afa:	b21b      	sxthmi	r3, r3
 8017afc:	1b5d      	subs	r5, r3, r5
 8017afe:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017b02:	e7b5      	b.n	8017a70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08017b04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b08:	461e      	mov	r6, r3
 8017b0a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017b0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017b10:	4604      	mov	r4, r0
 8017b12:	4617      	mov	r7, r2
 8017b14:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017b18:	f7f8 f978 	bl	800fe0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017b1c:	4605      	mov	r5, r0
 8017b1e:	b918      	cbnz	r0, 8017b28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017b20:	6030      	str	r0, [r6, #0]
 8017b22:	4628      	mov	r0, r5
 8017b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b28:	683b      	ldr	r3, [r7, #0]
 8017b2a:	4601      	mov	r1, r0
 8017b2c:	68db      	ldr	r3, [r3, #12]
 8017b2e:	4638      	mov	r0, r7
 8017b30:	4798      	blx	r3
 8017b32:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017b3a:	4602      	mov	r2, r0
 8017b3c:	6030      	str	r0, [r6, #0]
 8017b3e:	d213      	bcs.n	8017b68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8017b40:	4643      	mov	r3, r8
 8017b42:	4639      	mov	r1, r7
 8017b44:	4620      	mov	r0, r4
 8017b46:	f7ff fe3b 	bl	80177c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017b4a:	6030      	str	r0, [r6, #0]
 8017b4c:	6833      	ldr	r3, [r6, #0]
 8017b4e:	b143      	cbz	r3, 8017b62 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8017b50:	7b5a      	ldrb	r2, [r3, #13]
 8017b52:	7a9b      	ldrb	r3, [r3, #10]
 8017b54:	0052      	lsls	r2, r2, #1
 8017b56:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017b5a:	4313      	orrs	r3, r2
 8017b5c:	bf0c      	ite	eq
 8017b5e:	2301      	moveq	r3, #1
 8017b60:	2300      	movne	r3, #0
 8017b62:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017b66:	e7dc      	b.n	8017b22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8017b68:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017b6c:	b29b      	uxth	r3, r3
 8017b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8017b70:	d804      	bhi.n	8017b7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8017b72:	4639      	mov	r1, r7
 8017b74:	4620      	mov	r0, r4
 8017b76:	f7ff fd17 	bl	80175a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017b7a:	e7e6      	b.n	8017b4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017b7c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d0e3      	beq.n	8017b4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017b84:	f640 1302 	movw	r3, #2306	; 0x902
 8017b88:	429d      	cmp	r5, r3
 8017b8a:	d1df      	bne.n	8017b4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017b8c:	4601      	mov	r1, r0
 8017b8e:	4620      	mov	r0, r4
 8017b90:	f7ff fcdc 	bl	801754c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017b94:	e7d9      	b.n	8017b4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08017b96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8017b96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b9a:	461e      	mov	r6, r3
 8017b9c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017b9e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017ba2:	4604      	mov	r4, r0
 8017ba4:	4617      	mov	r7, r2
 8017ba6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017baa:	f7f8 f92f 	bl	800fe0c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017bae:	4605      	mov	r5, r0
 8017bb0:	b918      	cbnz	r0, 8017bba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8017bb2:	6030      	str	r0, [r6, #0]
 8017bb4:	4628      	mov	r0, r5
 8017bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bba:	683b      	ldr	r3, [r7, #0]
 8017bbc:	4601      	mov	r1, r0
 8017bbe:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8017bc2:	4638      	mov	r0, r7
 8017bc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017bc8:	47c8      	blx	r9
 8017bca:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017bd2:	4602      	mov	r2, r0
 8017bd4:	6030      	str	r0, [r6, #0]
 8017bd6:	d213      	bcs.n	8017c00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8017bd8:	4643      	mov	r3, r8
 8017bda:	4639      	mov	r1, r7
 8017bdc:	4620      	mov	r0, r4
 8017bde:	f7ff fdef 	bl	80177c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017be2:	6030      	str	r0, [r6, #0]
 8017be4:	6833      	ldr	r3, [r6, #0]
 8017be6:	b143      	cbz	r3, 8017bfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8017be8:	7b5a      	ldrb	r2, [r3, #13]
 8017bea:	7a9b      	ldrb	r3, [r3, #10]
 8017bec:	0052      	lsls	r2, r2, #1
 8017bee:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017bf2:	4313      	orrs	r3, r2
 8017bf4:	bf0c      	ite	eq
 8017bf6:	2301      	moveq	r3, #1
 8017bf8:	2300      	movne	r3, #0
 8017bfa:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017bfe:	e7d9      	b.n	8017bb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8017c00:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017c04:	b29b      	uxth	r3, r3
 8017c06:	2b7f      	cmp	r3, #127	; 0x7f
 8017c08:	d804      	bhi.n	8017c14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8017c0a:	4639      	mov	r1, r7
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	f7ff fccb 	bl	80175a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017c12:	e7e6      	b.n	8017be2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8017c14:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d0e3      	beq.n	8017be4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017c1c:	f640 1302 	movw	r3, #2306	; 0x902
 8017c20:	429d      	cmp	r5, r3
 8017c22:	d1df      	bne.n	8017be4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017c24:	4601      	mov	r1, r0
 8017c26:	4620      	mov	r0, r4
 8017c28:	f7ff fc90 	bl	801754c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017c2c:	e7d9      	b.n	8017be2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08017c2e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017c2e:	b510      	push	{r4, lr}
 8017c30:	4604      	mov	r4, r0
 8017c32:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8017c36:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017c38:	b1f1      	cbz	r1, 8017c78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8017c3a:	2b0a      	cmp	r3, #10
 8017c3c:	d02f      	beq.n	8017c9e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8017c3e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8017c40:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017c44:	3901      	subs	r1, #1
 8017c46:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8017c48:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8017c4c:	1c51      	adds	r1, r2, #1
 8017c4e:	b289      	uxth	r1, r1
 8017c50:	2901      	cmp	r1, #1
 8017c52:	bf84      	itt	hi
 8017c54:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017c58:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8017c5a:	f103 0201 	add.w	r2, r3, #1
 8017c5e:	8722      	strh	r2, [r4, #56]	; 0x38
 8017c60:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017c62:	bf98      	it	ls
 8017c64:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8017c66:	4413      	add	r3, r2
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	2b09      	cmp	r3, #9
 8017c6c:	bf88      	it	hi
 8017c6e:	3b0a      	subhi	r3, #10
 8017c70:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017c74:	8458      	strh	r0, [r3, #34]	; 0x22
 8017c76:	e7dc      	b.n	8017c32 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017c78:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017c7a:	2b0a      	cmp	r3, #10
 8017c7c:	d00f      	beq.n	8017c9e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8017c7e:	4620      	mov	r0, r4
 8017c80:	f7ff fc12 	bl	80174a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8017c84:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017c86:	1c5a      	adds	r2, r3, #1
 8017c88:	8722      	strh	r2, [r4, #56]	; 0x38
 8017c8a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017c8c:	4413      	add	r3, r2
 8017c8e:	b29b      	uxth	r3, r3
 8017c90:	2b09      	cmp	r3, #9
 8017c92:	bf88      	it	hi
 8017c94:	3b0a      	subhi	r3, #10
 8017c96:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017c9a:	8458      	strh	r0, [r3, #34]	; 0x22
 8017c9c:	e7ec      	b.n	8017c78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8017c9e:	bd10      	pop	{r4, pc}

08017ca0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017ca0:	b538      	push	{r3, r4, r5, lr}
 8017ca2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017ca4:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8017ca8:	4604      	mov	r4, r0
 8017caa:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8017cac:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8017cae:	3a01      	subs	r2, #1
 8017cb0:	8702      	strh	r2, [r0, #56]	; 0x38
 8017cb2:	1c5a      	adds	r2, r3, #1
 8017cb4:	b292      	uxth	r2, r2
 8017cb6:	2a09      	cmp	r2, #9
 8017cb8:	bf86      	itte	hi
 8017cba:	3b09      	subhi	r3, #9
 8017cbc:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8017cbe:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8017cc0:	f7ff ffb5 	bl	8017c2e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017cc4:	8c23      	ldrh	r3, [r4, #32]
 8017cc6:	2b01      	cmp	r3, #1
 8017cc8:	bf9c      	itt	ls
 8017cca:	3301      	addls	r3, #1
 8017ccc:	8423      	strhls	r3, [r4, #32]
 8017cce:	8be3      	ldrh	r3, [r4, #30]
 8017cd0:	b90b      	cbnz	r3, 8017cd6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8017cd2:	2302      	movs	r3, #2
 8017cd4:	83e3      	strh	r3, [r4, #30]
 8017cd6:	8be3      	ldrh	r3, [r4, #30]
 8017cd8:	3b01      	subs	r3, #1
 8017cda:	b29b      	uxth	r3, r3
 8017cdc:	83e3      	strh	r3, [r4, #30]
 8017cde:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017ce2:	4628      	mov	r0, r5
 8017ce4:	8365      	strh	r5, [r4, #26]
 8017ce6:	bd38      	pop	{r3, r4, r5, pc}

08017ce8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017ce8:	428a      	cmp	r2, r1
 8017cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cee:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8017cf0:	d931      	bls.n	8017d56 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8017cf2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8017cf4:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8017cf8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8017cfc:	19ee      	adds	r6, r5, r7
 8017cfe:	1a54      	subs	r4, r2, r1
 8017d00:	3e01      	subs	r6, #1
 8017d02:	fa1f fe84 	uxth.w	lr, r4
 8017d06:	b2b4      	uxth	r4, r6
 8017d08:	eba4 090e 	sub.w	r9, r4, lr
 8017d0c:	fa1f f989 	uxth.w	r9, r9
 8017d10:	2c09      	cmp	r4, #9
 8017d12:	4626      	mov	r6, r4
 8017d14:	bf88      	it	hi
 8017d16:	f1a4 060a 	subhi.w	r6, r4, #10
 8017d1a:	f1bc 0f00 	cmp.w	ip, #0
 8017d1e:	bf08      	it	eq
 8017d20:	f04f 0c02 	moveq.w	ip, #2
 8017d24:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017d28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017d2c:	fa1f fc8c 	uxth.w	ip, ip
 8017d30:	3c01      	subs	r4, #1
 8017d32:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8017d36:	b2a4      	uxth	r4, r4
 8017d38:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017d3c:	454c      	cmp	r4, r9
 8017d3e:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8017d42:	d1e5      	bne.n	8017d10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017d44:	eba5 050e 	sub.w	r5, r5, lr
 8017d48:	eb0e 0408 	add.w	r4, lr, r8
 8017d4c:	8705      	strh	r5, [r0, #56]	; 0x38
 8017d4e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8017d52:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8017d56:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8017d58:	1a64      	subs	r4, r4, r1
 8017d5a:	4439      	add	r1, r7
 8017d5c:	b289      	uxth	r1, r1
 8017d5e:	2909      	cmp	r1, #9
 8017d60:	bf88      	it	hi
 8017d62:	390a      	subhi	r1, #10
 8017d64:	8704      	strh	r4, [r0, #56]	; 0x38
 8017d66:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017d68:	250a      	movs	r5, #10
 8017d6a:	b18a      	cbz	r2, 8017d90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8017d6c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8017d6e:	3a01      	subs	r2, #1
 8017d70:	b292      	uxth	r2, r2
 8017d72:	3101      	adds	r1, #1
 8017d74:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017d78:	8701      	strh	r1, [r0, #56]	; 0x38
 8017d7a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017d7c:	b901      	cbnz	r1, 8017d80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8017d7e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017d80:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017d82:	3901      	subs	r1, #1
 8017d84:	b289      	uxth	r1, r1
 8017d86:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017d88:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017d8c:	844c      	strh	r4, [r1, #34]	; 0x22
 8017d8e:	e7ec      	b.n	8017d6a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8017d90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d94:	f7ff bf4b 	b.w	8017c2e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08017d98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017d98:	b570      	push	{r4, r5, r6, lr}
 8017d9a:	2500      	movs	r5, #0
 8017d9c:	4295      	cmp	r5, r2
 8017d9e:	d011      	beq.n	8017dc4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8017da0:	8bc4      	ldrh	r4, [r0, #30]
 8017da2:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017da6:	4414      	add	r4, r2
 8017da8:	3c01      	subs	r4, #1
 8017daa:	1b64      	subs	r4, r4, r5
 8017dac:	b2a4      	uxth	r4, r4
 8017dae:	2c01      	cmp	r4, #1
 8017db0:	bf88      	it	hi
 8017db2:	3c02      	subhi	r4, #2
 8017db4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017db8:	8b64      	ldrh	r4, [r4, #26]
 8017dba:	42b4      	cmp	r4, r6
 8017dbc:	d117      	bne.n	8017dee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017dbe:	3501      	adds	r5, #1
 8017dc0:	b2ad      	uxth	r5, r5
 8017dc2:	e7eb      	b.n	8017d9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8017dc4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017dc8:	2400      	movs	r4, #0
 8017dca:	4413      	add	r3, r2
 8017dcc:	b2a2      	uxth	r2, r4
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	da0f      	bge.n	8017df2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017dd2:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8017dd4:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017dd8:	4432      	add	r2, r6
 8017dda:	b292      	uxth	r2, r2
 8017ddc:	2a09      	cmp	r2, #9
 8017dde:	bf88      	it	hi
 8017de0:	3a0a      	subhi	r2, #10
 8017de2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017de6:	3401      	adds	r4, #1
 8017de8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8017dea:	42aa      	cmp	r2, r5
 8017dec:	d0ee      	beq.n	8017dcc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017dee:	2000      	movs	r0, #0
 8017df0:	bd70      	pop	{r4, r5, r6, pc}
 8017df2:	2001      	movs	r0, #1
 8017df4:	e7fc      	b.n	8017df0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017df6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017df6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dfa:	4605      	mov	r5, r0
 8017dfc:	4616      	mov	r6, r2
 8017dfe:	1c8c      	adds	r4, r1, #2
 8017e00:	8809      	ldrh	r1, [r1, #0]
 8017e02:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017e06:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017e0a:	42b3      	cmp	r3, r6
 8017e0c:	d124      	bne.n	8017e58 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017e0e:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017e12:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017e16:	f001 070f 	and.w	r7, r1, #15
 8017e1a:	f8cd 8000 	str.w	r8, [sp]
 8017e1e:	464b      	mov	r3, r9
 8017e20:	4652      	mov	r2, sl
 8017e22:	4621      	mov	r1, r4
 8017e24:	4628      	mov	r0, r5
 8017e26:	f7ff ffb7 	bl	8017d98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017e2a:	4683      	mov	fp, r0
 8017e2c:	b168      	cbz	r0, 8017e4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017e2e:	eb0a 0109 	add.w	r1, sl, r9
 8017e32:	4441      	add	r1, r8
 8017e34:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017e38:	463a      	mov	r2, r7
 8017e3a:	4649      	mov	r1, r9
 8017e3c:	4628      	mov	r0, r5
 8017e3e:	f7ff ff53 	bl	8017ce8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017e42:	4658      	mov	r0, fp
 8017e44:	b003      	add	sp, #12
 8017e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e4a:	eb07 010a 	add.w	r1, r7, sl
 8017e4e:	4449      	add	r1, r9
 8017e50:	4441      	add	r1, r8
 8017e52:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017e56:	e7d2      	b.n	8017dfe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8017e58:	f04f 0b00 	mov.w	fp, #0
 8017e5c:	e7f1      	b.n	8017e42 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017e5e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017e5e:	b570      	push	{r4, r5, r6, lr}
 8017e60:	8810      	ldrh	r0, [r2, #0]
 8017e62:	4298      	cmp	r0, r3
 8017e64:	d817      	bhi.n	8017e96 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017e66:	1e48      	subs	r0, r1, #1
 8017e68:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017e6c:	4298      	cmp	r0, r3
 8017e6e:	d312      	bcc.n	8017e96 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017e70:	2400      	movs	r4, #0
 8017e72:	428c      	cmp	r4, r1
 8017e74:	d20f      	bcs.n	8017e96 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017e76:	1860      	adds	r0, r4, r1
 8017e78:	1040      	asrs	r0, r0, #1
 8017e7a:	0085      	lsls	r5, r0, #2
 8017e7c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017e80:	42b3      	cmp	r3, r6
 8017e82:	d902      	bls.n	8017e8a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017e84:	3001      	adds	r0, #1
 8017e86:	b284      	uxth	r4, r0
 8017e88:	e7f3      	b.n	8017e72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017e8a:	d201      	bcs.n	8017e90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8017e8c:	b281      	uxth	r1, r0
 8017e8e:	e7f0      	b.n	8017e72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017e90:	442a      	add	r2, r5
 8017e92:	8850      	ldrh	r0, [r2, #2]
 8017e94:	bd70      	pop	{r4, r5, r6, pc}
 8017e96:	2000      	movs	r0, #0
 8017e98:	e7fc      	b.n	8017e94 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08017e9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8017e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e9e:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8017ea0:	886f      	ldrh	r7, [r5, #2]
 8017ea2:	4604      	mov	r4, r0
 8017ea4:	087f      	lsrs	r7, r7, #1
 8017ea6:	260b      	movs	r6, #11
 8017ea8:	3e01      	subs	r6, #1
 8017eaa:	d013      	beq.n	8017ed4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017eac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017eae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017eb2:	462a      	mov	r2, r5
 8017eb4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017eb8:	4639      	mov	r1, r7
 8017eba:	4643      	mov	r3, r8
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	f7ff ffce 	bl	8017e5e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017ec2:	b138      	cbz	r0, 8017ed4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017ec4:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017ec8:	4642      	mov	r2, r8
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f7ff ff93 	bl	8017df6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017ed0:	2800      	cmp	r0, #0
 8017ed2:	d1e9      	bne.n	8017ea8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ed8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017ed8:	b570      	push	{r4, r5, r6, lr}
 8017eda:	694a      	ldr	r2, [r1, #20]
 8017edc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017ede:	684b      	ldr	r3, [r1, #4]
 8017ee0:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017ee2:	1b54      	subs	r4, r2, r5
 8017ee4:	f000 8106 	beq.w	80180f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017ee8:	1b9b      	subs	r3, r3, r6
 8017eea:	d003      	beq.n	8017ef4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017eec:	4363      	muls	r3, r4
 8017eee:	2210      	movs	r2, #16
 8017ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8017ef4:	680c      	ldr	r4, [r1, #0]
 8017ef6:	698a      	ldr	r2, [r1, #24]
 8017ef8:	1b65      	subs	r5, r4, r5
 8017efa:	f000 80fd 	beq.w	80180f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017efe:	1b92      	subs	r2, r2, r6
 8017f00:	d003      	beq.n	8017f0a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017f02:	436a      	muls	r2, r5
 8017f04:	2410      	movs	r4, #16
 8017f06:	fb92 f2f4 	sdiv	r2, r2, r4
 8017f0a:	1a9b      	subs	r3, r3, r2
 8017f0c:	ee07 3a90 	vmov	s15, r3
 8017f10:	ed9f 4a88 	vldr	s8, [pc, #544]	; 8018134 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017f1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017f20:	460a      	mov	r2, r1
 8017f22:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017f26:	4603      	mov	r3, r0
 8017f28:	f100 040c 	add.w	r4, r0, #12
 8017f2c:	eeb1 6a43 	vneg.f32	s12, s6
 8017f30:	edd2 7a02 	vldr	s15, [r2, #8]
 8017f34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017f38:	3214      	adds	r2, #20
 8017f3a:	ece3 6a01 	vstmia	r3!, {s13}
 8017f3e:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017f42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017f46:	429c      	cmp	r4, r3
 8017f48:	edc3 7a02 	vstr	s15, [r3, #8]
 8017f4c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017f50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017f54:	edc3 7a05 	vstr	s15, [r3, #20]
 8017f58:	d1ea      	bne.n	8017f30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8017f5a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017f5c:	698b      	ldr	r3, [r1, #24]
 8017f5e:	edd0 4a02 	vldr	s9, [r0, #8]
 8017f62:	edd0 3a00 	vldr	s7, [r0]
 8017f66:	edd0 6a01 	vldr	s13, [r0, #4]
 8017f6a:	ed90 5a05 	vldr	s10, [r0, #20]
 8017f6e:	ed90 2a03 	vldr	s4, [r0, #12]
 8017f72:	edd0 5a04 	vldr	s11, [r0, #16]
 8017f76:	ed90 1a07 	vldr	s2, [r0, #28]
 8017f7a:	edd0 2a06 	vldr	s5, [r0, #24]
 8017f7e:	1a9b      	subs	r3, r3, r2
 8017f80:	ee07 3a90 	vmov	s15, r3
 8017f84:	684b      	ldr	r3, [r1, #4]
 8017f86:	1a9b      	subs	r3, r3, r2
 8017f88:	ee07 3a10 	vmov	s14, r3
 8017f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f90:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017f94:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017f98:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017f9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017fa0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017fa4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017fa8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017fac:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017fb0:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017fb4:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017fb8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8017fbc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017fbe:	694a      	ldr	r2, [r1, #20]
 8017fc0:	1b13      	subs	r3, r2, r4
 8017fc2:	ee07 3a10 	vmov	s14, r3
 8017fc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017fca:	680b      	ldr	r3, [r1, #0]
 8017fcc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017fd0:	1b1b      	subs	r3, r3, r4
 8017fd2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017fd6:	ee07 3a10 	vmov	s14, r3
 8017fda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017fde:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017fe2:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017fe6:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017fea:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8017fee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017ff0:	698b      	ldr	r3, [r1, #24]
 8017ff2:	1a9b      	subs	r3, r3, r2
 8017ff4:	ee06 3a90 	vmov	s13, r3
 8017ff8:	684b      	ldr	r3, [r1, #4]
 8017ffa:	1a9b      	subs	r3, r3, r2
 8017ffc:	ee07 3a10 	vmov	s14, r3
 8018000:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018008:	ee66 6a84 	vmul.f32	s13, s13, s8
 801800c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018010:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018014:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018018:	ee66 6a83 	vmul.f32	s13, s13, s6
 801801c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8018020:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018022:	694a      	ldr	r2, [r1, #20]
 8018024:	1b13      	subs	r3, r2, r4
 8018026:	ee07 3a10 	vmov	s14, r3
 801802a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801802e:	680b      	ldr	r3, [r1, #0]
 8018030:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018034:	1b1b      	subs	r3, r3, r4
 8018036:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801803a:	ee07 3a10 	vmov	s14, r3
 801803e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018042:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018046:	eea5 5a87 	vfma.f32	s10, s11, s14
 801804a:	edd0 5a08 	vldr	s11, [r0, #32]
 801804e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018052:	ee31 1a65 	vsub.f32	s2, s2, s11
 8018056:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801805a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801805c:	698b      	ldr	r3, [r1, #24]
 801805e:	1a9b      	subs	r3, r3, r2
 8018060:	ee07 3a10 	vmov	s14, r3
 8018064:	684b      	ldr	r3, [r1, #4]
 8018066:	1a9b      	subs	r3, r3, r2
 8018068:	ee01 3a90 	vmov	s3, r3
 801806c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018070:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018074:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018078:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801807c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8018080:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018084:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018088:	ee27 7a03 	vmul.f32	s14, s14, s6
 801808c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018090:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018092:	694a      	ldr	r2, [r1, #20]
 8018094:	1b13      	subs	r3, r2, r4
 8018096:	ee03 3a10 	vmov	s6, r3
 801809a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801809e:	680b      	ldr	r3, [r1, #0]
 80180a0:	ee23 3a04 	vmul.f32	s6, s6, s8
 80180a4:	1b1b      	subs	r3, r3, r4
 80180a6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80180aa:	ee03 3a10 	vmov	s6, r3
 80180ae:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80180b2:	ee23 4a04 	vmul.f32	s8, s6, s8
 80180b6:	eee1 5a04 	vfma.f32	s11, s2, s8
 80180ba:	ee25 6a86 	vmul.f32	s12, s11, s12
 80180be:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80180c2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80180c6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80180ca:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80180ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180d2:	dd13      	ble.n	80180fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80180d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80180d8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80180dc:	63c3      	str	r3, [r0, #60]	; 0x3c
 80180de:	eee3 7a87 	vfma.f32	s15, s7, s14
 80180e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80180e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ea:	dd15      	ble.n	8018118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80180ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80180f0:	6403      	str	r3, [r0, #64]	; 0x40
 80180f2:	bd70      	pop	{r4, r5, r6, pc}
 80180f4:	4623      	mov	r3, r4
 80180f6:	e6fd      	b.n	8017ef4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80180f8:	462a      	mov	r2, r5
 80180fa:	e706      	b.n	8017f0a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80180fc:	d502      	bpl.n	8018104 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80180fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018102:	e7e9      	b.n	80180d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018104:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018108:	eea3 2a85 	vfma.f32	s4, s7, s10
 801810c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018114:	dade      	bge.n	80180d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018116:	e7f2      	b.n	80180fe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018118:	d502      	bpl.n	8018120 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801811a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801811e:	e7e7      	b.n	80180f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8018120:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018124:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018128:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801812c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018130:	dadc      	bge.n	80180ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018132:	e7f2      	b.n	801811a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018134:	3d800000 	.word	0x3d800000

08018138 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801813c:	2714      	movs	r7, #20
 801813e:	435f      	muls	r7, r3
 8018140:	eb02 0c07 	add.w	ip, r2, r7
 8018144:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018148:	f115 0e0f 	adds.w	lr, r5, #15
 801814c:	f100 80a2 	bmi.w	8018294 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018150:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018154:	9c08      	ldr	r4, [sp, #32]
 8018156:	f8c0 e014 	str.w	lr, [r0, #20]
 801815a:	2614      	movs	r6, #20
 801815c:	4366      	muls	r6, r4
 801815e:	eb02 0806 	add.w	r8, r2, r6
 8018162:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018166:	f115 040f 	adds.w	r4, r5, #15
 801816a:	f100 809f 	bmi.w	80182ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801816e:	1124      	asrs	r4, r4, #4
 8018170:	eba4 040e 	sub.w	r4, r4, lr
 8018174:	6184      	str	r4, [r0, #24]
 8018176:	2c00      	cmp	r4, #0
 8018178:	f000 808a 	beq.w	8018290 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801817c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018180:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018184:	5995      	ldr	r5, [r2, r6]
 8018186:	eba4 0809 	sub.w	r8, r4, r9
 801818a:	59d4      	ldr	r4, [r2, r7]
 801818c:	eba5 0a04 	sub.w	sl, r5, r4
 8018190:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018194:	fb0e fe05 	mul.w	lr, lr, r5
 8018198:	fb0a ee19 	mls	lr, sl, r9, lr
 801819c:	fb08 e404 	mla	r4, r8, r4, lr
 80181a0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80181a4:	3c01      	subs	r4, #1
 80181a6:	19a4      	adds	r4, r4, r6
 80181a8:	f100 808c 	bmi.w	80182c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80181ac:	fb94 fef6 	sdiv	lr, r4, r6
 80181b0:	f8c0 e000 	str.w	lr, [r0]
 80181b4:	fb06 441e 	mls	r4, r6, lr, r4
 80181b8:	6104      	str	r4, [r0, #16]
 80181ba:	2d00      	cmp	r5, #0
 80181bc:	f2c0 8095 	blt.w	80182ea <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80181c0:	fb95 f4f6 	sdiv	r4, r5, r6
 80181c4:	6044      	str	r4, [r0, #4]
 80181c6:	fb06 5514 	mls	r5, r6, r4, r5
 80181ca:	6085      	str	r5, [r0, #8]
 80181cc:	60c6      	str	r6, [r0, #12]
 80181ce:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80181d2:	6945      	ldr	r5, [r0, #20]
 80181d4:	59d2      	ldr	r2, [r2, r7]
 80181d6:	eddf 6a4d 	vldr	s13, [pc, #308]	; 801830c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80181da:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80181de:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80181e2:	ee07 4a10 	vmov	s14, r4
 80181e6:	6804      	ldr	r4, [r0, #0]
 80181e8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80181ec:	ee07 2a90 	vmov	s15, r2
 80181f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80181f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181f8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80181fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018204:	edd3 6a00 	vldr	s13, [r3]
 8018208:	eee6 6a07 	vfma.f32	s13, s12, s14
 801820c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8018210:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018214:	edc0 6a07 	vstr	s13, [r0, #28]
 8018218:	edd0 6a01 	vldr	s13, [r0, #4]
 801821c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8018220:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018224:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018228:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801822c:	ed80 6a08 	vstr	s12, [r0, #32]
 8018230:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8018232:	6242      	str	r2, [r0, #36]	; 0x24
 8018234:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8018238:	ed93 6a03 	vldr	s12, [r3, #12]
 801823c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018240:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018244:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018248:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801824c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018250:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018254:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018258:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801825c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801825e:	6302      	str	r2, [r0, #48]	; 0x30
 8018260:	ed93 6a06 	vldr	s12, [r3, #24]
 8018264:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8018268:	eea5 6a87 	vfma.f32	s12, s11, s14
 801826c:	eeb0 7a46 	vmov.f32	s14, s12
 8018270:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018274:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018278:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801827c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8018280:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018284:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018288:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801828c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801828e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018294:	f1c5 0501 	rsb	r5, r5, #1
 8018298:	f015 050f 	ands.w	r5, r5, #15
 801829c:	bf18      	it	ne
 801829e:	2501      	movne	r5, #1
 80182a0:	2410      	movs	r4, #16
 80182a2:	fb9e fef4 	sdiv	lr, lr, r4
 80182a6:	ebae 0e05 	sub.w	lr, lr, r5
 80182aa:	e753      	b.n	8018154 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80182ac:	f1c5 0501 	rsb	r5, r5, #1
 80182b0:	f015 050f 	ands.w	r5, r5, #15
 80182b4:	bf18      	it	ne
 80182b6:	2501      	movne	r5, #1
 80182b8:	f04f 0910 	mov.w	r9, #16
 80182bc:	fb94 f4f9 	sdiv	r4, r4, r9
 80182c0:	1b64      	subs	r4, r4, r5
 80182c2:	e755      	b.n	8018170 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80182c4:	4264      	negs	r4, r4
 80182c6:	fb94 fef6 	sdiv	lr, r4, r6
 80182ca:	f1ce 0800 	rsb	r8, lr, #0
 80182ce:	fb06 441e 	mls	r4, r6, lr, r4
 80182d2:	f8c0 8000 	str.w	r8, [r0]
 80182d6:	6104      	str	r4, [r0, #16]
 80182d8:	2c00      	cmp	r4, #0
 80182da:	f43f af6e 	beq.w	80181ba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80182de:	ea6f 0e0e 	mvn.w	lr, lr
 80182e2:	f8c0 e000 	str.w	lr, [r0]
 80182e6:	1b34      	subs	r4, r6, r4
 80182e8:	e766      	b.n	80181b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80182ea:	426d      	negs	r5, r5
 80182ec:	fb95 f4f6 	sdiv	r4, r5, r6
 80182f0:	f1c4 0e00 	rsb	lr, r4, #0
 80182f4:	fb06 5514 	mls	r5, r6, r4, r5
 80182f8:	f8c0 e004 	str.w	lr, [r0, #4]
 80182fc:	6085      	str	r5, [r0, #8]
 80182fe:	2d00      	cmp	r5, #0
 8018300:	f43f af64 	beq.w	80181cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018304:	43e4      	mvns	r4, r4
 8018306:	6044      	str	r4, [r0, #4]
 8018308:	1b75      	subs	r5, r6, r5
 801830a:	e75e      	b.n	80181ca <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801830c:	3d800000 	.word	0x3d800000

08018310 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018310:	4602      	mov	r2, r0
 8018312:	b148      	cbz	r0, 8018328 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018314:	2300      	movs	r3, #0
 8018316:	b298      	uxth	r0, r3
 8018318:	3301      	adds	r3, #1
 801831a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801831e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018322:	2900      	cmp	r1, #0
 8018324:	d1f7      	bne.n	8018316 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018326:	4770      	bx	lr
 8018328:	4770      	bx	lr

0801832a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801832a:	b530      	push	{r4, r5, lr}
 801832c:	4604      	mov	r4, r0
 801832e:	b159      	cbz	r1, 8018348 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018330:	b148      	cbz	r0, 8018346 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018332:	2300      	movs	r3, #0
 8018334:	b298      	uxth	r0, r3
 8018336:	4282      	cmp	r2, r0
 8018338:	d905      	bls.n	8018346 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801833a:	5ccd      	ldrb	r5, [r1, r3]
 801833c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018340:	3301      	adds	r3, #1
 8018342:	2d00      	cmp	r5, #0
 8018344:	d1f6      	bne.n	8018334 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018346:	bd30      	pop	{r4, r5, pc}
 8018348:	4608      	mov	r0, r1
 801834a:	e7fc      	b.n	8018346 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801834c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801834e:	b08b      	sub	sp, #44	; 0x2c
 8018350:	468c      	mov	ip, r1
 8018352:	2100      	movs	r1, #0
 8018354:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018358:	4604      	mov	r4, r0
 801835a:	261f      	movs	r6, #31
 801835c:	af01      	add	r7, sp, #4
 801835e:	fb94 fef3 	sdiv	lr, r4, r3
 8018362:	fb03 441e 	mls	r4, r3, lr, r4
 8018366:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801836a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801836e:	b2ec      	uxtb	r4, r5
 8018370:	2d09      	cmp	r5, #9
 8018372:	bfd4      	ite	le
 8018374:	3430      	addle	r4, #48	; 0x30
 8018376:	3457      	addgt	r4, #87	; 0x57
 8018378:	b2e4      	uxtb	r4, r4
 801837a:	55bc      	strb	r4, [r7, r6]
 801837c:	4674      	mov	r4, lr
 801837e:	1e71      	subs	r1, r6, #1
 8018380:	b974      	cbnz	r4, 80183a0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 8018382:	2800      	cmp	r0, #0
 8018384:	da05      	bge.n	8018392 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 8018386:	ab0a      	add	r3, sp, #40	; 0x28
 8018388:	4419      	add	r1, r3
 801838a:	232d      	movs	r3, #45	; 0x2d
 801838c:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018390:	1eb1      	subs	r1, r6, #2
 8018392:	3101      	adds	r1, #1
 8018394:	4439      	add	r1, r7
 8018396:	4660      	mov	r0, ip
 8018398:	f7ff ffc7 	bl	801832a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801839c:	b00b      	add	sp, #44	; 0x2c
 801839e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183a0:	460e      	mov	r6, r1
 80183a2:	e7dc      	b.n	801835e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

080183a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80183a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183a6:	b08b      	sub	sp, #44	; 0x2c
 80183a8:	468c      	mov	ip, r1
 80183aa:	2100      	movs	r1, #0
 80183ac:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80183b0:	ae01      	add	r6, sp, #4
 80183b2:	211f      	movs	r1, #31
 80183b4:	fbb0 f7f3 	udiv	r7, r0, r3
 80183b8:	fb03 0517 	mls	r5, r3, r7, r0
 80183bc:	b2ec      	uxtb	r4, r5
 80183be:	2d09      	cmp	r5, #9
 80183c0:	bfd4      	ite	le
 80183c2:	3430      	addle	r4, #48	; 0x30
 80183c4:	3457      	addgt	r4, #87	; 0x57
 80183c6:	b2e4      	uxtb	r4, r4
 80183c8:	558c      	strb	r4, [r1, r6]
 80183ca:	4638      	mov	r0, r7
 80183cc:	1e4c      	subs	r4, r1, #1
 80183ce:	b92f      	cbnz	r7, 80183dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 80183d0:	4431      	add	r1, r6
 80183d2:	4660      	mov	r0, ip
 80183d4:	f7ff ffa9 	bl	801832a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80183d8:	b00b      	add	sp, #44	; 0x2c
 80183da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183dc:	4621      	mov	r1, r4
 80183de:	e7e9      	b.n	80183b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

080183e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 80183e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e4:	4691      	mov	r9, r2
 80183e6:	b085      	sub	sp, #20
 80183e8:	6802      	ldr	r2, [r0, #0]
 80183ea:	9201      	str	r2, [sp, #4]
 80183ec:	4688      	mov	r8, r1
 80183ee:	4683      	mov	fp, r0
 80183f0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80183f4:	9103      	str	r1, [sp, #12]
 80183f6:	4610      	mov	r0, r2
 80183f8:	461c      	mov	r4, r3
 80183fa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80183fe:	9302      	str	r3, [sp, #8]
 8018400:	f7ff ff86 	bl	8018310 <_ZN8touchgfx7Unicode6strlenEPKt>
 8018404:	f1b8 0f00 	cmp.w	r8, #0
 8018408:	bf0c      	ite	eq
 801840a:	4684      	moveq	ip, r0
 801840c:	f100 0c01 	addne.w	ip, r0, #1
 8018410:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8018414:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8018418:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801841a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801841c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8018420:	9903      	ldr	r1, [sp, #12]
 8018422:	fa1f fc8c 	uxth.w	ip, ip
 8018426:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801842a:	d041      	beq.n	80184b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801842c:	d834      	bhi.n	8018498 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801842e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8018432:	d059      	beq.n	80184e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018434:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8018438:	d03a      	beq.n	80184b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801843a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801843e:	d034      	beq.n	80184aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018440:	2400      	movs	r4, #0
 8018442:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018446:	3a01      	subs	r2, #1
 8018448:	b169      	cbz	r1, 8018466 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801844a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801844c:	458c      	cmp	ip, r1
 801844e:	da09      	bge.n	8018464 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018450:	eba1 010c 	sub.w	r1, r1, ip
 8018454:	b289      	uxth	r1, r1
 8018456:	b933      	cbnz	r3, 8018466 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018458:	2e00      	cmp	r6, #0
 801845a:	d051      	beq.n	8018500 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801845c:	2800      	cmp	r0, #0
 801845e:	d04f      	beq.n	8018500 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018460:	440c      	add	r4, r1
 8018462:	b2a4      	uxth	r4, r4
 8018464:	2100      	movs	r1, #0
 8018466:	682b      	ldr	r3, [r5, #0]
 8018468:	4293      	cmp	r3, r2
 801846a:	da07      	bge.n	801847c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801846c:	f1b8 0f00 	cmp.w	r8, #0
 8018470:	d004      	beq.n	801847c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018472:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8018476:	682b      	ldr	r3, [r5, #0]
 8018478:	3301      	adds	r3, #1
 801847a:	602b      	str	r3, [r5, #0]
 801847c:	2730      	movs	r7, #48	; 0x30
 801847e:	2c00      	cmp	r4, #0
 8018480:	d04e      	beq.n	8018520 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018482:	682e      	ldr	r6, [r5, #0]
 8018484:	3c01      	subs	r4, #1
 8018486:	42b2      	cmp	r2, r6
 8018488:	b2a4      	uxth	r4, r4
 801848a:	dd49      	ble.n	8018520 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801848c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018490:	682b      	ldr	r3, [r5, #0]
 8018492:	3301      	adds	r3, #1
 8018494:	602b      	str	r3, [r5, #0]
 8018496:	e7f2      	b.n	801847e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8018498:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801849c:	d01d      	beq.n	80184da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801849e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80184a2:	d002      	beq.n	80184aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80184a4:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80184a8:	e7c9      	b.n	801843e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80184aa:	4684      	mov	ip, r0
 80184ac:	f04f 0800 	mov.w	r8, #0
 80184b0:	2c00      	cmp	r4, #0
 80184b2:	d0c6      	beq.n	8018442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80184b4:	b947      	cbnz	r7, 80184c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80184b6:	2801      	cmp	r0, #1
 80184b8:	d106      	bne.n	80184c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80184ba:	8814      	ldrh	r4, [r2, #0]
 80184bc:	2c30      	cmp	r4, #48	; 0x30
 80184be:	bf02      	ittt	eq
 80184c0:	3202      	addeq	r2, #2
 80184c2:	f8cb 2000 	streq.w	r2, [fp]
 80184c6:	4638      	moveq	r0, r7
 80184c8:	45bc      	cmp	ip, r7
 80184ca:	da14      	bge.n	80184f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80184cc:	b2bf      	uxth	r7, r7
 80184ce:	eba7 040c 	sub.w	r4, r7, ip
 80184d2:	b2a4      	uxth	r4, r4
 80184d4:	46bc      	mov	ip, r7
 80184d6:	2600      	movs	r6, #0
 80184d8:	e7b3      	b.n	8018442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80184da:	4684      	mov	ip, r0
 80184dc:	b16c      	cbz	r4, 80184fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80184de:	42b8      	cmp	r0, r7
 80184e0:	dd00      	ble.n	80184e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80184e2:	b2b8      	uxth	r0, r7
 80184e4:	2400      	movs	r4, #0
 80184e6:	e003      	b.n	80184f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80184e8:	f04f 0c01 	mov.w	ip, #1
 80184ec:	2400      	movs	r4, #0
 80184ee:	4660      	mov	r0, ip
 80184f0:	4626      	mov	r6, r4
 80184f2:	46a0      	mov	r8, r4
 80184f4:	e7a5      	b.n	8018442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80184f6:	2400      	movs	r4, #0
 80184f8:	e7ed      	b.n	80184d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 80184fa:	4626      	mov	r6, r4
 80184fc:	46a0      	mov	r8, r4
 80184fe:	e7a0      	b.n	8018442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018500:	2900      	cmp	r1, #0
 8018502:	d0b0      	beq.n	8018466 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018504:	2720      	movs	r7, #32
 8018506:	682e      	ldr	r6, [r5, #0]
 8018508:	2900      	cmp	r1, #0
 801850a:	d0ac      	beq.n	8018466 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801850c:	3901      	subs	r1, #1
 801850e:	4296      	cmp	r6, r2
 8018510:	b289      	uxth	r1, r1
 8018512:	daa7      	bge.n	8018464 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018514:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018518:	682b      	ldr	r3, [r5, #0]
 801851a:	3301      	adds	r3, #1
 801851c:	602b      	str	r3, [r5, #0]
 801851e:	e7f2      	b.n	8018506 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8018520:	b188      	cbz	r0, 8018546 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018522:	682b      	ldr	r3, [r5, #0]
 8018524:	3801      	subs	r0, #1
 8018526:	429a      	cmp	r2, r3
 8018528:	b280      	uxth	r0, r0
 801852a:	dd0c      	ble.n	8018546 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801852c:	f8db 3000 	ldr.w	r3, [fp]
 8018530:	1c9c      	adds	r4, r3, #2
 8018532:	f8cb 4000 	str.w	r4, [fp]
 8018536:	881c      	ldrh	r4, [r3, #0]
 8018538:	682b      	ldr	r3, [r5, #0]
 801853a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801853e:	682b      	ldr	r3, [r5, #0]
 8018540:	3301      	adds	r3, #1
 8018542:	602b      	str	r3, [r5, #0]
 8018544:	e7ec      	b.n	8018520 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018546:	2620      	movs	r6, #32
 8018548:	b151      	cbz	r1, 8018560 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801854a:	6828      	ldr	r0, [r5, #0]
 801854c:	3901      	subs	r1, #1
 801854e:	4282      	cmp	r2, r0
 8018550:	b289      	uxth	r1, r1
 8018552:	dd05      	ble.n	8018560 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018554:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8018558:	682b      	ldr	r3, [r5, #0]
 801855a:	3301      	adds	r3, #1
 801855c:	602b      	str	r3, [r5, #0]
 801855e:	e7f3      	b.n	8018548 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018560:	b005      	add	sp, #20
 8018562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8018566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801856a:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801856e:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8018572:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8018576:	2400      	movs	r4, #0
 8018578:	8014      	strh	r4, [r2, #0]
 801857a:	701c      	strb	r4, [r3, #0]
 801857c:	f888 4000 	strb.w	r4, [r8]
 8018580:	f88c 4000 	strb.w	r4, [ip]
 8018584:	f88e 4000 	strb.w	r4, [lr]
 8018588:	703c      	strb	r4, [r7, #0]
 801858a:	6804      	ldr	r4, [r0, #0]
 801858c:	b1a4      	cbz	r4, 80185b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801858e:	8824      	ldrh	r4, [r4, #0]
 8018590:	f04f 0901 	mov.w	r9, #1
 8018594:	b314      	cbz	r4, 80185dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018596:	2c2b      	cmp	r4, #43	; 0x2b
 8018598:	d001      	beq.n	801859e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801859a:	2c20      	cmp	r4, #32
 801859c:	d110      	bne.n	80185c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801859e:	8014      	strh	r4, [r2, #0]
 80185a0:	6804      	ldr	r4, [r0, #0]
 80185a2:	b10c      	cbz	r4, 80185a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80185a4:	3402      	adds	r4, #2
 80185a6:	6004      	str	r4, [r0, #0]
 80185a8:	680c      	ldr	r4, [r1, #0]
 80185aa:	b10c      	cbz	r4, 80185b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80185ac:	3401      	adds	r4, #1
 80185ae:	600c      	str	r4, [r1, #0]
 80185b0:	6804      	ldr	r4, [r0, #0]
 80185b2:	b17c      	cbz	r4, 80185d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80185b4:	8824      	ldrh	r4, [r4, #0]
 80185b6:	e7ed      	b.n	8018594 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80185b8:	680c      	ldr	r4, [r1, #0]
 80185ba:	b17c      	cbz	r4, 80185dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80185bc:	7824      	ldrb	r4, [r4, #0]
 80185be:	e7e7      	b.n	8018590 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80185c0:	2c2d      	cmp	r4, #45	; 0x2d
 80185c2:	d102      	bne.n	80185ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80185c4:	f883 9000 	strb.w	r9, [r3]
 80185c8:	e7ea      	b.n	80185a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80185ca:	2c23      	cmp	r4, #35	; 0x23
 80185cc:	d107      	bne.n	80185de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80185ce:	f888 9000 	strb.w	r9, [r8]
 80185d2:	e7e5      	b.n	80185a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80185d4:	680c      	ldr	r4, [r1, #0]
 80185d6:	b10c      	cbz	r4, 80185dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80185d8:	7824      	ldrb	r4, [r4, #0]
 80185da:	e7db      	b.n	8018594 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80185dc:	2400      	movs	r4, #0
 80185de:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80185e2:	2b09      	cmp	r3, #9
 80185e4:	d901      	bls.n	80185ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80185e6:	2c2a      	cmp	r4, #42	; 0x2a
 80185e8:	d122      	bne.n	8018630 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80185ea:	2301      	movs	r3, #1
 80185ec:	2c30      	cmp	r4, #48	; 0x30
 80185ee:	f88e 3000 	strb.w	r3, [lr]
 80185f2:	d10d      	bne.n	8018610 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80185f4:	f88c 3000 	strb.w	r3, [ip]
 80185f8:	6803      	ldr	r3, [r0, #0]
 80185fa:	b10b      	cbz	r3, 8018600 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80185fc:	3302      	adds	r3, #2
 80185fe:	6003      	str	r3, [r0, #0]
 8018600:	680b      	ldr	r3, [r1, #0]
 8018602:	b10b      	cbz	r3, 8018608 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018604:	3301      	adds	r3, #1
 8018606:	600b      	str	r3, [r1, #0]
 8018608:	6803      	ldr	r3, [r0, #0]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d02f      	beq.n	801866e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801860e:	881c      	ldrh	r4, [r3, #0]
 8018610:	2c2a      	cmp	r4, #42	; 0x2a
 8018612:	d135      	bne.n	8018680 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018614:	f04f 33ff 	mov.w	r3, #4294967295
 8018618:	6033      	str	r3, [r6, #0]
 801861a:	6803      	ldr	r3, [r0, #0]
 801861c:	b10b      	cbz	r3, 8018622 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801861e:	3302      	adds	r3, #2
 8018620:	6003      	str	r3, [r0, #0]
 8018622:	680b      	ldr	r3, [r1, #0]
 8018624:	b10b      	cbz	r3, 801862a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8018626:	3301      	adds	r3, #1
 8018628:	600b      	str	r3, [r1, #0]
 801862a:	6803      	ldr	r3, [r0, #0]
 801862c:	b31b      	cbz	r3, 8018676 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801862e:	881c      	ldrh	r4, [r3, #0]
 8018630:	2c2e      	cmp	r4, #46	; 0x2e
 8018632:	d11a      	bne.n	801866a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018634:	2301      	movs	r3, #1
 8018636:	703b      	strb	r3, [r7, #0]
 8018638:	6803      	ldr	r3, [r0, #0]
 801863a:	b10b      	cbz	r3, 8018640 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801863c:	3302      	adds	r3, #2
 801863e:	6003      	str	r3, [r0, #0]
 8018640:	680b      	ldr	r3, [r1, #0]
 8018642:	b10b      	cbz	r3, 8018648 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018644:	3301      	adds	r3, #1
 8018646:	600b      	str	r3, [r1, #0]
 8018648:	6803      	ldr	r3, [r0, #0]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d036      	beq.n	80186bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801864e:	881b      	ldrh	r3, [r3, #0]
 8018650:	2b2a      	cmp	r3, #42	; 0x2a
 8018652:	d137      	bne.n	80186c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018654:	f04f 33ff 	mov.w	r3, #4294967295
 8018658:	602b      	str	r3, [r5, #0]
 801865a:	6803      	ldr	r3, [r0, #0]
 801865c:	b10b      	cbz	r3, 8018662 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801865e:	3302      	adds	r3, #2
 8018660:	6003      	str	r3, [r0, #0]
 8018662:	680b      	ldr	r3, [r1, #0]
 8018664:	b10b      	cbz	r3, 801866a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018666:	3301      	adds	r3, #1
 8018668:	600b      	str	r3, [r1, #0]
 801866a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801866e:	680c      	ldr	r4, [r1, #0]
 8018670:	b134      	cbz	r4, 8018680 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018672:	7824      	ldrb	r4, [r4, #0]
 8018674:	e7cc      	b.n	8018610 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018676:	680b      	ldr	r3, [r1, #0]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d0f6      	beq.n	801866a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801867c:	781c      	ldrb	r4, [r3, #0]
 801867e:	e7d7      	b.n	8018630 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018680:	2300      	movs	r3, #0
 8018682:	6033      	str	r3, [r6, #0]
 8018684:	220a      	movs	r2, #10
 8018686:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801868a:	fa1f f38c 	uxth.w	r3, ip
 801868e:	2b09      	cmp	r3, #9
 8018690:	d8ce      	bhi.n	8018630 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018692:	6833      	ldr	r3, [r6, #0]
 8018694:	fb02 c303 	mla	r3, r2, r3, ip
 8018698:	6033      	str	r3, [r6, #0]
 801869a:	6803      	ldr	r3, [r0, #0]
 801869c:	b10b      	cbz	r3, 80186a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801869e:	3302      	adds	r3, #2
 80186a0:	6003      	str	r3, [r0, #0]
 80186a2:	680b      	ldr	r3, [r1, #0]
 80186a4:	b10b      	cbz	r3, 80186aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80186a6:	3301      	adds	r3, #1
 80186a8:	600b      	str	r3, [r1, #0]
 80186aa:	6803      	ldr	r3, [r0, #0]
 80186ac:	b10b      	cbz	r3, 80186b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80186ae:	881c      	ldrh	r4, [r3, #0]
 80186b0:	e7e9      	b.n	8018686 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80186b2:	680c      	ldr	r4, [r1, #0]
 80186b4:	2c00      	cmp	r4, #0
 80186b6:	d0e6      	beq.n	8018686 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80186b8:	7824      	ldrb	r4, [r4, #0]
 80186ba:	e7e4      	b.n	8018686 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80186bc:	680b      	ldr	r3, [r1, #0]
 80186be:	b10b      	cbz	r3, 80186c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80186c0:	781b      	ldrb	r3, [r3, #0]
 80186c2:	e7c5      	b.n	8018650 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80186c4:	2200      	movs	r2, #0
 80186c6:	602a      	str	r2, [r5, #0]
 80186c8:	240a      	movs	r4, #10
 80186ca:	3b30      	subs	r3, #48	; 0x30
 80186cc:	b29e      	uxth	r6, r3
 80186ce:	2e09      	cmp	r6, #9
 80186d0:	682a      	ldr	r2, [r5, #0]
 80186d2:	d813      	bhi.n	80186fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80186d4:	fb04 3302 	mla	r3, r4, r2, r3
 80186d8:	602b      	str	r3, [r5, #0]
 80186da:	6803      	ldr	r3, [r0, #0]
 80186dc:	b10b      	cbz	r3, 80186e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80186de:	3302      	adds	r3, #2
 80186e0:	6003      	str	r3, [r0, #0]
 80186e2:	680b      	ldr	r3, [r1, #0]
 80186e4:	b10b      	cbz	r3, 80186ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80186e6:	3301      	adds	r3, #1
 80186e8:	600b      	str	r3, [r1, #0]
 80186ea:	6803      	ldr	r3, [r0, #0]
 80186ec:	b10b      	cbz	r3, 80186f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80186ee:	881b      	ldrh	r3, [r3, #0]
 80186f0:	e7eb      	b.n	80186ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80186f2:	680b      	ldr	r3, [r1, #0]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d0e8      	beq.n	80186ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	e7e6      	b.n	80186ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80186fc:	2a06      	cmp	r2, #6
 80186fe:	bfa8      	it	ge
 8018700:	2206      	movge	r2, #6
 8018702:	602a      	str	r2, [r5, #0]
 8018704:	e7b1      	b.n	801866a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08018706 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8018706:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801870a:	b0a3      	sub	sp, #140	; 0x8c
 801870c:	2600      	movs	r6, #0
 801870e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8018712:	4607      	mov	r7, r0
 8018714:	4688      	mov	r8, r1
 8018716:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801871a:	4631      	mov	r1, r6
 801871c:	2242      	movs	r2, #66	; 0x42
 801871e:	4648      	mov	r0, r9
 8018720:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8018722:	960d      	str	r6, [sp, #52]	; 0x34
 8018724:	f00e f881 	bl	802682a <memset>
 8018728:	b15f      	cbz	r7, 8018742 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801872a:	f108 3aff 	add.w	sl, r8, #4294967295
 801872e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018732:	b152      	cbz	r2, 801874a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8018734:	8812      	ldrh	r2, [r2, #0]
 8018736:	b10a      	cbz	r2, 801873c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018738:	459a      	cmp	sl, r3
 801873a:	dc2e      	bgt.n	801879a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801873c:	2200      	movs	r2, #0
 801873e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018742:	4638      	mov	r0, r7
 8018744:	b023      	add	sp, #140	; 0x8c
 8018746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801874a:	9a08      	ldr	r2, [sp, #32]
 801874c:	2a00      	cmp	r2, #0
 801874e:	d0f5      	beq.n	801873c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018750:	7812      	ldrb	r2, [r2, #0]
 8018752:	e7f0      	b.n	8018736 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8018754:	2d00      	cmp	r5, #0
 8018756:	d0ea      	beq.n	801872e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018758:	782a      	ldrb	r2, [r5, #0]
 801875a:	b142      	cbz	r2, 801876e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801875c:	2a25      	cmp	r2, #37	; 0x25
 801875e:	d001      	beq.n	8018764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8018760:	459a      	cmp	sl, r3
 8018762:	dc08      	bgt.n	8018776 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8018764:	f1bb 0f00 	cmp.w	fp, #0
 8018768:	d121      	bne.n	80187ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801876a:	2d00      	cmp	r5, #0
 801876c:	d0df      	beq.n	801872e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801876e:	782a      	ldrb	r2, [r5, #0]
 8018770:	f04f 0b00 	mov.w	fp, #0
 8018774:	e01d      	b.n	80187b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8018776:	f1bb 0f00 	cmp.w	fp, #0
 801877a:	d078      	beq.n	801886e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801877c:	f8bb 2000 	ldrh.w	r2, [fp]
 8018780:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018784:	f1bb 0f00 	cmp.w	fp, #0
 8018788:	d002      	beq.n	8018790 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801878a:	f10b 0202 	add.w	r2, fp, #2
 801878e:	9209      	str	r2, [sp, #36]	; 0x24
 8018790:	b10d      	cbz	r5, 8018796 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8018792:	3501      	adds	r5, #1
 8018794:	9508      	str	r5, [sp, #32]
 8018796:	3301      	adds	r3, #1
 8018798:	930d      	str	r3, [sp, #52]	; 0x34
 801879a:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801879e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187a0:	f1bb 0f00 	cmp.w	fp, #0
 80187a4:	d0d6      	beq.n	8018754 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80187a6:	f8bb 2000 	ldrh.w	r2, [fp]
 80187aa:	2a00      	cmp	r2, #0
 80187ac:	d1d6      	bne.n	801875c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80187ae:	f8bb 2000 	ldrh.w	r2, [fp]
 80187b2:	2a00      	cmp	r2, #0
 80187b4:	d0bb      	beq.n	801872e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80187b6:	459a      	cmp	sl, r3
 80187b8:	ddb9      	ble.n	801872e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80187ba:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80187be:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80187c2:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 80187c6:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 80187ca:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80187ce:	960e      	str	r6, [sp, #56]	; 0x38
 80187d0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 80187d4:	960f      	str	r6, [sp, #60]	; 0x3c
 80187d6:	f1bb 0f00 	cmp.w	fp, #0
 80187da:	d002      	beq.n	80187e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80187dc:	f10b 0302 	add.w	r3, fp, #2
 80187e0:	9309      	str	r3, [sp, #36]	; 0x24
 80187e2:	b10d      	cbz	r5, 80187e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80187e4:	1c6b      	adds	r3, r5, #1
 80187e6:	9308      	str	r3, [sp, #32]
 80187e8:	ab0f      	add	r3, sp, #60	; 0x3c
 80187ea:	9305      	str	r3, [sp, #20]
 80187ec:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80187f0:	9304      	str	r3, [sp, #16]
 80187f2:	ab0e      	add	r3, sp, #56	; 0x38
 80187f4:	9303      	str	r3, [sp, #12]
 80187f6:	ab0c      	add	r3, sp, #48	; 0x30
 80187f8:	9302      	str	r3, [sp, #8]
 80187fa:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80187fe:	9301      	str	r3, [sp, #4]
 8018800:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8018804:	9300      	str	r3, [sp, #0]
 8018806:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801880a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801880e:	a908      	add	r1, sp, #32
 8018810:	a809      	add	r0, sp, #36	; 0x24
 8018812:	f7ff fea8 	bl	8018566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8018816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018818:	2b00      	cmp	r3, #0
 801881a:	bfbe      	ittt	lt
 801881c:	6823      	ldrlt	r3, [r4, #0]
 801881e:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018822:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018826:	bfb8      	it	lt
 8018828:	3404      	addlt	r4, #4
 801882a:	2b00      	cmp	r3, #0
 801882c:	bfb8      	it	lt
 801882e:	6823      	ldrlt	r3, [r4, #0]
 8018830:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018834:	bfbe      	ittt	lt
 8018836:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801883a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801883c:	3404      	addlt	r4, #4
 801883e:	b1d9      	cbz	r1, 8018878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 8018840:	880b      	ldrh	r3, [r1, #0]
 8018842:	2b69      	cmp	r3, #105	; 0x69
 8018844:	d01f      	beq.n	8018886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018846:	d82f      	bhi.n	80188a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8018848:	2b58      	cmp	r3, #88	; 0x58
 801884a:	d01c      	beq.n	8018886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801884c:	d818      	bhi.n	8018880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801884e:	2b25      	cmp	r3, #37	; 0x25
 8018850:	d034      	beq.n	80188bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 8018852:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8018856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018858:	f1bb 0f00 	cmp.w	fp, #0
 801885c:	f000 80b8 	beq.w	80189d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 8018860:	f8bb 5000 	ldrh.w	r5, [fp]
 8018864:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8018868:	3301      	adds	r3, #1
 801886a:	930d      	str	r3, [sp, #52]	; 0x34
 801886c:	e029      	b.n	80188c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801886e:	b10d      	cbz	r5, 8018874 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 8018870:	782a      	ldrb	r2, [r5, #0]
 8018872:	e785      	b.n	8018780 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018874:	462a      	mov	r2, r5
 8018876:	e783      	b.n	8018780 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018878:	2a00      	cmp	r2, #0
 801887a:	d0ea      	beq.n	8018852 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801887c:	7813      	ldrb	r3, [r2, #0]
 801887e:	e7e0      	b.n	8018842 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 8018880:	3b63      	subs	r3, #99	; 0x63
 8018882:	2b01      	cmp	r3, #1
 8018884:	d8e5      	bhi.n	8018852 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8018886:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801888a:	b329      	cbz	r1, 80188d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801888c:	880b      	ldrh	r3, [r1, #0]
 801888e:	2b69      	cmp	r3, #105	; 0x69
 8018890:	d063      	beq.n	801895a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8018892:	d825      	bhi.n	80188e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8018894:	2b63      	cmp	r3, #99	; 0x63
 8018896:	d038      	beq.n	801890a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8018898:	2b64      	cmp	r3, #100	; 0x64
 801889a:	d05e      	beq.n	801895a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801889c:	2b58      	cmp	r3, #88	; 0x58
 801889e:	d07b      	beq.n	8018998 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 80188a0:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80188a4:	4625      	mov	r5, r4
 80188a6:	e036      	b.n	8018916 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80188a8:	2b73      	cmp	r3, #115	; 0x73
 80188aa:	d0ec      	beq.n	8018886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80188ac:	d802      	bhi.n	80188b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 80188ae:	2b6f      	cmp	r3, #111	; 0x6f
 80188b0:	d1cf      	bne.n	8018852 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80188b2:	e7e8      	b.n	8018886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80188b4:	2b75      	cmp	r3, #117	; 0x75
 80188b6:	d0e6      	beq.n	8018886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80188b8:	2b78      	cmp	r3, #120	; 0x78
 80188ba:	e7f9      	b.n	80188b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 80188bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80188be:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 80188c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188c4:	b10b      	cbz	r3, 80188ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 80188c6:	3302      	adds	r3, #2
 80188c8:	9309      	str	r3, [sp, #36]	; 0x24
 80188ca:	9b08      	ldr	r3, [sp, #32]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	f43f af2e 	beq.w	801872e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80188d2:	3301      	adds	r3, #1
 80188d4:	9308      	str	r3, [sp, #32]
 80188d6:	e72a      	b.n	801872e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80188d8:	2a00      	cmp	r2, #0
 80188da:	d0e1      	beq.n	80188a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80188dc:	7813      	ldrb	r3, [r2, #0]
 80188de:	e7d6      	b.n	801888e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 80188e0:	2b73      	cmp	r3, #115	; 0x73
 80188e2:	d036      	beq.n	8018952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 80188e4:	d807      	bhi.n	80188f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 80188e6:	2b6f      	cmp	r3, #111	; 0x6f
 80188e8:	d1da      	bne.n	80188a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80188ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80188ec:	1d25      	adds	r5, r4, #4
 80188ee:	eba8 0202 	sub.w	r2, r8, r2
 80188f2:	2308      	movs	r3, #8
 80188f4:	e04a      	b.n	801898c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80188f6:	2b75      	cmp	r3, #117	; 0x75
 80188f8:	d043      	beq.n	8018982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 80188fa:	2b78      	cmp	r3, #120	; 0x78
 80188fc:	d1d0      	bne.n	80188a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80188fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018900:	1d25      	adds	r5, r4, #4
 8018902:	eba8 0202 	sub.w	r2, r8, r2
 8018906:	2310      	movs	r3, #16
 8018908:	e040      	b.n	801898c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801890a:	6823      	ldr	r3, [r4, #0]
 801890c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8018910:	1d25      	adds	r5, r4, #4
 8018912:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8018916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018918:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801891c:	2b00      	cmp	r3, #0
 801891e:	d052      	beq.n	80189c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 8018920:	881a      	ldrh	r2, [r3, #0]
 8018922:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8018926:	a80d      	add	r0, sp, #52	; 0x34
 8018928:	9005      	str	r0, [sp, #20]
 801892a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801892e:	9004      	str	r0, [sp, #16]
 8018930:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018932:	9003      	str	r0, [sp, #12]
 8018934:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8018938:	9002      	str	r0, [sp, #8]
 801893a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801893c:	9001      	str	r0, [sp, #4]
 801893e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8018942:	9000      	str	r0, [sp, #0]
 8018944:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8018948:	a810      	add	r0, sp, #64	; 0x40
 801894a:	f7ff fd49 	bl	80183e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801894e:	462c      	mov	r4, r5
 8018950:	e7b7      	b.n	80188c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8018952:	6823      	ldr	r3, [r4, #0]
 8018954:	1d25      	adds	r5, r4, #4
 8018956:	9310      	str	r3, [sp, #64]	; 0x40
 8018958:	e7dd      	b.n	8018916 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801895a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801895c:	6820      	ldr	r0, [r4, #0]
 801895e:	eba8 0202 	sub.w	r2, r8, r2
 8018962:	230a      	movs	r3, #10
 8018964:	b292      	uxth	r2, r2
 8018966:	4649      	mov	r1, r9
 8018968:	f7ff fcf0 	bl	801834c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801896c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018970:	2b2d      	cmp	r3, #45	; 0x2d
 8018972:	f104 0504 	add.w	r5, r4, #4
 8018976:	d1ce      	bne.n	8018916 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018978:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801897c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801897e:	3302      	adds	r3, #2
 8018980:	e7e9      	b.n	8018956 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8018982:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018984:	1d25      	adds	r5, r4, #4
 8018986:	eba8 0202 	sub.w	r2, r8, r2
 801898a:	230a      	movs	r3, #10
 801898c:	b292      	uxth	r2, r2
 801898e:	4649      	mov	r1, r9
 8018990:	6820      	ldr	r0, [r4, #0]
 8018992:	f7ff fd07 	bl	80183a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8018996:	e7be      	b.n	8018916 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801899a:	6820      	ldr	r0, [r4, #0]
 801899c:	eba8 0202 	sub.w	r2, r8, r2
 80189a0:	b292      	uxth	r2, r2
 80189a2:	2310      	movs	r3, #16
 80189a4:	4649      	mov	r1, r9
 80189a6:	f7ff fcfd 	bl	80183a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 80189aa:	1d25      	adds	r5, r4, #4
 80189ac:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80189b0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d0ae      	beq.n	8018916 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80189b8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80189bc:	2919      	cmp	r1, #25
 80189be:	d8f7      	bhi.n	80189b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 80189c0:	3b20      	subs	r3, #32
 80189c2:	8013      	strh	r3, [r2, #0]
 80189c4:	e7f4      	b.n	80189b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 80189c6:	9a08      	ldr	r2, [sp, #32]
 80189c8:	2a00      	cmp	r2, #0
 80189ca:	d0aa      	beq.n	8018922 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 80189cc:	7812      	ldrb	r2, [r2, #0]
 80189ce:	e7a8      	b.n	8018922 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 80189d0:	2d00      	cmp	r5, #0
 80189d2:	f43f af47 	beq.w	8018864 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 80189d6:	782d      	ldrb	r5, [r5, #0]
 80189d8:	e744      	b.n	8018864 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

080189da <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80189da:	b507      	push	{r0, r1, r2, lr}
 80189dc:	9300      	str	r3, [sp, #0]
 80189de:	4613      	mov	r3, r2
 80189e0:	2200      	movs	r2, #0
 80189e2:	f7ff fe90 	bl	8018706 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80189e6:	b003      	add	sp, #12
 80189e8:	f85d fb04 	ldr.w	pc, [sp], #4

080189ec <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80189ec:	b40c      	push	{r2, r3}
 80189ee:	b507      	push	{r0, r1, r2, lr}
 80189f0:	ab04      	add	r3, sp, #16
 80189f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80189f6:	9301      	str	r3, [sp, #4]
 80189f8:	f7ff ffef 	bl	80189da <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80189fc:	b003      	add	sp, #12
 80189fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a02:	b002      	add	sp, #8
 8018a04:	4770      	bx	lr
	...

08018a08 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8018a08:	4b01      	ldr	r3, [pc, #4]	; (8018a10 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8018a0a:	6018      	str	r0, [r3, #0]
 8018a0c:	4770      	bx	lr
 8018a0e:	bf00      	nop
 8018a10:	20025890 	.word	0x20025890

08018a14 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8018a14:	4b06      	ldr	r3, [pc, #24]	; (8018a30 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8018a16:	881a      	ldrh	r2, [r3, #0]
 8018a18:	4282      	cmp	r2, r0
 8018a1a:	d807      	bhi.n	8018a2c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8018a1c:	4b05      	ldr	r3, [pc, #20]	; (8018a34 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8018a1e:	881b      	ldrh	r3, [r3, #0]
 8018a20:	4413      	add	r3, r2
 8018a22:	4298      	cmp	r0, r3
 8018a24:	bfac      	ite	ge
 8018a26:	2000      	movge	r0, #0
 8018a28:	2001      	movlt	r0, #1
 8018a2a:	4770      	bx	lr
 8018a2c:	2000      	movs	r0, #0
 8018a2e:	4770      	bx	lr
 8018a30:	200258b0 	.word	0x200258b0
 8018a34:	200258b4 	.word	0x200258b4

08018a38 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8018a38:	b508      	push	{r3, lr}
 8018a3a:	4601      	mov	r1, r0
 8018a3c:	f7ff ffea 	bl	8018a14 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8018a40:	b118      	cbz	r0, 8018a4a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8018a42:	4b02      	ldr	r3, [pc, #8]	; (8018a4c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8018a4a:	bd08      	pop	{r3, pc}
 8018a4c:	20025894 	.word	0x20025894

08018a50 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a52:	4c24      	ldr	r4, [pc, #144]	; (8018ae4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8018a54:	6823      	ldr	r3, [r4, #0]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d042      	beq.n	8018ae0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018a5a:	4a23      	ldr	r2, [pc, #140]	; (8018ae8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8018a5c:	4d23      	ldr	r5, [pc, #140]	; (8018aec <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8018a5e:	8811      	ldrh	r1, [r2, #0]
 8018a60:	f8b5 c000 	ldrh.w	ip, [r5]
 8018a64:	4822      	ldr	r0, [pc, #136]	; (8018af0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8018a66:	4461      	add	r1, ip
 8018a68:	1c4a      	adds	r2, r1, #1
 8018a6a:	f022 0201 	bic.w	r2, r2, #1
 8018a6e:	008f      	lsls	r7, r1, #2
 8018a70:	0412      	lsls	r2, r2, #16
 8018a72:	19de      	adds	r6, r3, r7
 8018a74:	0c12      	lsrs	r2, r2, #16
 8018a76:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8018a7a:	6006      	str	r6, [r0, #0]
 8018a7c:	4e1d      	ldr	r6, [pc, #116]	; (8018af4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018a7e:	19da      	adds	r2, r3, r7
 8018a80:	6032      	str	r2, [r6, #0]
 8018a82:	220e      	movs	r2, #14
 8018a84:	fb02 f20c 	mul.w	r2, r2, ip
 8018a88:	3203      	adds	r2, #3
 8018a8a:	f022 0203 	bic.w	r2, r2, #3
 8018a8e:	443a      	add	r2, r7
 8018a90:	4f19      	ldr	r7, [pc, #100]	; (8018af8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8018a92:	4413      	add	r3, r2
 8018a94:	603b      	str	r3, [r7, #0]
 8018a96:	4f19      	ldr	r7, [pc, #100]	; (8018afc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018a98:	2300      	movs	r3, #0
 8018a9a:	803b      	strh	r3, [r7, #0]
 8018a9c:	4f18      	ldr	r7, [pc, #96]	; (8018b00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018a9e:	683f      	ldr	r7, [r7, #0]
 8018aa0:	1aba      	subs	r2, r7, r2
 8018aa2:	4f18      	ldr	r7, [pc, #96]	; (8018b04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8018aa4:	603a      	str	r2, [r7, #0]
 8018aa6:	4a18      	ldr	r2, [pc, #96]	; (8018b08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018aa8:	469c      	mov	ip, r3
 8018aaa:	8013      	strh	r3, [r2, #0]
 8018aac:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8018ab0:	428b      	cmp	r3, r1
 8018ab2:	d10d      	bne.n	8018ad0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8018ab4:	882d      	ldrh	r5, [r5, #0]
 8018ab6:	6830      	ldr	r0, [r6, #0]
 8018ab8:	2300      	movs	r3, #0
 8018aba:	240e      	movs	r4, #14
 8018abc:	429d      	cmp	r5, r3
 8018abe:	d90f      	bls.n	8018ae0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018ac0:	fb04 0203 	mla	r2, r4, r3, r0
 8018ac4:	3301      	adds	r3, #1
 8018ac6:	7b11      	ldrb	r1, [r2, #12]
 8018ac8:	f36f 1145 	bfc	r1, #5, #1
 8018acc:	7311      	strb	r1, [r2, #12]
 8018ace:	e7f5      	b.n	8018abc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8018ad0:	6822      	ldr	r2, [r4, #0]
 8018ad2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8018ad6:	6802      	ldr	r2, [r0, #0]
 8018ad8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8018adc:	3301      	adds	r3, #1
 8018ade:	e7e7      	b.n	8018ab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8018ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ae2:	bf00      	nop
 8018ae4:	20025894 	.word	0x20025894
 8018ae8:	200258b0 	.word	0x200258b0
 8018aec:	200258b4 	.word	0x200258b4
 8018af0:	200258a8 	.word	0x200258a8
 8018af4:	20025898 	.word	0x20025898
 8018af8:	200258a0 	.word	0x200258a0
 8018afc:	200258b2 	.word	0x200258b2
 8018b00:	2002589c 	.word	0x2002589c
 8018b04:	200258ac 	.word	0x200258ac
 8018b08:	200258a4 	.word	0x200258a4

08018b0c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8018b0c:	4b06      	ldr	r3, [pc, #24]	; (8018b28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	b943      	cbnz	r3, 8018b24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8018b12:	b139      	cbz	r1, 8018b24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8018b14:	4b05      	ldr	r3, [pc, #20]	; (8018b2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8018b16:	801a      	strh	r2, [r3, #0]
 8018b18:	4b05      	ldr	r3, [pc, #20]	; (8018b30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8018b1a:	6019      	str	r1, [r3, #0]
 8018b1c:	4b05      	ldr	r3, [pc, #20]	; (8018b34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8018b1e:	6018      	str	r0, [r3, #0]
 8018b20:	f7ff bf96 	b.w	8018a50 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8018b24:	4770      	bx	lr
 8018b26:	bf00      	nop
 8018b28:	200258a0 	.word	0x200258a0
 8018b2c:	200258b4 	.word	0x200258b4
 8018b30:	2002589c 	.word	0x2002589c
 8018b34:	20025894 	.word	0x20025894

08018b38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8018b38:	b470      	push	{r4, r5, r6}
 8018b3a:	4c07      	ldr	r4, [pc, #28]	; (8018b58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018b3c:	6826      	ldr	r6, [r4, #0]
 8018b3e:	4605      	mov	r5, r0
 8018b40:	4610      	mov	r0, r2
 8018b42:	9a03      	ldr	r2, [sp, #12]
 8018b44:	b936      	cbnz	r6, 8018b54 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018b46:	6025      	str	r5, [r4, #0]
 8018b48:	4c04      	ldr	r4, [pc, #16]	; (8018b5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018b4a:	8021      	strh	r1, [r4, #0]
 8018b4c:	bc70      	pop	{r4, r5, r6}
 8018b4e:	4619      	mov	r1, r3
 8018b50:	f7ff bfdc 	b.w	8018b0c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018b54:	bc70      	pop	{r4, r5, r6}
 8018b56:	4770      	bx	lr
 8018b58:	200258b8 	.word	0x200258b8
 8018b5c:	200258b0 	.word	0x200258b0

08018b60 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018b60:	4a12      	ldr	r2, [pc, #72]	; (8018bac <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8018b62:	8803      	ldrh	r3, [r0, #0]
 8018b64:	8812      	ldrh	r2, [r2, #0]
 8018b66:	4293      	cmp	r3, r2
 8018b68:	d207      	bcs.n	8018b7a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8018b6a:	4a11      	ldr	r2, [pc, #68]	; (8018bb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018b6c:	6812      	ldr	r2, [r2, #0]
 8018b6e:	2114      	movs	r1, #20
 8018b70:	fb01 2303 	mla	r3, r1, r3, r2
 8018b74:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018b78:	4770      	bx	lr
 8018b7a:	490e      	ldr	r1, [pc, #56]	; (8018bb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018b7c:	8809      	ldrh	r1, [r1, #0]
 8018b7e:	4411      	add	r1, r2
 8018b80:	428b      	cmp	r3, r1
 8018b82:	da04      	bge.n	8018b8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018b84:	1a9b      	subs	r3, r3, r2
 8018b86:	4a0c      	ldr	r2, [pc, #48]	; (8018bb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018b88:	210e      	movs	r1, #14
 8018b8a:	6812      	ldr	r2, [r2, #0]
 8018b8c:	e7f0      	b.n	8018b70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8018b8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018b92:	4293      	cmp	r3, r2
 8018b94:	d108      	bne.n	8018ba8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8018b96:	4b09      	ldr	r3, [pc, #36]	; (8018bbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018b98:	781b      	ldrb	r3, [r3, #0]
 8018b9a:	b91b      	cbnz	r3, 8018ba4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018b9c:	4b08      	ldr	r3, [pc, #32]	; (8018bc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018b9e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018ba2:	4770      	bx	lr
 8018ba4:	4b07      	ldr	r3, [pc, #28]	; (8018bc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018ba6:	e7fa      	b.n	8018b9e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018ba8:	2000      	movs	r0, #0
 8018baa:	4770      	bx	lr
 8018bac:	200258b0 	.word	0x200258b0
 8018bb0:	200258b8 	.word	0x200258b8
 8018bb4:	200258b4 	.word	0x200258b4
 8018bb8:	20025898 	.word	0x20025898
 8018bbc:	20025828 	.word	0x20025828
 8018bc0:	2002582a 	.word	0x2002582a
 8018bc4:	2002582c 	.word	0x2002582c

08018bc8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018bc8:	4a12      	ldr	r2, [pc, #72]	; (8018c14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8018bca:	8803      	ldrh	r3, [r0, #0]
 8018bcc:	8812      	ldrh	r2, [r2, #0]
 8018bce:	4293      	cmp	r3, r2
 8018bd0:	d207      	bcs.n	8018be2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8018bd2:	4a11      	ldr	r2, [pc, #68]	; (8018c18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8018bd4:	6812      	ldr	r2, [r2, #0]
 8018bd6:	2114      	movs	r1, #20
 8018bd8:	fb01 2303 	mla	r3, r1, r3, r2
 8018bdc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8018be0:	4770      	bx	lr
 8018be2:	490e      	ldr	r1, [pc, #56]	; (8018c1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018be4:	8809      	ldrh	r1, [r1, #0]
 8018be6:	4411      	add	r1, r2
 8018be8:	428b      	cmp	r3, r1
 8018bea:	da04      	bge.n	8018bf6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8018bec:	1a9b      	subs	r3, r3, r2
 8018bee:	4a0c      	ldr	r2, [pc, #48]	; (8018c20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8018bf0:	210e      	movs	r1, #14
 8018bf2:	6812      	ldr	r2, [r2, #0]
 8018bf4:	e7f0      	b.n	8018bd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8018bf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018bfa:	4293      	cmp	r3, r2
 8018bfc:	d108      	bne.n	8018c10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8018bfe:	4b09      	ldr	r3, [pc, #36]	; (8018c24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8018c00:	781b      	ldrb	r3, [r3, #0]
 8018c02:	b91b      	cbnz	r3, 8018c0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8018c04:	4b08      	ldr	r3, [pc, #32]	; (8018c28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8018c06:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018c0a:	4770      	bx	lr
 8018c0c:	4b07      	ldr	r3, [pc, #28]	; (8018c2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8018c0e:	e7fa      	b.n	8018c06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8018c10:	2000      	movs	r0, #0
 8018c12:	4770      	bx	lr
 8018c14:	200258b0 	.word	0x200258b0
 8018c18:	200258b8 	.word	0x200258b8
 8018c1c:	200258b4 	.word	0x200258b4
 8018c20:	20025898 	.word	0x20025898
 8018c24:	20025828 	.word	0x20025828
 8018c28:	2002582c 	.word	0x2002582c
 8018c2c:	2002582a 	.word	0x2002582a

08018c30 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018c30:	b510      	push	{r4, lr}
 8018c32:	4a1f      	ldr	r2, [pc, #124]	; (8018cb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8018c34:	880b      	ldrh	r3, [r1, #0]
 8018c36:	8812      	ldrh	r2, [r2, #0]
 8018c38:	4293      	cmp	r3, r2
 8018c3a:	d213      	bcs.n	8018c64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8018c3c:	4a1d      	ldr	r2, [pc, #116]	; (8018cb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8018c3e:	6812      	ldr	r2, [r2, #0]
 8018c40:	2114      	movs	r1, #20
 8018c42:	fb01 2303 	mla	r3, r1, r3, r2
 8018c46:	8a1a      	ldrh	r2, [r3, #16]
 8018c48:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8018c4c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018c50:	8a5b      	ldrh	r3, [r3, #18]
 8018c52:	8004      	strh	r4, [r0, #0]
 8018c54:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c5c:	8041      	strh	r1, [r0, #2]
 8018c5e:	8082      	strh	r2, [r0, #4]
 8018c60:	80c3      	strh	r3, [r0, #6]
 8018c62:	e00e      	b.n	8018c82 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018c64:	4914      	ldr	r1, [pc, #80]	; (8018cb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8018c66:	8809      	ldrh	r1, [r1, #0]
 8018c68:	4411      	add	r1, r2
 8018c6a:	428b      	cmp	r3, r1
 8018c6c:	da0a      	bge.n	8018c84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8018c6e:	1a9b      	subs	r3, r3, r2
 8018c70:	4a12      	ldr	r2, [pc, #72]	; (8018cbc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8018c72:	6812      	ldr	r2, [r2, #0]
 8018c74:	210e      	movs	r1, #14
 8018c76:	fb01 2303 	mla	r3, r1, r3, r2
 8018c7a:	681a      	ldr	r2, [r3, #0]
 8018c7c:	6002      	str	r2, [r0, #0]
 8018c7e:	685a      	ldr	r2, [r3, #4]
 8018c80:	6042      	str	r2, [r0, #4]
 8018c82:	bd10      	pop	{r4, pc}
 8018c84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018c88:	4293      	cmp	r3, r2
 8018c8a:	d10b      	bne.n	8018ca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8018c8c:	4b0c      	ldr	r3, [pc, #48]	; (8018cc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018c8e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018c92:	4b0c      	ldr	r3, [pc, #48]	; (8018cc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018c94:	8081      	strh	r1, [r0, #4]
 8018c96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c9a:	80c2      	strh	r2, [r0, #6]
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	8003      	strh	r3, [r0, #0]
 8018ca0:	8043      	strh	r3, [r0, #2]
 8018ca2:	e7ee      	b.n	8018c82 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	8003      	strh	r3, [r0, #0]
 8018ca8:	8043      	strh	r3, [r0, #2]
 8018caa:	8083      	strh	r3, [r0, #4]
 8018cac:	e7d8      	b.n	8018c60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018cae:	bf00      	nop
 8018cb0:	200258b0 	.word	0x200258b0
 8018cb4:	200258b8 	.word	0x200258b8
 8018cb8:	200258b4 	.word	0x200258b4
 8018cbc:	20025898 	.word	0x20025898
 8018cc0:	20025824 	.word	0x20025824
 8018cc4:	20025826 	.word	0x20025826

08018cc8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8018cc8:	4a17      	ldr	r2, [pc, #92]	; (8018d28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8018cca:	8803      	ldrh	r3, [r0, #0]
 8018ccc:	8812      	ldrh	r2, [r2, #0]
 8018cce:	4293      	cmp	r3, r2
 8018cd0:	d213      	bcs.n	8018cfa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8018cd2:	4a16      	ldr	r2, [pc, #88]	; (8018d2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8018cd4:	6812      	ldr	r2, [r2, #0]
 8018cd6:	2114      	movs	r1, #20
 8018cd8:	fb01 2303 	mla	r3, r1, r3, r2
 8018cdc:	8a1a      	ldrh	r2, [r3, #16]
 8018cde:	8919      	ldrh	r1, [r3, #8]
 8018ce0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018ce4:	428a      	cmp	r2, r1
 8018ce6:	db1d      	blt.n	8018d24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8018ce8:	8a58      	ldrh	r0, [r3, #18]
 8018cea:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018cee:	895b      	ldrh	r3, [r3, #10]
 8018cf0:	4298      	cmp	r0, r3
 8018cf2:	bfac      	ite	ge
 8018cf4:	2000      	movge	r0, #0
 8018cf6:	2001      	movlt	r0, #1
 8018cf8:	4770      	bx	lr
 8018cfa:	490d      	ldr	r1, [pc, #52]	; (8018d30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8018cfc:	8809      	ldrh	r1, [r1, #0]
 8018cfe:	4411      	add	r1, r2
 8018d00:	428b      	cmp	r3, r1
 8018d02:	da0d      	bge.n	8018d20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8018d04:	1a9b      	subs	r3, r3, r2
 8018d06:	4a0b      	ldr	r2, [pc, #44]	; (8018d34 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8018d08:	6812      	ldr	r2, [r2, #0]
 8018d0a:	210e      	movs	r1, #14
 8018d0c:	fb01 2303 	mla	r3, r1, r3, r2
 8018d10:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018d14:	891a      	ldrh	r2, [r3, #8]
 8018d16:	4291      	cmp	r1, r2
 8018d18:	db04      	blt.n	8018d24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8018d1a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8018d1e:	e7e6      	b.n	8018cee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8018d20:	2000      	movs	r0, #0
 8018d22:	4770      	bx	lr
 8018d24:	2001      	movs	r0, #1
 8018d26:	4770      	bx	lr
 8018d28:	200258b0 	.word	0x200258b0
 8018d2c:	200258b8 	.word	0x200258b8
 8018d30:	200258b4 	.word	0x200258b4
 8018d34:	20025898 	.word	0x20025898

08018d38 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018d38:	4a12      	ldr	r2, [pc, #72]	; (8018d84 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018d3a:	8803      	ldrh	r3, [r0, #0]
 8018d3c:	8811      	ldrh	r1, [r2, #0]
 8018d3e:	428b      	cmp	r3, r1
 8018d40:	d20b      	bcs.n	8018d5a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8018d42:	4a11      	ldr	r2, [pc, #68]	; (8018d88 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018d44:	6812      	ldr	r2, [r2, #0]
 8018d46:	b112      	cbz	r2, 8018d4e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8018d48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018d4c:	b9c0      	cbnz	r0, 8018d80 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8018d4e:	4a0f      	ldr	r2, [pc, #60]	; (8018d8c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8018d50:	6811      	ldr	r1, [r2, #0]
 8018d52:	2214      	movs	r2, #20
 8018d54:	4353      	muls	r3, r2
 8018d56:	58c8      	ldr	r0, [r1, r3]
 8018d58:	4770      	bx	lr
 8018d5a:	4a0d      	ldr	r2, [pc, #52]	; (8018d90 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8018d5c:	8812      	ldrh	r2, [r2, #0]
 8018d5e:	440a      	add	r2, r1
 8018d60:	4293      	cmp	r3, r2
 8018d62:	da04      	bge.n	8018d6e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8018d64:	4a08      	ldr	r2, [pc, #32]	; (8018d88 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018d66:	6812      	ldr	r2, [r2, #0]
 8018d68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018d6c:	4770      	bx	lr
 8018d6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018d72:	4293      	cmp	r3, r2
 8018d74:	d103      	bne.n	8018d7e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8018d76:	4b07      	ldr	r3, [pc, #28]	; (8018d94 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018d7c:	4770      	bx	lr
 8018d7e:	2000      	movs	r0, #0
 8018d80:	4770      	bx	lr
 8018d82:	bf00      	nop
 8018d84:	200258b0 	.word	0x200258b0
 8018d88:	20025894 	.word	0x20025894
 8018d8c:	200258b8 	.word	0x200258b8
 8018d90:	200258b4 	.word	0x200258b4
 8018d94:	20025830 	.word	0x20025830

08018d98 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018d98:	4b24      	ldr	r3, [pc, #144]	; (8018e2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8018d9a:	8802      	ldrh	r2, [r0, #0]
 8018d9c:	8818      	ldrh	r0, [r3, #0]
 8018d9e:	4282      	cmp	r2, r0
 8018da0:	d221      	bcs.n	8018de6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8018da2:	4b23      	ldr	r3, [pc, #140]	; (8018e30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018da4:	6819      	ldr	r1, [r3, #0]
 8018da6:	2314      	movs	r3, #20
 8018da8:	fb03 1302 	mla	r3, r3, r2, r1
 8018dac:	6858      	ldr	r0, [r3, #4]
 8018dae:	2800      	cmp	r0, #0
 8018db0:	d03a      	beq.n	8018e28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018db2:	4920      	ldr	r1, [pc, #128]	; (8018e34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018db4:	6809      	ldr	r1, [r1, #0]
 8018db6:	2900      	cmp	r1, #0
 8018db8:	d036      	beq.n	8018e28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018dba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018dbe:	2900      	cmp	r1, #0
 8018dc0:	d032      	beq.n	8018e28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018dc2:	891a      	ldrh	r2, [r3, #8]
 8018dc4:	8958      	ldrh	r0, [r3, #10]
 8018dc6:	4350      	muls	r0, r2
 8018dc8:	7c5a      	ldrb	r2, [r3, #17]
 8018dca:	7cdb      	ldrb	r3, [r3, #19]
 8018dcc:	0952      	lsrs	r2, r2, #5
 8018dce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8018dd2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018dd6:	2b0b      	cmp	r3, #11
 8018dd8:	bf18      	it	ne
 8018dda:	0040      	lslne	r0, r0, #1
 8018ddc:	3003      	adds	r0, #3
 8018dde:	f020 0003 	bic.w	r0, r0, #3
 8018de2:	4408      	add	r0, r1
 8018de4:	4770      	bx	lr
 8018de6:	4b14      	ldr	r3, [pc, #80]	; (8018e38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018de8:	881b      	ldrh	r3, [r3, #0]
 8018dea:	4403      	add	r3, r0
 8018dec:	429a      	cmp	r2, r3
 8018dee:	da1a      	bge.n	8018e26 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018df0:	4b12      	ldr	r3, [pc, #72]	; (8018e3c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	1a10      	subs	r0, r2, r0
 8018df6:	210e      	movs	r1, #14
 8018df8:	fb01 3000 	mla	r0, r1, r0, r3
 8018dfc:	7b03      	ldrb	r3, [r0, #12]
 8018dfe:	f003 031f 	and.w	r3, r3, #31
 8018e02:	2b0b      	cmp	r3, #11
 8018e04:	d10b      	bne.n	8018e1e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8018e06:	8903      	ldrh	r3, [r0, #8]
 8018e08:	8940      	ldrh	r0, [r0, #10]
 8018e0a:	4358      	muls	r0, r3
 8018e0c:	4b09      	ldr	r3, [pc, #36]	; (8018e34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018e0e:	6819      	ldr	r1, [r3, #0]
 8018e10:	3003      	adds	r0, #3
 8018e12:	f020 0303 	bic.w	r3, r0, #3
 8018e16:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8018e1a:	4418      	add	r0, r3
 8018e1c:	4770      	bx	lr
 8018e1e:	2b0d      	cmp	r3, #13
 8018e20:	d101      	bne.n	8018e26 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018e22:	300d      	adds	r0, #13
 8018e24:	4770      	bx	lr
 8018e26:	2000      	movs	r0, #0
 8018e28:	4770      	bx	lr
 8018e2a:	bf00      	nop
 8018e2c:	200258b0 	.word	0x200258b0
 8018e30:	200258b8 	.word	0x200258b8
 8018e34:	20025894 	.word	0x20025894
 8018e38:	200258b4 	.word	0x200258b4
 8018e3c:	20025898 	.word	0x20025898

08018e40 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8018e40:	b510      	push	{r4, lr}
 8018e42:	4a17      	ldr	r2, [pc, #92]	; (8018ea0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8018e44:	8803      	ldrh	r3, [r0, #0]
 8018e46:	8812      	ldrh	r2, [r2, #0]
 8018e48:	4293      	cmp	r3, r2
 8018e4a:	d20c      	bcs.n	8018e66 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018e4c:	4a15      	ldr	r2, [pc, #84]	; (8018ea4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8018e4e:	6812      	ldr	r2, [r2, #0]
 8018e50:	2114      	movs	r1, #20
 8018e52:	fb01 2303 	mla	r3, r1, r3, r2
 8018e56:	7c58      	ldrb	r0, [r3, #17]
 8018e58:	0942      	lsrs	r2, r0, #5
 8018e5a:	7cd8      	ldrb	r0, [r3, #19]
 8018e5c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8018e60:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8018e64:	bd10      	pop	{r4, pc}
 8018e66:	4910      	ldr	r1, [pc, #64]	; (8018ea8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8018e68:	8809      	ldrh	r1, [r1, #0]
 8018e6a:	4411      	add	r1, r2
 8018e6c:	428b      	cmp	r3, r1
 8018e6e:	da09      	bge.n	8018e84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8018e70:	1a9b      	subs	r3, r3, r2
 8018e72:	4a0e      	ldr	r2, [pc, #56]	; (8018eac <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8018e74:	6812      	ldr	r2, [r2, #0]
 8018e76:	210e      	movs	r1, #14
 8018e78:	fb01 2303 	mla	r3, r1, r3, r2
 8018e7c:	7b18      	ldrb	r0, [r3, #12]
 8018e7e:	f000 001f 	and.w	r0, r0, #31
 8018e82:	e7ef      	b.n	8018e64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018e84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018e88:	4293      	cmp	r3, r2
 8018e8a:	d106      	bne.n	8018e9a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8018e8c:	f7f4 ff70 	bl	800dd70 <_ZN8touchgfx3HAL3lcdEv>
 8018e90:	6803      	ldr	r3, [r0, #0]
 8018e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e98:	4718      	bx	r3
 8018e9a:	2000      	movs	r0, #0
 8018e9c:	e7e2      	b.n	8018e64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018e9e:	bf00      	nop
 8018ea0:	200258b0 	.word	0x200258b0
 8018ea4:	200258b8 	.word	0x200258b8
 8018ea8:	200258b4 	.word	0x200258b4
 8018eac:	20025898 	.word	0x20025898

08018eb0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8018eb0:	2010      	movs	r0, #16
 8018eb2:	4770      	bx	lr

08018eb4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8018eb4:	2000      	movs	r0, #0
 8018eb6:	4770      	bx	lr

08018eb8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8018eb8:	4b02      	ldr	r3, [pc, #8]	; (8018ec4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8018eba:	8818      	ldrh	r0, [r3, #0]
 8018ebc:	0040      	lsls	r0, r0, #1
 8018ebe:	b280      	uxth	r0, r0
 8018ec0:	4770      	bx	lr
 8018ec2:	bf00      	nop
 8018ec4:	2002582a 	.word	0x2002582a

08018ec8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018ec8:	2bff      	cmp	r3, #255	; 0xff
 8018eca:	d050      	beq.n	8018f6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8018ecc:	2a0b      	cmp	r2, #11
 8018ece:	d04a      	beq.n	8018f66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018ed0:	d80e      	bhi.n	8018ef0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8018ed2:	2a03      	cmp	r2, #3
 8018ed4:	d03f      	beq.n	8018f56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8018ed6:	d804      	bhi.n	8018ee2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8018ed8:	2a01      	cmp	r2, #1
 8018eda:	d03e      	beq.n	8018f5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8018edc:	d93f      	bls.n	8018f5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8018ede:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8018ee0:	4770      	bx	lr
 8018ee2:	2a09      	cmp	r2, #9
 8018ee4:	d03f      	beq.n	8018f66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018ee6:	d83c      	bhi.n	8018f62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018ee8:	2a08      	cmp	r2, #8
 8018eea:	d03a      	beq.n	8018f62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018eec:	2000      	movs	r0, #0
 8018eee:	4770      	bx	lr
 8018ef0:	2a2f      	cmp	r2, #47	; 0x2f
 8018ef2:	d024      	beq.n	8018f3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8018ef4:	d80d      	bhi.n	8018f12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8018ef6:	2a2d      	cmp	r2, #45	; 0x2d
 8018ef8:	d014      	beq.n	8018f24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8018efa:	d826      	bhi.n	8018f4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8018efc:	2a2c      	cmp	r2, #44	; 0x2c
 8018efe:	d1f5      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f00:	684b      	ldr	r3, [r1, #4]
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	2b01      	cmp	r3, #1
 8018f06:	d018      	beq.n	8018f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8018f08:	d323      	bcc.n	8018f52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8018f0a:	2b02      	cmp	r3, #2
 8018f0c:	d1ee      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f0e:	6880      	ldr	r0, [r0, #8]
 8018f10:	4770      	bx	lr
 8018f12:	2a31      	cmp	r2, #49	; 0x31
 8018f14:	d004      	beq.n	8018f20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8018f16:	d328      	bcc.n	8018f6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8018f18:	2a32      	cmp	r2, #50	; 0x32
 8018f1a:	d026      	beq.n	8018f6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8018f1c:	2a33      	cmp	r2, #51	; 0x33
 8018f1e:	d1e5      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f20:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8018f22:	4770      	bx	lr
 8018f24:	684b      	ldr	r3, [r1, #4]
 8018f26:	781b      	ldrb	r3, [r3, #0]
 8018f28:	2b01      	cmp	r3, #1
 8018f2a:	d004      	beq.n	8018f36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8018f2c:	d30b      	bcc.n	8018f46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8018f2e:	2b02      	cmp	r3, #2
 8018f30:	d1dc      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f32:	6900      	ldr	r0, [r0, #16]
 8018f34:	4770      	bx	lr
 8018f36:	6a00      	ldr	r0, [r0, #32]
 8018f38:	4770      	bx	lr
 8018f3a:	6980      	ldr	r0, [r0, #24]
 8018f3c:	4770      	bx	lr
 8018f3e:	684b      	ldr	r3, [r1, #4]
 8018f40:	781b      	ldrb	r3, [r3, #0]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d1d2      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f46:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018f48:	4770      	bx	lr
 8018f4a:	684b      	ldr	r3, [r1, #4]
 8018f4c:	781b      	ldrb	r3, [r3, #0]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d1cc      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f52:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018f54:	4770      	bx	lr
 8018f56:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8018f58:	4770      	bx	lr
 8018f5a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8018f5c:	4770      	bx	lr
 8018f5e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8018f60:	4770      	bx	lr
 8018f62:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8018f64:	4770      	bx	lr
 8018f66:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8018f68:	4770      	bx	lr
 8018f6a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8018f6c:	4770      	bx	lr
 8018f6e:	2a0b      	cmp	r2, #11
 8018f70:	d049      	beq.n	8019006 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8018f72:	d80e      	bhi.n	8018f92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8018f74:	2a03      	cmp	r2, #3
 8018f76:	d040      	beq.n	8018ffa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018f78:	d804      	bhi.n	8018f84 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8018f7a:	2a01      	cmp	r2, #1
 8018f7c:	d03f      	beq.n	8018ffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8018f7e:	d940      	bls.n	8019002 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8018f80:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8018f82:	4770      	bx	lr
 8018f84:	2a09      	cmp	r2, #9
 8018f86:	d03e      	beq.n	8019006 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8018f88:	d801      	bhi.n	8018f8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8018f8a:	2a08      	cmp	r2, #8
 8018f8c:	d1ae      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f8e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8018f90:	4770      	bx	lr
 8018f92:	2a2f      	cmp	r2, #47	; 0x2f
 8018f94:	d024      	beq.n	8018fe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8018f96:	d80d      	bhi.n	8018fb4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8018f98:	2a2d      	cmp	r2, #45	; 0x2d
 8018f9a:	d014      	beq.n	8018fc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8018f9c:	d826      	bhi.n	8018fec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8018f9e:	2a2c      	cmp	r2, #44	; 0x2c
 8018fa0:	d1a4      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018fa2:	684b      	ldr	r3, [r1, #4]
 8018fa4:	781b      	ldrb	r3, [r3, #0]
 8018fa6:	2b01      	cmp	r3, #1
 8018fa8:	d018      	beq.n	8018fdc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8018faa:	d324      	bcc.n	8018ff6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018fac:	2b02      	cmp	r3, #2
 8018fae:	d19d      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018fb0:	68c0      	ldr	r0, [r0, #12]
 8018fb2:	4770      	bx	lr
 8018fb4:	2a31      	cmp	r2, #49	; 0x31
 8018fb6:	d004      	beq.n	8018fc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8018fb8:	d327      	bcc.n	801900a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8018fba:	2a32      	cmp	r2, #50	; 0x32
 8018fbc:	d025      	beq.n	801900a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8018fbe:	2a33      	cmp	r2, #51	; 0x33
 8018fc0:	d194      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018fc2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8018fc4:	4770      	bx	lr
 8018fc6:	684b      	ldr	r3, [r1, #4]
 8018fc8:	781b      	ldrb	r3, [r3, #0]
 8018fca:	2b01      	cmp	r3, #1
 8018fcc:	d004      	beq.n	8018fd8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8018fce:	d30b      	bcc.n	8018fe8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8018fd0:	2b02      	cmp	r3, #2
 8018fd2:	d18b      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018fd4:	6940      	ldr	r0, [r0, #20]
 8018fd6:	4770      	bx	lr
 8018fd8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8018fda:	4770      	bx	lr
 8018fdc:	69c0      	ldr	r0, [r0, #28]
 8018fde:	4770      	bx	lr
 8018fe0:	684b      	ldr	r3, [r1, #4]
 8018fe2:	781b      	ldrb	r3, [r3, #0]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d181      	bne.n	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018fe8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8018fea:	4770      	bx	lr
 8018fec:	684b      	ldr	r3, [r1, #4]
 8018fee:	781b      	ldrb	r3, [r3, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	f47f af7b 	bne.w	8018eec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018ff6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8018ff8:	4770      	bx	lr
 8018ffa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8018ffc:	4770      	bx	lr
 8018ffe:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019000:	4770      	bx	lr
 8019002:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019004:	4770      	bx	lr
 8019006:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8019008:	4770      	bx	lr
 801900a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801900c:	4770      	bx	lr

0801900e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801900e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019012:	b087      	sub	sp, #28
 8019014:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019016:	9205      	str	r2, [sp, #20]
 8019018:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801901c:	9202      	str	r2, [sp, #8]
 801901e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019022:	9101      	str	r1, [sp, #4]
 8019024:	6841      	ldr	r1, [r0, #4]
 8019026:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801902a:	fb01 2404 	mla	r4, r1, r4, r2
 801902e:	6802      	ldr	r2, [r0, #0]
 8019030:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019034:	f8de 2000 	ldr.w	r2, [lr]
 8019038:	9203      	str	r2, [sp, #12]
 801903a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801903e:	3204      	adds	r2, #4
 8019040:	9204      	str	r2, [sp, #16]
 8019042:	9a02      	ldr	r2, [sp, #8]
 8019044:	43d6      	mvns	r6, r2
 8019046:	b2f6      	uxtb	r6, r6
 8019048:	9a01      	ldr	r2, [sp, #4]
 801904a:	2a00      	cmp	r2, #0
 801904c:	dc03      	bgt.n	8019056 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801904e:	9a05      	ldr	r2, [sp, #20]
 8019050:	2a00      	cmp	r2, #0
 8019052:	f340 8129 	ble.w	80192a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019056:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019058:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801905c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019060:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019066:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801906a:	2b00      	cmp	r3, #0
 801906c:	dd0e      	ble.n	801908c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801906e:	1408      	asrs	r0, r1, #16
 8019070:	d405      	bmi.n	801907e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019072:	4560      	cmp	r0, ip
 8019074:	da03      	bge.n	801907e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019076:	1410      	asrs	r0, r2, #16
 8019078:	d401      	bmi.n	801907e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801907a:	42b8      	cmp	r0, r7
 801907c:	db07      	blt.n	801908e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801907e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019080:	4401      	add	r1, r0
 8019082:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019084:	3b01      	subs	r3, #1
 8019086:	4402      	add	r2, r0
 8019088:	3402      	adds	r4, #2
 801908a:	e7ee      	b.n	801906a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801908c:	d071      	beq.n	8019172 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801908e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019090:	1e58      	subs	r0, r3, #1
 8019092:	fb05 1500 	mla	r5, r5, r0, r1
 8019096:	142d      	asrs	r5, r5, #16
 8019098:	d45f      	bmi.n	801915a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801909a:	4565      	cmp	r5, ip
 801909c:	da5d      	bge.n	801915a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801909e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80190a0:	fb05 2000 	mla	r0, r5, r0, r2
 80190a4:	1400      	asrs	r0, r0, #16
 80190a6:	d458      	bmi.n	801915a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80190a8:	42b8      	cmp	r0, r7
 80190aa:	da56      	bge.n	801915a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80190ac:	f8bd b008 	ldrh.w	fp, [sp, #8]
 80190b0:	4699      	mov	r9, r3
 80190b2:	46a2      	mov	sl, r4
 80190b4:	f1b9 0f00 	cmp.w	r9, #0
 80190b8:	dd57      	ble.n	801916a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80190ba:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80190be:	9803      	ldr	r0, [sp, #12]
 80190c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80190c4:	140d      	asrs	r5, r1, #16
 80190c6:	fb07 000c 	mla	r0, r7, ip, r0
 80190ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80190ce:	5d40      	ldrb	r0, [r0, r5]
 80190d0:	9d04      	ldr	r5, [sp, #16]
 80190d2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80190d6:	f8ba 5000 	ldrh.w	r5, [sl]
 80190da:	122f      	asrs	r7, r5, #8
 80190dc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80190e0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80190e4:	fb17 f706 	smulbb	r7, r7, r6
 80190e8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80190ec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80190f0:	00ed      	lsls	r5, r5, #3
 80190f2:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80190f6:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80190fa:	10c7      	asrs	r7, r0, #3
 80190fc:	b2ed      	uxtb	r5, r5
 80190fe:	00c0      	lsls	r0, r0, #3
 8019100:	fb18 f806 	smulbb	r8, r8, r6
 8019104:	fb15 f506 	smulbb	r5, r5, r6
 8019108:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801910c:	b2c0      	uxtb	r0, r0
 801910e:	fa1f fc8c 	uxth.w	ip, ip
 8019112:	fb07 870b 	mla	r7, r7, fp, r8
 8019116:	fb00 500b 	mla	r0, r0, fp, r5
 801911a:	b280      	uxth	r0, r0
 801911c:	b2bf      	uxth	r7, r7
 801911e:	f10c 0501 	add.w	r5, ip, #1
 8019122:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019126:	f107 0801 	add.w	r8, r7, #1
 801912a:	1c45      	adds	r5, r0, #1
 801912c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019130:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019134:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019136:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801913a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801913e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019142:	ea45 0c0c 	orr.w	ip, r5, ip
 8019146:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801914a:	4401      	add	r1, r0
 801914c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801914e:	ea4c 0c08 	orr.w	ip, ip, r8
 8019152:	f82a cb02 	strh.w	ip, [sl], #2
 8019156:	4402      	add	r2, r0
 8019158:	e7ac      	b.n	80190b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801915a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801915e:	f04f 0800 	mov.w	r8, #0
 8019162:	eb03 0008 	add.w	r0, r3, r8
 8019166:	2800      	cmp	r0, #0
 8019168:	dc41      	bgt.n	80191ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801916a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801916e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019172:	9b01      	ldr	r3, [sp, #4]
 8019174:	2b00      	cmp	r3, #0
 8019176:	f340 8097 	ble.w	80192a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801917a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801917e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019182:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019186:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019188:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801918c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019190:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019194:	eef0 6a62 	vmov.f32	s13, s5
 8019198:	ee61 7a27 	vmul.f32	s15, s2, s15
 801919c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80191a4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80191a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80191ac:	eef0 6a43 	vmov.f32	s13, s6
 80191b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80191b4:	ee12 2a90 	vmov	r2, s5
 80191b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80191bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80191c0:	ee13 2a10 	vmov	r2, s6
 80191c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80191c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80191c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80191cc:	9314      	str	r3, [sp, #80]	; 0x50
 80191ce:	9b01      	ldr	r3, [sp, #4]
 80191d0:	9a05      	ldr	r2, [sp, #20]
 80191d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191d6:	3b01      	subs	r3, #1
 80191d8:	9301      	str	r3, [sp, #4]
 80191da:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80191de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80191e0:	eeb0 3a67 	vmov.f32	s6, s15
 80191e4:	bf08      	it	eq
 80191e6:	4613      	moveq	r3, r2
 80191e8:	eef0 2a47 	vmov.f32	s5, s14
 80191ec:	e72c      	b.n	8019048 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80191ee:	140f      	asrs	r7, r1, #16
 80191f0:	d453      	bmi.n	801929a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80191f2:	f8de 5008 	ldr.w	r5, [lr, #8]
 80191f6:	42bd      	cmp	r5, r7
 80191f8:	dd4f      	ble.n	801929a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80191fa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80191fe:	d44c      	bmi.n	801929a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019200:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019204:	4560      	cmp	r0, ip
 8019206:	dd48      	ble.n	801929a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8019208:	9803      	ldr	r0, [sp, #12]
 801920a:	b22d      	sxth	r5, r5
 801920c:	fb0c 0505 	mla	r5, ip, r5, r0
 8019210:	5de8      	ldrb	r0, [r5, r7]
 8019212:	9d04      	ldr	r5, [sp, #16]
 8019214:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019218:	f06f 0501 	mvn.w	r5, #1
 801921c:	fb05 fb08 	mul.w	fp, r5, r8
 8019220:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019224:	f834 500b 	ldrh.w	r5, [r4, fp]
 8019228:	122f      	asrs	r7, r5, #8
 801922a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801922e:	fb17 f706 	smulbb	r7, r7, r6
 8019232:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019236:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801923a:	00ed      	lsls	r5, r5, #3
 801923c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019240:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019244:	10c7      	asrs	r7, r0, #3
 8019246:	b2ed      	uxtb	r5, r5
 8019248:	00c0      	lsls	r0, r0, #3
 801924a:	fb19 f906 	smulbb	r9, r9, r6
 801924e:	fb15 f506 	smulbb	r5, r5, r6
 8019252:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019256:	b2c0      	uxtb	r0, r0
 8019258:	fa1f fc8c 	uxth.w	ip, ip
 801925c:	fb07 970a 	mla	r7, r7, sl, r9
 8019260:	fb00 500a 	mla	r0, r0, sl, r5
 8019264:	b2bf      	uxth	r7, r7
 8019266:	b280      	uxth	r0, r0
 8019268:	f10c 0501 	add.w	r5, ip, #1
 801926c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019270:	f107 0901 	add.w	r9, r7, #1
 8019274:	1c45      	adds	r5, r0, #1
 8019276:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801927a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801927e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019282:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019286:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801928a:	ea45 0c0c 	orr.w	ip, r5, ip
 801928e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019292:	ea4c 0c09 	orr.w	ip, ip, r9
 8019296:	f824 c00b 	strh.w	ip, [r4, fp]
 801929a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801929c:	4401      	add	r1, r0
 801929e:	9814      	ldr	r0, [sp, #80]	; 0x50
 80192a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80192a4:	4402      	add	r2, r0
 80192a6:	e75c      	b.n	8019162 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80192a8:	b007      	add	sp, #28
 80192aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080192ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80192ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b2:	b085      	sub	sp, #20
 80192b4:	4693      	mov	fp, r2
 80192b6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80192b8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80192ba:	6870      	ldr	r0, [r6, #4]
 80192bc:	9100      	str	r1, [sp, #0]
 80192be:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80192c2:	fb00 2404 	mla	r4, r0, r4, r2
 80192c6:	6832      	ldr	r2, [r6, #0]
 80192c8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80192cc:	682a      	ldr	r2, [r5, #0]
 80192ce:	9201      	str	r2, [sp, #4]
 80192d0:	686a      	ldr	r2, [r5, #4]
 80192d2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80192d6:	3204      	adds	r2, #4
 80192d8:	9202      	str	r2, [sp, #8]
 80192da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80192de:	9a00      	ldr	r2, [sp, #0]
 80192e0:	2a00      	cmp	r2, #0
 80192e2:	dc03      	bgt.n	80192ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80192e4:	f1bb 0f00 	cmp.w	fp, #0
 80192e8:	f340 80a0 	ble.w	801942c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80192ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80192ee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80192f2:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80192f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80192fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019300:	2b00      	cmp	r3, #0
 8019302:	dd0c      	ble.n	801931e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019304:	1406      	asrs	r6, r0, #16
 8019306:	d405      	bmi.n	8019314 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019308:	454e      	cmp	r6, r9
 801930a:	da03      	bge.n	8019314 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801930c:	1416      	asrs	r6, r2, #16
 801930e:	d401      	bmi.n	8019314 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019310:	4546      	cmp	r6, r8
 8019312:	db05      	blt.n	8019320 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019314:	4470      	add	r0, lr
 8019316:	4462      	add	r2, ip
 8019318:	3b01      	subs	r3, #1
 801931a:	3402      	adds	r4, #2
 801931c:	e7f0      	b.n	8019300 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801931e:	d00f      	beq.n	8019340 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019320:	1e5e      	subs	r6, r3, #1
 8019322:	fb0e 0706 	mla	r7, lr, r6, r0
 8019326:	143f      	asrs	r7, r7, #16
 8019328:	d541      	bpl.n	80193ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801932a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801932e:	4698      	mov	r8, r3
 8019330:	9603      	str	r6, [sp, #12]
 8019332:	f1b8 0f00 	cmp.w	r8, #0
 8019336:	dc59      	bgt.n	80193ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019338:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801933c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019340:	9b00      	ldr	r3, [sp, #0]
 8019342:	2b00      	cmp	r3, #0
 8019344:	dd72      	ble.n	801942c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019346:	ee30 0a04 	vadd.f32	s0, s0, s8
 801934a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801934e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019354:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019358:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801935c:	eeb0 6a62 	vmov.f32	s12, s5
 8019360:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019364:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019368:	ee77 2a62 	vsub.f32	s5, s14, s5
 801936c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019370:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019374:	eeb0 6a43 	vmov.f32	s12, s6
 8019378:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801937c:	ee12 2a90 	vmov	r2, s5
 8019380:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019384:	fb92 fef3 	sdiv	lr, r2, r3
 8019388:	ee13 2a10 	vmov	r2, s6
 801938c:	fb92 fcf3 	sdiv	ip, r2, r3
 8019390:	9b00      	ldr	r3, [sp, #0]
 8019392:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019396:	3b01      	subs	r3, #1
 8019398:	9300      	str	r3, [sp, #0]
 801939a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801939e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193a0:	eeb0 3a67 	vmov.f32	s6, s15
 80193a4:	bf08      	it	eq
 80193a6:	465b      	moveq	r3, fp
 80193a8:	eef0 2a47 	vmov.f32	s5, s14
 80193ac:	e797      	b.n	80192de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80193ae:	454f      	cmp	r7, r9
 80193b0:	dabb      	bge.n	801932a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80193b2:	fb0c 2606 	mla	r6, ip, r6, r2
 80193b6:	1436      	asrs	r6, r6, #16
 80193b8:	d4b7      	bmi.n	801932a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80193ba:	4546      	cmp	r6, r8
 80193bc:	dab5      	bge.n	801932a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80193be:	461e      	mov	r6, r3
 80193c0:	46a0      	mov	r8, r4
 80193c2:	2e00      	cmp	r6, #0
 80193c4:	ddb8      	ble.n	8019338 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80193c6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80193ca:	9901      	ldr	r1, [sp, #4]
 80193cc:	1417      	asrs	r7, r2, #16
 80193ce:	ea4f 4920 	mov.w	r9, r0, asr #16
 80193d2:	fb0a 1707 	mla	r7, sl, r7, r1
 80193d6:	9902      	ldr	r1, [sp, #8]
 80193d8:	f817 7009 	ldrb.w	r7, [r7, r9]
 80193dc:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80193e0:	f828 7b02 	strh.w	r7, [r8], #2
 80193e4:	4470      	add	r0, lr
 80193e6:	4462      	add	r2, ip
 80193e8:	3e01      	subs	r6, #1
 80193ea:	e7ea      	b.n	80193c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80193ec:	ea5f 4920 	movs.w	r9, r0, asr #16
 80193f0:	d417      	bmi.n	8019422 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80193f2:	68ae      	ldr	r6, [r5, #8]
 80193f4:	454e      	cmp	r6, r9
 80193f6:	dd14      	ble.n	8019422 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80193f8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80193fc:	d411      	bmi.n	8019422 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80193fe:	68ef      	ldr	r7, [r5, #12]
 8019400:	4557      	cmp	r7, sl
 8019402:	dd0e      	ble.n	8019422 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019404:	9f01      	ldr	r7, [sp, #4]
 8019406:	b236      	sxth	r6, r6
 8019408:	fb0a 7606 	mla	r6, sl, r6, r7
 801940c:	9f02      	ldr	r7, [sp, #8]
 801940e:	f816 6009 	ldrb.w	r6, [r6, r9]
 8019412:	f06f 0101 	mvn.w	r1, #1
 8019416:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801941a:	fb01 f608 	mul.w	r6, r1, r8
 801941e:	9903      	ldr	r1, [sp, #12]
 8019420:	538f      	strh	r7, [r1, r6]
 8019422:	4470      	add	r0, lr
 8019424:	4462      	add	r2, ip
 8019426:	f108 38ff 	add.w	r8, r8, #4294967295
 801942a:	e782      	b.n	8019332 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801942c:	b005      	add	sp, #20
 801942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019436:	b087      	sub	sp, #28
 8019438:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801943a:	9205      	str	r2, [sp, #20]
 801943c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019440:	9203      	str	r2, [sp, #12]
 8019442:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019446:	9102      	str	r1, [sp, #8]
 8019448:	6861      	ldr	r1, [r4, #4]
 801944a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801944e:	fb01 2000 	mla	r0, r1, r0, r2
 8019452:	6822      	ldr	r2, [r4, #0]
 8019454:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019458:	9200      	str	r2, [sp, #0]
 801945a:	f8dc 2000 	ldr.w	r2, [ip]
 801945e:	9204      	str	r2, [sp, #16]
 8019460:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019464:	3204      	adds	r2, #4
 8019466:	9201      	str	r2, [sp, #4]
 8019468:	9a03      	ldr	r2, [sp, #12]
 801946a:	43d5      	mvns	r5, r2
 801946c:	b2ed      	uxtb	r5, r5
 801946e:	9a02      	ldr	r2, [sp, #8]
 8019470:	2a00      	cmp	r2, #0
 8019472:	dc03      	bgt.n	801947c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019474:	9a05      	ldr	r2, [sp, #20]
 8019476:	2a00      	cmp	r2, #0
 8019478:	f340 812c 	ble.w	80196d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801947c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801947e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019482:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019486:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801948a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801948c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019490:	2b00      	cmp	r3, #0
 8019492:	dd10      	ble.n	80194b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019494:	140c      	asrs	r4, r1, #16
 8019496:	d405      	bmi.n	80194a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019498:	4574      	cmp	r4, lr
 801949a:	da03      	bge.n	80194a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801949c:	1414      	asrs	r4, r2, #16
 801949e:	d401      	bmi.n	80194a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80194a0:	42bc      	cmp	r4, r7
 80194a2:	db09      	blt.n	80194b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80194a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80194a6:	9800      	ldr	r0, [sp, #0]
 80194a8:	4421      	add	r1, r4
 80194aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80194ac:	3002      	adds	r0, #2
 80194ae:	4422      	add	r2, r4
 80194b0:	3b01      	subs	r3, #1
 80194b2:	9000      	str	r0, [sp, #0]
 80194b4:	e7ec      	b.n	8019490 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80194b6:	d071      	beq.n	801959c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80194b8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80194ba:	1e5c      	subs	r4, r3, #1
 80194bc:	fb06 1604 	mla	r6, r6, r4, r1
 80194c0:	1436      	asrs	r6, r6, #16
 80194c2:	d45d      	bmi.n	8019580 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80194c4:	4576      	cmp	r6, lr
 80194c6:	da5b      	bge.n	8019580 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80194c8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80194ca:	fb06 2404 	mla	r4, r6, r4, r2
 80194ce:	1424      	asrs	r4, r4, #16
 80194d0:	d456      	bmi.n	8019580 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80194d2:	42bc      	cmp	r4, r7
 80194d4:	da54      	bge.n	8019580 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80194d6:	f8dd 9000 	ldr.w	r9, [sp]
 80194da:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80194de:	4698      	mov	r8, r3
 80194e0:	f1b8 0f00 	cmp.w	r8, #0
 80194e4:	dd54      	ble.n	8019590 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80194e6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80194ea:	9804      	ldr	r0, [sp, #16]
 80194ec:	1414      	asrs	r4, r2, #16
 80194ee:	fb07 0404 	mla	r4, r7, r4, r0
 80194f2:	140e      	asrs	r6, r1, #16
 80194f4:	9801      	ldr	r0, [sp, #4]
 80194f6:	f814 e006 	ldrb.w	lr, [r4, r6]
 80194fa:	f8b9 4000 	ldrh.w	r4, [r9]
 80194fe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019502:	eb00 0b0e 	add.w	fp, r0, lr
 8019506:	1227      	asrs	r7, r4, #8
 8019508:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801950c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019510:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8019514:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019516:	fb16 f60a 	smulbb	r6, r6, sl
 801951a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801951e:	fb07 6705 	mla	r7, r7, r5, r6
 8019522:	10e6      	asrs	r6, r4, #3
 8019524:	00e4      	lsls	r4, r4, #3
 8019526:	b2e4      	uxtb	r4, r4
 8019528:	fb1b fb0a 	smulbb	fp, fp, sl
 801952c:	fb14 f405 	smulbb	r4, r4, r5
 8019530:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019534:	b2bf      	uxth	r7, r7
 8019536:	fb06 b605 	mla	r6, r6, r5, fp
 801953a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801953e:	b2b6      	uxth	r6, r6
 8019540:	fa1f fe8e 	uxth.w	lr, lr
 8019544:	1c7c      	adds	r4, r7, #1
 8019546:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801954a:	f106 0b01 	add.w	fp, r6, #1
 801954e:	f10e 0401 	add.w	r4, lr, #1
 8019552:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8019556:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801955a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801955e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8019562:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019566:	4327      	orrs	r7, r4
 8019568:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801956c:	4401      	add	r1, r0
 801956e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019570:	ea47 070b 	orr.w	r7, r7, fp
 8019574:	f829 7b02 	strh.w	r7, [r9], #2
 8019578:	4402      	add	r2, r0
 801957a:	f108 38ff 	add.w	r8, r8, #4294967295
 801957e:	e7af      	b.n	80194e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019580:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8019584:	f04f 0e00 	mov.w	lr, #0
 8019588:	eb03 040e 	add.w	r4, r3, lr
 801958c:	2c00      	cmp	r4, #0
 801958e:	dc43      	bgt.n	8019618 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8019590:	9a00      	ldr	r2, [sp, #0]
 8019592:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019596:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801959a:	9300      	str	r3, [sp, #0]
 801959c:	9b02      	ldr	r3, [sp, #8]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	f340 8098 	ble.w	80196d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80195a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80195a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80195ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80195b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80195b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80195ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80195be:	eef0 6a62 	vmov.f32	s13, s5
 80195c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80195c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80195ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80195ce:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80195d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80195d6:	eef0 6a43 	vmov.f32	s13, s6
 80195da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80195de:	ee12 2a90 	vmov	r2, s5
 80195e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80195e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80195ea:	ee13 2a10 	vmov	r2, s6
 80195ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80195f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80195f6:	9314      	str	r3, [sp, #80]	; 0x50
 80195f8:	9b02      	ldr	r3, [sp, #8]
 80195fa:	9a05      	ldr	r2, [sp, #20]
 80195fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019600:	3b01      	subs	r3, #1
 8019602:	9302      	str	r3, [sp, #8]
 8019604:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801960a:	eeb0 3a67 	vmov.f32	s6, s15
 801960e:	bf08      	it	eq
 8019610:	4613      	moveq	r3, r2
 8019612:	eef0 2a47 	vmov.f32	s5, s14
 8019616:	e72a      	b.n	801946e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019618:	140f      	asrs	r7, r1, #16
 801961a:	d454      	bmi.n	80196c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801961c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019620:	42be      	cmp	r6, r7
 8019622:	dd50      	ble.n	80196c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019624:	ea5f 4822 	movs.w	r8, r2, asr #16
 8019628:	d44d      	bmi.n	80196c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801962a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801962e:	4544      	cmp	r4, r8
 8019630:	dd49      	ble.n	80196c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019632:	9c04      	ldr	r4, [sp, #16]
 8019634:	b236      	sxth	r6, r6
 8019636:	fb08 4606 	mla	r6, r8, r6, r4
 801963a:	f06f 0001 	mvn.w	r0, #1
 801963e:	f816 8007 	ldrb.w	r8, [r6, r7]
 8019642:	9c01      	ldr	r4, [sp, #4]
 8019644:	fb00 fa0e 	mul.w	sl, r0, lr
 8019648:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801964c:	9800      	ldr	r0, [sp, #0]
 801964e:	eb04 0b08 	add.w	fp, r4, r8
 8019652:	f830 400a 	ldrh.w	r4, [r0, sl]
 8019656:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801965a:	9801      	ldr	r0, [sp, #4]
 801965c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019660:	f810 8008 	ldrb.w	r8, [r0, r8]
 8019664:	9800      	ldr	r0, [sp, #0]
 8019666:	1227      	asrs	r7, r4, #8
 8019668:	fb16 f609 	smulbb	r6, r6, r9
 801966c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019670:	fb07 6705 	mla	r7, r7, r5, r6
 8019674:	10e6      	asrs	r6, r4, #3
 8019676:	00e4      	lsls	r4, r4, #3
 8019678:	b2e4      	uxtb	r4, r4
 801967a:	fb1b fb09 	smulbb	fp, fp, r9
 801967e:	fb14 f405 	smulbb	r4, r4, r5
 8019682:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019686:	b2bf      	uxth	r7, r7
 8019688:	fb06 b605 	mla	r6, r6, r5, fp
 801968c:	fb08 4809 	mla	r8, r8, r9, r4
 8019690:	b2b6      	uxth	r6, r6
 8019692:	fa1f f888 	uxth.w	r8, r8
 8019696:	1c7c      	adds	r4, r7, #1
 8019698:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801969c:	f106 0b01 	add.w	fp, r6, #1
 80196a0:	f108 0401 	add.w	r4, r8, #1
 80196a4:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80196a8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80196ac:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80196b0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80196b4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80196b8:	4327      	orrs	r7, r4
 80196ba:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80196be:	ea47 070b 	orr.w	r7, r7, fp
 80196c2:	f820 700a 	strh.w	r7, [r0, sl]
 80196c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80196c8:	4401      	add	r1, r0
 80196ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 80196cc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80196d0:	4402      	add	r2, r0
 80196d2:	e759      	b.n	8019588 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80196d4:	b007      	add	sp, #28
 80196d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080196dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80196dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196e0:	b085      	sub	sp, #20
 80196e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80196e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80196e8:	9203      	str	r2, [sp, #12]
 80196ea:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80196ee:	6870      	ldr	r0, [r6, #4]
 80196f0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80196f2:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80196f6:	686f      	ldr	r7, [r5, #4]
 80196f8:	9101      	str	r1, [sp, #4]
 80196fa:	fb00 2404 	mla	r4, r0, r4, r2
 80196fe:	6832      	ldr	r2, [r6, #0]
 8019700:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019704:	682a      	ldr	r2, [r5, #0]
 8019706:	9202      	str	r2, [sp, #8]
 8019708:	3704      	adds	r7, #4
 801970a:	9a01      	ldr	r2, [sp, #4]
 801970c:	2a00      	cmp	r2, #0
 801970e:	dc03      	bgt.n	8019718 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019710:	9a03      	ldr	r2, [sp, #12]
 8019712:	2a00      	cmp	r2, #0
 8019714:	f340 80cc 	ble.w	80198b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8019718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801971a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801971e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019722:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019726:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019728:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801972c:	2b00      	cmp	r3, #0
 801972e:	dd0d      	ble.n	801974c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019730:	1406      	asrs	r6, r0, #16
 8019732:	d405      	bmi.n	8019740 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019734:	454e      	cmp	r6, r9
 8019736:	da03      	bge.n	8019740 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019738:	1416      	asrs	r6, r2, #16
 801973a:	d401      	bmi.n	8019740 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801973c:	4546      	cmp	r6, r8
 801973e:	db06      	blt.n	801974e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019740:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019742:	4460      	add	r0, ip
 8019744:	4432      	add	r2, r6
 8019746:	3b01      	subs	r3, #1
 8019748:	3402      	adds	r4, #2
 801974a:	e7ef      	b.n	801972c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801974c:	d00f      	beq.n	801976e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801974e:	1e5e      	subs	r6, r3, #1
 8019750:	fb0c 0e06 	mla	lr, ip, r6, r0
 8019754:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8019758:	d543      	bpl.n	80197e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801975a:	4698      	mov	r8, r3
 801975c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8019760:	f1b8 0f00 	cmp.w	r8, #0
 8019764:	dc71      	bgt.n	801984a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8019766:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801976a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801976e:	9b01      	ldr	r3, [sp, #4]
 8019770:	2b00      	cmp	r3, #0
 8019772:	f340 809d 	ble.w	80198b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8019776:	ee30 0a04 	vadd.f32	s0, s0, s8
 801977a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801977e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019784:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019788:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801978c:	eeb0 6a62 	vmov.f32	s12, s5
 8019790:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019794:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019798:	ee77 2a62 	vsub.f32	s5, s14, s5
 801979c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80197a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80197a4:	eeb0 6a43 	vmov.f32	s12, s6
 80197a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80197ac:	ee12 2a90 	vmov	r2, s5
 80197b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80197b4:	fb92 fcf3 	sdiv	ip, r2, r3
 80197b8:	ee13 2a10 	vmov	r2, s6
 80197bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80197c0:	9312      	str	r3, [sp, #72]	; 0x48
 80197c2:	9b01      	ldr	r3, [sp, #4]
 80197c4:	9a03      	ldr	r2, [sp, #12]
 80197c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197ca:	3b01      	subs	r3, #1
 80197cc:	9301      	str	r3, [sp, #4]
 80197ce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80197d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197d4:	eeb0 3a67 	vmov.f32	s6, s15
 80197d8:	bf08      	it	eq
 80197da:	4613      	moveq	r3, r2
 80197dc:	eef0 2a47 	vmov.f32	s5, s14
 80197e0:	e793      	b.n	801970a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80197e2:	45ce      	cmp	lr, r9
 80197e4:	dab9      	bge.n	801975a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80197e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80197e8:	fb01 2606 	mla	r6, r1, r6, r2
 80197ec:	1436      	asrs	r6, r6, #16
 80197ee:	d4b4      	bmi.n	801975a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80197f0:	4546      	cmp	r6, r8
 80197f2:	dab2      	bge.n	801975a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80197f4:	4698      	mov	r8, r3
 80197f6:	46a2      	mov	sl, r4
 80197f8:	f1b8 0f00 	cmp.w	r8, #0
 80197fc:	ddb3      	ble.n	8019766 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80197fe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019802:	9902      	ldr	r1, [sp, #8]
 8019804:	1416      	asrs	r6, r2, #16
 8019806:	fb09 1606 	mla	r6, r9, r6, r1
 801980a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801980e:	492a      	ldr	r1, [pc, #168]	; (80198b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8019810:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8019814:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019818:	eb07 0b0e 	add.w	fp, r7, lr
 801981c:	4460      	add	r0, ip
 801981e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8019822:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019826:	00f6      	lsls	r6, r6, #3
 8019828:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801982c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019830:	ea49 0606 	orr.w	r6, r9, r6
 8019834:	f817 900e 	ldrb.w	r9, [r7, lr]
 8019838:	9912      	ldr	r1, [sp, #72]	; 0x48
 801983a:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801983e:	f82a 6b02 	strh.w	r6, [sl], #2
 8019842:	440a      	add	r2, r1
 8019844:	f108 38ff 	add.w	r8, r8, #4294967295
 8019848:	e7d6      	b.n	80197f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801984a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801984e:	d429      	bmi.n	80198a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019850:	68ae      	ldr	r6, [r5, #8]
 8019852:	454e      	cmp	r6, r9
 8019854:	dd26      	ble.n	80198a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019856:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801985a:	d423      	bmi.n	80198a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801985c:	68e9      	ldr	r1, [r5, #12]
 801985e:	4559      	cmp	r1, fp
 8019860:	dd20      	ble.n	80198a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019862:	9902      	ldr	r1, [sp, #8]
 8019864:	fa0f fe86 	sxth.w	lr, r6
 8019868:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801986c:	f06f 0101 	mvn.w	r1, #1
 8019870:	f81e e009 	ldrb.w	lr, [lr, r9]
 8019874:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019878:	eb07 060e 	add.w	r6, r7, lr
 801987c:	fb01 f908 	mul.w	r9, r1, r8
 8019880:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019884:	7876      	ldrb	r6, [r6, #1]
 8019886:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801988a:	00f6      	lsls	r6, r6, #3
 801988c:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8019890:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019894:	ea4b 0606 	orr.w	r6, fp, r6
 8019898:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801989c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80198a0:	f82a 6009 	strh.w	r6, [sl, r9]
 80198a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80198a6:	4460      	add	r0, ip
 80198a8:	440a      	add	r2, r1
 80198aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80198ae:	e757      	b.n	8019760 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80198b0:	b005      	add	sp, #20
 80198b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198b6:	bf00      	nop
 80198b8:	fffff800 	.word	0xfffff800

080198bc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80198bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198c0:	b087      	sub	sp, #28
 80198c2:	468b      	mov	fp, r1
 80198c4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80198c6:	9204      	str	r2, [sp, #16]
 80198c8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80198cc:	9205      	str	r2, [sp, #20]
 80198ce:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80198d2:	6841      	ldr	r1, [r0, #4]
 80198d4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80198d8:	fb01 2404 	mla	r4, r1, r4, r2
 80198dc:	6802      	ldr	r2, [r0, #0]
 80198de:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80198e2:	f8dc 2000 	ldr.w	r2, [ip]
 80198e6:	9201      	str	r2, [sp, #4]
 80198e8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80198ec:	3204      	adds	r2, #4
 80198ee:	9202      	str	r2, [sp, #8]
 80198f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80198f4:	f1bb 0f00 	cmp.w	fp, #0
 80198f8:	dc03      	bgt.n	8019902 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80198fa:	9a04      	ldr	r2, [sp, #16]
 80198fc:	2a00      	cmp	r2, #0
 80198fe:	f340 8138 	ble.w	8019b72 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019902:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019904:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8019908:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801990c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019910:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019912:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019916:	2b00      	cmp	r3, #0
 8019918:	dd0e      	ble.n	8019938 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801991a:	1402      	asrs	r2, r0, #16
 801991c:	d405      	bmi.n	801992a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801991e:	42ba      	cmp	r2, r7
 8019920:	da03      	bge.n	801992a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019922:	140a      	asrs	r2, r1, #16
 8019924:	d401      	bmi.n	801992a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019926:	42b2      	cmp	r2, r6
 8019928:	db07      	blt.n	801993a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801992a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801992c:	4410      	add	r0, r2
 801992e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019930:	3b01      	subs	r3, #1
 8019932:	4411      	add	r1, r2
 8019934:	3402      	adds	r4, #2
 8019936:	e7ee      	b.n	8019916 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019938:	d019      	beq.n	801996e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801993a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801993c:	1e5a      	subs	r2, r3, #1
 801993e:	fb05 0502 	mla	r5, r5, r2, r0
 8019942:	142d      	asrs	r5, r5, #16
 8019944:	d409      	bmi.n	801995a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019946:	42bd      	cmp	r5, r7
 8019948:	da07      	bge.n	801995a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801994a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801994c:	fb05 1202 	mla	r2, r5, r2, r1
 8019950:	1412      	asrs	r2, r2, #16
 8019952:	d402      	bmi.n	801995a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019954:	42b2      	cmp	r2, r6
 8019956:	f2c0 80ac 	blt.w	8019ab2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801995a:	f04f 0e00 	mov.w	lr, #0
 801995e:	eb03 020e 	add.w	r2, r3, lr
 8019962:	2a00      	cmp	r2, #0
 8019964:	dc3e      	bgt.n	80199e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019966:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801996a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801996e:	f1bb 0f00 	cmp.w	fp, #0
 8019972:	f340 80fe 	ble.w	8019b72 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019976:	ee30 0a04 	vadd.f32	s0, s0, s8
 801997a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801997e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019982:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019984:	f1bb 0b01 	subs.w	fp, fp, #1
 8019988:	ee31 1a05 	vadd.f32	s2, s2, s10
 801998c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019990:	eeb0 6a62 	vmov.f32	s12, s5
 8019994:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019998:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801999c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80199a0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80199a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80199a8:	eeb0 6a43 	vmov.f32	s12, s6
 80199ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80199b0:	ee12 2a90 	vmov	r2, s5
 80199b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80199b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80199bc:	ee13 2a10 	vmov	r2, s6
 80199c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80199c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80199c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80199c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80199cc:	9a04      	ldr	r2, [sp, #16]
 80199ce:	9314      	str	r3, [sp, #80]	; 0x50
 80199d0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80199d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80199d6:	eeb0 3a67 	vmov.f32	s6, s15
 80199da:	bf08      	it	eq
 80199dc:	4613      	moveq	r3, r2
 80199de:	eef0 2a47 	vmov.f32	s5, s14
 80199e2:	e787      	b.n	80198f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80199e4:	1406      	asrs	r6, r0, #16
 80199e6:	d45d      	bmi.n	8019aa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80199e8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80199ec:	42b5      	cmp	r5, r6
 80199ee:	dd59      	ble.n	8019aa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80199f0:	140f      	asrs	r7, r1, #16
 80199f2:	d457      	bmi.n	8019aa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80199f4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80199f8:	42ba      	cmp	r2, r7
 80199fa:	dd53      	ble.n	8019aa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80199fc:	9a01      	ldr	r2, [sp, #4]
 80199fe:	b22d      	sxth	r5, r5
 8019a00:	fb07 2505 	mla	r5, r7, r5, r2
 8019a04:	5daa      	ldrb	r2, [r5, r6]
 8019a06:	9d02      	ldr	r5, [sp, #8]
 8019a08:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8019a0c:	0e2e      	lsrs	r6, r5, #24
 8019a0e:	d049      	beq.n	8019aa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019a10:	f06f 0201 	mvn.w	r2, #1
 8019a14:	fb02 f20e 	mul.w	r2, r2, lr
 8019a18:	9203      	str	r2, [sp, #12]
 8019a1a:	f834 8002 	ldrh.w	r8, [r4, r2]
 8019a1e:	9a05      	ldr	r2, [sp, #20]
 8019a20:	4356      	muls	r6, r2
 8019a22:	1c72      	adds	r2, r6, #1
 8019a24:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8019a28:	1212      	asrs	r2, r2, #8
 8019a2a:	fa1f f982 	uxth.w	r9, r2
 8019a2e:	ea4f 2728 	mov.w	r7, r8, asr #8
 8019a32:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019a36:	43d2      	mvns	r2, r2
 8019a38:	b2d2      	uxtb	r2, r2
 8019a3a:	fb16 f609 	smulbb	r6, r6, r9
 8019a3e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019a42:	fb07 6702 	mla	r7, r7, r2, r6
 8019a46:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019a4a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8019a4e:	b2ed      	uxtb	r5, r5
 8019a50:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019a54:	fa5f f888 	uxtb.w	r8, r8
 8019a58:	fb15 f509 	smulbb	r5, r5, r9
 8019a5c:	fb08 5502 	mla	r5, r8, r2, r5
 8019a60:	b2bf      	uxth	r7, r7
 8019a62:	fb1a fa09 	smulbb	sl, sl, r9
 8019a66:	b2ad      	uxth	r5, r5
 8019a68:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019a6c:	fb06 a602 	mla	r6, r6, r2, sl
 8019a70:	1c7a      	adds	r2, r7, #1
 8019a72:	f105 0a01 	add.w	sl, r5, #1
 8019a76:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019a7a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019a7e:	b2b6      	uxth	r6, r6
 8019a80:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019a84:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019a88:	ea4a 0707 	orr.w	r7, sl, r7
 8019a8c:	f106 0a01 	add.w	sl, r6, #1
 8019a90:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019a94:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019a98:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019a9c:	9a03      	ldr	r2, [sp, #12]
 8019a9e:	ea47 070a 	orr.w	r7, r7, sl
 8019aa2:	52a7      	strh	r7, [r4, r2]
 8019aa4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019aa6:	4410      	add	r0, r2
 8019aa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019aaa:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019aae:	4411      	add	r1, r2
 8019ab0:	e755      	b.n	801995e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019ab2:	f04f 0800 	mov.w	r8, #0
 8019ab6:	eba3 0208 	sub.w	r2, r3, r8
 8019aba:	2a00      	cmp	r2, #0
 8019abc:	f77f af53 	ble.w	8019966 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8019ac0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8019ac4:	9f01      	ldr	r7, [sp, #4]
 8019ac6:	140a      	asrs	r2, r1, #16
 8019ac8:	1405      	asrs	r5, r0, #16
 8019aca:	fb06 7202 	mla	r2, r6, r2, r7
 8019ace:	5d52      	ldrb	r2, [r2, r5]
 8019ad0:	9d02      	ldr	r5, [sp, #8]
 8019ad2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8019ad6:	0e2e      	lsrs	r6, r5, #24
 8019ad8:	d044      	beq.n	8019b64 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8019ada:	9a05      	ldr	r2, [sp, #20]
 8019adc:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8019ae0:	4356      	muls	r6, r2
 8019ae2:	1c72      	adds	r2, r6, #1
 8019ae4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8019ae8:	1212      	asrs	r2, r2, #8
 8019aea:	fa1f f982 	uxth.w	r9, r2
 8019aee:	ea4f 272e 	mov.w	r7, lr, asr #8
 8019af2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019af6:	43d2      	mvns	r2, r2
 8019af8:	b2d2      	uxtb	r2, r2
 8019afa:	fb16 f609 	smulbb	r6, r6, r9
 8019afe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019b02:	fb07 6702 	mla	r7, r7, r2, r6
 8019b06:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019b0a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019b0e:	b2ed      	uxtb	r5, r5
 8019b10:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019b14:	fa5f fe8e 	uxtb.w	lr, lr
 8019b18:	fb15 f509 	smulbb	r5, r5, r9
 8019b1c:	fb0e 5502 	mla	r5, lr, r2, r5
 8019b20:	b2bf      	uxth	r7, r7
 8019b22:	fb1a fa09 	smulbb	sl, sl, r9
 8019b26:	b2ad      	uxth	r5, r5
 8019b28:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019b2c:	fb06 a602 	mla	r6, r6, r2, sl
 8019b30:	1c7a      	adds	r2, r7, #1
 8019b32:	f105 0a01 	add.w	sl, r5, #1
 8019b36:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019b3a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019b3e:	b2b6      	uxth	r6, r6
 8019b40:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019b44:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019b48:	ea4a 0707 	orr.w	r7, sl, r7
 8019b4c:	f106 0a01 	add.w	sl, r6, #1
 8019b50:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019b54:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019b58:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019b5c:	ea47 070a 	orr.w	r7, r7, sl
 8019b60:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8019b64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019b66:	4410      	add	r0, r2
 8019b68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b6a:	f108 0801 	add.w	r8, r8, #1
 8019b6e:	4411      	add	r1, r2
 8019b70:	e7a1      	b.n	8019ab6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8019b72:	b007      	add	sp, #28
 8019b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b7c:	b085      	sub	sp, #20
 8019b7e:	468b      	mov	fp, r1
 8019b80:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019b82:	9203      	str	r2, [sp, #12]
 8019b84:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019b88:	6841      	ldr	r1, [r0, #4]
 8019b8a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8019b8e:	fb01 2404 	mla	r4, r1, r4, r2
 8019b92:	6802      	ldr	r2, [r0, #0]
 8019b94:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019b98:	f8de 2000 	ldr.w	r2, [lr]
 8019b9c:	9200      	str	r2, [sp, #0]
 8019b9e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019ba2:	3204      	adds	r2, #4
 8019ba4:	9201      	str	r2, [sp, #4]
 8019ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019baa:	f1bb 0f00 	cmp.w	fp, #0
 8019bae:	dc03      	bgt.n	8019bb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8019bb0:	9a03      	ldr	r2, [sp, #12]
 8019bb2:	2a00      	cmp	r2, #0
 8019bb4:	f340 8153 	ble.w	8019e5e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8019bb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019bba:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019bbe:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8019bc2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019bc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019bc8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	dd0e      	ble.n	8019bee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019bd0:	1408      	asrs	r0, r1, #16
 8019bd2:	d405      	bmi.n	8019be0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019bd4:	42b8      	cmp	r0, r7
 8019bd6:	da03      	bge.n	8019be0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019bd8:	1410      	asrs	r0, r2, #16
 8019bda:	d401      	bmi.n	8019be0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019bdc:	42b0      	cmp	r0, r6
 8019bde:	db07      	blt.n	8019bf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019be0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019be2:	4401      	add	r1, r0
 8019be4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019be6:	3b01      	subs	r3, #1
 8019be8:	4402      	add	r2, r0
 8019bea:	3402      	adds	r4, #2
 8019bec:	e7ee      	b.n	8019bcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8019bee:	d017      	beq.n	8019c20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019bf0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019bf2:	1e58      	subs	r0, r3, #1
 8019bf4:	fb05 1500 	mla	r5, r5, r0, r1
 8019bf8:	142d      	asrs	r5, r5, #16
 8019bfa:	d409      	bmi.n	8019c10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019bfc:	42bd      	cmp	r5, r7
 8019bfe:	da07      	bge.n	8019c10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019c00:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019c02:	fb05 2000 	mla	r0, r5, r0, r2
 8019c06:	1400      	asrs	r0, r0, #16
 8019c08:	d402      	bmi.n	8019c10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019c0a:	42b0      	cmp	r0, r6
 8019c0c:	f2c0 80bc 	blt.w	8019d88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8019c10:	2600      	movs	r6, #0
 8019c12:	1998      	adds	r0, r3, r6
 8019c14:	2800      	cmp	r0, #0
 8019c16:	dc3e      	bgt.n	8019c96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019c18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019c1c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019c20:	f1bb 0f00 	cmp.w	fp, #0
 8019c24:	f340 811b 	ble.w	8019e5e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8019c28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019c2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019c30:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c36:	f1bb 0b01 	subs.w	fp, fp, #1
 8019c3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019c3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019c42:	eeb0 6a62 	vmov.f32	s12, s5
 8019c46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019c4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019c4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019c52:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019c56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019c5a:	eeb0 6a43 	vmov.f32	s12, s6
 8019c5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019c62:	ee12 2a90 	vmov	r2, s5
 8019c66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019c6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c6e:	ee13 2a10 	vmov	r2, s6
 8019c72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019c76:	9311      	str	r3, [sp, #68]	; 0x44
 8019c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c7e:	9a03      	ldr	r2, [sp, #12]
 8019c80:	9312      	str	r3, [sp, #72]	; 0x48
 8019c82:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c88:	eeb0 3a67 	vmov.f32	s6, s15
 8019c8c:	bf08      	it	eq
 8019c8e:	4613      	moveq	r3, r2
 8019c90:	eef0 2a47 	vmov.f32	s5, s14
 8019c94:	e789      	b.n	8019baa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8019c96:	140f      	asrs	r7, r1, #16
 8019c98:	d426      	bmi.n	8019ce8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019c9a:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019c9e:	42bd      	cmp	r5, r7
 8019ca0:	dd22      	ble.n	8019ce8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019ca2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019ca6:	d41f      	bmi.n	8019ce8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019ca8:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019cac:	4560      	cmp	r0, ip
 8019cae:	dd1b      	ble.n	8019ce8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019cb0:	9800      	ldr	r0, [sp, #0]
 8019cb2:	b22d      	sxth	r5, r5
 8019cb4:	fb0c 0505 	mla	r5, ip, r5, r0
 8019cb8:	5de8      	ldrb	r0, [r5, r7]
 8019cba:	9d01      	ldr	r5, [sp, #4]
 8019cbc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8019cc0:	0e07      	lsrs	r7, r0, #24
 8019cc2:	2fff      	cmp	r7, #255	; 0xff
 8019cc4:	d116      	bne.n	8019cf4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019cc6:	f06f 0501 	mvn.w	r5, #1
 8019cca:	fb05 f706 	mul.w	r7, r5, r6
 8019cce:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8019cd2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8019cd6:	0945      	lsrs	r5, r0, #5
 8019cd8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019cdc:	ea4c 0505 	orr.w	r5, ip, r5
 8019ce0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8019ce4:	4305      	orrs	r5, r0
 8019ce6:	53e5      	strh	r5, [r4, r7]
 8019ce8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019cea:	4401      	add	r1, r0
 8019cec:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019cee:	3e01      	subs	r6, #1
 8019cf0:	4402      	add	r2, r0
 8019cf2:	e78e      	b.n	8019c12 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019cf4:	b2fd      	uxtb	r5, r7
 8019cf6:	2f00      	cmp	r7, #0
 8019cf8:	d0f6      	beq.n	8019ce8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019cfa:	f06f 0701 	mvn.w	r7, #1
 8019cfe:	4377      	muls	r7, r6
 8019d00:	fa1f f985 	uxth.w	r9, r5
 8019d04:	f834 8007 	ldrh.w	r8, [r4, r7]
 8019d08:	9702      	str	r7, [sp, #8]
 8019d0a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8019d0e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019d12:	43ed      	mvns	r5, r5
 8019d14:	b2ed      	uxtb	r5, r5
 8019d16:	fb17 f709 	smulbb	r7, r7, r9
 8019d1a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019d1e:	fb0c 7c05 	mla	ip, ip, r5, r7
 8019d22:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019d26:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8019d2a:	b2c0      	uxtb	r0, r0
 8019d2c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019d30:	fa5f f888 	uxtb.w	r8, r8
 8019d34:	fb10 f009 	smulbb	r0, r0, r9
 8019d38:	fb08 0005 	mla	r0, r8, r5, r0
 8019d3c:	b280      	uxth	r0, r0
 8019d3e:	fa1f fc8c 	uxth.w	ip, ip
 8019d42:	fb1a fa09 	smulbb	sl, sl, r9
 8019d46:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019d4a:	fb07 a705 	mla	r7, r7, r5, sl
 8019d4e:	f100 0a01 	add.w	sl, r0, #1
 8019d52:	f10c 0501 	add.w	r5, ip, #1
 8019d56:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8019d5a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019d5e:	b2bf      	uxth	r7, r7
 8019d60:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019d64:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019d68:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019d6c:	f107 0a01 	add.w	sl, r7, #1
 8019d70:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019d74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019d78:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019d7c:	9802      	ldr	r0, [sp, #8]
 8019d7e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019d82:	f824 c000 	strh.w	ip, [r4, r0]
 8019d86:	e7af      	b.n	8019ce8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019d88:	f04f 0800 	mov.w	r8, #0
 8019d8c:	eba3 0008 	sub.w	r0, r3, r8
 8019d90:	2800      	cmp	r0, #0
 8019d92:	f77f af41 	ble.w	8019c18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019d96:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8019d9a:	9f00      	ldr	r7, [sp, #0]
 8019d9c:	1410      	asrs	r0, r2, #16
 8019d9e:	140d      	asrs	r5, r1, #16
 8019da0:	fb06 7000 	mla	r0, r6, r0, r7
 8019da4:	5d40      	ldrb	r0, [r0, r5]
 8019da6:	9d01      	ldr	r5, [sp, #4]
 8019da8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8019dac:	0e2e      	lsrs	r6, r5, #24
 8019dae:	2eff      	cmp	r6, #255	; 0xff
 8019db0:	d112      	bne.n	8019dd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8019db2:	482c      	ldr	r0, [pc, #176]	; (8019e64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8019db4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8019db8:	0968      	lsrs	r0, r5, #5
 8019dba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019dbe:	4330      	orrs	r0, r6
 8019dc0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019dc4:	4328      	orrs	r0, r5
 8019dc6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8019dca:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019dcc:	4401      	add	r1, r0
 8019dce:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019dd0:	f108 0801 	add.w	r8, r8, #1
 8019dd4:	4402      	add	r2, r0
 8019dd6:	e7d9      	b.n	8019d8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019dd8:	b2f0      	uxtb	r0, r6
 8019dda:	2e00      	cmp	r6, #0
 8019ddc:	d0f5      	beq.n	8019dca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8019dde:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8019de2:	fa1f f980 	uxth.w	r9, r0
 8019de6:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019dea:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019dee:	43c0      	mvns	r0, r0
 8019df0:	b2c0      	uxtb	r0, r0
 8019df2:	fb16 f609 	smulbb	r6, r6, r9
 8019df6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019dfa:	fb07 6700 	mla	r7, r7, r0, r6
 8019dfe:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019e02:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8019e06:	b2ed      	uxtb	r5, r5
 8019e08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019e0c:	fa5f fc8c 	uxtb.w	ip, ip
 8019e10:	fb15 f509 	smulbb	r5, r5, r9
 8019e14:	fb0c 5500 	mla	r5, ip, r0, r5
 8019e18:	b2bf      	uxth	r7, r7
 8019e1a:	fb1a fa09 	smulbb	sl, sl, r9
 8019e1e:	b2ad      	uxth	r5, r5
 8019e20:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019e24:	fb06 a600 	mla	r6, r6, r0, sl
 8019e28:	1c78      	adds	r0, r7, #1
 8019e2a:	f105 0a01 	add.w	sl, r5, #1
 8019e2e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8019e32:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019e36:	b2b6      	uxth	r6, r6
 8019e38:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019e3c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019e40:	ea4a 0707 	orr.w	r7, sl, r7
 8019e44:	f106 0a01 	add.w	sl, r6, #1
 8019e48:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019e4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019e50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019e54:	ea47 070a 	orr.w	r7, r7, sl
 8019e58:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8019e5c:	e7b5      	b.n	8019dca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8019e5e:	b005      	add	sp, #20
 8019e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e64:	fffff800 	.word	0xfffff800

08019e68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e6c:	b087      	sub	sp, #28
 8019e6e:	468b      	mov	fp, r1
 8019e70:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019e72:	9204      	str	r2, [sp, #16]
 8019e74:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019e78:	9205      	str	r2, [sp, #20]
 8019e7a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019e7e:	6861      	ldr	r1, [r4, #4]
 8019e80:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019e84:	fb01 2000 	mla	r0, r1, r0, r2
 8019e88:	6822      	ldr	r2, [r4, #0]
 8019e8a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8019e8e:	f8de 2000 	ldr.w	r2, [lr]
 8019e92:	9201      	str	r2, [sp, #4]
 8019e94:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019e98:	9202      	str	r2, [sp, #8]
 8019e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e9e:	f1bb 0f00 	cmp.w	fp, #0
 8019ea2:	dc03      	bgt.n	8019eac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8019ea4:	9a04      	ldr	r2, [sp, #16]
 8019ea6:	2a00      	cmp	r2, #0
 8019ea8:	f340 8142 	ble.w	801a130 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8019eac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019eae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019eb2:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8019eb6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019eba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ebc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	dd0e      	ble.n	8019ee2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019ec4:	140c      	asrs	r4, r1, #16
 8019ec6:	d405      	bmi.n	8019ed4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019ec8:	42bc      	cmp	r4, r7
 8019eca:	da03      	bge.n	8019ed4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019ecc:	1414      	asrs	r4, r2, #16
 8019ece:	d401      	bmi.n	8019ed4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019ed0:	42b4      	cmp	r4, r6
 8019ed2:	db07      	blt.n	8019ee4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019ed4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019ed6:	4421      	add	r1, r4
 8019ed8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019eda:	3b01      	subs	r3, #1
 8019edc:	4422      	add	r2, r4
 8019ede:	3002      	adds	r0, #2
 8019ee0:	e7ee      	b.n	8019ec0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8019ee2:	d019      	beq.n	8019f18 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8019ee4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019ee6:	1e5c      	subs	r4, r3, #1
 8019ee8:	fb05 1504 	mla	r5, r5, r4, r1
 8019eec:	142d      	asrs	r5, r5, #16
 8019eee:	d409      	bmi.n	8019f04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019ef0:	42bd      	cmp	r5, r7
 8019ef2:	da07      	bge.n	8019f04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019ef4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019ef6:	fb05 2404 	mla	r4, r5, r4, r2
 8019efa:	1424      	asrs	r4, r4, #16
 8019efc:	d402      	bmi.n	8019f04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019efe:	42b4      	cmp	r4, r6
 8019f00:	f2c0 80b1 	blt.w	801a066 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8019f04:	f04f 0800 	mov.w	r8, #0
 8019f08:	eb03 0408 	add.w	r4, r3, r8
 8019f0c:	2c00      	cmp	r4, #0
 8019f0e:	dc3e      	bgt.n	8019f8e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019f10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f14:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019f18:	f1bb 0f00 	cmp.w	fp, #0
 8019f1c:	f340 8108 	ble.w	801a130 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8019f20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f2e:	f1bb 0b01 	subs.w	fp, fp, #1
 8019f32:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f3a:	eeb0 6a62 	vmov.f32	s12, s5
 8019f3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f46:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f4a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019f4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f52:	eeb0 6a43 	vmov.f32	s12, s6
 8019f56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f5a:	ee12 2a90 	vmov	r2, s5
 8019f5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f62:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f66:	ee13 2a10 	vmov	r2, s6
 8019f6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8019f70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f72:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f76:	9a04      	ldr	r2, [sp, #16]
 8019f78:	9314      	str	r3, [sp, #80]	; 0x50
 8019f7a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f80:	eeb0 3a67 	vmov.f32	s6, s15
 8019f84:	bf08      	it	eq
 8019f86:	4613      	moveq	r3, r2
 8019f88:	eef0 2a47 	vmov.f32	s5, s14
 8019f8c:	e787      	b.n	8019e9e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019f8e:	140e      	asrs	r6, r1, #16
 8019f90:	d462      	bmi.n	801a058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019f92:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019f96:	42b5      	cmp	r5, r6
 8019f98:	dd5e      	ble.n	801a058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019f9a:	1417      	asrs	r7, r2, #16
 8019f9c:	d45c      	bmi.n	801a058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019f9e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8019fa2:	42bc      	cmp	r4, r7
 8019fa4:	dd58      	ble.n	801a058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019fa6:	b22d      	sxth	r5, r5
 8019fa8:	fb07 6505 	mla	r5, r7, r5, r6
 8019fac:	9c02      	ldr	r4, [sp, #8]
 8019fae:	5d66      	ldrb	r6, [r4, r5]
 8019fb0:	2e00      	cmp	r6, #0
 8019fb2:	d051      	beq.n	801a058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019fb4:	9c01      	ldr	r4, [sp, #4]
 8019fb6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8019fba:	f06f 0401 	mvn.w	r4, #1
 8019fbe:	fb04 f408 	mul.w	r4, r4, r8
 8019fc2:	9403      	str	r4, [sp, #12]
 8019fc4:	5b05      	ldrh	r5, [r0, r4]
 8019fc6:	9c05      	ldr	r4, [sp, #20]
 8019fc8:	4366      	muls	r6, r4
 8019fca:	1c74      	adds	r4, r6, #1
 8019fcc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8019fd0:	1224      	asrs	r4, r4, #8
 8019fd2:	b2a7      	uxth	r7, r4
 8019fd4:	122e      	asrs	r6, r5, #8
 8019fd6:	43e4      	mvns	r4, r4
 8019fd8:	b2e4      	uxtb	r4, r4
 8019fda:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8019fde:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019fe2:	fb16 f604 	smulbb	r6, r6, r4
 8019fe6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019fea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019fee:	00ed      	lsls	r5, r5, #3
 8019ff0:	fb0c 6c07 	mla	ip, ip, r7, r6
 8019ff4:	b2ed      	uxtb	r5, r5
 8019ff6:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8019ffa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8019ffe:	fb15 f504 	smulbb	r5, r5, r4
 801a002:	fa5f f989 	uxtb.w	r9, r9
 801a006:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a00a:	fb09 5507 	mla	r5, r9, r7, r5
 801a00e:	fb1a fa04 	smulbb	sl, sl, r4
 801a012:	fa1f fc8c 	uxth.w	ip, ip
 801a016:	b2ad      	uxth	r5, r5
 801a018:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a01c:	fb06 a607 	mla	r6, r6, r7, sl
 801a020:	f10c 0401 	add.w	r4, ip, #1
 801a024:	f105 0a01 	add.w	sl, r5, #1
 801a028:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a02c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a030:	b2b6      	uxth	r6, r6
 801a032:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a036:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a03a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a03e:	f106 0a01 	add.w	sl, r6, #1
 801a042:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a046:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a04a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a04e:	9c03      	ldr	r4, [sp, #12]
 801a050:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a054:	f820 c004 	strh.w	ip, [r0, r4]
 801a058:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a05a:	4421      	add	r1, r4
 801a05c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a05e:	f108 38ff 	add.w	r8, r8, #4294967295
 801a062:	4422      	add	r2, r4
 801a064:	e750      	b.n	8019f08 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a066:	f04f 0900 	mov.w	r9, #0
 801a06a:	eba3 0409 	sub.w	r4, r3, r9
 801a06e:	2c00      	cmp	r4, #0
 801a070:	f77f af4e 	ble.w	8019f10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a074:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a078:	140d      	asrs	r5, r1, #16
 801a07a:	1414      	asrs	r4, r2, #16
 801a07c:	fb06 5404 	mla	r4, r6, r4, r5
 801a080:	9d02      	ldr	r5, [sp, #8]
 801a082:	5d2e      	ldrb	r6, [r5, r4]
 801a084:	2e00      	cmp	r6, #0
 801a086:	d04c      	beq.n	801a122 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801a088:	9d01      	ldr	r5, [sp, #4]
 801a08a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801a08e:	9c05      	ldr	r4, [sp, #20]
 801a090:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801a094:	4366      	muls	r6, r4
 801a096:	1c74      	adds	r4, r6, #1
 801a098:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801a09c:	1224      	asrs	r4, r4, #8
 801a09e:	b2a7      	uxth	r7, r4
 801a0a0:	122e      	asrs	r6, r5, #8
 801a0a2:	43e4      	mvns	r4, r4
 801a0a4:	b2e4      	uxtb	r4, r4
 801a0a6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a0aa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a0ae:	fb16 f604 	smulbb	r6, r6, r4
 801a0b2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a0b6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a0ba:	00ed      	lsls	r5, r5, #3
 801a0bc:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a0c0:	b2ed      	uxtb	r5, r5
 801a0c2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a0c6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a0ca:	fb15 f504 	smulbb	r5, r5, r4
 801a0ce:	fa5f f888 	uxtb.w	r8, r8
 801a0d2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a0d6:	fb08 5507 	mla	r5, r8, r7, r5
 801a0da:	fb1a fa04 	smulbb	sl, sl, r4
 801a0de:	fa1f fc8c 	uxth.w	ip, ip
 801a0e2:	b2ad      	uxth	r5, r5
 801a0e4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a0e8:	fb06 a607 	mla	r6, r6, r7, sl
 801a0ec:	f10c 0401 	add.w	r4, ip, #1
 801a0f0:	f105 0a01 	add.w	sl, r5, #1
 801a0f4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a0f8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a0fc:	b2b6      	uxth	r6, r6
 801a0fe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a102:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a106:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a10a:	f106 0a01 	add.w	sl, r6, #1
 801a10e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a112:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a116:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a11a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a11e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801a122:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a124:	4421      	add	r1, r4
 801a126:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a128:	f109 0901 	add.w	r9, r9, #1
 801a12c:	4422      	add	r2, r4
 801a12e:	e79c      	b.n	801a06a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801a130:	b007      	add	sp, #28
 801a132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a136 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a13a:	b085      	sub	sp, #20
 801a13c:	468b      	mov	fp, r1
 801a13e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a140:	9203      	str	r2, [sp, #12]
 801a142:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801a146:	6861      	ldr	r1, [r4, #4]
 801a148:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a14c:	fb01 2000 	mla	r0, r1, r0, r2
 801a150:	6822      	ldr	r2, [r4, #0]
 801a152:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a156:	f8d8 2000 	ldr.w	r2, [r8]
 801a15a:	9200      	str	r2, [sp, #0]
 801a15c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a160:	9201      	str	r2, [sp, #4]
 801a162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a166:	f1bb 0f00 	cmp.w	fp, #0
 801a16a:	dc03      	bgt.n	801a174 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a16c:	9a03      	ldr	r2, [sp, #12]
 801a16e:	2a00      	cmp	r2, #0
 801a170:	f340 8146 	ble.w	801a400 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a176:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801a17a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801a17e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a182:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a184:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a188:	2b00      	cmp	r3, #0
 801a18a:	dd0e      	ble.n	801a1aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a18c:	140c      	asrs	r4, r1, #16
 801a18e:	d405      	bmi.n	801a19c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a190:	42bc      	cmp	r4, r7
 801a192:	da03      	bge.n	801a19c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a194:	1414      	asrs	r4, r2, #16
 801a196:	d401      	bmi.n	801a19c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a198:	42b4      	cmp	r4, r6
 801a19a:	db07      	blt.n	801a1ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a19c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a19e:	4421      	add	r1, r4
 801a1a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a1a2:	3b01      	subs	r3, #1
 801a1a4:	4422      	add	r2, r4
 801a1a6:	3002      	adds	r0, #2
 801a1a8:	e7ee      	b.n	801a188 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a1aa:	d017      	beq.n	801a1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a1ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a1ae:	1e5c      	subs	r4, r3, #1
 801a1b0:	fb05 1504 	mla	r5, r5, r4, r1
 801a1b4:	142d      	asrs	r5, r5, #16
 801a1b6:	d409      	bmi.n	801a1cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a1b8:	42bd      	cmp	r5, r7
 801a1ba:	da07      	bge.n	801a1cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a1bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a1be:	fb05 2404 	mla	r4, r5, r4, r2
 801a1c2:	1424      	asrs	r4, r4, #16
 801a1c4:	d402      	bmi.n	801a1cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a1c6:	42b4      	cmp	r4, r6
 801a1c8:	f2c0 80b3 	blt.w	801a332 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801a1cc:	2600      	movs	r6, #0
 801a1ce:	199c      	adds	r4, r3, r6
 801a1d0:	2c00      	cmp	r4, #0
 801a1d2:	dc3e      	bgt.n	801a252 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a1d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a1dc:	f1bb 0f00 	cmp.w	fp, #0
 801a1e0:	f340 810e 	ble.w	801a400 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a1e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a1e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a1ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a1f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1f2:	f1bb 0b01 	subs.w	fp, fp, #1
 801a1f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a1fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a1fe:	eeb0 6a62 	vmov.f32	s12, s5
 801a202:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a206:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a20a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a20e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a212:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a216:	eeb0 6a43 	vmov.f32	s12, s6
 801a21a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a21e:	ee12 2a90 	vmov	r2, s5
 801a222:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a226:	fb92 f3f3 	sdiv	r3, r2, r3
 801a22a:	ee13 2a10 	vmov	r2, s6
 801a22e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a232:	9311      	str	r3, [sp, #68]	; 0x44
 801a234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a236:	fb92 f3f3 	sdiv	r3, r2, r3
 801a23a:	9a03      	ldr	r2, [sp, #12]
 801a23c:	9312      	str	r3, [sp, #72]	; 0x48
 801a23e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a244:	eeb0 3a67 	vmov.f32	s6, s15
 801a248:	bf08      	it	eq
 801a24a:	4613      	moveq	r3, r2
 801a24c:	eef0 2a47 	vmov.f32	s5, s14
 801a250:	e789      	b.n	801a166 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a252:	140f      	asrs	r7, r1, #16
 801a254:	d418      	bmi.n	801a288 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a256:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a25a:	42bd      	cmp	r5, r7
 801a25c:	dd14      	ble.n	801a288 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a25e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a262:	d411      	bmi.n	801a288 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a264:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801a268:	4564      	cmp	r4, ip
 801a26a:	dd0d      	ble.n	801a288 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a26c:	b22d      	sxth	r5, r5
 801a26e:	fb0c 7505 	mla	r5, ip, r5, r7
 801a272:	9c01      	ldr	r4, [sp, #4]
 801a274:	5d64      	ldrb	r4, [r4, r5]
 801a276:	2cff      	cmp	r4, #255	; 0xff
 801a278:	d10c      	bne.n	801a294 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a27a:	9c00      	ldr	r4, [sp, #0]
 801a27c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801a280:	f06f 0401 	mvn.w	r4, #1
 801a284:	4374      	muls	r4, r6
 801a286:	5305      	strh	r5, [r0, r4]
 801a288:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a28a:	4421      	add	r1, r4
 801a28c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a28e:	3e01      	subs	r6, #1
 801a290:	4422      	add	r2, r4
 801a292:	e79c      	b.n	801a1ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a294:	2c00      	cmp	r4, #0
 801a296:	d0f7      	beq.n	801a288 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a298:	9f00      	ldr	r7, [sp, #0]
 801a29a:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801a29e:	f06f 0501 	mvn.w	r5, #1
 801a2a2:	4375      	muls	r5, r6
 801a2a4:	9502      	str	r5, [sp, #8]
 801a2a6:	5b45      	ldrh	r5, [r0, r5]
 801a2a8:	fa1f fc84 	uxth.w	ip, r4
 801a2ac:	122f      	asrs	r7, r5, #8
 801a2ae:	43e4      	mvns	r4, r4
 801a2b0:	b2e4      	uxtb	r4, r4
 801a2b2:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801a2b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a2ba:	fb17 f704 	smulbb	r7, r7, r4
 801a2be:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a2c2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a2c6:	00ed      	lsls	r5, r5, #3
 801a2c8:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801a2cc:	b2ed      	uxtb	r5, r5
 801a2ce:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801a2d2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801a2d6:	fb15 f504 	smulbb	r5, r5, r4
 801a2da:	fa5f f989 	uxtb.w	r9, r9
 801a2de:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a2e2:	fb09 550c 	mla	r5, r9, ip, r5
 801a2e6:	fb1a fa04 	smulbb	sl, sl, r4
 801a2ea:	fa1f fe8e 	uxth.w	lr, lr
 801a2ee:	b2ad      	uxth	r5, r5
 801a2f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a2f4:	fb07 a70c 	mla	r7, r7, ip, sl
 801a2f8:	f10e 0401 	add.w	r4, lr, #1
 801a2fc:	f105 0a01 	add.w	sl, r5, #1
 801a300:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801a304:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a308:	b2bf      	uxth	r7, r7
 801a30a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a30e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801a312:	ea4a 0e0e 	orr.w	lr, sl, lr
 801a316:	f107 0a01 	add.w	sl, r7, #1
 801a31a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a31e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a322:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a326:	9c02      	ldr	r4, [sp, #8]
 801a328:	ea4e 0e0a 	orr.w	lr, lr, sl
 801a32c:	f820 e004 	strh.w	lr, [r0, r4]
 801a330:	e7aa      	b.n	801a288 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a332:	f04f 0900 	mov.w	r9, #0
 801a336:	eba3 0409 	sub.w	r4, r3, r9
 801a33a:	2c00      	cmp	r4, #0
 801a33c:	f77f af4a 	ble.w	801a1d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a340:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801a344:	1414      	asrs	r4, r2, #16
 801a346:	140d      	asrs	r5, r1, #16
 801a348:	fb06 5504 	mla	r5, r6, r4, r5
 801a34c:	9c01      	ldr	r4, [sp, #4]
 801a34e:	5d64      	ldrb	r4, [r4, r5]
 801a350:	2cff      	cmp	r4, #255	; 0xff
 801a352:	d10b      	bne.n	801a36c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801a354:	9c00      	ldr	r4, [sp, #0]
 801a356:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801a35a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801a35e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a360:	4421      	add	r1, r4
 801a362:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a364:	f109 0901 	add.w	r9, r9, #1
 801a368:	4422      	add	r2, r4
 801a36a:	e7e4      	b.n	801a336 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801a36c:	2c00      	cmp	r4, #0
 801a36e:	d0f6      	beq.n	801a35e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801a370:	9e00      	ldr	r6, [sp, #0]
 801a372:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801a376:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801a37a:	b2a7      	uxth	r7, r4
 801a37c:	122e      	asrs	r6, r5, #8
 801a37e:	43e4      	mvns	r4, r4
 801a380:	b2e4      	uxtb	r4, r4
 801a382:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a386:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a38a:	fb16 f604 	smulbb	r6, r6, r4
 801a38e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a392:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a396:	00ed      	lsls	r5, r5, #3
 801a398:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a39c:	b2ed      	uxtb	r5, r5
 801a39e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a3a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a3a6:	fb15 f504 	smulbb	r5, r5, r4
 801a3aa:	fa5f fe8e 	uxtb.w	lr, lr
 801a3ae:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a3b2:	fb0e 5507 	mla	r5, lr, r7, r5
 801a3b6:	fb1a fa04 	smulbb	sl, sl, r4
 801a3ba:	fa1f fc8c 	uxth.w	ip, ip
 801a3be:	b2ad      	uxth	r5, r5
 801a3c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a3c4:	fb06 a607 	mla	r6, r6, r7, sl
 801a3c8:	f10c 0401 	add.w	r4, ip, #1
 801a3cc:	f105 0a01 	add.w	sl, r5, #1
 801a3d0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a3d4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a3d8:	b2b6      	uxth	r6, r6
 801a3da:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a3de:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a3e2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a3e6:	f106 0a01 	add.w	sl, r6, #1
 801a3ea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a3ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a3f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a3f6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a3fa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801a3fe:	e7ae      	b.n	801a35e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801a400:	b005      	add	sp, #20
 801a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a406 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a40a:	b085      	sub	sp, #20
 801a40c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a40e:	9203      	str	r2, [sp, #12]
 801a410:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a414:	9201      	str	r2, [sp, #4]
 801a416:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a41a:	9100      	str	r1, [sp, #0]
 801a41c:	6841      	ldr	r1, [r0, #4]
 801a41e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a422:	fb01 2404 	mla	r4, r1, r4, r2
 801a426:	6802      	ldr	r2, [r0, #0]
 801a428:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a42c:	f8de 2000 	ldr.w	r2, [lr]
 801a430:	9202      	str	r2, [sp, #8]
 801a432:	9a01      	ldr	r2, [sp, #4]
 801a434:	43d6      	mvns	r6, r2
 801a436:	b2f6      	uxtb	r6, r6
 801a438:	9a00      	ldr	r2, [sp, #0]
 801a43a:	2a00      	cmp	r2, #0
 801a43c:	dc03      	bgt.n	801a446 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a43e:	9a03      	ldr	r2, [sp, #12]
 801a440:	2a00      	cmp	r2, #0
 801a442:	f340 8124 	ble.w	801a68e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a448:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801a44c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801a450:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a456:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	dd0e      	ble.n	801a47c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a45e:	1408      	asrs	r0, r1, #16
 801a460:	d405      	bmi.n	801a46e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a462:	4560      	cmp	r0, ip
 801a464:	da03      	bge.n	801a46e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a466:	1410      	asrs	r0, r2, #16
 801a468:	d401      	bmi.n	801a46e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a46a:	42b8      	cmp	r0, r7
 801a46c:	db07      	blt.n	801a47e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a46e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a470:	4401      	add	r1, r0
 801a472:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a474:	3b01      	subs	r3, #1
 801a476:	4402      	add	r2, r0
 801a478:	3402      	adds	r4, #2
 801a47a:	e7ee      	b.n	801a45a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a47c:	d06e      	beq.n	801a55c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a47e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a480:	1e58      	subs	r0, r3, #1
 801a482:	fb05 1500 	mla	r5, r5, r0, r1
 801a486:	142d      	asrs	r5, r5, #16
 801a488:	d45c      	bmi.n	801a544 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a48a:	4565      	cmp	r5, ip
 801a48c:	da5a      	bge.n	801a544 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a48e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a490:	fb05 2000 	mla	r0, r5, r0, r2
 801a494:	1400      	asrs	r0, r0, #16
 801a496:	d455      	bmi.n	801a544 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a498:	42b8      	cmp	r0, r7
 801a49a:	da53      	bge.n	801a544 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a49c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801a4a0:	4699      	mov	r9, r3
 801a4a2:	46a2      	mov	sl, r4
 801a4a4:	f1b9 0f00 	cmp.w	r9, #0
 801a4a8:	dd54      	ble.n	801a554 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a4aa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a4ae:	140d      	asrs	r5, r1, #16
 801a4b0:	1410      	asrs	r0, r2, #16
 801a4b2:	fb07 5000 	mla	r0, r7, r0, r5
 801a4b6:	9d02      	ldr	r5, [sp, #8]
 801a4b8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a4bc:	f8ba 5000 	ldrh.w	r5, [sl]
 801a4c0:	122f      	asrs	r7, r5, #8
 801a4c2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a4c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a4ca:	fb17 f706 	smulbb	r7, r7, r6
 801a4ce:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a4d2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a4d6:	00ed      	lsls	r5, r5, #3
 801a4d8:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a4dc:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a4e0:	10c7      	asrs	r7, r0, #3
 801a4e2:	b2ed      	uxtb	r5, r5
 801a4e4:	00c0      	lsls	r0, r0, #3
 801a4e6:	fb18 f806 	smulbb	r8, r8, r6
 801a4ea:	fb15 f506 	smulbb	r5, r5, r6
 801a4ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a4f2:	b2c0      	uxtb	r0, r0
 801a4f4:	fa1f fc8c 	uxth.w	ip, ip
 801a4f8:	fb07 870b 	mla	r7, r7, fp, r8
 801a4fc:	fb00 500b 	mla	r0, r0, fp, r5
 801a500:	b280      	uxth	r0, r0
 801a502:	b2bf      	uxth	r7, r7
 801a504:	f10c 0501 	add.w	r5, ip, #1
 801a508:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a50c:	f107 0801 	add.w	r8, r7, #1
 801a510:	1c45      	adds	r5, r0, #1
 801a512:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a516:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a51a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a51c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a520:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a524:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a528:	ea45 0c0c 	orr.w	ip, r5, ip
 801a52c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a530:	4401      	add	r1, r0
 801a532:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a534:	ea4c 0c08 	orr.w	ip, ip, r8
 801a538:	f82a cb02 	strh.w	ip, [sl], #2
 801a53c:	4402      	add	r2, r0
 801a53e:	f109 39ff 	add.w	r9, r9, #4294967295
 801a542:	e7af      	b.n	801a4a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a544:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801a548:	f04f 0800 	mov.w	r8, #0
 801a54c:	eb03 0008 	add.w	r0, r3, r8
 801a550:	2800      	cmp	r0, #0
 801a552:	dc41      	bgt.n	801a5d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801a554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a558:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a55c:	9b00      	ldr	r3, [sp, #0]
 801a55e:	2b00      	cmp	r3, #0
 801a560:	f340 8095 	ble.w	801a68e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a564:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a56c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a572:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a576:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a57a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a57e:	eef0 6a62 	vmov.f32	s13, s5
 801a582:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a586:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a58a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a58e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801a592:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a596:	eef0 6a43 	vmov.f32	s13, s6
 801a59a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a59e:	ee12 2a90 	vmov	r2, s5
 801a5a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a5a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5aa:	ee13 2a10 	vmov	r2, s6
 801a5ae:	9311      	str	r3, [sp, #68]	; 0x44
 801a5b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a5b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5b6:	9312      	str	r3, [sp, #72]	; 0x48
 801a5b8:	9b00      	ldr	r3, [sp, #0]
 801a5ba:	9a03      	ldr	r2, [sp, #12]
 801a5bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a5c0:	3b01      	subs	r3, #1
 801a5c2:	9300      	str	r3, [sp, #0]
 801a5c4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801a5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a5ca:	eeb0 3a67 	vmov.f32	s6, s15
 801a5ce:	bf08      	it	eq
 801a5d0:	4613      	moveq	r3, r2
 801a5d2:	eef0 2a47 	vmov.f32	s5, s14
 801a5d6:	e72f      	b.n	801a438 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a5d8:	140f      	asrs	r7, r1, #16
 801a5da:	d451      	bmi.n	801a680 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a5dc:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a5e0:	42bd      	cmp	r5, r7
 801a5e2:	dd4d      	ble.n	801a680 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a5e4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a5e8:	d44a      	bmi.n	801a680 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a5ea:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a5ee:	4560      	cmp	r0, ip
 801a5f0:	dd46      	ble.n	801a680 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a5f2:	b22d      	sxth	r5, r5
 801a5f4:	fb0c 7505 	mla	r5, ip, r5, r7
 801a5f8:	9802      	ldr	r0, [sp, #8]
 801a5fa:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801a5fe:	f06f 0501 	mvn.w	r5, #1
 801a602:	fb05 fb08 	mul.w	fp, r5, r8
 801a606:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a60a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a60e:	122f      	asrs	r7, r5, #8
 801a610:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a614:	fb17 f706 	smulbb	r7, r7, r6
 801a618:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a61c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a620:	00ed      	lsls	r5, r5, #3
 801a622:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a626:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a62a:	10c7      	asrs	r7, r0, #3
 801a62c:	b2ed      	uxtb	r5, r5
 801a62e:	00c0      	lsls	r0, r0, #3
 801a630:	fb19 f906 	smulbb	r9, r9, r6
 801a634:	fb15 f506 	smulbb	r5, r5, r6
 801a638:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a63c:	b2c0      	uxtb	r0, r0
 801a63e:	fa1f fc8c 	uxth.w	ip, ip
 801a642:	fb07 970a 	mla	r7, r7, sl, r9
 801a646:	fb00 500a 	mla	r0, r0, sl, r5
 801a64a:	b2bf      	uxth	r7, r7
 801a64c:	b280      	uxth	r0, r0
 801a64e:	f10c 0501 	add.w	r5, ip, #1
 801a652:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a656:	f107 0901 	add.w	r9, r7, #1
 801a65a:	1c45      	adds	r5, r0, #1
 801a65c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a660:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a664:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a668:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a66c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a670:	ea45 0c0c 	orr.w	ip, r5, ip
 801a674:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a678:	ea4c 0c09 	orr.w	ip, ip, r9
 801a67c:	f824 c00b 	strh.w	ip, [r4, fp]
 801a680:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a682:	4401      	add	r1, r0
 801a684:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a686:	f108 38ff 	add.w	r8, r8, #4294967295
 801a68a:	4402      	add	r2, r0
 801a68c:	e75e      	b.n	801a54c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a68e:	b005      	add	sp, #20
 801a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a694 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a698:	b085      	sub	sp, #20
 801a69a:	4693      	mov	fp, r2
 801a69c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a69e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a6a0:	6870      	ldr	r0, [r6, #4]
 801a6a2:	9101      	str	r1, [sp, #4]
 801a6a4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a6a8:	fb00 2404 	mla	r4, r0, r4, r2
 801a6ac:	6832      	ldr	r2, [r6, #0]
 801a6ae:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801a6b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a6b6:	682a      	ldr	r2, [r5, #0]
 801a6b8:	9202      	str	r2, [sp, #8]
 801a6ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a6be:	9a01      	ldr	r2, [sp, #4]
 801a6c0:	2a00      	cmp	r2, #0
 801a6c2:	dc03      	bgt.n	801a6cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a6c4:	f1bb 0f00 	cmp.w	fp, #0
 801a6c8:	f340 809a 	ble.w	801a800 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a6cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a6ce:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a6d2:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a6d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a6da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a6dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	dd0c      	ble.n	801a6fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a6e4:	1406      	asrs	r6, r0, #16
 801a6e6:	d405      	bmi.n	801a6f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a6e8:	454e      	cmp	r6, r9
 801a6ea:	da03      	bge.n	801a6f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a6ec:	1416      	asrs	r6, r2, #16
 801a6ee:	d401      	bmi.n	801a6f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a6f0:	4546      	cmp	r6, r8
 801a6f2:	db05      	blt.n	801a700 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a6f4:	4470      	add	r0, lr
 801a6f6:	4462      	add	r2, ip
 801a6f8:	3b01      	subs	r3, #1
 801a6fa:	3402      	adds	r4, #2
 801a6fc:	e7f0      	b.n	801a6e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a6fe:	d00f      	beq.n	801a720 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a700:	1e5e      	subs	r6, r3, #1
 801a702:	fb0e 0706 	mla	r7, lr, r6, r0
 801a706:	143f      	asrs	r7, r7, #16
 801a708:	d541      	bpl.n	801a78e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801a70a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801a70e:	4698      	mov	r8, r3
 801a710:	9603      	str	r6, [sp, #12]
 801a712:	f1b8 0f00 	cmp.w	r8, #0
 801a716:	dc56      	bgt.n	801a7c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801a718:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a71c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a720:	9b01      	ldr	r3, [sp, #4]
 801a722:	2b00      	cmp	r3, #0
 801a724:	dd6c      	ble.n	801a800 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a726:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a72a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a72e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a734:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a738:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a73c:	eeb0 6a62 	vmov.f32	s12, s5
 801a740:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a744:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a748:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a74c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a750:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a754:	eeb0 6a43 	vmov.f32	s12, s6
 801a758:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a75c:	ee12 2a90 	vmov	r2, s5
 801a760:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a764:	fb92 fef3 	sdiv	lr, r2, r3
 801a768:	ee13 2a10 	vmov	r2, s6
 801a76c:	fb92 fcf3 	sdiv	ip, r2, r3
 801a770:	9b01      	ldr	r3, [sp, #4]
 801a772:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a776:	3b01      	subs	r3, #1
 801a778:	9301      	str	r3, [sp, #4]
 801a77a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a780:	eeb0 3a67 	vmov.f32	s6, s15
 801a784:	bf08      	it	eq
 801a786:	465b      	moveq	r3, fp
 801a788:	eef0 2a47 	vmov.f32	s5, s14
 801a78c:	e797      	b.n	801a6be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801a78e:	454f      	cmp	r7, r9
 801a790:	dabb      	bge.n	801a70a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a792:	fb0c 2606 	mla	r6, ip, r6, r2
 801a796:	1436      	asrs	r6, r6, #16
 801a798:	d4b7      	bmi.n	801a70a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a79a:	4546      	cmp	r6, r8
 801a79c:	dab5      	bge.n	801a70a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a79e:	461e      	mov	r6, r3
 801a7a0:	46a0      	mov	r8, r4
 801a7a2:	2e00      	cmp	r6, #0
 801a7a4:	ddb8      	ble.n	801a718 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a7a6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a7aa:	9902      	ldr	r1, [sp, #8]
 801a7ac:	1417      	asrs	r7, r2, #16
 801a7ae:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a7b2:	fb0a 9707 	mla	r7, sl, r7, r9
 801a7b6:	4470      	add	r0, lr
 801a7b8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a7bc:	f828 7b02 	strh.w	r7, [r8], #2
 801a7c0:	4462      	add	r2, ip
 801a7c2:	3e01      	subs	r6, #1
 801a7c4:	e7ed      	b.n	801a7a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801a7c6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a7ca:	d414      	bmi.n	801a7f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a7cc:	68ae      	ldr	r6, [r5, #8]
 801a7ce:	454e      	cmp	r6, r9
 801a7d0:	dd11      	ble.n	801a7f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a7d2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a7d6:	d40e      	bmi.n	801a7f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a7d8:	68ef      	ldr	r7, [r5, #12]
 801a7da:	4557      	cmp	r7, sl
 801a7dc:	dd0b      	ble.n	801a7f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a7de:	b236      	sxth	r6, r6
 801a7e0:	fb0a 9606 	mla	r6, sl, r6, r9
 801a7e4:	9f02      	ldr	r7, [sp, #8]
 801a7e6:	f06f 0101 	mvn.w	r1, #1
 801a7ea:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a7ee:	fb01 f608 	mul.w	r6, r1, r8
 801a7f2:	9903      	ldr	r1, [sp, #12]
 801a7f4:	538f      	strh	r7, [r1, r6]
 801a7f6:	4470      	add	r0, lr
 801a7f8:	4462      	add	r2, ip
 801a7fa:	f108 38ff 	add.w	r8, r8, #4294967295
 801a7fe:	e788      	b.n	801a712 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a800:	b005      	add	sp, #20
 801a802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a806 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a80a:	b087      	sub	sp, #28
 801a80c:	468b      	mov	fp, r1
 801a80e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a810:	9203      	str	r2, [sp, #12]
 801a812:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a816:	9204      	str	r2, [sp, #16]
 801a818:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a81c:	6841      	ldr	r1, [r0, #4]
 801a81e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801a822:	fb01 2505 	mla	r5, r1, r5, r2
 801a826:	6802      	ldr	r2, [r0, #0]
 801a828:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801a82c:	f8d9 2000 	ldr.w	r2, [r9]
 801a830:	9201      	str	r2, [sp, #4]
 801a832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a836:	f1bb 0f00 	cmp.w	fp, #0
 801a83a:	dc03      	bgt.n	801a844 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a83c:	9a03      	ldr	r2, [sp, #12]
 801a83e:	2a00      	cmp	r2, #0
 801a840:	f340 8159 	ble.w	801aaf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801a844:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a846:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801a84a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801a84e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a852:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a854:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a858:	2b00      	cmp	r3, #0
 801a85a:	dd0e      	ble.n	801a87a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a85c:	1402      	asrs	r2, r0, #16
 801a85e:	d405      	bmi.n	801a86c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a860:	42ba      	cmp	r2, r7
 801a862:	da03      	bge.n	801a86c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a864:	140a      	asrs	r2, r1, #16
 801a866:	d401      	bmi.n	801a86c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a868:	42b2      	cmp	r2, r6
 801a86a:	db07      	blt.n	801a87c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a86c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a86e:	4410      	add	r0, r2
 801a870:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a872:	3b01      	subs	r3, #1
 801a874:	4411      	add	r1, r2
 801a876:	3502      	adds	r5, #2
 801a878:	e7ee      	b.n	801a858 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a87a:	d017      	beq.n	801a8ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a87c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a87e:	1e5a      	subs	r2, r3, #1
 801a880:	fb04 0402 	mla	r4, r4, r2, r0
 801a884:	1424      	asrs	r4, r4, #16
 801a886:	d409      	bmi.n	801a89c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a888:	42bc      	cmp	r4, r7
 801a88a:	da07      	bge.n	801a89c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a88c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a88e:	fb04 1202 	mla	r2, r4, r2, r1
 801a892:	1412      	asrs	r2, r2, #16
 801a894:	d402      	bmi.n	801a89c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a896:	42b2      	cmp	r2, r6
 801a898:	f2c0 80bf 	blt.w	801aa1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a89c:	2700      	movs	r7, #0
 801a89e:	19da      	adds	r2, r3, r7
 801a8a0:	2a00      	cmp	r2, #0
 801a8a2:	dc3e      	bgt.n	801a922 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a8a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a8a8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a8ac:	f1bb 0f00 	cmp.w	fp, #0
 801a8b0:	f340 8121 	ble.w	801aaf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801a8b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a8b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a8bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a8c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a8c2:	f1bb 0b01 	subs.w	fp, fp, #1
 801a8c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a8ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a8ce:	eeb0 6a62 	vmov.f32	s12, s5
 801a8d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a8d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a8de:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a8e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a8e6:	eeb0 6a43 	vmov.f32	s12, s6
 801a8ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a8ee:	ee12 2a90 	vmov	r2, s5
 801a8f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a8f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8fa:	ee13 2a10 	vmov	r2, s6
 801a8fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a902:	9313      	str	r3, [sp, #76]	; 0x4c
 801a904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a906:	fb92 f3f3 	sdiv	r3, r2, r3
 801a90a:	9a03      	ldr	r2, [sp, #12]
 801a90c:	9314      	str	r3, [sp, #80]	; 0x50
 801a90e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a912:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a914:	eeb0 3a67 	vmov.f32	s6, s15
 801a918:	bf08      	it	eq
 801a91a:	4613      	moveq	r3, r2
 801a91c:	eef0 2a47 	vmov.f32	s5, s14
 801a920:	e789      	b.n	801a836 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a922:	1406      	asrs	r6, r0, #16
 801a924:	d42d      	bmi.n	801a982 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a926:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801a92a:	42b4      	cmp	r4, r6
 801a92c:	dd29      	ble.n	801a982 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a92e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801a932:	d426      	bmi.n	801a982 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a934:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801a938:	4562      	cmp	r2, ip
 801a93a:	dd22      	ble.n	801a982 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a93c:	b224      	sxth	r4, r4
 801a93e:	9a01      	ldr	r2, [sp, #4]
 801a940:	fb0c 6404 	mla	r4, ip, r4, r6
 801a944:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801a948:	0e22      	lsrs	r2, r4, #24
 801a94a:	d01a      	beq.n	801a982 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a94c:	9e04      	ldr	r6, [sp, #16]
 801a94e:	4372      	muls	r2, r6
 801a950:	1c56      	adds	r6, r2, #1
 801a952:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a956:	1212      	asrs	r2, r2, #8
 801a958:	0a26      	lsrs	r6, r4, #8
 801a95a:	2aff      	cmp	r2, #255	; 0xff
 801a95c:	9605      	str	r6, [sp, #20]
 801a95e:	d116      	bne.n	801a98e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801a960:	f06f 0201 	mvn.w	r2, #1
 801a964:	fb02 fc07 	mul.w	ip, r2, r7
 801a968:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801a96c:	0962      	lsrs	r2, r4, #5
 801a96e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a972:	f026 0607 	bic.w	r6, r6, #7
 801a976:	4316      	orrs	r6, r2
 801a978:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a97c:	4326      	orrs	r6, r4
 801a97e:	f825 600c 	strh.w	r6, [r5, ip]
 801a982:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a984:	4410      	add	r0, r2
 801a986:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a988:	3f01      	subs	r7, #1
 801a98a:	4411      	add	r1, r2
 801a98c:	e787      	b.n	801a89e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a98e:	f06f 0601 	mvn.w	r6, #1
 801a992:	437e      	muls	r6, r7
 801a994:	fa1f fa82 	uxth.w	sl, r2
 801a998:	f835 8006 	ldrh.w	r8, [r5, r6]
 801a99c:	9602      	str	r6, [sp, #8]
 801a99e:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801a9a2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801a9a6:	43d2      	mvns	r2, r2
 801a9a8:	b2d2      	uxtb	r2, r2
 801a9aa:	fb1c fc0a 	smulbb	ip, ip, sl
 801a9ae:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a9b2:	fb0e ce02 	mla	lr, lr, r2, ip
 801a9b6:	b2e4      	uxtb	r4, r4
 801a9b8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801a9bc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a9c0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801a9c4:	fa5f f888 	uxtb.w	r8, r8
 801a9c8:	fb14 f40a 	smulbb	r4, r4, sl
 801a9cc:	fb08 4402 	mla	r4, r8, r2, r4
 801a9d0:	fa1f fe8e 	uxth.w	lr, lr
 801a9d4:	fb16 f60a 	smulbb	r6, r6, sl
 801a9d8:	b2a4      	uxth	r4, r4
 801a9da:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a9de:	fb0c 6c02 	mla	ip, ip, r2, r6
 801a9e2:	f10e 0201 	add.w	r2, lr, #1
 801a9e6:	1c66      	adds	r6, r4, #1
 801a9e8:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801a9ec:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801a9f0:	fa1f fc8c 	uxth.w	ip, ip
 801a9f4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a9f8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801a9fc:	ea46 0e0e 	orr.w	lr, r6, lr
 801aa00:	f10c 0601 	add.w	r6, ip, #1
 801aa04:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801aa08:	0976      	lsrs	r6, r6, #5
 801aa0a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801aa0e:	9a02      	ldr	r2, [sp, #8]
 801aa10:	ea4e 0e06 	orr.w	lr, lr, r6
 801aa14:	f825 e002 	strh.w	lr, [r5, r2]
 801aa18:	e7b3      	b.n	801a982 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801aa1a:	f04f 0800 	mov.w	r8, #0
 801aa1e:	eba3 0208 	sub.w	r2, r3, r8
 801aa22:	2a00      	cmp	r2, #0
 801aa24:	f77f af3e 	ble.w	801a8a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801aa28:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801aa2c:	1404      	asrs	r4, r0, #16
 801aa2e:	140a      	asrs	r2, r1, #16
 801aa30:	fb06 4202 	mla	r2, r6, r2, r4
 801aa34:	9c01      	ldr	r4, [sp, #4]
 801aa36:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801aa3a:	0e22      	lsrs	r2, r4, #24
 801aa3c:	d016      	beq.n	801aa6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801aa3e:	9e04      	ldr	r6, [sp, #16]
 801aa40:	4372      	muls	r2, r6
 801aa42:	1c56      	adds	r6, r2, #1
 801aa44:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801aa48:	1212      	asrs	r2, r2, #8
 801aa4a:	2aff      	cmp	r2, #255	; 0xff
 801aa4c:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801aa50:	d113      	bne.n	801aa7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801aa52:	0962      	lsrs	r2, r4, #5
 801aa54:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801aa58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801aa5c:	f026 0607 	bic.w	r6, r6, #7
 801aa60:	4316      	orrs	r6, r2
 801aa62:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801aa66:	4326      	orrs	r6, r4
 801aa68:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801aa6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aa6e:	4410      	add	r0, r2
 801aa70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aa72:	f108 0801 	add.w	r8, r8, #1
 801aa76:	4411      	add	r1, r2
 801aa78:	e7d1      	b.n	801aa1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801aa7a:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801aa7e:	fa1f fa82 	uxth.w	sl, r2
 801aa82:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801aa86:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801aa8a:	43d2      	mvns	r2, r2
 801aa8c:	b2d2      	uxtb	r2, r2
 801aa8e:	fb17 f70a 	smulbb	r7, r7, sl
 801aa92:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aa96:	fb0c 7c02 	mla	ip, ip, r2, r7
 801aa9a:	b2e4      	uxtb	r4, r4
 801aa9c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801aaa0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aaa4:	fa5f fe8e 	uxtb.w	lr, lr
 801aaa8:	fb14 f40a 	smulbb	r4, r4, sl
 801aaac:	fb0e 4402 	mla	r4, lr, r2, r4
 801aab0:	b2f6      	uxtb	r6, r6
 801aab2:	fa1f fc8c 	uxth.w	ip, ip
 801aab6:	fb16 f60a 	smulbb	r6, r6, sl
 801aaba:	b2a4      	uxth	r4, r4
 801aabc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aac0:	fb07 6702 	mla	r7, r7, r2, r6
 801aac4:	f10c 0201 	add.w	r2, ip, #1
 801aac8:	1c66      	adds	r6, r4, #1
 801aaca:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801aace:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801aad2:	b2bf      	uxth	r7, r7
 801aad4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801aad8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801aadc:	ea46 0c0c 	orr.w	ip, r6, ip
 801aae0:	1c7e      	adds	r6, r7, #1
 801aae2:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801aae6:	0976      	lsrs	r6, r6, #5
 801aae8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801aaec:	ea4c 0c06 	orr.w	ip, ip, r6
 801aaf0:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801aaf4:	e7ba      	b.n	801aa6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801aaf6:	b007      	add	sp, #28
 801aaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aafc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab00:	b085      	sub	sp, #20
 801ab02:	468b      	mov	fp, r1
 801ab04:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ab06:	9203      	str	r2, [sp, #12]
 801ab08:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ab0c:	6841      	ldr	r1, [r0, #4]
 801ab0e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801ab12:	fb01 2404 	mla	r4, r1, r4, r2
 801ab16:	6802      	ldr	r2, [r0, #0]
 801ab18:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ab1c:	f8d8 2000 	ldr.w	r2, [r8]
 801ab20:	9201      	str	r2, [sp, #4]
 801ab22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ab26:	f1bb 0f00 	cmp.w	fp, #0
 801ab2a:	dc03      	bgt.n	801ab34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ab2c:	9a03      	ldr	r2, [sp, #12]
 801ab2e:	2a00      	cmp	r2, #0
 801ab30:	f340 814f 	ble.w	801add2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ab34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ab36:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ab3a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ab3e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ab42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ab44:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	dd0e      	ble.n	801ab6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ab4c:	1408      	asrs	r0, r1, #16
 801ab4e:	d405      	bmi.n	801ab5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ab50:	42b8      	cmp	r0, r7
 801ab52:	da03      	bge.n	801ab5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ab54:	1410      	asrs	r0, r2, #16
 801ab56:	d401      	bmi.n	801ab5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ab58:	42b0      	cmp	r0, r6
 801ab5a:	db07      	blt.n	801ab6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ab5c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ab5e:	4401      	add	r1, r0
 801ab60:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ab62:	3b01      	subs	r3, #1
 801ab64:	4402      	add	r2, r0
 801ab66:	3402      	adds	r4, #2
 801ab68:	e7ee      	b.n	801ab48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ab6a:	d017      	beq.n	801ab9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ab6c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ab6e:	1e58      	subs	r0, r3, #1
 801ab70:	fb05 1500 	mla	r5, r5, r0, r1
 801ab74:	142d      	asrs	r5, r5, #16
 801ab76:	d409      	bmi.n	801ab8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ab78:	42bd      	cmp	r5, r7
 801ab7a:	da07      	bge.n	801ab8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ab7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ab7e:	fb05 2000 	mla	r0, r5, r0, r2
 801ab82:	1400      	asrs	r0, r0, #16
 801ab84:	d402      	bmi.n	801ab8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ab86:	42b0      	cmp	r0, r6
 801ab88:	f2c0 80ba 	blt.w	801ad00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ab8c:	2600      	movs	r6, #0
 801ab8e:	1998      	adds	r0, r3, r6
 801ab90:	2800      	cmp	r0, #0
 801ab92:	dc3e      	bgt.n	801ac12 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ab94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab98:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ab9c:	f1bb 0f00 	cmp.w	fp, #0
 801aba0:	f340 8117 	ble.w	801add2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801aba4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aba8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801abac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801abb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abb2:	f1bb 0b01 	subs.w	fp, fp, #1
 801abb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801abba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801abbe:	eeb0 6a62 	vmov.f32	s12, s5
 801abc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801abc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801abce:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801abd2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801abd6:	eeb0 6a43 	vmov.f32	s12, s6
 801abda:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801abde:	ee12 2a90 	vmov	r2, s5
 801abe2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801abe6:	fb92 f3f3 	sdiv	r3, r2, r3
 801abea:	ee13 2a10 	vmov	r2, s6
 801abee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abf2:	9311      	str	r3, [sp, #68]	; 0x44
 801abf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abf6:	fb92 f3f3 	sdiv	r3, r2, r3
 801abfa:	9a03      	ldr	r2, [sp, #12]
 801abfc:	9312      	str	r3, [sp, #72]	; 0x48
 801abfe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ac02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac04:	eeb0 3a67 	vmov.f32	s6, s15
 801ac08:	bf08      	it	eq
 801ac0a:	4613      	moveq	r3, r2
 801ac0c:	eef0 2a47 	vmov.f32	s5, s14
 801ac10:	e789      	b.n	801ab26 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ac12:	140f      	asrs	r7, r1, #16
 801ac14:	d424      	bmi.n	801ac60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ac16:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ac1a:	42bd      	cmp	r5, r7
 801ac1c:	dd20      	ble.n	801ac60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ac1e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ac22:	d41d      	bmi.n	801ac60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ac24:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801ac28:	4560      	cmp	r0, ip
 801ac2a:	dd19      	ble.n	801ac60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ac2c:	b22d      	sxth	r5, r5
 801ac2e:	fb0c 7505 	mla	r5, ip, r5, r7
 801ac32:	9801      	ldr	r0, [sp, #4]
 801ac34:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ac38:	0e07      	lsrs	r7, r0, #24
 801ac3a:	2fff      	cmp	r7, #255	; 0xff
 801ac3c:	d116      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ac3e:	f06f 0501 	mvn.w	r5, #1
 801ac42:	fb05 f706 	mul.w	r7, r5, r6
 801ac46:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ac4a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ac4e:	0945      	lsrs	r5, r0, #5
 801ac50:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ac54:	ea4c 0505 	orr.w	r5, ip, r5
 801ac58:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ac5c:	4305      	orrs	r5, r0
 801ac5e:	53e5      	strh	r5, [r4, r7]
 801ac60:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ac62:	4401      	add	r1, r0
 801ac64:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ac66:	3e01      	subs	r6, #1
 801ac68:	4402      	add	r2, r0
 801ac6a:	e790      	b.n	801ab8e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ac6c:	b2fd      	uxtb	r5, r7
 801ac6e:	2f00      	cmp	r7, #0
 801ac70:	d0f6      	beq.n	801ac60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ac72:	f06f 0701 	mvn.w	r7, #1
 801ac76:	4377      	muls	r7, r6
 801ac78:	fa1f f985 	uxth.w	r9, r5
 801ac7c:	f834 e007 	ldrh.w	lr, [r4, r7]
 801ac80:	9702      	str	r7, [sp, #8]
 801ac82:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ac86:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ac8a:	43ed      	mvns	r5, r5
 801ac8c:	b2ed      	uxtb	r5, r5
 801ac8e:	fb17 f709 	smulbb	r7, r7, r9
 801ac92:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac96:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ac9a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ac9e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801aca2:	b2c0      	uxtb	r0, r0
 801aca4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aca8:	fa5f fe8e 	uxtb.w	lr, lr
 801acac:	fb10 f009 	smulbb	r0, r0, r9
 801acb0:	fb0e 0005 	mla	r0, lr, r5, r0
 801acb4:	b280      	uxth	r0, r0
 801acb6:	fa1f fc8c 	uxth.w	ip, ip
 801acba:	fb1a fa09 	smulbb	sl, sl, r9
 801acbe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801acc2:	fb07 a705 	mla	r7, r7, r5, sl
 801acc6:	f100 0a01 	add.w	sl, r0, #1
 801acca:	f10c 0501 	add.w	r5, ip, #1
 801acce:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801acd2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801acd6:	b2bf      	uxth	r7, r7
 801acd8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801acdc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ace0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ace4:	f107 0a01 	add.w	sl, r7, #1
 801ace8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801acec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801acf0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801acf4:	9802      	ldr	r0, [sp, #8]
 801acf6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801acfa:	f824 c000 	strh.w	ip, [r4, r0]
 801acfe:	e7af      	b.n	801ac60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ad00:	f04f 0e00 	mov.w	lr, #0
 801ad04:	eba3 000e 	sub.w	r0, r3, lr
 801ad08:	2800      	cmp	r0, #0
 801ad0a:	f77f af43 	ble.w	801ab94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ad0e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ad12:	140d      	asrs	r5, r1, #16
 801ad14:	1410      	asrs	r0, r2, #16
 801ad16:	fb06 5000 	mla	r0, r6, r0, r5
 801ad1a:	9d01      	ldr	r5, [sp, #4]
 801ad1c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ad20:	0e2e      	lsrs	r6, r5, #24
 801ad22:	2eff      	cmp	r6, #255	; 0xff
 801ad24:	d112      	bne.n	801ad4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ad26:	482c      	ldr	r0, [pc, #176]	; (801add8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801ad28:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ad2c:	0968      	lsrs	r0, r5, #5
 801ad2e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ad32:	4330      	orrs	r0, r6
 801ad34:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ad38:	4328      	orrs	r0, r5
 801ad3a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ad3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ad40:	4401      	add	r1, r0
 801ad42:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ad44:	f10e 0e01 	add.w	lr, lr, #1
 801ad48:	4402      	add	r2, r0
 801ad4a:	e7db      	b.n	801ad04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ad4c:	b2f0      	uxtb	r0, r6
 801ad4e:	2e00      	cmp	r6, #0
 801ad50:	d0f5      	beq.n	801ad3e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ad52:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ad56:	fa1f f980 	uxth.w	r9, r0
 801ad5a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ad5e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ad62:	43c0      	mvns	r0, r0
 801ad64:	b2c0      	uxtb	r0, r0
 801ad66:	fb16 f609 	smulbb	r6, r6, r9
 801ad6a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ad6e:	fb07 6700 	mla	r7, r7, r0, r6
 801ad72:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ad76:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ad7a:	b2ed      	uxtb	r5, r5
 801ad7c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ad80:	fa5f fc8c 	uxtb.w	ip, ip
 801ad84:	fb15 f509 	smulbb	r5, r5, r9
 801ad88:	fb0c 5500 	mla	r5, ip, r0, r5
 801ad8c:	b2bf      	uxth	r7, r7
 801ad8e:	fb1a fa09 	smulbb	sl, sl, r9
 801ad92:	b2ad      	uxth	r5, r5
 801ad94:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ad98:	fb06 a600 	mla	r6, r6, r0, sl
 801ad9c:	1c78      	adds	r0, r7, #1
 801ad9e:	f105 0a01 	add.w	sl, r5, #1
 801ada2:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ada6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801adaa:	b2b6      	uxth	r6, r6
 801adac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801adb0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801adb4:	ea4a 0707 	orr.w	r7, sl, r7
 801adb8:	f106 0a01 	add.w	sl, r6, #1
 801adbc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801adc0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801adc4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801adc8:	ea47 070a 	orr.w	r7, r7, sl
 801adcc:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801add0:	e7b5      	b.n	801ad3e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801add2:	b005      	add	sp, #20
 801add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801add8:	fffff800 	.word	0xfffff800

0801addc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ade0:	b087      	sub	sp, #28
 801ade2:	468b      	mov	fp, r1
 801ade4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ade6:	9203      	str	r2, [sp, #12]
 801ade8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801adec:	9204      	str	r2, [sp, #16]
 801adee:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801adf2:	6841      	ldr	r1, [r0, #4]
 801adf4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801adf8:	fb01 2404 	mla	r4, r1, r4, r2
 801adfc:	6802      	ldr	r2, [r0, #0]
 801adfe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ae02:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ae06:	3201      	adds	r2, #1
 801ae08:	f022 0201 	bic.w	r2, r2, #1
 801ae0c:	9200      	str	r2, [sp, #0]
 801ae0e:	f8d9 2000 	ldr.w	r2, [r9]
 801ae12:	9201      	str	r2, [sp, #4]
 801ae14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ae18:	f1bb 0f00 	cmp.w	fp, #0
 801ae1c:	dc03      	bgt.n	801ae26 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ae1e:	9a03      	ldr	r2, [sp, #12]
 801ae20:	2a00      	cmp	r2, #0
 801ae22:	f340 8169 	ble.w	801b0f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801ae26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ae28:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ae2c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ae30:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ae34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae36:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	dd0e      	ble.n	801ae5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ae3e:	1402      	asrs	r2, r0, #16
 801ae40:	d405      	bmi.n	801ae4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae42:	42ba      	cmp	r2, r7
 801ae44:	da03      	bge.n	801ae4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae46:	140a      	asrs	r2, r1, #16
 801ae48:	d401      	bmi.n	801ae4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae4a:	42b2      	cmp	r2, r6
 801ae4c:	db07      	blt.n	801ae5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ae4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ae50:	4410      	add	r0, r2
 801ae52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ae54:	3b01      	subs	r3, #1
 801ae56:	4411      	add	r1, r2
 801ae58:	3402      	adds	r4, #2
 801ae5a:	e7ee      	b.n	801ae3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ae5c:	d017      	beq.n	801ae8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ae5e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ae60:	1e5a      	subs	r2, r3, #1
 801ae62:	fb05 0502 	mla	r5, r5, r2, r0
 801ae66:	142d      	asrs	r5, r5, #16
 801ae68:	d409      	bmi.n	801ae7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ae6a:	42bd      	cmp	r5, r7
 801ae6c:	da07      	bge.n	801ae7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ae6e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ae70:	fb05 1202 	mla	r2, r5, r2, r1
 801ae74:	1412      	asrs	r2, r2, #16
 801ae76:	d402      	bmi.n	801ae7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ae78:	42b2      	cmp	r2, r6
 801ae7a:	f2c0 80c7 	blt.w	801b00c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ae7e:	2700      	movs	r7, #0
 801ae80:	19da      	adds	r2, r3, r7
 801ae82:	2a00      	cmp	r2, #0
 801ae84:	dc3e      	bgt.n	801af04 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ae86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ae8e:	f1bb 0f00 	cmp.w	fp, #0
 801ae92:	f340 8131 	ble.w	801b0f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801ae96:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae9e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aea4:	f1bb 0b01 	subs.w	fp, fp, #1
 801aea8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aeac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aeb0:	eeb0 6a62 	vmov.f32	s12, s5
 801aeb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aeb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aebc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aec0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801aec4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aec8:	eeb0 6a43 	vmov.f32	s12, s6
 801aecc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aed0:	ee12 2a90 	vmov	r2, s5
 801aed4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aed8:	fb92 f3f3 	sdiv	r3, r2, r3
 801aedc:	ee13 2a10 	vmov	r2, s6
 801aee0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aee4:	9313      	str	r3, [sp, #76]	; 0x4c
 801aee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aee8:	fb92 f3f3 	sdiv	r3, r2, r3
 801aeec:	9a03      	ldr	r2, [sp, #12]
 801aeee:	9314      	str	r3, [sp, #80]	; 0x50
 801aef0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801aef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aef6:	eeb0 3a67 	vmov.f32	s6, s15
 801aefa:	bf08      	it	eq
 801aefc:	4613      	moveq	r3, r2
 801aefe:	eef0 2a47 	vmov.f32	s5, s14
 801af02:	e789      	b.n	801ae18 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801af04:	1405      	asrs	r5, r0, #16
 801af06:	d435      	bmi.n	801af74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801af08:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801af0c:	42aa      	cmp	r2, r5
 801af0e:	dd31      	ble.n	801af74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801af10:	140e      	asrs	r6, r1, #16
 801af12:	d42f      	bmi.n	801af74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801af14:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801af18:	42b2      	cmp	r2, r6
 801af1a:	dd2b      	ble.n	801af74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801af1c:	9a00      	ldr	r2, [sp, #0]
 801af1e:	fb06 5502 	mla	r5, r6, r2, r5
 801af22:	086a      	lsrs	r2, r5, #1
 801af24:	9e01      	ldr	r6, [sp, #4]
 801af26:	5cb2      	ldrb	r2, [r6, r2]
 801af28:	07ee      	lsls	r6, r5, #31
 801af2a:	bf54      	ite	pl
 801af2c:	f002 020f 	andpl.w	r2, r2, #15
 801af30:	1112      	asrmi	r2, r2, #4
 801af32:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801af36:	b2d2      	uxtb	r2, r2
 801af38:	b1e2      	cbz	r2, 801af74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801af3a:	9d04      	ldr	r5, [sp, #16]
 801af3c:	436a      	muls	r2, r5
 801af3e:	1c55      	adds	r5, r2, #1
 801af40:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801af44:	4d6e      	ldr	r5, [pc, #440]	; (801b100 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801af46:	682d      	ldr	r5, [r5, #0]
 801af48:	1212      	asrs	r2, r2, #8
 801af4a:	0a2e      	lsrs	r6, r5, #8
 801af4c:	2aff      	cmp	r2, #255	; 0xff
 801af4e:	9605      	str	r6, [sp, #20]
 801af50:	d116      	bne.n	801af80 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801af52:	f06f 0201 	mvn.w	r2, #1
 801af56:	fb02 fc07 	mul.w	ip, r2, r7
 801af5a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801af5e:	096a      	lsrs	r2, r5, #5
 801af60:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801af64:	f026 0607 	bic.w	r6, r6, #7
 801af68:	4316      	orrs	r6, r2
 801af6a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801af6e:	432e      	orrs	r6, r5
 801af70:	f824 600c 	strh.w	r6, [r4, ip]
 801af74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801af76:	4410      	add	r0, r2
 801af78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af7a:	3f01      	subs	r7, #1
 801af7c:	4411      	add	r1, r2
 801af7e:	e77f      	b.n	801ae80 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801af80:	f06f 0601 	mvn.w	r6, #1
 801af84:	437e      	muls	r6, r7
 801af86:	fa1f fa82 	uxth.w	sl, r2
 801af8a:	f834 8006 	ldrh.w	r8, [r4, r6]
 801af8e:	9602      	str	r6, [sp, #8]
 801af90:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801af94:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801af98:	43d2      	mvns	r2, r2
 801af9a:	b2d2      	uxtb	r2, r2
 801af9c:	fb1c fc0a 	smulbb	ip, ip, sl
 801afa0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801afa4:	fb0e ce02 	mla	lr, lr, r2, ip
 801afa8:	b2ed      	uxtb	r5, r5
 801afaa:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801afae:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801afb2:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801afb6:	fa5f f888 	uxtb.w	r8, r8
 801afba:	fb15 f50a 	smulbb	r5, r5, sl
 801afbe:	fb08 5502 	mla	r5, r8, r2, r5
 801afc2:	fa1f fe8e 	uxth.w	lr, lr
 801afc6:	fb16 f60a 	smulbb	r6, r6, sl
 801afca:	b2ad      	uxth	r5, r5
 801afcc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801afd0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801afd4:	f10e 0201 	add.w	r2, lr, #1
 801afd8:	1c6e      	adds	r6, r5, #1
 801afda:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801afde:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801afe2:	fa1f fc8c 	uxth.w	ip, ip
 801afe6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801afea:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801afee:	ea46 0e0e 	orr.w	lr, r6, lr
 801aff2:	f10c 0601 	add.w	r6, ip, #1
 801aff6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801affa:	0976      	lsrs	r6, r6, #5
 801affc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b000:	9a02      	ldr	r2, [sp, #8]
 801b002:	ea4e 0e06 	orr.w	lr, lr, r6
 801b006:	f824 e002 	strh.w	lr, [r4, r2]
 801b00a:	e7b3      	b.n	801af74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b00c:	f04f 0800 	mov.w	r8, #0
 801b010:	eba3 0208 	sub.w	r2, r3, r8
 801b014:	2a00      	cmp	r2, #0
 801b016:	f77f af36 	ble.w	801ae86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801b01a:	9e00      	ldr	r6, [sp, #0]
 801b01c:	1402      	asrs	r2, r0, #16
 801b01e:	140d      	asrs	r5, r1, #16
 801b020:	fb06 2505 	mla	r5, r6, r5, r2
 801b024:	086a      	lsrs	r2, r5, #1
 801b026:	9e01      	ldr	r6, [sp, #4]
 801b028:	5cb2      	ldrb	r2, [r6, r2]
 801b02a:	07ed      	lsls	r5, r5, #31
 801b02c:	bf54      	ite	pl
 801b02e:	f002 020f 	andpl.w	r2, r2, #15
 801b032:	1112      	asrmi	r2, r2, #4
 801b034:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b038:	b2d2      	uxtb	r2, r2
 801b03a:	b1c2      	cbz	r2, 801b06e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b03c:	9d04      	ldr	r5, [sp, #16]
 801b03e:	436a      	muls	r2, r5
 801b040:	1c55      	adds	r5, r2, #1
 801b042:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801b046:	4d2e      	ldr	r5, [pc, #184]	; (801b100 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801b048:	1212      	asrs	r2, r2, #8
 801b04a:	682e      	ldr	r6, [r5, #0]
 801b04c:	2aff      	cmp	r2, #255	; 0xff
 801b04e:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801b052:	d113      	bne.n	801b07c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801b054:	0972      	lsrs	r2, r6, #5
 801b056:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801b05a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b05e:	f025 0507 	bic.w	r5, r5, #7
 801b062:	4315      	orrs	r5, r2
 801b064:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801b068:	4335      	orrs	r5, r6
 801b06a:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801b06e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b070:	4410      	add	r0, r2
 801b072:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b074:	f108 0801 	add.w	r8, r8, #1
 801b078:	4411      	add	r1, r2
 801b07a:	e7c9      	b.n	801b010 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801b07c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801b080:	fa1f fa82 	uxth.w	sl, r2
 801b084:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b088:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801b08c:	43d2      	mvns	r2, r2
 801b08e:	b2d2      	uxtb	r2, r2
 801b090:	fb17 f70a 	smulbb	r7, r7, sl
 801b094:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b098:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b09c:	b2f6      	uxtb	r6, r6
 801b09e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b0a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b0a6:	fa5f fe8e 	uxtb.w	lr, lr
 801b0aa:	fb16 f60a 	smulbb	r6, r6, sl
 801b0ae:	fb0e 6602 	mla	r6, lr, r2, r6
 801b0b2:	b2ed      	uxtb	r5, r5
 801b0b4:	fa1f fc8c 	uxth.w	ip, ip
 801b0b8:	fb15 f50a 	smulbb	r5, r5, sl
 801b0bc:	b2b6      	uxth	r6, r6
 801b0be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b0c2:	fb07 5702 	mla	r7, r7, r2, r5
 801b0c6:	f10c 0201 	add.w	r2, ip, #1
 801b0ca:	1c75      	adds	r5, r6, #1
 801b0cc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b0d0:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801b0d4:	b2bf      	uxth	r7, r7
 801b0d6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b0da:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b0de:	ea45 0c0c 	orr.w	ip, r5, ip
 801b0e2:	1c7d      	adds	r5, r7, #1
 801b0e4:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801b0e8:	096d      	lsrs	r5, r5, #5
 801b0ea:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b0ee:	ea4c 0c05 	orr.w	ip, ip, r5
 801b0f2:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801b0f6:	e7ba      	b.n	801b06e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b0f8:	b007      	add	sp, #28
 801b0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0fe:	bf00      	nop
 801b100:	20025838 	.word	0x20025838

0801b104 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b108:	b087      	sub	sp, #28
 801b10a:	f8df 830c 	ldr.w	r8, [pc, #780]	; 801b418 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801b10e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b110:	9205      	str	r2, [sp, #20]
 801b112:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b116:	9101      	str	r1, [sp, #4]
 801b118:	6841      	ldr	r1, [r0, #4]
 801b11a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801b11e:	fb01 2404 	mla	r4, r1, r4, r2
 801b122:	6802      	ldr	r2, [r0, #0]
 801b124:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b128:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b12c:	3201      	adds	r2, #1
 801b12e:	f022 0201 	bic.w	r2, r2, #1
 801b132:	9202      	str	r2, [sp, #8]
 801b134:	f8db 2000 	ldr.w	r2, [fp]
 801b138:	9203      	str	r2, [sp, #12]
 801b13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b13e:	9a01      	ldr	r2, [sp, #4]
 801b140:	2a00      	cmp	r2, #0
 801b142:	dc03      	bgt.n	801b14c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b144:	9a05      	ldr	r2, [sp, #20]
 801b146:	2a00      	cmp	r2, #0
 801b148:	f340 8162 	ble.w	801b410 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b14c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b14e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801b152:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801b156:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b15a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b15c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b160:	2b00      	cmp	r3, #0
 801b162:	dd0e      	ble.n	801b182 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b164:	1402      	asrs	r2, r0, #16
 801b166:	d405      	bmi.n	801b174 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b168:	42ba      	cmp	r2, r7
 801b16a:	da03      	bge.n	801b174 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b16c:	140a      	asrs	r2, r1, #16
 801b16e:	d401      	bmi.n	801b174 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b170:	42b2      	cmp	r2, r6
 801b172:	db07      	blt.n	801b184 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b174:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b176:	4410      	add	r0, r2
 801b178:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b17a:	3b01      	subs	r3, #1
 801b17c:	4411      	add	r1, r2
 801b17e:	3402      	adds	r4, #2
 801b180:	e7ee      	b.n	801b160 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b182:	d017      	beq.n	801b1b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b184:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b186:	1e5a      	subs	r2, r3, #1
 801b188:	fb05 0502 	mla	r5, r5, r2, r0
 801b18c:	142d      	asrs	r5, r5, #16
 801b18e:	d409      	bmi.n	801b1a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b190:	42bd      	cmp	r5, r7
 801b192:	da07      	bge.n	801b1a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b194:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b196:	fb05 1202 	mla	r2, r5, r2, r1
 801b19a:	1412      	asrs	r2, r2, #16
 801b19c:	d402      	bmi.n	801b1a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b19e:	42b2      	cmp	r2, r6
 801b1a0:	f2c0 80c3 	blt.w	801b32a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801b1a4:	2500      	movs	r5, #0
 801b1a6:	195a      	adds	r2, r3, r5
 801b1a8:	2a00      	cmp	r2, #0
 801b1aa:	dc3f      	bgt.n	801b22c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b1ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b1b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b1b4:	9b01      	ldr	r3, [sp, #4]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	f340 812a 	ble.w	801b410 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b1bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b1c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b1c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b1c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b1ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b1d2:	eeb0 6a62 	vmov.f32	s12, s5
 801b1d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b1da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b1e2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b1e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b1ea:	eeb0 6a43 	vmov.f32	s12, s6
 801b1ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b1f2:	ee12 2a90 	vmov	r2, s5
 801b1f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b1fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1fe:	ee13 2a10 	vmov	r2, s6
 801b202:	9313      	str	r3, [sp, #76]	; 0x4c
 801b204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b206:	fb92 f3f3 	sdiv	r3, r2, r3
 801b20a:	9314      	str	r3, [sp, #80]	; 0x50
 801b20c:	9b01      	ldr	r3, [sp, #4]
 801b20e:	9a05      	ldr	r2, [sp, #20]
 801b210:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b214:	3b01      	subs	r3, #1
 801b216:	9301      	str	r3, [sp, #4]
 801b218:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b21c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b21e:	eeb0 3a67 	vmov.f32	s6, s15
 801b222:	bf08      	it	eq
 801b224:	4613      	moveq	r3, r2
 801b226:	eef0 2a47 	vmov.f32	s5, s14
 801b22a:	e788      	b.n	801b13e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b22c:	1406      	asrs	r6, r0, #16
 801b22e:	d42c      	bmi.n	801b28a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b230:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b234:	42b2      	cmp	r2, r6
 801b236:	dd28      	ble.n	801b28a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b238:	140f      	asrs	r7, r1, #16
 801b23a:	d426      	bmi.n	801b28a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b23c:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b240:	42ba      	cmp	r2, r7
 801b242:	dd22      	ble.n	801b28a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b244:	9a02      	ldr	r2, [sp, #8]
 801b246:	fb07 6602 	mla	r6, r7, r2, r6
 801b24a:	0872      	lsrs	r2, r6, #1
 801b24c:	9f03      	ldr	r7, [sp, #12]
 801b24e:	5cba      	ldrb	r2, [r7, r2]
 801b250:	07f6      	lsls	r6, r6, #31
 801b252:	bf54      	ite	pl
 801b254:	f002 020f 	andpl.w	r2, r2, #15
 801b258:	1112      	asrmi	r2, r2, #4
 801b25a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b25e:	b2d2      	uxtb	r2, r2
 801b260:	2aff      	cmp	r2, #255	; 0xff
 801b262:	d118      	bne.n	801b296 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b264:	f8d8 2000 	ldr.w	r2, [r8]
 801b268:	f06f 0601 	mvn.w	r6, #1
 801b26c:	fb06 f705 	mul.w	r7, r6, r5
 801b270:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801b274:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801b278:	0956      	lsrs	r6, r2, #5
 801b27a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b27e:	ea4c 0606 	orr.w	r6, ip, r6
 801b282:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b286:	4316      	orrs	r6, r2
 801b288:	53e6      	strh	r6, [r4, r7]
 801b28a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b28c:	4410      	add	r0, r2
 801b28e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b290:	3d01      	subs	r5, #1
 801b292:	4411      	add	r1, r2
 801b294:	e787      	b.n	801b1a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b296:	2a00      	cmp	r2, #0
 801b298:	d0f7      	beq.n	801b28a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b29a:	f06f 0601 	mvn.w	r6, #1
 801b29e:	436e      	muls	r6, r5
 801b2a0:	f8d8 c000 	ldr.w	ip, [r8]
 801b2a4:	f834 e006 	ldrh.w	lr, [r4, r6]
 801b2a8:	9604      	str	r6, [sp, #16]
 801b2aa:	fa1f f982 	uxth.w	r9, r2
 801b2ae:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b2b2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801b2b6:	43d2      	mvns	r2, r2
 801b2b8:	b2d2      	uxtb	r2, r2
 801b2ba:	fb16 f609 	smulbb	r6, r6, r9
 801b2be:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b2c2:	fb07 6702 	mla	r7, r7, r2, r6
 801b2c6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801b2ca:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b2ce:	fa5f fc8c 	uxtb.w	ip, ip
 801b2d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b2d6:	fa5f fe8e 	uxtb.w	lr, lr
 801b2da:	fb1c fc09 	smulbb	ip, ip, r9
 801b2de:	fb0e cc02 	mla	ip, lr, r2, ip
 801b2e2:	b2bf      	uxth	r7, r7
 801b2e4:	fb1a fa09 	smulbb	sl, sl, r9
 801b2e8:	fa1f fc8c 	uxth.w	ip, ip
 801b2ec:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b2f0:	fb06 a602 	mla	r6, r6, r2, sl
 801b2f4:	1c7a      	adds	r2, r7, #1
 801b2f6:	f10c 0a01 	add.w	sl, ip, #1
 801b2fa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b2fe:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801b302:	b2b6      	uxth	r6, r6
 801b304:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b308:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b30c:	ea4a 0707 	orr.w	r7, sl, r7
 801b310:	f106 0a01 	add.w	sl, r6, #1
 801b314:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b318:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b31c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b320:	9a04      	ldr	r2, [sp, #16]
 801b322:	ea47 070a 	orr.w	r7, r7, sl
 801b326:	52a7      	strh	r7, [r4, r2]
 801b328:	e7af      	b.n	801b28a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b32a:	f04f 0e00 	mov.w	lr, #0
 801b32e:	eba3 020e 	sub.w	r2, r3, lr
 801b332:	2a00      	cmp	r2, #0
 801b334:	f77f af3a 	ble.w	801b1ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b338:	9e02      	ldr	r6, [sp, #8]
 801b33a:	1402      	asrs	r2, r0, #16
 801b33c:	140d      	asrs	r5, r1, #16
 801b33e:	fb06 2505 	mla	r5, r6, r5, r2
 801b342:	086a      	lsrs	r2, r5, #1
 801b344:	9e03      	ldr	r6, [sp, #12]
 801b346:	5cb2      	ldrb	r2, [r6, r2]
 801b348:	07ed      	lsls	r5, r5, #31
 801b34a:	bf54      	ite	pl
 801b34c:	f002 020f 	andpl.w	r2, r2, #15
 801b350:	1112      	asrmi	r2, r2, #4
 801b352:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b356:	b2d2      	uxtb	r2, r2
 801b358:	2aff      	cmp	r2, #255	; 0xff
 801b35a:	d115      	bne.n	801b388 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b35c:	f8d8 5000 	ldr.w	r5, [r8]
 801b360:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801b364:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801b368:	096a      	lsrs	r2, r5, #5
 801b36a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b36e:	4332      	orrs	r2, r6
 801b370:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b374:	432a      	orrs	r2, r5
 801b376:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801b37a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b37c:	4410      	add	r0, r2
 801b37e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b380:	f10e 0e01 	add.w	lr, lr, #1
 801b384:	4411      	add	r1, r2
 801b386:	e7d2      	b.n	801b32e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b388:	2a00      	cmp	r2, #0
 801b38a:	d0f6      	beq.n	801b37a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b38c:	f8d8 7000 	ldr.w	r7, [r8]
 801b390:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b394:	fa1f f982 	uxth.w	r9, r2
 801b398:	ea4f 262c 	mov.w	r6, ip, asr #8
 801b39c:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801b3a0:	43d2      	mvns	r2, r2
 801b3a2:	b2d2      	uxtb	r2, r2
 801b3a4:	fb15 f509 	smulbb	r5, r5, r9
 801b3a8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b3ac:	fb06 5602 	mla	r6, r6, r2, r5
 801b3b0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801b3b4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b3b8:	b2ff      	uxtb	r7, r7
 801b3ba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b3be:	fa5f fc8c 	uxtb.w	ip, ip
 801b3c2:	fb17 f709 	smulbb	r7, r7, r9
 801b3c6:	fb0c 7702 	mla	r7, ip, r2, r7
 801b3ca:	b2b6      	uxth	r6, r6
 801b3cc:	fb1a fa09 	smulbb	sl, sl, r9
 801b3d0:	b2bf      	uxth	r7, r7
 801b3d2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b3d6:	fb05 a502 	mla	r5, r5, r2, sl
 801b3da:	1c72      	adds	r2, r6, #1
 801b3dc:	f107 0a01 	add.w	sl, r7, #1
 801b3e0:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801b3e4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b3e8:	b2ad      	uxth	r5, r5
 801b3ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b3ee:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801b3f2:	ea4a 0606 	orr.w	r6, sl, r6
 801b3f6:	f105 0a01 	add.w	sl, r5, #1
 801b3fa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b3fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b402:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b406:	ea46 060a 	orr.w	r6, r6, sl
 801b40a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801b40e:	e7b4      	b.n	801b37a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b410:	b007      	add	sp, #28
 801b412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b416:	bf00      	nop
 801b418:	20025838 	.word	0x20025838

0801b41c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801b41c:	4770      	bx	lr

0801b41e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801b41e:	4770      	bx	lr

0801b420 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801b420:	4770      	bx	lr

0801b422 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b422:	4770      	bx	lr

0801b424 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b424:	4770      	bx	lr

0801b426 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b426:	4770      	bx	lr

0801b428 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b428:	4770      	bx	lr

0801b42a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b42a:	4770      	bx	lr

0801b42c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b42c:	4770      	bx	lr

0801b42e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b42e:	4770      	bx	lr

0801b430 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b430:	4770      	bx	lr

0801b432 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b432:	4770      	bx	lr

0801b434 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801b434:	4770      	bx	lr

0801b436 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b436:	4770      	bx	lr

0801b438 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b438:	4770      	bx	lr

0801b43a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b43a:	4770      	bx	lr

0801b43c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801b43c:	4770      	bx	lr

0801b43e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b43e:	4770      	bx	lr

0801b440 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b440:	4770      	bx	lr

0801b442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b442:	4770      	bx	lr

0801b444 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b444:	4770      	bx	lr

0801b446 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b446:	4770      	bx	lr

0801b448 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b448:	4770      	bx	lr

0801b44a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b44a:	4770      	bx	lr

0801b44c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b44c:	4770      	bx	lr

0801b44e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b44e:	4770      	bx	lr

0801b450 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b450:	4770      	bx	lr

0801b452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b452:	4770      	bx	lr

0801b454 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801b454:	4770      	bx	lr

0801b456 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b456:	4770      	bx	lr

0801b458 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801b458:	4770      	bx	lr

0801b45a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b45a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b45e:	b088      	sub	sp, #32
 801b460:	ac08      	add	r4, sp, #32
 801b462:	4606      	mov	r6, r0
 801b464:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801b468:	4620      	mov	r0, r4
 801b46a:	4688      	mov	r8, r1
 801b46c:	4691      	mov	r9, r2
 801b46e:	f7fd fc63 	bl	8018d38 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b472:	6833      	ldr	r3, [r6, #0]
 801b474:	4605      	mov	r5, r0
 801b476:	4620      	mov	r0, r4
 801b478:	699f      	ldr	r7, [r3, #24]
 801b47a:	f7fd fb71 	bl	8018b60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b47e:	4682      	mov	sl, r0
 801b480:	4620      	mov	r0, r4
 801b482:	f7fd fba1 	bl	8018bc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b486:	9500      	str	r5, [sp, #0]
 801b488:	e9cd a001 	strd	sl, r0, [sp, #4]
 801b48c:	464b      	mov	r3, r9
 801b48e:	a806      	add	r0, sp, #24
 801b490:	4642      	mov	r2, r8
 801b492:	4631      	mov	r1, r6
 801b494:	47b8      	blx	r7
 801b496:	4628      	mov	r0, r5
 801b498:	b008      	add	sp, #32
 801b49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b4a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b4a4:	2300      	movs	r3, #0
 801b4a6:	9300      	str	r3, [sp, #0]
 801b4a8:	4b3d      	ldr	r3, [pc, #244]	; (801b5a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801b4aa:	781b      	ldrb	r3, [r3, #0]
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d137      	bne.n	801b520 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801b4b0:	4a3c      	ldr	r2, [pc, #240]	; (801b5a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b4b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b4b6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d132      	bne.n	801b524 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801b4be:	4b3a      	ldr	r3, [pc, #232]	; (801b5a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b4c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4c4:	6808      	ldr	r0, [r1, #0]
 801b4c6:	6849      	ldr	r1, [r1, #4]
 801b4c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b4cc:	ac02      	add	r4, sp, #8
 801b4ce:	ab02      	add	r3, sp, #8
 801b4d0:	c303      	stmia	r3!, {r0, r1}
 801b4d2:	4669      	mov	r1, sp
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	f7fa f8df 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b4da:	4668      	mov	r0, sp
 801b4dc:	f7fa f8b4 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b4e0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b4e4:	f8bd 2000 	ldrh.w	r2, [sp]
 801b4e8:	4d30      	ldr	r5, [pc, #192]	; (801b5ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801b4ea:	4413      	add	r3, r2
 801b4ec:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b4f0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b4f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b4f8:	6828      	ldr	r0, [r5, #0]
 801b4fa:	4413      	add	r3, r2
 801b4fc:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b500:	6803      	ldr	r3, [r0, #0]
 801b502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b504:	4798      	blx	r3
 801b506:	f010 0f01 	tst.w	r0, #1
 801b50a:	462f      	mov	r7, r5
 801b50c:	d00c      	beq.n	801b528 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801b50e:	6828      	ldr	r0, [r5, #0]
 801b510:	6803      	ldr	r3, [r0, #0]
 801b512:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b518:	4798      	blx	r3
 801b51a:	b004      	add	sp, #16
 801b51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b520:	4a21      	ldr	r2, [pc, #132]	; (801b5a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b522:	e7c6      	b.n	801b4b2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b524:	4b1f      	ldr	r3, [pc, #124]	; (801b5a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b526:	e7cb      	b.n	801b4c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b528:	6838      	ldr	r0, [r7, #0]
 801b52a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801b52e:	6803      	ldr	r3, [r0, #0]
 801b530:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801b534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b536:	4798      	blx	r3
 801b538:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b53c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b540:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801b544:	fb16 3602 	smlabb	r6, r6, r2, r3
 801b548:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b54c:	6838      	ldr	r0, [r7, #0]
 801b54e:	6803      	ldr	r3, [r0, #0]
 801b550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b552:	4798      	blx	r3
 801b554:	4a13      	ldr	r2, [pc, #76]	; (801b5a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b556:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801b55a:	8813      	ldrh	r3, [r2, #0]
 801b55c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801b560:	fb03 1404 	mla	r4, r3, r4, r1
 801b564:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b568:	435d      	muls	r5, r3
 801b56a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b56e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b572:	4691      	mov	r9, r2
 801b574:	6838      	ldr	r0, [r7, #0]
 801b576:	42ac      	cmp	r4, r5
 801b578:	6803      	ldr	r3, [r0, #0]
 801b57a:	d20e      	bcs.n	801b59a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801b57c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801b580:	4632      	mov	r2, r6
 801b582:	4643      	mov	r3, r8
 801b584:	4621      	mov	r1, r4
 801b586:	47d0      	blx	sl
 801b588:	f8b9 3000 	ldrh.w	r3, [r9]
 801b58c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b590:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b594:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b598:	e7ec      	b.n	801b574 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801b59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b59c:	4798      	blx	r3
 801b59e:	e7bc      	b.n	801b51a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801b5a0:	20025828 	.word	0x20025828
 801b5a4:	2002582a 	.word	0x2002582a
 801b5a8:	2002582c 	.word	0x2002582c
 801b5ac:	20025830 	.word	0x20025830

0801b5b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5b4:	b08b      	sub	sp, #44	; 0x2c
 801b5b6:	460f      	mov	r7, r1
 801b5b8:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801b5bc:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801b5c0:	4616      	mov	r6, r2
 801b5c2:	f1bb 0f00 	cmp.w	fp, #0
 801b5c6:	d04a      	beq.n	801b65e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801b5c8:	6810      	ldr	r0, [r2, #0]
 801b5ca:	6851      	ldr	r1, [r2, #4]
 801b5cc:	ad06      	add	r5, sp, #24
 801b5ce:	c503      	stmia	r5!, {r0, r1}
 801b5d0:	6818      	ldr	r0, [r3, #0]
 801b5d2:	6859      	ldr	r1, [r3, #4]
 801b5d4:	ad08      	add	r5, sp, #32
 801b5d6:	c503      	stmia	r5!, {r0, r1}
 801b5d8:	a806      	add	r0, sp, #24
 801b5da:	f7fa f835 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b5de:	4631      	mov	r1, r6
 801b5e0:	a808      	add	r0, sp, #32
 801b5e2:	f7fa f859 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b5e6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b5ea:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b5ee:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b5f2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801b5f6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801b5fa:	fb16 2103 	smlabb	r1, r6, r3, r2
 801b5fe:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801b602:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b606:	4f5f      	ldr	r7, [pc, #380]	; (801b784 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b608:	440a      	add	r2, r1
 801b60a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b60e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b612:	6838      	ldr	r0, [r7, #0]
 801b614:	4413      	add	r3, r2
 801b616:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b61a:	6803      	ldr	r3, [r0, #0]
 801b61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b61e:	4798      	blx	r3
 801b620:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b624:	46b9      	mov	r9, r7
 801b626:	d11d      	bne.n	801b664 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801b628:	b9fc      	cbnz	r4, 801b66a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b62a:	f010 0f01 	tst.w	r0, #1
 801b62e:	d01c      	beq.n	801b66a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b630:	f8d9 0000 	ldr.w	r0, [r9]
 801b634:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b638:	6801      	ldr	r1, [r0, #0]
 801b63a:	f8cd b00c 	str.w	fp, [sp, #12]
 801b63e:	2700      	movs	r7, #0
 801b640:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801b644:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801b648:	9402      	str	r4, [sp, #8]
 801b64a:	b2ad      	uxth	r5, r5
 801b64c:	fa1f f488 	uxth.w	r4, r8
 801b650:	9501      	str	r5, [sp, #4]
 801b652:	9400      	str	r4, [sp, #0]
 801b654:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801b656:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b65a:	4631      	mov	r1, r6
 801b65c:	47a0      	blx	r4
 801b65e:	b00b      	add	sp, #44	; 0x2c
 801b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b664:	f010 0f04 	tst.w	r0, #4
 801b668:	e7e1      	b.n	801b62e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801b66a:	f8d9 0000 	ldr.w	r0, [r9]
 801b66e:	6803      	ldr	r3, [r0, #0]
 801b670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b672:	4798      	blx	r3
 801b674:	4b44      	ldr	r3, [pc, #272]	; (801b788 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801b676:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801b67a:	881a      	ldrh	r2, [r3, #0]
 801b67c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801b680:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b684:	fb02 1404 	mla	r4, r2, r4, r1
 801b688:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b68c:	469a      	mov	sl, r3
 801b68e:	fb05 f502 	mul.w	r5, r5, r2
 801b692:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801b696:	d059      	beq.n	801b74c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801b698:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801b69c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b6a0:	fa1f f28b 	uxth.w	r2, fp
 801b6a4:	fa1f f989 	uxth.w	r9, r9
 801b6a8:	469e      	mov	lr, r3
 801b6aa:	42ac      	cmp	r4, r5
 801b6ac:	d264      	bcs.n	801b778 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b6ae:	eb04 0a07 	add.w	sl, r4, r7
 801b6b2:	4554      	cmp	r4, sl
 801b6b4:	d23d      	bcs.n	801b732 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801b6b6:	8821      	ldrh	r1, [r4, #0]
 801b6b8:	f836 3b02 	ldrh.w	r3, [r6], #2
 801b6bc:	1208      	asrs	r0, r1, #8
 801b6be:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b6c2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b6c6:	fb10 f009 	smulbb	r0, r0, r9
 801b6ca:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801b6ce:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b6d2:	00c9      	lsls	r1, r1, #3
 801b6d4:	fb0c 0c02 	mla	ip, ip, r2, r0
 801b6d8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801b6dc:	10d8      	asrs	r0, r3, #3
 801b6de:	b2c9      	uxtb	r1, r1
 801b6e0:	00db      	lsls	r3, r3, #3
 801b6e2:	fa1f fc8c 	uxth.w	ip, ip
 801b6e6:	fb1b fb09 	smulbb	fp, fp, r9
 801b6ea:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b6ee:	b2db      	uxtb	r3, r3
 801b6f0:	fb11 f109 	smulbb	r1, r1, r9
 801b6f4:	fb00 b002 	mla	r0, r0, r2, fp
 801b6f8:	fb03 1302 	mla	r3, r3, r2, r1
 801b6fc:	f10c 0b01 	add.w	fp, ip, #1
 801b700:	b29b      	uxth	r3, r3
 801b702:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b706:	b280      	uxth	r0, r0
 801b708:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801b70c:	f103 0c01 	add.w	ip, r3, #1
 801b710:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b714:	1c43      	adds	r3, r0, #1
 801b716:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b71a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b71e:	0940      	lsrs	r0, r0, #5
 801b720:	ea4c 0c0b 	orr.w	ip, ip, fp
 801b724:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b728:	ea4c 0c00 	orr.w	ip, ip, r0
 801b72c:	f824 cb02 	strh.w	ip, [r4], #2
 801b730:	e7bf      	b.n	801b6b2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801b732:	f8be 3000 	ldrh.w	r3, [lr]
 801b736:	eba3 0308 	sub.w	r3, r3, r8
 801b73a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b73e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b742:	eba3 0308 	sub.w	r3, r3, r8
 801b746:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b74a:	e7ae      	b.n	801b6aa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801b74c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b750:	f8d9 0000 	ldr.w	r0, [r9]
 801b754:	42ac      	cmp	r4, r5
 801b756:	6803      	ldr	r3, [r0, #0]
 801b758:	d20e      	bcs.n	801b778 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b75a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801b75e:	4632      	mov	r2, r6
 801b760:	463b      	mov	r3, r7
 801b762:	4621      	mov	r1, r4
 801b764:	47c0      	blx	r8
 801b766:	f8ba 3000 	ldrh.w	r3, [sl]
 801b76a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b76e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b772:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b776:	e7eb      	b.n	801b750 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801b778:	4b02      	ldr	r3, [pc, #8]	; (801b784 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b77a:	6818      	ldr	r0, [r3, #0]
 801b77c:	6803      	ldr	r3, [r0, #0]
 801b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b780:	4798      	blx	r3
 801b782:	e76c      	b.n	801b65e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801b784:	20025830 	.word	0x20025830
 801b788:	2002582a 	.word	0x2002582a

0801b78c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801b78c:	b510      	push	{r4, lr}
 801b78e:	2104      	movs	r1, #4
 801b790:	4604      	mov	r4, r0
 801b792:	f00a fe16 	bl	80263c2 <_ZdlPvj>
 801b796:	4620      	mov	r0, r4
 801b798:	bd10      	pop	{r4, pc}

0801b79a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801b79a:	b510      	push	{r4, lr}
 801b79c:	2104      	movs	r1, #4
 801b79e:	4604      	mov	r4, r0
 801b7a0:	f00a fe0f 	bl	80263c2 <_ZdlPvj>
 801b7a4:	4620      	mov	r0, r4
 801b7a6:	bd10      	pop	{r4, pc}

0801b7a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801b7a8:	b510      	push	{r4, lr}
 801b7aa:	f640 0144 	movw	r1, #2116	; 0x844
 801b7ae:	4604      	mov	r4, r0
 801b7b0:	f00a fe07 	bl	80263c2 <_ZdlPvj>
 801b7b4:	4620      	mov	r0, r4
 801b7b6:	bd10      	pop	{r4, pc}

0801b7b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b7b8:	b510      	push	{r4, lr}
 801b7ba:	2104      	movs	r1, #4
 801b7bc:	4604      	mov	r4, r0
 801b7be:	f00a fe00 	bl	80263c2 <_ZdlPvj>
 801b7c2:	4620      	mov	r0, r4
 801b7c4:	bd10      	pop	{r4, pc}

0801b7c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801b7c6:	b510      	push	{r4, lr}
 801b7c8:	2104      	movs	r1, #4
 801b7ca:	4604      	mov	r4, r0
 801b7cc:	f00a fdf9 	bl	80263c2 <_ZdlPvj>
 801b7d0:	4620      	mov	r0, r4
 801b7d2:	bd10      	pop	{r4, pc}

0801b7d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b7d4:	b510      	push	{r4, lr}
 801b7d6:	2104      	movs	r1, #4
 801b7d8:	4604      	mov	r4, r0
 801b7da:	f00a fdf2 	bl	80263c2 <_ZdlPvj>
 801b7de:	4620      	mov	r0, r4
 801b7e0:	bd10      	pop	{r4, pc}

0801b7e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801b7e2:	b510      	push	{r4, lr}
 801b7e4:	2104      	movs	r1, #4
 801b7e6:	4604      	mov	r4, r0
 801b7e8:	f00a fdeb 	bl	80263c2 <_ZdlPvj>
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	bd10      	pop	{r4, pc}

0801b7f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b7f0:	b510      	push	{r4, lr}
 801b7f2:	2104      	movs	r1, #4
 801b7f4:	4604      	mov	r4, r0
 801b7f6:	f00a fde4 	bl	80263c2 <_ZdlPvj>
 801b7fa:	4620      	mov	r0, r4
 801b7fc:	bd10      	pop	{r4, pc}

0801b7fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b7fe:	b510      	push	{r4, lr}
 801b800:	2104      	movs	r1, #4
 801b802:	4604      	mov	r4, r0
 801b804:	f00a fddd 	bl	80263c2 <_ZdlPvj>
 801b808:	4620      	mov	r0, r4
 801b80a:	bd10      	pop	{r4, pc}

0801b80c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b80c:	b510      	push	{r4, lr}
 801b80e:	2104      	movs	r1, #4
 801b810:	4604      	mov	r4, r0
 801b812:	f00a fdd6 	bl	80263c2 <_ZdlPvj>
 801b816:	4620      	mov	r0, r4
 801b818:	bd10      	pop	{r4, pc}

0801b81a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b81a:	b510      	push	{r4, lr}
 801b81c:	2104      	movs	r1, #4
 801b81e:	4604      	mov	r4, r0
 801b820:	f00a fdcf 	bl	80263c2 <_ZdlPvj>
 801b824:	4620      	mov	r0, r4
 801b826:	bd10      	pop	{r4, pc}

0801b828 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b828:	b510      	push	{r4, lr}
 801b82a:	2104      	movs	r1, #4
 801b82c:	4604      	mov	r4, r0
 801b82e:	f00a fdc8 	bl	80263c2 <_ZdlPvj>
 801b832:	4620      	mov	r0, r4
 801b834:	bd10      	pop	{r4, pc}

0801b836 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b836:	b510      	push	{r4, lr}
 801b838:	2104      	movs	r1, #4
 801b83a:	4604      	mov	r4, r0
 801b83c:	f00a fdc1 	bl	80263c2 <_ZdlPvj>
 801b840:	4620      	mov	r0, r4
 801b842:	bd10      	pop	{r4, pc}

0801b844 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b844:	b510      	push	{r4, lr}
 801b846:	2104      	movs	r1, #4
 801b848:	4604      	mov	r4, r0
 801b84a:	f00a fdba 	bl	80263c2 <_ZdlPvj>
 801b84e:	4620      	mov	r0, r4
 801b850:	bd10      	pop	{r4, pc}

0801b852 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b852:	b510      	push	{r4, lr}
 801b854:	2104      	movs	r1, #4
 801b856:	4604      	mov	r4, r0
 801b858:	f00a fdb3 	bl	80263c2 <_ZdlPvj>
 801b85c:	4620      	mov	r0, r4
 801b85e:	bd10      	pop	{r4, pc}

0801b860 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b860:	b510      	push	{r4, lr}
 801b862:	2104      	movs	r1, #4
 801b864:	4604      	mov	r4, r0
 801b866:	f00a fdac 	bl	80263c2 <_ZdlPvj>
 801b86a:	4620      	mov	r0, r4
 801b86c:	bd10      	pop	{r4, pc}

0801b86e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801b86e:	b510      	push	{r4, lr}
 801b870:	2104      	movs	r1, #4
 801b872:	4604      	mov	r4, r0
 801b874:	f00a fda5 	bl	80263c2 <_ZdlPvj>
 801b878:	4620      	mov	r0, r4
 801b87a:	bd10      	pop	{r4, pc}

0801b87c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b87c:	b510      	push	{r4, lr}
 801b87e:	2104      	movs	r1, #4
 801b880:	4604      	mov	r4, r0
 801b882:	f00a fd9e 	bl	80263c2 <_ZdlPvj>
 801b886:	4620      	mov	r0, r4
 801b888:	bd10      	pop	{r4, pc}

0801b88a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b88a:	b510      	push	{r4, lr}
 801b88c:	2104      	movs	r1, #4
 801b88e:	4604      	mov	r4, r0
 801b890:	f00a fd97 	bl	80263c2 <_ZdlPvj>
 801b894:	4620      	mov	r0, r4
 801b896:	bd10      	pop	{r4, pc}

0801b898 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b898:	b510      	push	{r4, lr}
 801b89a:	2104      	movs	r1, #4
 801b89c:	4604      	mov	r4, r0
 801b89e:	f00a fd90 	bl	80263c2 <_ZdlPvj>
 801b8a2:	4620      	mov	r0, r4
 801b8a4:	bd10      	pop	{r4, pc}

0801b8a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801b8a6:	b510      	push	{r4, lr}
 801b8a8:	2104      	movs	r1, #4
 801b8aa:	4604      	mov	r4, r0
 801b8ac:	f00a fd89 	bl	80263c2 <_ZdlPvj>
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	bd10      	pop	{r4, pc}

0801b8b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b8b4:	b510      	push	{r4, lr}
 801b8b6:	2104      	movs	r1, #4
 801b8b8:	4604      	mov	r4, r0
 801b8ba:	f00a fd82 	bl	80263c2 <_ZdlPvj>
 801b8be:	4620      	mov	r0, r4
 801b8c0:	bd10      	pop	{r4, pc}

0801b8c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b8c2:	b510      	push	{r4, lr}
 801b8c4:	2104      	movs	r1, #4
 801b8c6:	4604      	mov	r4, r0
 801b8c8:	f00a fd7b 	bl	80263c2 <_ZdlPvj>
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	bd10      	pop	{r4, pc}

0801b8d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b8d0:	b510      	push	{r4, lr}
 801b8d2:	2104      	movs	r1, #4
 801b8d4:	4604      	mov	r4, r0
 801b8d6:	f00a fd74 	bl	80263c2 <_ZdlPvj>
 801b8da:	4620      	mov	r0, r4
 801b8dc:	bd10      	pop	{r4, pc}

0801b8de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b8de:	b510      	push	{r4, lr}
 801b8e0:	2104      	movs	r1, #4
 801b8e2:	4604      	mov	r4, r0
 801b8e4:	f00a fd6d 	bl	80263c2 <_ZdlPvj>
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	bd10      	pop	{r4, pc}

0801b8ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b8ec:	b510      	push	{r4, lr}
 801b8ee:	2104      	movs	r1, #4
 801b8f0:	4604      	mov	r4, r0
 801b8f2:	f00a fd66 	bl	80263c2 <_ZdlPvj>
 801b8f6:	4620      	mov	r0, r4
 801b8f8:	bd10      	pop	{r4, pc}

0801b8fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b8fa:	b510      	push	{r4, lr}
 801b8fc:	2104      	movs	r1, #4
 801b8fe:	4604      	mov	r4, r0
 801b900:	f00a fd5f 	bl	80263c2 <_ZdlPvj>
 801b904:	4620      	mov	r0, r4
 801b906:	bd10      	pop	{r4, pc}

0801b908 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801b908:	b510      	push	{r4, lr}
 801b90a:	2104      	movs	r1, #4
 801b90c:	4604      	mov	r4, r0
 801b90e:	f00a fd58 	bl	80263c2 <_ZdlPvj>
 801b912:	4620      	mov	r0, r4
 801b914:	bd10      	pop	{r4, pc}

0801b916 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801b916:	b510      	push	{r4, lr}
 801b918:	2104      	movs	r1, #4
 801b91a:	4604      	mov	r4, r0
 801b91c:	f00a fd51 	bl	80263c2 <_ZdlPvj>
 801b920:	4620      	mov	r0, r4
 801b922:	bd10      	pop	{r4, pc}

0801b924 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801b924:	b510      	push	{r4, lr}
 801b926:	2104      	movs	r1, #4
 801b928:	4604      	mov	r4, r0
 801b92a:	f00a fd4a 	bl	80263c2 <_ZdlPvj>
 801b92e:	4620      	mov	r0, r4
 801b930:	bd10      	pop	{r4, pc}

0801b932 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801b932:	b510      	push	{r4, lr}
 801b934:	2104      	movs	r1, #4
 801b936:	4604      	mov	r4, r0
 801b938:	f00a fd43 	bl	80263c2 <_ZdlPvj>
 801b93c:	4620      	mov	r0, r4
 801b93e:	bd10      	pop	{r4, pc}

0801b940 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b944:	b08f      	sub	sp, #60	; 0x3c
 801b946:	461c      	mov	r4, r3
 801b948:	9205      	str	r2, [sp, #20]
 801b94a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b94e:	9100      	str	r1, [sp, #0]
 801b950:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b952:	9201      	str	r2, [sp, #4]
 801b954:	2a00      	cmp	r2, #0
 801b956:	f000 8115 	beq.w	801bb84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x244>
 801b95a:	6820      	ldr	r0, [r4, #0]
 801b95c:	6861      	ldr	r1, [r4, #4]
 801b95e:	aa0a      	add	r2, sp, #40	; 0x28
 801b960:	c203      	stmia	r2!, {r0, r1}
 801b962:	6818      	ldr	r0, [r3, #0]
 801b964:	6859      	ldr	r1, [r3, #4]
 801b966:	aa0c      	add	r2, sp, #48	; 0x30
 801b968:	c203      	stmia	r2!, {r0, r1}
 801b96a:	a80a      	add	r0, sp, #40	; 0x28
 801b96c:	f7f9 fe6c 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b970:	4621      	mov	r1, r4
 801b972:	a80c      	add	r0, sp, #48	; 0x30
 801b974:	f7f9 fe90 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b978:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801b97c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801b980:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801b984:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b988:	bfde      	ittt	le
 801b98a:	b2b3      	uxthle	r3, r6
 801b98c:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801b990:	fb92 f3f3 	sdivle	r3, r2, r3
 801b994:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801b998:	bfc8      	it	gt
 801b99a:	2301      	movgt	r3, #1
 801b99c:	fb92 f1f3 	sdiv	r1, r2, r3
 801b9a0:	fa1f fc81 	uxth.w	ip, r1
 801b9a4:	fb0c 2413 	mls	r4, ip, r3, r2
 801b9a8:	fb14 f406 	smulbb	r4, r4, r6
 801b9ac:	441d      	add	r5, r3
 801b9ae:	4404      	add	r4, r0
 801b9b0:	4661      	mov	r1, ip
 801b9b2:	3d01      	subs	r5, #1
 801b9b4:	b2a4      	uxth	r4, r4
 801b9b6:	fb95 f5f3 	sdiv	r5, r5, r3
 801b9ba:	b131      	cbz	r1, 801b9ca <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x8a>
 801b9bc:	9b05      	ldr	r3, [sp, #20]
 801b9be:	9900      	ldr	r1, [sp, #0]
 801b9c0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b9c4:	ba1b      	rev	r3, r3
 801b9c6:	4419      	add	r1, r3
 801b9c8:	9100      	str	r1, [sp, #0]
 801b9ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b9ce:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801b9d2:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801b9d6:	4418      	add	r0, r3
 801b9d8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801b9dc:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801b9e0:	441a      	add	r2, r3
 801b9e2:	4b6a      	ldr	r3, [pc, #424]	; (801bb8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801b9e4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801b9e8:	6818      	ldr	r0, [r3, #0]
 801b9ea:	6803      	ldr	r3, [r0, #0]
 801b9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9ee:	4798      	blx	r3
 801b9f0:	4967      	ldr	r1, [pc, #412]	; (801bb90 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801b9f2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801b9f6:	880b      	ldrh	r3, [r1, #0]
 801b9f8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801b9fc:	9109      	str	r1, [sp, #36]	; 0x24
 801b9fe:	fb03 c202 	mla	r2, r3, r2, ip
 801ba02:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ba06:	4373      	muls	r3, r6
 801ba08:	b2ad      	uxth	r5, r5
 801ba0a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ba0e:	00ad      	lsls	r5, r5, #2
 801ba10:	9306      	str	r3, [sp, #24]
 801ba12:	1d2b      	adds	r3, r5, #4
 801ba14:	9307      	str	r3, [sp, #28]
 801ba16:	9b01      	ldr	r3, [sp, #4]
 801ba18:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801ba1c:	9103      	str	r1, [sp, #12]
 801ba1e:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 801ba22:	2c00      	cmp	r4, #0
 801ba24:	bf0c      	ite	eq
 801ba26:	46c6      	moveq	lr, r8
 801ba28:	f04f 0e00 	movne.w	lr, #0
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	b292      	uxth	r2, r2
 801ba30:	fa1f fe8e 	uxth.w	lr, lr
 801ba34:	9302      	str	r3, [sp, #8]
 801ba36:	9204      	str	r2, [sp, #16]
 801ba38:	9a06      	ldr	r2, [sp, #24]
 801ba3a:	4282      	cmp	r2, r0
 801ba3c:	f240 809d 	bls.w	801bb7a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23a>
 801ba40:	b963      	cbnz	r3, 801ba5c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 801ba42:	9b00      	ldr	r3, [sp, #0]
 801ba44:	781a      	ldrb	r2, [r3, #0]
 801ba46:	0993      	lsrs	r3, r2, #6
 801ba48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801ba4c:	9202      	str	r2, [sp, #8]
 801ba4e:	1e5a      	subs	r2, r3, #1
 801ba50:	2a02      	cmp	r2, #2
 801ba52:	d815      	bhi.n	801ba80 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x140>
 801ba54:	9a00      	ldr	r2, [sp, #0]
 801ba56:	3201      	adds	r2, #1
 801ba58:	9200      	str	r2, [sp, #0]
 801ba5a:	b29b      	uxth	r3, r3
 801ba5c:	b1b4      	cbz	r4, 801ba8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14c>
 801ba5e:	429c      	cmp	r4, r3
 801ba60:	bf95      	itete	ls
 801ba62:	1b1c      	subls	r4, r3, r4
 801ba64:	1ae4      	subhi	r4, r4, r3
 801ba66:	fa1f fa84 	uxthls.w	sl, r4
 801ba6a:	b2a4      	uxthhi	r4, r4
 801ba6c:	bf87      	ittee	hi
 801ba6e:	4671      	movhi	r1, lr
 801ba70:	f04f 0a00 	movhi.w	sl, #0
 801ba74:	fa1f f188 	uxthls.w	r1, r8
 801ba78:	2400      	movls	r4, #0
 801ba7a:	4653      	mov	r3, sl
 801ba7c:	468e      	mov	lr, r1
 801ba7e:	e7db      	b.n	801ba38 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf8>
 801ba80:	9a00      	ldr	r2, [sp, #0]
 801ba82:	9b00      	ldr	r3, [sp, #0]
 801ba84:	3202      	adds	r2, #2
 801ba86:	785b      	ldrb	r3, [r3, #1]
 801ba88:	9200      	str	r2, [sp, #0]
 801ba8a:	e7e7      	b.n	801ba5c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 801ba8c:	2202      	movs	r2, #2
 801ba8e:	4615      	mov	r5, r2
 801ba90:	9907      	ldr	r1, [sp, #28]
 801ba92:	9a02      	ldr	r2, [sp, #8]
 801ba94:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ba98:	9905      	ldr	r1, [sp, #20]
 801ba9a:	4573      	cmp	r3, lr
 801ba9c:	f831 c002 	ldrh.w	ip, [r1, r2]
 801baa0:	9a01      	ldr	r2, [sp, #4]
 801baa2:	bf2b      	itete	cs
 801baa4:	eba3 0a0e 	subcs.w	sl, r3, lr
 801baa8:	ebae 0103 	subcc.w	r1, lr, r3
 801baac:	46f1      	movcs	r9, lr
 801baae:	4699      	movcc	r9, r3
 801bab0:	bf27      	ittee	cs
 801bab2:	fa1f fa8a 	uxthcs.w	sl, sl
 801bab6:	4621      	movcs	r1, r4
 801bab8:	b289      	uxthcc	r1, r1
 801baba:	46a2      	movcc	sl, r4
 801babc:	2aff      	cmp	r2, #255	; 0xff
 801babe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801bac2:	d105      	bne.n	801bad0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801bac4:	4481      	add	r9, r0
 801bac6:	4581      	cmp	r9, r0
 801bac8:	d045      	beq.n	801bb56 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 801baca:	f820 cb02 	strh.w	ip, [r0], #2
 801bace:	e7fa      	b.n	801bac6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 801bad0:	9d03      	ldr	r5, [sp, #12]
 801bad2:	ea4f 222c 	mov.w	r2, ip, asr #8
 801bad6:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801bada:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801bade:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bae2:	436a      	muls	r2, r5
 801bae4:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801bae8:	fa5f fc8c 	uxtb.w	ip, ip
 801baec:	9208      	str	r2, [sp, #32]
 801baee:	fb0b fb05 	mul.w	fp, fp, r5
 801baf2:	fb0c fc05 	mul.w	ip, ip, r5
 801baf6:	4481      	add	r9, r0
 801baf8:	4581      	cmp	r9, r0
 801bafa:	d02c      	beq.n	801bb56 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 801bafc:	8802      	ldrh	r2, [r0, #0]
 801bafe:	9d04      	ldr	r5, [sp, #16]
 801bb00:	9f04      	ldr	r7, [sp, #16]
 801bb02:	1216      	asrs	r6, r2, #8
 801bb04:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bb08:	fb16 f605 	smulbb	r6, r6, r5
 801bb0c:	9d08      	ldr	r5, [sp, #32]
 801bb0e:	442e      	add	r6, r5
 801bb10:	10d5      	asrs	r5, r2, #3
 801bb12:	00d2      	lsls	r2, r2, #3
 801bb14:	b2d2      	uxtb	r2, r2
 801bb16:	fb12 f207 	smulbb	r2, r2, r7
 801bb1a:	b2b6      	uxth	r6, r6
 801bb1c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bb20:	4462      	add	r2, ip
 801bb22:	fb15 f507 	smulbb	r5, r5, r7
 801bb26:	b292      	uxth	r2, r2
 801bb28:	1c77      	adds	r7, r6, #1
 801bb2a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801bb2e:	1c57      	adds	r7, r2, #1
 801bb30:	445d      	add	r5, fp
 801bb32:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801bb36:	b2ad      	uxth	r5, r5
 801bb38:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bb3c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801bb40:	4316      	orrs	r6, r2
 801bb42:	1c6a      	adds	r2, r5, #1
 801bb44:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801bb48:	096d      	lsrs	r5, r5, #5
 801bb4a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bb4e:	432e      	orrs	r6, r5
 801bb50:	f820 6b02 	strh.w	r6, [r0], #2
 801bb54:	e7d0      	b.n	801baf8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1b8>
 801bb56:	4573      	cmp	r3, lr
 801bb58:	d38f      	bcc.n	801ba7a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 801bb5a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801bb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb60:	fa1f f188 	uxth.w	r1, r8
 801bb64:	1a64      	subs	r4, r4, r1
 801bb66:	881b      	ldrh	r3, [r3, #0]
 801bb68:	b2a4      	uxth	r4, r4
 801bb6a:	2c00      	cmp	r4, #0
 801bb6c:	eba3 0308 	sub.w	r3, r3, r8
 801bb70:	bf18      	it	ne
 801bb72:	2100      	movne	r1, #0
 801bb74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bb78:	e77f      	b.n	801ba7a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 801bb7a:	4b04      	ldr	r3, [pc, #16]	; (801bb8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801bb7c:	6818      	ldr	r0, [r3, #0]
 801bb7e:	6803      	ldr	r3, [r0, #0]
 801bb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb82:	4798      	blx	r3
 801bb84:	b00f      	add	sp, #60	; 0x3c
 801bb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb8a:	bf00      	nop
 801bb8c:	20025830 	.word	0x20025830
 801bb90:	2002582a 	.word	0x2002582a

0801bb94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801bb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb98:	b09f      	sub	sp, #124	; 0x7c
 801bb9a:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801bb9e:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801bba2:	9209      	str	r2, [sp, #36]	; 0x24
 801bba4:	461d      	mov	r5, r3
 801bba6:	4604      	mov	r4, r0
 801bba8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bbaa:	2a00      	cmp	r2, #0
 801bbac:	f000 81eb 	beq.w	801bf86 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f2>
 801bbb0:	6828      	ldr	r0, [r5, #0]
 801bbb2:	6869      	ldr	r1, [r5, #4]
 801bbb4:	aa1a      	add	r2, sp, #104	; 0x68
 801bbb6:	c203      	stmia	r2!, {r0, r1}
 801bbb8:	6818      	ldr	r0, [r3, #0]
 801bbba:	6859      	ldr	r1, [r3, #4]
 801bbbc:	aa1c      	add	r2, sp, #112	; 0x70
 801bbbe:	c203      	stmia	r2!, {r0, r1}
 801bbc0:	a81a      	add	r0, sp, #104	; 0x68
 801bbc2:	f7f9 fd41 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bbc6:	4629      	mov	r1, r5
 801bbc8:	a81c      	add	r0, sp, #112	; 0x70
 801bbca:	f7f9 fd65 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bbce:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801bbd2:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 801bbd6:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 801bbda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bbde:	bfd7      	itett	le
 801bbe0:	b29a      	uxthle	r2, r3
 801bbe2:	2201      	movgt	r2, #1
 801bbe4:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801bbe8:	fb91 f2f2 	sdivle	r2, r1, r2
 801bbec:	9202      	str	r2, [sp, #8]
 801bbee:	9802      	ldr	r0, [sp, #8]
 801bbf0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801bbf4:	fb92 f0f0 	sdiv	r0, r2, r0
 801bbf8:	b280      	uxth	r0, r0
 801bbfa:	9010      	str	r0, [sp, #64]	; 0x40
 801bbfc:	9902      	ldr	r1, [sp, #8]
 801bbfe:	9802      	ldr	r0, [sp, #8]
 801bc00:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801bc02:	4488      	add	r8, r1
 801bc04:	fb05 2510 	mls	r5, r5, r0, r2
 801bc08:	fb15 f503 	smulbb	r5, r5, r3
 801bc0c:	f108 38ff 	add.w	r8, r8, #4294967295
 801bc10:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801bc14:	fb98 f8f1 	sdiv	r8, r8, r1
 801bc18:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801bc1c:	440d      	add	r5, r1
 801bc1e:	4419      	add	r1, r3
 801bc20:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801bc24:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801bc28:	441a      	add	r2, r3
 801bc2a:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801bc2e:	9304      	str	r3, [sp, #16]
 801bc30:	4b95      	ldr	r3, [pc, #596]	; (801be88 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801bc32:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801bc36:	6818      	ldr	r0, [r3, #0]
 801bc38:	6803      	ldr	r3, [r0, #0]
 801bc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc3c:	4798      	blx	r3
 801bc3e:	4b93      	ldr	r3, [pc, #588]	; (801be8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801bc40:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801bc44:	881a      	ldrh	r2, [r3, #0]
 801bc46:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801bc4a:	9318      	str	r3, [sp, #96]	; 0x60
 801bc4c:	fb02 7101 	mla	r1, r2, r1, r7
 801bc50:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801bc54:	4356      	muls	r6, r2
 801bc56:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801bc5a:	f108 0801 	add.w	r8, r8, #1
 801bc5e:	920a      	str	r2, [sp, #40]	; 0x28
 801bc60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc62:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801bc66:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc68:	fa1f f888 	uxth.w	r8, r8
 801bc6c:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801bc70:	f108 0204 	add.w	r2, r8, #4
 801bc74:	9211      	str	r2, [sp, #68]	; 0x44
 801bc76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bc78:	4b85      	ldr	r3, [pc, #532]	; (801be90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801bc7a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801bc7e:	b2ad      	uxth	r5, r5
 801bc80:	9215      	str	r2, [sp, #84]	; 0x54
 801bc82:	2d00      	cmp	r5, #0
 801bc84:	9a04      	ldr	r2, [sp, #16]
 801bc86:	f04f 0100 	mov.w	r1, #0
 801bc8a:	bf18      	it	ne
 801bc8c:	2200      	movne	r2, #0
 801bc8e:	1b1b      	subs	r3, r3, r4
 801bc90:	b292      	uxth	r2, r2
 801bc92:	910d      	str	r1, [sp, #52]	; 0x34
 801bc94:	9319      	str	r3, [sp, #100]	; 0x64
 801bc96:	9910      	ldr	r1, [sp, #64]	; 0x40
 801bc98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc9a:	fa11 f383 	uxtah	r3, r1, r3
 801bc9e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801bca0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bca4:	3304      	adds	r3, #4
 801bca6:	9306      	str	r3, [sp, #24]
 801bca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcaa:	4283      	cmp	r3, r0
 801bcac:	f240 8166 	bls.w	801bf7c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e8>
 801bcb0:	9902      	ldr	r1, [sp, #8]
 801bcb2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801bcb6:	fbb5 f3f3 	udiv	r3, r5, r3
 801bcba:	1acb      	subs	r3, r1, r3
 801bcbc:	b29b      	uxth	r3, r3
 801bcbe:	9316      	str	r3, [sp, #88]	; 0x58
 801bcc0:	9b06      	ldr	r3, [sp, #24]
 801bcc2:	9e06      	ldr	r6, [sp, #24]
 801bcc4:	7859      	ldrb	r1, [r3, #1]
 801bcc6:	789b      	ldrb	r3, [r3, #2]
 801bcc8:	7836      	ldrb	r6, [r6, #0]
 801bcca:	9612      	str	r6, [sp, #72]	; 0x48
 801bccc:	021b      	lsls	r3, r3, #8
 801bcce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801bcd2:	9906      	ldr	r1, [sp, #24]
 801bcd4:	78c9      	ldrb	r1, [r1, #3]
 801bcd6:	430b      	orrs	r3, r1
 801bcd8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801bcda:	3601      	adds	r6, #1
 801bcdc:	4419      	add	r1, r3
 801bcde:	9605      	str	r6, [sp, #20]
 801bce0:	1c4e      	adds	r6, r1, #1
 801bce2:	9603      	str	r6, [sp, #12]
 801bce4:	7849      	ldrb	r1, [r1, #1]
 801bce6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bce8:	0209      	lsls	r1, r1, #8
 801bcea:	5cf3      	ldrb	r3, [r6, r3]
 801bcec:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801bcf0:	4319      	orrs	r1, r3
 801bcf2:	b28b      	uxth	r3, r1
 801bcf4:	930c      	str	r3, [sp, #48]	; 0x30
 801bcf6:	2300      	movs	r3, #0
 801bcf8:	f04f 0a01 	mov.w	sl, #1
 801bcfc:	9307      	str	r3, [sp, #28]
 801bcfe:	469c      	mov	ip, r3
 801bd00:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801bd04:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801bd08:	46d3      	mov	fp, sl
 801bd0a:	4657      	mov	r7, sl
 801bd0c:	930e      	str	r3, [sp, #56]	; 0x38
 801bd0e:	2d00      	cmp	r5, #0
 801bd10:	d07e      	beq.n	801be10 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801bd12:	42af      	cmp	r7, r5
 801bd14:	d26e      	bcs.n	801bdf4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 801bd16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd18:	9201      	str	r2, [sp, #4]
 801bd1a:	1bed      	subs	r5, r5, r7
 801bd1c:	4283      	cmp	r3, r0
 801bd1e:	b2ad      	uxth	r5, r5
 801bd20:	d802      	bhi.n	801bd28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801bd22:	e073      	b.n	801be0c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d15f      	bne.n	801bde8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 801bd28:	9b03      	ldr	r3, [sp, #12]
 801bd2a:	785b      	ldrb	r3, [r3, #1]
 801bd2c:	f1cb 0207 	rsb	r2, fp, #7
 801bd30:	4093      	lsls	r3, r2
 801bd32:	005b      	lsls	r3, r3, #1
 801bd34:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801bd38:	9b03      	ldr	r3, [sp, #12]
 801bd3a:	781b      	ldrb	r3, [r3, #0]
 801bd3c:	fa43 f30b 	asr.w	r3, r3, fp
 801bd40:	b2db      	uxtb	r3, r3
 801bd42:	4313      	orrs	r3, r2
 801bd44:	f10b 0201 	add.w	r2, fp, #1
 801bd48:	fa5f fb82 	uxtb.w	fp, r2
 801bd4c:	9a03      	ldr	r2, [sp, #12]
 801bd4e:	f1bb 0f08 	cmp.w	fp, #8
 801bd52:	bf15      	itete	ne
 801bd54:	3201      	addne	r2, #1
 801bd56:	3202      	addeq	r2, #2
 801bd58:	9203      	strne	r2, [sp, #12]
 801bd5a:	9203      	streq	r2, [sp, #12]
 801bd5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bd5e:	b29f      	uxth	r7, r3
 801bd60:	bf08      	it	eq
 801bd62:	f04f 0b00 	moveq.w	fp, #0
 801bd66:	42ba      	cmp	r2, r7
 801bd68:	d309      	bcc.n	801bd7e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 801bd6a:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801bd6e:	2301      	movs	r3, #1
 801bd70:	9a05      	ldr	r2, [sp, #20]
 801bd72:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801bd76:	d30e      	bcc.n	801bd96 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 801bd78:	469a      	mov	sl, r3
 801bd7a:	2600      	movs	r6, #0
 801bd7c:	e035      	b.n	801bdea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 801bd7e:	9b05      	ldr	r3, [sp, #20]
 801bd80:	429f      	cmp	r7, r3
 801bd82:	d318      	bcc.n	801bdb6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 801bd84:	eb04 030a 	add.w	r3, r4, sl
 801bd88:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801bd8c:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801bd90:	f10a 0301 	add.w	r3, sl, #1
 801bd94:	b29b      	uxth	r3, r3
 801bd96:	9a05      	ldr	r2, [sp, #20]
 801bd98:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801bd9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bd9e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bda2:	7116      	strb	r6, [r2, #4]
 801bda4:	f10a 0601 	add.w	r6, sl, #1
 801bda8:	80d1      	strh	r1, [r2, #6]
 801bdaa:	7156      	strb	r6, [r2, #5]
 801bdac:	9a05      	ldr	r2, [sp, #20]
 801bdae:	3201      	adds	r2, #1
 801bdb0:	b292      	uxth	r2, r2
 801bdb2:	9205      	str	r2, [sp, #20]
 801bdb4:	e7e0      	b.n	801bd78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 801bdb6:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801bdba:	463a      	mov	r2, r7
 801bdbc:	795b      	ldrb	r3, [r3, #5]
 801bdbe:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801bdc2:	4426      	add	r6, r4
 801bdc4:	9919      	ldr	r1, [sp, #100]	; 0x64
 801bdc6:	eb01 0c06 	add.w	ip, r1, r6
 801bdca:	f1bc 0f00 	cmp.w	ip, #0
 801bdce:	dd07      	ble.n	801bde0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 801bdd0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bdd4:	f892 c004 	ldrb.w	ip, [r2, #4]
 801bdd8:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801bddc:	88d2      	ldrh	r2, [r2, #6]
 801bdde:	e7f1      	b.n	801bdc4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 801bde0:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801bde4:	b29b      	uxth	r3, r3
 801bde6:	e7c3      	b.n	801bd70 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 801bde8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bdea:	970c      	str	r7, [sp, #48]	; 0x30
 801bdec:	9a01      	ldr	r2, [sp, #4]
 801bdee:	46b4      	mov	ip, r6
 801bdf0:	461f      	mov	r7, r3
 801bdf2:	e78c      	b.n	801bd0e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 801bdf4:	1b7b      	subs	r3, r7, r5
 801bdf6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bdfa:	9201      	str	r2, [sp, #4]
 801bdfc:	eb0c 0605 	add.w	r6, ip, r5
 801be00:	b29b      	uxth	r3, r3
 801be02:	b2b6      	uxth	r6, r6
 801be04:	2500      	movs	r5, #0
 801be06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801be08:	4282      	cmp	r2, r0
 801be0a:	d88b      	bhi.n	801bd24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801be0c:	9a01      	ldr	r2, [sp, #4]
 801be0e:	e74b      	b.n	801bca8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 801be10:	4297      	cmp	r7, r2
 801be12:	d332      	bcc.n	801be7a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e6>
 801be14:	1abb      	subs	r3, r7, r2
 801be16:	b29b      	uxth	r3, r3
 801be18:	9208      	str	r2, [sp, #32]
 801be1a:	9501      	str	r5, [sp, #4]
 801be1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801be1e:	29ff      	cmp	r1, #255	; 0xff
 801be20:	9908      	ldr	r1, [sp, #32]
 801be22:	eb0c 0601 	add.w	r6, ip, r1
 801be26:	d135      	bne.n	801be94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 801be28:	f1a0 0e02 	sub.w	lr, r0, #2
 801be2c:	b2b6      	uxth	r6, r6
 801be2e:	45b4      	cmp	ip, r6
 801be30:	f040 808c 	bne.w	801bf4c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b8>
 801be34:	9908      	ldr	r1, [sp, #32]
 801be36:	4297      	cmp	r7, r2
 801be38:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801be3c:	d3e2      	bcc.n	801be04 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 801be3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801be40:	9904      	ldr	r1, [sp, #16]
 801be42:	8812      	ldrh	r2, [r2, #0]
 801be44:	1a52      	subs	r2, r2, r1
 801be46:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801be4a:	9a07      	ldr	r2, [sp, #28]
 801be4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801be4e:	3201      	adds	r2, #1
 801be50:	428a      	cmp	r2, r1
 801be52:	9207      	str	r2, [sp, #28]
 801be54:	f040 8087 	bne.w	801bf66 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d2>
 801be58:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801be5c:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 801be60:	9b04      	ldr	r3, [sp, #16]
 801be62:	1bed      	subs	r5, r5, r7
 801be64:	b2ad      	uxth	r5, r5
 801be66:	2d00      	cmp	r5, #0
 801be68:	bf08      	it	eq
 801be6a:	461a      	moveq	r2, r3
 801be6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be6e:	bf18      	it	ne
 801be70:	2200      	movne	r2, #0
 801be72:	3301      	adds	r3, #1
 801be74:	930d      	str	r3, [sp, #52]	; 0x34
 801be76:	b292      	uxth	r2, r2
 801be78:	e70d      	b.n	801bc96 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 801be7a:	1bd1      	subs	r1, r2, r7
 801be7c:	b28b      	uxth	r3, r1
 801be7e:	9301      	str	r3, [sp, #4]
 801be80:	9708      	str	r7, [sp, #32]
 801be82:	462b      	mov	r3, r5
 801be84:	e7ca      	b.n	801be1c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 801be86:	bf00      	nop
 801be88:	20025830 	.word	0x20025830
 801be8c:	2002582a 	.word	0x2002582a
 801be90:	fffff7fb 	.word	0xfffff7fb
 801be94:	b2b6      	uxth	r6, r6
 801be96:	900b      	str	r0, [sp, #44]	; 0x2c
 801be98:	45b4      	cmp	ip, r6
 801be9a:	d0cb      	beq.n	801be34 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 801be9c:	f10c 0101 	add.w	r1, ip, #1
 801bea0:	44a4      	add	ip, r4
 801bea2:	9117      	str	r1, [sp, #92]	; 0x5c
 801bea4:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801bea8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801beaa:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801beae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801beb0:	f8b1 c000 	ldrh.w	ip, [r1]
 801beb4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801beb6:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801beba:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801bebe:	fb1e fe01 	smulbb	lr, lr, r1
 801bec2:	ea4f 2825 	mov.w	r8, r5, asr #8
 801bec6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bec8:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801becc:	fb08 e801 	mla	r8, r8, r1, lr
 801bed0:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801bed4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bed6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801beda:	fb19 f901 	smulbb	r9, r9, r1
 801bede:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801bee2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bee4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801bee8:	fb0e 9e01 	mla	lr, lr, r1, r9
 801beec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bef0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bef2:	fa5f fc8c 	uxtb.w	ip, ip
 801bef6:	fb1c fc01 	smulbb	ip, ip, r1
 801befa:	00ed      	lsls	r5, r5, #3
 801befc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801befe:	b2ed      	uxtb	r5, r5
 801bf00:	fb05 c501 	mla	r5, r5, r1, ip
 801bf04:	fa1f f888 	uxth.w	r8, r8
 801bf08:	fa1f fe8e 	uxth.w	lr, lr
 801bf0c:	b2ad      	uxth	r5, r5
 801bf0e:	f108 0c01 	add.w	ip, r8, #1
 801bf12:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801bf16:	f10e 0901 	add.w	r9, lr, #1
 801bf1a:	f105 0c01 	add.w	ip, r5, #1
 801bf1e:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801bf22:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801bf26:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801bf2a:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801bf2e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bf32:	ea4c 0808 	orr.w	r8, ip, r8
 801bf36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bf38:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 801bf3c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bf40:	ea48 0809 	orr.w	r8, r8, r9
 801bf44:	f821 8b02 	strh.w	r8, [r1], #2
 801bf48:	910b      	str	r1, [sp, #44]	; 0x2c
 801bf4a:	e7a5      	b.n	801be98 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801bf4c:	f10c 0801 	add.w	r8, ip, #1
 801bf50:	44a4      	add	ip, r4
 801bf52:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bf54:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801bf58:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801bf5c:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801bf60:	fa1f fc88 	uxth.w	ip, r8
 801bf64:	e763      	b.n	801be2e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 801bf66:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bf6a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801bf6e:	1aad      	subs	r5, r5, r2
 801bf70:	b2ad      	uxth	r5, r5
 801bf72:	2d00      	cmp	r5, #0
 801bf74:	bf18      	it	ne
 801bf76:	2200      	movne	r2, #0
 801bf78:	9201      	str	r2, [sp, #4]
 801bf7a:	e744      	b.n	801be06 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 801bf7c:	4b03      	ldr	r3, [pc, #12]	; (801bf8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f8>)
 801bf7e:	6818      	ldr	r0, [r3, #0]
 801bf80:	6803      	ldr	r3, [r0, #0]
 801bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf84:	4798      	blx	r3
 801bf86:	b01f      	add	sp, #124	; 0x7c
 801bf88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf8c:	20025830 	.word	0x20025830

0801bf90 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf94:	b08f      	sub	sp, #60	; 0x3c
 801bf96:	461c      	mov	r4, r3
 801bf98:	9203      	str	r2, [sp, #12]
 801bf9a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bf9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bfa0:	9202      	str	r2, [sp, #8]
 801bfa2:	460f      	mov	r7, r1
 801bfa4:	2a00      	cmp	r2, #0
 801bfa6:	f000 8128 	beq.w	801c1fa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801bfaa:	6820      	ldr	r0, [r4, #0]
 801bfac:	6861      	ldr	r1, [r4, #4]
 801bfae:	aa0a      	add	r2, sp, #40	; 0x28
 801bfb0:	c203      	stmia	r2!, {r0, r1}
 801bfb2:	6818      	ldr	r0, [r3, #0]
 801bfb4:	6859      	ldr	r1, [r3, #4]
 801bfb6:	aa0c      	add	r2, sp, #48	; 0x30
 801bfb8:	c203      	stmia	r2!, {r0, r1}
 801bfba:	a80a      	add	r0, sp, #40	; 0x28
 801bfbc:	f7f9 fb44 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bfc0:	4621      	mov	r1, r4
 801bfc2:	a80c      	add	r0, sp, #48	; 0x30
 801bfc4:	f7f9 fb68 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bfc8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801bfcc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801bfd0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801bfd4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801bfd8:	bfde      	ittt	le
 801bfda:	b2b3      	uxthle	r3, r6
 801bfdc:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801bfe0:	fb92 f3f3 	sdivle	r3, r2, r3
 801bfe4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801bfe8:	bfc8      	it	gt
 801bfea:	2301      	movgt	r3, #1
 801bfec:	fb92 f1f3 	sdiv	r1, r2, r3
 801bff0:	fa1f fc81 	uxth.w	ip, r1
 801bff4:	fb0c 2413 	mls	r4, ip, r3, r2
 801bff8:	fb14 f406 	smulbb	r4, r4, r6
 801bffc:	441d      	add	r5, r3
 801bffe:	4404      	add	r4, r0
 801c000:	4661      	mov	r1, ip
 801c002:	3d01      	subs	r5, #1
 801c004:	b2a4      	uxth	r4, r4
 801c006:	fb95 f5f3 	sdiv	r5, r5, r3
 801c00a:	b121      	cbz	r1, 801c016 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x86>
 801c00c:	9b03      	ldr	r3, [sp, #12]
 801c00e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c012:	ba1b      	rev	r3, r3
 801c014:	441f      	add	r7, r3
 801c016:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801c01a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801c01e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801c022:	4418      	add	r0, r3
 801c024:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c028:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801c02c:	441a      	add	r2, r3
 801c02e:	4b74      	ldr	r3, [pc, #464]	; (801c200 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c030:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801c034:	6818      	ldr	r0, [r3, #0]
 801c036:	6803      	ldr	r3, [r0, #0]
 801c038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c03a:	4798      	blx	r3
 801c03c:	4a71      	ldr	r2, [pc, #452]	; (801c204 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801c03e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801c042:	8813      	ldrh	r3, [r2, #0]
 801c044:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801c048:	9209      	str	r2, [sp, #36]	; 0x24
 801c04a:	fb03 c101 	mla	r1, r3, r1, ip
 801c04e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c052:	4373      	muls	r3, r6
 801c054:	b2ad      	uxth	r5, r5
 801c056:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c05a:	00ad      	lsls	r5, r5, #2
 801c05c:	2c00      	cmp	r4, #0
 801c05e:	9304      	str	r3, [sp, #16]
 801c060:	f105 0304 	add.w	r3, r5, #4
 801c064:	9305      	str	r3, [sp, #20]
 801c066:	bf0c      	ite	eq
 801c068:	46c8      	moveq	r8, r9
 801c06a:	f04f 0800 	movne.w	r8, #0
 801c06e:	2300      	movs	r3, #0
 801c070:	fa1f f888 	uxth.w	r8, r8
 801c074:	9301      	str	r3, [sp, #4]
 801c076:	9a04      	ldr	r2, [sp, #16]
 801c078:	4282      	cmp	r2, r0
 801c07a:	f240 80b9 	bls.w	801c1f0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801c07e:	b95b      	cbnz	r3, 801c098 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x108>
 801c080:	783a      	ldrb	r2, [r7, #0]
 801c082:	0993      	lsrs	r3, r2, #6
 801c084:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c088:	9201      	str	r2, [sp, #4]
 801c08a:	1e5a      	subs	r2, r3, #1
 801c08c:	2a02      	cmp	r2, #2
 801c08e:	bf8d      	iteet	hi
 801c090:	787b      	ldrbhi	r3, [r7, #1]
 801c092:	3701      	addls	r7, #1
 801c094:	b29b      	uxthls	r3, r3
 801c096:	3702      	addhi	r7, #2
 801c098:	b184      	cbz	r4, 801c0bc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801c09a:	429c      	cmp	r4, r3
 801c09c:	bf95      	itete	ls
 801c09e:	1b1c      	subls	r4, r3, r4
 801c0a0:	1ae4      	subhi	r4, r4, r3
 801c0a2:	fa1f fa84 	uxthls.w	sl, r4
 801c0a6:	b2a4      	uxthhi	r4, r4
 801c0a8:	bf87      	ittee	hi
 801c0aa:	46c4      	movhi	ip, r8
 801c0ac:	f04f 0a00 	movhi.w	sl, #0
 801c0b0:	fa1f fc89 	uxthls.w	ip, r9
 801c0b4:	2400      	movls	r4, #0
 801c0b6:	4653      	mov	r3, sl
 801c0b8:	46e0      	mov	r8, ip
 801c0ba:	e7dc      	b.n	801c076 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe6>
 801c0bc:	2204      	movs	r2, #4
 801c0be:	4615      	mov	r5, r2
 801c0c0:	9905      	ldr	r1, [sp, #20]
 801c0c2:	9a01      	ldr	r2, [sp, #4]
 801c0c4:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c0c8:	9903      	ldr	r1, [sp, #12]
 801c0ca:	588a      	ldr	r2, [r1, r2]
 801c0cc:	4543      	cmp	r3, r8
 801c0ce:	bf27      	ittee	cs
 801c0d0:	eba3 0a08 	subcs.w	sl, r3, r8
 801c0d4:	46c6      	movcs	lr, r8
 801c0d6:	eba8 0c03 	subcc.w	ip, r8, r3
 801c0da:	469e      	movcc	lr, r3
 801c0dc:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801c0e0:	bf27      	ittee	cs
 801c0e2:	fa1f fa8a 	uxthcs.w	sl, sl
 801c0e6:	46a4      	movcs	ip, r4
 801c0e8:	fa1f fc8c 	uxthcc.w	ip, ip
 801c0ec:	46a2      	movcc	sl, r4
 801c0ee:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801c0f2:	2900      	cmp	r1, #0
 801c0f4:	d066      	beq.n	801c1c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801c0f6:	29ff      	cmp	r1, #255	; 0xff
 801c0f8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801c0fc:	d114      	bne.n	801c128 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801c0fe:	9d02      	ldr	r5, [sp, #8]
 801c100:	2dff      	cmp	r5, #255	; 0xff
 801c102:	d111      	bne.n	801c128 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801c104:	0951      	lsrs	r1, r2, #5
 801c106:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c10a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c10e:	f026 0607 	bic.w	r6, r6, #7
 801c112:	430e      	orrs	r6, r1
 801c114:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c118:	4316      	orrs	r6, r2
 801c11a:	b2b6      	uxth	r6, r6
 801c11c:	4486      	add	lr, r0
 801c11e:	4586      	cmp	lr, r0
 801c120:	d051      	beq.n	801c1c6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801c122:	f820 6b02 	strh.w	r6, [r0], #2
 801c126:	e7fa      	b.n	801c11e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801c128:	9d02      	ldr	r5, [sp, #8]
 801c12a:	4369      	muls	r1, r5
 801c12c:	1c4d      	adds	r5, r1, #1
 801c12e:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801c132:	122d      	asrs	r5, r5, #8
 801c134:	ea6f 0b05 	mvn.w	fp, r5
 801c138:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801c13c:	b2ad      	uxth	r5, r5
 801c13e:	b2f6      	uxtb	r6, r6
 801c140:	b2d2      	uxtb	r2, r2
 801c142:	fb11 f105 	smulbb	r1, r1, r5
 801c146:	fb16 f605 	smulbb	r6, r6, r5
 801c14a:	fb12 f205 	smulbb	r2, r2, r5
 801c14e:	b289      	uxth	r1, r1
 801c150:	b2b6      	uxth	r6, r6
 801c152:	b292      	uxth	r2, r2
 801c154:	9106      	str	r1, [sp, #24]
 801c156:	9607      	str	r6, [sp, #28]
 801c158:	9208      	str	r2, [sp, #32]
 801c15a:	4486      	add	lr, r0
 801c15c:	fa5f fb8b 	uxtb.w	fp, fp
 801c160:	4586      	cmp	lr, r0
 801c162:	d030      	beq.n	801c1c6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801c164:	8802      	ldrh	r2, [r0, #0]
 801c166:	9906      	ldr	r1, [sp, #24]
 801c168:	1216      	asrs	r6, r2, #8
 801c16a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c16e:	10d5      	asrs	r5, r2, #3
 801c170:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801c174:	fb06 160b 	mla	r6, r6, fp, r1
 801c178:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c17c:	9907      	ldr	r1, [sp, #28]
 801c17e:	00d2      	lsls	r2, r2, #3
 801c180:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801c184:	fb05 150b 	mla	r5, r5, fp, r1
 801c188:	b2d2      	uxtb	r2, r2
 801c18a:	9908      	ldr	r1, [sp, #32]
 801c18c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c190:	b2b6      	uxth	r6, r6
 801c192:	fb02 120b 	mla	r2, r2, fp, r1
 801c196:	b292      	uxth	r2, r2
 801c198:	1c71      	adds	r1, r6, #1
 801c19a:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801c19e:	1c51      	adds	r1, r2, #1
 801c1a0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c1a4:	b2ad      	uxth	r5, r5
 801c1a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c1aa:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c1ae:	4316      	orrs	r6, r2
 801c1b0:	1c6a      	adds	r2, r5, #1
 801c1b2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801c1b6:	096d      	lsrs	r5, r5, #5
 801c1b8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c1bc:	432e      	orrs	r6, r5
 801c1be:	f820 6b02 	strh.w	r6, [r0], #2
 801c1c2:	e7cd      	b.n	801c160 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801c1c4:	4470      	add	r0, lr
 801c1c6:	4543      	cmp	r3, r8
 801c1c8:	f4ff af75 	bcc.w	801c0b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 801c1cc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801c1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1d2:	fa1f fc89 	uxth.w	ip, r9
 801c1d6:	eba4 040c 	sub.w	r4, r4, ip
 801c1da:	881b      	ldrh	r3, [r3, #0]
 801c1dc:	b2a4      	uxth	r4, r4
 801c1de:	2c00      	cmp	r4, #0
 801c1e0:	eba3 0309 	sub.w	r3, r3, r9
 801c1e4:	bf18      	it	ne
 801c1e6:	f04f 0c00 	movne.w	ip, #0
 801c1ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c1ee:	e762      	b.n	801c0b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 801c1f0:	4b03      	ldr	r3, [pc, #12]	; (801c200 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c1f2:	6818      	ldr	r0, [r3, #0]
 801c1f4:	6803      	ldr	r3, [r0, #0]
 801c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1f8:	4798      	blx	r3
 801c1fa:	b00f      	add	sp, #60	; 0x3c
 801c1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c200:	20025830 	.word	0x20025830
 801c204:	2002582a 	.word	0x2002582a

0801c208 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c20c:	b093      	sub	sp, #76	; 0x4c
 801c20e:	461c      	mov	r4, r3
 801c210:	9205      	str	r2, [sp, #20]
 801c212:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801c216:	9101      	str	r1, [sp, #4]
 801c218:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c21a:	9202      	str	r2, [sp, #8]
 801c21c:	2a00      	cmp	r2, #0
 801c21e:	f000 812c 	beq.w	801c47a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801c222:	6820      	ldr	r0, [r4, #0]
 801c224:	6861      	ldr	r1, [r4, #4]
 801c226:	aa0e      	add	r2, sp, #56	; 0x38
 801c228:	c203      	stmia	r2!, {r0, r1}
 801c22a:	6818      	ldr	r0, [r3, #0]
 801c22c:	6859      	ldr	r1, [r3, #4]
 801c22e:	aa10      	add	r2, sp, #64	; 0x40
 801c230:	c203      	stmia	r2!, {r0, r1}
 801c232:	a80e      	add	r0, sp, #56	; 0x38
 801c234:	f7f9 fa08 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c238:	4621      	mov	r1, r4
 801c23a:	a810      	add	r0, sp, #64	; 0x40
 801c23c:	f7f9 fa2c 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c240:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801c244:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801c248:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801c24c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c250:	bfde      	ittt	le
 801c252:	b2b3      	uxthle	r3, r6
 801c254:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801c258:	fb92 f3f3 	sdivle	r3, r2, r3
 801c25c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801c260:	bfc8      	it	gt
 801c262:	2301      	movgt	r3, #1
 801c264:	fb92 f1f3 	sdiv	r1, r2, r3
 801c268:	fa1f fc81 	uxth.w	ip, r1
 801c26c:	fb0c 2413 	mls	r4, ip, r3, r2
 801c270:	fb14 f406 	smulbb	r4, r4, r6
 801c274:	441d      	add	r5, r3
 801c276:	4404      	add	r4, r0
 801c278:	4661      	mov	r1, ip
 801c27a:	3d01      	subs	r5, #1
 801c27c:	b2a4      	uxth	r4, r4
 801c27e:	fb95 f5f3 	sdiv	r5, r5, r3
 801c282:	b131      	cbz	r1, 801c292 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x8a>
 801c284:	9b05      	ldr	r3, [sp, #20]
 801c286:	9901      	ldr	r1, [sp, #4]
 801c288:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c28c:	ba1b      	rev	r3, r3
 801c28e:	4419      	add	r1, r3
 801c290:	9101      	str	r1, [sp, #4]
 801c292:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c296:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c29a:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 801c29e:	4418      	add	r0, r3
 801c2a0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801c2a4:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801c2a8:	441a      	add	r2, r3
 801c2aa:	4b75      	ldr	r3, [pc, #468]	; (801c480 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801c2ac:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801c2b0:	6818      	ldr	r0, [r3, #0]
 801c2b2:	6803      	ldr	r3, [r0, #0]
 801c2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2b6:	4798      	blx	r3
 801c2b8:	4972      	ldr	r1, [pc, #456]	; (801c484 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801c2ba:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 801c2be:	880b      	ldrh	r3, [r1, #0]
 801c2c0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801c2c4:	910d      	str	r1, [sp, #52]	; 0x34
 801c2c6:	fb03 c202 	mla	r2, r3, r2, ip
 801c2ca:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c2ce:	4373      	muls	r3, r6
 801c2d0:	b2ad      	uxth	r5, r5
 801c2d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c2d6:	00ad      	lsls	r5, r5, #2
 801c2d8:	9308      	str	r3, [sp, #32]
 801c2da:	1d2b      	adds	r3, r5, #4
 801c2dc:	9309      	str	r3, [sp, #36]	; 0x24
 801c2de:	9b02      	ldr	r3, [sp, #8]
 801c2e0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c2e4:	9106      	str	r1, [sp, #24]
 801c2e6:	43da      	mvns	r2, r3
 801c2e8:	2c00      	cmp	r4, #0
 801c2ea:	bf0c      	ite	eq
 801c2ec:	46dc      	moveq	ip, fp
 801c2ee:	f04f 0c00 	movne.w	ip, #0
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	b2d2      	uxtb	r2, r2
 801c2f6:	fa1f fc8c 	uxth.w	ip, ip
 801c2fa:	9303      	str	r3, [sp, #12]
 801c2fc:	9207      	str	r2, [sp, #28]
 801c2fe:	9a08      	ldr	r2, [sp, #32]
 801c300:	4282      	cmp	r2, r0
 801c302:	f240 80b5 	bls.w	801c470 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801c306:	b963      	cbnz	r3, 801c322 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801c308:	9b01      	ldr	r3, [sp, #4]
 801c30a:	781a      	ldrb	r2, [r3, #0]
 801c30c:	0993      	lsrs	r3, r2, #6
 801c30e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c312:	9203      	str	r2, [sp, #12]
 801c314:	1e5a      	subs	r2, r3, #1
 801c316:	2a02      	cmp	r2, #2
 801c318:	d815      	bhi.n	801c346 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 801c31a:	9a01      	ldr	r2, [sp, #4]
 801c31c:	3201      	adds	r2, #1
 801c31e:	9201      	str	r2, [sp, #4]
 801c320:	b29b      	uxth	r3, r3
 801c322:	b1b4      	cbz	r4, 801c352 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 801c324:	429c      	cmp	r4, r3
 801c326:	bf95      	itete	ls
 801c328:	1b1c      	subls	r4, r3, r4
 801c32a:	1ae4      	subhi	r4, r4, r3
 801c32c:	fa1f f884 	uxthls.w	r8, r4
 801c330:	b2a4      	uxthhi	r4, r4
 801c332:	bf87      	ittee	hi
 801c334:	4666      	movhi	r6, ip
 801c336:	f04f 0800 	movhi.w	r8, #0
 801c33a:	fa1f f68b 	uxthls.w	r6, fp
 801c33e:	2400      	movls	r4, #0
 801c340:	4643      	mov	r3, r8
 801c342:	46b4      	mov	ip, r6
 801c344:	e7db      	b.n	801c2fe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801c346:	9a01      	ldr	r2, [sp, #4]
 801c348:	9b01      	ldr	r3, [sp, #4]
 801c34a:	3202      	adds	r2, #2
 801c34c:	785b      	ldrb	r3, [r3, #1]
 801c34e:	9201      	str	r2, [sp, #4]
 801c350:	e7e7      	b.n	801c322 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801c352:	2203      	movs	r2, #3
 801c354:	4615      	mov	r5, r2
 801c356:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c358:	9a03      	ldr	r2, [sp, #12]
 801c35a:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c35e:	9905      	ldr	r1, [sp, #20]
 801c360:	4563      	cmp	r3, ip
 801c362:	eb01 0502 	add.w	r5, r1, r2
 801c366:	9902      	ldr	r1, [sp, #8]
 801c368:	bf29      	itett	cs
 801c36a:	eba3 080c 	subcs.w	r8, r3, ip
 801c36e:	ebac 0603 	subcc.w	r6, ip, r3
 801c372:	fa1f f888 	uxthcs.w	r8, r8
 801c376:	46e1      	movcs	r9, ip
 801c378:	bf2f      	iteee	cs
 801c37a:	4626      	movcs	r6, r4
 801c37c:	b2b6      	uxthcc	r6, r6
 801c37e:	4699      	movcc	r9, r3
 801c380:	46a0      	movcc	r8, r4
 801c382:	29ff      	cmp	r1, #255	; 0xff
 801c384:	d04a      	beq.n	801c41c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x214>
 801c386:	9f06      	ldr	r7, [sp, #24]
 801c388:	78a9      	ldrb	r1, [r5, #2]
 801c38a:	9004      	str	r0, [sp, #16]
 801c38c:	4379      	muls	r1, r7
 801c38e:	910a      	str	r1, [sp, #40]	; 0x28
 801c390:	7869      	ldrb	r1, [r5, #1]
 801c392:	4379      	muls	r1, r7
 801c394:	910b      	str	r1, [sp, #44]	; 0x2c
 801c396:	9905      	ldr	r1, [sp, #20]
 801c398:	5c8a      	ldrb	r2, [r1, r2]
 801c39a:	437a      	muls	r2, r7
 801c39c:	920c      	str	r2, [sp, #48]	; 0x30
 801c39e:	46ca      	mov	sl, r9
 801c3a0:	f1ba 0f00 	cmp.w	sl, #0
 801c3a4:	d03d      	beq.n	801c422 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 801c3a6:	9a04      	ldr	r2, [sp, #16]
 801c3a8:	9f07      	ldr	r7, [sp, #28]
 801c3aa:	8812      	ldrh	r2, [r2, #0]
 801c3ac:	1215      	asrs	r5, r2, #8
 801c3ae:	46be      	mov	lr, r7
 801c3b0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c3b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c3b6:	10d1      	asrs	r1, r2, #3
 801c3b8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801c3bc:	fb05 750e 	mla	r5, r5, lr, r7
 801c3c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c3c4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c3c6:	00d2      	lsls	r2, r2, #3
 801c3c8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801c3cc:	fb01 710e 	mla	r1, r1, lr, r7
 801c3d0:	b2d2      	uxtb	r2, r2
 801c3d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c3d4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c3d8:	b2ad      	uxth	r5, r5
 801c3da:	fb02 720e 	mla	r2, r2, lr, r7
 801c3de:	b292      	uxth	r2, r2
 801c3e0:	f105 0e01 	add.w	lr, r5, #1
 801c3e4:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801c3e8:	f102 0e01 	add.w	lr, r2, #1
 801c3ec:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801c3f0:	b289      	uxth	r1, r1
 801c3f2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c3f6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c3fa:	4315      	orrs	r5, r2
 801c3fc:	1c4a      	adds	r2, r1, #1
 801c3fe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c402:	0949      	lsrs	r1, r1, #5
 801c404:	9a04      	ldr	r2, [sp, #16]
 801c406:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c40a:	430d      	orrs	r5, r1
 801c40c:	f822 5b02 	strh.w	r5, [r2], #2
 801c410:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c414:	9204      	str	r2, [sp, #16]
 801c416:	fa1f fa8a 	uxth.w	sl, sl
 801c41a:	e7c1      	b.n	801c3a0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801c41c:	4649      	mov	r1, r9
 801c41e:	4686      	mov	lr, r0
 801c420:	b999      	cbnz	r1, 801c44a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 801c422:	4563      	cmp	r3, ip
 801c424:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801c428:	d38a      	bcc.n	801c340 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801c42a:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 801c42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c430:	fa1f f68b 	uxth.w	r6, fp
 801c434:	1ba4      	subs	r4, r4, r6
 801c436:	881b      	ldrh	r3, [r3, #0]
 801c438:	b2a4      	uxth	r4, r4
 801c43a:	2c00      	cmp	r4, #0
 801c43c:	eba3 030b 	sub.w	r3, r3, fp
 801c440:	bf18      	it	ne
 801c442:	2600      	movne	r6, #0
 801c444:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c448:	e77a      	b.n	801c340 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801c44a:	78aa      	ldrb	r2, [r5, #2]
 801c44c:	4f0e      	ldr	r7, [pc, #56]	; (801c488 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801c44e:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801c452:	786a      	ldrb	r2, [r5, #1]
 801c454:	00d2      	lsls	r2, r2, #3
 801c456:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c45a:	ea4a 0202 	orr.w	r2, sl, r2
 801c45e:	f895 a000 	ldrb.w	sl, [r5]
 801c462:	3901      	subs	r1, #1
 801c464:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801c468:	f82e 2b02 	strh.w	r2, [lr], #2
 801c46c:	b289      	uxth	r1, r1
 801c46e:	e7d7      	b.n	801c420 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801c470:	4b03      	ldr	r3, [pc, #12]	; (801c480 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801c472:	6818      	ldr	r0, [r3, #0]
 801c474:	6803      	ldr	r3, [r0, #0]
 801c476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c478:	4798      	blx	r3
 801c47a:	b013      	add	sp, #76	; 0x4c
 801c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c480:	20025830 	.word	0x20025830
 801c484:	2002582a 	.word	0x2002582a
 801c488:	fffff800 	.word	0xfffff800

0801c48c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c490:	b09d      	sub	sp, #116	; 0x74
 801c492:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 801c496:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 801c49a:	920e      	str	r2, [sp, #56]	; 0x38
 801c49c:	461c      	mov	r4, r3
 801c49e:	4683      	mov	fp, r0
 801c4a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c4a2:	2a00      	cmp	r2, #0
 801c4a4:	f000 81e0 	beq.w	801c868 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3dc>
 801c4a8:	6820      	ldr	r0, [r4, #0]
 801c4aa:	6861      	ldr	r1, [r4, #4]
 801c4ac:	aa18      	add	r2, sp, #96	; 0x60
 801c4ae:	c203      	stmia	r2!, {r0, r1}
 801c4b0:	6818      	ldr	r0, [r3, #0]
 801c4b2:	6859      	ldr	r1, [r3, #4]
 801c4b4:	aa1a      	add	r2, sp, #104	; 0x68
 801c4b6:	c203      	stmia	r2!, {r0, r1}
 801c4b8:	a818      	add	r0, sp, #96	; 0x60
 801c4ba:	f7f9 f8c5 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c4be:	4621      	mov	r1, r4
 801c4c0:	a81a      	add	r0, sp, #104	; 0x68
 801c4c2:	f7f9 f8e9 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c4c6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801c4ca:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 801c4ce:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801c4d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c4d6:	bfd7      	itett	le
 801c4d8:	b29a      	uxthle	r2, r3
 801c4da:	2201      	movgt	r2, #1
 801c4dc:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801c4e0:	fb91 f2f2 	sdivle	r2, r1, r2
 801c4e4:	9202      	str	r2, [sp, #8]
 801c4e6:	9802      	ldr	r0, [sp, #8]
 801c4e8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801c4ec:	fb92 f0f0 	sdiv	r0, r2, r0
 801c4f0:	b280      	uxth	r0, r0
 801c4f2:	900f      	str	r0, [sp, #60]	; 0x3c
 801c4f4:	9902      	ldr	r1, [sp, #8]
 801c4f6:	9802      	ldr	r0, [sp, #8]
 801c4f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c4fa:	440c      	add	r4, r1
 801c4fc:	fb05 2510 	mls	r5, r5, r0, r2
 801c500:	fb15 f503 	smulbb	r5, r5, r3
 801c504:	3c01      	subs	r4, #1
 801c506:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801c50a:	fb94 f4f1 	sdiv	r4, r4, r1
 801c50e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 801c512:	440d      	add	r5, r1
 801c514:	4419      	add	r1, r3
 801c516:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801c51a:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 801c51e:	441a      	add	r2, r3
 801c520:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801c524:	9306      	str	r3, [sp, #24]
 801c526:	4bb3      	ldr	r3, [pc, #716]	; (801c7f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801c528:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 801c52c:	6818      	ldr	r0, [r3, #0]
 801c52e:	6803      	ldr	r3, [r0, #0]
 801c530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c532:	4798      	blx	r3
 801c534:	4bb0      	ldr	r3, [pc, #704]	; (801c7f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801c536:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801c53a:	881a      	ldrh	r2, [r3, #0]
 801c53c:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 801c540:	9316      	str	r3, [sp, #88]	; 0x58
 801c542:	fb02 7101 	mla	r1, r2, r1, r7
 801c546:	3401      	adds	r4, #1
 801c548:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801c54c:	b2a4      	uxth	r4, r4
 801c54e:	4356      	muls	r6, r2
 801c550:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801c554:	00a4      	lsls	r4, r4, #2
 801c556:	920a      	str	r2, [sp, #40]	; 0x28
 801c558:	1d22      	adds	r2, r4, #4
 801c55a:	b2ad      	uxth	r5, r5
 801c55c:	9213      	str	r2, [sp, #76]	; 0x4c
 801c55e:	4ba7      	ldr	r3, [pc, #668]	; (801c7fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801c560:	9a06      	ldr	r2, [sp, #24]
 801c562:	2d00      	cmp	r5, #0
 801c564:	bf0c      	ite	eq
 801c566:	4611      	moveq	r1, r2
 801c568:	2100      	movne	r1, #0
 801c56a:	2200      	movs	r2, #0
 801c56c:	eba3 030b 	sub.w	r3, r3, fp
 801c570:	b289      	uxth	r1, r1
 801c572:	920d      	str	r2, [sp, #52]	; 0x34
 801c574:	9317      	str	r3, [sp, #92]	; 0x5c
 801c576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c57a:	fa12 f383 	uxtah	r3, r2, r3
 801c57e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c580:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c584:	3304      	adds	r3, #4
 801c586:	9308      	str	r3, [sp, #32]
 801c588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c58a:	4543      	cmp	r3, r8
 801c58c:	f240 8167 	bls.w	801c85e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d2>
 801c590:	9a02      	ldr	r2, [sp, #8]
 801c592:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c596:	fbb5 f3f3 	udiv	r3, r5, r3
 801c59a:	1ad3      	subs	r3, r2, r3
 801c59c:	b29b      	uxth	r3, r3
 801c59e:	9314      	str	r3, [sp, #80]	; 0x50
 801c5a0:	9b08      	ldr	r3, [sp, #32]
 801c5a2:	9808      	ldr	r0, [sp, #32]
 801c5a4:	785a      	ldrb	r2, [r3, #1]
 801c5a6:	789b      	ldrb	r3, [r3, #2]
 801c5a8:	7800      	ldrb	r0, [r0, #0]
 801c5aa:	9010      	str	r0, [sp, #64]	; 0x40
 801c5ac:	021b      	lsls	r3, r3, #8
 801c5ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c5b2:	9a08      	ldr	r2, [sp, #32]
 801c5b4:	78d2      	ldrb	r2, [r2, #3]
 801c5b6:	4313      	orrs	r3, r2
 801c5b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c5ba:	3001      	adds	r0, #1
 801c5bc:	441a      	add	r2, r3
 801c5be:	9007      	str	r0, [sp, #28]
 801c5c0:	1c50      	adds	r0, r2, #1
 801c5c2:	9005      	str	r0, [sp, #20]
 801c5c4:	7852      	ldrb	r2, [r2, #1]
 801c5c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c5c8:	0212      	lsls	r2, r2, #8
 801c5ca:	5cc3      	ldrb	r3, [r0, r3]
 801c5cc:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801c5d0:	431a      	orrs	r2, r3
 801c5d2:	b293      	uxth	r3, r2
 801c5d4:	930b      	str	r3, [sp, #44]	; 0x2c
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	9309      	str	r3, [sp, #36]	; 0x24
 801c5da:	2301      	movs	r3, #1
 801c5dc:	9301      	str	r3, [sp, #4]
 801c5de:	9304      	str	r3, [sp, #16]
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 801c5e6:	9303      	str	r3, [sp, #12]
 801c5e8:	f04f 0e01 	mov.w	lr, #1
 801c5ec:	2d00      	cmp	r5, #0
 801c5ee:	d07c      	beq.n	801c6ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c5f0:	45ae      	cmp	lr, r5
 801c5f2:	d26b      	bcs.n	801c6cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801c5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5f6:	eba5 050e 	sub.w	r5, r5, lr
 801c5fa:	4543      	cmp	r3, r8
 801c5fc:	b2ad      	uxth	r5, r5
 801c5fe:	460c      	mov	r4, r1
 801c600:	d802      	bhi.n	801c608 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 801c602:	e070      	b.n	801c6e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801c604:	2b00      	cmp	r3, #0
 801c606:	d15c      	bne.n	801c6c2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801c608:	9b05      	ldr	r3, [sp, #20]
 801c60a:	9a04      	ldr	r2, [sp, #16]
 801c60c:	785b      	ldrb	r3, [r3, #1]
 801c60e:	9904      	ldr	r1, [sp, #16]
 801c610:	f1c2 0207 	rsb	r2, r2, #7
 801c614:	4093      	lsls	r3, r2
 801c616:	005b      	lsls	r3, r3, #1
 801c618:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801c61c:	9b05      	ldr	r3, [sp, #20]
 801c61e:	781b      	ldrb	r3, [r3, #0]
 801c620:	410b      	asrs	r3, r1
 801c622:	3101      	adds	r1, #1
 801c624:	b2c9      	uxtb	r1, r1
 801c626:	2908      	cmp	r1, #8
 801c628:	9104      	str	r1, [sp, #16]
 801c62a:	9905      	ldr	r1, [sp, #20]
 801c62c:	bf0a      	itet	eq
 801c62e:	3102      	addeq	r1, #2
 801c630:	3101      	addne	r1, #1
 801c632:	9105      	streq	r1, [sp, #20]
 801c634:	b2db      	uxtb	r3, r3
 801c636:	bf0a      	itet	eq
 801c638:	2100      	moveq	r1, #0
 801c63a:	9105      	strne	r1, [sp, #20]
 801c63c:	9104      	streq	r1, [sp, #16]
 801c63e:	4313      	orrs	r3, r2
 801c640:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c642:	b29a      	uxth	r2, r3
 801c644:	4291      	cmp	r1, r2
 801c646:	d30a      	bcc.n	801c65e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801c648:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 801c64c:	2301      	movs	r3, #1
 801c64e:	9907      	ldr	r1, [sp, #28]
 801c650:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801c654:	d30f      	bcc.n	801c676 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801c656:	2100      	movs	r1, #0
 801c658:	9301      	str	r3, [sp, #4]
 801c65a:	9103      	str	r1, [sp, #12]
 801c65c:	e032      	b.n	801c6c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 801c65e:	9b07      	ldr	r3, [sp, #28]
 801c660:	429a      	cmp	r2, r3
 801c662:	d318      	bcc.n	801c696 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c664:	9b01      	ldr	r3, [sp, #4]
 801c666:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 801c66a:	445b      	add	r3, fp
 801c66c:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801c670:	9b01      	ldr	r3, [sp, #4]
 801c672:	3301      	adds	r3, #1
 801c674:	b29b      	uxth	r3, r3
 801c676:	9907      	ldr	r1, [sp, #28]
 801c678:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 801c67c:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801c680:	7108      	strb	r0, [r1, #4]
 801c682:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c684:	80c8      	strh	r0, [r1, #6]
 801c686:	9801      	ldr	r0, [sp, #4]
 801c688:	3001      	adds	r0, #1
 801c68a:	7148      	strb	r0, [r1, #5]
 801c68c:	9907      	ldr	r1, [sp, #28]
 801c68e:	3101      	adds	r1, #1
 801c690:	b289      	uxth	r1, r1
 801c692:	9107      	str	r1, [sp, #28]
 801c694:	e7df      	b.n	801c656 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801c696:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801c69a:	4611      	mov	r1, r2
 801c69c:	795b      	ldrb	r3, [r3, #5]
 801c69e:	f603 0004 	addw	r0, r3, #2052	; 0x804
 801c6a2:	4458      	add	r0, fp
 801c6a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c6a6:	4406      	add	r6, r0
 801c6a8:	2e00      	cmp	r6, #0
 801c6aa:	dd06      	ble.n	801c6ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 801c6ac:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801c6b0:	790e      	ldrb	r6, [r1, #4]
 801c6b2:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801c6b6:	88c9      	ldrh	r1, [r1, #6]
 801c6b8:	e7f4      	b.n	801c6a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 801c6ba:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 801c6be:	b29b      	uxth	r3, r3
 801c6c0:	e7c5      	b.n	801c64e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 801c6c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c6c4:	920b      	str	r2, [sp, #44]	; 0x2c
 801c6c6:	4621      	mov	r1, r4
 801c6c8:	469e      	mov	lr, r3
 801c6ca:	e78f      	b.n	801c5ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 801c6cc:	9a03      	ldr	r2, [sp, #12]
 801c6ce:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801c6d2:	442a      	add	r2, r5
 801c6d4:	ebae 0305 	sub.w	r3, lr, r5
 801c6d8:	b292      	uxth	r2, r2
 801c6da:	b29b      	uxth	r3, r3
 801c6dc:	9203      	str	r2, [sp, #12]
 801c6de:	2500      	movs	r5, #0
 801c6e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c6e2:	4542      	cmp	r2, r8
 801c6e4:	d88e      	bhi.n	801c604 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 801c6e6:	4621      	mov	r1, r4
 801c6e8:	e74e      	b.n	801c588 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801c6ea:	458e      	cmp	lr, r1
 801c6ec:	bf29      	itett	cs
 801c6ee:	ebae 0301 	subcs.w	r3, lr, r1
 801c6f2:	eba1 040e 	subcc.w	r4, r1, lr
 801c6f6:	b29b      	uxthcs	r3, r3
 801c6f8:	910c      	strcs	r1, [sp, #48]	; 0x30
 801c6fa:	bf2f      	iteee	cs
 801c6fc:	462c      	movcs	r4, r5
 801c6fe:	b2a4      	uxthcc	r4, r4
 801c700:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 801c704:	462b      	movcc	r3, r5
 801c706:	f04f 0900 	mov.w	r9, #0
 801c70a:	9a03      	ldr	r2, [sp, #12]
 801c70c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c70e:	444a      	add	r2, r9
 801c710:	4548      	cmp	r0, r9
 801c712:	b292      	uxth	r2, r2
 801c714:	d074      	beq.n	801c800 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>
 801c716:	445a      	add	r2, fp
 801c718:	2004      	movs	r0, #4
 801c71a:	4605      	mov	r5, r0
 801c71c:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801c720:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c722:	fb15 0202 	smlabb	r2, r5, r2, r0
 801c726:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c728:	5880      	ldr	r0, [r0, r2]
 801c72a:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801c72e:	d014      	beq.n	801c75a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 801c730:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c734:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801c738:	d112      	bne.n	801c760 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 801c73a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c73c:	2aff      	cmp	r2, #255	; 0xff
 801c73e:	d10f      	bne.n	801c760 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 801c740:	0942      	lsrs	r2, r0, #5
 801c742:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801c746:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c74a:	f025 0507 	bic.w	r5, r5, #7
 801c74e:	4315      	orrs	r5, r2
 801c750:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c754:	4305      	orrs	r5, r0
 801c756:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801c75a:	f109 0901 	add.w	r9, r9, #1
 801c75e:	e7d4      	b.n	801c70a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x27e>
 801c760:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801c764:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c768:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 801c76c:	9215      	str	r2, [sp, #84]	; 0x54
 801c76e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c770:	fb02 fa0a 	mul.w	sl, r2, sl
 801c774:	f10a 0201 	add.w	r2, sl, #1
 801c778:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801c77c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c780:	1212      	asrs	r2, r2, #8
 801c782:	fa1f fa82 	uxth.w	sl, r2
 801c786:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801c78a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c78e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c792:	43d2      	mvns	r2, r2
 801c794:	b2d2      	uxtb	r2, r2
 801c796:	fb16 f60a 	smulbb	r6, r6, sl
 801c79a:	fa5f fc8c 	uxtb.w	ip, ip
 801c79e:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801c7a2:	b2c0      	uxtb	r0, r0
 801c7a4:	fb07 6702 	mla	r7, r7, r2, r6
 801c7a8:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801c7ac:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c7ae:	fb10 f00a 	smulbb	r0, r0, sl
 801c7b2:	fb0c 0002 	mla	r0, ip, r2, r0
 801c7b6:	b2ed      	uxtb	r5, r5
 801c7b8:	b2bf      	uxth	r7, r7
 801c7ba:	fb15 f50a 	smulbb	r5, r5, sl
 801c7be:	b280      	uxth	r0, r0
 801c7c0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801c7c4:	fb06 5602 	mla	r6, r6, r2, r5
 801c7c8:	1c7a      	adds	r2, r7, #1
 801c7ca:	1c45      	adds	r5, r0, #1
 801c7cc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c7d0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c7d4:	b2b6      	uxth	r6, r6
 801c7d6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c7da:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c7de:	432f      	orrs	r7, r5
 801c7e0:	1c75      	adds	r5, r6, #1
 801c7e2:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801c7e6:	096d      	lsrs	r5, r5, #5
 801c7e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c7ec:	432f      	orrs	r7, r5
 801c7ee:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801c7f2:	e7b2      	b.n	801c75a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 801c7f4:	20025830 	.word	0x20025830
 801c7f8:	2002582a 	.word	0x2002582a
 801c7fc:	fffff7fb 	.word	0xfffff7fb
 801c800:	9203      	str	r2, [sp, #12]
 801c802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c804:	458e      	cmp	lr, r1
 801c806:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801c80a:	f4ff af68 	bcc.w	801c6de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 801c80e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c810:	9906      	ldr	r1, [sp, #24]
 801c812:	8812      	ldrh	r2, [r2, #0]
 801c814:	1a52      	subs	r2, r2, r1
 801c816:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801c81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c81c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c81e:	3201      	adds	r2, #1
 801c820:	428a      	cmp	r2, r1
 801c822:	9209      	str	r2, [sp, #36]	; 0x24
 801c824:	d111      	bne.n	801c84a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3be>
 801c826:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801c82a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801c82e:	9b06      	ldr	r3, [sp, #24]
 801c830:	eba5 0509 	sub.w	r5, r5, r9
 801c834:	b2ad      	uxth	r5, r5
 801c836:	2d00      	cmp	r5, #0
 801c838:	bf08      	it	eq
 801c83a:	4619      	moveq	r1, r3
 801c83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c83e:	bf18      	it	ne
 801c840:	2100      	movne	r1, #0
 801c842:	3301      	adds	r3, #1
 801c844:	930d      	str	r3, [sp, #52]	; 0x34
 801c846:	b289      	uxth	r1, r1
 801c848:	e695      	b.n	801c576 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801c84a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801c84e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801c852:	1b2d      	subs	r5, r5, r4
 801c854:	b2ad      	uxth	r5, r5
 801c856:	2d00      	cmp	r5, #0
 801c858:	bf18      	it	ne
 801c85a:	2400      	movne	r4, #0
 801c85c:	e740      	b.n	801c6e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 801c85e:	4b04      	ldr	r3, [pc, #16]	; (801c870 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 801c860:	6818      	ldr	r0, [r3, #0]
 801c862:	6803      	ldr	r3, [r0, #0]
 801c864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c866:	4798      	blx	r3
 801c868:	b01d      	add	sp, #116	; 0x74
 801c86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c86e:	bf00      	nop
 801c870:	20025830 	.word	0x20025830

0801c874 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c878:	b09f      	sub	sp, #124	; 0x7c
 801c87a:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801c87e:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801c882:	920a      	str	r2, [sp, #40]	; 0x28
 801c884:	461d      	mov	r5, r3
 801c886:	4604      	mov	r4, r0
 801c888:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c88a:	2a00      	cmp	r2, #0
 801c88c:	f000 81fa 	beq.w	801cc84 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x410>
 801c890:	6828      	ldr	r0, [r5, #0]
 801c892:	6869      	ldr	r1, [r5, #4]
 801c894:	aa1a      	add	r2, sp, #104	; 0x68
 801c896:	c203      	stmia	r2!, {r0, r1}
 801c898:	6818      	ldr	r0, [r3, #0]
 801c89a:	6859      	ldr	r1, [r3, #4]
 801c89c:	aa1c      	add	r2, sp, #112	; 0x70
 801c89e:	c203      	stmia	r2!, {r0, r1}
 801c8a0:	a81a      	add	r0, sp, #104	; 0x68
 801c8a2:	f7f8 fed1 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c8a6:	4629      	mov	r1, r5
 801c8a8:	a81c      	add	r0, sp, #112	; 0x70
 801c8aa:	f7f8 fef5 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c8ae:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801c8b2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801c8b6:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 801c8ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c8be:	bfd7      	itett	le
 801c8c0:	b29a      	uxthle	r2, r3
 801c8c2:	2201      	movgt	r2, #1
 801c8c4:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801c8c8:	fb91 f2f2 	sdivle	r2, r1, r2
 801c8cc:	9201      	str	r2, [sp, #4]
 801c8ce:	9801      	ldr	r0, [sp, #4]
 801c8d0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801c8d4:	fb92 f0f0 	sdiv	r0, r2, r0
 801c8d8:	b280      	uxth	r0, r0
 801c8da:	9010      	str	r0, [sp, #64]	; 0x40
 801c8dc:	9901      	ldr	r1, [sp, #4]
 801c8de:	9801      	ldr	r0, [sp, #4]
 801c8e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c8e2:	440e      	add	r6, r1
 801c8e4:	fb05 2510 	mls	r5, r5, r0, r2
 801c8e8:	fb15 f503 	smulbb	r5, r5, r3
 801c8ec:	3e01      	subs	r6, #1
 801c8ee:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801c8f2:	fb96 f6f1 	sdiv	r6, r6, r1
 801c8f6:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801c8fa:	440d      	add	r5, r1
 801c8fc:	4419      	add	r1, r3
 801c8fe:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801c902:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801c906:	441a      	add	r2, r3
 801c908:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801c90c:	9304      	str	r3, [sp, #16]
 801c90e:	4b96      	ldr	r3, [pc, #600]	; (801cb68 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801c910:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801c914:	6818      	ldr	r0, [r3, #0]
 801c916:	6803      	ldr	r3, [r0, #0]
 801c918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c91a:	4798      	blx	r3
 801c91c:	4b93      	ldr	r3, [pc, #588]	; (801cb6c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801c91e:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801c922:	881a      	ldrh	r2, [r3, #0]
 801c924:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 801c928:	9318      	str	r3, [sp, #96]	; 0x60
 801c92a:	fb02 c101 	mla	r1, r2, r1, ip
 801c92e:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801c932:	4357      	muls	r7, r2
 801c934:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801c938:	3601      	adds	r6, #1
 801c93a:	920b      	str	r2, [sp, #44]	; 0x2c
 801c93c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c93e:	4b8c      	ldr	r3, [pc, #560]	; (801cb70 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801c940:	b2b6      	uxth	r6, r6
 801c942:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c946:	1d32      	adds	r2, r6, #4
 801c948:	9206      	str	r2, [sp, #24]
 801c94a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c94c:	43d2      	mvns	r2, r2
 801c94e:	b2d2      	uxtb	r2, r2
 801c950:	b2ad      	uxth	r5, r5
 801c952:	9215      	str	r2, [sp, #84]	; 0x54
 801c954:	9a04      	ldr	r2, [sp, #16]
 801c956:	2d00      	cmp	r5, #0
 801c958:	bf0c      	ite	eq
 801c95a:	4611      	moveq	r1, r2
 801c95c:	2100      	movne	r1, #0
 801c95e:	2200      	movs	r2, #0
 801c960:	1b1b      	subs	r3, r3, r4
 801c962:	b289      	uxth	r1, r1
 801c964:	920d      	str	r2, [sp, #52]	; 0x34
 801c966:	9319      	str	r3, [sp, #100]	; 0x64
 801c968:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c96c:	fa12 f383 	uxtah	r3, r2, r3
 801c970:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c972:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c976:	3304      	adds	r3, #4
 801c978:	9307      	str	r3, [sp, #28]
 801c97a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c97c:	455b      	cmp	r3, fp
 801c97e:	f240 817c 	bls.w	801cc7a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x406>
 801c982:	9a01      	ldr	r2, [sp, #4]
 801c984:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801c988:	fbb5 f3f3 	udiv	r3, r5, r3
 801c98c:	1ad3      	subs	r3, r2, r3
 801c98e:	b29b      	uxth	r3, r3
 801c990:	9316      	str	r3, [sp, #88]	; 0x58
 801c992:	9b07      	ldr	r3, [sp, #28]
 801c994:	9807      	ldr	r0, [sp, #28]
 801c996:	785a      	ldrb	r2, [r3, #1]
 801c998:	789b      	ldrb	r3, [r3, #2]
 801c99a:	7800      	ldrb	r0, [r0, #0]
 801c99c:	9011      	str	r0, [sp, #68]	; 0x44
 801c99e:	021b      	lsls	r3, r3, #8
 801c9a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c9a4:	9a07      	ldr	r2, [sp, #28]
 801c9a6:	78d2      	ldrb	r2, [r2, #3]
 801c9a8:	4313      	orrs	r3, r2
 801c9aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c9ac:	3001      	adds	r0, #1
 801c9ae:	441a      	add	r2, r3
 801c9b0:	9005      	str	r0, [sp, #20]
 801c9b2:	1c50      	adds	r0, r2, #1
 801c9b4:	9003      	str	r0, [sp, #12]
 801c9b6:	7852      	ldrb	r2, [r2, #1]
 801c9b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c9ba:	0212      	lsls	r2, r2, #8
 801c9bc:	5cc3      	ldrb	r3, [r0, r3]
 801c9be:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801c9c2:	431a      	orrs	r2, r3
 801c9c4:	b293      	uxth	r3, r2
 801c9c6:	930c      	str	r3, [sp, #48]	; 0x30
 801c9c8:	2300      	movs	r3, #0
 801c9ca:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801c9ce:	9308      	str	r3, [sp, #32]
 801c9d0:	461a      	mov	r2, r3
 801c9d2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801c9d6:	930e      	str	r3, [sp, #56]	; 0x38
 801c9d8:	f04f 0801 	mov.w	r8, #1
 801c9dc:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801c9e0:	f8cd 8008 	str.w	r8, [sp, #8]
 801c9e4:	46c4      	mov	ip, r8
 801c9e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c9e8:	2d00      	cmp	r5, #0
 801c9ea:	d07c      	beq.n	801cae6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801c9ec:	45ac      	cmp	ip, r5
 801c9ee:	d26c      	bcs.n	801caca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801c9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c9f2:	eba5 050c 	sub.w	r5, r5, ip
 801c9f6:	455b      	cmp	r3, fp
 801c9f8:	b2ad      	uxth	r5, r5
 801c9fa:	4608      	mov	r0, r1
 801c9fc:	d802      	bhi.n	801ca04 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 801c9fe:	e070      	b.n	801cae2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d15c      	bne.n	801cabe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 801ca04:	9b03      	ldr	r3, [sp, #12]
 801ca06:	9a02      	ldr	r2, [sp, #8]
 801ca08:	785b      	ldrb	r3, [r3, #1]
 801ca0a:	9902      	ldr	r1, [sp, #8]
 801ca0c:	f1c2 0207 	rsb	r2, r2, #7
 801ca10:	4093      	lsls	r3, r2
 801ca12:	005b      	lsls	r3, r3, #1
 801ca14:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801ca18:	9b03      	ldr	r3, [sp, #12]
 801ca1a:	781b      	ldrb	r3, [r3, #0]
 801ca1c:	410b      	asrs	r3, r1
 801ca1e:	3101      	adds	r1, #1
 801ca20:	b2c9      	uxtb	r1, r1
 801ca22:	2908      	cmp	r1, #8
 801ca24:	9102      	str	r1, [sp, #8]
 801ca26:	9903      	ldr	r1, [sp, #12]
 801ca28:	bf0a      	itet	eq
 801ca2a:	3102      	addeq	r1, #2
 801ca2c:	3101      	addne	r1, #1
 801ca2e:	9103      	streq	r1, [sp, #12]
 801ca30:	b2db      	uxtb	r3, r3
 801ca32:	bf0a      	itet	eq
 801ca34:	2100      	moveq	r1, #0
 801ca36:	9103      	strne	r1, [sp, #12]
 801ca38:	9102      	streq	r1, [sp, #8]
 801ca3a:	4313      	orrs	r3, r2
 801ca3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ca3e:	b29a      	uxth	r2, r3
 801ca40:	4291      	cmp	r1, r2
 801ca42:	d30a      	bcc.n	801ca5a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e6>
 801ca44:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801ca48:	2301      	movs	r3, #1
 801ca4a:	9905      	ldr	r1, [sp, #20]
 801ca4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801ca50:	d30f      	bcc.n	801ca72 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1fe>
 801ca52:	2100      	movs	r1, #0
 801ca54:	4698      	mov	r8, r3
 801ca56:	9100      	str	r1, [sp, #0]
 801ca58:	e032      	b.n	801cac0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24c>
 801ca5a:	9b05      	ldr	r3, [sp, #20]
 801ca5c:	429a      	cmp	r2, r3
 801ca5e:	d318      	bcc.n	801ca92 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801ca60:	eb04 0308 	add.w	r3, r4, r8
 801ca64:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 801ca68:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801ca6c:	f108 0301 	add.w	r3, r8, #1
 801ca70:	b29b      	uxth	r3, r3
 801ca72:	9905      	ldr	r1, [sp, #20]
 801ca74:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801ca78:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ca7c:	710e      	strb	r6, [r1, #4]
 801ca7e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ca80:	80ce      	strh	r6, [r1, #6]
 801ca82:	f108 0601 	add.w	r6, r8, #1
 801ca86:	714e      	strb	r6, [r1, #5]
 801ca88:	9905      	ldr	r1, [sp, #20]
 801ca8a:	3101      	adds	r1, #1
 801ca8c:	b289      	uxth	r1, r1
 801ca8e:	9105      	str	r1, [sp, #20]
 801ca90:	e7df      	b.n	801ca52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1de>
 801ca92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ca96:	4611      	mov	r1, r2
 801ca98:	795b      	ldrb	r3, [r3, #5]
 801ca9a:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801ca9e:	4426      	add	r6, r4
 801caa0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801caa2:	4437      	add	r7, r6
 801caa4:	2f00      	cmp	r7, #0
 801caa6:	dd06      	ble.n	801cab6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 801caa8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801caac:	790f      	ldrb	r7, [r1, #4]
 801caae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cab2:	88c9      	ldrh	r1, [r1, #6]
 801cab4:	e7f4      	b.n	801caa0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22c>
 801cab6:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801caba:	b29b      	uxth	r3, r3
 801cabc:	e7c5      	b.n	801ca4a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801cabe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cac0:	920c      	str	r2, [sp, #48]	; 0x30
 801cac2:	4601      	mov	r1, r0
 801cac4:	9a00      	ldr	r2, [sp, #0]
 801cac6:	469c      	mov	ip, r3
 801cac8:	e78e      	b.n	801c9e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801caca:	1957      	adds	r7, r2, r5
 801cacc:	ebac 0305 	sub.w	r3, ip, r5
 801cad0:	b2ba      	uxth	r2, r7
 801cad2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801cad6:	9200      	str	r2, [sp, #0]
 801cad8:	b29b      	uxth	r3, r3
 801cada:	2500      	movs	r5, #0
 801cadc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cade:	455a      	cmp	r2, fp
 801cae0:	d88e      	bhi.n	801ca00 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 801cae2:	4601      	mov	r1, r0
 801cae4:	e749      	b.n	801c97a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x106>
 801cae6:	458c      	cmp	ip, r1
 801cae8:	bf2c      	ite	cs
 801caea:	4628      	movcs	r0, r5
 801caec:	462b      	movcc	r3, r5
 801caee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801caf0:	bf27      	ittee	cs
 801caf2:	9109      	strcs	r1, [sp, #36]	; 0x24
 801caf4:	ebac 0301 	subcs.w	r3, ip, r1
 801caf8:	eba1 000c 	subcc.w	r0, r1, ip
 801cafc:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 801cb00:	bf2c      	ite	cs
 801cb02:	b29b      	uxthcs	r3, r3
 801cb04:	b280      	uxthcc	r0, r0
 801cb06:	2dff      	cmp	r5, #255	; 0xff
 801cb08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801cb0a:	eb02 0705 	add.w	r7, r2, r5
 801cb0e:	b2bd      	uxth	r5, r7
 801cb10:	9500      	str	r5, [sp, #0]
 801cb12:	d12f      	bne.n	801cb74 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>
 801cb14:	465e      	mov	r6, fp
 801cb16:	9d00      	ldr	r5, [sp, #0]
 801cb18:	42aa      	cmp	r2, r5
 801cb1a:	f040 8084 	bne.w	801cc26 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b2>
 801cb1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb20:	458c      	cmp	ip, r1
 801cb22:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801cb26:	d3d8      	bcc.n	801cada <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x266>
 801cb28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cb2a:	9904      	ldr	r1, [sp, #16]
 801cb2c:	8812      	ldrh	r2, [r2, #0]
 801cb2e:	1a52      	subs	r2, r2, r1
 801cb30:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801cb34:	9a08      	ldr	r2, [sp, #32]
 801cb36:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cb38:	3201      	adds	r2, #1
 801cb3a:	428a      	cmp	r2, r1
 801cb3c:	9208      	str	r2, [sp, #32]
 801cb3e:	f040 8092 	bne.w	801cc66 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f2>
 801cb42:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801cb46:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 801cb4a:	9b04      	ldr	r3, [sp, #16]
 801cb4c:	eba5 050c 	sub.w	r5, r5, ip
 801cb50:	b2ad      	uxth	r5, r5
 801cb52:	2d00      	cmp	r5, #0
 801cb54:	bf08      	it	eq
 801cb56:	4619      	moveq	r1, r3
 801cb58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb5a:	bf18      	it	ne
 801cb5c:	2100      	movne	r1, #0
 801cb5e:	3301      	adds	r3, #1
 801cb60:	930d      	str	r3, [sp, #52]	; 0x34
 801cb62:	b289      	uxth	r1, r1
 801cb64:	e700      	b.n	801c968 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 801cb66:	bf00      	nop
 801cb68:	20025830 	.word	0x20025830
 801cb6c:	2002582a 	.word	0x2002582a
 801cb70:	fffff7fb 	.word	0xfffff7fb
 801cb74:	46d9      	mov	r9, fp
 801cb76:	9d00      	ldr	r5, [sp, #0]
 801cb78:	42aa      	cmp	r2, r5
 801cb7a:	d0d0      	beq.n	801cb1e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2aa>
 801cb7c:	1c55      	adds	r5, r2, #1
 801cb7e:	4422      	add	r2, r4
 801cb80:	9517      	str	r5, [sp, #92]	; 0x5c
 801cb82:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 801cb86:	9a06      	ldr	r2, [sp, #24]
 801cb88:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cb8c:	4472      	add	r2, lr
 801cb8e:	9212      	str	r2, [sp, #72]	; 0x48
 801cb90:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801cb92:	f8b9 2000 	ldrh.w	r2, [r9]
 801cb96:	f897 a002 	ldrb.w	sl, [r7, #2]
 801cb9a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801cb9c:	1216      	asrs	r6, r2, #8
 801cb9e:	fb1a fa07 	smulbb	sl, sl, r7
 801cba2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cba6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cba8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cbac:	fb06 a607 	mla	r6, r6, r7, sl
 801cbb0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801cbb2:	f897 a001 	ldrb.w	sl, [r7, #1]
 801cbb6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801cbb8:	10d5      	asrs	r5, r2, #3
 801cbba:	fb1a fa07 	smulbb	sl, sl, r7
 801cbbe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cbc2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cbc4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801cbc8:	fb05 a507 	mla	r5, r5, r7, sl
 801cbcc:	9f06      	ldr	r7, [sp, #24]
 801cbce:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801cbd2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801cbd4:	00d2      	lsls	r2, r2, #3
 801cbd6:	fb1e fe07 	smulbb	lr, lr, r7
 801cbda:	b2d2      	uxtb	r2, r2
 801cbdc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cbde:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cbe2:	b2b6      	uxth	r6, r6
 801cbe4:	fb02 e207 	mla	r2, r2, r7, lr
 801cbe8:	b292      	uxth	r2, r2
 801cbea:	b2ad      	uxth	r5, r5
 801cbec:	f106 0a01 	add.w	sl, r6, #1
 801cbf0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801cbf4:	f102 0e01 	add.w	lr, r2, #1
 801cbf8:	f105 0a01 	add.w	sl, r5, #1
 801cbfc:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801cc00:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cc04:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801cc08:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801cc0c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cc10:	ea4e 0606 	orr.w	r6, lr, r6
 801cc14:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cc18:	ea46 060a 	orr.w	r6, r6, sl
 801cc1c:	f829 6b02 	strh.w	r6, [r9], #2
 801cc20:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801cc24:	e7a7      	b.n	801cb76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x302>
 801cc26:	f102 0e01 	add.w	lr, r2, #1
 801cc2a:	4422      	add	r2, r4
 801cc2c:	9f06      	ldr	r7, [sp, #24]
 801cc2e:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 801cc32:	9a06      	ldr	r2, [sp, #24]
 801cc34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc38:	eb02 0a05 	add.w	sl, r2, r5
 801cc3c:	4a13      	ldr	r2, [pc, #76]	; (801cc8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>)
 801cc3e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cc42:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801cc46:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801cc4a:	00d2      	lsls	r2, r2, #3
 801cc4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cc50:	ea49 0202 	orr.w	r2, r9, r2
 801cc54:	f817 9005 	ldrb.w	r9, [r7, r5]
 801cc58:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801cc5c:	f826 2b02 	strh.w	r2, [r6], #2
 801cc60:	fa1f f28e 	uxth.w	r2, lr
 801cc64:	e757      	b.n	801cb16 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a2>
 801cc66:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801cc6a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801cc6e:	1a2d      	subs	r5, r5, r0
 801cc70:	b2ad      	uxth	r5, r5
 801cc72:	2d00      	cmp	r5, #0
 801cc74:	bf18      	it	ne
 801cc76:	2000      	movne	r0, #0
 801cc78:	e730      	b.n	801cadc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801cc7a:	4b05      	ldr	r3, [pc, #20]	; (801cc90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 801cc7c:	6818      	ldr	r0, [r3, #0]
 801cc7e:	6803      	ldr	r3, [r0, #0]
 801cc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc82:	4798      	blx	r3
 801cc84:	b01f      	add	sp, #124	; 0x7c
 801cc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc8a:	bf00      	nop
 801cc8c:	fffff800 	.word	0xfffff800
 801cc90:	20025830 	.word	0x20025830

0801cc94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc98:	b091      	sub	sp, #68	; 0x44
 801cc9a:	469b      	mov	fp, r3
 801cc9c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801cca0:	4616      	mov	r6, r2
 801cca2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801cca6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ccaa:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801ccae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ccb2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ccb6:	4604      	mov	r4, r0
 801ccb8:	460d      	mov	r5, r1
 801ccba:	4640      	mov	r0, r8
 801ccbc:	4659      	mov	r1, fp
 801ccbe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ccc2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801ccc6:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801ccca:	f7f5 fb61 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 801ccce:	4631      	mov	r1, r6
 801ccd0:	4640      	mov	r0, r8
 801ccd2:	f7f5 fb5d 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 801ccd6:	4b74      	ldr	r3, [pc, #464]	; (801cea8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801ccd8:	8818      	ldrh	r0, [r3, #0]
 801ccda:	4b74      	ldr	r3, [pc, #464]	; (801ceac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801ccdc:	8819      	ldrh	r1, [r3, #0]
 801ccde:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	b202      	sxth	r2, r0
 801cce6:	b20e      	sxth	r6, r1
 801cce8:	da07      	bge.n	801ccfa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801ccea:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801ccee:	4463      	add	r3, ip
 801ccf0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ccf4:	2300      	movs	r3, #0
 801ccf6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801ccfa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801ccfe:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cd02:	1ad2      	subs	r2, r2, r3
 801cd04:	4594      	cmp	ip, r2
 801cd06:	bfc4      	itt	gt
 801cd08:	1ac2      	subgt	r2, r0, r3
 801cd0a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801cd0e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801cd12:	2a00      	cmp	r2, #0
 801cd14:	da07      	bge.n	801cd26 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801cd16:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801cd1a:	4462      	add	r2, ip
 801cd1c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801cd20:	2200      	movs	r2, #0
 801cd22:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801cd26:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801cd2a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801cd2e:	eba6 060a 	sub.w	r6, r6, sl
 801cd32:	42b2      	cmp	r2, r6
 801cd34:	bfc4      	itt	gt
 801cd36:	eba1 020a 	subgt.w	r2, r1, sl
 801cd3a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801cd3e:	4a5c      	ldr	r2, [pc, #368]	; (801ceb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801cd40:	7812      	ldrb	r2, [r2, #0]
 801cd42:	b9a2      	cbnz	r2, 801cd6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801cd44:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801cd48:	4286      	cmp	r6, r0
 801cd4a:	4640      	mov	r0, r8
 801cd4c:	9303      	str	r3, [sp, #12]
 801cd4e:	bf14      	ite	ne
 801cd50:	2600      	movne	r6, #0
 801cd52:	2601      	moveq	r6, #1
 801cd54:	f7f5 fb5f 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cd58:	9b03      	ldr	r3, [sp, #12]
 801cd5a:	b160      	cbz	r0, 801cd76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	8023      	strh	r3, [r4, #0]
 801cd60:	8063      	strh	r3, [r4, #2]
 801cd62:	80a3      	strh	r3, [r4, #4]
 801cd64:	4620      	mov	r0, r4
 801cd66:	80e3      	strh	r3, [r4, #6]
 801cd68:	b011      	add	sp, #68	; 0x44
 801cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd6e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801cd72:	428e      	cmp	r6, r1
 801cd74:	e7e9      	b.n	801cd4a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801cd76:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801cd7a:	9205      	str	r2, [sp, #20]
 801cd7c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801cd80:	9206      	str	r2, [sp, #24]
 801cd82:	f8bb 2000 	ldrh.w	r2, [fp]
 801cd86:	900e      	str	r0, [sp, #56]	; 0x38
 801cd88:	1a9b      	subs	r3, r3, r2
 801cd8a:	b21b      	sxth	r3, r3
 801cd8c:	9303      	str	r3, [sp, #12]
 801cd8e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801cd92:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801cd96:	ebaa 0a03 	sub.w	sl, sl, r3
 801cd9a:	fa0f f38a 	sxth.w	r3, sl
 801cd9e:	9304      	str	r3, [sp, #16]
 801cda0:	9b03      	ldr	r3, [sp, #12]
 801cda2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801cda6:	9b04      	ldr	r3, [sp, #16]
 801cda8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cdac:	9b05      	ldr	r3, [sp, #20]
 801cdae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801cdb2:	a90e      	add	r1, sp, #56	; 0x38
 801cdb4:	9b06      	ldr	r3, [sp, #24]
 801cdb6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801cdba:	a80c      	add	r0, sp, #48	; 0x30
 801cdbc:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801cdc0:	f7f8 fc6a 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cdc4:	4640      	mov	r0, r8
 801cdc6:	f7f8 fc3f 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cdca:	a80e      	add	r0, sp, #56	; 0x38
 801cdcc:	f7f8 fc3c 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cdd0:	4b38      	ldr	r3, [pc, #224]	; (801ceb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801cdd2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801cdd6:	881b      	ldrh	r3, [r3, #0]
 801cdd8:	9307      	str	r3, [sp, #28]
 801cdda:	682b      	ldr	r3, [r5, #0]
 801cddc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801ceb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801cde0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cde2:	4628      	mov	r0, r5
 801cde4:	4798      	blx	r3
 801cde6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801cdea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801cdee:	4681      	mov	r9, r0
 801cdf0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801cdf4:	f8db 0000 	ldr.w	r0, [fp]
 801cdf8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801cdfa:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801cdfe:	6803      	ldr	r3, [r0, #0]
 801ce00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ce02:	4798      	blx	r3
 801ce04:	4607      	mov	r7, r0
 801ce06:	f8db 0000 	ldr.w	r0, [fp]
 801ce0a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801ce0e:	6803      	ldr	r3, [r0, #0]
 801ce10:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ce14:	9109      	str	r1, [sp, #36]	; 0x24
 801ce16:	9208      	str	r2, [sp, #32]
 801ce18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce1a:	4798      	blx	r3
 801ce1c:	f010 0f01 	tst.w	r0, #1
 801ce20:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ce24:	d012      	beq.n	801ce4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801ce26:	f8db 0000 	ldr.w	r0, [fp]
 801ce2a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ce2e:	6803      	ldr	r3, [r0, #0]
 801ce30:	9200      	str	r2, [sp, #0]
 801ce32:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801ce34:	e898 0006 	ldmia.w	r8, {r1, r2}
 801ce38:	462b      	mov	r3, r5
 801ce3a:	47b0      	blx	r6
 801ce3c:	9b03      	ldr	r3, [sp, #12]
 801ce3e:	8023      	strh	r3, [r4, #0]
 801ce40:	9b04      	ldr	r3, [sp, #16]
 801ce42:	8063      	strh	r3, [r4, #2]
 801ce44:	9b05      	ldr	r3, [sp, #20]
 801ce46:	80a3      	strh	r3, [r4, #4]
 801ce48:	9b06      	ldr	r3, [sp, #24]
 801ce4a:	e78b      	b.n	801cd64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801ce4c:	fb09 f202 	mul.w	r2, r9, r2
 801ce50:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801ce54:	440f      	add	r7, r1
 801ce56:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801ce5a:	b166      	cbz	r6, 801ce76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801ce5c:	9a07      	ldr	r2, [sp, #28]
 801ce5e:	4592      	cmp	sl, r2
 801ce60:	d109      	bne.n	801ce76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801ce62:	f8db 0000 	ldr.w	r0, [fp]
 801ce66:	6802      	ldr	r2, [r0, #0]
 801ce68:	fb09 f303 	mul.w	r3, r9, r3
 801ce6c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801ce6e:	4629      	mov	r1, r5
 801ce70:	463a      	mov	r2, r7
 801ce72:	47b0      	blx	r6
 801ce74:	e7e2      	b.n	801ce3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801ce76:	fb0a f303 	mul.w	r3, sl, r3
 801ce7a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801ceb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801ce7e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801ce82:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801ce86:	4545      	cmp	r5, r8
 801ce88:	d2d8      	bcs.n	801ce3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801ce8a:	f8db 0000 	ldr.w	r0, [fp]
 801ce8e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ce92:	6802      	ldr	r2, [r0, #0]
 801ce94:	4629      	mov	r1, r5
 801ce96:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801ce9a:	005b      	lsls	r3, r3, #1
 801ce9c:	463a      	mov	r2, r7
 801ce9e:	47d0      	blx	sl
 801cea0:	444f      	add	r7, r9
 801cea2:	4435      	add	r5, r6
 801cea4:	e7ef      	b.n	801ce86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801cea6:	bf00      	nop
 801cea8:	20025824 	.word	0x20025824
 801ceac:	20025826 	.word	0x20025826
 801ceb0:	20025828 	.word	0x20025828
 801ceb4:	2002582a 	.word	0x2002582a
 801ceb8:	20025830 	.word	0x20025830

0801cebc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cebe:	4606      	mov	r6, r0
 801cec0:	b087      	sub	sp, #28
 801cec2:	460c      	mov	r4, r1
 801cec4:	4617      	mov	r7, r2
 801cec6:	461d      	mov	r5, r3
 801cec8:	b333      	cbz	r3, 801cf18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ceca:	4608      	mov	r0, r1
 801cecc:	f7f5 faa3 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ced0:	bb10      	cbnz	r0, 801cf18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ced2:	6820      	ldr	r0, [r4, #0]
 801ced4:	6861      	ldr	r1, [r4, #4]
 801ced6:	4c1c      	ldr	r4, [pc, #112]	; (801cf48 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801ced8:	ab04      	add	r3, sp, #16
 801ceda:	c303      	stmia	r3!, {r0, r1}
 801cedc:	a804      	add	r0, sp, #16
 801cede:	f7f8 fbb3 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cee2:	6820      	ldr	r0, [r4, #0]
 801cee4:	6803      	ldr	r3, [r0, #0]
 801cee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cee8:	4798      	blx	r3
 801ceea:	2dff      	cmp	r5, #255	; 0xff
 801ceec:	d016      	beq.n	801cf1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801ceee:	f010 0f08 	tst.w	r0, #8
 801cef2:	6820      	ldr	r0, [r4, #0]
 801cef4:	d015      	beq.n	801cf22 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801cef6:	2400      	movs	r4, #0
 801cef8:	6801      	ldr	r1, [r0, #0]
 801cefa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cefe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cf02:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801cf06:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cf0a:	9401      	str	r4, [sp, #4]
 801cf0c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cf10:	9400      	str	r4, [sp, #0]
 801cf12:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801cf14:	4639      	mov	r1, r7
 801cf16:	47a0      	blx	r4
 801cf18:	b007      	add	sp, #28
 801cf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf1c:	f010 0f02 	tst.w	r0, #2
 801cf20:	e7e7      	b.n	801cef2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801cf22:	6803      	ldr	r3, [r0, #0]
 801cf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf26:	4798      	blx	r3
 801cf28:	4b08      	ldr	r3, [pc, #32]	; (801cf4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801cf2a:	881a      	ldrh	r2, [r3, #0]
 801cf2c:	6833      	ldr	r3, [r6, #0]
 801cf2e:	e9cd 7500 	strd	r7, r5, [sp]
 801cf32:	4601      	mov	r1, r0
 801cf34:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cf36:	4630      	mov	r0, r6
 801cf38:	ab04      	add	r3, sp, #16
 801cf3a:	47a8      	blx	r5
 801cf3c:	6820      	ldr	r0, [r4, #0]
 801cf3e:	6803      	ldr	r3, [r0, #0]
 801cf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf42:	4798      	blx	r3
 801cf44:	e7e8      	b.n	801cf18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cf46:	bf00      	nop
 801cf48:	20025830 	.word	0x20025830
 801cf4c:	2002582a 	.word	0x2002582a

0801cf50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801cf50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf54:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801cf58:	9e08      	ldr	r6, [sp, #32]
 801cf5a:	4688      	mov	r8, r1
 801cf5c:	4614      	mov	r4, r2
 801cf5e:	461d      	mov	r5, r3
 801cf60:	2f00      	cmp	r7, #0
 801cf62:	f000 80a9 	beq.w	801d0b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cf66:	4618      	mov	r0, r3
 801cf68:	f7f5 fa55 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf6c:	2800      	cmp	r0, #0
 801cf6e:	f040 80a3 	bne.w	801d0b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cf72:	f9b5 1000 	ldrsh.w	r1, [r5]
 801cf76:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801cf7a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801cf7e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801cf82:	fb04 1303 	mla	r3, r4, r3, r1
 801cf86:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801cf8a:	4365      	muls	r5, r4
 801cf8c:	2fff      	cmp	r7, #255	; 0xff
 801cf8e:	eba4 0200 	sub.w	r2, r4, r0
 801cf92:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801cf96:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801cf9a:	d04a      	beq.n	801d032 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801cf9c:	b2bc      	uxth	r4, r7
 801cf9e:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801cfa2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801cfa6:	fa5f f788 	uxtb.w	r7, r8
 801cfaa:	b2f3      	uxtb	r3, r6
 801cfac:	0040      	lsls	r0, r0, #1
 801cfae:	fb0e fe04 	mul.w	lr, lr, r4
 801cfb2:	4367      	muls	r7, r4
 801cfb4:	4363      	muls	r3, r4
 801cfb6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801cfba:	fa1f fc8c 	uxth.w	ip, ip
 801cfbe:	42a9      	cmp	r1, r5
 801cfc0:	d27a      	bcs.n	801d0b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cfc2:	eb01 0900 	add.w	r9, r1, r0
 801cfc6:	4549      	cmp	r1, r9
 801cfc8:	d231      	bcs.n	801d02e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801cfca:	880a      	ldrh	r2, [r1, #0]
 801cfcc:	1214      	asrs	r4, r2, #8
 801cfce:	10d6      	asrs	r6, r2, #3
 801cfd0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801cfd4:	00d2      	lsls	r2, r2, #3
 801cfd6:	b2d2      	uxtb	r2, r2
 801cfd8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801cfdc:	fb14 f40c 	smulbb	r4, r4, ip
 801cfe0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cfe4:	4474      	add	r4, lr
 801cfe6:	fb12 f20c 	smulbb	r2, r2, ip
 801cfea:	b2a4      	uxth	r4, r4
 801cfec:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cff0:	441a      	add	r2, r3
 801cff2:	b292      	uxth	r2, r2
 801cff4:	f104 0a01 	add.w	sl, r4, #1
 801cff8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801cffc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d000:	fb16 f60c 	smulbb	r6, r6, ip
 801d004:	f102 0a01 	add.w	sl, r2, #1
 801d008:	443e      	add	r6, r7
 801d00a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801d00e:	b2b6      	uxth	r6, r6
 801d010:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d014:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d018:	4322      	orrs	r2, r4
 801d01a:	1c74      	adds	r4, r6, #1
 801d01c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801d020:	0976      	lsrs	r6, r6, #5
 801d022:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d026:	4332      	orrs	r2, r6
 801d028:	f821 2b02 	strh.w	r2, [r1], #2
 801d02c:	e7cb      	b.n	801cfc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801d02e:	4441      	add	r1, r8
 801d030:	e7c5      	b.n	801cfbe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801d032:	4f22      	ldr	r7, [pc, #136]	; (801d0bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801d034:	0973      	lsrs	r3, r6, #5
 801d036:	ea08 0707 	and.w	r7, r8, r7
 801d03a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d03e:	433b      	orrs	r3, r7
 801d040:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d044:	4333      	orrs	r3, r6
 801d046:	07e7      	lsls	r7, r4, #31
 801d048:	b29b      	uxth	r3, r3
 801d04a:	d50b      	bpl.n	801d064 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801d04c:	0040      	lsls	r0, r0, #1
 801d04e:	0052      	lsls	r2, r2, #1
 801d050:	42a9      	cmp	r1, r5
 801d052:	d231      	bcs.n	801d0b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d054:	180c      	adds	r4, r1, r0
 801d056:	42a1      	cmp	r1, r4
 801d058:	d202      	bcs.n	801d060 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801d05a:	f821 3b02 	strh.w	r3, [r1], #2
 801d05e:	e7fa      	b.n	801d056 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801d060:	4411      	add	r1, r2
 801d062:	e7f5      	b.n	801d050 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801d064:	078e      	lsls	r6, r1, #30
 801d066:	d008      	beq.n	801d07a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801d068:	0066      	lsls	r6, r4, #1
 801d06a:	460a      	mov	r2, r1
 801d06c:	42aa      	cmp	r2, r5
 801d06e:	d202      	bcs.n	801d076 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801d070:	8013      	strh	r3, [r2, #0]
 801d072:	4432      	add	r2, r6
 801d074:	e7fa      	b.n	801d06c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801d076:	3102      	adds	r1, #2
 801d078:	3801      	subs	r0, #1
 801d07a:	07c2      	lsls	r2, r0, #31
 801d07c:	d50b      	bpl.n	801d096 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801d07e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801d082:	3a01      	subs	r2, #1
 801d084:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801d088:	0066      	lsls	r6, r4, #1
 801d08a:	42aa      	cmp	r2, r5
 801d08c:	d202      	bcs.n	801d094 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801d08e:	8013      	strh	r3, [r2, #0]
 801d090:	4432      	add	r2, r6
 801d092:	e7fa      	b.n	801d08a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801d094:	3801      	subs	r0, #1
 801d096:	b178      	cbz	r0, 801d0b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d098:	1040      	asrs	r0, r0, #1
 801d09a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801d09e:	0080      	lsls	r0, r0, #2
 801d0a0:	0064      	lsls	r4, r4, #1
 801d0a2:	42a9      	cmp	r1, r5
 801d0a4:	d208      	bcs.n	801d0b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d0a6:	180e      	adds	r6, r1, r0
 801d0a8:	460a      	mov	r2, r1
 801d0aa:	42b2      	cmp	r2, r6
 801d0ac:	d202      	bcs.n	801d0b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801d0ae:	f842 3b04 	str.w	r3, [r2], #4
 801d0b2:	e7fa      	b.n	801d0aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801d0b4:	4421      	add	r1, r4
 801d0b6:	e7f4      	b.n	801d0a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801d0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0bc:	00fff800 	.word	0x00fff800

0801d0c0 <_ZN8touchgfx8LCD16bppC1Ev>:
 801d0c0:	2200      	movs	r2, #0
 801d0c2:	4912      	ldr	r1, [pc, #72]	; (801d10c <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801d0c4:	6042      	str	r2, [r0, #4]
 801d0c6:	6001      	str	r1, [r0, #0]
 801d0c8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d0cc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d0d0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d0d4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d0d8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d0dc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d0e0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d0e4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d0e8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d0ec:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d0f0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801d0f4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801d0f8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801d0fc:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801d100:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 801d104:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801d108:	4770      	bx	lr
 801d10a:	bf00      	nop
 801d10c:	080299d8 	.word	0x080299d8

0801d110 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d114:	460d      	mov	r5, r1
 801d116:	b08d      	sub	sp, #52	; 0x34
 801d118:	4604      	mov	r4, r0
 801d11a:	6808      	ldr	r0, [r1, #0]
 801d11c:	6849      	ldr	r1, [r1, #4]
 801d11e:	4699      	mov	r9, r3
 801d120:	ab08      	add	r3, sp, #32
 801d122:	c303      	stmia	r3!, {r0, r1}
 801d124:	6810      	ldr	r0, [r2, #0]
 801d126:	6851      	ldr	r1, [r2, #4]
 801d128:	ab0a      	add	r3, sp, #40	; 0x28
 801d12a:	c303      	stmia	r3!, {r0, r1}
 801d12c:	a808      	add	r0, sp, #32
 801d12e:	f7f8 fa8b 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d132:	4629      	mov	r1, r5
 801d134:	a80a      	add	r0, sp, #40	; 0x28
 801d136:	f7f8 faaf 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d13a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d13e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d142:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d146:	4d63      	ldr	r5, [pc, #396]	; (801d2d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d148:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801d14c:	6828      	ldr	r0, [r5, #0]
 801d14e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d152:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d156:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d15a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d15e:	440a      	add	r2, r1
 801d160:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d164:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d168:	4413      	add	r3, r2
 801d16a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d16e:	6803      	ldr	r3, [r0, #0]
 801d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d172:	4798      	blx	r3
 801d174:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d178:	d119      	bne.n	801d1ae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801d17a:	f010 0f20 	tst.w	r0, #32
 801d17e:	6828      	ldr	r0, [r5, #0]
 801d180:	d018      	beq.n	801d1b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801d182:	2500      	movs	r5, #0
 801d184:	6801      	ldr	r1, [r0, #0]
 801d186:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d18a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d18e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801d192:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d196:	9502      	str	r5, [sp, #8]
 801d198:	b2b6      	uxth	r6, r6
 801d19a:	fa1f f588 	uxth.w	r5, r8
 801d19e:	9601      	str	r6, [sp, #4]
 801d1a0:	9500      	str	r5, [sp, #0]
 801d1a2:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801d1a4:	4621      	mov	r1, r4
 801d1a6:	47a8      	blx	r5
 801d1a8:	b00d      	add	sp, #52	; 0x34
 801d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d1b2:	e7e4      	b.n	801d17e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d1b4:	6803      	ldr	r3, [r0, #0]
 801d1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1b8:	4798      	blx	r3
 801d1ba:	4947      	ldr	r1, [pc, #284]	; (801d2d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801d1bc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d1c0:	880b      	ldrh	r3, [r1, #0]
 801d1c2:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801d1c6:	fb03 5202 	mla	r2, r3, r2, r5
 801d1ca:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d1ce:	4373      	muls	r3, r6
 801d1d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d1d4:	9307      	str	r3, [sp, #28]
 801d1d6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d1da:	9306      	str	r3, [sp, #24]
 801d1dc:	468a      	mov	sl, r1
 801d1de:	9b07      	ldr	r3, [sp, #28]
 801d1e0:	4298      	cmp	r0, r3
 801d1e2:	d270      	bcs.n	801d2c6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801d1e4:	9b06      	ldr	r3, [sp, #24]
 801d1e6:	4621      	mov	r1, r4
 801d1e8:	eb00 0b03 	add.w	fp, r0, r3
 801d1ec:	4558      	cmp	r0, fp
 801d1ee:	d25d      	bcs.n	801d2ac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801d1f0:	f851 4b04 	ldr.w	r4, [r1], #4
 801d1f4:	0e23      	lsrs	r3, r4, #24
 801d1f6:	d014      	beq.n	801d222 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d1f8:	2bff      	cmp	r3, #255	; 0xff
 801d1fa:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801d1fe:	d112      	bne.n	801d226 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d200:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d204:	d10f      	bne.n	801d226 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d206:	0963      	lsrs	r3, r4, #5
 801d208:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801d20c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d210:	f02c 0c07 	bic.w	ip, ip, #7
 801d214:	ea43 0c0c 	orr.w	ip, r3, ip
 801d218:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d21c:	ea4c 0404 	orr.w	r4, ip, r4
 801d220:	8004      	strh	r4, [r0, #0]
 801d222:	3002      	adds	r0, #2
 801d224:	e7e2      	b.n	801d1ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801d226:	fb09 f303 	mul.w	r3, r9, r3
 801d22a:	8807      	ldrh	r7, [r0, #0]
 801d22c:	1c5a      	adds	r2, r3, #1
 801d22e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801d232:	1212      	asrs	r2, r2, #8
 801d234:	123e      	asrs	r6, r7, #8
 801d236:	b293      	uxth	r3, r2
 801d238:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801d23c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d240:	43d2      	mvns	r2, r2
 801d242:	b2d2      	uxtb	r2, r2
 801d244:	10fd      	asrs	r5, r7, #3
 801d246:	fb1e fe03 	smulbb	lr, lr, r3
 801d24a:	00ff      	lsls	r7, r7, #3
 801d24c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d250:	fb06 e602 	mla	r6, r6, r2, lr
 801d254:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d258:	b2ff      	uxtb	r7, r7
 801d25a:	fa5f fc8c 	uxtb.w	ip, ip
 801d25e:	b2e4      	uxtb	r4, r4
 801d260:	b2b6      	uxth	r6, r6
 801d262:	fb1c fc03 	smulbb	ip, ip, r3
 801d266:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d26a:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d26e:	fb14 f403 	smulbb	r4, r4, r3
 801d272:	fb05 c502 	mla	r5, r5, r2, ip
 801d276:	f106 0e01 	add.w	lr, r6, #1
 801d27a:	fb07 4702 	mla	r7, r7, r2, r4
 801d27e:	b2ad      	uxth	r5, r5
 801d280:	b2bf      	uxth	r7, r7
 801d282:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801d286:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801d28a:	f105 0c01 	add.w	ip, r5, #1
 801d28e:	1c7e      	adds	r6, r7, #1
 801d290:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d294:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d298:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d29c:	096d      	lsrs	r5, r5, #5
 801d29e:	ea46 060e 	orr.w	r6, r6, lr
 801d2a2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d2a6:	432e      	orrs	r6, r5
 801d2a8:	8006      	strh	r6, [r0, #0]
 801d2aa:	e7ba      	b.n	801d222 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d2ac:	f8ba 3000 	ldrh.w	r3, [sl]
 801d2b0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801d2b4:	eba3 0308 	sub.w	r3, r3, r8
 801d2b8:	eba4 0408 	sub.w	r4, r4, r8
 801d2bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d2c0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d2c4:	e78b      	b.n	801d1de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801d2c6:	4b03      	ldr	r3, [pc, #12]	; (801d2d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d2c8:	6818      	ldr	r0, [r3, #0]
 801d2ca:	6803      	ldr	r3, [r0, #0]
 801d2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2ce:	4798      	blx	r3
 801d2d0:	e76a      	b.n	801d1a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801d2d2:	bf00      	nop
 801d2d4:	20025830 	.word	0x20025830
 801d2d8:	2002582a 	.word	0x2002582a

0801d2dc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801d2dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2e0:	460c      	mov	r4, r1
 801d2e2:	b085      	sub	sp, #20
 801d2e4:	6810      	ldr	r0, [r2, #0]
 801d2e6:	6851      	ldr	r1, [r2, #4]
 801d2e8:	466d      	mov	r5, sp
 801d2ea:	c503      	stmia	r5!, {r0, r1}
 801d2ec:	6818      	ldr	r0, [r3, #0]
 801d2ee:	6859      	ldr	r1, [r3, #4]
 801d2f0:	4616      	mov	r6, r2
 801d2f2:	c503      	stmia	r5!, {r0, r1}
 801d2f4:	4668      	mov	r0, sp
 801d2f6:	f7f8 f9a7 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d2fa:	4631      	mov	r1, r6
 801d2fc:	a802      	add	r0, sp, #8
 801d2fe:	f7f8 f9cb 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d302:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801d306:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801d30a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d30e:	4d28      	ldr	r5, [pc, #160]	; (801d3b0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801d310:	4e28      	ldr	r6, [pc, #160]	; (801d3b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801d312:	6828      	ldr	r0, [r5, #0]
 801d314:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d318:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801d31c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d320:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d324:	f8bd 1000 	ldrh.w	r1, [sp]
 801d328:	440a      	add	r2, r1
 801d32a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d32e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d332:	4413      	add	r3, r2
 801d334:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d338:	6803      	ldr	r3, [r0, #0]
 801d33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d33c:	4798      	blx	r3
 801d33e:	8833      	ldrh	r3, [r6, #0]
 801d340:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d344:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d348:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801d3b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801d34c:	fb03 1202 	mla	r2, r3, r2, r1
 801d350:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d354:	fb08 f303 	mul.w	r3, r8, r3
 801d358:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d35c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801d360:	4298      	cmp	r0, r3
 801d362:	d21d      	bcs.n	801d3a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801d364:	eb00 080c 	add.w	r8, r0, ip
 801d368:	4540      	cmp	r0, r8
 801d36a:	d20f      	bcs.n	801d38c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801d36c:	f854 1b04 	ldr.w	r1, [r4], #4
 801d370:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801d374:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801d378:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d37c:	ea42 0209 	orr.w	r2, r2, r9
 801d380:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d384:	430a      	orrs	r2, r1
 801d386:	f820 2b02 	strh.w	r2, [r0], #2
 801d38a:	e7ed      	b.n	801d368 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801d38c:	8832      	ldrh	r2, [r6, #0]
 801d38e:	1bd2      	subs	r2, r2, r7
 801d390:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d394:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d398:	1bd2      	subs	r2, r2, r7
 801d39a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801d39e:	e7df      	b.n	801d360 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801d3a0:	6828      	ldr	r0, [r5, #0]
 801d3a2:	6803      	ldr	r3, [r0, #0]
 801d3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3a6:	4798      	blx	r3
 801d3a8:	b005      	add	sp, #20
 801d3aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3ae:	bf00      	nop
 801d3b0:	20025830 	.word	0x20025830
 801d3b4:	2002582a 	.word	0x2002582a
 801d3b8:	fffff800 	.word	0xfffff800

0801d3bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801d3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3c0:	460e      	mov	r6, r1
 801d3c2:	b08e      	sub	sp, #56	; 0x38
 801d3c4:	4604      	mov	r4, r0
 801d3c6:	6808      	ldr	r0, [r1, #0]
 801d3c8:	6849      	ldr	r1, [r1, #4]
 801d3ca:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801d5a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801d3ce:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801d5a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801d3d2:	461d      	mov	r5, r3
 801d3d4:	ab0a      	add	r3, sp, #40	; 0x28
 801d3d6:	c303      	stmia	r3!, {r0, r1}
 801d3d8:	6810      	ldr	r0, [r2, #0]
 801d3da:	6851      	ldr	r1, [r2, #4]
 801d3dc:	ab0c      	add	r3, sp, #48	; 0x30
 801d3de:	c303      	stmia	r3!, {r0, r1}
 801d3e0:	a80a      	add	r0, sp, #40	; 0x28
 801d3e2:	f7f8 f931 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3e6:	4631      	mov	r1, r6
 801d3e8:	a80c      	add	r0, sp, #48	; 0x30
 801d3ea:	f7f8 f955 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3ee:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d3f2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d3f6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d3fa:	f8d8 0000 	ldr.w	r0, [r8]
 801d3fe:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d402:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801d406:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d40a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d40e:	440c      	add	r4, r1
 801d410:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d414:	440a      	add	r2, r1
 801d416:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d41a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d41e:	4413      	add	r3, r2
 801d420:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d424:	6803      	ldr	r3, [r0, #0]
 801d426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d428:	4798      	blx	r3
 801d42a:	2dff      	cmp	r5, #255	; 0xff
 801d42c:	d124      	bne.n	801d478 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801d42e:	f010 0f01 	tst.w	r0, #1
 801d432:	f8d8 0000 	ldr.w	r0, [r8]
 801d436:	d022      	beq.n	801d47e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801d438:	2100      	movs	r1, #0
 801d43a:	f8d0 c000 	ldr.w	ip, [r0]
 801d43e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d442:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d446:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801d44a:	f04f 0e01 	mov.w	lr, #1
 801d44e:	f8cd e018 	str.w	lr, [sp, #24]
 801d452:	f8b9 e000 	ldrh.w	lr, [r9]
 801d456:	9503      	str	r5, [sp, #12]
 801d458:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d45c:	b2b6      	uxth	r6, r6
 801d45e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d462:	9102      	str	r1, [sp, #8]
 801d464:	b2bf      	uxth	r7, r7
 801d466:	9601      	str	r6, [sp, #4]
 801d468:	9700      	str	r7, [sp, #0]
 801d46a:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801d46e:	4621      	mov	r1, r4
 801d470:	47a8      	blx	r5
 801d472:	b00e      	add	sp, #56	; 0x38
 801d474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d478:	f010 0f04 	tst.w	r0, #4
 801d47c:	e7d9      	b.n	801d432 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801d47e:	6803      	ldr	r3, [r0, #0]
 801d480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d482:	4798      	blx	r3
 801d484:	f8b9 3000 	ldrh.w	r3, [r9]
 801d488:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d48c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d490:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d494:	fb03 1202 	mla	r2, r3, r2, r1
 801d498:	ebac 0c07 	sub.w	ip, ip, r7
 801d49c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d4a0:	435e      	muls	r6, r3
 801d4a2:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801d4a6:	2dff      	cmp	r5, #255	; 0xff
 801d4a8:	eba3 0707 	sub.w	r7, r3, r7
 801d4ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d4b0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d4b4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801d4b8:	d049      	beq.n	801d54e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801d4ba:	43eb      	mvns	r3, r5
 801d4bc:	fa1f f985 	uxth.w	r9, r5
 801d4c0:	b2db      	uxtb	r3, r3
 801d4c2:	42b0      	cmp	r0, r6
 801d4c4:	d266      	bcs.n	801d594 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d4c6:	eb00 0a0e 	add.w	sl, r0, lr
 801d4ca:	4550      	cmp	r0, sl
 801d4cc:	4621      	mov	r1, r4
 801d4ce:	f104 0403 	add.w	r4, r4, #3
 801d4d2:	d25b      	bcs.n	801d58c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801d4d4:	8802      	ldrh	r2, [r0, #0]
 801d4d6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d4da:	ea4f 2822 	mov.w	r8, r2, asr #8
 801d4de:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801d4e2:	fb11 f109 	smulbb	r1, r1, r9
 801d4e6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801d4ea:	10d5      	asrs	r5, r2, #3
 801d4ec:	fb08 1803 	mla	r8, r8, r3, r1
 801d4f0:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801d4f4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d4f8:	fb11 f109 	smulbb	r1, r1, r9
 801d4fc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d500:	fb05 1503 	mla	r5, r5, r3, r1
 801d504:	00d2      	lsls	r2, r2, #3
 801d506:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d50a:	b2d2      	uxtb	r2, r2
 801d50c:	fb11 f109 	smulbb	r1, r1, r9
 801d510:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d514:	fa1f f888 	uxth.w	r8, r8
 801d518:	fb02 1203 	mla	r2, r2, r3, r1
 801d51c:	b292      	uxth	r2, r2
 801d51e:	f108 0101 	add.w	r1, r8, #1
 801d522:	b2ad      	uxth	r5, r5
 801d524:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d528:	1c51      	adds	r1, r2, #1
 801d52a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d52e:	1c69      	adds	r1, r5, #1
 801d530:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d534:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801d538:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d53c:	096d      	lsrs	r5, r5, #5
 801d53e:	ea42 0208 	orr.w	r2, r2, r8
 801d542:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d546:	432a      	orrs	r2, r5
 801d548:	f820 2b02 	strh.w	r2, [r0], #2
 801d54c:	e7bd      	b.n	801d4ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801d54e:	4a14      	ldr	r2, [pc, #80]	; (801d5a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801d550:	42b0      	cmp	r0, r6
 801d552:	d21f      	bcs.n	801d594 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d554:	eb00 050e 	add.w	r5, r0, lr
 801d558:	42a8      	cmp	r0, r5
 801d55a:	4621      	mov	r1, r4
 801d55c:	f104 0403 	add.w	r4, r4, #3
 801d560:	d210      	bcs.n	801d584 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801d562:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801d566:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d56a:	00db      	lsls	r3, r3, #3
 801d56c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801d570:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d574:	430b      	orrs	r3, r1
 801d576:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d57a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801d57e:	f820 3b02 	strh.w	r3, [r0], #2
 801d582:	e7e9      	b.n	801d558 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801d584:	4438      	add	r0, r7
 801d586:	eb01 040c 	add.w	r4, r1, ip
 801d58a:	e7e1      	b.n	801d550 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801d58c:	4438      	add	r0, r7
 801d58e:	eb01 040c 	add.w	r4, r1, ip
 801d592:	e796      	b.n	801d4c2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801d594:	4b03      	ldr	r3, [pc, #12]	; (801d5a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801d596:	6818      	ldr	r0, [r3, #0]
 801d598:	6803      	ldr	r3, [r0, #0]
 801d59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d59c:	4798      	blx	r3
 801d59e:	e768      	b.n	801d472 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801d5a0:	fffff800 	.word	0xfffff800
 801d5a4:	20025830 	.word	0x20025830
 801d5a8:	2002582a 	.word	0x2002582a

0801d5ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d5ac:	b4f0      	push	{r4, r5, r6, r7}
 801d5ae:	4616      	mov	r6, r2
 801d5b0:	2e01      	cmp	r6, #1
 801d5b2:	461c      	mov	r4, r3
 801d5b4:	460d      	mov	r5, r1
 801d5b6:	9a04      	ldr	r2, [sp, #16]
 801d5b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d5bc:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801d5c0:	d012      	beq.n	801d5e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801d5c2:	d303      	bcc.n	801d5cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801d5c4:	2e02      	cmp	r6, #2
 801d5c6:	d00a      	beq.n	801d5de <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801d5c8:	bcf0      	pop	{r4, r5, r6, r7}
 801d5ca:	4770      	bx	lr
 801d5cc:	6805      	ldr	r5, [r0, #0]
 801d5ce:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801d5d2:	68ed      	ldr	r5, [r5, #12]
 801d5d4:	4613      	mov	r3, r2
 801d5d6:	46ac      	mov	ip, r5
 801d5d8:	4622      	mov	r2, r4
 801d5da:	bcf0      	pop	{r4, r5, r6, r7}
 801d5dc:	4760      	bx	ip
 801d5de:	4621      	mov	r1, r4
 801d5e0:	4628      	mov	r0, r5
 801d5e2:	bcf0      	pop	{r4, r5, r6, r7}
 801d5e4:	f7ff bd94 	b.w	801d110 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d5e8:	4621      	mov	r1, r4
 801d5ea:	4628      	mov	r0, r5
 801d5ec:	bcf0      	pop	{r4, r5, r6, r7}
 801d5ee:	f7ff bee5 	b.w	801d3bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801d5f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5f8:	4681      	mov	r9, r0
 801d5fa:	b093      	sub	sp, #76	; 0x4c
 801d5fc:	6810      	ldr	r0, [r2, #0]
 801d5fe:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801d602:	4f6d      	ldr	r7, [pc, #436]	; (801d7b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801d604:	4688      	mov	r8, r1
 801d606:	6851      	ldr	r1, [r2, #4]
 801d608:	ac0e      	add	r4, sp, #56	; 0x38
 801d60a:	c403      	stmia	r4!, {r0, r1}
 801d60c:	6818      	ldr	r0, [r3, #0]
 801d60e:	6859      	ldr	r1, [r3, #4]
 801d610:	ac10      	add	r4, sp, #64	; 0x40
 801d612:	4616      	mov	r6, r2
 801d614:	c403      	stmia	r4!, {r0, r1}
 801d616:	a80e      	add	r0, sp, #56	; 0x38
 801d618:	f7f8 f816 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d61c:	4631      	mov	r1, r6
 801d61e:	a810      	add	r0, sp, #64	; 0x40
 801d620:	f7f8 f83a 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d624:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d628:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d62c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d630:	4e62      	ldr	r6, [pc, #392]	; (801d7bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d632:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801d636:	6830      	ldr	r0, [r6, #0]
 801d638:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801d63c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d640:	4489      	add	r9, r1
 801d642:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d646:	440a      	add	r2, r1
 801d648:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d64c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d650:	4413      	add	r3, r2
 801d652:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d656:	6803      	ldr	r3, [r0, #0]
 801d658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d65a:	4798      	blx	r3
 801d65c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d660:	6830      	ldr	r0, [r6, #0]
 801d662:	d01d      	beq.n	801d6a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d664:	2200      	movs	r2, #0
 801d666:	6801      	ldr	r1, [r0, #0]
 801d668:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d66c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d670:	220b      	movs	r2, #11
 801d672:	9207      	str	r2, [sp, #28]
 801d674:	883a      	ldrh	r2, [r7, #0]
 801d676:	9206      	str	r2, [sp, #24]
 801d678:	2201      	movs	r2, #1
 801d67a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801d67e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d682:	9203      	str	r2, [sp, #12]
 801d684:	b2a4      	uxth	r4, r4
 801d686:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d68a:	9200      	str	r2, [sp, #0]
 801d68c:	b2ad      	uxth	r5, r5
 801d68e:	9502      	str	r5, [sp, #8]
 801d690:	9401      	str	r4, [sp, #4]
 801d692:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d694:	4642      	mov	r2, r8
 801d696:	4649      	mov	r1, r9
 801d698:	47a0      	blx	r4
 801d69a:	b013      	add	sp, #76	; 0x4c
 801d69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6a0:	6803      	ldr	r3, [r0, #0]
 801d6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6a4:	4798      	blx	r3
 801d6a6:	883b      	ldrh	r3, [r7, #0]
 801d6a8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801d6ac:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801d6b0:	fb03 1202 	mla	r2, r3, r2, r1
 801d6b4:	435d      	muls	r5, r3
 801d6b6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d6ba:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801d6be:	920c      	str	r2, [sp, #48]	; 0x30
 801d6c0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d6c4:	1b12      	subs	r2, r2, r4
 801d6c6:	920d      	str	r2, [sp, #52]	; 0x34
 801d6c8:	0062      	lsls	r2, r4, #1
 801d6ca:	1b1c      	subs	r4, r3, r4
 801d6cc:	0063      	lsls	r3, r4, #1
 801d6ce:	920a      	str	r2, [sp, #40]	; 0x28
 801d6d0:	930b      	str	r3, [sp, #44]	; 0x2c
 801d6d2:	f04f 0e04 	mov.w	lr, #4
 801d6d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6d8:	4298      	cmp	r0, r3
 801d6da:	d266      	bcs.n	801d7aa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801d6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d6de:	eb00 0b03 	add.w	fp, r0, r3
 801d6e2:	4558      	cmp	r0, fp
 801d6e4:	d25c      	bcs.n	801d7a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d6e6:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d6ea:	fb1e e303 	smlabb	r3, lr, r3, lr
 801d6ee:	f858 2003 	ldr.w	r2, [r8, r3]
 801d6f2:	0e11      	lsrs	r1, r2, #24
 801d6f4:	d012      	beq.n	801d71c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d6f6:	29ff      	cmp	r1, #255	; 0xff
 801d6f8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801d6fc:	d110      	bne.n	801d720 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d6fe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d702:	d10d      	bne.n	801d720 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d704:	0953      	lsrs	r3, r2, #5
 801d706:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801d70a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d70e:	f027 0707 	bic.w	r7, r7, #7
 801d712:	431f      	orrs	r7, r3
 801d714:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d718:	433a      	orrs	r2, r7
 801d71a:	8002      	strh	r2, [r0, #0]
 801d71c:	3002      	adds	r0, #2
 801d71e:	e7e0      	b.n	801d6e2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801d720:	fb0a f101 	mul.w	r1, sl, r1
 801d724:	8806      	ldrh	r6, [r0, #0]
 801d726:	1c4b      	adds	r3, r1, #1
 801d728:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801d72c:	1235      	asrs	r5, r6, #8
 801d72e:	10f4      	asrs	r4, r6, #3
 801d730:	121b      	asrs	r3, r3, #8
 801d732:	00f6      	lsls	r6, r6, #3
 801d734:	b299      	uxth	r1, r3
 801d736:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d73a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d73e:	b2f6      	uxtb	r6, r6
 801d740:	43db      	mvns	r3, r3
 801d742:	b2d2      	uxtb	r2, r2
 801d744:	b2db      	uxtb	r3, r3
 801d746:	fb1c fc01 	smulbb	ip, ip, r1
 801d74a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d74e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d752:	fb12 f201 	smulbb	r2, r2, r1
 801d756:	fb05 c503 	mla	r5, r5, r3, ip
 801d75a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d75e:	b2ff      	uxtb	r7, r7
 801d760:	fb06 2203 	mla	r2, r6, r3, r2
 801d764:	b2ad      	uxth	r5, r5
 801d766:	fb17 f701 	smulbb	r7, r7, r1
 801d76a:	b292      	uxth	r2, r2
 801d76c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d770:	fb04 7403 	mla	r4, r4, r3, r7
 801d774:	f105 0c01 	add.w	ip, r5, #1
 801d778:	1c57      	adds	r7, r2, #1
 801d77a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d77e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d782:	b2a4      	uxth	r4, r4
 801d784:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d788:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d78c:	433d      	orrs	r5, r7
 801d78e:	1c67      	adds	r7, r4, #1
 801d790:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d794:	0964      	lsrs	r4, r4, #5
 801d796:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d79a:	4325      	orrs	r5, r4
 801d79c:	8005      	strh	r5, [r0, #0]
 801d79e:	e7bd      	b.n	801d71c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7a2:	4418      	add	r0, r3
 801d7a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7a6:	4499      	add	r9, r3
 801d7a8:	e795      	b.n	801d6d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801d7aa:	4b04      	ldr	r3, [pc, #16]	; (801d7bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d7ac:	6818      	ldr	r0, [r3, #0]
 801d7ae:	6803      	ldr	r3, [r0, #0]
 801d7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7b2:	4798      	blx	r3
 801d7b4:	e771      	b.n	801d69a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801d7b6:	bf00      	nop
 801d7b8:	2002582a 	.word	0x2002582a
 801d7bc:	20025830 	.word	0x20025830

0801d7c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7c4:	b087      	sub	sp, #28
 801d7c6:	4680      	mov	r8, r0
 801d7c8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d7cc:	460d      	mov	r5, r1
 801d7ce:	4614      	mov	r4, r2
 801d7d0:	2e00      	cmp	r6, #0
 801d7d2:	f000 80b9 	beq.w	801d948 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801d7d6:	6810      	ldr	r0, [r2, #0]
 801d7d8:	6851      	ldr	r1, [r2, #4]
 801d7da:	af02      	add	r7, sp, #8
 801d7dc:	c703      	stmia	r7!, {r0, r1}
 801d7de:	6818      	ldr	r0, [r3, #0]
 801d7e0:	6859      	ldr	r1, [r3, #4]
 801d7e2:	af04      	add	r7, sp, #16
 801d7e4:	c703      	stmia	r7!, {r0, r1}
 801d7e6:	a802      	add	r0, sp, #8
 801d7e8:	f7f7 ff2e 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d7ec:	4621      	mov	r1, r4
 801d7ee:	a804      	add	r0, sp, #16
 801d7f0:	f7f7 ff52 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d7f4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d7f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d7fc:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801d800:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d804:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d808:	eb08 0401 	add.w	r4, r8, r1
 801d80c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d810:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d814:	440a      	add	r2, r1
 801d816:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d81a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d81e:	4413      	add	r3, r2
 801d820:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d824:	4b4a      	ldr	r3, [pc, #296]	; (801d950 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d826:	6818      	ldr	r0, [r3, #0]
 801d828:	6803      	ldr	r3, [r0, #0]
 801d82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d82c:	4798      	blx	r3
 801d82e:	4b49      	ldr	r3, [pc, #292]	; (801d954 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801d830:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d834:	881a      	ldrh	r2, [r3, #0]
 801d836:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d83a:	2eff      	cmp	r6, #255	; 0xff
 801d83c:	fb02 c101 	mla	r1, r2, r1, ip
 801d840:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d844:	fb02 f207 	mul.w	r2, r2, r7
 801d848:	f105 0104 	add.w	r1, r5, #4
 801d84c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801d850:	461d      	mov	r5, r3
 801d852:	d05a      	beq.n	801d90a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801d854:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d858:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d85c:	b2b6      	uxth	r6, r6
 801d85e:	fa1f fe8e 	uxth.w	lr, lr
 801d862:	9301      	str	r3, [sp, #4]
 801d864:	4282      	cmp	r2, r0
 801d866:	d96a      	bls.n	801d93e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d868:	eb00 0b0a 	add.w	fp, r0, sl
 801d86c:	4583      	cmp	fp, r0
 801d86e:	d940      	bls.n	801d8f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801d870:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d874:	8805      	ldrh	r5, [r0, #0]
 801d876:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d87a:	122f      	asrs	r7, r5, #8
 801d87c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d880:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d884:	fb17 f70e 	smulbb	r7, r7, lr
 801d888:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d88c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d890:	00ed      	lsls	r5, r5, #3
 801d892:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d896:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d89a:	10df      	asrs	r7, r3, #3
 801d89c:	b2ed      	uxtb	r5, r5
 801d89e:	00db      	lsls	r3, r3, #3
 801d8a0:	fa1f fc8c 	uxth.w	ip, ip
 801d8a4:	fb19 f90e 	smulbb	r9, r9, lr
 801d8a8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d8ac:	b2db      	uxtb	r3, r3
 801d8ae:	fb15 f50e 	smulbb	r5, r5, lr
 801d8b2:	fb07 9706 	mla	r7, r7, r6, r9
 801d8b6:	fb03 5306 	mla	r3, r3, r6, r5
 801d8ba:	f10c 0901 	add.w	r9, ip, #1
 801d8be:	b29b      	uxth	r3, r3
 801d8c0:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d8c4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d8c8:	f103 0c01 	add.w	ip, r3, #1
 801d8cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d8d0:	b2bf      	uxth	r7, r7
 801d8d2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d8d6:	ea4c 0c09 	orr.w	ip, ip, r9
 801d8da:	f107 0901 	add.w	r9, r7, #1
 801d8de:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d8e2:	097f      	lsrs	r7, r7, #5
 801d8e4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d8e8:	ea4c 0c07 	orr.w	ip, ip, r7
 801d8ec:	f820 cb02 	strh.w	ip, [r0], #2
 801d8f0:	e7bc      	b.n	801d86c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801d8f2:	9b01      	ldr	r3, [sp, #4]
 801d8f4:	881b      	ldrh	r3, [r3, #0]
 801d8f6:	eba3 0308 	sub.w	r3, r3, r8
 801d8fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d8fe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d902:	eba3 0308 	sub.w	r3, r3, r8
 801d906:	441c      	add	r4, r3
 801d908:	e7ac      	b.n	801d864 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801d90a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d90e:	4282      	cmp	r2, r0
 801d910:	d915      	bls.n	801d93e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d912:	eb00 060a 	add.w	r6, r0, sl
 801d916:	4286      	cmp	r6, r0
 801d918:	d906      	bls.n	801d928 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801d91a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d91e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d922:	f820 3b02 	strh.w	r3, [r0], #2
 801d926:	e7f6      	b.n	801d916 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801d928:	882b      	ldrh	r3, [r5, #0]
 801d92a:	eba3 0308 	sub.w	r3, r3, r8
 801d92e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d932:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d936:	eba3 0308 	sub.w	r3, r3, r8
 801d93a:	441c      	add	r4, r3
 801d93c:	e7e7      	b.n	801d90e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801d93e:	4b04      	ldr	r3, [pc, #16]	; (801d950 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d940:	6818      	ldr	r0, [r3, #0]
 801d942:	6803      	ldr	r3, [r0, #0]
 801d944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d946:	4798      	blx	r3
 801d948:	b007      	add	sp, #28
 801d94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d94e:	bf00      	nop
 801d950:	20025830 	.word	0x20025830
 801d954:	2002582a 	.word	0x2002582a

0801d958 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d95c:	b091      	sub	sp, #68	; 0x44
 801d95e:	4680      	mov	r8, r0
 801d960:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801d964:	460f      	mov	r7, r1
 801d966:	4614      	mov	r4, r2
 801d968:	2d00      	cmp	r5, #0
 801d96a:	d051      	beq.n	801da10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d96c:	6810      	ldr	r0, [r2, #0]
 801d96e:	6851      	ldr	r1, [r2, #4]
 801d970:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801db74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801d974:	ae0c      	add	r6, sp, #48	; 0x30
 801d976:	c603      	stmia	r6!, {r0, r1}
 801d978:	6818      	ldr	r0, [r3, #0]
 801d97a:	6859      	ldr	r1, [r3, #4]
 801d97c:	ae0e      	add	r6, sp, #56	; 0x38
 801d97e:	c603      	stmia	r6!, {r0, r1}
 801d980:	a80c      	add	r0, sp, #48	; 0x30
 801d982:	f7f7 fe61 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d986:	4621      	mov	r1, r4
 801d988:	a80e      	add	r0, sp, #56	; 0x38
 801d98a:	f7f7 fe85 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d98e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d992:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d996:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d99a:	f8d9 0000 	ldr.w	r0, [r9]
 801d99e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801d9a2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d9a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d9aa:	eb08 0401 	add.w	r4, r8, r1
 801d9ae:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d9b2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801db78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801d9b6:	440a      	add	r2, r1
 801d9b8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d9bc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d9c0:	4413      	add	r3, r2
 801d9c2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d9c6:	6803      	ldr	r3, [r0, #0]
 801d9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9ca:	4798      	blx	r3
 801d9cc:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d9d0:	f8d9 0000 	ldr.w	r0, [r9]
 801d9d4:	d01f      	beq.n	801da16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d9d6:	2200      	movs	r2, #0
 801d9d8:	6801      	ldr	r1, [r0, #0]
 801d9da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d9de:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d9e2:	220b      	movs	r2, #11
 801d9e4:	9207      	str	r2, [sp, #28]
 801d9e6:	f8b8 2000 	ldrh.w	r2, [r8]
 801d9ea:	9206      	str	r2, [sp, #24]
 801d9ec:	2201      	movs	r2, #1
 801d9ee:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801d9f2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d9f6:	9203      	str	r2, [sp, #12]
 801d9f8:	fa1f f28a 	uxth.w	r2, sl
 801d9fc:	9202      	str	r2, [sp, #8]
 801d9fe:	b2b6      	uxth	r6, r6
 801da00:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801da04:	9200      	str	r2, [sp, #0]
 801da06:	9601      	str	r6, [sp, #4]
 801da08:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801da0a:	463a      	mov	r2, r7
 801da0c:	4621      	mov	r1, r4
 801da0e:	47a8      	blx	r5
 801da10:	b011      	add	sp, #68	; 0x44
 801da12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da16:	6803      	ldr	r3, [r0, #0]
 801da18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da1a:	4798      	blx	r3
 801da1c:	f8b8 2000 	ldrh.w	r2, [r8]
 801da20:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801da24:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801da28:	2dff      	cmp	r5, #255	; 0xff
 801da2a:	fb02 1303 	mla	r3, r2, r3, r1
 801da2e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801da32:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801da36:	fb0a fa02 	mul.w	sl, sl, r2
 801da3a:	d062      	beq.n	801db02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801da3c:	ea6f 0c05 	mvn.w	ip, r5
 801da40:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801da44:	930a      	str	r3, [sp, #40]	; 0x28
 801da46:	b2ad      	uxth	r5, r5
 801da48:	fa5f fc8c 	uxtb.w	ip, ip
 801da4c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801da50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da52:	4298      	cmp	r0, r3
 801da54:	f080 8085 	bcs.w	801db62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801da58:	eb00 0b09 	add.w	fp, r0, r9
 801da5c:	4558      	cmp	r0, fp
 801da5e:	d246      	bcs.n	801daee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801da60:	f814 eb01 	ldrb.w	lr, [r4], #1
 801da64:	2303      	movs	r3, #3
 801da66:	2204      	movs	r2, #4
 801da68:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801da6c:	eb07 0a0e 	add.w	sl, r7, lr
 801da70:	8803      	ldrh	r3, [r0, #0]
 801da72:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801da76:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801da7a:	1219      	asrs	r1, r3, #8
 801da7c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801da80:	fb18 f805 	smulbb	r8, r8, r5
 801da84:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801da88:	10da      	asrs	r2, r3, #3
 801da8a:	fb01 810c 	mla	r1, r1, ip, r8
 801da8e:	00db      	lsls	r3, r3, #3
 801da90:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801da94:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801da98:	b2db      	uxtb	r3, r3
 801da9a:	fb18 f805 	smulbb	r8, r8, r5
 801da9e:	fb1e fe05 	smulbb	lr, lr, r5
 801daa2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801daa6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801daaa:	b289      	uxth	r1, r1
 801daac:	fb02 820c 	mla	r2, r2, ip, r8
 801dab0:	fb03 e30c 	mla	r3, r3, ip, lr
 801dab4:	b292      	uxth	r2, r2
 801dab6:	b29b      	uxth	r3, r3
 801dab8:	f101 0801 	add.w	r8, r1, #1
 801dabc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dac0:	f103 0e01 	add.w	lr, r3, #1
 801dac4:	f102 0801 	add.w	r8, r2, #1
 801dac8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801dacc:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801dad0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801dad4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801dad8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801dadc:	ea4e 0101 	orr.w	r1, lr, r1
 801dae0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801dae4:	ea41 0108 	orr.w	r1, r1, r8
 801dae8:	f820 1b02 	strh.w	r1, [r0], #2
 801daec:	e7b6      	b.n	801da5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801daee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801daf0:	881b      	ldrh	r3, [r3, #0]
 801daf2:	1b9b      	subs	r3, r3, r6
 801daf4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801daf8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dafc:	1b9b      	subs	r3, r3, r6
 801dafe:	441c      	add	r4, r3
 801db00:	e7a6      	b.n	801da50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801db02:	491b      	ldr	r1, [pc, #108]	; (801db70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801db04:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801db08:	2203      	movs	r2, #3
 801db0a:	2504      	movs	r5, #4
 801db0c:	4550      	cmp	r0, sl
 801db0e:	d228      	bcs.n	801db62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801db10:	eb00 0c09 	add.w	ip, r0, r9
 801db14:	4560      	cmp	r0, ip
 801db16:	4623      	mov	r3, r4
 801db18:	d219      	bcs.n	801db4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801db1a:	f893 e000 	ldrb.w	lr, [r3]
 801db1e:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801db22:	eb07 0b0e 	add.w	fp, r7, lr
 801db26:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801db2a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801db2e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801db32:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801db36:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801db3a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801db3e:	ea43 030b 	orr.w	r3, r3, fp
 801db42:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801db46:	3401      	adds	r4, #1
 801db48:	f820 3b02 	strh.w	r3, [r0], #2
 801db4c:	e7e2      	b.n	801db14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801db4e:	f8b8 3000 	ldrh.w	r3, [r8]
 801db52:	1b9b      	subs	r3, r3, r6
 801db54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801db58:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801db5c:	1b9b      	subs	r3, r3, r6
 801db5e:	441c      	add	r4, r3
 801db60:	e7d4      	b.n	801db0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801db62:	4b04      	ldr	r3, [pc, #16]	; (801db74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801db64:	6818      	ldr	r0, [r3, #0]
 801db66:	6803      	ldr	r3, [r0, #0]
 801db68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db6a:	4798      	blx	r3
 801db6c:	e750      	b.n	801da10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801db6e:	bf00      	nop
 801db70:	fffff800 	.word	0xfffff800
 801db74:	20025830 	.word	0x20025830
 801db78:	2002582a 	.word	0x2002582a

0801db7c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801db7c:	b4f0      	push	{r4, r5, r6, r7}
 801db7e:	460c      	mov	r4, r1
 801db80:	4611      	mov	r1, r2
 801db82:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801db86:	780f      	ldrb	r7, [r1, #0]
 801db88:	784e      	ldrb	r6, [r1, #1]
 801db8a:	2f01      	cmp	r7, #1
 801db8c:	461a      	mov	r2, r3
 801db8e:	9b04      	ldr	r3, [sp, #16]
 801db90:	d036      	beq.n	801dc00 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 801db92:	d31e      	bcc.n	801dbd2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 801db94:	2f02      	cmp	r7, #2
 801db96:	d14a      	bne.n	801dc2e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801db98:	2e03      	cmp	r6, #3
 801db9a:	d848      	bhi.n	801dc2e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801db9c:	e8df f006 	tbb	[pc, r6]
 801dba0:	16140702 	.word	0x16140702
 801dba4:	9504      	str	r5, [sp, #16]
 801dba6:	4620      	mov	r0, r4
 801dba8:	bcf0      	pop	{r4, r5, r6, r7}
 801dbaa:	f7ff be09 	b.w	801d7c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801dbae:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801dbb0:	2800      	cmp	r0, #0
 801dbb2:	d03c      	beq.n	801dc2e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801dbb4:	6806      	ldr	r6, [r0, #0]
 801dbb6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801dbba:	68b5      	ldr	r5, [r6, #8]
 801dbbc:	4613      	mov	r3, r2
 801dbbe:	46ac      	mov	ip, r5
 801dbc0:	460a      	mov	r2, r1
 801dbc2:	4621      	mov	r1, r4
 801dbc4:	bcf0      	pop	{r4, r5, r6, r7}
 801dbc6:	4760      	bx	ip
 801dbc8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801dbca:	e7f1      	b.n	801dbb0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801dbcc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801dbd0:	e7ee      	b.n	801dbb0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801dbd2:	2e03      	cmp	r6, #3
 801dbd4:	d82b      	bhi.n	801dc2e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801dbd6:	e8df f006 	tbb	[pc, r6]
 801dbda:	0702      	.short	0x0702
 801dbdc:	100e      	.short	0x100e
 801dbde:	9504      	str	r5, [sp, #16]
 801dbe0:	4620      	mov	r0, r4
 801dbe2:	bcf0      	pop	{r4, r5, r6, r7}
 801dbe4:	f7ff bd06 	b.w	801d5f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801dbe8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801dbea:	b300      	cbz	r0, 801dc2e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801dbec:	6806      	ldr	r6, [r0, #0]
 801dbee:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801dbf2:	68f5      	ldr	r5, [r6, #12]
 801dbf4:	e7e2      	b.n	801dbbc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801dbf6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801dbf8:	e7f7      	b.n	801dbea <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 801dbfa:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801dbfe:	e7f4      	b.n	801dbea <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 801dc00:	2e03      	cmp	r6, #3
 801dc02:	d814      	bhi.n	801dc2e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801dc04:	e8df f006 	tbb	[pc, r6]
 801dc08:	100e0702 	.word	0x100e0702
 801dc0c:	9504      	str	r5, [sp, #16]
 801dc0e:	4620      	mov	r0, r4
 801dc10:	bcf0      	pop	{r4, r5, r6, r7}
 801dc12:	f7ff bea1 	b.w	801d958 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801dc16:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801dc18:	b148      	cbz	r0, 801dc2e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801dc1a:	6806      	ldr	r6, [r0, #0]
 801dc1c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801dc20:	6935      	ldr	r5, [r6, #16]
 801dc22:	e7cb      	b.n	801dbbc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801dc24:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801dc26:	e7f7      	b.n	801dc18 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 801dc28:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801dc2c:	e7f4      	b.n	801dc18 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 801dc2e:	bcf0      	pop	{r4, r5, r6, r7}
 801dc30:	4770      	bx	lr
	...

0801dc34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801dc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc38:	4604      	mov	r4, r0
 801dc3a:	b087      	sub	sp, #28
 801dc3c:	6810      	ldr	r0, [r2, #0]
 801dc3e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801dc42:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801de7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801dc46:	460e      	mov	r6, r1
 801dc48:	6851      	ldr	r1, [r2, #4]
 801dc4a:	ad02      	add	r5, sp, #8
 801dc4c:	c503      	stmia	r5!, {r0, r1}
 801dc4e:	6818      	ldr	r0, [r3, #0]
 801dc50:	6859      	ldr	r1, [r3, #4]
 801dc52:	ad04      	add	r5, sp, #16
 801dc54:	4617      	mov	r7, r2
 801dc56:	c503      	stmia	r5!, {r0, r1}
 801dc58:	a802      	add	r0, sp, #8
 801dc5a:	f7f7 fcf5 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc5e:	4639      	mov	r1, r7
 801dc60:	a804      	add	r0, sp, #16
 801dc62:	f7f7 fd19 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc66:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dc6a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dc6e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801dc72:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801dc76:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801dc7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dc7e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801dc82:	440e      	add	r6, r1
 801dc84:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801dc88:	440a      	add	r2, r1
 801dc8a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dc8e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801dc92:	4413      	add	r3, r2
 801dc94:	f8ad 3012 	strh.w	r3, [sp, #18]
 801dc98:	4b77      	ldr	r3, [pc, #476]	; (801de78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801dc9a:	6818      	ldr	r0, [r3, #0]
 801dc9c:	6803      	ldr	r3, [r0, #0]
 801dc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dca0:	4798      	blx	r3
 801dca2:	f8b9 b000 	ldrh.w	fp, [r9]
 801dca6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dcaa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dcae:	fb0b 2303 	mla	r3, fp, r3, r2
 801dcb2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dcb6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dcba:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dcbe:	fb05 f50b 	mul.w	r5, r5, fp
 801dcc2:	9300      	str	r3, [sp, #0]
 801dcc4:	d069      	beq.n	801dd9a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801dcc6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801dcca:	4558      	cmp	r0, fp
 801dccc:	f080 80cc 	bcs.w	801de68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801dcd0:	9b00      	ldr	r3, [sp, #0]
 801dcd2:	18c3      	adds	r3, r0, r3
 801dcd4:	9301      	str	r3, [sp, #4]
 801dcd6:	4631      	mov	r1, r6
 801dcd8:	9b01      	ldr	r3, [sp, #4]
 801dcda:	4298      	cmp	r0, r3
 801dcdc:	d24f      	bcs.n	801dd7e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801dcde:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dce2:	2a00      	cmp	r2, #0
 801dce4:	d048      	beq.n	801dd78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dce6:	fb0a f202 	mul.w	r2, sl, r2
 801dcea:	1c53      	adds	r3, r2, #1
 801dcec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dcf0:	121b      	asrs	r3, r3, #8
 801dcf2:	d041      	beq.n	801dd78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dcf4:	8802      	ldrh	r2, [r0, #0]
 801dcf6:	f8b4 c000 	ldrh.w	ip, [r4]
 801dcfa:	b29e      	uxth	r6, r3
 801dcfc:	1215      	asrs	r5, r2, #8
 801dcfe:	43db      	mvns	r3, r3
 801dd00:	b2db      	uxtb	r3, r3
 801dd02:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dd06:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dd0a:	fb15 f503 	smulbb	r5, r5, r3
 801dd0e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801dd12:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dd16:	00d2      	lsls	r2, r2, #3
 801dd18:	fb07 5706 	mla	r7, r7, r6, r5
 801dd1c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801dd20:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801dd24:	b2d2      	uxtb	r2, r2
 801dd26:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dd2a:	b2bf      	uxth	r7, r7
 801dd2c:	fb1e fe03 	smulbb	lr, lr, r3
 801dd30:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dd34:	fa5f fc8c 	uxtb.w	ip, ip
 801dd38:	fb12 f203 	smulbb	r2, r2, r3
 801dd3c:	fb05 e506 	mla	r5, r5, r6, lr
 801dd40:	fb0c 2c06 	mla	ip, ip, r6, r2
 801dd44:	f107 0e01 	add.w	lr, r7, #1
 801dd48:	fa1f fc8c 	uxth.w	ip, ip
 801dd4c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801dd50:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801dd54:	f10c 0701 	add.w	r7, ip, #1
 801dd58:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dd5c:	b2ad      	uxth	r5, r5
 801dd5e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801dd62:	ea47 070e 	orr.w	r7, r7, lr
 801dd66:	f105 0e01 	add.w	lr, r5, #1
 801dd6a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801dd6e:	096d      	lsrs	r5, r5, #5
 801dd70:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dd74:	432f      	orrs	r7, r5
 801dd76:	8007      	strh	r7, [r0, #0]
 801dd78:	3002      	adds	r0, #2
 801dd7a:	3402      	adds	r4, #2
 801dd7c:	e7ac      	b.n	801dcd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801dd7e:	f8b9 3000 	ldrh.w	r3, [r9]
 801dd82:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801dd86:	eba3 0308 	sub.w	r3, r3, r8
 801dd8a:	eba6 0608 	sub.w	r6, r6, r8
 801dd8e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801dd92:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dd96:	440e      	add	r6, r1
 801dd98:	e797      	b.n	801dcca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801dd9a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801dd9e:	42a8      	cmp	r0, r5
 801dda0:	d262      	bcs.n	801de68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801dda2:	9b00      	ldr	r3, [sp, #0]
 801dda4:	4631      	mov	r1, r6
 801dda6:	eb00 0b03 	add.w	fp, r0, r3
 801ddaa:	4558      	cmp	r0, fp
 801ddac:	d24e      	bcs.n	801de4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801ddae:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ddb2:	b12b      	cbz	r3, 801ddc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801ddb4:	2bff      	cmp	r3, #255	; 0xff
 801ddb6:	f8b4 e000 	ldrh.w	lr, [r4]
 801ddba:	d104      	bne.n	801ddc6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801ddbc:	f8a0 e000 	strh.w	lr, [r0]
 801ddc0:	3002      	adds	r0, #2
 801ddc2:	3402      	adds	r4, #2
 801ddc4:	e7f1      	b.n	801ddaa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801ddc6:	8802      	ldrh	r2, [r0, #0]
 801ddc8:	b29f      	uxth	r7, r3
 801ddca:	1216      	asrs	r6, r2, #8
 801ddcc:	43db      	mvns	r3, r3
 801ddce:	b2db      	uxtb	r3, r3
 801ddd0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ddd4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ddd8:	fb16 f603 	smulbb	r6, r6, r3
 801dddc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801dde0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dde4:	00d2      	lsls	r2, r2, #3
 801dde6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ddea:	b2d2      	uxtb	r2, r2
 801ddec:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ddf0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ddf4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ddf8:	fb1a fa03 	smulbb	sl, sl, r3
 801ddfc:	fa1f fc8c 	uxth.w	ip, ip
 801de00:	fb12 f303 	smulbb	r3, r2, r3
 801de04:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801de08:	fa5f fe8e 	uxtb.w	lr, lr
 801de0c:	fb06 a607 	mla	r6, r6, r7, sl
 801de10:	f10c 0201 	add.w	r2, ip, #1
 801de14:	fb0e 3307 	mla	r3, lr, r7, r3
 801de18:	b2b6      	uxth	r6, r6
 801de1a:	b29b      	uxth	r3, r3
 801de1c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801de20:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801de24:	f106 0a01 	add.w	sl, r6, #1
 801de28:	f103 0c01 	add.w	ip, r3, #1
 801de2c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801de30:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801de34:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801de38:	0976      	lsrs	r6, r6, #5
 801de3a:	ea4c 0c02 	orr.w	ip, ip, r2
 801de3e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801de42:	ea4c 0c06 	orr.w	ip, ip, r6
 801de46:	f8a0 c000 	strh.w	ip, [r0]
 801de4a:	e7b9      	b.n	801ddc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801de4c:	f8b9 3000 	ldrh.w	r3, [r9]
 801de50:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801de54:	eba3 0308 	sub.w	r3, r3, r8
 801de58:	eba6 0608 	sub.w	r6, r6, r8
 801de5c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801de60:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801de64:	440e      	add	r6, r1
 801de66:	e79a      	b.n	801dd9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801de68:	4b03      	ldr	r3, [pc, #12]	; (801de78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801de6a:	6818      	ldr	r0, [r3, #0]
 801de6c:	6803      	ldr	r3, [r0, #0]
 801de6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de70:	4798      	blx	r3
 801de72:	b007      	add	sp, #28
 801de74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de78:	20025830 	.word	0x20025830
 801de7c:	2002582a 	.word	0x2002582a

0801de80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de84:	b089      	sub	sp, #36	; 0x24
 801de86:	4682      	mov	sl, r0
 801de88:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801de8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801de8e:	460f      	mov	r7, r1
 801de90:	4691      	mov	r9, r2
 801de92:	4698      	mov	r8, r3
 801de94:	2e00      	cmp	r6, #0
 801de96:	d03d      	beq.n	801df14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801de98:	4608      	mov	r0, r1
 801de9a:	f7fa fe61 	bl	8018b60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801de9e:	4605      	mov	r5, r0
 801dea0:	4638      	mov	r0, r7
 801dea2:	f7fa fe91 	bl	8018bc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dea6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801deaa:	4638      	mov	r0, r7
 801deac:	f8ad 9008 	strh.w	r9, [sp, #8]
 801deb0:	f8ad 500c 	strh.w	r5, [sp, #12]
 801deb4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801deb8:	f7fa ff3e 	bl	8018d38 <_ZNK8touchgfx6Bitmap7getDataEv>
 801debc:	4605      	mov	r5, r0
 801debe:	4638      	mov	r0, r7
 801dec0:	f7fa ff6a 	bl	8018d98 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dec4:	4681      	mov	r9, r0
 801dec6:	4638      	mov	r0, r7
 801dec8:	f7fa ffba 	bl	8018e40 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801decc:	280b      	cmp	r0, #11
 801dece:	d821      	bhi.n	801df14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801ded0:	e8df f000 	tbb	[pc, r0]
 801ded4:	2006aebe 	.word	0x2006aebe
 801ded8:	20202020 	.word	0x20202020
 801dedc:	b5202020 	.word	0xb5202020
 801dee0:	4bb0      	ldr	r3, [pc, #704]	; (801e1a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801dee2:	6818      	ldr	r0, [r3, #0]
 801dee4:	6803      	ldr	r3, [r0, #0]
 801dee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dee8:	4798      	blx	r3
 801deea:	2eff      	cmp	r6, #255	; 0xff
 801deec:	d101      	bne.n	801def2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801deee:	0683      	lsls	r3, r0, #26
 801def0:	d506      	bpl.n	801df00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 801def2:	4633      	mov	r3, r6
 801def4:	4622      	mov	r2, r4
 801def6:	a902      	add	r1, sp, #8
 801def8:	4628      	mov	r0, r5
 801defa:	f7ff f909 	bl	801d110 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801defe:	e009      	b.n	801df14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801df00:	4638      	mov	r0, r7
 801df02:	f7fa fee1 	bl	8018cc8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801df06:	b940      	cbnz	r0, 801df1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801df08:	4623      	mov	r3, r4
 801df0a:	aa02      	add	r2, sp, #8
 801df0c:	4629      	mov	r1, r5
 801df0e:	4650      	mov	r0, sl
 801df10:	f7ff f9e4 	bl	801d2dc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801df14:	b009      	add	sp, #36	; 0x24
 801df16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df1a:	f10d 0818 	add.w	r8, sp, #24
 801df1e:	4639      	mov	r1, r7
 801df20:	4640      	mov	r0, r8
 801df22:	f7fa fe85 	bl	8018c30 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801df26:	e898 0003 	ldmia.w	r8, {r0, r1}
 801df2a:	af04      	add	r7, sp, #16
 801df2c:	e887 0003 	stmia.w	r7, {r0, r1}
 801df30:	4638      	mov	r0, r7
 801df32:	4621      	mov	r1, r4
 801df34:	f7f4 fa2c 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 801df38:	4638      	mov	r0, r7
 801df3a:	f7f4 fa6c 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 801df3e:	2800      	cmp	r0, #0
 801df40:	d1d7      	bne.n	801def2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801df42:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df46:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801df4a:	4293      	cmp	r3, r2
 801df4c:	dd12      	ble.n	801df74 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 801df4e:	1a9b      	subs	r3, r3, r2
 801df50:	f9b4 0000 	ldrsh.w	r0, [r4]
 801df54:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801df58:	f8ad 0018 	strh.w	r0, [sp, #24]
 801df5c:	f8ad 201a 	strh.w	r2, [sp, #26]
 801df60:	f8ad 101c 	strh.w	r1, [sp, #28]
 801df64:	f8ad 301e 	strh.w	r3, [sp, #30]
 801df68:	4642      	mov	r2, r8
 801df6a:	4633      	mov	r3, r6
 801df6c:	a902      	add	r1, sp, #8
 801df6e:	4628      	mov	r0, r5
 801df70:	f7ff f8ce 	bl	801d110 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801df74:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801df78:	f9b4 2000 	ldrsh.w	r2, [r4]
 801df7c:	4293      	cmp	r3, r2
 801df7e:	dd12      	ble.n	801dfa6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 801df80:	1a9b      	subs	r3, r3, r2
 801df82:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801df86:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801df8a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801df8e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801df92:	f8ad 301c 	strh.w	r3, [sp, #28]
 801df96:	f8ad 101e 	strh.w	r1, [sp, #30]
 801df9a:	23ff      	movs	r3, #255	; 0xff
 801df9c:	4642      	mov	r2, r8
 801df9e:	a902      	add	r1, sp, #8
 801dfa0:	4628      	mov	r0, r5
 801dfa2:	f7ff f8b5 	bl	801d110 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dfa6:	463b      	mov	r3, r7
 801dfa8:	aa02      	add	r2, sp, #8
 801dfaa:	4629      	mov	r1, r5
 801dfac:	4650      	mov	r0, sl
 801dfae:	f7ff f995 	bl	801d2dc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801dfb2:	88a2      	ldrh	r2, [r4, #4]
 801dfb4:	8823      	ldrh	r3, [r4, #0]
 801dfb6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801dfba:	4413      	add	r3, r2
 801dfbc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dfc0:	440a      	add	r2, r1
 801dfc2:	b29b      	uxth	r3, r3
 801dfc4:	b292      	uxth	r2, r2
 801dfc6:	b211      	sxth	r1, r2
 801dfc8:	b218      	sxth	r0, r3
 801dfca:	4288      	cmp	r0, r1
 801dfcc:	dd12      	ble.n	801dff4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801dfce:	1a9b      	subs	r3, r3, r2
 801dfd0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801dfd4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801dfd8:	f8ad 1018 	strh.w	r1, [sp, #24]
 801dfdc:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dfe0:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dfe4:	23ff      	movs	r3, #255	; 0xff
 801dfe6:	4642      	mov	r2, r8
 801dfe8:	a902      	add	r1, sp, #8
 801dfea:	4628      	mov	r0, r5
 801dfec:	f8ad 601a 	strh.w	r6, [sp, #26]
 801dff0:	f7ff f88e 	bl	801d110 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dff4:	88e2      	ldrh	r2, [r4, #6]
 801dff6:	8863      	ldrh	r3, [r4, #2]
 801dff8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801dffc:	4413      	add	r3, r2
 801dffe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e002:	440a      	add	r2, r1
 801e004:	b29b      	uxth	r3, r3
 801e006:	b292      	uxth	r2, r2
 801e008:	b211      	sxth	r1, r2
 801e00a:	b218      	sxth	r0, r3
 801e00c:	4288      	cmp	r0, r1
 801e00e:	dd81      	ble.n	801df14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e010:	1a9b      	subs	r3, r3, r2
 801e012:	f9b4 6000 	ldrsh.w	r6, [r4]
 801e016:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e01a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e01e:	f8ad 6018 	strh.w	r6, [sp, #24]
 801e022:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e026:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e02a:	23ff      	movs	r3, #255	; 0xff
 801e02c:	4642      	mov	r2, r8
 801e02e:	e762      	b.n	801def6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e030:	4633      	mov	r3, r6
 801e032:	4622      	mov	r2, r4
 801e034:	a902      	add	r1, sp, #8
 801e036:	4628      	mov	r0, r5
 801e038:	f7ff f9c0 	bl	801d3bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801e03c:	e76a      	b.n	801df14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e03e:	e9cd 4600 	strd	r4, r6, [sp]
 801e042:	ab02      	add	r3, sp, #8
 801e044:	464a      	mov	r2, r9
 801e046:	4629      	mov	r1, r5
 801e048:	4650      	mov	r0, sl
 801e04a:	f7ff fd97 	bl	801db7c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e04e:	e761      	b.n	801df14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e050:	4638      	mov	r0, r7
 801e052:	f7fa fe39 	bl	8018cc8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e056:	b950      	cbnz	r0, 801e06e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 801e058:	e9cd 6000 	strd	r6, r0, [sp]
 801e05c:	f8da 3000 	ldr.w	r3, [sl]
 801e060:	aa02      	add	r2, sp, #8
 801e062:	68de      	ldr	r6, [r3, #12]
 801e064:	4629      	mov	r1, r5
 801e066:	4623      	mov	r3, r4
 801e068:	4650      	mov	r0, sl
 801e06a:	47b0      	blx	r6
 801e06c:	e752      	b.n	801df14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e06e:	f10d 0818 	add.w	r8, sp, #24
 801e072:	4639      	mov	r1, r7
 801e074:	4640      	mov	r0, r8
 801e076:	f7fa fddb 	bl	8018c30 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e07a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e07e:	af04      	add	r7, sp, #16
 801e080:	e887 0003 	stmia.w	r7, {r0, r1}
 801e084:	4638      	mov	r0, r7
 801e086:	4621      	mov	r1, r4
 801e088:	f7f4 f982 	bl	8012390 <_ZN8touchgfx4RectaNERKS0_>
 801e08c:	4638      	mov	r0, r7
 801e08e:	f7f4 f9c2 	bl	8012416 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e092:	b138      	cbz	r0, 801e0a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801e094:	9600      	str	r6, [sp, #0]
 801e096:	4623      	mov	r3, r4
 801e098:	aa02      	add	r2, sp, #8
 801e09a:	4649      	mov	r1, r9
 801e09c:	4628      	mov	r0, r5
 801e09e:	f7ff fdc9 	bl	801dc34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e0a2:	e737      	b.n	801df14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e0a4:	e9cd 6000 	strd	r6, r0, [sp]
 801e0a8:	f8da 3000 	ldr.w	r3, [sl]
 801e0ac:	aa02      	add	r2, sp, #8
 801e0ae:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801e0b2:	4629      	mov	r1, r5
 801e0b4:	463b      	mov	r3, r7
 801e0b6:	4650      	mov	r0, sl
 801e0b8:	47d8      	blx	fp
 801e0ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e0be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e0c2:	4293      	cmp	r3, r2
 801e0c4:	dd13      	ble.n	801e0ee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 801e0c6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e0ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e0ce:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e0d2:	1a9b      	subs	r3, r3, r2
 801e0d4:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e0d8:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e0dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e0e0:	9600      	str	r6, [sp, #0]
 801e0e2:	4643      	mov	r3, r8
 801e0e4:	aa02      	add	r2, sp, #8
 801e0e6:	4649      	mov	r1, r9
 801e0e8:	4628      	mov	r0, r5
 801e0ea:	f7ff fda3 	bl	801dc34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e0ee:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e0f2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e0f6:	4293      	cmp	r3, r2
 801e0f8:	dd13      	ble.n	801e122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 801e0fa:	1a9b      	subs	r3, r3, r2
 801e0fc:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e100:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e104:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e108:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e10c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e110:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e114:	9600      	str	r6, [sp, #0]
 801e116:	4643      	mov	r3, r8
 801e118:	aa02      	add	r2, sp, #8
 801e11a:	4649      	mov	r1, r9
 801e11c:	4628      	mov	r0, r5
 801e11e:	f7ff fd89 	bl	801dc34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e122:	88a2      	ldrh	r2, [r4, #4]
 801e124:	8823      	ldrh	r3, [r4, #0]
 801e126:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e12a:	4413      	add	r3, r2
 801e12c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e130:	440a      	add	r2, r1
 801e132:	b29b      	uxth	r3, r3
 801e134:	b292      	uxth	r2, r2
 801e136:	b211      	sxth	r1, r2
 801e138:	b218      	sxth	r0, r3
 801e13a:	4288      	cmp	r0, r1
 801e13c:	dd13      	ble.n	801e166 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 801e13e:	1a9b      	subs	r3, r3, r2
 801e140:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e144:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801e148:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e14c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e150:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e154:	9600      	str	r6, [sp, #0]
 801e156:	4643      	mov	r3, r8
 801e158:	aa02      	add	r2, sp, #8
 801e15a:	4649      	mov	r1, r9
 801e15c:	4628      	mov	r0, r5
 801e15e:	f8ad 701a 	strh.w	r7, [sp, #26]
 801e162:	f7ff fd67 	bl	801dc34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e166:	88e2      	ldrh	r2, [r4, #6]
 801e168:	8863      	ldrh	r3, [r4, #2]
 801e16a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e16e:	4413      	add	r3, r2
 801e170:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e174:	440a      	add	r2, r1
 801e176:	b29b      	uxth	r3, r3
 801e178:	b292      	uxth	r2, r2
 801e17a:	b211      	sxth	r1, r2
 801e17c:	b218      	sxth	r0, r3
 801e17e:	4288      	cmp	r0, r1
 801e180:	f77f aec8 	ble.w	801df14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e184:	f9b4 7000 	ldrsh.w	r7, [r4]
 801e188:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e18c:	f8ad 7018 	strh.w	r7, [sp, #24]
 801e190:	1a9b      	subs	r3, r3, r2
 801e192:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e196:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e19a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e19e:	9600      	str	r6, [sp, #0]
 801e1a0:	4643      	mov	r3, r8
 801e1a2:	e779      	b.n	801e098 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 801e1a4:	20025830 	.word	0x20025830

0801e1a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801e1a8:	b180      	cbz	r0, 801e1cc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e1aa:	2903      	cmp	r1, #3
 801e1ac:	d81c      	bhi.n	801e1e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e1ae:	e8df f001 	tbb	[pc, r1]
 801e1b2:	1d02      	.short	0x1d02
 801e1b4:	1f08      	.short	0x1f08
 801e1b6:	4b10      	ldr	r3, [pc, #64]	; (801e1f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e1b8:	8818      	ldrh	r0, [r3, #0]
 801e1ba:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e1be:	4240      	negs	r0, r0
 801e1c0:	4770      	bx	lr
 801e1c2:	4b0d      	ldr	r3, [pc, #52]	; (801e1f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e1c4:	8818      	ldrh	r0, [r3, #0]
 801e1c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e1ca:	4770      	bx	lr
 801e1cc:	2903      	cmp	r1, #3
 801e1ce:	d80b      	bhi.n	801e1e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e1d0:	a301      	add	r3, pc, #4	; (adr r3, 801e1d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801e1d2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e1d6:	bf00      	nop
 801e1d8:	0801e1ed 	.word	0x0801e1ed
 801e1dc:	0801e1c3 	.word	0x0801e1c3
 801e1e0:	0801e1f1 	.word	0x0801e1f1
 801e1e4:	0801e1b7 	.word	0x0801e1b7
 801e1e8:	2000      	movs	r0, #0
 801e1ea:	4770      	bx	lr
 801e1ec:	2001      	movs	r0, #1
 801e1ee:	4770      	bx	lr
 801e1f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e1f4:	4770      	bx	lr
 801e1f6:	bf00      	nop
 801e1f8:	2002582a 	.word	0x2002582a

0801e1fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801e1fc:	b180      	cbz	r0, 801e220 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801e1fe:	2903      	cmp	r1, #3
 801e200:	d81c      	bhi.n	801e23c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e202:	e8df f001 	tbb	[pc, r1]
 801e206:	021d      	.short	0x021d
 801e208:	071f      	.short	0x071f
 801e20a:	4b10      	ldr	r3, [pc, #64]	; (801e24c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e20c:	8818      	ldrh	r0, [r3, #0]
 801e20e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e212:	4770      	bx	lr
 801e214:	4b0d      	ldr	r3, [pc, #52]	; (801e24c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e216:	8818      	ldrh	r0, [r3, #0]
 801e218:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e21c:	4240      	negs	r0, r0
 801e21e:	4770      	bx	lr
 801e220:	2903      	cmp	r1, #3
 801e222:	d80b      	bhi.n	801e23c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e224:	a301      	add	r3, pc, #4	; (adr r3, 801e22c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801e226:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e22a:	bf00      	nop
 801e22c:	0801e20b 	.word	0x0801e20b
 801e230:	0801e245 	.word	0x0801e245
 801e234:	0801e215 	.word	0x0801e215
 801e238:	0801e241 	.word	0x0801e241
 801e23c:	2000      	movs	r0, #0
 801e23e:	4770      	bx	lr
 801e240:	2001      	movs	r0, #1
 801e242:	4770      	bx	lr
 801e244:	f04f 30ff 	mov.w	r0, #4294967295
 801e248:	4770      	bx	lr
 801e24a:	bf00      	nop
 801e24c:	2002582a 	.word	0x2002582a

0801e250 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e254:	b099      	sub	sp, #100	; 0x64
 801e256:	910b      	str	r1, [sp, #44]	; 0x2c
 801e258:	a914      	add	r1, sp, #80	; 0x50
 801e25a:	e881 000c 	stmia.w	r1, {r2, r3}
 801e25e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801e262:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801e266:	f891 900d 	ldrb.w	r9, [r1, #13]
 801e26a:	9309      	str	r3, [sp, #36]	; 0x24
 801e26c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e270:	9310      	str	r3, [sp, #64]	; 0x40
 801e272:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801e276:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801e27a:	930c      	str	r3, [sp, #48]	; 0x30
 801e27c:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801e280:	798f      	ldrb	r7, [r1, #6]
 801e282:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801e286:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801e28a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801e28e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801e292:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801e296:	431f      	orrs	r7, r3
 801e298:	f000 8195 	beq.w	801e5c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e29c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801e2a0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801e2a4:	f891 9007 	ldrb.w	r9, [r1, #7]
 801e2a8:	ea59 0903 	orrs.w	r9, r9, r3
 801e2ac:	f000 818b 	beq.w	801e5c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e2b0:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e2b4:	b29b      	uxth	r3, r3
 801e2b6:	2d00      	cmp	r5, #0
 801e2b8:	f000 812e 	beq.w	801e518 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801e2bc:	1aed      	subs	r5, r5, r3
 801e2be:	b2ad      	uxth	r5, r5
 801e2c0:	042b      	lsls	r3, r5, #16
 801e2c2:	d502      	bpl.n	801e2ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e2c4:	1b64      	subs	r4, r4, r5
 801e2c6:	b224      	sxth	r4, r4
 801e2c8:	2500      	movs	r5, #0
 801e2ca:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e2ce:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e2d2:	428c      	cmp	r4, r1
 801e2d4:	b28b      	uxth	r3, r1
 801e2d6:	bfbf      	itttt	lt
 801e2d8:	18ed      	addlt	r5, r5, r3
 801e2da:	1b2c      	sublt	r4, r5, r4
 801e2dc:	b2a5      	uxthlt	r5, r4
 801e2de:	460c      	movlt	r4, r1
 801e2e0:	8891      	ldrh	r1, [r2, #4]
 801e2e2:	440b      	add	r3, r1
 801e2e4:	b21b      	sxth	r3, r3
 801e2e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801e2e8:	88d3      	ldrh	r3, [r2, #6]
 801e2ea:	8852      	ldrh	r2, [r2, #2]
 801e2ec:	4413      	add	r3, r2
 801e2ee:	b21b      	sxth	r3, r3
 801e2f0:	930d      	str	r3, [sp, #52]	; 0x34
 801e2f2:	4bbe      	ldr	r3, [pc, #760]	; (801e5ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801e2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e2f6:	f893 b000 	ldrb.w	fp, [r3]
 801e2fa:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e2fe:	f1dc 0300 	rsbs	r3, ip, #0
 801e302:	eb43 030c 	adc.w	r3, r3, ip
 801e306:	930e      	str	r3, [sp, #56]	; 0x38
 801e308:	4621      	mov	r1, r4
 801e30a:	4653      	mov	r3, sl
 801e30c:	a814      	add	r0, sp, #80	; 0x50
 801e30e:	f7f7 f810 	bl	8015332 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e312:	4621      	mov	r1, r4
 801e314:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801e318:	4653      	mov	r3, sl
 801e31a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e31c:	a814      	add	r0, sp, #80	; 0x50
 801e31e:	f7f7 f825 	bl	801536c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e322:	a918      	add	r1, sp, #96	; 0x60
 801e324:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e328:	a817      	add	r0, sp, #92	; 0x5c
 801e32a:	f7f7 f94b 	bl	80155c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e32e:	f1ba 0f00 	cmp.w	sl, #0
 801e332:	f040 80f4 	bne.w	801e51e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801e336:	f1bb 0f01 	cmp.w	fp, #1
 801e33a:	f040 80f8 	bne.w	801e52e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801e33e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e340:	2b00      	cmp	r3, #0
 801e342:	f040 8145 	bne.w	801e5d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801e346:	b2ba      	uxth	r2, r7
 801e348:	b905      	cbnz	r5, 801e34c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801e34a:	b16e      	cbz	r6, 801e368 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801e34c:	fb06 5302 	mla	r3, r6, r2, r5
 801e350:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801e352:	fb08 f303 	mul.w	r3, r8, r3
 801e356:	4631      	mov	r1, r6
 801e358:	f003 0607 	and.w	r6, r3, #7
 801e35c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801e360:	9328      	str	r3, [sp, #160]	; 0xa0
 801e362:	eba9 0301 	sub.w	r3, r9, r1
 801e366:	930a      	str	r3, [sp, #40]	; 0x28
 801e368:	4651      	mov	r1, sl
 801e36a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e36c:	f7ff ff1c 	bl	801e1a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801e370:	4681      	mov	r9, r0
 801e372:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e374:	f7ff ff42 	bl	801e1fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801e378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e37a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e37c:	eba3 0a01 	sub.w	sl, r3, r1
 801e380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e382:	459a      	cmp	sl, r3
 801e384:	bfa8      	it	ge
 801e386:	469a      	movge	sl, r3
 801e388:	f1ba 0f00 	cmp.w	sl, #0
 801e38c:	4683      	mov	fp, r0
 801e38e:	f340 811a 	ble.w	801e5c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e394:	1b64      	subs	r4, r4, r5
 801e396:	1b1c      	subs	r4, r3, r4
 801e398:	42bc      	cmp	r4, r7
 801e39a:	bfd4      	ite	le
 801e39c:	ebc5 0504 	rsble	r5, r5, r4
 801e3a0:	ebc5 0507 	rsbgt	r5, r5, r7
 801e3a4:	2d00      	cmp	r5, #0
 801e3a6:	f340 810e 	ble.w	801e5c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e3aa:	1b52      	subs	r2, r2, r5
 801e3ac:	fb08 f302 	mul.w	r3, r8, r2
 801e3b0:	930f      	str	r3, [sp, #60]	; 0x3c
 801e3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	f040 8116 	bne.w	801e5e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801e3ba:	4b8d      	ldr	r3, [pc, #564]	; (801e5f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801e3bc:	6818      	ldr	r0, [r3, #0]
 801e3be:	6803      	ldr	r3, [r0, #0]
 801e3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3c2:	4798      	blx	r3
 801e3c4:	2301      	movs	r3, #1
 801e3c6:	fa03 f308 	lsl.w	r3, r3, r8
 801e3ca:	4a8a      	ldr	r2, [pc, #552]	; (801e5f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801e3cc:	3b01      	subs	r3, #1
 801e3ce:	b2db      	uxtb	r3, r3
 801e3d0:	8811      	ldrh	r1, [r2, #0]
 801e3d2:	930e      	str	r3, [sp, #56]	; 0x38
 801e3d4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e3d8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e3dc:	fb01 2303 	mla	r3, r1, r3, r2
 801e3e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e3e4:	930a      	str	r3, [sp, #40]	; 0x28
 801e3e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e3e8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e3ec:	9313      	str	r3, [sp, #76]	; 0x4c
 801e3ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e3f0:	0a19      	lsrs	r1, r3, #8
 801e3f2:	b2cb      	uxtb	r3, r1
 801e3f4:	9312      	str	r3, [sp, #72]	; 0x48
 801e3f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e3f8:	b2db      	uxtb	r3, r3
 801e3fa:	9311      	str	r3, [sp, #68]	; 0x44
 801e3fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e3fe:	095a      	lsrs	r2, r3, #5
 801e400:	4b7d      	ldr	r3, [pc, #500]	; (801e5f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e402:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e406:	400b      	ands	r3, r1
 801e408:	4313      	orrs	r3, r2
 801e40a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e40c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e410:	4313      	orrs	r3, r2
 801e412:	b29b      	uxth	r3, r3
 801e414:	9310      	str	r3, [sp, #64]	; 0x40
 801e416:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e418:	781a      	ldrb	r2, [r3, #0]
 801e41a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e41e:	4132      	asrs	r2, r6
 801e420:	fb05 b919 	mls	r9, r5, r9, fp
 801e424:	fb03 fb05 	mul.w	fp, r3, r5
 801e428:	b2d2      	uxtb	r2, r2
 801e42a:	930d      	str	r3, [sp, #52]	; 0x34
 801e42c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801e430:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e434:	f0c0 80f5 	bcc.w	801e622 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801e438:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801e43c:	46ae      	mov	lr, r5
 801e43e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e442:	f0c0 80dd 	bcc.w	801e600 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801e446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e448:	4013      	ands	r3, r2
 801e44a:	d055      	beq.n	801e4f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801e44c:	20ff      	movs	r0, #255	; 0xff
 801e44e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e450:	fb90 f1f1 	sdiv	r1, r0, r1
 801e454:	434b      	muls	r3, r1
 801e456:	2bfe      	cmp	r3, #254	; 0xfe
 801e458:	dd03      	ble.n	801e462 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801e45a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e45c:	4281      	cmp	r1, r0
 801e45e:	f000 80cd 	beq.w	801e5fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801e462:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e464:	f8bc 4000 	ldrh.w	r4, [ip]
 801e468:	fb11 f303 	smulbb	r3, r1, r3
 801e46c:	b29b      	uxth	r3, r3
 801e46e:	1c59      	adds	r1, r3, #1
 801e470:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e474:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e478:	b29f      	uxth	r7, r3
 801e47a:	43db      	mvns	r3, r3
 801e47c:	b2db      	uxtb	r3, r3
 801e47e:	9309      	str	r3, [sp, #36]	; 0x24
 801e480:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e482:	1220      	asrs	r0, r4, #8
 801e484:	fb13 f907 	smulbb	r9, r3, r7
 801e488:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e48e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e492:	fb00 9003 	mla	r0, r0, r3, r9
 801e496:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e498:	10e1      	asrs	r1, r4, #3
 801e49a:	fb13 f907 	smulbb	r9, r3, r7
 801e49e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4a4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e4a8:	fb01 9103 	mla	r1, r1, r3, r9
 801e4ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e4ae:	00e4      	lsls	r4, r4, #3
 801e4b0:	fb13 f707 	smulbb	r7, r3, r7
 801e4b4:	b2e4      	uxtb	r4, r4
 801e4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4b8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e4bc:	fb04 7403 	mla	r4, r4, r3, r7
 801e4c0:	b280      	uxth	r0, r0
 801e4c2:	b2a4      	uxth	r4, r4
 801e4c4:	1c43      	adds	r3, r0, #1
 801e4c6:	f104 0901 	add.w	r9, r4, #1
 801e4ca:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e4ce:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801e4d2:	b289      	uxth	r1, r1
 801e4d4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801e4d8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e4dc:	ea49 0000 	orr.w	r0, r9, r0
 801e4e0:	f101 0901 	add.w	r9, r1, #1
 801e4e4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801e4e8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e4ec:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e4f0:	ea40 0009 	orr.w	r0, r0, r9
 801e4f4:	f8ac 0000 	strh.w	r0, [ip]
 801e4f8:	4446      	add	r6, r8
 801e4fa:	b2b6      	uxth	r6, r6
 801e4fc:	2e07      	cmp	r6, #7
 801e4fe:	bf81      	itttt	hi
 801e500:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801e502:	785a      	ldrbhi	r2, [r3, #1]
 801e504:	3301      	addhi	r3, #1
 801e506:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801e508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e50a:	bf9a      	itte	ls
 801e50c:	fa42 f208 	asrls.w	r2, r2, r8
 801e510:	b2d2      	uxtbls	r2, r2
 801e512:	2600      	movhi	r6, #0
 801e514:	449c      	add	ip, r3
 801e516:	e792      	b.n	801e43e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801e518:	441c      	add	r4, r3
 801e51a:	b224      	sxth	r4, r4
 801e51c:	e6d5      	b.n	801e2ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e51e:	f1ba 0f01 	cmp.w	sl, #1
 801e522:	f47f af0c 	bne.w	801e33e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e526:	f1bb 0f01 	cmp.w	fp, #1
 801e52a:	f47f af08 	bne.w	801e33e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e52e:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 801e5f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801e532:	f8db 0000 	ldr.w	r0, [fp]
 801e536:	6803      	ldr	r3, [r0, #0]
 801e538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e53a:	4798      	blx	r3
 801e53c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e540:	465a      	mov	r2, fp
 801e542:	d006      	beq.n	801e552 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801e544:	f1b8 0f04 	cmp.w	r8, #4
 801e548:	d140      	bne.n	801e5cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801e54a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e54c:	3300      	adds	r3, #0
 801e54e:	bf18      	it	ne
 801e550:	2301      	movne	r3, #1
 801e552:	0580      	lsls	r0, r0, #22
 801e554:	d56e      	bpl.n	801e634 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801e556:	f1b8 0f08 	cmp.w	r8, #8
 801e55a:	d16b      	bne.n	801e634 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	bf0c      	ite	eq
 801e560:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e564:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e568:	2d00      	cmp	r5, #0
 801e56a:	f47f aee8 	bne.w	801e33e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e56e:	2e00      	cmp	r6, #0
 801e570:	f47f aee5 	bne.w	801e33e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e574:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e576:	19e3      	adds	r3, r4, r7
 801e578:	4283      	cmp	r3, r0
 801e57a:	f73f aee0 	bgt.w	801e33e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e580:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e582:	444b      	add	r3, r9
 801e584:	4283      	cmp	r3, r0
 801e586:	f73f aeda 	bgt.w	801e33e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e58a:	6810      	ldr	r0, [r2, #0]
 801e58c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801e590:	6804      	ldr	r4, [r0, #0]
 801e592:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801e596:	b2bf      	uxth	r7, r7
 801e598:	f1b8 0f08 	cmp.w	r8, #8
 801e59c:	f04f 0500 	mov.w	r5, #0
 801e5a0:	bf18      	it	ne
 801e5a2:	3701      	addne	r7, #1
 801e5a4:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e5a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e5aa:	9104      	str	r1, [sp, #16]
 801e5ac:	bf18      	it	ne
 801e5ae:	f027 0701 	bicne.w	r7, r7, #1
 801e5b2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e5b4:	bf18      	it	ne
 801e5b6:	b2bf      	uxthne	r7, r7
 801e5b8:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e5bc:	e9cd 7900 	strd	r7, r9, [sp]
 801e5c0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e5c2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801e5c4:	47a0      	blx	r4
 801e5c6:	b019      	add	sp, #100	; 0x64
 801e5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5cc:	2300      	movs	r3, #0
 801e5ce:	e7c0      	b.n	801e552 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801e5d0:	2208      	movs	r2, #8
 801e5d2:	fb92 f3f8 	sdiv	r3, r2, r8
 801e5d6:	1e5a      	subs	r2, r3, #1
 801e5d8:	443a      	add	r2, r7
 801e5da:	fb92 f2f3 	sdiv	r2, r2, r3
 801e5de:	fb12 f203 	smulbb	r2, r2, r3
 801e5e2:	b292      	uxth	r2, r2
 801e5e4:	e6b0      	b.n	801e348 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801e5e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e5e8:	e6ec      	b.n	801e3c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801e5ea:	bf00      	nop
 801e5ec:	20025828 	.word	0x20025828
 801e5f0:	20025830 	.word	0x20025830
 801e5f4:	2002582a 	.word	0x2002582a
 801e5f8:	00fff800 	.word	0x00fff800
 801e5fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e5fe:	e779      	b.n	801e4f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801e600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e602:	b153      	cbz	r3, 801e61a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801e604:	441e      	add	r6, r3
 801e606:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e608:	b2b6      	uxth	r6, r6
 801e60a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801e60e:	f006 0607 	and.w	r6, r6, #7
 801e612:	781a      	ldrb	r2, [r3, #0]
 801e614:	9328      	str	r3, [sp, #160]	; 0xa0
 801e616:	4132      	asrs	r2, r6
 801e618:	b2d2      	uxtb	r2, r2
 801e61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e61c:	445b      	add	r3, fp
 801e61e:	930a      	str	r3, [sp, #40]	; 0x28
 801e620:	e706      	b.n	801e430 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801e622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e624:	2b00      	cmp	r3, #0
 801e626:	d1ce      	bne.n	801e5c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e628:	4b05      	ldr	r3, [pc, #20]	; (801e640 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801e62a:	6818      	ldr	r0, [r3, #0]
 801e62c:	6803      	ldr	r3, [r0, #0]
 801e62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e630:	4798      	blx	r3
 801e632:	e7c8      	b.n	801e5c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e634:	2b00      	cmp	r3, #0
 801e636:	f43f ae82 	beq.w	801e33e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e63a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e63e:	e793      	b.n	801e568 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801e640:	20025830 	.word	0x20025830

0801e644 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801e644:	b538      	push	{r3, r4, r5, lr}
 801e646:	4c15      	ldr	r4, [pc, #84]	; (801e69c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e648:	7823      	ldrb	r3, [r4, #0]
 801e64a:	f3bf 8f5b 	dmb	ish
 801e64e:	07da      	lsls	r2, r3, #31
 801e650:	4605      	mov	r5, r0
 801e652:	d40b      	bmi.n	801e66c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e654:	4620      	mov	r0, r4
 801e656:	f007 feb6 	bl	80263c6 <__cxa_guard_acquire>
 801e65a:	b138      	cbz	r0, 801e66c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e65c:	4620      	mov	r0, r4
 801e65e:	f007 febe 	bl	80263de <__cxa_guard_release>
 801e662:	4a0f      	ldr	r2, [pc, #60]	; (801e6a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e664:	490f      	ldr	r1, [pc, #60]	; (801e6a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e666:	4810      	ldr	r0, [pc, #64]	; (801e6a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e668:	f007 fea6 	bl	80263b8 <__aeabi_atexit>
 801e66c:	4c0f      	ldr	r4, [pc, #60]	; (801e6ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801e66e:	7823      	ldrb	r3, [r4, #0]
 801e670:	f3bf 8f5b 	dmb	ish
 801e674:	07db      	lsls	r3, r3, #31
 801e676:	d40b      	bmi.n	801e690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e678:	4620      	mov	r0, r4
 801e67a:	f007 fea4 	bl	80263c6 <__cxa_guard_acquire>
 801e67e:	b138      	cbz	r0, 801e690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e680:	4620      	mov	r0, r4
 801e682:	f007 feac 	bl	80263de <__cxa_guard_release>
 801e686:	4a06      	ldr	r2, [pc, #24]	; (801e6a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e688:	4909      	ldr	r1, [pc, #36]	; (801e6b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e68a:	480a      	ldr	r0, [pc, #40]	; (801e6b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e68c:	f007 fe94 	bl	80263b8 <__aeabi_atexit>
 801e690:	4b05      	ldr	r3, [pc, #20]	; (801e6a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e692:	612b      	str	r3, [r5, #16]
 801e694:	4b07      	ldr	r3, [pc, #28]	; (801e6b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e696:	616b      	str	r3, [r5, #20]
 801e698:	bd38      	pop	{r3, r4, r5, pc}
 801e69a:	bf00      	nop
 801e69c:	20025908 	.word	0x20025908
 801e6a0:	20000000 	.word	0x20000000
 801e6a4:	0801b455 	.word	0x0801b455
 801e6a8:	200002bc 	.word	0x200002bc
 801e6ac:	2002590c 	.word	0x2002590c
 801e6b0:	0801b453 	.word	0x0801b453
 801e6b4:	200002c0 	.word	0x200002c0

0801e6b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801e6b8:	b538      	push	{r3, r4, r5, lr}
 801e6ba:	4c15      	ldr	r4, [pc, #84]	; (801e710 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e6bc:	7823      	ldrb	r3, [r4, #0]
 801e6be:	f3bf 8f5b 	dmb	ish
 801e6c2:	07da      	lsls	r2, r3, #31
 801e6c4:	4605      	mov	r5, r0
 801e6c6:	d40b      	bmi.n	801e6e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e6c8:	4620      	mov	r0, r4
 801e6ca:	f007 fe7c 	bl	80263c6 <__cxa_guard_acquire>
 801e6ce:	b138      	cbz	r0, 801e6e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e6d0:	4620      	mov	r0, r4
 801e6d2:	f007 fe84 	bl	80263de <__cxa_guard_release>
 801e6d6:	4a0f      	ldr	r2, [pc, #60]	; (801e714 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e6d8:	490f      	ldr	r1, [pc, #60]	; (801e718 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e6da:	4810      	ldr	r0, [pc, #64]	; (801e71c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e6dc:	f007 fe6c 	bl	80263b8 <__aeabi_atexit>
 801e6e0:	4c0f      	ldr	r4, [pc, #60]	; (801e720 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801e6e2:	7823      	ldrb	r3, [r4, #0]
 801e6e4:	f3bf 8f5b 	dmb	ish
 801e6e8:	07db      	lsls	r3, r3, #31
 801e6ea:	d40b      	bmi.n	801e704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e6ec:	4620      	mov	r0, r4
 801e6ee:	f007 fe6a 	bl	80263c6 <__cxa_guard_acquire>
 801e6f2:	b138      	cbz	r0, 801e704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e6f4:	4620      	mov	r0, r4
 801e6f6:	f007 fe72 	bl	80263de <__cxa_guard_release>
 801e6fa:	4a06      	ldr	r2, [pc, #24]	; (801e714 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e6fc:	4909      	ldr	r1, [pc, #36]	; (801e724 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e6fe:	480a      	ldr	r0, [pc, #40]	; (801e728 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e700:	f007 fe5a 	bl	80263b8 <__aeabi_atexit>
 801e704:	4b05      	ldr	r3, [pc, #20]	; (801e71c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e706:	60ab      	str	r3, [r5, #8]
 801e708:	4b07      	ldr	r3, [pc, #28]	; (801e728 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e70a:	60eb      	str	r3, [r5, #12]
 801e70c:	bd38      	pop	{r3, r4, r5, pc}
 801e70e:	bf00      	nop
 801e710:	200258e0 	.word	0x200258e0
 801e714:	20000000 	.word	0x20000000
 801e718:	0801b459 	.word	0x0801b459
 801e71c:	20000294 	.word	0x20000294
 801e720:	200258e4 	.word	0x200258e4
 801e724:	0801b457 	.word	0x0801b457
 801e728:	20000298 	.word	0x20000298

0801e72c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801e72c:	b510      	push	{r4, lr}
 801e72e:	4604      	mov	r4, r0
 801e730:	f7ff ff88 	bl	801e644 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801e734:	4620      	mov	r0, r4
 801e736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e73a:	f7ff bfbd 	b.w	801e6b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801e740 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e740:	b538      	push	{r3, r4, r5, lr}
 801e742:	4c15      	ldr	r4, [pc, #84]	; (801e798 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e744:	7823      	ldrb	r3, [r4, #0]
 801e746:	f3bf 8f5b 	dmb	ish
 801e74a:	07da      	lsls	r2, r3, #31
 801e74c:	4605      	mov	r5, r0
 801e74e:	d40b      	bmi.n	801e768 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e750:	4620      	mov	r0, r4
 801e752:	f007 fe38 	bl	80263c6 <__cxa_guard_acquire>
 801e756:	b138      	cbz	r0, 801e768 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e758:	4620      	mov	r0, r4
 801e75a:	f007 fe40 	bl	80263de <__cxa_guard_release>
 801e75e:	4a0f      	ldr	r2, [pc, #60]	; (801e79c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e760:	490f      	ldr	r1, [pc, #60]	; (801e7a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e762:	4810      	ldr	r0, [pc, #64]	; (801e7a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e764:	f007 fe28 	bl	80263b8 <__aeabi_atexit>
 801e768:	4c0f      	ldr	r4, [pc, #60]	; (801e7a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e76a:	7823      	ldrb	r3, [r4, #0]
 801e76c:	f3bf 8f5b 	dmb	ish
 801e770:	07db      	lsls	r3, r3, #31
 801e772:	d40b      	bmi.n	801e78c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e774:	4620      	mov	r0, r4
 801e776:	f007 fe26 	bl	80263c6 <__cxa_guard_acquire>
 801e77a:	b138      	cbz	r0, 801e78c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e77c:	4620      	mov	r0, r4
 801e77e:	f007 fe2e 	bl	80263de <__cxa_guard_release>
 801e782:	4a06      	ldr	r2, [pc, #24]	; (801e79c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e784:	4909      	ldr	r1, [pc, #36]	; (801e7ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e786:	480a      	ldr	r0, [pc, #40]	; (801e7b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e788:	f007 fe16 	bl	80263b8 <__aeabi_atexit>
 801e78c:	4b05      	ldr	r3, [pc, #20]	; (801e7a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e78e:	622b      	str	r3, [r5, #32]
 801e790:	4b07      	ldr	r3, [pc, #28]	; (801e7b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e792:	626b      	str	r3, [r5, #36]	; 0x24
 801e794:	bd38      	pop	{r3, r4, r5, pc}
 801e796:	bf00      	nop
 801e798:	20025910 	.word	0x20025910
 801e79c:	20000000 	.word	0x20000000
 801e7a0:	0801b44d 	.word	0x0801b44d
 801e7a4:	200002c4 	.word	0x200002c4
 801e7a8:	20025914 	.word	0x20025914
 801e7ac:	0801b44b 	.word	0x0801b44b
 801e7b0:	200002c8 	.word	0x200002c8

0801e7b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e7b4:	b538      	push	{r3, r4, r5, lr}
 801e7b6:	4c15      	ldr	r4, [pc, #84]	; (801e80c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e7b8:	7823      	ldrb	r3, [r4, #0]
 801e7ba:	f3bf 8f5b 	dmb	ish
 801e7be:	07da      	lsls	r2, r3, #31
 801e7c0:	4605      	mov	r5, r0
 801e7c2:	d40b      	bmi.n	801e7dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e7c4:	4620      	mov	r0, r4
 801e7c6:	f007 fdfe 	bl	80263c6 <__cxa_guard_acquire>
 801e7ca:	b138      	cbz	r0, 801e7dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e7cc:	4620      	mov	r0, r4
 801e7ce:	f007 fe06 	bl	80263de <__cxa_guard_release>
 801e7d2:	4a0f      	ldr	r2, [pc, #60]	; (801e810 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e7d4:	490f      	ldr	r1, [pc, #60]	; (801e814 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e7d6:	4810      	ldr	r0, [pc, #64]	; (801e818 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e7d8:	f007 fdee 	bl	80263b8 <__aeabi_atexit>
 801e7dc:	4c0f      	ldr	r4, [pc, #60]	; (801e81c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e7de:	7823      	ldrb	r3, [r4, #0]
 801e7e0:	f3bf 8f5b 	dmb	ish
 801e7e4:	07db      	lsls	r3, r3, #31
 801e7e6:	d40b      	bmi.n	801e800 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e7e8:	4620      	mov	r0, r4
 801e7ea:	f007 fdec 	bl	80263c6 <__cxa_guard_acquire>
 801e7ee:	b138      	cbz	r0, 801e800 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e7f0:	4620      	mov	r0, r4
 801e7f2:	f007 fdf4 	bl	80263de <__cxa_guard_release>
 801e7f6:	4a06      	ldr	r2, [pc, #24]	; (801e810 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e7f8:	4909      	ldr	r1, [pc, #36]	; (801e820 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e7fa:	480a      	ldr	r0, [pc, #40]	; (801e824 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e7fc:	f007 fddc 	bl	80263b8 <__aeabi_atexit>
 801e800:	4b05      	ldr	r3, [pc, #20]	; (801e818 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e802:	61ab      	str	r3, [r5, #24]
 801e804:	4b07      	ldr	r3, [pc, #28]	; (801e824 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e806:	61eb      	str	r3, [r5, #28]
 801e808:	bd38      	pop	{r3, r4, r5, pc}
 801e80a:	bf00      	nop
 801e80c:	200258e8 	.word	0x200258e8
 801e810:	20000000 	.word	0x20000000
 801e814:	0801b451 	.word	0x0801b451
 801e818:	2000029c 	.word	0x2000029c
 801e81c:	200258ec 	.word	0x200258ec
 801e820:	0801b44f 	.word	0x0801b44f
 801e824:	200002a0 	.word	0x200002a0

0801e828 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801e828:	b510      	push	{r4, lr}
 801e82a:	4604      	mov	r4, r0
 801e82c:	f7ff ff88 	bl	801e740 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e830:	4620      	mov	r0, r4
 801e832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e836:	f7ff bfbd 	b.w	801e7b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e83c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e83c:	b538      	push	{r3, r4, r5, lr}
 801e83e:	4c15      	ldr	r4, [pc, #84]	; (801e894 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e840:	7823      	ldrb	r3, [r4, #0]
 801e842:	f3bf 8f5b 	dmb	ish
 801e846:	07da      	lsls	r2, r3, #31
 801e848:	4605      	mov	r5, r0
 801e84a:	d40b      	bmi.n	801e864 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e84c:	4620      	mov	r0, r4
 801e84e:	f007 fdba 	bl	80263c6 <__cxa_guard_acquire>
 801e852:	b138      	cbz	r0, 801e864 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e854:	4620      	mov	r0, r4
 801e856:	f007 fdc2 	bl	80263de <__cxa_guard_release>
 801e85a:	4a0f      	ldr	r2, [pc, #60]	; (801e898 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e85c:	490f      	ldr	r1, [pc, #60]	; (801e89c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e85e:	4810      	ldr	r0, [pc, #64]	; (801e8a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e860:	f007 fdaa 	bl	80263b8 <__aeabi_atexit>
 801e864:	4c0f      	ldr	r4, [pc, #60]	; (801e8a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e866:	7823      	ldrb	r3, [r4, #0]
 801e868:	f3bf 8f5b 	dmb	ish
 801e86c:	07db      	lsls	r3, r3, #31
 801e86e:	d40b      	bmi.n	801e888 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e870:	4620      	mov	r0, r4
 801e872:	f007 fda8 	bl	80263c6 <__cxa_guard_acquire>
 801e876:	b138      	cbz	r0, 801e888 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e878:	4620      	mov	r0, r4
 801e87a:	f007 fdb0 	bl	80263de <__cxa_guard_release>
 801e87e:	4a06      	ldr	r2, [pc, #24]	; (801e898 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e880:	4909      	ldr	r1, [pc, #36]	; (801e8a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e882:	480a      	ldr	r0, [pc, #40]	; (801e8ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e884:	f007 fd98 	bl	80263b8 <__aeabi_atexit>
 801e888:	4b05      	ldr	r3, [pc, #20]	; (801e8a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e88a:	632b      	str	r3, [r5, #48]	; 0x30
 801e88c:	4b07      	ldr	r3, [pc, #28]	; (801e8ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e88e:	636b      	str	r3, [r5, #52]	; 0x34
 801e890:	bd38      	pop	{r3, r4, r5, pc}
 801e892:	bf00      	nop
 801e894:	20025920 	.word	0x20025920
 801e898:	20000000 	.word	0x20000000
 801e89c:	0801b445 	.word	0x0801b445
 801e8a0:	200002d4 	.word	0x200002d4
 801e8a4:	20025924 	.word	0x20025924
 801e8a8:	0801b443 	.word	0x0801b443
 801e8ac:	200002d8 	.word	0x200002d8

0801e8b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e8b0:	b538      	push	{r3, r4, r5, lr}
 801e8b2:	4c15      	ldr	r4, [pc, #84]	; (801e908 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e8b4:	7823      	ldrb	r3, [r4, #0]
 801e8b6:	f3bf 8f5b 	dmb	ish
 801e8ba:	07da      	lsls	r2, r3, #31
 801e8bc:	4605      	mov	r5, r0
 801e8be:	d40b      	bmi.n	801e8d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e8c0:	4620      	mov	r0, r4
 801e8c2:	f007 fd80 	bl	80263c6 <__cxa_guard_acquire>
 801e8c6:	b138      	cbz	r0, 801e8d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e8c8:	4620      	mov	r0, r4
 801e8ca:	f007 fd88 	bl	80263de <__cxa_guard_release>
 801e8ce:	4a0f      	ldr	r2, [pc, #60]	; (801e90c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e8d0:	490f      	ldr	r1, [pc, #60]	; (801e910 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e8d2:	4810      	ldr	r0, [pc, #64]	; (801e914 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e8d4:	f007 fd70 	bl	80263b8 <__aeabi_atexit>
 801e8d8:	4c0f      	ldr	r4, [pc, #60]	; (801e918 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e8da:	7823      	ldrb	r3, [r4, #0]
 801e8dc:	f3bf 8f5b 	dmb	ish
 801e8e0:	07db      	lsls	r3, r3, #31
 801e8e2:	d40b      	bmi.n	801e8fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	f007 fd6e 	bl	80263c6 <__cxa_guard_acquire>
 801e8ea:	b138      	cbz	r0, 801e8fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e8ec:	4620      	mov	r0, r4
 801e8ee:	f007 fd76 	bl	80263de <__cxa_guard_release>
 801e8f2:	4a06      	ldr	r2, [pc, #24]	; (801e90c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e8f4:	4909      	ldr	r1, [pc, #36]	; (801e91c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e8f6:	480a      	ldr	r0, [pc, #40]	; (801e920 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e8f8:	f007 fd5e 	bl	80263b8 <__aeabi_atexit>
 801e8fc:	4b05      	ldr	r3, [pc, #20]	; (801e914 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e8fe:	62ab      	str	r3, [r5, #40]	; 0x28
 801e900:	4b07      	ldr	r3, [pc, #28]	; (801e920 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e902:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e904:	bd38      	pop	{r3, r4, r5, pc}
 801e906:	bf00      	nop
 801e908:	200258f0 	.word	0x200258f0
 801e90c:	20000000 	.word	0x20000000
 801e910:	0801b449 	.word	0x0801b449
 801e914:	200002a4 	.word	0x200002a4
 801e918:	200258f4 	.word	0x200258f4
 801e91c:	0801b447 	.word	0x0801b447
 801e920:	200002a8 	.word	0x200002a8

0801e924 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e924:	b510      	push	{r4, lr}
 801e926:	4604      	mov	r4, r0
 801e928:	f7ff ff88 	bl	801e83c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e92c:	4620      	mov	r0, r4
 801e92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e932:	f7ff bfbd 	b.w	801e8b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e938 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e938:	b538      	push	{r3, r4, r5, lr}
 801e93a:	4c15      	ldr	r4, [pc, #84]	; (801e990 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e93c:	7823      	ldrb	r3, [r4, #0]
 801e93e:	f3bf 8f5b 	dmb	ish
 801e942:	07da      	lsls	r2, r3, #31
 801e944:	4605      	mov	r5, r0
 801e946:	d40b      	bmi.n	801e960 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e948:	4620      	mov	r0, r4
 801e94a:	f007 fd3c 	bl	80263c6 <__cxa_guard_acquire>
 801e94e:	b138      	cbz	r0, 801e960 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e950:	4620      	mov	r0, r4
 801e952:	f007 fd44 	bl	80263de <__cxa_guard_release>
 801e956:	4a0f      	ldr	r2, [pc, #60]	; (801e994 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e958:	490f      	ldr	r1, [pc, #60]	; (801e998 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e95a:	4810      	ldr	r0, [pc, #64]	; (801e99c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e95c:	f007 fd2c 	bl	80263b8 <__aeabi_atexit>
 801e960:	4c0f      	ldr	r4, [pc, #60]	; (801e9a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e962:	7823      	ldrb	r3, [r4, #0]
 801e964:	f3bf 8f5b 	dmb	ish
 801e968:	07db      	lsls	r3, r3, #31
 801e96a:	d40b      	bmi.n	801e984 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e96c:	4620      	mov	r0, r4
 801e96e:	f007 fd2a 	bl	80263c6 <__cxa_guard_acquire>
 801e972:	b138      	cbz	r0, 801e984 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e974:	4620      	mov	r0, r4
 801e976:	f007 fd32 	bl	80263de <__cxa_guard_release>
 801e97a:	4a06      	ldr	r2, [pc, #24]	; (801e994 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e97c:	4909      	ldr	r1, [pc, #36]	; (801e9a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e97e:	480a      	ldr	r0, [pc, #40]	; (801e9a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e980:	f007 fd1a 	bl	80263b8 <__aeabi_atexit>
 801e984:	4b05      	ldr	r3, [pc, #20]	; (801e99c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e986:	652b      	str	r3, [r5, #80]	; 0x50
 801e988:	4b07      	ldr	r3, [pc, #28]	; (801e9a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e98a:	656b      	str	r3, [r5, #84]	; 0x54
 801e98c:	bd38      	pop	{r3, r4, r5, pc}
 801e98e:	bf00      	nop
 801e990:	20025928 	.word	0x20025928
 801e994:	20000000 	.word	0x20000000
 801e998:	0801b435 	.word	0x0801b435
 801e99c:	200002dc 	.word	0x200002dc
 801e9a0:	2002592c 	.word	0x2002592c
 801e9a4:	0801b433 	.word	0x0801b433
 801e9a8:	200002e0 	.word	0x200002e0

0801e9ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e9ac:	b538      	push	{r3, r4, r5, lr}
 801e9ae:	4c15      	ldr	r4, [pc, #84]	; (801ea04 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e9b0:	7823      	ldrb	r3, [r4, #0]
 801e9b2:	f3bf 8f5b 	dmb	ish
 801e9b6:	07da      	lsls	r2, r3, #31
 801e9b8:	4605      	mov	r5, r0
 801e9ba:	d40b      	bmi.n	801e9d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e9bc:	4620      	mov	r0, r4
 801e9be:	f007 fd02 	bl	80263c6 <__cxa_guard_acquire>
 801e9c2:	b138      	cbz	r0, 801e9d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e9c4:	4620      	mov	r0, r4
 801e9c6:	f007 fd0a 	bl	80263de <__cxa_guard_release>
 801e9ca:	4a0f      	ldr	r2, [pc, #60]	; (801ea08 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e9cc:	490f      	ldr	r1, [pc, #60]	; (801ea0c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e9ce:	4810      	ldr	r0, [pc, #64]	; (801ea10 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e9d0:	f007 fcf2 	bl	80263b8 <__aeabi_atexit>
 801e9d4:	4c0f      	ldr	r4, [pc, #60]	; (801ea14 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e9d6:	7823      	ldrb	r3, [r4, #0]
 801e9d8:	f3bf 8f5b 	dmb	ish
 801e9dc:	07db      	lsls	r3, r3, #31
 801e9de:	d40b      	bmi.n	801e9f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e9e0:	4620      	mov	r0, r4
 801e9e2:	f007 fcf0 	bl	80263c6 <__cxa_guard_acquire>
 801e9e6:	b138      	cbz	r0, 801e9f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	f007 fcf8 	bl	80263de <__cxa_guard_release>
 801e9ee:	4a06      	ldr	r2, [pc, #24]	; (801ea08 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e9f0:	4909      	ldr	r1, [pc, #36]	; (801ea18 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e9f2:	480a      	ldr	r0, [pc, #40]	; (801ea1c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e9f4:	f007 fce0 	bl	80263b8 <__aeabi_atexit>
 801e9f8:	4b05      	ldr	r3, [pc, #20]	; (801ea10 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e9fa:	64ab      	str	r3, [r5, #72]	; 0x48
 801e9fc:	4b07      	ldr	r3, [pc, #28]	; (801ea1c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e9fe:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ea00:	bd38      	pop	{r3, r4, r5, pc}
 801ea02:	bf00      	nop
 801ea04:	20025930 	.word	0x20025930
 801ea08:	20000000 	.word	0x20000000
 801ea0c:	0801b439 	.word	0x0801b439
 801ea10:	200002e4 	.word	0x200002e4
 801ea14:	20025934 	.word	0x20025934
 801ea18:	0801b437 	.word	0x0801b437
 801ea1c:	200002e8 	.word	0x200002e8

0801ea20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801ea20:	b538      	push	{r3, r4, r5, lr}
 801ea22:	4c15      	ldr	r4, [pc, #84]	; (801ea78 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801ea24:	7823      	ldrb	r3, [r4, #0]
 801ea26:	f3bf 8f5b 	dmb	ish
 801ea2a:	07da      	lsls	r2, r3, #31
 801ea2c:	4605      	mov	r5, r0
 801ea2e:	d40b      	bmi.n	801ea48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801ea30:	4620      	mov	r0, r4
 801ea32:	f007 fcc8 	bl	80263c6 <__cxa_guard_acquire>
 801ea36:	b138      	cbz	r0, 801ea48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801ea38:	4620      	mov	r0, r4
 801ea3a:	f007 fcd0 	bl	80263de <__cxa_guard_release>
 801ea3e:	4a0f      	ldr	r2, [pc, #60]	; (801ea7c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ea40:	490f      	ldr	r1, [pc, #60]	; (801ea80 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801ea42:	4810      	ldr	r0, [pc, #64]	; (801ea84 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801ea44:	f007 fcb8 	bl	80263b8 <__aeabi_atexit>
 801ea48:	4c0f      	ldr	r4, [pc, #60]	; (801ea88 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801ea4a:	7823      	ldrb	r3, [r4, #0]
 801ea4c:	f3bf 8f5b 	dmb	ish
 801ea50:	07db      	lsls	r3, r3, #31
 801ea52:	d40b      	bmi.n	801ea6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801ea54:	4620      	mov	r0, r4
 801ea56:	f007 fcb6 	bl	80263c6 <__cxa_guard_acquire>
 801ea5a:	b138      	cbz	r0, 801ea6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801ea5c:	4620      	mov	r0, r4
 801ea5e:	f007 fcbe 	bl	80263de <__cxa_guard_release>
 801ea62:	4a06      	ldr	r2, [pc, #24]	; (801ea7c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ea64:	4909      	ldr	r1, [pc, #36]	; (801ea8c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801ea66:	480a      	ldr	r0, [pc, #40]	; (801ea90 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801ea68:	f007 fca6 	bl	80263b8 <__aeabi_atexit>
 801ea6c:	4b05      	ldr	r3, [pc, #20]	; (801ea84 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801ea6e:	642b      	str	r3, [r5, #64]	; 0x40
 801ea70:	4b07      	ldr	r3, [pc, #28]	; (801ea90 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801ea72:	646b      	str	r3, [r5, #68]	; 0x44
 801ea74:	bd38      	pop	{r3, r4, r5, pc}
 801ea76:	bf00      	nop
 801ea78:	200258f8 	.word	0x200258f8
 801ea7c:	20000000 	.word	0x20000000
 801ea80:	0801b43d 	.word	0x0801b43d
 801ea84:	200002ac 	.word	0x200002ac
 801ea88:	200258fc 	.word	0x200258fc
 801ea8c:	0801b43b 	.word	0x0801b43b
 801ea90:	200002b0 	.word	0x200002b0

0801ea94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801ea94:	b538      	push	{r3, r4, r5, lr}
 801ea96:	4c15      	ldr	r4, [pc, #84]	; (801eaec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801ea98:	7823      	ldrb	r3, [r4, #0]
 801ea9a:	f3bf 8f5b 	dmb	ish
 801ea9e:	07da      	lsls	r2, r3, #31
 801eaa0:	4605      	mov	r5, r0
 801eaa2:	d40b      	bmi.n	801eabc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801eaa4:	4620      	mov	r0, r4
 801eaa6:	f007 fc8e 	bl	80263c6 <__cxa_guard_acquire>
 801eaaa:	b138      	cbz	r0, 801eabc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801eaac:	4620      	mov	r0, r4
 801eaae:	f007 fc96 	bl	80263de <__cxa_guard_release>
 801eab2:	4a0f      	ldr	r2, [pc, #60]	; (801eaf0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801eab4:	490f      	ldr	r1, [pc, #60]	; (801eaf4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801eab6:	4810      	ldr	r0, [pc, #64]	; (801eaf8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801eab8:	f007 fc7e 	bl	80263b8 <__aeabi_atexit>
 801eabc:	4c0f      	ldr	r4, [pc, #60]	; (801eafc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801eabe:	7823      	ldrb	r3, [r4, #0]
 801eac0:	f3bf 8f5b 	dmb	ish
 801eac4:	07db      	lsls	r3, r3, #31
 801eac6:	d40b      	bmi.n	801eae0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801eac8:	4620      	mov	r0, r4
 801eaca:	f007 fc7c 	bl	80263c6 <__cxa_guard_acquire>
 801eace:	b138      	cbz	r0, 801eae0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801ead0:	4620      	mov	r0, r4
 801ead2:	f007 fc84 	bl	80263de <__cxa_guard_release>
 801ead6:	4a06      	ldr	r2, [pc, #24]	; (801eaf0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801ead8:	4909      	ldr	r1, [pc, #36]	; (801eb00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801eada:	480a      	ldr	r0, [pc, #40]	; (801eb04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801eadc:	f007 fc6c 	bl	80263b8 <__aeabi_atexit>
 801eae0:	4b05      	ldr	r3, [pc, #20]	; (801eaf8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801eae2:	63ab      	str	r3, [r5, #56]	; 0x38
 801eae4:	4b07      	ldr	r3, [pc, #28]	; (801eb04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801eae6:	63eb      	str	r3, [r5, #60]	; 0x3c
 801eae8:	bd38      	pop	{r3, r4, r5, pc}
 801eaea:	bf00      	nop
 801eaec:	20025918 	.word	0x20025918
 801eaf0:	20000000 	.word	0x20000000
 801eaf4:	0801b441 	.word	0x0801b441
 801eaf8:	200002cc 	.word	0x200002cc
 801eafc:	2002591c 	.word	0x2002591c
 801eb00:	0801b43f 	.word	0x0801b43f
 801eb04:	200002d0 	.word	0x200002d0

0801eb08 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801eb08:	b510      	push	{r4, lr}
 801eb0a:	4604      	mov	r4, r0
 801eb0c:	f7ff ff14 	bl	801e938 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801eb10:	4620      	mov	r0, r4
 801eb12:	f7ff ff85 	bl	801ea20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801eb16:	4620      	mov	r0, r4
 801eb18:	f7ff ff48 	bl	801e9ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801eb1c:	4620      	mov	r0, r4
 801eb1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb22:	f7ff bfb7 	b.w	801ea94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801eb28 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801eb28:	b538      	push	{r3, r4, r5, lr}
 801eb2a:	4c15      	ldr	r4, [pc, #84]	; (801eb80 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801eb2c:	7823      	ldrb	r3, [r4, #0]
 801eb2e:	f3bf 8f5b 	dmb	ish
 801eb32:	07da      	lsls	r2, r3, #31
 801eb34:	4605      	mov	r5, r0
 801eb36:	d40b      	bmi.n	801eb50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801eb38:	4620      	mov	r0, r4
 801eb3a:	f007 fc44 	bl	80263c6 <__cxa_guard_acquire>
 801eb3e:	b138      	cbz	r0, 801eb50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801eb40:	4620      	mov	r0, r4
 801eb42:	f007 fc4c 	bl	80263de <__cxa_guard_release>
 801eb46:	4a0f      	ldr	r2, [pc, #60]	; (801eb84 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eb48:	490f      	ldr	r1, [pc, #60]	; (801eb88 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801eb4a:	4810      	ldr	r0, [pc, #64]	; (801eb8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801eb4c:	f007 fc34 	bl	80263b8 <__aeabi_atexit>
 801eb50:	4c0f      	ldr	r4, [pc, #60]	; (801eb90 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801eb52:	7823      	ldrb	r3, [r4, #0]
 801eb54:	f3bf 8f5b 	dmb	ish
 801eb58:	07db      	lsls	r3, r3, #31
 801eb5a:	d40b      	bmi.n	801eb74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eb5c:	4620      	mov	r0, r4
 801eb5e:	f007 fc32 	bl	80263c6 <__cxa_guard_acquire>
 801eb62:	b138      	cbz	r0, 801eb74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eb64:	4620      	mov	r0, r4
 801eb66:	f007 fc3a 	bl	80263de <__cxa_guard_release>
 801eb6a:	4a06      	ldr	r2, [pc, #24]	; (801eb84 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eb6c:	4909      	ldr	r1, [pc, #36]	; (801eb94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801eb6e:	480a      	ldr	r0, [pc, #40]	; (801eb98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801eb70:	f007 fc22 	bl	80263b8 <__aeabi_atexit>
 801eb74:	4b05      	ldr	r3, [pc, #20]	; (801eb8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801eb76:	662b      	str	r3, [r5, #96]	; 0x60
 801eb78:	4b07      	ldr	r3, [pc, #28]	; (801eb98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801eb7a:	666b      	str	r3, [r5, #100]	; 0x64
 801eb7c:	bd38      	pop	{r3, r4, r5, pc}
 801eb7e:	bf00      	nop
 801eb80:	20025900 	.word	0x20025900
 801eb84:	20000000 	.word	0x20000000
 801eb88:	0801b42d 	.word	0x0801b42d
 801eb8c:	200002b4 	.word	0x200002b4
 801eb90:	20025904 	.word	0x20025904
 801eb94:	0801b42b 	.word	0x0801b42b
 801eb98:	200002b8 	.word	0x200002b8

0801eb9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801eb9c:	b538      	push	{r3, r4, r5, lr}
 801eb9e:	4c15      	ldr	r4, [pc, #84]	; (801ebf4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801eba0:	7823      	ldrb	r3, [r4, #0]
 801eba2:	f3bf 8f5b 	dmb	ish
 801eba6:	07da      	lsls	r2, r3, #31
 801eba8:	4605      	mov	r5, r0
 801ebaa:	d40b      	bmi.n	801ebc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ebac:	4620      	mov	r0, r4
 801ebae:	f007 fc0a 	bl	80263c6 <__cxa_guard_acquire>
 801ebb2:	b138      	cbz	r0, 801ebc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ebb4:	4620      	mov	r0, r4
 801ebb6:	f007 fc12 	bl	80263de <__cxa_guard_release>
 801ebba:	4a0f      	ldr	r2, [pc, #60]	; (801ebf8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ebbc:	490f      	ldr	r1, [pc, #60]	; (801ebfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ebbe:	4810      	ldr	r0, [pc, #64]	; (801ec00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ebc0:	f007 fbfa 	bl	80263b8 <__aeabi_atexit>
 801ebc4:	4c0f      	ldr	r4, [pc, #60]	; (801ec04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ebc6:	7823      	ldrb	r3, [r4, #0]
 801ebc8:	f3bf 8f5b 	dmb	ish
 801ebcc:	07db      	lsls	r3, r3, #31
 801ebce:	d40b      	bmi.n	801ebe8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ebd0:	4620      	mov	r0, r4
 801ebd2:	f007 fbf8 	bl	80263c6 <__cxa_guard_acquire>
 801ebd6:	b138      	cbz	r0, 801ebe8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ebd8:	4620      	mov	r0, r4
 801ebda:	f007 fc00 	bl	80263de <__cxa_guard_release>
 801ebde:	4a06      	ldr	r2, [pc, #24]	; (801ebf8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ebe0:	4909      	ldr	r1, [pc, #36]	; (801ec08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ebe2:	480a      	ldr	r0, [pc, #40]	; (801ec0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ebe4:	f007 fbe8 	bl	80263b8 <__aeabi_atexit>
 801ebe8:	4b05      	ldr	r3, [pc, #20]	; (801ec00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ebea:	65ab      	str	r3, [r5, #88]	; 0x58
 801ebec:	4b07      	ldr	r3, [pc, #28]	; (801ec0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ebee:	65eb      	str	r3, [r5, #92]	; 0x5c
 801ebf0:	bd38      	pop	{r3, r4, r5, pc}
 801ebf2:	bf00      	nop
 801ebf4:	200258d8 	.word	0x200258d8
 801ebf8:	20000000 	.word	0x20000000
 801ebfc:	0801b431 	.word	0x0801b431
 801ec00:	2000028c 	.word	0x2000028c
 801ec04:	200258dc 	.word	0x200258dc
 801ec08:	0801b42f 	.word	0x0801b42f
 801ec0c:	20000290 	.word	0x20000290

0801ec10 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801ec10:	b510      	push	{r4, lr}
 801ec12:	4604      	mov	r4, r0
 801ec14:	f7ff ff88 	bl	801eb28 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ec18:	4620      	mov	r0, r4
 801ec1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec1e:	f7ff bfbd 	b.w	801eb9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ec24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ec24:	b538      	push	{r3, r4, r5, lr}
 801ec26:	4c15      	ldr	r4, [pc, #84]	; (801ec7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ec28:	7823      	ldrb	r3, [r4, #0]
 801ec2a:	f3bf 8f5b 	dmb	ish
 801ec2e:	07da      	lsls	r2, r3, #31
 801ec30:	4605      	mov	r5, r0
 801ec32:	d40b      	bmi.n	801ec4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ec34:	4620      	mov	r0, r4
 801ec36:	f007 fbc6 	bl	80263c6 <__cxa_guard_acquire>
 801ec3a:	b138      	cbz	r0, 801ec4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ec3c:	4620      	mov	r0, r4
 801ec3e:	f007 fbce 	bl	80263de <__cxa_guard_release>
 801ec42:	4a0f      	ldr	r2, [pc, #60]	; (801ec80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ec44:	490f      	ldr	r1, [pc, #60]	; (801ec84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ec46:	4810      	ldr	r0, [pc, #64]	; (801ec88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ec48:	f007 fbb6 	bl	80263b8 <__aeabi_atexit>
 801ec4c:	4c0f      	ldr	r4, [pc, #60]	; (801ec8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ec4e:	7823      	ldrb	r3, [r4, #0]
 801ec50:	f3bf 8f5b 	dmb	ish
 801ec54:	07db      	lsls	r3, r3, #31
 801ec56:	d40b      	bmi.n	801ec70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ec58:	4620      	mov	r0, r4
 801ec5a:	f007 fbb4 	bl	80263c6 <__cxa_guard_acquire>
 801ec5e:	b138      	cbz	r0, 801ec70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ec60:	4620      	mov	r0, r4
 801ec62:	f007 fbbc 	bl	80263de <__cxa_guard_release>
 801ec66:	4a06      	ldr	r2, [pc, #24]	; (801ec80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ec68:	4909      	ldr	r1, [pc, #36]	; (801ec90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ec6a:	480a      	ldr	r0, [pc, #40]	; (801ec94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ec6c:	f007 fba4 	bl	80263b8 <__aeabi_atexit>
 801ec70:	4b05      	ldr	r3, [pc, #20]	; (801ec88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ec72:	672b      	str	r3, [r5, #112]	; 0x70
 801ec74:	4b07      	ldr	r3, [pc, #28]	; (801ec94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ec76:	676b      	str	r3, [r5, #116]	; 0x74
 801ec78:	bd38      	pop	{r3, r4, r5, pc}
 801ec7a:	bf00      	nop
 801ec7c:	200258d0 	.word	0x200258d0
 801ec80:	20000000 	.word	0x20000000
 801ec84:	0801b425 	.word	0x0801b425
 801ec88:	20000284 	.word	0x20000284
 801ec8c:	200258d4 	.word	0x200258d4
 801ec90:	0801b423 	.word	0x0801b423
 801ec94:	20000288 	.word	0x20000288

0801ec98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ec98:	b538      	push	{r3, r4, r5, lr}
 801ec9a:	4c15      	ldr	r4, [pc, #84]	; (801ecf0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ec9c:	7823      	ldrb	r3, [r4, #0]
 801ec9e:	f3bf 8f5b 	dmb	ish
 801eca2:	07da      	lsls	r2, r3, #31
 801eca4:	4605      	mov	r5, r0
 801eca6:	d40b      	bmi.n	801ecc0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801eca8:	4620      	mov	r0, r4
 801ecaa:	f007 fb8c 	bl	80263c6 <__cxa_guard_acquire>
 801ecae:	b138      	cbz	r0, 801ecc0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ecb0:	4620      	mov	r0, r4
 801ecb2:	f007 fb94 	bl	80263de <__cxa_guard_release>
 801ecb6:	4a0f      	ldr	r2, [pc, #60]	; (801ecf4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ecb8:	490f      	ldr	r1, [pc, #60]	; (801ecf8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ecba:	4810      	ldr	r0, [pc, #64]	; (801ecfc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ecbc:	f007 fb7c 	bl	80263b8 <__aeabi_atexit>
 801ecc0:	4c0f      	ldr	r4, [pc, #60]	; (801ed00 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ecc2:	7823      	ldrb	r3, [r4, #0]
 801ecc4:	f3bf 8f5b 	dmb	ish
 801ecc8:	07db      	lsls	r3, r3, #31
 801ecca:	d40b      	bmi.n	801ece4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801eccc:	4620      	mov	r0, r4
 801ecce:	f007 fb7a 	bl	80263c6 <__cxa_guard_acquire>
 801ecd2:	b138      	cbz	r0, 801ece4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ecd4:	4620      	mov	r0, r4
 801ecd6:	f007 fb82 	bl	80263de <__cxa_guard_release>
 801ecda:	4a06      	ldr	r2, [pc, #24]	; (801ecf4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ecdc:	4909      	ldr	r1, [pc, #36]	; (801ed04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ecde:	480a      	ldr	r0, [pc, #40]	; (801ed08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ece0:	f007 fb6a 	bl	80263b8 <__aeabi_atexit>
 801ece4:	4b05      	ldr	r3, [pc, #20]	; (801ecfc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ece6:	66ab      	str	r3, [r5, #104]	; 0x68
 801ece8:	4b07      	ldr	r3, [pc, #28]	; (801ed08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ecea:	66eb      	str	r3, [r5, #108]	; 0x6c
 801ecec:	bd38      	pop	{r3, r4, r5, pc}
 801ecee:	bf00      	nop
 801ecf0:	200258c8 	.word	0x200258c8
 801ecf4:	20000000 	.word	0x20000000
 801ecf8:	0801b429 	.word	0x0801b429
 801ecfc:	2000027c 	.word	0x2000027c
 801ed00:	200258cc 	.word	0x200258cc
 801ed04:	0801b427 	.word	0x0801b427
 801ed08:	20000280 	.word	0x20000280

0801ed0c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801ed0c:	b510      	push	{r4, lr}
 801ed0e:	4604      	mov	r4, r0
 801ed10:	f7ff ff88 	bl	801ec24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ed14:	4620      	mov	r0, r4
 801ed16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed1a:	f7ff bfbd 	b.w	801ec98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801ed1e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801ed1e:	b510      	push	{r4, lr}
 801ed20:	4604      	mov	r4, r0
 801ed22:	f7ff fff3 	bl	801ed0c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801ed26:	4620      	mov	r0, r4
 801ed28:	f7ff ff72 	bl	801ec10 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801ed2c:	4620      	mov	r0, r4
 801ed2e:	f7ff fdf9 	bl	801e924 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801ed32:	4620      	mov	r0, r4
 801ed34:	f7ff fcfa 	bl	801e72c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801ed38:	4620      	mov	r0, r4
 801ed3a:	f7ff fd75 	bl	801e828 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801ed3e:	4620      	mov	r0, r4
 801ed40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed44:	f7ff bee0 	b.w	801eb08 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801ed48 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 801ed48:	b538      	push	{r3, r4, r5, lr}
 801ed4a:	4c0b      	ldr	r4, [pc, #44]	; (801ed78 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 801ed4c:	7823      	ldrb	r3, [r4, #0]
 801ed4e:	f3bf 8f5b 	dmb	ish
 801ed52:	07db      	lsls	r3, r3, #31
 801ed54:	4605      	mov	r5, r0
 801ed56:	d40b      	bmi.n	801ed70 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801ed58:	4620      	mov	r0, r4
 801ed5a:	f007 fb34 	bl	80263c6 <__cxa_guard_acquire>
 801ed5e:	b138      	cbz	r0, 801ed70 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801ed60:	4620      	mov	r0, r4
 801ed62:	f007 fb3c 	bl	80263de <__cxa_guard_release>
 801ed66:	4a05      	ldr	r2, [pc, #20]	; (801ed7c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 801ed68:	4905      	ldr	r1, [pc, #20]	; (801ed80 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801ed6a:	4806      	ldr	r0, [pc, #24]	; (801ed84 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801ed6c:	f007 fb24 	bl	80263b8 <__aeabi_atexit>
 801ed70:	4b04      	ldr	r3, [pc, #16]	; (801ed84 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801ed72:	67ab      	str	r3, [r5, #120]	; 0x78
 801ed74:	bd38      	pop	{r3, r4, r5, pc}
 801ed76:	bf00      	nop
 801ed78:	200258bc 	.word	0x200258bc
 801ed7c:	20000000 	.word	0x20000000
 801ed80:	0801b421 	.word	0x0801b421
 801ed84:	20000274 	.word	0x20000274

0801ed88 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 801ed88:	b538      	push	{r3, r4, r5, lr}
 801ed8a:	4c0b      	ldr	r4, [pc, #44]	; (801edb8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 801ed8c:	7823      	ldrb	r3, [r4, #0]
 801ed8e:	f3bf 8f5b 	dmb	ish
 801ed92:	07db      	lsls	r3, r3, #31
 801ed94:	4605      	mov	r5, r0
 801ed96:	d40b      	bmi.n	801edb0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801ed98:	4620      	mov	r0, r4
 801ed9a:	f007 fb14 	bl	80263c6 <__cxa_guard_acquire>
 801ed9e:	b138      	cbz	r0, 801edb0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801eda0:	4620      	mov	r0, r4
 801eda2:	f007 fb1c 	bl	80263de <__cxa_guard_release>
 801eda6:	4a05      	ldr	r2, [pc, #20]	; (801edbc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 801eda8:	4905      	ldr	r1, [pc, #20]	; (801edc0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 801edaa:	4806      	ldr	r0, [pc, #24]	; (801edc4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801edac:	f007 fb04 	bl	80263b8 <__aeabi_atexit>
 801edb0:	4b04      	ldr	r3, [pc, #16]	; (801edc4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801edb2:	67eb      	str	r3, [r5, #124]	; 0x7c
 801edb4:	bd38      	pop	{r3, r4, r5, pc}
 801edb6:	bf00      	nop
 801edb8:	200258c0 	.word	0x200258c0
 801edbc:	20000000 	.word	0x20000000
 801edc0:	0801b41f 	.word	0x0801b41f
 801edc4:	20000278 	.word	0x20000278

0801edc8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 801edc8:	b570      	push	{r4, r5, r6, lr}
 801edca:	4d0d      	ldr	r5, [pc, #52]	; (801ee00 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801edcc:	4c0d      	ldr	r4, [pc, #52]	; (801ee04 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801edce:	782b      	ldrb	r3, [r5, #0]
 801edd0:	f3bf 8f5b 	dmb	ish
 801edd4:	f013 0f01 	tst.w	r3, #1
 801edd8:	4606      	mov	r6, r0
 801edda:	d10d      	bne.n	801edf8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801eddc:	4628      	mov	r0, r5
 801edde:	f007 faf2 	bl	80263c6 <__cxa_guard_acquire>
 801ede2:	b148      	cbz	r0, 801edf8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801ede4:	4b08      	ldr	r3, [pc, #32]	; (801ee08 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801ede6:	6023      	str	r3, [r4, #0]
 801ede8:	4628      	mov	r0, r5
 801edea:	f007 faf8 	bl	80263de <__cxa_guard_release>
 801edee:	4a07      	ldr	r2, [pc, #28]	; (801ee0c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801edf0:	4907      	ldr	r1, [pc, #28]	; (801ee10 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 801edf2:	4620      	mov	r0, r4
 801edf4:	f007 fae0 	bl	80263b8 <__aeabi_atexit>
 801edf8:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 801edfc:	bd70      	pop	{r4, r5, r6, pc}
 801edfe:	bf00      	nop
 801ee00:	200258c4 	.word	0x200258c4
 801ee04:	20025938 	.word	0x20025938
 801ee08:	0802978c 	.word	0x0802978c
 801ee0c:	20000000 	.word	0x20000000
 801ee10:	0801b41d 	.word	0x0801b41d

0801ee14 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 801ee14:	b510      	push	{r4, lr}
 801ee16:	4604      	mov	r4, r0
 801ee18:	f7ff ff96 	bl	801ed48 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 801ee1c:	4620      	mov	r0, r4
 801ee1e:	f7ff ffb3 	bl	801ed88 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 801ee22:	4620      	mov	r0, r4
 801ee24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee28:	f7ff bfce 	b.w	801edc8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

0801ee2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801ee2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee30:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801ee34:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801ee38:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801ee3c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801ee40:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801ee44:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801ee48:	8808      	ldrh	r0, [r1, #0]
 801ee4a:	fb05 4c0e 	mla	ip, r5, lr, r4
 801ee4e:	2d00      	cmp	r5, #0
 801ee50:	eb02 0a0c 	add.w	sl, r2, ip
 801ee54:	f2c0 80b0 	blt.w	801efb8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801ee58:	45ab      	cmp	fp, r5
 801ee5a:	f340 80ad 	ble.w	801efb8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801ee5e:	2c00      	cmp	r4, #0
 801ee60:	f2c0 80a8 	blt.w	801efb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801ee64:	45a6      	cmp	lr, r4
 801ee66:	f340 80a5 	ble.w	801efb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801ee6a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ee6e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801ee72:	1c62      	adds	r2, r4, #1
 801ee74:	f100 80a3 	bmi.w	801efbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ee78:	4596      	cmp	lr, r2
 801ee7a:	f340 80a0 	ble.w	801efbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ee7e:	f1b9 0f00 	cmp.w	r9, #0
 801ee82:	f000 809c 	beq.w	801efbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ee86:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ee8a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801ee8e:	3501      	adds	r5, #1
 801ee90:	f100 8099 	bmi.w	801efc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ee94:	45ab      	cmp	fp, r5
 801ee96:	f340 8096 	ble.w	801efc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ee9a:	2f00      	cmp	r7, #0
 801ee9c:	f000 8093 	beq.w	801efc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801eea0:	2c00      	cmp	r4, #0
 801eea2:	f2c0 808e 	blt.w	801efc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801eea6:	45a6      	cmp	lr, r4
 801eea8:	f340 808b 	ble.w	801efc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801eeac:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801eeb0:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801eeb4:	3401      	adds	r4, #1
 801eeb6:	f100 8089 	bmi.w	801efcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801eeba:	45a6      	cmp	lr, r4
 801eebc:	f340 8086 	ble.w	801efcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801eec0:	f1b9 0f00 	cmp.w	r9, #0
 801eec4:	f000 8082 	beq.w	801efcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801eec8:	44d6      	add	lr, sl
 801eeca:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801eece:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801eed2:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801eed6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801eeda:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801eede:	fb19 fe07 	smulbb	lr, r9, r7
 801eee2:	ea44 0808 	orr.w	r8, r4, r8
 801eee6:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801eeea:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801eeee:	f1c7 0210 	rsb	r2, r7, #16
 801eef2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801eef6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801eefa:	ea44 0c0c 	orr.w	ip, r4, ip
 801eefe:	eba2 0209 	sub.w	r2, r2, r9
 801ef02:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801ef06:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801ef0a:	fb04 f40c 	mul.w	r4, r4, ip
 801ef0e:	fb02 4808 	mla	r8, r2, r8, r4
 801ef12:	041a      	lsls	r2, r3, #16
 801ef14:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ef18:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ef1c:	4313      	orrs	r3, r2
 801ef1e:	042a      	lsls	r2, r5, #16
 801ef20:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ef24:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ef28:	fb0e 8303 	mla	r3, lr, r3, r8
 801ef2c:	432a      	orrs	r2, r5
 801ef2e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801ef32:	fb07 3202 	mla	r2, r7, r2, r3
 801ef36:	0d53      	lsrs	r3, r2, #21
 801ef38:	0952      	lsrs	r2, r2, #5
 801ef3a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ef3e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ef42:	431a      	orrs	r2, r3
 801ef44:	b293      	uxth	r3, r2
 801ef46:	b2b4      	uxth	r4, r6
 801ef48:	1202      	asrs	r2, r0, #8
 801ef4a:	43f6      	mvns	r6, r6
 801ef4c:	b2f6      	uxtb	r6, r6
 801ef4e:	121d      	asrs	r5, r3, #8
 801ef50:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ef54:	fb12 f206 	smulbb	r2, r2, r6
 801ef58:	10c7      	asrs	r7, r0, #3
 801ef5a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ef5e:	00c0      	lsls	r0, r0, #3
 801ef60:	fb05 2504 	mla	r5, r5, r4, r2
 801ef64:	b2c0      	uxtb	r0, r0
 801ef66:	10da      	asrs	r2, r3, #3
 801ef68:	00db      	lsls	r3, r3, #3
 801ef6a:	b2db      	uxtb	r3, r3
 801ef6c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ef70:	fb10 f006 	smulbb	r0, r0, r6
 801ef74:	b2ad      	uxth	r5, r5
 801ef76:	fb03 0004 	mla	r0, r3, r4, r0
 801ef7a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ef7e:	fb17 f706 	smulbb	r7, r7, r6
 801ef82:	b280      	uxth	r0, r0
 801ef84:	1c6b      	adds	r3, r5, #1
 801ef86:	fb02 7204 	mla	r2, r2, r4, r7
 801ef8a:	b292      	uxth	r2, r2
 801ef8c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ef90:	1c43      	adds	r3, r0, #1
 801ef92:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ef96:	1c50      	adds	r0, r2, #1
 801ef98:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ef9c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801efa0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801efa4:	0952      	lsrs	r2, r2, #5
 801efa6:	432b      	orrs	r3, r5
 801efa8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801efac:	4313      	orrs	r3, r2
 801efae:	800b      	strh	r3, [r1, #0]
 801efb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efb4:	4680      	mov	r8, r0
 801efb6:	e75c      	b.n	801ee72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801efb8:	4684      	mov	ip, r0
 801efba:	4680      	mov	r8, r0
 801efbc:	e767      	b.n	801ee8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801efbe:	4684      	mov	ip, r0
 801efc0:	e765      	b.n	801ee8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801efc2:	4605      	mov	r5, r0
 801efc4:	e776      	b.n	801eeb4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801efc6:	4603      	mov	r3, r0
 801efc8:	4605      	mov	r5, r0
 801efca:	e782      	b.n	801eed2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801efcc:	4603      	mov	r3, r0
 801efce:	e780      	b.n	801eed2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801efd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd4:	b099      	sub	sp, #100	; 0x64
 801efd6:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801efda:	9215      	str	r2, [sp, #84]	; 0x54
 801efdc:	9309      	str	r3, [sp, #36]	; 0x24
 801efde:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801efe0:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801efe4:	930d      	str	r3, [sp, #52]	; 0x34
 801efe6:	910c      	str	r1, [sp, #48]	; 0x30
 801efe8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801efec:	9016      	str	r0, [sp, #88]	; 0x58
 801efee:	6850      	ldr	r0, [r2, #4]
 801eff0:	6812      	ldr	r2, [r2, #0]
 801eff2:	fb00 1303 	mla	r3, r0, r3, r1
 801eff6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801effa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	930b      	str	r3, [sp, #44]	; 0x2c
 801f000:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f002:	685e      	ldr	r6, [r3, #4]
 801f004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f006:	43db      	mvns	r3, r3
 801f008:	b2db      	uxtb	r3, r3
 801f00a:	3604      	adds	r6, #4
 801f00c:	930a      	str	r3, [sp, #40]	; 0x28
 801f00e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f010:	2b00      	cmp	r3, #0
 801f012:	dc03      	bgt.n	801f01c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f016:	2b00      	cmp	r3, #0
 801f018:	f340 8225 	ble.w	801f466 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f01c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f01e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f022:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f026:	1e48      	subs	r0, r1, #1
 801f028:	1e57      	subs	r7, r2, #1
 801f02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	f340 80e3 	ble.w	801f1f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f032:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801f036:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f03a:	d406      	bmi.n	801f04a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f03c:	4584      	cmp	ip, r0
 801f03e:	da04      	bge.n	801f04a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f040:	2b00      	cmp	r3, #0
 801f042:	db02      	blt.n	801f04a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f044:	42bb      	cmp	r3, r7
 801f046:	f2c0 80d8 	blt.w	801f1fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f04a:	f11c 0c01 	adds.w	ip, ip, #1
 801f04e:	f100 80c9 	bmi.w	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f052:	4561      	cmp	r1, ip
 801f054:	f2c0 80c6 	blt.w	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f058:	3301      	adds	r3, #1
 801f05a:	f100 80c3 	bmi.w	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f05e:	429a      	cmp	r2, r3
 801f060:	f2c0 80c0 	blt.w	801f1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f064:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f068:	4647      	mov	r7, r8
 801f06a:	f1bb 0f00 	cmp.w	fp, #0
 801f06e:	f340 80e3 	ble.w	801f238 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801f072:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f074:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f076:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f07a:	689b      	ldr	r3, [r3, #8]
 801f07c:	ea5f 422a 	movs.w	r2, sl, asr #16
 801f080:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f084:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801f088:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f08c:	f100 8121 	bmi.w	801f2d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f090:	f103 39ff 	add.w	r9, r3, #4294967295
 801f094:	454a      	cmp	r2, r9
 801f096:	f280 811c 	bge.w	801f2d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f09a:	f1bc 0f00 	cmp.w	ip, #0
 801f09e:	f2c0 8118 	blt.w	801f2d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f0a2:	f10e 39ff 	add.w	r9, lr, #4294967295
 801f0a6:	45cc      	cmp	ip, r9
 801f0a8:	f280 8113 	bge.w	801f2d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f0ac:	b21b      	sxth	r3, r3
 801f0ae:	fb0c 2203 	mla	r2, ip, r3, r2
 801f0b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f0b4:	eb04 0902 	add.w	r9, r4, r2
 801f0b8:	5ca2      	ldrb	r2, [r4, r2]
 801f0ba:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801f0be:	2800      	cmp	r0, #0
 801f0c0:	f000 80fe 	beq.w	801f2c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801f0c4:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f0c8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801f0cc:	9211      	str	r2, [sp, #68]	; 0x44
 801f0ce:	b151      	cbz	r1, 801f0e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f0d0:	eb09 0203 	add.w	r2, r9, r3
 801f0d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f0d8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f0dc:	930f      	str	r3, [sp, #60]	; 0x3c
 801f0de:	7853      	ldrb	r3, [r2, #1]
 801f0e0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f0e4:	9312      	str	r3, [sp, #72]	; 0x48
 801f0e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f0e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f0ea:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f0ee:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f0f2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f0f6:	ea4c 0c03 	orr.w	ip, ip, r3
 801f0fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f0fc:	041b      	lsls	r3, r3, #16
 801f0fe:	fb10 f201 	smulbb	r2, r0, r1
 801f102:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f106:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f10a:	10d2      	asrs	r2, r2, #3
 801f10c:	4323      	orrs	r3, r4
 801f10e:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801f112:	4353      	muls	r3, r2
 801f114:	fb09 330c 	mla	r3, r9, ip, r3
 801f118:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f11c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f120:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f124:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f128:	f1c1 0c10 	rsb	ip, r1, #16
 801f12c:	ebac 0c00 	sub.w	ip, ip, r0
 801f130:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f134:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f13a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f13c:	0418      	lsls	r0, r3, #16
 801f13e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f142:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f146:	4318      	orrs	r0, r3
 801f148:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f14c:	fb02 c200 	mla	r2, r2, r0, ip
 801f150:	0d53      	lsrs	r3, r2, #21
 801f152:	0952      	lsrs	r2, r2, #5
 801f154:	8838      	ldrh	r0, [r7, #0]
 801f156:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f15a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f15e:	431a      	orrs	r2, r3
 801f160:	b292      	uxth	r2, r2
 801f162:	1201      	asrs	r1, r0, #8
 801f164:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801f168:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f16c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f170:	fb11 f104 	smulbb	r1, r1, r4
 801f174:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801f178:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f17c:	00c0      	lsls	r0, r0, #3
 801f17e:	fb0c 1c03 	mla	ip, ip, r3, r1
 801f182:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f186:	10d1      	asrs	r1, r2, #3
 801f188:	b2c0      	uxtb	r0, r0
 801f18a:	00d2      	lsls	r2, r2, #3
 801f18c:	b2d2      	uxtb	r2, r2
 801f18e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f192:	fb1e fe04 	smulbb	lr, lr, r4
 801f196:	fb10 f004 	smulbb	r0, r0, r4
 801f19a:	fa1f fc8c 	uxth.w	ip, ip
 801f19e:	fb01 e103 	mla	r1, r1, r3, lr
 801f1a2:	fb02 0303 	mla	r3, r2, r3, r0
 801f1a6:	b29a      	uxth	r2, r3
 801f1a8:	f10c 0301 	add.w	r3, ip, #1
 801f1ac:	b289      	uxth	r1, r1
 801f1ae:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f1b2:	1c53      	adds	r3, r2, #1
 801f1b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f1b8:	1c4a      	adds	r2, r1, #1
 801f1ba:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f1be:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f1c2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f1c6:	0949      	lsrs	r1, r1, #5
 801f1c8:	ea43 030c 	orr.w	r3, r3, ip
 801f1cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f1d0:	430b      	orrs	r3, r1
 801f1d2:	803b      	strh	r3, [r7, #0]
 801f1d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f1d6:	449a      	add	sl, r3
 801f1d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f1da:	3702      	adds	r7, #2
 801f1dc:	441d      	add	r5, r3
 801f1de:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f1e2:	e742      	b.n	801f06a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f1e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f1e6:	449a      	add	sl, r3
 801f1e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f1ea:	441d      	add	r5, r3
 801f1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1ee:	3b01      	subs	r3, #1
 801f1f0:	9309      	str	r3, [sp, #36]	; 0x24
 801f1f2:	f108 0802 	add.w	r8, r8, #2
 801f1f6:	e718      	b.n	801f02a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f1f8:	d023      	beq.n	801f242 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801f1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1fc:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f1fe:	3b01      	subs	r3, #1
 801f200:	fb00 a003 	mla	r0, r0, r3, sl
 801f204:	1400      	asrs	r0, r0, #16
 801f206:	f53f af2d 	bmi.w	801f064 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f20a:	3901      	subs	r1, #1
 801f20c:	4288      	cmp	r0, r1
 801f20e:	f6bf af29 	bge.w	801f064 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f212:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f214:	fb01 5303 	mla	r3, r1, r3, r5
 801f218:	141b      	asrs	r3, r3, #16
 801f21a:	f53f af23 	bmi.w	801f064 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f21e:	3a01      	subs	r2, #1
 801f220:	4293      	cmp	r3, r2
 801f222:	f6bf af1f 	bge.w	801f064 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f226:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f22a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801f22e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801f232:	f1be 0f00 	cmp.w	lr, #0
 801f236:	dc6c      	bgt.n	801f312 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801f238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f23a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f23e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801f242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f244:	2b00      	cmp	r3, #0
 801f246:	f340 810e 	ble.w	801f466 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f24a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f24e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f252:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f256:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f258:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f25c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f260:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f264:	eef0 6a62 	vmov.f32	s13, s5
 801f268:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f26c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f270:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f274:	ee16 aa90 	vmov	sl, s13
 801f278:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f27c:	eef0 6a43 	vmov.f32	s13, s6
 801f280:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f284:	ee12 2a90 	vmov	r2, s5
 801f288:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f28c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f290:	ee13 2a10 	vmov	r2, s6
 801f294:	9325      	str	r3, [sp, #148]	; 0x94
 801f296:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f298:	fb92 f3f3 	sdiv	r3, r2, r3
 801f29c:	9326      	str	r3, [sp, #152]	; 0x98
 801f29e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f2a2:	3b01      	subs	r3, #1
 801f2a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2a8:	930c      	str	r3, [sp, #48]	; 0x30
 801f2aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2ac:	bf08      	it	eq
 801f2ae:	4613      	moveq	r3, r2
 801f2b0:	ee16 5a90 	vmov	r5, s13
 801f2b4:	9309      	str	r3, [sp, #36]	; 0x24
 801f2b6:	eeb0 3a67 	vmov.f32	s6, s15
 801f2ba:	eef0 2a47 	vmov.f32	s5, s14
 801f2be:	e6a6      	b.n	801f00e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f2c0:	2900      	cmp	r1, #0
 801f2c2:	f43f af10 	beq.w	801f0e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f2c6:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f2ca:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f2ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801f2d0:	e709      	b.n	801f0e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f2d2:	f112 0901 	adds.w	r9, r2, #1
 801f2d6:	f53f af7d 	bmi.w	801f1d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f2da:	454b      	cmp	r3, r9
 801f2dc:	f6ff af7a 	blt.w	801f1d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f2e0:	f11c 0901 	adds.w	r9, ip, #1
 801f2e4:	f53f af76 	bmi.w	801f1d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f2e8:	45ce      	cmp	lr, r9
 801f2ea:	f6ff af73 	blt.w	801f1d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f2ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f2f0:	9202      	str	r2, [sp, #8]
 801f2f2:	b21b      	sxth	r3, r3
 801f2f4:	fa0f f28e 	sxth.w	r2, lr
 801f2f8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f2fc:	e9cd c003 	strd	ip, r0, [sp, #12]
 801f300:	9201      	str	r2, [sp, #4]
 801f302:	9300      	str	r3, [sp, #0]
 801f304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f306:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f308:	4633      	mov	r3, r6
 801f30a:	4639      	mov	r1, r7
 801f30c:	f7ff fd8e 	bl	801ee2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801f310:	e760      	b.n	801f1d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f312:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f314:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f316:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f31a:	ea4f 422a 	mov.w	r2, sl, asr #16
 801f31e:	1429      	asrs	r1, r5, #16
 801f320:	fb03 2101 	mla	r1, r3, r1, r2
 801f324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f326:	440a      	add	r2, r1
 801f328:	5c61      	ldrb	r1, [r4, r1]
 801f32a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801f32e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f332:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801f336:	f1bc 0f00 	cmp.w	ip, #0
 801f33a:	f000 808c 	beq.w	801f456 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801f33e:	7857      	ldrb	r7, [r2, #1]
 801f340:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801f344:	9413      	str	r4, [sp, #76]	; 0x4c
 801f346:	b140      	cbz	r0, 801f35a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f348:	18d7      	adds	r7, r2, r3
 801f34a:	5cd3      	ldrb	r3, [r2, r3]
 801f34c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f350:	9310      	str	r3, [sp, #64]	; 0x40
 801f352:	787b      	ldrb	r3, [r7, #1]
 801f354:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f358:	9314      	str	r3, [sp, #80]	; 0x50
 801f35a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f35c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f35e:	fb1c f200 	smulbb	r2, ip, r0
 801f362:	041f      	lsls	r7, r3, #16
 801f364:	10d2      	asrs	r2, r2, #3
 801f366:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f36a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801f36e:	431f      	orrs	r7, r3
 801f370:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801f374:	9317      	str	r3, [sp, #92]	; 0x5c
 801f376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f378:	041b      	lsls	r3, r3, #16
 801f37a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801f37e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f382:	ea43 030b 	orr.w	r3, r3, fp
 801f386:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f388:	4353      	muls	r3, r2
 801f38a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f38e:	fb04 3707 	mla	r7, r4, r7, r3
 801f392:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f396:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f39a:	ea43 0b01 	orr.w	fp, r3, r1
 801f39e:	f1c0 0110 	rsb	r1, r0, #16
 801f3a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f3a6:	eba1 0c0c 	sub.w	ip, r1, ip
 801f3aa:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f3ae:	fb0c 770b 	mla	r7, ip, fp, r7
 801f3b2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f3b6:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801f3ba:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f3be:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f3c2:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f3c6:	fb02 770c 	mla	r7, r2, ip, r7
 801f3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f3cc:	0d79      	lsrs	r1, r7, #21
 801f3ce:	097f      	lsrs	r7, r7, #5
 801f3d0:	8812      	ldrh	r2, [r2, #0]
 801f3d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f3d6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f3da:	430f      	orrs	r7, r1
 801f3dc:	b2bb      	uxth	r3, r7
 801f3de:	1211      	asrs	r1, r2, #8
 801f3e0:	1218      	asrs	r0, r3, #8
 801f3e2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f3e6:	fb11 f104 	smulbb	r1, r1, r4
 801f3ea:	10d7      	asrs	r7, r2, #3
 801f3ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f3f0:	00d2      	lsls	r2, r2, #3
 801f3f2:	fb00 1009 	mla	r0, r0, r9, r1
 801f3f6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f3fa:	10d9      	asrs	r1, r3, #3
 801f3fc:	b2d2      	uxtb	r2, r2
 801f3fe:	00db      	lsls	r3, r3, #3
 801f400:	fb17 f704 	smulbb	r7, r7, r4
 801f404:	fb12 f204 	smulbb	r2, r2, r4
 801f408:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f40c:	b2db      	uxtb	r3, r3
 801f40e:	b280      	uxth	r0, r0
 801f410:	fb01 7109 	mla	r1, r1, r9, r7
 801f414:	fb03 2309 	mla	r3, r3, r9, r2
 801f418:	b29b      	uxth	r3, r3
 801f41a:	b289      	uxth	r1, r1
 801f41c:	1c42      	adds	r2, r0, #1
 801f41e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f422:	1c4f      	adds	r7, r1, #1
 801f424:	1c5a      	adds	r2, r3, #1
 801f426:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f42a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801f42e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f432:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f436:	0949      	lsrs	r1, r1, #5
 801f438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f43a:	4310      	orrs	r0, r2
 801f43c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f440:	4308      	orrs	r0, r1
 801f442:	f823 0b02 	strh.w	r0, [r3], #2
 801f446:	930e      	str	r3, [sp, #56]	; 0x38
 801f448:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f44a:	449a      	add	sl, r3
 801f44c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f44e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f452:	441d      	add	r5, r3
 801f454:	e6ed      	b.n	801f232 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801f456:	2800      	cmp	r0, #0
 801f458:	f43f af7f 	beq.w	801f35a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f45c:	5cd3      	ldrb	r3, [r2, r3]
 801f45e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f462:	9310      	str	r3, [sp, #64]	; 0x40
 801f464:	e779      	b.n	801f35a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f466:	b019      	add	sp, #100	; 0x64
 801f468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f46c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f470:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801f474:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801f478:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801f47c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801f480:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801f484:	8808      	ldrh	r0, [r1, #0]
 801f486:	fb08 470e 	mla	r7, r8, lr, r4
 801f48a:	f1b8 0f00 	cmp.w	r8, #0
 801f48e:	eb02 0907 	add.w	r9, r2, r7
 801f492:	db67      	blt.n	801f564 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f494:	45c2      	cmp	sl, r8
 801f496:	dd65      	ble.n	801f564 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f498:	2c00      	cmp	r4, #0
 801f49a:	db61      	blt.n	801f560 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f49c:	45a6      	cmp	lr, r4
 801f49e:	dd5f      	ble.n	801f560 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f4a0:	5dd2      	ldrb	r2, [r2, r7]
 801f4a2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f4a6:	1c62      	adds	r2, r4, #1
 801f4a8:	d45f      	bmi.n	801f56a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f4aa:	4596      	cmp	lr, r2
 801f4ac:	dd5d      	ble.n	801f56a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f4ae:	2d00      	cmp	r5, #0
 801f4b0:	d05b      	beq.n	801f56a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f4b2:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f4b6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801f4ba:	f118 0801 	adds.w	r8, r8, #1
 801f4be:	d458      	bmi.n	801f572 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f4c0:	45c2      	cmp	sl, r8
 801f4c2:	dd56      	ble.n	801f572 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f4c4:	2e00      	cmp	r6, #0
 801f4c6:	d054      	beq.n	801f572 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f4c8:	2c00      	cmp	r4, #0
 801f4ca:	db50      	blt.n	801f56e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f4cc:	45a6      	cmp	lr, r4
 801f4ce:	dd4e      	ble.n	801f56e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f4d0:	f819 200e 	ldrb.w	r2, [r9, lr]
 801f4d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f4d8:	3401      	adds	r4, #1
 801f4da:	d407      	bmi.n	801f4ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f4dc:	45a6      	cmp	lr, r4
 801f4de:	dd05      	ble.n	801f4ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f4e0:	b125      	cbz	r5, 801f4ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f4e2:	44ce      	add	lr, r9
 801f4e4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f4e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801f4ec:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801f4f0:	fb15 f406 	smulbb	r4, r5, r6
 801f4f4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f4f8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801f4fc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f500:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801f504:	ea43 0c0c 	orr.w	ip, r3, ip
 801f508:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f50c:	f1c6 0310 	rsb	r3, r6, #16
 801f510:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f514:	1b5b      	subs	r3, r3, r5
 801f516:	ea4e 0707 	orr.w	r7, lr, r7
 801f51a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801f51e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f522:	437d      	muls	r5, r7
 801f524:	fb03 5c0c 	mla	ip, r3, ip, r5
 801f528:	0403      	lsls	r3, r0, #16
 801f52a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f52e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f532:	4318      	orrs	r0, r3
 801f534:	0413      	lsls	r3, r2, #16
 801f536:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f53a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f53e:	4313      	orrs	r3, r2
 801f540:	fb04 c000 	mla	r0, r4, r0, ip
 801f544:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801f548:	fb06 0003 	mla	r0, r6, r3, r0
 801f54c:	0d43      	lsrs	r3, r0, #21
 801f54e:	0940      	lsrs	r0, r0, #5
 801f550:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f554:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f558:	4318      	orrs	r0, r3
 801f55a:	8008      	strh	r0, [r1, #0]
 801f55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f560:	4684      	mov	ip, r0
 801f562:	e7a0      	b.n	801f4a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801f564:	4607      	mov	r7, r0
 801f566:	4684      	mov	ip, r0
 801f568:	e7a7      	b.n	801f4ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f56a:	4607      	mov	r7, r0
 801f56c:	e7a5      	b.n	801f4ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f56e:	4602      	mov	r2, r0
 801f570:	e7b2      	b.n	801f4d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801f572:	4602      	mov	r2, r0
 801f574:	e7ba      	b.n	801f4ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801f576 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f57a:	b093      	sub	sp, #76	; 0x4c
 801f57c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801f580:	920f      	str	r2, [sp, #60]	; 0x3c
 801f582:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f584:	9108      	str	r1, [sp, #32]
 801f586:	9306      	str	r3, [sp, #24]
 801f588:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801f58c:	9010      	str	r0, [sp, #64]	; 0x40
 801f58e:	6850      	ldr	r0, [r2, #4]
 801f590:	6812      	ldr	r2, [r2, #0]
 801f592:	fb00 1303 	mla	r3, r0, r3, r1
 801f596:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801f59a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	9307      	str	r3, [sp, #28]
 801f5a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5a2:	685f      	ldr	r7, [r3, #4]
 801f5a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f5a8:	3704      	adds	r7, #4
 801f5aa:	9b08      	ldr	r3, [sp, #32]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	dc03      	bgt.n	801f5b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f5b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	f340 81b2 	ble.w	801f91c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f5b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f5be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f5c2:	1e48      	subs	r0, r1, #1
 801f5c4:	f102 3cff 	add.w	ip, r2, #4294967295
 801f5c8:	9b06      	ldr	r3, [sp, #24]
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	f340 80a9 	ble.w	801f722 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f5d0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f5d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f5d8:	d406      	bmi.n	801f5e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5da:	4586      	cmp	lr, r0
 801f5dc:	da04      	bge.n	801f5e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	db02      	blt.n	801f5e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5e2:	4563      	cmp	r3, ip
 801f5e4:	f2c0 809e 	blt.w	801f724 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f5e8:	f11e 0e01 	adds.w	lr, lr, #1
 801f5ec:	f100 808f 	bmi.w	801f70e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f5f0:	4571      	cmp	r1, lr
 801f5f2:	f2c0 808c 	blt.w	801f70e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f5f6:	3301      	adds	r3, #1
 801f5f8:	f100 8089 	bmi.w	801f70e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f5fc:	429a      	cmp	r2, r3
 801f5fe:	f2c0 8086 	blt.w	801f70e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f602:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f606:	46c8      	mov	r8, r9
 801f608:	f1bb 0f00 	cmp.w	fp, #0
 801f60c:	f340 80a6 	ble.w	801f75c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f610:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f612:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f614:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f618:	689b      	ldr	r3, [r3, #8]
 801f61a:	1422      	asrs	r2, r4, #16
 801f61c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f620:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f624:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f628:	f100 80e3 	bmi.w	801f7f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f62c:	f103 3aff 	add.w	sl, r3, #4294967295
 801f630:	4552      	cmp	r2, sl
 801f632:	f280 80de 	bge.w	801f7f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f636:	f1bc 0f00 	cmp.w	ip, #0
 801f63a:	f2c0 80da 	blt.w	801f7f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f63e:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f642:	45d4      	cmp	ip, sl
 801f644:	f280 80d5 	bge.w	801f7f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f648:	b21b      	sxth	r3, r3
 801f64a:	fb0c 2203 	mla	r2, ip, r3, r2
 801f64e:	9d07      	ldr	r5, [sp, #28]
 801f650:	eb05 0a02 	add.w	sl, r5, r2
 801f654:	5caa      	ldrb	r2, [r5, r2]
 801f656:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801f65a:	2800      	cmp	r0, #0
 801f65c:	f000 80c0 	beq.w	801f7e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f660:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f664:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801f668:	920b      	str	r2, [sp, #44]	; 0x2c
 801f66a:	b151      	cbz	r1, 801f682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f66c:	eb0a 0203 	add.w	r2, sl, r3
 801f670:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f674:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f678:	9309      	str	r3, [sp, #36]	; 0x24
 801f67a:	7853      	ldrb	r3, [r2, #1]
 801f67c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f680:	930c      	str	r3, [sp, #48]	; 0x30
 801f682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f684:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f686:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f68a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f68e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f692:	ea4c 0c03 	orr.w	ip, ip, r3
 801f696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f698:	041b      	lsls	r3, r3, #16
 801f69a:	fb10 f201 	smulbb	r2, r0, r1
 801f69e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f6a2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f6a6:	10d2      	asrs	r2, r2, #3
 801f6a8:	432b      	orrs	r3, r5
 801f6aa:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801f6ae:	4353      	muls	r3, r2
 801f6b0:	fb0a 330c 	mla	r3, sl, ip, r3
 801f6b4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f6b8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f6bc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f6c0:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f6c4:	f1c1 0c10 	rsb	ip, r1, #16
 801f6c8:	ebac 0c00 	sub.w	ip, ip, r0
 801f6cc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f6d0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6d6:	0418      	lsls	r0, r3, #16
 801f6d8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f6dc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f6e0:	4318      	orrs	r0, r3
 801f6e2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f6e6:	fb02 c200 	mla	r2, r2, r0, ip
 801f6ea:	0d53      	lsrs	r3, r2, #21
 801f6ec:	0952      	lsrs	r2, r2, #5
 801f6ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f6f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f6f6:	431a      	orrs	r2, r3
 801f6f8:	f8a8 2000 	strh.w	r2, [r8]
 801f6fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f6fe:	441c      	add	r4, r3
 801f700:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f702:	f108 0802 	add.w	r8, r8, #2
 801f706:	441e      	add	r6, r3
 801f708:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f70c:	e77c      	b.n	801f608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f70e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f710:	441c      	add	r4, r3
 801f712:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f714:	441e      	add	r6, r3
 801f716:	9b06      	ldr	r3, [sp, #24]
 801f718:	3b01      	subs	r3, #1
 801f71a:	9306      	str	r3, [sp, #24]
 801f71c:	f109 0902 	add.w	r9, r9, #2
 801f720:	e752      	b.n	801f5c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f722:	d020      	beq.n	801f766 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f724:	9b06      	ldr	r3, [sp, #24]
 801f726:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f728:	3b01      	subs	r3, #1
 801f72a:	fb00 4003 	mla	r0, r0, r3, r4
 801f72e:	1400      	asrs	r0, r0, #16
 801f730:	f53f af67 	bmi.w	801f602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f734:	3901      	subs	r1, #1
 801f736:	4288      	cmp	r0, r1
 801f738:	f6bf af63 	bge.w	801f602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f73c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f73e:	fb01 6303 	mla	r3, r1, r3, r6
 801f742:	141b      	asrs	r3, r3, #16
 801f744:	f53f af5d 	bmi.w	801f602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f748:	3a01      	subs	r2, #1
 801f74a:	4293      	cmp	r3, r2
 801f74c:	f6bf af59 	bge.w	801f602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f750:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f754:	46ca      	mov	sl, r9
 801f756:	f1b8 0f00 	cmp.w	r8, #0
 801f75a:	dc67      	bgt.n	801f82c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f75c:	9b06      	ldr	r3, [sp, #24]
 801f75e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f762:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801f766:	9b08      	ldr	r3, [sp, #32]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	f340 80d7 	ble.w	801f91c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f76e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f772:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f776:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f77a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f77c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f780:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f784:	eeb0 6a62 	vmov.f32	s12, s5
 801f788:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f78c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f790:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f794:	ee16 4a10 	vmov	r4, s12
 801f798:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f79c:	eeb0 6a43 	vmov.f32	s12, s6
 801f7a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f7a4:	ee12 2a90 	vmov	r2, s5
 801f7a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f7ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7b0:	ee13 2a10 	vmov	r2, s6
 801f7b4:	931f      	str	r3, [sp, #124]	; 0x7c
 801f7b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f7b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7bc:	9320      	str	r3, [sp, #128]	; 0x80
 801f7be:	9b08      	ldr	r3, [sp, #32]
 801f7c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f7c2:	3b01      	subs	r3, #1
 801f7c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7c8:	9308      	str	r3, [sp, #32]
 801f7ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f7cc:	bf08      	it	eq
 801f7ce:	4613      	moveq	r3, r2
 801f7d0:	ee16 6a10 	vmov	r6, s12
 801f7d4:	9306      	str	r3, [sp, #24]
 801f7d6:	eeb0 3a67 	vmov.f32	s6, s15
 801f7da:	eef0 2a47 	vmov.f32	s5, s14
 801f7de:	e6e4      	b.n	801f5aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f7e0:	2900      	cmp	r1, #0
 801f7e2:	f43f af4e 	beq.w	801f682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f7e6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f7ea:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f7ee:	9309      	str	r3, [sp, #36]	; 0x24
 801f7f0:	e747      	b.n	801f682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f7f2:	f112 0a01 	adds.w	sl, r2, #1
 801f7f6:	d481      	bmi.n	801f6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f7f8:	4553      	cmp	r3, sl
 801f7fa:	f6ff af7f 	blt.w	801f6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f7fe:	f11c 0a01 	adds.w	sl, ip, #1
 801f802:	f53f af7b 	bmi.w	801f6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f806:	45d6      	cmp	lr, sl
 801f808:	f6ff af78 	blt.w	801f6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f80c:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801f810:	b21b      	sxth	r3, r3
 801f812:	fa0f f28e 	sxth.w	r2, lr
 801f816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f81a:	9201      	str	r2, [sp, #4]
 801f81c:	9300      	str	r3, [sp, #0]
 801f81e:	9a07      	ldr	r2, [sp, #28]
 801f820:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f822:	463b      	mov	r3, r7
 801f824:	4641      	mov	r1, r8
 801f826:	f7ff fe21 	bl	801f46c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f82a:	e767      	b.n	801f6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f82c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f82e:	9d07      	ldr	r5, [sp, #28]
 801f830:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f834:	1422      	asrs	r2, r4, #16
 801f836:	1431      	asrs	r1, r6, #16
 801f838:	fb03 2101 	mla	r1, r3, r1, r2
 801f83c:	9a07      	ldr	r2, [sp, #28]
 801f83e:	440a      	add	r2, r1
 801f840:	5c69      	ldrb	r1, [r5, r1]
 801f842:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801f846:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f84a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801f84e:	f1be 0f00 	cmp.w	lr, #0
 801f852:	d05c      	beq.n	801f90e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801f854:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f858:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801f85c:	950d      	str	r5, [sp, #52]	; 0x34
 801f85e:	b150      	cbz	r0, 801f876 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f860:	eb02 0c03 	add.w	ip, r2, r3
 801f864:	5cd3      	ldrb	r3, [r2, r3]
 801f866:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f86a:	930a      	str	r3, [sp, #40]	; 0x28
 801f86c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f870:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f874:	930e      	str	r3, [sp, #56]	; 0x38
 801f876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f878:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f87a:	fb1e f200 	smulbb	r2, lr, r0
 801f87e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f882:	10d2      	asrs	r2, r2, #3
 801f884:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f888:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f88c:	ea4c 0c03 	orr.w	ip, ip, r3
 801f890:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801f894:	9311      	str	r3, [sp, #68]	; 0x44
 801f896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f898:	041b      	lsls	r3, r3, #16
 801f89a:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801f89e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f8a2:	ea43 030b 	orr.w	r3, r3, fp
 801f8a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f8a8:	4353      	muls	r3, r2
 801f8aa:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f8ae:	fb05 3c0c 	mla	ip, r5, ip, r3
 801f8b2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f8b6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f8ba:	ea43 0b01 	orr.w	fp, r3, r1
 801f8be:	f1c0 0110 	rsb	r1, r0, #16
 801f8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8c4:	eba1 0e0e 	sub.w	lr, r1, lr
 801f8c8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801f8cc:	fb0e cc0b 	mla	ip, lr, fp, ip
 801f8d0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801f8d4:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801f8d8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f8dc:	ea4b 0e0e 	orr.w	lr, fp, lr
 801f8e0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f8e4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f8e8:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801f8ec:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f8f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f8f4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f8f8:	ea43 0c0c 	orr.w	ip, r3, ip
 801f8fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f8fe:	f82a cb02 	strh.w	ip, [sl], #2
 801f902:	441c      	add	r4, r3
 801f904:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f906:	f108 38ff 	add.w	r8, r8, #4294967295
 801f90a:	441e      	add	r6, r3
 801f90c:	e723      	b.n	801f756 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f90e:	2800      	cmp	r0, #0
 801f910:	d0b1      	beq.n	801f876 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f912:	5cd3      	ldrb	r3, [r2, r3]
 801f914:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f918:	930a      	str	r3, [sp, #40]	; 0x28
 801f91a:	e7ac      	b.n	801f876 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f91c:	b013      	add	sp, #76	; 0x4c
 801f91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f922 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801f922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f926:	880d      	ldrh	r5, [r1, #0]
 801f928:	b087      	sub	sp, #28
 801f92a:	10ef      	asrs	r7, r5, #3
 801f92c:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801f930:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f934:	00ed      	lsls	r5, r5, #3
 801f936:	9701      	str	r7, [sp, #4]
 801f938:	b2ed      	uxtb	r5, r5
 801f93a:	9502      	str	r5, [sp, #8]
 801f93c:	9d01      	ldr	r5, [sp, #4]
 801f93e:	9103      	str	r1, [sp, #12]
 801f940:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801f944:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801f948:	9902      	ldr	r1, [sp, #8]
 801f94a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801f94e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801f952:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f956:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801f95a:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801f95e:	022d      	lsls	r5, r5, #8
 801f960:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801f964:	fb06 0709 	mla	r7, r6, r9, r0
 801f968:	430d      	orrs	r5, r1
 801f96a:	2e00      	cmp	r6, #0
 801f96c:	eb02 0c07 	add.w	ip, r2, r7
 801f970:	9505      	str	r5, [sp, #20]
 801f972:	f2c0 80b6 	blt.w	801fae2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f976:	45b3      	cmp	fp, r6
 801f978:	f340 80b3 	ble.w	801fae2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f97c:	2800      	cmp	r0, #0
 801f97e:	f2c0 80ae 	blt.w	801fade <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f982:	4581      	cmp	r9, r0
 801f984:	f340 80ab 	ble.w	801fade <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f988:	5dd7      	ldrb	r7, [r2, r7]
 801f98a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f98e:	441f      	add	r7, r3
 801f990:	1c42      	adds	r2, r0, #1
 801f992:	f100 80a9 	bmi.w	801fae8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f996:	4591      	cmp	r9, r2
 801f998:	f340 80a6 	ble.w	801fae8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f99c:	2c00      	cmp	r4, #0
 801f99e:	f000 80a3 	beq.w	801fae8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f9a2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f9a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f9aa:	441d      	add	r5, r3
 801f9ac:	3601      	adds	r6, #1
 801f9ae:	f100 809f 	bmi.w	801faf0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f9b2:	45b3      	cmp	fp, r6
 801f9b4:	f340 809c 	ble.w	801faf0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f9b8:	f1be 0f00 	cmp.w	lr, #0
 801f9bc:	f000 8098 	beq.w	801faf0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f9c0:	2800      	cmp	r0, #0
 801f9c2:	f2c0 8093 	blt.w	801faec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f9c6:	4581      	cmp	r9, r0
 801f9c8:	f340 8090 	ble.w	801faec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f9cc:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801f9d0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f9d4:	441e      	add	r6, r3
 801f9d6:	3001      	adds	r0, #1
 801f9d8:	f100 808d 	bmi.w	801faf6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f9dc:	4581      	cmp	r9, r0
 801f9de:	f340 808a 	ble.w	801faf6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f9e2:	2c00      	cmp	r4, #0
 801f9e4:	f000 8087 	beq.w	801faf6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f9e8:	44e1      	add	r9, ip
 801f9ea:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f9ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f9f2:	4413      	add	r3, r2
 801f9f4:	b2a4      	uxth	r4, r4
 801f9f6:	fa1f fe8e 	uxth.w	lr, lr
 801f9fa:	fb04 fb0e 	mul.w	fp, r4, lr
 801f9fe:	0124      	lsls	r4, r4, #4
 801fa00:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801fa04:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801fa08:	eba4 040b 	sub.w	r4, r4, fp
 801fa0c:	fa1f f08e 	uxth.w	r0, lr
 801fa10:	b2a2      	uxth	r2, r4
 801fa12:	78ac      	ldrb	r4, [r5, #2]
 801fa14:	f897 c002 	ldrb.w	ip, [r7, #2]
 801fa18:	9901      	ldr	r1, [sp, #4]
 801fa1a:	eba9 0900 	sub.w	r9, r9, r0
 801fa1e:	fa1f f989 	uxth.w	r9, r9
 801fa22:	4354      	muls	r4, r2
 801fa24:	fb09 440c 	mla	r4, r9, ip, r4
 801fa28:	f896 c002 	ldrb.w	ip, [r6, #2]
 801fa2c:	fb00 440c 	mla	r4, r0, ip, r4
 801fa30:	f893 c002 	ldrb.w	ip, [r3, #2]
 801fa34:	fa1f fe88 	uxth.w	lr, r8
 801fa38:	ea6f 0808 	mvn.w	r8, r8
 801fa3c:	fa5f f888 	uxtb.w	r8, r8
 801fa40:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801fa44:	fb1a fa08 	smulbb	sl, sl, r8
 801fa48:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fa4c:	fb0c ac0e 	mla	ip, ip, lr, sl
 801fa50:	f895 a001 	ldrb.w	sl, [r5, #1]
 801fa54:	787c      	ldrb	r4, [r7, #1]
 801fa56:	782d      	ldrb	r5, [r5, #0]
 801fa58:	783f      	ldrb	r7, [r7, #0]
 801fa5a:	fb02 fa0a 	mul.w	sl, r2, sl
 801fa5e:	fb09 aa04 	mla	sl, r9, r4, sl
 801fa62:	7874      	ldrb	r4, [r6, #1]
 801fa64:	436a      	muls	r2, r5
 801fa66:	7835      	ldrb	r5, [r6, #0]
 801fa68:	fb00 aa04 	mla	sl, r0, r4, sl
 801fa6c:	fb09 2207 	mla	r2, r9, r7, r2
 801fa70:	785c      	ldrb	r4, [r3, #1]
 801fa72:	781b      	ldrb	r3, [r3, #0]
 801fa74:	fb00 2005 	mla	r0, r0, r5, r2
 801fa78:	fb0b a404 	mla	r4, fp, r4, sl
 801fa7c:	fb0b 0b03 	mla	fp, fp, r3, r0
 801fa80:	9b02      	ldr	r3, [sp, #8]
 801fa82:	fb11 fa08 	smulbb	sl, r1, r8
 801fa86:	fa1f fc8c 	uxth.w	ip, ip
 801fa8a:	fb13 f808 	smulbb	r8, r3, r8
 801fa8e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801fa92:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801fa96:	fb04 a40e 	mla	r4, r4, lr, sl
 801fa9a:	f10c 0301 	add.w	r3, ip, #1
 801fa9e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801faa2:	fa1f fe8e 	uxth.w	lr, lr
 801faa6:	b2a4      	uxth	r4, r4
 801faa8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801faac:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801fab0:	f104 0a01 	add.w	sl, r4, #1
 801fab4:	f10e 0c01 	add.w	ip, lr, #1
 801fab8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fabc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801fac0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fac4:	0964      	lsrs	r4, r4, #5
 801fac6:	ea4c 0c03 	orr.w	ip, ip, r3
 801faca:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801face:	9b03      	ldr	r3, [sp, #12]
 801fad0:	ea4c 0c04 	orr.w	ip, ip, r4
 801fad4:	f8a3 c000 	strh.w	ip, [r3]
 801fad8:	b007      	add	sp, #28
 801fada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fade:	af05      	add	r7, sp, #20
 801fae0:	e756      	b.n	801f990 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801fae2:	ad05      	add	r5, sp, #20
 801fae4:	462f      	mov	r7, r5
 801fae6:	e761      	b.n	801f9ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801fae8:	ad05      	add	r5, sp, #20
 801faea:	e75f      	b.n	801f9ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801faec:	ae05      	add	r6, sp, #20
 801faee:	e772      	b.n	801f9d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801faf0:	ab05      	add	r3, sp, #20
 801faf2:	461e      	mov	r6, r3
 801faf4:	e77e      	b.n	801f9f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801faf6:	ab05      	add	r3, sp, #20
 801faf8:	e77c      	b.n	801f9f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801fafa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fafa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fafe:	b095      	sub	sp, #84	; 0x54
 801fb00:	9212      	str	r2, [sp, #72]	; 0x48
 801fb02:	9309      	str	r3, [sp, #36]	; 0x24
 801fb04:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fb06:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801fb0a:	930f      	str	r3, [sp, #60]	; 0x3c
 801fb0c:	910e      	str	r1, [sp, #56]	; 0x38
 801fb0e:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801fb12:	9013      	str	r0, [sp, #76]	; 0x4c
 801fb14:	6850      	ldr	r0, [r2, #4]
 801fb16:	6812      	ldr	r2, [r2, #0]
 801fb18:	fb00 1303 	mla	r3, r0, r3, r1
 801fb1c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fb20:	930a      	str	r3, [sp, #40]	; 0x28
 801fb22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fb24:	681b      	ldr	r3, [r3, #0]
 801fb26:	930d      	str	r3, [sp, #52]	; 0x34
 801fb28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fb2a:	685c      	ldr	r4, [r3, #4]
 801fb2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fb2e:	43db      	mvns	r3, r3
 801fb30:	b2db      	uxtb	r3, r3
 801fb32:	3404      	adds	r4, #4
 801fb34:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	dc03      	bgt.n	801fb44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fb3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	f340 8255 	ble.w	801ffee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801fb44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fb46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fb4e:	1e48      	subs	r0, r1, #1
 801fb50:	1e55      	subs	r5, r2, #1
 801fb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	f340 80f9 	ble.w	801fd4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fb5a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801fb5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fb5e:	1436      	asrs	r6, r6, #16
 801fb60:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fb64:	d406      	bmi.n	801fb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb66:	4286      	cmp	r6, r0
 801fb68:	da04      	bge.n	801fb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb6a:	2b00      	cmp	r3, #0
 801fb6c:	db02      	blt.n	801fb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb6e:	42ab      	cmp	r3, r5
 801fb70:	f2c0 80ed 	blt.w	801fd4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801fb74:	3601      	adds	r6, #1
 801fb76:	f100 80da 	bmi.w	801fd2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fb7a:	42b1      	cmp	r1, r6
 801fb7c:	f2c0 80d7 	blt.w	801fd2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fb80:	3301      	adds	r3, #1
 801fb82:	f100 80d4 	bmi.w	801fd2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fb86:	429a      	cmp	r2, r3
 801fb88:	f2c0 80d1 	blt.w	801fd2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb8e:	9311      	str	r3, [sp, #68]	; 0x44
 801fb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb92:	930c      	str	r3, [sp, #48]	; 0x30
 801fb94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	f340 80fa 	ble.w	801fd90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fb9c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fb9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fba0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fba2:	68c6      	ldr	r6, [r0, #12]
 801fba4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fba6:	141d      	asrs	r5, r3, #16
 801fba8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fbac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fbae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fbb0:	1400      	asrs	r0, r0, #16
 801fbb2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fbb6:	6892      	ldr	r2, [r2, #8]
 801fbb8:	f100 813e 	bmi.w	801fe38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fbbc:	1e57      	subs	r7, r2, #1
 801fbbe:	42b8      	cmp	r0, r7
 801fbc0:	f280 813a 	bge.w	801fe38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fbc4:	2d00      	cmp	r5, #0
 801fbc6:	f2c0 8137 	blt.w	801fe38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fbca:	1e77      	subs	r7, r6, #1
 801fbcc:	42bd      	cmp	r5, r7
 801fbce:	f280 8133 	bge.w	801fe38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fbd2:	b212      	sxth	r2, r2
 801fbd4:	fb05 0002 	mla	r0, r5, r2, r0
 801fbd8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fbda:	f815 a000 	ldrb.w	sl, [r5, r0]
 801fbde:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801fbe2:	182e      	adds	r6, r5, r0
 801fbe4:	eb04 050a 	add.w	r5, r4, sl
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	f000 8117 	beq.w	801fe1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fbee:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fbf2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fbf6:	44a4      	add	ip, r4
 801fbf8:	2900      	cmp	r1, #0
 801fbfa:	f000 8117 	beq.w	801fe2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801fbfe:	18b0      	adds	r0, r6, r2
 801fc00:	5cb2      	ldrb	r2, [r6, r2]
 801fc02:	7840      	ldrb	r0, [r0, #1]
 801fc04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fc0c:	4422      	add	r2, r4
 801fc0e:	4420      	add	r0, r4
 801fc10:	b29b      	uxth	r3, r3
 801fc12:	b289      	uxth	r1, r1
 801fc14:	fb03 f901 	mul.w	r9, r3, r1
 801fc18:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fc1c:	011b      	lsls	r3, r3, #4
 801fc1e:	b289      	uxth	r1, r1
 801fc20:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801fc24:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fc28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fc2a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801fc2e:	f8b6 e000 	ldrh.w	lr, [r6]
 801fc32:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801fc36:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801fc3a:	eba3 0309 	sub.w	r3, r3, r9
 801fc3e:	b29b      	uxth	r3, r3
 801fc40:	eba8 0801 	sub.w	r8, r8, r1
 801fc44:	fa1f f888 	uxth.w	r8, r8
 801fc48:	435f      	muls	r7, r3
 801fc4a:	fb08 770b 	mla	r7, r8, fp, r7
 801fc4e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fc52:	9310      	str	r3, [sp, #64]	; 0x40
 801fc54:	fb01 770b 	mla	r7, r1, fp, r7
 801fc58:	f890 b002 	ldrb.w	fp, [r0, #2]
 801fc5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc5e:	fb09 770b 	mla	r7, r9, fp, r7
 801fc62:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801fc66:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fc6a:	fb1b fb03 	smulbb	fp, fp, r3
 801fc6e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fc72:	fb07 b706 	mla	r7, r7, r6, fp
 801fc76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc78:	f895 b001 	ldrb.w	fp, [r5, #1]
 801fc7c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fc80:	f89c c000 	ldrb.w	ip, [ip]
 801fc84:	435d      	muls	r5, r3
 801fc86:	fb08 550b 	mla	r5, r8, fp, r5
 801fc8a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fc8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc90:	fb01 550b 	mla	r5, r1, fp, r5
 801fc94:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fc98:	fb09 550b 	mla	r5, r9, fp, r5
 801fc9c:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801fca0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fca4:	fb1b fb03 	smulbb	fp, fp, r3
 801fca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fcaa:	fb03 f30c 	mul.w	r3, r3, ip
 801fcae:	f892 c000 	ldrb.w	ip, [r2]
 801fcb2:	fb08 330a 	mla	r3, r8, sl, r3
 801fcb6:	fb01 330c 	mla	r3, r1, ip, r3
 801fcba:	f890 c000 	ldrb.w	ip, [r0]
 801fcbe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fcc2:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fcc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fcc8:	fa5f fe8e 	uxtb.w	lr, lr
 801fccc:	b2bf      	uxth	r7, r7
 801fcce:	fb1e fe03 	smulbb	lr, lr, r3
 801fcd2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fcd6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fcda:	fb05 b506 	mla	r5, r5, r6, fp
 801fcde:	1c7b      	adds	r3, r7, #1
 801fce0:	fb0c e606 	mla	r6, ip, r6, lr
 801fce4:	b2ad      	uxth	r5, r5
 801fce6:	b2b6      	uxth	r6, r6
 801fce8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801fcec:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801fcf0:	f105 0b01 	add.w	fp, r5, #1
 801fcf4:	1c77      	adds	r7, r6, #1
 801fcf6:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fcfa:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801fcfe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fd02:	096d      	lsrs	r5, r5, #5
 801fd04:	431f      	orrs	r7, r3
 801fd06:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fd0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd0c:	433d      	orrs	r5, r7
 801fd0e:	801d      	strh	r5, [r3, #0]
 801fd10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd12:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fd14:	3302      	adds	r3, #2
 801fd16:	930c      	str	r3, [sp, #48]	; 0x30
 801fd18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fd1a:	4413      	add	r3, r2
 801fd1c:	931f      	str	r3, [sp, #124]	; 0x7c
 801fd1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801fd20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fd22:	4413      	add	r3, r2
 801fd24:	9320      	str	r3, [sp, #128]	; 0x80
 801fd26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fd28:	3b01      	subs	r3, #1
 801fd2a:	9311      	str	r3, [sp, #68]	; 0x44
 801fd2c:	e732      	b.n	801fb94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fd2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fd30:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801fd32:	4433      	add	r3, r6
 801fd34:	931f      	str	r3, [sp, #124]	; 0x7c
 801fd36:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801fd38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fd3a:	4433      	add	r3, r6
 801fd3c:	9320      	str	r3, [sp, #128]	; 0x80
 801fd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd40:	3b01      	subs	r3, #1
 801fd42:	9309      	str	r3, [sp, #36]	; 0x24
 801fd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd46:	3302      	adds	r3, #2
 801fd48:	930a      	str	r3, [sp, #40]	; 0x28
 801fd4a:	e702      	b.n	801fb52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fd4c:	d027      	beq.n	801fd9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801fd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd50:	9821      	ldr	r0, [sp, #132]	; 0x84
 801fd52:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801fd54:	3b01      	subs	r3, #1
 801fd56:	fb00 5003 	mla	r0, r0, r3, r5
 801fd5a:	1400      	asrs	r0, r0, #16
 801fd5c:	f53f af16 	bmi.w	801fb8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd60:	3901      	subs	r1, #1
 801fd62:	4288      	cmp	r0, r1
 801fd64:	f6bf af12 	bge.w	801fb8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd68:	9922      	ldr	r1, [sp, #136]	; 0x88
 801fd6a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801fd6c:	fb01 0303 	mla	r3, r1, r3, r0
 801fd70:	141b      	asrs	r3, r3, #16
 801fd72:	f53f af0b 	bmi.w	801fb8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd76:	3a01      	subs	r2, #1
 801fd78:	4293      	cmp	r3, r2
 801fd7a:	f6bf af07 	bge.w	801fb8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd80:	9311      	str	r3, [sp, #68]	; 0x44
 801fd82:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801fd86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd88:	930c      	str	r3, [sp, #48]	; 0x30
 801fd8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	dc70      	bgt.n	801fe72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801fd90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fd9c:	930a      	str	r3, [sp, #40]	; 0x28
 801fd9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	f340 8124 	ble.w	801ffee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801fda6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fdaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fdae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fdb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fdb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fdb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fdbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fdc0:	eef0 6a62 	vmov.f32	s13, s5
 801fdc4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fdc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdcc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fdd0:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801fdd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fdd8:	eef0 6a43 	vmov.f32	s13, s6
 801fddc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fde0:	ee12 2a90 	vmov	r2, s5
 801fde4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fde8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdec:	ee13 2a10 	vmov	r2, s6
 801fdf0:	9321      	str	r3, [sp, #132]	; 0x84
 801fdf2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fdf4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdf8:	9322      	str	r3, [sp, #136]	; 0x88
 801fdfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdfe:	3b01      	subs	r3, #1
 801fe00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe04:	930e      	str	r3, [sp, #56]	; 0x38
 801fe06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fe08:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801fe0c:	bf08      	it	eq
 801fe0e:	4613      	moveq	r3, r2
 801fe10:	9309      	str	r3, [sp, #36]	; 0x24
 801fe12:	eeb0 3a67 	vmov.f32	s6, s15
 801fe16:	eef0 2a47 	vmov.f32	s5, s14
 801fe1a:	e68c      	b.n	801fb36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fe1c:	b149      	cbz	r1, 801fe32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801fe1e:	5cb2      	ldrb	r2, [r6, r2]
 801fe20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe24:	4422      	add	r2, r4
 801fe26:	4628      	mov	r0, r5
 801fe28:	46ac      	mov	ip, r5
 801fe2a:	e6f1      	b.n	801fc10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fe2c:	4628      	mov	r0, r5
 801fe2e:	462a      	mov	r2, r5
 801fe30:	e6ee      	b.n	801fc10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fe32:	4628      	mov	r0, r5
 801fe34:	462a      	mov	r2, r5
 801fe36:	e7f7      	b.n	801fe28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801fe38:	1c47      	adds	r7, r0, #1
 801fe3a:	f53f af69 	bmi.w	801fd10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe3e:	42ba      	cmp	r2, r7
 801fe40:	f6ff af66 	blt.w	801fd10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe44:	1c6f      	adds	r7, r5, #1
 801fe46:	f53f af63 	bmi.w	801fd10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe4a:	42be      	cmp	r6, r7
 801fe4c:	f6ff af60 	blt.w	801fd10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe50:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fe52:	9002      	str	r0, [sp, #8]
 801fe54:	b236      	sxth	r6, r6
 801fe56:	b212      	sxth	r2, r2
 801fe58:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801fe5c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801fe60:	9200      	str	r2, [sp, #0]
 801fe62:	9601      	str	r6, [sp, #4]
 801fe64:	4623      	mov	r3, r4
 801fe66:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801fe6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fe6c:	f7ff fd59 	bl	801f922 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801fe70:	e74e      	b.n	801fd10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe72:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fe74:	9820      	ldr	r0, [sp, #128]	; 0x80
 801fe76:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801fe78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fe7a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fe7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fe80:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fe84:	142d      	asrs	r5, r5, #16
 801fe86:	1400      	asrs	r0, r0, #16
 801fe88:	fb02 5000 	mla	r0, r2, r0, r5
 801fe8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fe8e:	f815 9000 	ldrb.w	r9, [r5, r0]
 801fe92:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fe96:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fe9a:	182e      	adds	r6, r5, r0
 801fe9c:	eb04 0509 	add.w	r5, r4, r9
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	f000 8096 	beq.w	801ffd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801fea6:	7877      	ldrb	r7, [r6, #1]
 801fea8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801feac:	4427      	add	r7, r4
 801feae:	2900      	cmp	r1, #0
 801feb0:	f000 8097 	beq.w	801ffe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801feb4:	18b0      	adds	r0, r6, r2
 801feb6:	5cb2      	ldrb	r2, [r6, r2]
 801feb8:	7840      	ldrb	r0, [r0, #1]
 801feba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801febe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fec2:	4422      	add	r2, r4
 801fec4:	4420      	add	r0, r4
 801fec6:	b29b      	uxth	r3, r3
 801fec8:	b289      	uxth	r1, r1
 801feca:	fb03 f801 	mul.w	r8, r3, r1
 801fece:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fed0:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fed4:	f8b6 c000 	ldrh.w	ip, [r6]
 801fed8:	78be      	ldrb	r6, [r7, #2]
 801feda:	f814 9009 	ldrb.w	r9, [r4, r9]
 801fede:	011b      	lsls	r3, r3, #4
 801fee0:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801fee4:	b289      	uxth	r1, r1
 801fee6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801feea:	eba3 0308 	sub.w	r3, r3, r8
 801feee:	b29b      	uxth	r3, r3
 801fef0:	ebae 0e01 	sub.w	lr, lr, r1
 801fef4:	fa1f fe8e 	uxth.w	lr, lr
 801fef8:	435e      	muls	r6, r3
 801fefa:	fb0e 660b 	mla	r6, lr, fp, r6
 801fefe:	f892 b002 	ldrb.w	fp, [r2, #2]
 801ff02:	9310      	str	r3, [sp, #64]	; 0x40
 801ff04:	fb01 660b 	mla	r6, r1, fp, r6
 801ff08:	f890 b002 	ldrb.w	fp, [r0, #2]
 801ff0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff0e:	fb08 660b 	mla	r6, r8, fp, r6
 801ff12:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801ff16:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801ff1a:	fb1b fb03 	smulbb	fp, fp, r3
 801ff1e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ff22:	fb06 b60a 	mla	r6, r6, sl, fp
 801ff26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff28:	f895 b001 	ldrb.w	fp, [r5, #1]
 801ff2c:	787d      	ldrb	r5, [r7, #1]
 801ff2e:	783f      	ldrb	r7, [r7, #0]
 801ff30:	435d      	muls	r5, r3
 801ff32:	fb0e 550b 	mla	r5, lr, fp, r5
 801ff36:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ff3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff3c:	fb01 550b 	mla	r5, r1, fp, r5
 801ff40:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ff44:	fb08 550b 	mla	r5, r8, fp, r5
 801ff48:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801ff4c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ff50:	fb1b fb03 	smulbb	fp, fp, r3
 801ff54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff56:	437b      	muls	r3, r7
 801ff58:	7817      	ldrb	r7, [r2, #0]
 801ff5a:	fb0e 3309 	mla	r3, lr, r9, r3
 801ff5e:	fb01 3307 	mla	r3, r1, r7, r3
 801ff62:	7807      	ldrb	r7, [r0, #0]
 801ff64:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ff68:	fb08 3707 	mla	r7, r8, r7, r3
 801ff6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff6e:	fa5f fc8c 	uxtb.w	ip, ip
 801ff72:	fb1c fc03 	smulbb	ip, ip, r3
 801ff76:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801ff7a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ff7e:	fb05 b50a 	mla	r5, r5, sl, fp
 801ff82:	fb07 c70a 	mla	r7, r7, sl, ip
 801ff86:	b2b6      	uxth	r6, r6
 801ff88:	b2ad      	uxth	r5, r5
 801ff8a:	b2bf      	uxth	r7, r7
 801ff8c:	1c73      	adds	r3, r6, #1
 801ff8e:	1c7a      	adds	r2, r7, #1
 801ff90:	f105 0b01 	add.w	fp, r5, #1
 801ff94:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ff98:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801ff9c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801ffa0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ffa4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ffa8:	096d      	lsrs	r5, r5, #5
 801ffaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ffac:	4316      	orrs	r6, r2
 801ffae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ffb2:	432e      	orrs	r6, r5
 801ffb4:	f823 6b02 	strh.w	r6, [r3], #2
 801ffb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ffba:	930c      	str	r3, [sp, #48]	; 0x30
 801ffbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ffbe:	4413      	add	r3, r2
 801ffc0:	931f      	str	r3, [sp, #124]	; 0x7c
 801ffc2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ffc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ffc6:	4413      	add	r3, r2
 801ffc8:	9320      	str	r3, [sp, #128]	; 0x80
 801ffca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ffcc:	3b01      	subs	r3, #1
 801ffce:	9311      	str	r3, [sp, #68]	; 0x44
 801ffd0:	e6db      	b.n	801fd8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801ffd2:	b149      	cbz	r1, 801ffe8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801ffd4:	5cb2      	ldrb	r2, [r6, r2]
 801ffd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ffda:	4422      	add	r2, r4
 801ffdc:	4628      	mov	r0, r5
 801ffde:	462f      	mov	r7, r5
 801ffe0:	e771      	b.n	801fec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ffe2:	4628      	mov	r0, r5
 801ffe4:	462a      	mov	r2, r5
 801ffe6:	e76e      	b.n	801fec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ffe8:	4628      	mov	r0, r5
 801ffea:	462a      	mov	r2, r5
 801ffec:	e7f7      	b.n	801ffde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801ffee:	b015      	add	sp, #84	; 0x54
 801fff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fff4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801fff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fff8:	880f      	ldrh	r7, [r1, #0]
 801fffa:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801fffe:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020002:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8020006:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802000a:	023c      	lsls	r4, r7, #8
 802000c:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8020010:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8020014:	017c      	lsls	r4, r7, #5
 8020016:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 802001a:	00ff      	lsls	r7, r7, #3
 802001c:	ea4b 0404 	orr.w	r4, fp, r4
 8020020:	b2ff      	uxtb	r7, r7
 8020022:	fb05 ca0e 	mla	sl, r5, lr, ip
 8020026:	4327      	orrs	r7, r4
 8020028:	2d00      	cmp	r5, #0
 802002a:	eb02 080a 	add.w	r8, r2, sl
 802002e:	9701      	str	r7, [sp, #4]
 8020030:	db7e      	blt.n	8020130 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8020032:	45a9      	cmp	r9, r5
 8020034:	dd7c      	ble.n	8020130 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8020036:	f1bc 0f00 	cmp.w	ip, #0
 802003a:	db77      	blt.n	802012c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 802003c:	45e6      	cmp	lr, ip
 802003e:	dd75      	ble.n	802012c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8020040:	f812 700a 	ldrb.w	r7, [r2, sl]
 8020044:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020048:	441f      	add	r7, r3
 802004a:	f11c 0201 	adds.w	r2, ip, #1
 802004e:	d472      	bmi.n	8020136 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020050:	4596      	cmp	lr, r2
 8020052:	dd70      	ble.n	8020136 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020054:	2800      	cmp	r0, #0
 8020056:	d06e      	beq.n	8020136 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020058:	f898 4001 	ldrb.w	r4, [r8, #1]
 802005c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020060:	441c      	add	r4, r3
 8020062:	3501      	adds	r5, #1
 8020064:	d46b      	bmi.n	802013e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020066:	45a9      	cmp	r9, r5
 8020068:	dd69      	ble.n	802013e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802006a:	2e00      	cmp	r6, #0
 802006c:	d067      	beq.n	802013e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802006e:	f1bc 0f00 	cmp.w	ip, #0
 8020072:	db62      	blt.n	802013a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020074:	45e6      	cmp	lr, ip
 8020076:	dd60      	ble.n	802013a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020078:	f818 500e 	ldrb.w	r5, [r8, lr]
 802007c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020080:	441d      	add	r5, r3
 8020082:	f11c 0201 	adds.w	r2, ip, #1
 8020086:	d45d      	bmi.n	8020144 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020088:	4596      	cmp	lr, r2
 802008a:	dd5b      	ble.n	8020144 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 802008c:	2800      	cmp	r0, #0
 802008e:	d059      	beq.n	8020144 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020090:	44c6      	add	lr, r8
 8020092:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020096:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802009a:	4413      	add	r3, r2
 802009c:	b280      	uxth	r0, r0
 802009e:	b2b2      	uxth	r2, r6
 80200a0:	fb00 f602 	mul.w	r6, r0, r2
 80200a4:	0100      	lsls	r0, r0, #4
 80200a6:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80200aa:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 80200ae:	1b80      	subs	r0, r0, r6
 80200b0:	fa1f fc82 	uxth.w	ip, r2
 80200b4:	b282      	uxth	r2, r0
 80200b6:	78a0      	ldrb	r0, [r4, #2]
 80200b8:	f897 e002 	ldrb.w	lr, [r7, #2]
 80200bc:	f897 9000 	ldrb.w	r9, [r7]
 80200c0:	787f      	ldrb	r7, [r7, #1]
 80200c2:	eba8 080c 	sub.w	r8, r8, ip
 80200c6:	fa1f f888 	uxth.w	r8, r8
 80200ca:	4350      	muls	r0, r2
 80200cc:	fb08 0e0e 	mla	lr, r8, lr, r0
 80200d0:	78a8      	ldrb	r0, [r5, #2]
 80200d2:	fb0c e000 	mla	r0, ip, r0, lr
 80200d6:	f893 e002 	ldrb.w	lr, [r3, #2]
 80200da:	fb06 0e0e 	mla	lr, r6, lr, r0
 80200de:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 80200e2:	f894 e000 	ldrb.w	lr, [r4]
 80200e6:	fb02 fe0e 	mul.w	lr, r2, lr
 80200ea:	fb08 e909 	mla	r9, r8, r9, lr
 80200ee:	f895 e000 	ldrb.w	lr, [r5]
 80200f2:	fb0c 990e 	mla	r9, ip, lr, r9
 80200f6:	f893 e000 	ldrb.w	lr, [r3]
 80200fa:	785b      	ldrb	r3, [r3, #1]
 80200fc:	fb06 9e0e 	mla	lr, r6, lr, r9
 8020100:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020104:	ea4e 0e00 	orr.w	lr, lr, r0
 8020108:	7860      	ldrb	r0, [r4, #1]
 802010a:	4350      	muls	r0, r2
 802010c:	786a      	ldrb	r2, [r5, #1]
 802010e:	fb08 0007 	mla	r0, r8, r7, r0
 8020112:	fb0c 0202 	mla	r2, ip, r2, r0
 8020116:	fb06 2303 	mla	r3, r6, r3, r2
 802011a:	095b      	lsrs	r3, r3, #5
 802011c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020120:	ea4e 0303 	orr.w	r3, lr, r3
 8020124:	800b      	strh	r3, [r1, #0]
 8020126:	b003      	add	sp, #12
 8020128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802012c:	af01      	add	r7, sp, #4
 802012e:	e78c      	b.n	802004a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8020130:	ac01      	add	r4, sp, #4
 8020132:	4627      	mov	r7, r4
 8020134:	e795      	b.n	8020062 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8020136:	ac01      	add	r4, sp, #4
 8020138:	e793      	b.n	8020062 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802013a:	ad01      	add	r5, sp, #4
 802013c:	e7a1      	b.n	8020082 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 802013e:	ab01      	add	r3, sp, #4
 8020140:	461d      	mov	r5, r3
 8020142:	e7ab      	b.n	802009c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8020144:	ab01      	add	r3, sp, #4
 8020146:	e7a9      	b.n	802009c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08020148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802014c:	b08f      	sub	sp, #60	; 0x3c
 802014e:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8020152:	920c      	str	r2, [sp, #48]	; 0x30
 8020154:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020156:	910a      	str	r1, [sp, #40]	; 0x28
 8020158:	9306      	str	r3, [sp, #24]
 802015a:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802015e:	900d      	str	r0, [sp, #52]	; 0x34
 8020160:	6850      	ldr	r0, [r2, #4]
 8020162:	6812      	ldr	r2, [r2, #0]
 8020164:	fb00 1303 	mla	r3, r0, r3, r1
 8020168:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802016c:	9307      	str	r3, [sp, #28]
 802016e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	9308      	str	r3, [sp, #32]
 8020174:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020176:	685c      	ldr	r4, [r3, #4]
 8020178:	3404      	adds	r4, #4
 802017a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802017c:	2b00      	cmp	r3, #0
 802017e:	dc03      	bgt.n	8020188 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020182:	2b00      	cmp	r3, #0
 8020184:	f340 81d6 	ble.w	8020534 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8020188:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802018a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802018e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020192:	1e48      	subs	r0, r1, #1
 8020194:	1e56      	subs	r6, r2, #1
 8020196:	9b06      	ldr	r3, [sp, #24]
 8020198:	2b00      	cmp	r3, #0
 802019a:	f340 80b7 	ble.w	802030c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802019e:	ea5f 472b 	movs.w	r7, fp, asr #16
 80201a2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80201a6:	d406      	bmi.n	80201b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80201a8:	4287      	cmp	r7, r0
 80201aa:	da04      	bge.n	80201b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	db02      	blt.n	80201b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80201b0:	42b3      	cmp	r3, r6
 80201b2:	f2c0 80ac 	blt.w	802030e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80201b6:	3701      	adds	r7, #1
 80201b8:	f100 809d 	bmi.w	80202f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80201bc:	42b9      	cmp	r1, r7
 80201be:	f2c0 809a 	blt.w	80202f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80201c2:	3301      	adds	r3, #1
 80201c4:	f100 8097 	bmi.w	80202f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80201c8:	429a      	cmp	r2, r3
 80201ca:	f2c0 8094 	blt.w	80202f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80201ce:	9b06      	ldr	r3, [sp, #24]
 80201d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80201d2:	9b07      	ldr	r3, [sp, #28]
 80201d4:	9309      	str	r3, [sp, #36]	; 0x24
 80201d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201d8:	2b00      	cmp	r3, #0
 80201da:	f340 80b5 	ble.w	8020348 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80201de:	9820      	ldr	r0, [sp, #128]	; 0x80
 80201e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80201e2:	68c7      	ldr	r7, [r0, #12]
 80201e4:	6892      	ldr	r2, [r2, #8]
 80201e6:	ea5f 402b 	movs.w	r0, fp, asr #16
 80201ea:	ea4f 4625 	mov.w	r6, r5, asr #16
 80201ee:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80201f2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80201f6:	f100 80fb 	bmi.w	80203f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80201fa:	f102 3cff 	add.w	ip, r2, #4294967295
 80201fe:	4560      	cmp	r0, ip
 8020200:	f280 80f6 	bge.w	80203f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020204:	2e00      	cmp	r6, #0
 8020206:	f2c0 80f3 	blt.w	80203f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802020a:	f107 3cff 	add.w	ip, r7, #4294967295
 802020e:	4566      	cmp	r6, ip
 8020210:	f280 80ee 	bge.w	80203f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020214:	b212      	sxth	r2, r2
 8020216:	fb06 0002 	mla	r0, r6, r2, r0
 802021a:	9e08      	ldr	r6, [sp, #32]
 802021c:	1837      	adds	r7, r6, r0
 802021e:	5c30      	ldrb	r0, [r6, r0]
 8020220:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8020224:	eb04 0c08 	add.w	ip, r4, r8
 8020228:	2b00      	cmp	r3, #0
 802022a:	f000 80d3 	beq.w	80203d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802022e:	787e      	ldrb	r6, [r7, #1]
 8020230:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020234:	4426      	add	r6, r4
 8020236:	2900      	cmp	r1, #0
 8020238:	f000 80d4 	beq.w	80203e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802023c:	18b8      	adds	r0, r7, r2
 802023e:	5cba      	ldrb	r2, [r7, r2]
 8020240:	7840      	ldrb	r0, [r0, #1]
 8020242:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020246:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802024a:	4422      	add	r2, r4
 802024c:	4420      	add	r0, r4
 802024e:	b29b      	uxth	r3, r3
 8020250:	b289      	uxth	r1, r1
 8020252:	fb03 f901 	mul.w	r9, r3, r1
 8020256:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802025a:	011b      	lsls	r3, r3, #4
 802025c:	b289      	uxth	r1, r1
 802025e:	78b7      	ldrb	r7, [r6, #2]
 8020260:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020264:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020268:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802026c:	eba3 0309 	sub.w	r3, r3, r9
 8020270:	b29b      	uxth	r3, r3
 8020272:	ebae 0e01 	sub.w	lr, lr, r1
 8020276:	fa1f fe8e 	uxth.w	lr, lr
 802027a:	435f      	muls	r7, r3
 802027c:	fb0e 770a 	mla	r7, lr, sl, r7
 8020280:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020284:	fb01 770a 	mla	r7, r1, sl, r7
 8020288:	f890 a002 	ldrb.w	sl, [r0, #2]
 802028c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020290:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020294:	f896 8000 	ldrb.w	r8, [r6]
 8020298:	7876      	ldrb	r6, [r6, #1]
 802029a:	fb03 f808 	mul.w	r8, r3, r8
 802029e:	fb0e 8807 	mla	r8, lr, r7, r8
 80202a2:	7817      	ldrb	r7, [r2, #0]
 80202a4:	fb01 8807 	mla	r8, r1, r7, r8
 80202a8:	7807      	ldrb	r7, [r0, #0]
 80202aa:	fb09 8707 	mla	r7, r9, r7, r8
 80202ae:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80202b2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80202b6:	ea47 070a 	orr.w	r7, r7, sl
 80202ba:	4373      	muls	r3, r6
 80202bc:	f892 a001 	ldrb.w	sl, [r2, #1]
 80202c0:	fb0e 330c 	mla	r3, lr, ip, r3
 80202c4:	fb01 310a 	mla	r1, r1, sl, r3
 80202c8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80202cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202ce:	fb09 1a0a 	mla	sl, r9, sl, r1
 80202d2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80202d6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80202da:	ea47 070a 	orr.w	r7, r7, sl
 80202de:	801f      	strh	r7, [r3, #0]
 80202e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202e2:	3302      	adds	r3, #2
 80202e4:	9309      	str	r3, [sp, #36]	; 0x24
 80202e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80202e8:	449b      	add	fp, r3
 80202ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202ec:	441d      	add	r5, r3
 80202ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202f0:	3b01      	subs	r3, #1
 80202f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80202f4:	e76f      	b.n	80201d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80202f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80202f8:	449b      	add	fp, r3
 80202fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202fc:	441d      	add	r5, r3
 80202fe:	9b06      	ldr	r3, [sp, #24]
 8020300:	3b01      	subs	r3, #1
 8020302:	9306      	str	r3, [sp, #24]
 8020304:	9b07      	ldr	r3, [sp, #28]
 8020306:	3302      	adds	r3, #2
 8020308:	9307      	str	r3, [sp, #28]
 802030a:	e744      	b.n	8020196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802030c:	d023      	beq.n	8020356 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802030e:	9b06      	ldr	r3, [sp, #24]
 8020310:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020312:	3b01      	subs	r3, #1
 8020314:	fb00 b003 	mla	r0, r0, r3, fp
 8020318:	1400      	asrs	r0, r0, #16
 802031a:	f53f af58 	bmi.w	80201ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802031e:	3901      	subs	r1, #1
 8020320:	4288      	cmp	r0, r1
 8020322:	f6bf af54 	bge.w	80201ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020326:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020328:	fb01 5303 	mla	r3, r1, r3, r5
 802032c:	141b      	asrs	r3, r3, #16
 802032e:	f53f af4e 	bmi.w	80201ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020332:	3a01      	subs	r2, #1
 8020334:	4293      	cmp	r3, r2
 8020336:	f6bf af4a 	bge.w	80201ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802033a:	9b06      	ldr	r3, [sp, #24]
 802033c:	9309      	str	r3, [sp, #36]	; 0x24
 802033e:	9b07      	ldr	r3, [sp, #28]
 8020340:	930b      	str	r3, [sp, #44]	; 0x2c
 8020342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020344:	2b00      	cmp	r3, #0
 8020346:	dc70      	bgt.n	802042a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8020348:	9b06      	ldr	r3, [sp, #24]
 802034a:	9a07      	ldr	r2, [sp, #28]
 802034c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020350:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020354:	9307      	str	r3, [sp, #28]
 8020356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020358:	2b00      	cmp	r3, #0
 802035a:	f340 80eb 	ble.w	8020534 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802035e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020366:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802036a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802036c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020370:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020374:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020378:	eef0 6a62 	vmov.f32	s13, s5
 802037c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020380:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020384:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020388:	ee16 ba90 	vmov	fp, s13
 802038c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020390:	eef0 6a43 	vmov.f32	s13, s6
 8020394:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020398:	ee12 2a90 	vmov	r2, s5
 802039c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80203a4:	ee13 2a10 	vmov	r2, s6
 80203a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80203aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80203ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80203b0:	931c      	str	r3, [sp, #112]	; 0x70
 80203b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80203b6:	3b01      	subs	r3, #1
 80203b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203bc:	930a      	str	r3, [sp, #40]	; 0x28
 80203be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80203c0:	bf08      	it	eq
 80203c2:	4613      	moveq	r3, r2
 80203c4:	ee16 5a90 	vmov	r5, s13
 80203c8:	9306      	str	r3, [sp, #24]
 80203ca:	eeb0 3a67 	vmov.f32	s6, s15
 80203ce:	eef0 2a47 	vmov.f32	s5, s14
 80203d2:	e6d2      	b.n	802017a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80203d4:	b149      	cbz	r1, 80203ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80203d6:	5cba      	ldrb	r2, [r7, r2]
 80203d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80203dc:	4422      	add	r2, r4
 80203de:	4660      	mov	r0, ip
 80203e0:	4666      	mov	r6, ip
 80203e2:	e734      	b.n	802024e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80203e4:	4660      	mov	r0, ip
 80203e6:	4662      	mov	r2, ip
 80203e8:	e731      	b.n	802024e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80203ea:	4660      	mov	r0, ip
 80203ec:	4662      	mov	r2, ip
 80203ee:	e7f7      	b.n	80203e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80203f0:	f110 0c01 	adds.w	ip, r0, #1
 80203f4:	f53f af74 	bmi.w	80202e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80203f8:	4562      	cmp	r2, ip
 80203fa:	f6ff af71 	blt.w	80202e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80203fe:	f116 0c01 	adds.w	ip, r6, #1
 8020402:	f53f af6d 	bmi.w	80202e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020406:	4567      	cmp	r7, ip
 8020408:	f6ff af6a 	blt.w	80202e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802040c:	b23f      	sxth	r7, r7
 802040e:	b212      	sxth	r2, r2
 8020410:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020414:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8020418:	9200      	str	r2, [sp, #0]
 802041a:	9701      	str	r7, [sp, #4]
 802041c:	4623      	mov	r3, r4
 802041e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020422:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020424:	f7ff fde6 	bl	801fff4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8020428:	e75a      	b.n	80202e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802042a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802042c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020430:	ea4f 462b 	mov.w	r6, fp, asr #16
 8020434:	1428      	asrs	r0, r5, #16
 8020436:	fb02 6000 	mla	r0, r2, r0, r6
 802043a:	9e08      	ldr	r6, [sp, #32]
 802043c:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020440:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020444:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020448:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802044c:	1837      	adds	r7, r6, r0
 802044e:	eb04 0c08 	add.w	ip, r4, r8
 8020452:	2b00      	cmp	r3, #0
 8020454:	d060      	beq.n	8020518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8020456:	787e      	ldrb	r6, [r7, #1]
 8020458:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802045c:	4426      	add	r6, r4
 802045e:	2900      	cmp	r1, #0
 8020460:	d062      	beq.n	8020528 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8020462:	18b8      	adds	r0, r7, r2
 8020464:	5cba      	ldrb	r2, [r7, r2]
 8020466:	7840      	ldrb	r0, [r0, #1]
 8020468:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802046c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020470:	4422      	add	r2, r4
 8020472:	4420      	add	r0, r4
 8020474:	b29b      	uxth	r3, r3
 8020476:	b289      	uxth	r1, r1
 8020478:	fb03 f901 	mul.w	r9, r3, r1
 802047c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020480:	011b      	lsls	r3, r3, #4
 8020482:	b289      	uxth	r1, r1
 8020484:	78b7      	ldrb	r7, [r6, #2]
 8020486:	f89c a002 	ldrb.w	sl, [ip, #2]
 802048a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802048e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020492:	eba3 0309 	sub.w	r3, r3, r9
 8020496:	b29b      	uxth	r3, r3
 8020498:	ebae 0e01 	sub.w	lr, lr, r1
 802049c:	fa1f fe8e 	uxth.w	lr, lr
 80204a0:	435f      	muls	r7, r3
 80204a2:	fb0e 770a 	mla	r7, lr, sl, r7
 80204a6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80204aa:	fb01 770a 	mla	r7, r1, sl, r7
 80204ae:	f890 a002 	ldrb.w	sl, [r0, #2]
 80204b2:	fb09 7a0a 	mla	sl, r9, sl, r7
 80204b6:	f814 7008 	ldrb.w	r7, [r4, r8]
 80204ba:	f896 8000 	ldrb.w	r8, [r6]
 80204be:	7876      	ldrb	r6, [r6, #1]
 80204c0:	fb03 f808 	mul.w	r8, r3, r8
 80204c4:	fb0e 8807 	mla	r8, lr, r7, r8
 80204c8:	7817      	ldrb	r7, [r2, #0]
 80204ca:	fb01 8807 	mla	r8, r1, r7, r8
 80204ce:	7807      	ldrb	r7, [r0, #0]
 80204d0:	fb09 8707 	mla	r7, r9, r7, r8
 80204d4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80204d8:	4373      	muls	r3, r6
 80204da:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80204de:	7856      	ldrb	r6, [r2, #1]
 80204e0:	ea47 070a 	orr.w	r7, r7, sl
 80204e4:	fb0e 330c 	mla	r3, lr, ip, r3
 80204e8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80204ec:	fb01 3306 	mla	r3, r1, r6, r3
 80204f0:	fb09 3a0a 	mla	sl, r9, sl, r3
 80204f4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80204f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80204fe:	ea47 070a 	orr.w	r7, r7, sl
 8020502:	f823 7b02 	strh.w	r7, [r3], #2
 8020506:	930b      	str	r3, [sp, #44]	; 0x2c
 8020508:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802050a:	449b      	add	fp, r3
 802050c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802050e:	441d      	add	r5, r3
 8020510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020512:	3b01      	subs	r3, #1
 8020514:	9309      	str	r3, [sp, #36]	; 0x24
 8020516:	e714      	b.n	8020342 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020518:	b149      	cbz	r1, 802052e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802051a:	5cba      	ldrb	r2, [r7, r2]
 802051c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020520:	4422      	add	r2, r4
 8020522:	4660      	mov	r0, ip
 8020524:	4666      	mov	r6, ip
 8020526:	e7a5      	b.n	8020474 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020528:	4660      	mov	r0, ip
 802052a:	4662      	mov	r2, ip
 802052c:	e7a2      	b.n	8020474 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802052e:	4660      	mov	r0, ip
 8020530:	4662      	mov	r2, ip
 8020532:	e7f7      	b.n	8020524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8020534:	b00f      	add	sp, #60	; 0x3c
 8020536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802053a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802053a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802053e:	b085      	sub	sp, #20
 8020540:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8020544:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020548:	9102      	str	r1, [sp, #8]
 802054a:	2c00      	cmp	r4, #0
 802054c:	fb04 710c 	mla	r1, r4, ip, r7
 8020550:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020554:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8020558:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802055c:	eb02 0e01 	add.w	lr, r2, r1
 8020560:	f2c0 8122 	blt.w	80207a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8020564:	45a0      	cmp	r8, r4
 8020566:	f340 811f 	ble.w	80207a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802056a:	2f00      	cmp	r7, #0
 802056c:	f2c0 811a 	blt.w	80207a4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8020570:	45bc      	cmp	ip, r7
 8020572:	f340 8117 	ble.w	80207a4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8020576:	5c52      	ldrb	r2, [r2, r1]
 8020578:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802057c:	1c7a      	adds	r2, r7, #1
 802057e:	f100 8116 	bmi.w	80207ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8020582:	4594      	cmp	ip, r2
 8020584:	f340 8113 	ble.w	80207ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8020588:	2e00      	cmp	r6, #0
 802058a:	f000 8112 	beq.w	80207b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 802058e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020592:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020596:	3401      	adds	r4, #1
 8020598:	f100 810f 	bmi.w	80207ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802059c:	45a0      	cmp	r8, r4
 802059e:	f340 810c 	ble.w	80207ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80205a2:	2800      	cmp	r0, #0
 80205a4:	f000 810c 	beq.w	80207c0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80205a8:	2f00      	cmp	r7, #0
 80205aa:	f2c0 8104 	blt.w	80207b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80205ae:	45bc      	cmp	ip, r7
 80205b0:	f340 8101 	ble.w	80207b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80205b4:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80205b8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80205bc:	3701      	adds	r7, #1
 80205be:	f100 8102 	bmi.w	80207c6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80205c2:	45bc      	cmp	ip, r7
 80205c4:	f340 80ff 	ble.w	80207c6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80205c8:	2e00      	cmp	r6, #0
 80205ca:	f000 80fe 	beq.w	80207ca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80205ce:	44f4      	add	ip, lr
 80205d0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80205d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80205d8:	b2b6      	uxth	r6, r6
 80205da:	b280      	uxth	r0, r0
 80205dc:	fb00 fe06 	mul.w	lr, r0, r6
 80205e0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80205e4:	0136      	lsls	r6, r6, #4
 80205e6:	eba6 070e 	sub.w	r7, r6, lr
 80205ea:	b280      	uxth	r0, r0
 80205ec:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80205f0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80205f4:	b2bf      	uxth	r7, r7
 80205f6:	1a1b      	subs	r3, r3, r0
 80205f8:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80205fc:	b29b      	uxth	r3, r3
 80205fe:	fb0a f607 	mul.w	r6, sl, r7
 8020602:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020606:	fb0b 6603 	mla	r6, fp, r3, r6
 802060a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802060e:	fb00 6609 	mla	r6, r0, r9, r6
 8020612:	fb0e 6608 	mla	r6, lr, r8, r6
 8020616:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802061a:	9600      	str	r6, [sp, #0]
 802061c:	2e00      	cmp	r6, #0
 802061e:	f000 80be 	beq.w	802079e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8020622:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020626:	fb0b fc0c 	mul.w	ip, fp, ip
 802062a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802062e:	fb0b f505 	mul.w	r5, fp, r5
 8020632:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020636:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802063a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802063e:	44dc      	add	ip, fp
 8020640:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020644:	9501      	str	r5, [sp, #4]
 8020646:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802064a:	9503      	str	r5, [sp, #12]
 802064c:	9d01      	ldr	r5, [sp, #4]
 802064e:	9e02      	ldr	r6, [sp, #8]
 8020650:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020654:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020658:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802065c:	fb0a fc0c 	mul.w	ip, sl, ip
 8020660:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020664:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020668:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802066c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020670:	4465      	add	r5, ip
 8020672:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020676:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802067a:	fb09 fc0c 	mul.w	ip, r9, ip
 802067e:	fb09 f904 	mul.w	r9, r9, r4
 8020682:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020686:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802068a:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802068e:	fb08 f404 	mul.w	r4, r8, r4
 8020692:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020696:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802069a:	fb08 f802 	mul.w	r8, r8, r2
 802069e:	fb0a fa01 	mul.w	sl, sl, r1
 80206a2:	0a22      	lsrs	r2, r4, #8
 80206a4:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80206a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80206ac:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80206b0:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80206b4:	4414      	add	r4, r2
 80206b6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80206ba:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80206be:	0a2d      	lsrs	r5, r5, #8
 80206c0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80206c4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80206c8:	9a03      	ldr	r2, [sp, #12]
 80206ca:	8836      	ldrh	r6, [r6, #0]
 80206cc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80206d0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80206d4:	437d      	muls	r5, r7
 80206d6:	4461      	add	r1, ip
 80206d8:	0a24      	lsrs	r4, r4, #8
 80206da:	fb02 5503 	mla	r5, r2, r3, r5
 80206de:	0a09      	lsrs	r1, r1, #8
 80206e0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80206e4:	fb04 540e 	mla	r4, r4, lr, r5
 80206e8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80206ec:	fb01 4100 	mla	r1, r1, r0, r4
 80206f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206f4:	0a09      	lsrs	r1, r1, #8
 80206f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80206fa:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80206fe:	fb07 f70a 	mul.w	r7, r7, sl
 8020702:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020706:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802070a:	fb03 7101 	mla	r1, r3, r1, r7
 802070e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020712:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020716:	fb0e 1e08 	mla	lr, lr, r8, r1
 802071a:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802071e:	fb00 e101 	mla	r1, r0, r1, lr
 8020722:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8020726:	9a00      	ldr	r2, [sp, #0]
 8020728:	b287      	uxth	r7, r0
 802072a:	437a      	muls	r2, r7
 802072c:	0a09      	lsrs	r1, r1, #8
 802072e:	1c53      	adds	r3, r2, #1
 8020730:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020734:	4321      	orrs	r1, r4
 8020736:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802073a:	1235      	asrs	r5, r6, #8
 802073c:	0c0a      	lsrs	r2, r1, #16
 802073e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020742:	b2db      	uxtb	r3, r3
 8020744:	fb12 f207 	smulbb	r2, r2, r7
 8020748:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802074c:	fb05 2503 	mla	r5, r5, r3, r2
 8020750:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8020754:	10f2      	asrs	r2, r6, #3
 8020756:	b2c8      	uxtb	r0, r1
 8020758:	00f6      	lsls	r6, r6, #3
 802075a:	fb14 f407 	smulbb	r4, r4, r7
 802075e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020762:	b2f6      	uxtb	r6, r6
 8020764:	fb10 f007 	smulbb	r0, r0, r7
 8020768:	fb02 4203 	mla	r2, r2, r3, r4
 802076c:	b2ad      	uxth	r5, r5
 802076e:	fb06 0303 	mla	r3, r6, r3, r0
 8020772:	b299      	uxth	r1, r3
 8020774:	b294      	uxth	r4, r2
 8020776:	1c6b      	adds	r3, r5, #1
 8020778:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802077c:	1c62      	adds	r2, r4, #1
 802077e:	1c4b      	adds	r3, r1, #1
 8020780:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020784:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020788:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802078c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020790:	0952      	lsrs	r2, r2, #5
 8020792:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020796:	432b      	orrs	r3, r5
 8020798:	4313      	orrs	r3, r2
 802079a:	9a02      	ldr	r2, [sp, #8]
 802079c:	8013      	strh	r3, [r2, #0]
 802079e:	b005      	add	sp, #20
 80207a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207a4:	2500      	movs	r5, #0
 80207a6:	e6e9      	b.n	802057c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80207a8:	2100      	movs	r1, #0
 80207aa:	460d      	mov	r5, r1
 80207ac:	e6f3      	b.n	8020596 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80207ae:	2100      	movs	r1, #0
 80207b0:	e6f1      	b.n	8020596 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80207b2:	4631      	mov	r1, r6
 80207b4:	e6ef      	b.n	8020596 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80207b6:	2400      	movs	r4, #0
 80207b8:	e700      	b.n	80205bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80207ba:	2200      	movs	r2, #0
 80207bc:	4614      	mov	r4, r2
 80207be:	e70b      	b.n	80205d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80207c0:	4602      	mov	r2, r0
 80207c2:	4604      	mov	r4, r0
 80207c4:	e708      	b.n	80205d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80207c6:	2200      	movs	r2, #0
 80207c8:	e706      	b.n	80205d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80207ca:	4632      	mov	r2, r6
 80207cc:	e704      	b.n	80205d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080207ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207d2:	b09f      	sub	sp, #124	; 0x7c
 80207d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80207d6:	9309      	str	r3, [sp, #36]	; 0x24
 80207d8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80207da:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80207de:	931c      	str	r3, [sp, #112]	; 0x70
 80207e0:	9119      	str	r1, [sp, #100]	; 0x64
 80207e2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80207e6:	901d      	str	r0, [sp, #116]	; 0x74
 80207e8:	6850      	ldr	r0, [r2, #4]
 80207ea:	6812      	ldr	r2, [r2, #0]
 80207ec:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80207ee:	fb00 1303 	mla	r3, r0, r3, r1
 80207f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80207f6:	930c      	str	r3, [sp, #48]	; 0x30
 80207f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80207fa:	681b      	ldr	r3, [r3, #0]
 80207fc:	9312      	str	r3, [sp, #72]	; 0x48
 80207fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020800:	685e      	ldr	r6, [r3, #4]
 8020802:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020806:	930d      	str	r3, [sp, #52]	; 0x34
 8020808:	3604      	adds	r6, #4
 802080a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802080c:	2b00      	cmp	r3, #0
 802080e:	dc03      	bgt.n	8020818 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020810:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020812:	2b00      	cmp	r3, #0
 8020814:	f340 8388 	ble.w	8020f28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8020818:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802081a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802081e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020822:	1e48      	subs	r0, r1, #1
 8020824:	1e57      	subs	r7, r2, #1
 8020826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020828:	2b00      	cmp	r3, #0
 802082a:	f340 8195 	ble.w	8020b58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802082e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020830:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020834:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020838:	d406      	bmi.n	8020848 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802083a:	4584      	cmp	ip, r0
 802083c:	da04      	bge.n	8020848 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802083e:	2b00      	cmp	r3, #0
 8020840:	db02      	blt.n	8020848 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020842:	42bb      	cmp	r3, r7
 8020844:	f2c0 8189 	blt.w	8020b5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8020848:	f11c 0c01 	adds.w	ip, ip, #1
 802084c:	f100 8177 	bmi.w	8020b3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020850:	4561      	cmp	r1, ip
 8020852:	f2c0 8174 	blt.w	8020b3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020856:	3301      	adds	r3, #1
 8020858:	f100 8171 	bmi.w	8020b3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802085c:	429a      	cmp	r2, r3
 802085e:	f2c0 816e 	blt.w	8020b3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020864:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020866:	931a      	str	r3, [sp, #104]	; 0x68
 8020868:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802086a:	2b00      	cmp	r3, #0
 802086c:	f340 8193 	ble.w	8020b96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8020870:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020872:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020876:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020878:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802087c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802087e:	141b      	asrs	r3, r3, #16
 8020880:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020884:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020888:	f100 81d6 	bmi.w	8020c38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802088c:	f100 38ff 	add.w	r8, r0, #4294967295
 8020890:	4543      	cmp	r3, r8
 8020892:	f280 81d1 	bge.w	8020c38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020896:	f1bc 0f00 	cmp.w	ip, #0
 802089a:	f2c0 81cd 	blt.w	8020c38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802089e:	f10e 38ff 	add.w	r8, lr, #4294967295
 80208a2:	45c4      	cmp	ip, r8
 80208a4:	f280 81c8 	bge.w	8020c38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 80208a8:	b200      	sxth	r0, r0
 80208aa:	fb0c 3300 	mla	r3, ip, r0, r3
 80208ae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80208b0:	eb04 0803 	add.w	r8, r4, r3
 80208b4:	5ce3      	ldrb	r3, [r4, r3]
 80208b6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80208ba:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80208be:	2a00      	cmp	r2, #0
 80208c0:	f000 81af 	beq.w	8020c22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80208c4:	f898 c001 	ldrb.w	ip, [r8, #1]
 80208c8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80208cc:	940e      	str	r4, [sp, #56]	; 0x38
 80208ce:	0e24      	lsrs	r4, r4, #24
 80208d0:	9415      	str	r4, [sp, #84]	; 0x54
 80208d2:	b179      	cbz	r1, 80208f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80208d4:	eb08 0c00 	add.w	ip, r8, r0
 80208d8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80208dc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80208e0:	900a      	str	r0, [sp, #40]	; 0x28
 80208e2:	0e00      	lsrs	r0, r0, #24
 80208e4:	9013      	str	r0, [sp, #76]	; 0x4c
 80208e6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80208ea:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80208ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80208f0:	0e00      	lsrs	r0, r0, #24
 80208f2:	9016      	str	r0, [sp, #88]	; 0x58
 80208f4:	b292      	uxth	r2, r2
 80208f6:	b289      	uxth	r1, r1
 80208f8:	fb02 f901 	mul.w	r9, r2, r1
 80208fc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020900:	0112      	lsls	r2, r2, #4
 8020902:	eba2 0809 	sub.w	r8, r2, r9
 8020906:	b289      	uxth	r1, r1
 8020908:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802090c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802090e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020910:	fa1f f888 	uxth.w	r8, r8
 8020914:	1a52      	subs	r2, r2, r1
 8020916:	b292      	uxth	r2, r2
 8020918:	fb08 f000 	mul.w	r0, r8, r0
 802091c:	fb02 000e 	mla	r0, r2, lr, r0
 8020920:	fb01 0004 	mla	r0, r1, r4, r0
 8020924:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020926:	fb09 0004 	mla	r0, r9, r4, r0
 802092a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802092e:	2800      	cmp	r0, #0
 8020930:	f000 80fa 	beq.w	8020b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020934:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020938:	d01b      	beq.n	8020972 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802093a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802093e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020942:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020946:	fb0e fe03 	mul.w	lr, lr, r3
 802094a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802094e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020952:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020956:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802095a:	4453      	add	r3, sl
 802095c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020960:	0a1b      	lsrs	r3, r3, #8
 8020962:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020966:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802096a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802096e:	ea43 030c 	orr.w	r3, r3, ip
 8020972:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020974:	2cff      	cmp	r4, #255	; 0xff
 8020976:	d021      	beq.n	80209bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020978:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802097a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802097e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020980:	fb04 fb0b 	mul.w	fp, r4, fp
 8020984:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020986:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802098a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802098c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020990:	fb04 fa0a 	mul.w	sl, r4, sl
 8020994:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020998:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802099c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80209a0:	44de      	add	lr, fp
 80209a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209b6:	ea4e 040a 	orr.w	r4, lr, sl
 80209ba:	940e      	str	r4, [sp, #56]	; 0x38
 80209bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209be:	2cff      	cmp	r4, #255	; 0xff
 80209c0:	d021      	beq.n	8020a06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80209c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80209c4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80209c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209ca:	fb04 fb0b 	mul.w	fp, r4, fp
 80209ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80209d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209da:	fb04 fa0a 	mul.w	sl, r4, sl
 80209de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209e2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80209e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80209ea:	44de      	add	lr, fp
 80209ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a00:	ea4e 040a 	orr.w	r4, lr, sl
 8020a04:	940a      	str	r4, [sp, #40]	; 0x28
 8020a06:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020a08:	2cff      	cmp	r4, #255	; 0xff
 8020a0a:	d021      	beq.n	8020a50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020a0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020a0e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020a12:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020a14:	fb04 fb0b 	mul.w	fp, r4, fp
 8020a18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020a1a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a1e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020a20:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a24:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a2c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020a30:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020a34:	44de      	add	lr, fp
 8020a36:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a4a:	ea4e 040a 	orr.w	r4, lr, sl
 8020a4e:	940f      	str	r4, [sp, #60]	; 0x3c
 8020a50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020a52:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020a56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020a58:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020a5c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020a60:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020a64:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020a6a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020a6e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020a74:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020a78:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020a7c:	fb08 f80e 	mul.w	r8, r8, lr
 8020a80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a84:	fb02 8303 	mla	r3, r2, r3, r8
 8020a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020a8a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020a8c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020a92:	fb01 330a 	mla	r3, r1, sl, r3
 8020a96:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8020a9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a9c:	fb09 3901 	mla	r9, r9, r1, r3
 8020aa0:	4342      	muls	r2, r0
 8020aa2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020aa6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020aaa:	883b      	ldrh	r3, [r7, #0]
 8020aac:	1c50      	adds	r0, r2, #1
 8020aae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ab2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020ab6:	ea4c 0c09 	orr.w	ip, ip, r9
 8020aba:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020abe:	1219      	asrs	r1, r3, #8
 8020ac0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020ac4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020ac8:	b2c0      	uxtb	r0, r0
 8020aca:	fb12 f204 	smulbb	r2, r2, r4
 8020ace:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020ad2:	fb01 2100 	mla	r1, r1, r0, r2
 8020ad6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8020ada:	10da      	asrs	r2, r3, #3
 8020adc:	fa5f fc8c 	uxtb.w	ip, ip
 8020ae0:	00db      	lsls	r3, r3, #3
 8020ae2:	fb1c fc04 	smulbb	ip, ip, r4
 8020ae6:	b2db      	uxtb	r3, r3
 8020ae8:	b289      	uxth	r1, r1
 8020aea:	fb03 c300 	mla	r3, r3, r0, ip
 8020aee:	fa1f fc83 	uxth.w	ip, r3
 8020af2:	1c4b      	adds	r3, r1, #1
 8020af4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020af8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020afc:	fb1e fe04 	smulbb	lr, lr, r4
 8020b00:	f10c 0301 	add.w	r3, ip, #1
 8020b04:	fb02 e200 	mla	r2, r2, r0, lr
 8020b08:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020b0c:	b292      	uxth	r2, r2
 8020b0e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020b12:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020b16:	430b      	orrs	r3, r1
 8020b18:	1c51      	adds	r1, r2, #1
 8020b1a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020b1e:	0952      	lsrs	r2, r2, #5
 8020b20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020b24:	4313      	orrs	r3, r2
 8020b26:	803b      	strh	r3, [r7, #0]
 8020b28:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020b2a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020b2c:	441a      	add	r2, r3
 8020b2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020b30:	9229      	str	r2, [sp, #164]	; 0xa4
 8020b32:	441d      	add	r5, r3
 8020b34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020b36:	3b01      	subs	r3, #1
 8020b38:	3702      	adds	r7, #2
 8020b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8020b3c:	e694      	b.n	8020868 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020b3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020b40:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020b42:	441c      	add	r4, r3
 8020b44:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020b46:	9429      	str	r4, [sp, #164]	; 0xa4
 8020b48:	441d      	add	r5, r3
 8020b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b4c:	3b01      	subs	r3, #1
 8020b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8020b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b52:	3302      	adds	r3, #2
 8020b54:	930c      	str	r3, [sp, #48]	; 0x30
 8020b56:	e666      	b.n	8020826 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020b58:	d024      	beq.n	8020ba4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8020b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b5c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020b5e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020b60:	3b01      	subs	r3, #1
 8020b62:	fb00 4003 	mla	r0, r0, r3, r4
 8020b66:	1400      	asrs	r0, r0, #16
 8020b68:	f53f ae7b 	bmi.w	8020862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020b6c:	3901      	subs	r1, #1
 8020b6e:	4288      	cmp	r0, r1
 8020b70:	f6bf ae77 	bge.w	8020862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020b74:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020b76:	fb01 5303 	mla	r3, r1, r3, r5
 8020b7a:	141b      	asrs	r3, r3, #16
 8020b7c:	f53f ae71 	bmi.w	8020862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020b80:	3a01      	subs	r2, #1
 8020b82:	4293      	cmp	r3, r2
 8020b84:	f6bf ae6d 	bge.w	8020862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020b88:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020b8c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020b90:	f1bb 0f00 	cmp.w	fp, #0
 8020b94:	dc70      	bgt.n	8020c78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8020b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b98:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020b9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b9e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8020ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020ba6:	2b00      	cmp	r3, #0
 8020ba8:	f340 81be 	ble.w	8020f28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8020bac:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020bb4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020bb8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020bba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020bbe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020bc2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020bc6:	eef0 6a62 	vmov.f32	s13, s5
 8020bca:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020bce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bd2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020bd6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020bda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020bde:	eef0 6a43 	vmov.f32	s13, s6
 8020be2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020be6:	ee12 2a90 	vmov	r2, s5
 8020bea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020bee:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bf2:	ee13 2a10 	vmov	r2, s6
 8020bf6:	932b      	str	r3, [sp, #172]	; 0xac
 8020bf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020bfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bfe:	932c      	str	r3, [sp, #176]	; 0xb0
 8020c00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020c02:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020c04:	3b01      	subs	r3, #1
 8020c06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c0a:	9319      	str	r3, [sp, #100]	; 0x64
 8020c0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c0e:	bf08      	it	eq
 8020c10:	4613      	moveq	r3, r2
 8020c12:	ee16 5a90 	vmov	r5, s13
 8020c16:	9309      	str	r3, [sp, #36]	; 0x24
 8020c18:	eeb0 3a67 	vmov.f32	s6, s15
 8020c1c:	eef0 2a47 	vmov.f32	s5, s14
 8020c20:	e5f3      	b.n	802080a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020c22:	2900      	cmp	r1, #0
 8020c24:	f43f ae66 	beq.w	80208f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020c28:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020c2c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020c30:	900a      	str	r0, [sp, #40]	; 0x28
 8020c32:	0e00      	lsrs	r0, r0, #24
 8020c34:	9013      	str	r0, [sp, #76]	; 0x4c
 8020c36:	e65d      	b.n	80208f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020c38:	f113 0801 	adds.w	r8, r3, #1
 8020c3c:	f53f af74 	bmi.w	8020b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c40:	4540      	cmp	r0, r8
 8020c42:	f6ff af71 	blt.w	8020b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c46:	f11c 0801 	adds.w	r8, ip, #1
 8020c4a:	f53f af6d 	bmi.w	8020b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c4e:	45c6      	cmp	lr, r8
 8020c50:	f6ff af6a 	blt.w	8020b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020c56:	9302      	str	r3, [sp, #8]
 8020c58:	b200      	sxth	r0, r0
 8020c5a:	fa0f f38e 	sxth.w	r3, lr
 8020c5e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020c62:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020c66:	9301      	str	r3, [sp, #4]
 8020c68:	9000      	str	r0, [sp, #0]
 8020c6a:	4633      	mov	r3, r6
 8020c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020c6e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020c70:	4639      	mov	r1, r7
 8020c72:	f7ff fc62 	bl	802053a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8020c76:	e757      	b.n	8020b28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020c7a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020c7c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020c80:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020c82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c86:	1427      	asrs	r7, r4, #16
 8020c88:	142b      	asrs	r3, r5, #16
 8020c8a:	fb01 7303 	mla	r3, r1, r3, r7
 8020c8e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020c90:	18e7      	adds	r7, r4, r3
 8020c92:	5ce3      	ldrb	r3, [r4, r3]
 8020c94:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020c98:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020c9c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020ca0:	2a00      	cmp	r2, #0
 8020ca2:	f000 8137 	beq.w	8020f14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8020ca6:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020caa:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020cae:	9410      	str	r4, [sp, #64]	; 0x40
 8020cb0:	0e24      	lsrs	r4, r4, #24
 8020cb2:	9417      	str	r4, [sp, #92]	; 0x5c
 8020cb4:	b170      	cbz	r0, 8020cd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020cb6:	eb07 0e01 	add.w	lr, r7, r1
 8020cba:	5c79      	ldrb	r1, [r7, r1]
 8020cbc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020cc0:	910b      	str	r1, [sp, #44]	; 0x2c
 8020cc2:	0e09      	lsrs	r1, r1, #24
 8020cc4:	9114      	str	r1, [sp, #80]	; 0x50
 8020cc6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020cca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020cce:	9111      	str	r1, [sp, #68]	; 0x44
 8020cd0:	0e09      	lsrs	r1, r1, #24
 8020cd2:	9118      	str	r1, [sp, #96]	; 0x60
 8020cd4:	b292      	uxth	r2, r2
 8020cd6:	b280      	uxth	r0, r0
 8020cd8:	fb02 f800 	mul.w	r8, r2, r0
 8020cdc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020ce0:	0112      	lsls	r2, r2, #4
 8020ce2:	eba2 0e08 	sub.w	lr, r2, r8
 8020ce6:	b280      	uxth	r0, r0
 8020ce8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020cec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020cee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020cf0:	fa1f fe8e 	uxth.w	lr, lr
 8020cf4:	1a12      	subs	r2, r2, r0
 8020cf6:	b292      	uxth	r2, r2
 8020cf8:	fb0e f101 	mul.w	r1, lr, r1
 8020cfc:	fb02 110c 	mla	r1, r2, ip, r1
 8020d00:	fb00 1104 	mla	r1, r0, r4, r1
 8020d04:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020d06:	fb08 1104 	mla	r1, r8, r4, r1
 8020d0a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020d0e:	2900      	cmp	r1, #0
 8020d10:	f000 80f5 	beq.w	8020efe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8020d14:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020d18:	d019      	beq.n	8020d4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8020d1a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020d1e:	fb0c fa0a 	mul.w	sl, ip, sl
 8020d22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d26:	fb0c fc03 	mul.w	ip, ip, r3
 8020d2a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020d2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d32:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020d36:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020d3a:	4453      	add	r3, sl
 8020d3c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020d40:	0a1b      	lsrs	r3, r3, #8
 8020d42:	0a3f      	lsrs	r7, r7, #8
 8020d44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d48:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020d4c:	433b      	orrs	r3, r7
 8020d4e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020d50:	2cff      	cmp	r4, #255	; 0xff
 8020d52:	d020      	beq.n	8020d96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8020d54:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d56:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d5a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020d5c:	4367      	muls	r7, r4
 8020d5e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020d64:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020d66:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d6a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d6e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d76:	44bc      	add	ip, r7
 8020d78:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020d7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d90:	ea4c 040a 	orr.w	r4, ip, sl
 8020d94:	9410      	str	r4, [sp, #64]	; 0x40
 8020d96:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d98:	2cff      	cmp	r4, #255	; 0xff
 8020d9a:	d020      	beq.n	8020dde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8020d9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d9e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020da2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020da4:	4367      	muls	r7, r4
 8020da6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020da8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020dac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020dae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020db2:	fb04 fa0a 	mul.w	sl, r4, sl
 8020db6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020dba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dbe:	44bc      	add	ip, r7
 8020dc0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020dc4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020dc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020dd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dd4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020dd8:	ea4c 040a 	orr.w	r4, ip, sl
 8020ddc:	940b      	str	r4, [sp, #44]	; 0x2c
 8020dde:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020de0:	2cff      	cmp	r4, #255	; 0xff
 8020de2:	d020      	beq.n	8020e26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8020de4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020de6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020dea:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020dec:	4367      	muls	r7, r4
 8020dee:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020df0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020df4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020df6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020dfa:	fb04 fa0a 	mul.w	sl, r4, sl
 8020dfe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020e02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e06:	44bc      	add	ip, r7
 8020e08:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020e0c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e14:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e20:	ea4c 040a 	orr.w	r4, ip, sl
 8020e24:	9411      	str	r4, [sp, #68]	; 0x44
 8020e26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020e28:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020e2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020e2e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020e32:	fb0e f707 	mul.w	r7, lr, r7
 8020e36:	fb02 770c 	mla	r7, r2, ip, r7
 8020e3a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020e3e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020e40:	fb00 770c 	mla	r7, r0, ip, r7
 8020e44:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020e48:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020e4a:	fb08 770c 	mla	r7, r8, ip, r7
 8020e4e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020e52:	fb0e fe0c 	mul.w	lr, lr, ip
 8020e56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e5a:	fb02 e303 	mla	r3, r2, r3, lr
 8020e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020e60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020e62:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020e66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e68:	fb00 330a 	mla	r3, r0, sl, r3
 8020e6c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020e70:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e76:	f8b9 0000 	ldrh.w	r0, [r9]
 8020e7a:	434b      	muls	r3, r1
 8020e7c:	0a3f      	lsrs	r7, r7, #8
 8020e7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e82:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020e86:	1c59      	adds	r1, r3, #1
 8020e88:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020e8c:	ea47 070c 	orr.w	r7, r7, ip
 8020e90:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020e94:	1202      	asrs	r2, r0, #8
 8020e96:	0c3b      	lsrs	r3, r7, #16
 8020e98:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020e9c:	b2c9      	uxtb	r1, r1
 8020e9e:	fb13 f304 	smulbb	r3, r3, r4
 8020ea2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020ea6:	fb02 3201 	mla	r2, r2, r1, r3
 8020eaa:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020eae:	10c3      	asrs	r3, r0, #3
 8020eb0:	b2ff      	uxtb	r7, r7
 8020eb2:	00c0      	lsls	r0, r0, #3
 8020eb4:	b292      	uxth	r2, r2
 8020eb6:	fb1c fc04 	smulbb	ip, ip, r4
 8020eba:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020ebe:	b2c0      	uxtb	r0, r0
 8020ec0:	fb17 f704 	smulbb	r7, r7, r4
 8020ec4:	fb03 c301 	mla	r3, r3, r1, ip
 8020ec8:	fb00 7001 	mla	r0, r0, r1, r7
 8020ecc:	f102 0c01 	add.w	ip, r2, #1
 8020ed0:	b280      	uxth	r0, r0
 8020ed2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020ed6:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8020eda:	1c42      	adds	r2, r0, #1
 8020edc:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020ee0:	b29b      	uxth	r3, r3
 8020ee2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020ee6:	ea42 020c 	orr.w	r2, r2, ip
 8020eea:	f103 0c01 	add.w	ip, r3, #1
 8020eee:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020ef2:	095b      	lsrs	r3, r3, #5
 8020ef4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020ef8:	431a      	orrs	r2, r3
 8020efa:	f8a9 2000 	strh.w	r2, [r9]
 8020efe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020f00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020f02:	441a      	add	r2, r3
 8020f04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020f06:	9229      	str	r2, [sp, #164]	; 0xa4
 8020f08:	f109 0902 	add.w	r9, r9, #2
 8020f0c:	441d      	add	r5, r3
 8020f0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020f12:	e63d      	b.n	8020b90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8020f14:	2800      	cmp	r0, #0
 8020f16:	f43f aedd 	beq.w	8020cd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020f1a:	5c79      	ldrb	r1, [r7, r1]
 8020f1c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f20:	910b      	str	r1, [sp, #44]	; 0x2c
 8020f22:	0e09      	lsrs	r1, r1, #24
 8020f24:	9114      	str	r1, [sp, #80]	; 0x50
 8020f26:	e6d5      	b.n	8020cd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020f28:	b01f      	add	sp, #124	; 0x7c
 8020f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020f2e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8020f2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f32:	b089      	sub	sp, #36	; 0x24
 8020f34:	9101      	str	r1, [sp, #4]
 8020f36:	9801      	ldr	r0, [sp, #4]
 8020f38:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8020f3c:	8800      	ldrh	r0, [r0, #0]
 8020f3e:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8020f42:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8020f46:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8020f4a:	1206      	asrs	r6, r0, #8
 8020f4c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8020f50:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020f54:	9602      	str	r6, [sp, #8]
 8020f56:	10c6      	asrs	r6, r0, #3
 8020f58:	00c0      	lsls	r0, r0, #3
 8020f5a:	b2c0      	uxtb	r0, r0
 8020f5c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020f60:	9004      	str	r0, [sp, #16]
 8020f62:	2f00      	cmp	r7, #0
 8020f64:	fb07 100c 	mla	r0, r7, ip, r1
 8020f68:	9603      	str	r6, [sp, #12]
 8020f6a:	eb02 0e00 	add.w	lr, r2, r0
 8020f6e:	f2c0 810a 	blt.w	8021186 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020f72:	45b8      	cmp	r8, r7
 8020f74:	f340 8107 	ble.w	8021186 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020f78:	2900      	cmp	r1, #0
 8020f7a:	f2c0 8102 	blt.w	8021182 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020f7e:	458c      	cmp	ip, r1
 8020f80:	f340 80ff 	ble.w	8021182 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020f84:	5c12      	ldrb	r2, [r2, r0]
 8020f86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020f8a:	1c4a      	adds	r2, r1, #1
 8020f8c:	f100 80fe 	bmi.w	802118c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020f90:	4594      	cmp	ip, r2
 8020f92:	f340 80fb 	ble.w	802118c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020f96:	2d00      	cmp	r5, #0
 8020f98:	f000 80fa 	beq.w	8021190 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8020f9c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020fa0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020fa4:	3701      	adds	r7, #1
 8020fa6:	f100 80f7 	bmi.w	8021198 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020faa:	45b8      	cmp	r8, r7
 8020fac:	f340 80f4 	ble.w	8021198 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020fb0:	2c00      	cmp	r4, #0
 8020fb2:	f000 80f4 	beq.w	802119e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8020fb6:	2900      	cmp	r1, #0
 8020fb8:	eb0e 020c 	add.w	r2, lr, ip
 8020fbc:	f2c0 80ea 	blt.w	8021194 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020fc0:	458c      	cmp	ip, r1
 8020fc2:	f340 80e7 	ble.w	8021194 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020fc6:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8020fca:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8020fce:	3101      	adds	r1, #1
 8020fd0:	f100 80e8 	bmi.w	80211a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020fd4:	458c      	cmp	ip, r1
 8020fd6:	f340 80e5 	ble.w	80211a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020fda:	2d00      	cmp	r5, #0
 8020fdc:	f000 80e4 	beq.w	80211a8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8020fe0:	7852      	ldrb	r2, [r2, #1]
 8020fe2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020fe6:	0e0b      	lsrs	r3, r1, #24
 8020fe8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020fec:	9300      	str	r3, [sp, #0]
 8020fee:	b2a4      	uxth	r4, r4
 8020ff0:	b2ab      	uxth	r3, r5
 8020ff2:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8020ff6:	fb03 f904 	mul.w	r9, r3, r4
 8020ffa:	fb0a f505 	mul.w	r5, sl, r5
 8020ffe:	011b      	lsls	r3, r3, #4
 8021000:	eba3 0e09 	sub.w	lr, r3, r9
 8021004:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8021008:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802100c:	0a28      	lsrs	r0, r5, #8
 802100e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021012:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8021016:	4405      	add	r5, r0
 8021018:	0a2d      	lsrs	r5, r5, #8
 802101a:	fb0a f303 	mul.w	r3, sl, r3
 802101e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8021022:	9005      	str	r0, [sp, #20]
 8021024:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8021028:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802102c:	0a1b      	lsrs	r3, r3, #8
 802102e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021032:	9306      	str	r3, [sp, #24]
 8021034:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8021038:	fb0b f303 	mul.w	r3, fp, r3
 802103c:	0a1d      	lsrs	r5, r3, #8
 802103e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021042:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8021046:	fb0b f606 	mul.w	r6, fp, r6
 802104a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802104e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021052:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021056:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802105a:	fb08 f707 	mul.w	r7, r8, r7
 802105e:	441d      	add	r5, r3
 8021060:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8021064:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021068:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802106c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021070:	fb08 fc0c 	mul.w	ip, r8, ip
 8021074:	0a1b      	lsrs	r3, r3, #8
 8021076:	9307      	str	r3, [sp, #28]
 8021078:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802107c:	0e0b      	lsrs	r3, r1, #24
 802107e:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8021082:	435f      	muls	r7, r3
 8021084:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021088:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802108c:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8021090:	4460      	add	r0, ip
 8021092:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021096:	b2a4      	uxth	r4, r4
 8021098:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802109c:	0a2d      	lsrs	r5, r5, #8
 802109e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80210a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80210a6:	fa1f fe8e 	uxth.w	lr, lr
 80210aa:	4359      	muls	r1, r3
 80210ac:	1b12      	subs	r2, r2, r4
 80210ae:	9b05      	ldr	r3, [sp, #20]
 80210b0:	44bc      	add	ip, r7
 80210b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80210b6:	b292      	uxth	r2, r2
 80210b8:	fb05 f50e 	mul.w	r5, r5, lr
 80210bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210c0:	fb03 5502 	mla	r5, r3, r2, r5
 80210c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80210c8:	9b06      	ldr	r3, [sp, #24]
 80210ca:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80210ce:	0a36      	lsrs	r6, r6, #8
 80210d0:	0a00      	lsrs	r0, r0, #8
 80210d2:	fb0c 5509 	mla	r5, ip, r9, r5
 80210d6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80210da:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80210de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80210e2:	fb00 5504 	mla	r5, r0, r4, r5
 80210e6:	fb0e f606 	mul.w	r6, lr, r6
 80210ea:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80210ee:	0a09      	lsrs	r1, r1, #8
 80210f0:	9b07      	ldr	r3, [sp, #28]
 80210f2:	fb02 6000 	mla	r0, r2, r0, r6
 80210f6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80210fa:	fb09 0001 	mla	r0, r9, r1, r0
 80210fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021102:	fb0e fe0b 	mul.w	lr, lr, fp
 8021106:	fb04 0003 	mla	r0, r4, r3, r0
 802110a:	fb02 e20a 	mla	r2, r2, sl, lr
 802110e:	9b00      	ldr	r3, [sp, #0]
 8021110:	fb04 2408 	mla	r4, r4, r8, r2
 8021114:	fb09 4903 	mla	r9, r9, r3, r4
 8021118:	ea6f 2929 	mvn.w	r9, r9, asr #8
 802111c:	9b02      	ldr	r3, [sp, #8]
 802111e:	9a04      	ldr	r2, [sp, #16]
 8021120:	fa5f f989 	uxtb.w	r9, r9
 8021124:	fb03 f109 	mul.w	r1, r3, r9
 8021128:	9b03      	ldr	r3, [sp, #12]
 802112a:	0a2d      	lsrs	r5, r5, #8
 802112c:	0a00      	lsrs	r0, r0, #8
 802112e:	fb03 f309 	mul.w	r3, r3, r9
 8021132:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021136:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802113a:	4305      	orrs	r5, r0
 802113c:	fb02 f909 	mul.w	r9, r2, r9
 8021140:	1c58      	adds	r0, r3, #1
 8021142:	1c4a      	adds	r2, r1, #1
 8021144:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021148:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802114c:	0a2b      	lsrs	r3, r5, #8
 802114e:	0c2a      	lsrs	r2, r5, #16
 8021150:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021154:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021158:	00db      	lsls	r3, r3, #3
 802115a:	0212      	lsls	r2, r2, #8
 802115c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021160:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021164:	4313      	orrs	r3, r2
 8021166:	f109 0201 	add.w	r2, r9, #1
 802116a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802116e:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8021172:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021176:	431d      	orrs	r5, r3
 8021178:	9b01      	ldr	r3, [sp, #4]
 802117a:	801d      	strh	r5, [r3, #0]
 802117c:	b009      	add	sp, #36	; 0x24
 802117e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021182:	2000      	movs	r0, #0
 8021184:	e701      	b.n	8020f8a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8021186:	2600      	movs	r6, #0
 8021188:	4630      	mov	r0, r6
 802118a:	e70b      	b.n	8020fa4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802118c:	2600      	movs	r6, #0
 802118e:	e709      	b.n	8020fa4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021190:	462e      	mov	r6, r5
 8021192:	e707      	b.n	8020fa4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021194:	2700      	movs	r7, #0
 8021196:	e71a      	b.n	8020fce <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8021198:	2100      	movs	r1, #0
 802119a:	460f      	mov	r7, r1
 802119c:	e723      	b.n	8020fe6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802119e:	4621      	mov	r1, r4
 80211a0:	4627      	mov	r7, r4
 80211a2:	e720      	b.n	8020fe6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80211a4:	2100      	movs	r1, #0
 80211a6:	e71e      	b.n	8020fe6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80211a8:	4629      	mov	r1, r5
 80211aa:	e71c      	b.n	8020fe6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

080211ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211b0:	b09b      	sub	sp, #108	; 0x6c
 80211b2:	9218      	str	r2, [sp, #96]	; 0x60
 80211b4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80211b6:	9116      	str	r1, [sp, #88]	; 0x58
 80211b8:	9307      	str	r3, [sp, #28]
 80211ba:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80211be:	9019      	str	r0, [sp, #100]	; 0x64
 80211c0:	6850      	ldr	r0, [r2, #4]
 80211c2:	6812      	ldr	r2, [r2, #0]
 80211c4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80211c6:	fb00 1303 	mla	r3, r0, r3, r1
 80211ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80211ce:	930a      	str	r3, [sp, #40]	; 0x28
 80211d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80211d2:	681b      	ldr	r3, [r3, #0]
 80211d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80211d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80211d8:	685e      	ldr	r6, [r3, #4]
 80211da:	3604      	adds	r6, #4
 80211dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80211de:	2b00      	cmp	r3, #0
 80211e0:	dc03      	bgt.n	80211ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80211e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	f340 8373 	ble.w	80218d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80211ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80211ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80211f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80211f4:	1e48      	subs	r0, r1, #1
 80211f6:	1e57      	subs	r7, r2, #1
 80211f8:	9b07      	ldr	r3, [sp, #28]
 80211fa:	2b00      	cmp	r3, #0
 80211fc:	f340 8190 	ble.w	8021520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021200:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021202:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021206:	ea4f 4325 	mov.w	r3, r5, asr #16
 802120a:	d406      	bmi.n	802121a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802120c:	4584      	cmp	ip, r0
 802120e:	da04      	bge.n	802121a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021210:	2b00      	cmp	r3, #0
 8021212:	db02      	blt.n	802121a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021214:	42bb      	cmp	r3, r7
 8021216:	f2c0 8184 	blt.w	8021522 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802121a:	f11c 0c01 	adds.w	ip, ip, #1
 802121e:	f100 8172 	bmi.w	8021506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021222:	4561      	cmp	r1, ip
 8021224:	f2c0 816f 	blt.w	8021506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021228:	3301      	adds	r3, #1
 802122a:	f100 816c 	bmi.w	8021506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802122e:	429a      	cmp	r2, r3
 8021230:	f2c0 8169 	blt.w	8021506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021234:	9b07      	ldr	r3, [sp, #28]
 8021236:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021238:	9317      	str	r3, [sp, #92]	; 0x5c
 802123a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802123c:	2b00      	cmp	r3, #0
 802123e:	f340 818e 	ble.w	802155e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 8021242:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021244:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021248:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802124a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802124e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021250:	141b      	asrs	r3, r3, #16
 8021252:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021256:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802125a:	f100 81d1 	bmi.w	8021600 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 802125e:	f101 38ff 	add.w	r8, r1, #4294967295
 8021262:	4543      	cmp	r3, r8
 8021264:	f280 81cc 	bge.w	8021600 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8021268:	f1bc 0f00 	cmp.w	ip, #0
 802126c:	f2c0 81c8 	blt.w	8021600 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8021270:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021274:	45c4      	cmp	ip, r8
 8021276:	f280 81c3 	bge.w	8021600 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 802127a:	b209      	sxth	r1, r1
 802127c:	fb0c 3301 	mla	r3, ip, r1, r3
 8021280:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021282:	eb04 0803 	add.w	r8, r4, r3
 8021286:	5ce3      	ldrb	r3, [r4, r3]
 8021288:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802128c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021290:	2a00      	cmp	r2, #0
 8021292:	f000 81aa 	beq.w	80215ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 8021296:	f898 c001 	ldrb.w	ip, [r8, #1]
 802129a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802129e:	940b      	str	r4, [sp, #44]	; 0x2c
 80212a0:	0e24      	lsrs	r4, r4, #24
 80212a2:	9412      	str	r4, [sp, #72]	; 0x48
 80212a4:	b178      	cbz	r0, 80212c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80212a6:	eb08 0c01 	add.w	ip, r8, r1
 80212aa:	f818 1001 	ldrb.w	r1, [r8, r1]
 80212ae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212b2:	9108      	str	r1, [sp, #32]
 80212b4:	0e09      	lsrs	r1, r1, #24
 80212b6:	9110      	str	r1, [sp, #64]	; 0x40
 80212b8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80212bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212c0:	910c      	str	r1, [sp, #48]	; 0x30
 80212c2:	0e09      	lsrs	r1, r1, #24
 80212c4:	9113      	str	r1, [sp, #76]	; 0x4c
 80212c6:	b292      	uxth	r2, r2
 80212c8:	b280      	uxth	r0, r0
 80212ca:	fb02 f900 	mul.w	r9, r2, r0
 80212ce:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80212d2:	0112      	lsls	r2, r2, #4
 80212d4:	eba2 0809 	sub.w	r8, r2, r9
 80212d8:	b280      	uxth	r0, r0
 80212da:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80212de:	9912      	ldr	r1, [sp, #72]	; 0x48
 80212e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80212e2:	fa1f f888 	uxth.w	r8, r8
 80212e6:	1a12      	subs	r2, r2, r0
 80212e8:	b292      	uxth	r2, r2
 80212ea:	fb08 f101 	mul.w	r1, r8, r1
 80212ee:	fb02 110e 	mla	r1, r2, lr, r1
 80212f2:	fb00 1104 	mla	r1, r0, r4, r1
 80212f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80212f8:	fb09 1104 	mla	r1, r9, r4, r1
 80212fc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021300:	2900      	cmp	r1, #0
 8021302:	f000 80f5 	beq.w	80214f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021306:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802130a:	d01b      	beq.n	8021344 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802130c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021310:	fb0e fa0a 	mul.w	sl, lr, sl
 8021314:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021318:	fb0e fe03 	mul.w	lr, lr, r3
 802131c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021320:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021324:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021328:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802132c:	4453      	add	r3, sl
 802132e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021332:	0a1b      	lsrs	r3, r3, #8
 8021334:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021338:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802133c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021340:	ea43 030c 	orr.w	r3, r3, ip
 8021344:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021346:	2cff      	cmp	r4, #255	; 0xff
 8021348:	d021      	beq.n	802138e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802134a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802134c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021350:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021352:	fb04 fb0b 	mul.w	fp, r4, fp
 8021356:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021358:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802135c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802135e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021362:	fb04 fa0a 	mul.w	sl, r4, sl
 8021366:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802136a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802136e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021372:	44de      	add	lr, fp
 8021374:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021378:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802137c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021380:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021384:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021388:	ea4e 040a 	orr.w	r4, lr, sl
 802138c:	940b      	str	r4, [sp, #44]	; 0x2c
 802138e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021390:	2cff      	cmp	r4, #255	; 0xff
 8021392:	d021      	beq.n	80213d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8021394:	9c08      	ldr	r4, [sp, #32]
 8021396:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802139a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802139c:	fb04 fb0b 	mul.w	fp, r4, fp
 80213a0:	9c08      	ldr	r4, [sp, #32]
 80213a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80213a6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80213a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80213ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80213b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80213b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80213bc:	44de      	add	lr, fp
 80213be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80213c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213d2:	ea4e 040a 	orr.w	r4, lr, sl
 80213d6:	9408      	str	r4, [sp, #32]
 80213d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80213da:	2cff      	cmp	r4, #255	; 0xff
 80213dc:	d021      	beq.n	8021422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80213de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80213e0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80213e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80213e6:	fb04 fb0b 	mul.w	fp, r4, fp
 80213ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80213ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80213f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80213f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80213f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80213fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213fe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021402:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021406:	44de      	add	lr, fp
 8021408:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802140c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021410:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021414:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021418:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802141c:	ea4e 040a 	orr.w	r4, lr, sl
 8021420:	940c      	str	r4, [sp, #48]	; 0x30
 8021422:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021424:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021428:	9c08      	ldr	r4, [sp, #32]
 802142a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802142e:	fb08 fc0c 	mul.w	ip, r8, ip
 8021432:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021436:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802143a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802143c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021440:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021444:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021446:	fb09 cc0e 	mla	ip, r9, lr, ip
 802144a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802144e:	fb08 f80e 	mul.w	r8, r8, lr
 8021452:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021456:	fb02 8303 	mla	r3, r2, r3, r8
 802145a:	9a08      	ldr	r2, [sp, #32]
 802145c:	f8b7 8000 	ldrh.w	r8, [r7]
 8021460:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021466:	fb00 330a 	mla	r3, r0, sl, r3
 802146a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802146e:	fb09 3900 	mla	r9, r9, r0, r3
 8021472:	43c9      	mvns	r1, r1
 8021474:	ea4f 2228 	mov.w	r2, r8, asr #8
 8021478:	fa5f fe81 	uxtb.w	lr, r1
 802147c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021480:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021484:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021488:	fb02 f20e 	mul.w	r2, r2, lr
 802148c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021490:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021494:	ea4c 0c09 	orr.w	ip, ip, r9
 8021498:	1c53      	adds	r3, r2, #1
 802149a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802149e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80214a2:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80214a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80214aa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80214ae:	4a63      	ldr	r2, [pc, #396]	; (802163c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80214b0:	fb00 f00e 	mul.w	r0, r0, lr
 80214b4:	b2db      	uxtb	r3, r3
 80214b6:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80214ba:	1c43      	adds	r3, r0, #1
 80214bc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80214c0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80214c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80214c8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80214cc:	b2c9      	uxtb	r1, r1
 80214ce:	00db      	lsls	r3, r3, #3
 80214d0:	fb01 f10e 	mul.w	r1, r1, lr
 80214d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214d8:	4313      	orrs	r3, r2
 80214da:	1c4a      	adds	r2, r1, #1
 80214dc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80214e0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80214e4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80214e8:	ea4c 0c03 	orr.w	ip, ip, r3
 80214ec:	f8a7 c000 	strh.w	ip, [r7]
 80214f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80214f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80214f4:	441a      	add	r2, r3
 80214f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80214f8:	9225      	str	r2, [sp, #148]	; 0x94
 80214fa:	441d      	add	r5, r3
 80214fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80214fe:	3b01      	subs	r3, #1
 8021500:	3702      	adds	r7, #2
 8021502:	9317      	str	r3, [sp, #92]	; 0x5c
 8021504:	e699      	b.n	802123a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021506:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021508:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802150a:	441c      	add	r4, r3
 802150c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802150e:	9425      	str	r4, [sp, #148]	; 0x94
 8021510:	441d      	add	r5, r3
 8021512:	9b07      	ldr	r3, [sp, #28]
 8021514:	3b01      	subs	r3, #1
 8021516:	9307      	str	r3, [sp, #28]
 8021518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802151a:	3302      	adds	r3, #2
 802151c:	930a      	str	r3, [sp, #40]	; 0x28
 802151e:	e66b      	b.n	80211f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021520:	d024      	beq.n	802156c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021522:	9b07      	ldr	r3, [sp, #28]
 8021524:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021526:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021528:	3b01      	subs	r3, #1
 802152a:	fb00 4003 	mla	r0, r0, r3, r4
 802152e:	1400      	asrs	r0, r0, #16
 8021530:	f53f ae80 	bmi.w	8021234 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021534:	3901      	subs	r1, #1
 8021536:	4288      	cmp	r0, r1
 8021538:	f6bf ae7c 	bge.w	8021234 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802153c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802153e:	fb01 5303 	mla	r3, r1, r3, r5
 8021542:	141b      	asrs	r3, r3, #16
 8021544:	f53f ae76 	bmi.w	8021234 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021548:	3a01      	subs	r2, #1
 802154a:	4293      	cmp	r3, r2
 802154c:	f6bf ae72 	bge.w	8021234 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021550:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021554:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8021558:	f1bb 0f00 	cmp.w	fp, #0
 802155c:	dc70      	bgt.n	8021640 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802155e:	9b07      	ldr	r3, [sp, #28]
 8021560:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021566:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802156a:	930a      	str	r3, [sp, #40]	; 0x28
 802156c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802156e:	2b00      	cmp	r3, #0
 8021570:	f340 81ae 	ble.w	80218d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8021574:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802157c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021580:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021582:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021586:	ee31 1a05 	vadd.f32	s2, s2, s10
 802158a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802158e:	eef0 6a62 	vmov.f32	s13, s5
 8021592:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021596:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802159a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802159e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80215a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215a6:	eef0 6a43 	vmov.f32	s13, s6
 80215aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80215ae:	ee12 2a90 	vmov	r2, s5
 80215b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80215b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80215ba:	ee13 2a10 	vmov	r2, s6
 80215be:	9327      	str	r3, [sp, #156]	; 0x9c
 80215c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80215c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80215c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80215c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80215ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80215cc:	3b01      	subs	r3, #1
 80215ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215d2:	9316      	str	r3, [sp, #88]	; 0x58
 80215d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80215d6:	bf08      	it	eq
 80215d8:	4613      	moveq	r3, r2
 80215da:	ee16 5a90 	vmov	r5, s13
 80215de:	9307      	str	r3, [sp, #28]
 80215e0:	eeb0 3a67 	vmov.f32	s6, s15
 80215e4:	eef0 2a47 	vmov.f32	s5, s14
 80215e8:	e5f8      	b.n	80211dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80215ea:	2800      	cmp	r0, #0
 80215ec:	f43f ae6b 	beq.w	80212c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80215f0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80215f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80215f8:	9108      	str	r1, [sp, #32]
 80215fa:	0e09      	lsrs	r1, r1, #24
 80215fc:	9110      	str	r1, [sp, #64]	; 0x40
 80215fe:	e662      	b.n	80212c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8021600:	f113 0801 	adds.w	r8, r3, #1
 8021604:	f53f af74 	bmi.w	80214f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021608:	4541      	cmp	r1, r8
 802160a:	f6ff af71 	blt.w	80214f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802160e:	f11c 0801 	adds.w	r8, ip, #1
 8021612:	f53f af6d 	bmi.w	80214f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021616:	45c6      	cmp	lr, r8
 8021618:	f6ff af6a 	blt.w	80214f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802161c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021620:	b209      	sxth	r1, r1
 8021622:	fa0f f38e 	sxth.w	r3, lr
 8021626:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802162a:	9301      	str	r3, [sp, #4]
 802162c:	9100      	str	r1, [sp, #0]
 802162e:	4633      	mov	r3, r6
 8021630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021632:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021634:	4639      	mov	r1, r7
 8021636:	f7ff fc7a 	bl	8020f2e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802163a:	e759      	b.n	80214f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802163c:	fffff800 	.word	0xfffff800
 8021640:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021642:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021644:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021648:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802164a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802164e:	1427      	asrs	r7, r4, #16
 8021650:	142b      	asrs	r3, r5, #16
 8021652:	fb01 7303 	mla	r3, r1, r3, r7
 8021656:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021658:	18e7      	adds	r7, r4, r3
 802165a:	5ce3      	ldrb	r3, [r4, r3]
 802165c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021660:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021664:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021668:	2a00      	cmp	r2, #0
 802166a:	f000 8127 	beq.w	80218bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802166e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8021672:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8021676:	940d      	str	r4, [sp, #52]	; 0x34
 8021678:	0e24      	lsrs	r4, r4, #24
 802167a:	9414      	str	r4, [sp, #80]	; 0x50
 802167c:	b170      	cbz	r0, 802169c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802167e:	eb07 0e01 	add.w	lr, r7, r1
 8021682:	5c79      	ldrb	r1, [r7, r1]
 8021684:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021688:	9109      	str	r1, [sp, #36]	; 0x24
 802168a:	0e09      	lsrs	r1, r1, #24
 802168c:	9111      	str	r1, [sp, #68]	; 0x44
 802168e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8021692:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021696:	910e      	str	r1, [sp, #56]	; 0x38
 8021698:	0e09      	lsrs	r1, r1, #24
 802169a:	9115      	str	r1, [sp, #84]	; 0x54
 802169c:	b292      	uxth	r2, r2
 802169e:	b280      	uxth	r0, r0
 80216a0:	fb02 f800 	mul.w	r8, r2, r0
 80216a4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80216a8:	0112      	lsls	r2, r2, #4
 80216aa:	eba2 0e08 	sub.w	lr, r2, r8
 80216ae:	b280      	uxth	r0, r0
 80216b0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80216b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80216b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80216b8:	fa1f fe8e 	uxth.w	lr, lr
 80216bc:	1a09      	subs	r1, r1, r0
 80216be:	b289      	uxth	r1, r1
 80216c0:	fb0e f202 	mul.w	r2, lr, r2
 80216c4:	fb01 220c 	mla	r2, r1, ip, r2
 80216c8:	fb00 2204 	mla	r2, r0, r4, r2
 80216cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80216ce:	fb08 2204 	mla	r2, r8, r4, r2
 80216d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80216d6:	2a00      	cmp	r2, #0
 80216d8:	f000 80e5 	beq.w	80218a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80216dc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80216e0:	d019      	beq.n	8021716 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80216e2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80216e6:	fb0c fa0a 	mul.w	sl, ip, sl
 80216ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216ee:	fb0c fc03 	mul.w	ip, ip, r3
 80216f2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80216f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80216fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80216fe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021702:	4453      	add	r3, sl
 8021704:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021708:	0a1b      	lsrs	r3, r3, #8
 802170a:	0a3f      	lsrs	r7, r7, #8
 802170c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021710:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021714:	433b      	orrs	r3, r7
 8021716:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021718:	2cff      	cmp	r4, #255	; 0xff
 802171a:	d020      	beq.n	802175e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 802171c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802171e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021722:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021724:	4367      	muls	r7, r4
 8021726:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021728:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802172c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802172e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021732:	fb04 fa0a 	mul.w	sl, r4, sl
 8021736:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802173a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802173e:	44bc      	add	ip, r7
 8021740:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021744:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021748:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802174c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021750:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021754:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021758:	ea4c 040a 	orr.w	r4, ip, sl
 802175c:	940d      	str	r4, [sp, #52]	; 0x34
 802175e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021760:	2cff      	cmp	r4, #255	; 0xff
 8021762:	d020      	beq.n	80217a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8021764:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021766:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802176a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802176c:	4367      	muls	r7, r4
 802176e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021770:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021774:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021776:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802177a:	fb04 fa0a 	mul.w	sl, r4, sl
 802177e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021782:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021786:	44bc      	add	ip, r7
 8021788:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802178c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021790:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021794:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021798:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802179c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80217a0:	ea4c 040a 	orr.w	r4, ip, sl
 80217a4:	9409      	str	r4, [sp, #36]	; 0x24
 80217a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80217a8:	2cff      	cmp	r4, #255	; 0xff
 80217aa:	d020      	beq.n	80217ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80217ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80217ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80217b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80217b4:	4367      	muls	r7, r4
 80217b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80217b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80217bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80217be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80217c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80217c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80217ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80217ce:	44bc      	add	ip, r7
 80217d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80217d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80217d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80217dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80217e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80217e8:	ea4c 040a 	orr.w	r4, ip, sl
 80217ec:	940e      	str	r4, [sp, #56]	; 0x38
 80217ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80217f0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80217f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80217f6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80217fa:	fb0e f707 	mul.w	r7, lr, r7
 80217fe:	fb01 770c 	mla	r7, r1, ip, r7
 8021802:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021806:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021808:	fb00 770c 	mla	r7, r0, ip, r7
 802180c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021810:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021812:	fb08 770c 	mla	r7, r8, ip, r7
 8021816:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802181a:	fb0e fe0c 	mul.w	lr, lr, ip
 802181e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021822:	fb01 e303 	mla	r3, r1, r3, lr
 8021826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021828:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802182c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802182e:	fb00 330a 	mla	r3, r0, sl, r3
 8021832:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021836:	fb08 3c0c 	mla	ip, r8, ip, r3
 802183a:	f8b9 3000 	ldrh.w	r3, [r9]
 802183e:	43d2      	mvns	r2, r2
 8021840:	1218      	asrs	r0, r3, #8
 8021842:	b2d2      	uxtb	r2, r2
 8021844:	10d9      	asrs	r1, r3, #3
 8021846:	0a3f      	lsrs	r7, r7, #8
 8021848:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802184c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021850:	00db      	lsls	r3, r3, #3
 8021852:	4350      	muls	r0, r2
 8021854:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021858:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802185c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021860:	b2db      	uxtb	r3, r3
 8021862:	ea47 070c 	orr.w	r7, r7, ip
 8021866:	4351      	muls	r1, r2
 8021868:	4353      	muls	r3, r2
 802186a:	1c42      	adds	r2, r0, #1
 802186c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021870:	0c3a      	lsrs	r2, r7, #16
 8021872:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021876:	4a18      	ldr	r2, [pc, #96]	; (80218d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8021878:	b2c0      	uxtb	r0, r0
 802187a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802187e:	1c4a      	adds	r2, r1, #1
 8021880:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021884:	0a3a      	lsrs	r2, r7, #8
 8021886:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802188a:	00c9      	lsls	r1, r1, #3
 802188c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021890:	4301      	orrs	r1, r0
 8021892:	1c58      	adds	r0, r3, #1
 8021894:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021898:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802189c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80218a0:	4308      	orrs	r0, r1
 80218a2:	f8a9 0000 	strh.w	r0, [r9]
 80218a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80218a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80218aa:	441a      	add	r2, r3
 80218ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80218ae:	9225      	str	r2, [sp, #148]	; 0x94
 80218b0:	f109 0902 	add.w	r9, r9, #2
 80218b4:	441d      	add	r5, r3
 80218b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80218ba:	e64d      	b.n	8021558 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 80218bc:	2800      	cmp	r0, #0
 80218be:	f43f aeed 	beq.w	802169c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80218c2:	5c79      	ldrb	r1, [r7, r1]
 80218c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80218c8:	9109      	str	r1, [sp, #36]	; 0x24
 80218ca:	0e09      	lsrs	r1, r1, #24
 80218cc:	9111      	str	r1, [sp, #68]	; 0x44
 80218ce:	e6e5      	b.n	802169c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80218d0:	b01b      	add	sp, #108	; 0x6c
 80218d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218d6:	bf00      	nop
 80218d8:	fffff800 	.word	0xfffff800

080218dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80218dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218e0:	b085      	sub	sp, #20
 80218e2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80218e6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80218ea:	9103      	str	r1, [sp, #12]
 80218ec:	fb00 7406 	mla	r4, r0, r6, r7
 80218f0:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80218f4:	2800      	cmp	r0, #0
 80218f6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80218fa:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80218fe:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021902:	9501      	str	r5, [sp, #4]
 8021904:	eb03 0904 	add.w	r9, r3, r4
 8021908:	f2c0 8150 	blt.w	8021bac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802190c:	4583      	cmp	fp, r0
 802190e:	f340 814d 	ble.w	8021bac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021912:	2f00      	cmp	r7, #0
 8021914:	f2c0 8146 	blt.w	8021ba4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021918:	42be      	cmp	r6, r7
 802191a:	f340 8143 	ble.w	8021ba4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802191e:	f813 c004 	ldrb.w	ip, [r3, r4]
 8021922:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8021926:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802192a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802192e:	4355      	muls	r5, r2
 8021930:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021934:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8021938:	fb0c f203 	mul.w	r2, ip, r3
 802193c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021940:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021944:	441d      	add	r5, r3
 8021946:	f102 0320 	add.w	r3, r2, #32
 802194a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802194e:	0a1b      	lsrs	r3, r3, #8
 8021950:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021954:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021958:	431c      	orrs	r4, r3
 802195a:	1c7b      	adds	r3, r7, #1
 802195c:	f100 812b 	bmi.w	8021bb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021960:	429e      	cmp	r6, r3
 8021962:	f340 8128 	ble.w	8021bb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021966:	2900      	cmp	r1, #0
 8021968:	f000 8128 	beq.w	8021bbc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 802196c:	9a01      	ldr	r2, [sp, #4]
 802196e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021972:	8855      	ldrh	r5, [r2, #2]
 8021974:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021978:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 802197c:	fb08 f802 	mul.w	r8, r8, r2
 8021980:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021984:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021988:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802198c:	435d      	muls	r5, r3
 802198e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021992:	44d0      	add	r8, sl
 8021994:	f105 0a20 	add.w	sl, r5, #32
 8021998:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802199c:	0a2d      	lsrs	r5, r5, #8
 802199e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80219a2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80219a6:	432a      	orrs	r2, r5
 80219a8:	3001      	adds	r0, #1
 80219aa:	f100 810d 	bmi.w	8021bc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80219ae:	4583      	cmp	fp, r0
 80219b0:	f340 810a 	ble.w	8021bc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80219b4:	f1be 0f00 	cmp.w	lr, #0
 80219b8:	f000 810b 	beq.w	8021bd2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80219bc:	2f00      	cmp	r7, #0
 80219be:	f2c0 8100 	blt.w	8021bc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80219c2:	42be      	cmp	r6, r7
 80219c4:	f340 80fd 	ble.w	8021bc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80219c8:	9801      	ldr	r0, [sp, #4]
 80219ca:	f819 5006 	ldrb.w	r5, [r9, r6]
 80219ce:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80219d2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80219d6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80219da:	fb0a fa00 	mul.w	sl, sl, r0
 80219de:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80219e2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80219e6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80219ea:	fb05 f808 	mul.w	r8, r5, r8
 80219ee:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80219f2:	4482      	add	sl, r0
 80219f4:	f108 0020 	add.w	r0, r8, #32
 80219f8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80219fc:	0a00      	lsrs	r0, r0, #8
 80219fe:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021a02:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a06:	ea4b 0b00 	orr.w	fp, fp, r0
 8021a0a:	3701      	adds	r7, #1
 8021a0c:	f100 80e6 	bmi.w	8021bdc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021a10:	42be      	cmp	r6, r7
 8021a12:	f340 80e3 	ble.w	8021bdc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021a16:	2900      	cmp	r1, #0
 8021a18:	f000 80e3 	beq.w	8021be2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8021a1c:	3601      	adds	r6, #1
 8021a1e:	9801      	ldr	r0, [sp, #4]
 8021a20:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021a24:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021a28:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021a2c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021a30:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a34:	fb09 f906 	mul.w	r9, r9, r6
 8021a38:	fb07 f800 	mul.w	r8, r7, r0
 8021a3c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021a40:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021a44:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021a48:	44d1      	add	r9, sl
 8021a4a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021a4e:	f108 0020 	add.w	r0, r8, #32
 8021a52:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021a56:	0a00      	lsrs	r0, r0, #8
 8021a58:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a5c:	4330      	orrs	r0, r6
 8021a5e:	b28e      	uxth	r6, r1
 8021a60:	fa1f f98e 	uxth.w	r9, lr
 8021a64:	fb06 f809 	mul.w	r8, r6, r9
 8021a68:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021a6c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021a70:	0136      	lsls	r6, r6, #4
 8021a72:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a76:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021a7a:	9601      	str	r6, [sp, #4]
 8021a7c:	ea4a 0404 	orr.w	r4, sl, r4
 8021a80:	fa1f f689 	uxth.w	r6, r9
 8021a84:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021a88:	fb11 f90e 	smulbb	r9, r1, lr
 8021a8c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021a90:	9602      	str	r6, [sp, #8]
 8021a92:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a96:	4626      	mov	r6, r4
 8021a98:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021a9c:	f1ce 0410 	rsb	r4, lr, #16
 8021aa0:	1a64      	subs	r4, r4, r1
 8021aa2:	ea4a 0202 	orr.w	r2, sl, r2
 8021aa6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021aaa:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021aae:	434a      	muls	r2, r1
 8021ab0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021ab4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021ab8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021abc:	fb04 2406 	mla	r4, r4, r6, r2
 8021ac0:	ea4a 0000 	orr.w	r0, sl, r0
 8021ac4:	fb09 4200 	mla	r2, r9, r0, r4
 8021ac8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021acc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021ad0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021ad4:	ea44 0b0b 	orr.w	fp, r4, fp
 8021ad8:	9c01      	ldr	r4, [sp, #4]
 8021ada:	9e02      	ldr	r6, [sp, #8]
 8021adc:	9903      	ldr	r1, [sp, #12]
 8021ade:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8021ae2:	1ba4      	subs	r4, r4, r6
 8021ae4:	9e01      	ldr	r6, [sp, #4]
 8021ae6:	8808      	ldrh	r0, [r1, #0]
 8021ae8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8021aec:	eba6 0608 	sub.w	r6, r6, r8
 8021af0:	b2b6      	uxth	r6, r6
 8021af2:	b2a4      	uxth	r4, r4
 8021af4:	4373      	muls	r3, r6
 8021af6:	fb0c 3304 	mla	r3, ip, r4, r3
 8021afa:	9c02      	ldr	r4, [sp, #8]
 8021afc:	fb04 3505 	mla	r5, r4, r5, r3
 8021b00:	fb08 5707 	mla	r7, r8, r7, r5
 8021b04:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021b08:	b289      	uxth	r1, r1
 8021b0a:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021b0e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021b12:	434f      	muls	r7, r1
 8021b14:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021b18:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021b1c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b20:	1c7b      	adds	r3, r7, #1
 8021b22:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021b26:	ea42 0e0e 	orr.w	lr, r2, lr
 8021b2a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021b2e:	fa1f f28e 	uxth.w	r2, lr
 8021b32:	1203      	asrs	r3, r0, #8
 8021b34:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8021b38:	b2ff      	uxtb	r7, r7
 8021b3a:	1215      	asrs	r5, r2, #8
 8021b3c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021b40:	fb13 f307 	smulbb	r3, r3, r7
 8021b44:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021b48:	fb05 3501 	mla	r5, r5, r1, r3
 8021b4c:	10c3      	asrs	r3, r0, #3
 8021b4e:	10d4      	asrs	r4, r2, #3
 8021b50:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021b54:	fb13 f307 	smulbb	r3, r3, r7
 8021b58:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021b5c:	fb04 3401 	mla	r4, r4, r1, r3
 8021b60:	00c3      	lsls	r3, r0, #3
 8021b62:	00d2      	lsls	r2, r2, #3
 8021b64:	b2db      	uxtb	r3, r3
 8021b66:	fb13 f307 	smulbb	r3, r3, r7
 8021b6a:	b2d2      	uxtb	r2, r2
 8021b6c:	fb02 3101 	mla	r1, r2, r1, r3
 8021b70:	b2ad      	uxth	r5, r5
 8021b72:	b289      	uxth	r1, r1
 8021b74:	b2a4      	uxth	r4, r4
 8021b76:	1c6b      	adds	r3, r5, #1
 8021b78:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021b7c:	1c62      	adds	r2, r4, #1
 8021b7e:	1c4b      	adds	r3, r1, #1
 8021b80:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021b84:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8021b88:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021b8c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021b90:	0964      	lsrs	r4, r4, #5
 8021b92:	432b      	orrs	r3, r5
 8021b94:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021b98:	9a03      	ldr	r2, [sp, #12]
 8021b9a:	4323      	orrs	r3, r4
 8021b9c:	8013      	strh	r3, [r2, #0]
 8021b9e:	b005      	add	sp, #20
 8021ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ba4:	f04f 0c00 	mov.w	ip, #0
 8021ba8:	4664      	mov	r4, ip
 8021baa:	e6d6      	b.n	802195a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8021bac:	2300      	movs	r3, #0
 8021bae:	469c      	mov	ip, r3
 8021bb0:	461a      	mov	r2, r3
 8021bb2:	461c      	mov	r4, r3
 8021bb4:	e6f8      	b.n	80219a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021bb6:	2300      	movs	r3, #0
 8021bb8:	461a      	mov	r2, r3
 8021bba:	e6f5      	b.n	80219a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021bbc:	460b      	mov	r3, r1
 8021bbe:	460a      	mov	r2, r1
 8021bc0:	e6f2      	b.n	80219a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021bc2:	2500      	movs	r5, #0
 8021bc4:	46ab      	mov	fp, r5
 8021bc6:	e720      	b.n	8021a0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8021bc8:	2700      	movs	r7, #0
 8021bca:	463d      	mov	r5, r7
 8021bcc:	4638      	mov	r0, r7
 8021bce:	46bb      	mov	fp, r7
 8021bd0:	e745      	b.n	8021a5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021bd2:	4677      	mov	r7, lr
 8021bd4:	4675      	mov	r5, lr
 8021bd6:	4670      	mov	r0, lr
 8021bd8:	46f3      	mov	fp, lr
 8021bda:	e740      	b.n	8021a5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021bdc:	2700      	movs	r7, #0
 8021bde:	4638      	mov	r0, r7
 8021be0:	e73d      	b.n	8021a5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021be2:	460f      	mov	r7, r1
 8021be4:	4608      	mov	r0, r1
 8021be6:	e73a      	b.n	8021a5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08021be8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bec:	b097      	sub	sp, #92	; 0x5c
 8021bee:	9214      	str	r2, [sp, #80]	; 0x50
 8021bf0:	9308      	str	r3, [sp, #32]
 8021bf2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021bf4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021bf8:	9312      	str	r3, [sp, #72]	; 0x48
 8021bfa:	9111      	str	r1, [sp, #68]	; 0x44
 8021bfc:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021c00:	9015      	str	r0, [sp, #84]	; 0x54
 8021c02:	6850      	ldr	r0, [r2, #4]
 8021c04:	6812      	ldr	r2, [r2, #0]
 8021c06:	fb00 1303 	mla	r3, r0, r3, r1
 8021c0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8021c10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c12:	681b      	ldr	r3, [r3, #0]
 8021c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8021c16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c18:	685b      	ldr	r3, [r3, #4]
 8021c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8021c1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021c20:	930a      	str	r3, [sp, #40]	; 0x28
 8021c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021c24:	2b00      	cmp	r3, #0
 8021c26:	dc03      	bgt.n	8021c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021c28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021c2a:	2b00      	cmp	r3, #0
 8021c2c:	f340 83cb 	ble.w	80223c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021c30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c3a:	1e48      	subs	r0, r1, #1
 8021c3c:	1e55      	subs	r5, r2, #1
 8021c3e:	9b08      	ldr	r3, [sp, #32]
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	f340 81a3 	ble.w	8021f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8021c46:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8021c48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021c4a:	1436      	asrs	r6, r6, #16
 8021c4c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021c50:	d406      	bmi.n	8021c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021c52:	4286      	cmp	r6, r0
 8021c54:	da04      	bge.n	8021c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021c56:	2b00      	cmp	r3, #0
 8021c58:	db02      	blt.n	8021c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021c5a:	42ab      	cmp	r3, r5
 8021c5c:	f2c0 8197 	blt.w	8021f8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021c60:	3601      	adds	r6, #1
 8021c62:	f100 8184 	bmi.w	8021f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021c66:	42b1      	cmp	r1, r6
 8021c68:	f2c0 8181 	blt.w	8021f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021c6c:	3301      	adds	r3, #1
 8021c6e:	f100 817e 	bmi.w	8021f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021c72:	429a      	cmp	r2, r3
 8021c74:	f2c0 817b 	blt.w	8021f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021c78:	9b08      	ldr	r3, [sp, #32]
 8021c7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c7e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021c82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021c84:	2b00      	cmp	r3, #0
 8021c86:	f340 81a4 	ble.w	8021fd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021c8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021c8c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021c8e:	1418      	asrs	r0, r3, #16
 8021c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021c92:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021c96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021c98:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021c9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c9e:	142d      	asrs	r5, r5, #16
 8021ca0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021ca4:	f100 81f8 	bmi.w	8022098 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021ca8:	f102 3eff 	add.w	lr, r2, #4294967295
 8021cac:	4575      	cmp	r5, lr
 8021cae:	f280 81f3 	bge.w	8022098 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021cb2:	2800      	cmp	r0, #0
 8021cb4:	f2c0 81f0 	blt.w	8022098 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021cb8:	f103 3eff 	add.w	lr, r3, #4294967295
 8021cbc:	4570      	cmp	r0, lr
 8021cbe:	f280 81eb 	bge.w	8022098 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021cc4:	b212      	sxth	r2, r2
 8021cc6:	fb00 5002 	mla	r0, r0, r2, r5
 8021cca:	fa1f fe81 	uxth.w	lr, r1
 8021cce:	eb03 0a00 	add.w	sl, r3, r0
 8021cd2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021cd6:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021cda:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021cde:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021ce2:	b29b      	uxth	r3, r3
 8021ce4:	f1bc 0f00 	cmp.w	ip, #0
 8021ce8:	f000 81b9 	beq.w	802205e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8021cec:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021cf0:	940d      	str	r4, [sp, #52]	; 0x34
 8021cf2:	eb0a 0b02 	add.w	fp, sl, r2
 8021cf6:	fa1f fa8c 	uxth.w	sl, ip
 8021cfa:	fb0a fe0e 	mul.w	lr, sl, lr
 8021cfe:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021d02:	fa1f fa8a 	uxth.w	sl, sl
 8021d06:	eba5 050e 	sub.w	r5, r5, lr
 8021d0a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021d0e:	940e      	str	r4, [sp, #56]	; 0x38
 8021d10:	eba3 030a 	sub.w	r3, r3, sl
 8021d14:	b2ad      	uxth	r5, r5
 8021d16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021d18:	b29b      	uxth	r3, r3
 8021d1a:	fb08 f505 	mul.w	r5, r8, r5
 8021d1e:	fb09 5303 	mla	r3, r9, r3, r5
 8021d22:	fb0a 3304 	mla	r3, sl, r4, r3
 8021d26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021d28:	fb0e 3304 	mla	r3, lr, r4, r3
 8021d2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	f000 810f 	beq.w	8021f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021d36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021d38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021d3c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021d40:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021d44:	f000 8190 	beq.w	8022068 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021d48:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021d4c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021d50:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021d54:	fb09 f000 	mul.w	r0, r9, r0
 8021d58:	fb0a fe0e 	mul.w	lr, sl, lr
 8021d5c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021d60:	f100 0b20 	add.w	fp, r0, #32
 8021d64:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021d68:	44ce      	add	lr, r9
 8021d6a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021d6e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021d72:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021d76:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021d7a:	ea4e 0909 	orr.w	r9, lr, r9
 8021d7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021d82:	8868      	ldrh	r0, [r5, #2]
 8021d84:	d019      	beq.n	8021dba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021d86:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021d8a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021d8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021d92:	fb08 f800 	mul.w	r8, r8, r0
 8021d96:	fb0a fe0e 	mul.w	lr, sl, lr
 8021d9a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021d9e:	f108 0b20 	add.w	fp, r8, #32
 8021da2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021da6:	4486      	add	lr, r0
 8021da8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021dac:	0a00      	lsrs	r0, r0, #8
 8021dae:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021db2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021db6:	ea4e 0000 	orr.w	r0, lr, r0
 8021dba:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021dbe:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021dc2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021dc6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021dca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021dce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021dd2:	ea4e 0909 	orr.w	r9, lr, r9
 8021dd6:	ea4a 0000 	orr.w	r0, sl, r0
 8021dda:	f1bc 0f00 	cmp.w	ip, #0
 8021dde:	f000 8145 	beq.w	802206c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8021de2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021de6:	3a01      	subs	r2, #1
 8021de8:	0052      	lsls	r2, r2, #1
 8021dea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021dec:	3202      	adds	r2, #2
 8021dee:	2cff      	cmp	r4, #255	; 0xff
 8021df0:	eb05 0e02 	add.w	lr, r5, r2
 8021df4:	5aaa      	ldrh	r2, [r5, r2]
 8021df6:	d018      	beq.n	8021e2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021df8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021dfc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021e00:	fb04 fa02 	mul.w	sl, r4, r2
 8021e04:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021e08:	fb08 f805 	mul.w	r8, r8, r5
 8021e0c:	f10a 0520 	add.w	r5, sl, #32
 8021e10:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021e14:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021e18:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021e1c:	4442      	add	r2, r8
 8021e1e:	0a2d      	lsrs	r5, r5, #8
 8021e20:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021e24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021e28:	432a      	orrs	r2, r5
 8021e2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021e2c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021e30:	2cff      	cmp	r4, #255	; 0xff
 8021e32:	d01a      	beq.n	8021e6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8021e34:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021e38:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021e3c:	fb04 fa05 	mul.w	sl, r4, r5
 8021e40:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021e44:	fb08 f80e 	mul.w	r8, r8, lr
 8021e48:	f10a 0e20 	add.w	lr, sl, #32
 8021e4c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021e50:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021e54:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021e58:	4445      	add	r5, r8
 8021e5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e5e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021e62:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021e66:	ea45 050e 	orr.w	r5, r5, lr
 8021e6a:	fb1c fe01 	smulbb	lr, ip, r1
 8021e6e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021e72:	f1cc 0810 	rsb	r8, ip, #16
 8021e76:	eba8 0801 	sub.w	r8, r8, r1
 8021e7a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021e7e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021e82:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021e86:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021e8a:	4341      	muls	r1, r0
 8021e8c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021e90:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021e94:	ea4a 0202 	orr.w	r2, sl, r2
 8021e98:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021e9c:	fb09 1108 	mla	r1, r9, r8, r1
 8021ea0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021ea4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021ea8:	fb0c 1102 	mla	r1, ip, r2, r1
 8021eac:	ea4b 0505 	orr.w	r5, fp, r5
 8021eb0:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021eb4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021eb8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021ebc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021ec0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021ec4:	ea42 0e0e 	orr.w	lr, r2, lr
 8021ec8:	fa1f f28e 	uxth.w	r2, lr
 8021ecc:	2bff      	cmp	r3, #255	; 0xff
 8021ece:	d103      	bne.n	8021ed8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021ed0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021ed2:	29ff      	cmp	r1, #255	; 0xff
 8021ed4:	f000 80de 	beq.w	8022094 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021ed8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021eda:	8838      	ldrh	r0, [r7, #0]
 8021edc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ede:	434b      	muls	r3, r1
 8021ee0:	f103 0c01 	add.w	ip, r3, #1
 8021ee4:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8021ee8:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021eec:	fa5f fc83 	uxtb.w	ip, r3
 8021ef0:	1203      	asrs	r3, r0, #8
 8021ef2:	1215      	asrs	r5, r2, #8
 8021ef4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021ef8:	fb13 f30c 	smulbb	r3, r3, ip
 8021efc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021f00:	fb05 3501 	mla	r5, r5, r1, r3
 8021f04:	10c3      	asrs	r3, r0, #3
 8021f06:	10d1      	asrs	r1, r2, #3
 8021f08:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021f0c:	fb13 f30c 	smulbb	r3, r3, ip
 8021f10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021f14:	fb01 3104 	mla	r1, r1, r4, r3
 8021f18:	00c3      	lsls	r3, r0, #3
 8021f1a:	00d2      	lsls	r2, r2, #3
 8021f1c:	b2db      	uxtb	r3, r3
 8021f1e:	b2d2      	uxtb	r2, r2
 8021f20:	fb13 f30c 	smulbb	r3, r3, ip
 8021f24:	b2ad      	uxth	r5, r5
 8021f26:	fb02 3304 	mla	r3, r2, r4, r3
 8021f2a:	b29a      	uxth	r2, r3
 8021f2c:	1c6b      	adds	r3, r5, #1
 8021f2e:	b289      	uxth	r1, r1
 8021f30:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021f34:	1c53      	adds	r3, r2, #1
 8021f36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021f3a:	1c4a      	adds	r2, r1, #1
 8021f3c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021f40:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021f44:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021f48:	0949      	lsrs	r1, r1, #5
 8021f4a:	432b      	orrs	r3, r5
 8021f4c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021f50:	430b      	orrs	r3, r1
 8021f52:	803b      	strh	r3, [r7, #0]
 8021f54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021f56:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021f58:	4413      	add	r3, r2
 8021f5a:	9321      	str	r3, [sp, #132]	; 0x84
 8021f5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021f5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f60:	441a      	add	r2, r3
 8021f62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021f64:	9222      	str	r2, [sp, #136]	; 0x88
 8021f66:	3b01      	subs	r3, #1
 8021f68:	3702      	adds	r7, #2
 8021f6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f6c:	e689      	b.n	8021c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021f70:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021f72:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8021f74:	4433      	add	r3, r6
 8021f76:	9321      	str	r3, [sp, #132]	; 0x84
 8021f78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f7a:	441c      	add	r4, r3
 8021f7c:	9b08      	ldr	r3, [sp, #32]
 8021f7e:	9422      	str	r4, [sp, #136]	; 0x88
 8021f80:	3b01      	subs	r3, #1
 8021f82:	9308      	str	r3, [sp, #32]
 8021f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f86:	3302      	adds	r3, #2
 8021f88:	9309      	str	r3, [sp, #36]	; 0x24
 8021f8a:	e658      	b.n	8021c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021f8c:	d028      	beq.n	8021fe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021f8e:	9b08      	ldr	r3, [sp, #32]
 8021f90:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021f92:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021f94:	3b01      	subs	r3, #1
 8021f96:	fb00 5003 	mla	r0, r0, r3, r5
 8021f9a:	1400      	asrs	r0, r0, #16
 8021f9c:	f53f ae6c 	bmi.w	8021c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021fa0:	3901      	subs	r1, #1
 8021fa2:	4288      	cmp	r0, r1
 8021fa4:	f6bf ae68 	bge.w	8021c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021fa8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021faa:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021fac:	fb01 0303 	mla	r3, r1, r3, r0
 8021fb0:	141b      	asrs	r3, r3, #16
 8021fb2:	f53f ae61 	bmi.w	8021c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021fb6:	3a01      	subs	r2, #1
 8021fb8:	4293      	cmp	r3, r2
 8021fba:	f6bf ae5d 	bge.w	8021c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021fbe:	9b08      	ldr	r3, [sp, #32]
 8021fc0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8021fc6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021fca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	f300 8082 	bgt.w	80220d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8021fd2:	9b08      	ldr	r3, [sp, #32]
 8021fd4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021fda:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021fde:	9309      	str	r3, [sp, #36]	; 0x24
 8021fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	f340 81ef 	ble.w	80223c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021fe8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021ff0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ff4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021ff6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021ffa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ffe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022002:	eef0 6a62 	vmov.f32	s13, s5
 8022006:	ee61 7a27 	vmul.f32	s15, s2, s15
 802200a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802200e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022012:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8022016:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802201a:	eef0 6a43 	vmov.f32	s13, s6
 802201e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022022:	ee12 2a90 	vmov	r2, s5
 8022026:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802202a:	fb92 f3f3 	sdiv	r3, r2, r3
 802202e:	ee13 2a10 	vmov	r2, s6
 8022032:	9323      	str	r3, [sp, #140]	; 0x8c
 8022034:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022036:	fb92 f3f3 	sdiv	r3, r2, r3
 802203a:	9324      	str	r3, [sp, #144]	; 0x90
 802203c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802203e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022040:	3b01      	subs	r3, #1
 8022042:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022046:	9311      	str	r3, [sp, #68]	; 0x44
 8022048:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802204a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802204e:	bf08      	it	eq
 8022050:	4613      	moveq	r3, r2
 8022052:	9308      	str	r3, [sp, #32]
 8022054:	eeb0 3a67 	vmov.f32	s6, s15
 8022058:	eef0 2a47 	vmov.f32	s5, s14
 802205c:	e5e1      	b.n	8021c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802205e:	fb08 f505 	mul.w	r5, r8, r5
 8022062:	fb09 5303 	mla	r3, r9, r3, r5
 8022066:	e661      	b.n	8021d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8022068:	4681      	mov	r9, r0
 802206a:	e688      	b.n	8021d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802206c:	f1c1 0210 	rsb	r2, r1, #16
 8022070:	4341      	muls	r1, r0
 8022072:	fb09 1902 	mla	r9, r9, r2, r1
 8022076:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802207a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802207e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022082:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022086:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802208a:	ea42 0909 	orr.w	r9, r2, r9
 802208e:	fa1f f289 	uxth.w	r2, r9
 8022092:	e71b      	b.n	8021ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8022094:	803a      	strh	r2, [r7, #0]
 8022096:	e75d      	b.n	8021f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022098:	f115 0e01 	adds.w	lr, r5, #1
 802209c:	f53f af5a 	bmi.w	8021f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80220a0:	4572      	cmp	r2, lr
 80220a2:	f6ff af57 	blt.w	8021f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80220a6:	f110 0e01 	adds.w	lr, r0, #1
 80220aa:	f53f af53 	bmi.w	8021f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80220ae:	4573      	cmp	r3, lr
 80220b0:	f6ff af50 	blt.w	8021f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80220b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80220b6:	9502      	str	r5, [sp, #8]
 80220b8:	b21b      	sxth	r3, r3
 80220ba:	b212      	sxth	r2, r2
 80220bc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80220c0:	9301      	str	r3, [sp, #4]
 80220c2:	9200      	str	r2, [sp, #0]
 80220c4:	e9cd c405 	strd	ip, r4, [sp, #20]
 80220c8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80220cc:	4639      	mov	r1, r7
 80220ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 80220d0:	f7ff fc04 	bl	80218dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80220d4:	e73e      	b.n	8021f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80220d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80220d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80220dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80220de:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80220e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80220e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80220e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80220ea:	141f      	asrs	r7, r3, #16
 80220ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80220ee:	141b      	asrs	r3, r3, #16
 80220f0:	fb01 3707 	mla	r7, r1, r7, r3
 80220f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80220f6:	fa1f fc82 	uxth.w	ip, r2
 80220fa:	eb03 0a07 	add.w	sl, r3, r7
 80220fe:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022102:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022106:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802210a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802210e:	b29b      	uxth	r3, r3
 8022110:	2d00      	cmp	r5, #0
 8022112:	f000 813d 	beq.w	8022390 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8022116:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802211a:	940f      	str	r4, [sp, #60]	; 0x3c
 802211c:	eb0a 0b01 	add.w	fp, sl, r1
 8022120:	fa1f fa85 	uxth.w	sl, r5
 8022124:	fb0a fc0c 	mul.w	ip, sl, ip
 8022128:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802212c:	fa1f fa8a 	uxth.w	sl, sl
 8022130:	eba0 000c 	sub.w	r0, r0, ip
 8022134:	eba3 030a 	sub.w	r3, r3, sl
 8022138:	b280      	uxth	r0, r0
 802213a:	fb08 f000 	mul.w	r0, r8, r0
 802213e:	b29b      	uxth	r3, r3
 8022140:	fb09 0303 	mla	r3, r9, r3, r0
 8022144:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022146:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802214a:	9410      	str	r4, [sp, #64]	; 0x40
 802214c:	fb0a 3300 	mla	r3, sl, r0, r3
 8022150:	fb0c 3304 	mla	r3, ip, r4, r3
 8022154:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022158:	2b00      	cmp	r3, #0
 802215a:	f000 810b 	beq.w	8022374 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802215e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022160:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022162:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022166:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802216a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802216e:	f000 8114 	beq.w	802239a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8022172:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022176:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802217a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802217e:	fb09 f707 	mul.w	r7, r9, r7
 8022182:	fb0a fc0c 	mul.w	ip, sl, ip
 8022186:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802218a:	f107 0b20 	add.w	fp, r7, #32
 802218e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022192:	44cc      	add	ip, r9
 8022194:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022198:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802219c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80221a0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80221a4:	ea4c 0909 	orr.w	r9, ip, r9
 80221a8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80221ac:	8847      	ldrh	r7, [r0, #2]
 80221ae:	d019      	beq.n	80221e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 80221b0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80221b4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80221b8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80221bc:	fb08 f807 	mul.w	r8, r8, r7
 80221c0:	fb0a fc0c 	mul.w	ip, sl, ip
 80221c4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80221c8:	f108 0b20 	add.w	fp, r8, #32
 80221cc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80221d0:	44bc      	add	ip, r7
 80221d2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80221d6:	0a3f      	lsrs	r7, r7, #8
 80221d8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80221dc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80221e0:	ea4c 0707 	orr.w	r7, ip, r7
 80221e4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80221e8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80221ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80221f0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80221f4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80221f8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80221fc:	ea4c 0909 	orr.w	r9, ip, r9
 8022200:	ea4a 0707 	orr.w	r7, sl, r7
 8022204:	2d00      	cmp	r5, #0
 8022206:	f000 80ca 	beq.w	802239e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802220a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802220e:	3901      	subs	r1, #1
 8022210:	0049      	lsls	r1, r1, #1
 8022212:	3102      	adds	r1, #2
 8022214:	eb00 0c01 	add.w	ip, r0, r1
 8022218:	5a41      	ldrh	r1, [r0, r1]
 802221a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802221c:	28ff      	cmp	r0, #255	; 0xff
 802221e:	d019      	beq.n	8022254 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8022220:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022222:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022226:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802222a:	fb04 fa01 	mul.w	sl, r4, r1
 802222e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022232:	fb08 f800 	mul.w	r8, r8, r0
 8022236:	f10a 0020 	add.w	r0, sl, #32
 802223a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802223e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022242:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022246:	4441      	add	r1, r8
 8022248:	0a00      	lsrs	r0, r0, #8
 802224a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802224e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022252:	4301      	orrs	r1, r0
 8022254:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022256:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802225a:	2cff      	cmp	r4, #255	; 0xff
 802225c:	d01a      	beq.n	8022294 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 802225e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022262:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022266:	fb04 fa00 	mul.w	sl, r4, r0
 802226a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802226e:	fb08 f80c 	mul.w	r8, r8, ip
 8022272:	f10a 0c20 	add.w	ip, sl, #32
 8022276:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802227a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802227e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022282:	4440      	add	r0, r8
 8022284:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022288:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802228c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022290:	ea40 000c 	orr.w	r0, r0, ip
 8022294:	fb15 fc02 	smulbb	ip, r5, r2
 8022298:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802229c:	f1c5 0810 	rsb	r8, r5, #16
 80222a0:	eba8 0802 	sub.w	r8, r8, r2
 80222a4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80222a8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80222ac:	437a      	muls	r2, r7
 80222ae:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80222b2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80222b6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80222ba:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80222be:	fb09 2208 	mla	r2, r9, r8, r2
 80222c2:	ea4a 0101 	orr.w	r1, sl, r1
 80222c6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80222ca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80222ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80222d2:	fb05 2201 	mla	r2, r5, r1, r2
 80222d6:	ea4b 0000 	orr.w	r0, fp, r0
 80222da:	fb0c 2200 	mla	r2, ip, r0, r2
 80222de:	0d57      	lsrs	r7, r2, #21
 80222e0:	0952      	lsrs	r2, r2, #5
 80222e2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80222e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80222ea:	433a      	orrs	r2, r7
 80222ec:	2bff      	cmp	r3, #255	; 0xff
 80222ee:	b292      	uxth	r2, r2
 80222f0:	d102      	bne.n	80222f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80222f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80222f4:	29ff      	cmp	r1, #255	; 0xff
 80222f6:	d063      	beq.n	80223c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 80222f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80222fa:	f8be 1000 	ldrh.w	r1, [lr]
 80222fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022300:	4343      	muls	r3, r0
 8022302:	1c58      	adds	r0, r3, #1
 8022304:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8022308:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802230c:	1208      	asrs	r0, r1, #8
 802230e:	b2db      	uxtb	r3, r3
 8022310:	1215      	asrs	r5, r2, #8
 8022312:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022316:	fb10 f003 	smulbb	r0, r0, r3
 802231a:	10cf      	asrs	r7, r1, #3
 802231c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022320:	00c9      	lsls	r1, r1, #3
 8022322:	fb05 0504 	mla	r5, r5, r4, r0
 8022326:	b2c9      	uxtb	r1, r1
 8022328:	10d0      	asrs	r0, r2, #3
 802232a:	00d2      	lsls	r2, r2, #3
 802232c:	fb11 f103 	smulbb	r1, r1, r3
 8022330:	b2d2      	uxtb	r2, r2
 8022332:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022336:	fb02 1204 	mla	r2, r2, r4, r1
 802233a:	fb17 f703 	smulbb	r7, r7, r3
 802233e:	b2ad      	uxth	r5, r5
 8022340:	b292      	uxth	r2, r2
 8022342:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022346:	fb00 7004 	mla	r0, r0, r4, r7
 802234a:	1c6b      	adds	r3, r5, #1
 802234c:	1c57      	adds	r7, r2, #1
 802234e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022352:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022356:	b280      	uxth	r0, r0
 8022358:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802235c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022360:	433d      	orrs	r5, r7
 8022362:	1c47      	adds	r7, r0, #1
 8022364:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022368:	097f      	lsrs	r7, r7, #5
 802236a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802236e:	433d      	orrs	r5, r7
 8022370:	f8ae 5000 	strh.w	r5, [lr]
 8022374:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022376:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022378:	4413      	add	r3, r2
 802237a:	9321      	str	r3, [sp, #132]	; 0x84
 802237c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802237e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022380:	441a      	add	r2, r3
 8022382:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022384:	9222      	str	r2, [sp, #136]	; 0x88
 8022386:	3b01      	subs	r3, #1
 8022388:	f10e 0e02 	add.w	lr, lr, #2
 802238c:	9313      	str	r3, [sp, #76]	; 0x4c
 802238e:	e61c      	b.n	8021fca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8022390:	fb08 f000 	mul.w	r0, r8, r0
 8022394:	fb09 0303 	mla	r3, r9, r3, r0
 8022398:	e6dc      	b.n	8022154 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 802239a:	46b9      	mov	r9, r7
 802239c:	e704      	b.n	80221a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 802239e:	f1c2 0110 	rsb	r1, r2, #16
 80223a2:	437a      	muls	r2, r7
 80223a4:	fb09 2901 	mla	r9, r9, r1, r2
 80223a8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80223ac:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80223b0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80223b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80223b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80223bc:	4302      	orrs	r2, r0
 80223be:	e795      	b.n	80222ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80223c0:	f8ae 2000 	strh.w	r2, [lr]
 80223c4:	e7d6      	b.n	8022374 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80223c6:	b017      	add	sp, #92	; 0x5c
 80223c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080223cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80223cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223d0:	b085      	sub	sp, #20
 80223d2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80223d6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80223da:	9103      	str	r1, [sp, #12]
 80223dc:	fb00 7406 	mla	r4, r0, r6, r7
 80223e0:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80223e4:	2800      	cmp	r0, #0
 80223e6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80223ea:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80223ee:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80223f2:	9501      	str	r5, [sp, #4]
 80223f4:	eb02 0904 	add.w	r9, r2, r4
 80223f8:	f2c0 8141 	blt.w	802267e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80223fc:	4583      	cmp	fp, r0
 80223fe:	f340 813e 	ble.w	802267e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022402:	2f00      	cmp	r7, #0
 8022404:	f2c0 8137 	blt.w	8022676 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8022408:	42be      	cmp	r6, r7
 802240a:	f340 8134 	ble.w	8022676 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802240e:	f812 c004 	ldrb.w	ip, [r2, r4]
 8022412:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8022416:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802241a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802241e:	4355      	muls	r5, r2
 8022420:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022424:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8022428:	fb0c f203 	mul.w	r2, ip, r3
 802242c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8022430:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8022434:	441d      	add	r5, r3
 8022436:	f102 0320 	add.w	r3, r2, #32
 802243a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802243e:	0a1b      	lsrs	r3, r3, #8
 8022440:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8022444:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022448:	431c      	orrs	r4, r3
 802244a:	1c7b      	adds	r3, r7, #1
 802244c:	f100 811c 	bmi.w	8022688 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022450:	429e      	cmp	r6, r3
 8022452:	f340 8119 	ble.w	8022688 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022456:	2900      	cmp	r1, #0
 8022458:	f000 8119 	beq.w	802268e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 802245c:	9a01      	ldr	r2, [sp, #4]
 802245e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022462:	8855      	ldrh	r5, [r2, #2]
 8022464:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8022468:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 802246c:	fb08 f802 	mul.w	r8, r8, r2
 8022470:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022474:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022478:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802247c:	435d      	muls	r5, r3
 802247e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022482:	44d0      	add	r8, sl
 8022484:	f105 0a20 	add.w	sl, r5, #32
 8022488:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802248c:	0a2d      	lsrs	r5, r5, #8
 802248e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8022492:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022496:	432a      	orrs	r2, r5
 8022498:	3001      	adds	r0, #1
 802249a:	f100 80fe 	bmi.w	802269a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802249e:	4583      	cmp	fp, r0
 80224a0:	f340 80fb 	ble.w	802269a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80224a4:	f1be 0f00 	cmp.w	lr, #0
 80224a8:	f000 80fc 	beq.w	80226a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80224ac:	2f00      	cmp	r7, #0
 80224ae:	f2c0 80f1 	blt.w	8022694 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80224b2:	42be      	cmp	r6, r7
 80224b4:	f340 80ee 	ble.w	8022694 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80224b8:	9801      	ldr	r0, [sp, #4]
 80224ba:	f819 5006 	ldrb.w	r5, [r9, r6]
 80224be:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80224c2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80224c6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80224ca:	fb0a fa00 	mul.w	sl, sl, r0
 80224ce:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80224d2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80224d6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80224da:	fb05 f808 	mul.w	r8, r5, r8
 80224de:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80224e2:	4482      	add	sl, r0
 80224e4:	f108 0020 	add.w	r0, r8, #32
 80224e8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80224ec:	0a00      	lsrs	r0, r0, #8
 80224ee:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80224f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80224f6:	ea4b 0b00 	orr.w	fp, fp, r0
 80224fa:	3701      	adds	r7, #1
 80224fc:	f100 80d7 	bmi.w	80226ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022500:	42be      	cmp	r6, r7
 8022502:	f340 80d4 	ble.w	80226ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022506:	2900      	cmp	r1, #0
 8022508:	f000 80d4 	beq.w	80226b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 802250c:	3601      	adds	r6, #1
 802250e:	9801      	ldr	r0, [sp, #4]
 8022510:	f819 7006 	ldrb.w	r7, [r9, r6]
 8022514:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8022518:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802251c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8022520:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022524:	fb09 f906 	mul.w	r9, r9, r6
 8022528:	fb07 f800 	mul.w	r8, r7, r0
 802252c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8022530:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8022534:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8022538:	44d1      	add	r9, sl
 802253a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802253e:	f108 0020 	add.w	r0, r8, #32
 8022542:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022546:	0a00      	lsrs	r0, r0, #8
 8022548:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802254c:	4330      	orrs	r0, r6
 802254e:	b28e      	uxth	r6, r1
 8022550:	fa1f f98e 	uxth.w	r9, lr
 8022554:	fb06 f809 	mul.w	r8, r6, r9
 8022558:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802255c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8022560:	0136      	lsls	r6, r6, #4
 8022562:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022566:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802256a:	9601      	str	r6, [sp, #4]
 802256c:	ea4a 0404 	orr.w	r4, sl, r4
 8022570:	fa1f f689 	uxth.w	r6, r9
 8022574:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022578:	fb11 f90e 	smulbb	r9, r1, lr
 802257c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8022580:	9602      	str	r6, [sp, #8]
 8022582:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022586:	4626      	mov	r6, r4
 8022588:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802258c:	f1ce 0410 	rsb	r4, lr, #16
 8022590:	1a64      	subs	r4, r4, r1
 8022592:	ea4a 0202 	orr.w	r2, sl, r2
 8022596:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802259a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802259e:	434a      	muls	r2, r1
 80225a0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80225a4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80225a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80225ac:	fb04 2406 	mla	r4, r4, r6, r2
 80225b0:	ea4a 0000 	orr.w	r0, sl, r0
 80225b4:	fb09 4200 	mla	r2, r9, r0, r4
 80225b8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80225bc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80225c0:	9801      	ldr	r0, [sp, #4]
 80225c2:	9903      	ldr	r1, [sp, #12]
 80225c4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80225c8:	ea44 0b0b 	orr.w	fp, r4, fp
 80225cc:	9c02      	ldr	r4, [sp, #8]
 80225ce:	8809      	ldrh	r1, [r1, #0]
 80225d0:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80225d4:	1b00      	subs	r0, r0, r4
 80225d6:	9c01      	ldr	r4, [sp, #4]
 80225d8:	eba4 0608 	sub.w	r6, r4, r8
 80225dc:	b2b6      	uxth	r6, r6
 80225de:	b280      	uxth	r0, r0
 80225e0:	4373      	muls	r3, r6
 80225e2:	fb0c 3300 	mla	r3, ip, r0, r3
 80225e6:	9802      	ldr	r0, [sp, #8]
 80225e8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80225ec:	fb00 3505 	mla	r5, r0, r5, r3
 80225f0:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80225f4:	fb08 5707 	mla	r7, r8, r7, r5
 80225f8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80225fc:	120b      	asrs	r3, r1, #8
 80225fe:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022602:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8022606:	b2ff      	uxtb	r7, r7
 8022608:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802260c:	10c8      	asrs	r0, r1, #3
 802260e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022612:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022616:	00c9      	lsls	r1, r1, #3
 8022618:	437b      	muls	r3, r7
 802261a:	ea42 0e0e 	orr.w	lr, r2, lr
 802261e:	b2c9      	uxtb	r1, r1
 8022620:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022624:	fa1f f28e 	uxth.w	r2, lr
 8022628:	4378      	muls	r0, r7
 802262a:	434f      	muls	r7, r1
 802262c:	1c59      	adds	r1, r3, #1
 802262e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022632:	1213      	asrs	r3, r2, #8
 8022634:	f023 0307 	bic.w	r3, r3, #7
 8022638:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802263c:	1c41      	adds	r1, r0, #1
 802263e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022642:	10d1      	asrs	r1, r2, #3
 8022644:	f021 0103 	bic.w	r1, r1, #3
 8022648:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802264c:	021b      	lsls	r3, r3, #8
 802264e:	00c9      	lsls	r1, r1, #3
 8022650:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022654:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022658:	430b      	orrs	r3, r1
 802265a:	1c79      	adds	r1, r7, #1
 802265c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022660:	00d2      	lsls	r2, r2, #3
 8022662:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022666:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802266a:	431a      	orrs	r2, r3
 802266c:	9b03      	ldr	r3, [sp, #12]
 802266e:	801a      	strh	r2, [r3, #0]
 8022670:	b005      	add	sp, #20
 8022672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022676:	f04f 0c00 	mov.w	ip, #0
 802267a:	4664      	mov	r4, ip
 802267c:	e6e5      	b.n	802244a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802267e:	2300      	movs	r3, #0
 8022680:	469c      	mov	ip, r3
 8022682:	461a      	mov	r2, r3
 8022684:	461c      	mov	r4, r3
 8022686:	e707      	b.n	8022498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8022688:	2300      	movs	r3, #0
 802268a:	461a      	mov	r2, r3
 802268c:	e704      	b.n	8022498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802268e:	460b      	mov	r3, r1
 8022690:	460a      	mov	r2, r1
 8022692:	e701      	b.n	8022498 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8022694:	2500      	movs	r5, #0
 8022696:	46ab      	mov	fp, r5
 8022698:	e72f      	b.n	80224fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 802269a:	2700      	movs	r7, #0
 802269c:	463d      	mov	r5, r7
 802269e:	4638      	mov	r0, r7
 80226a0:	46bb      	mov	fp, r7
 80226a2:	e754      	b.n	802254e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80226a4:	4677      	mov	r7, lr
 80226a6:	4675      	mov	r5, lr
 80226a8:	4670      	mov	r0, lr
 80226aa:	46f3      	mov	fp, lr
 80226ac:	e74f      	b.n	802254e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80226ae:	2700      	movs	r7, #0
 80226b0:	4638      	mov	r0, r7
 80226b2:	e74c      	b.n	802254e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80226b4:	460f      	mov	r7, r1
 80226b6:	4608      	mov	r0, r1
 80226b8:	e749      	b.n	802254e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080226bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80226bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226c0:	b093      	sub	sp, #76	; 0x4c
 80226c2:	9210      	str	r2, [sp, #64]	; 0x40
 80226c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80226c6:	910e      	str	r1, [sp, #56]	; 0x38
 80226c8:	9306      	str	r3, [sp, #24]
 80226ca:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80226ce:	9011      	str	r0, [sp, #68]	; 0x44
 80226d0:	6850      	ldr	r0, [r2, #4]
 80226d2:	6812      	ldr	r2, [r2, #0]
 80226d4:	fb00 1303 	mla	r3, r0, r3, r1
 80226d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80226dc:	9307      	str	r3, [sp, #28]
 80226de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226e0:	681b      	ldr	r3, [r3, #0]
 80226e2:	9308      	str	r3, [sp, #32]
 80226e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226e6:	685b      	ldr	r3, [r3, #4]
 80226e8:	9309      	str	r3, [sp, #36]	; 0x24
 80226ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226ec:	2b00      	cmp	r3, #0
 80226ee:	dc03      	bgt.n	80226f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80226f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80226f2:	2b00      	cmp	r3, #0
 80226f4:	f340 83b4 	ble.w	8022e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80226f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80226fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022702:	1e48      	subs	r0, r1, #1
 8022704:	1e55      	subs	r5, r2, #1
 8022706:	9b06      	ldr	r3, [sp, #24]
 8022708:	2b00      	cmp	r3, #0
 802270a:	f340 8163 	ble.w	80229d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802270e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8022710:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022712:	1436      	asrs	r6, r6, #16
 8022714:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022718:	d406      	bmi.n	8022728 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802271a:	4286      	cmp	r6, r0
 802271c:	da04      	bge.n	8022728 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802271e:	2b00      	cmp	r3, #0
 8022720:	db02      	blt.n	8022728 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022722:	42ab      	cmp	r3, r5
 8022724:	f2c0 8157 	blt.w	80229d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022728:	3601      	adds	r6, #1
 802272a:	f100 8144 	bmi.w	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802272e:	42b1      	cmp	r1, r6
 8022730:	f2c0 8141 	blt.w	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022734:	3301      	adds	r3, #1
 8022736:	f100 813e 	bmi.w	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802273a:	429a      	cmp	r2, r3
 802273c:	f2c0 813b 	blt.w	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022740:	9b06      	ldr	r3, [sp, #24]
 8022742:	9f07      	ldr	r7, [sp, #28]
 8022744:	930f      	str	r3, [sp, #60]	; 0x3c
 8022746:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802274a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802274c:	2b00      	cmp	r3, #0
 802274e:	f340 8164 	ble.w	8022a1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8022752:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022754:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022756:	1418      	asrs	r0, r3, #16
 8022758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802275a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802275e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022760:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022764:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022766:	142d      	asrs	r5, r5, #16
 8022768:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802276c:	f100 81ee 	bmi.w	8022b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022770:	f102 3eff 	add.w	lr, r2, #4294967295
 8022774:	4575      	cmp	r5, lr
 8022776:	f280 81e9 	bge.w	8022b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802277a:	2800      	cmp	r0, #0
 802277c:	f2c0 81e6 	blt.w	8022b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022780:	f103 3eff 	add.w	lr, r3, #4294967295
 8022784:	4570      	cmp	r0, lr
 8022786:	f280 81e1 	bge.w	8022b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802278a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802278c:	b212      	sxth	r2, r2
 802278e:	fb00 5002 	mla	r0, r0, r2, r5
 8022792:	fa1f fe81 	uxth.w	lr, r1
 8022796:	eb03 0a00 	add.w	sl, r3, r0
 802279a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802279e:	f813 9000 	ldrb.w	r9, [r3, r0]
 80227a2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80227a6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80227aa:	b29b      	uxth	r3, r3
 80227ac:	f1bc 0f00 	cmp.w	ip, #0
 80227b0:	f000 8179 	beq.w	8022aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80227b4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80227b8:	940a      	str	r4, [sp, #40]	; 0x28
 80227ba:	eb0a 0b02 	add.w	fp, sl, r2
 80227be:	fa1f fa8c 	uxth.w	sl, ip
 80227c2:	fb0a fe0e 	mul.w	lr, sl, lr
 80227c6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80227ca:	fa1f fa8a 	uxth.w	sl, sl
 80227ce:	eba5 050e 	sub.w	r5, r5, lr
 80227d2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80227d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80227d8:	eba3 030a 	sub.w	r3, r3, sl
 80227dc:	b2ad      	uxth	r5, r5
 80227de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80227e0:	b29b      	uxth	r3, r3
 80227e2:	fb08 f505 	mul.w	r5, r8, r5
 80227e6:	fb09 5303 	mla	r3, r9, r3, r5
 80227ea:	fb0a 3304 	mla	r3, sl, r4, r3
 80227ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80227f0:	fb0e 3304 	mla	r3, lr, r4, r3
 80227f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80227f8:	2b00      	cmp	r3, #0
 80227fa:	f000 80cf 	beq.w	802299c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80227fe:	9c08      	ldr	r4, [sp, #32]
 8022800:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022804:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8022808:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802280c:	f000 8150 	beq.w	8022ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022810:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022814:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022818:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802281c:	fb09 f000 	mul.w	r0, r9, r0
 8022820:	fb0a fe0e 	mul.w	lr, sl, lr
 8022824:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8022828:	f100 0b20 	add.w	fp, r0, #32
 802282c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022830:	44ce      	add	lr, r9
 8022832:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8022836:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802283a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802283e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022842:	ea4e 0909 	orr.w	r9, lr, r9
 8022846:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802284a:	8868      	ldrh	r0, [r5, #2]
 802284c:	d019      	beq.n	8022882 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802284e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022852:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022856:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802285a:	fb08 f800 	mul.w	r8, r8, r0
 802285e:	fb0a fe0e 	mul.w	lr, sl, lr
 8022862:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8022866:	f108 0b20 	add.w	fp, r8, #32
 802286a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802286e:	4486      	add	lr, r0
 8022870:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8022874:	0a00      	lsrs	r0, r0, #8
 8022876:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802287a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802287e:	ea4e 0000 	orr.w	r0, lr, r0
 8022882:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8022886:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802288a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802288e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022892:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022896:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802289a:	ea4e 0909 	orr.w	r9, lr, r9
 802289e:	ea4a 0000 	orr.w	r0, sl, r0
 80228a2:	f1bc 0f00 	cmp.w	ip, #0
 80228a6:	f000 8105 	beq.w	8022ab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80228aa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80228ae:	3a01      	subs	r2, #1
 80228b0:	0052      	lsls	r2, r2, #1
 80228b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80228b4:	3202      	adds	r2, #2
 80228b6:	2cff      	cmp	r4, #255	; 0xff
 80228b8:	eb05 0e02 	add.w	lr, r5, r2
 80228bc:	5aaa      	ldrh	r2, [r5, r2]
 80228be:	d018      	beq.n	80228f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80228c0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80228c4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80228c8:	fb04 fa02 	mul.w	sl, r4, r2
 80228cc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80228d0:	fb08 f805 	mul.w	r8, r8, r5
 80228d4:	f10a 0520 	add.w	r5, sl, #32
 80228d8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80228dc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80228e0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80228e4:	4442      	add	r2, r8
 80228e6:	0a2d      	lsrs	r5, r5, #8
 80228e8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80228ec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80228f0:	432a      	orrs	r2, r5
 80228f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80228f4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80228f8:	2cff      	cmp	r4, #255	; 0xff
 80228fa:	d01a      	beq.n	8022932 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80228fc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022900:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022904:	fb04 fa05 	mul.w	sl, r4, r5
 8022908:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802290c:	fb08 f80e 	mul.w	r8, r8, lr
 8022910:	f10a 0e20 	add.w	lr, sl, #32
 8022914:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8022918:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802291c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022920:	4445      	add	r5, r8
 8022922:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022926:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802292a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802292e:	ea45 050e 	orr.w	r5, r5, lr
 8022932:	fb1c fe01 	smulbb	lr, ip, r1
 8022936:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802293a:	f1cc 0810 	rsb	r8, ip, #16
 802293e:	eba8 0801 	sub.w	r8, r8, r1
 8022942:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022946:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802294a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802294e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022952:	4341      	muls	r1, r0
 8022954:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022958:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802295c:	ea4a 0202 	orr.w	r2, sl, r2
 8022960:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022964:	fb09 1108 	mla	r1, r9, r8, r1
 8022968:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802296c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022970:	fb0c 1102 	mla	r1, ip, r2, r1
 8022974:	ea4b 0505 	orr.w	r5, fp, r5
 8022978:	fb0e 1e05 	mla	lr, lr, r5, r1
 802297c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022980:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022984:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022988:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802298c:	ea42 0e0e 	orr.w	lr, r2, lr
 8022990:	fa1f f28e 	uxth.w	r2, lr
 8022994:	2bff      	cmp	r3, #255	; 0xff
 8022996:	f040 80a1 	bne.w	8022adc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802299a:	803a      	strh	r2, [r7, #0]
 802299c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802299e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80229a0:	4413      	add	r3, r2
 80229a2:	931d      	str	r3, [sp, #116]	; 0x74
 80229a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80229a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229a8:	441a      	add	r2, r3
 80229aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80229ac:	921e      	str	r2, [sp, #120]	; 0x78
 80229ae:	3b01      	subs	r3, #1
 80229b0:	3702      	adds	r7, #2
 80229b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80229b4:	e6c9      	b.n	802274a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80229b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80229b8:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80229ba:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80229bc:	4433      	add	r3, r6
 80229be:	931d      	str	r3, [sp, #116]	; 0x74
 80229c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229c2:	441c      	add	r4, r3
 80229c4:	9b06      	ldr	r3, [sp, #24]
 80229c6:	941e      	str	r4, [sp, #120]	; 0x78
 80229c8:	3b01      	subs	r3, #1
 80229ca:	9306      	str	r3, [sp, #24]
 80229cc:	9b07      	ldr	r3, [sp, #28]
 80229ce:	3302      	adds	r3, #2
 80229d0:	9307      	str	r3, [sp, #28]
 80229d2:	e698      	b.n	8022706 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80229d4:	d028      	beq.n	8022a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80229d6:	9b06      	ldr	r3, [sp, #24]
 80229d8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80229da:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80229dc:	3b01      	subs	r3, #1
 80229de:	fb00 5003 	mla	r0, r0, r3, r5
 80229e2:	1400      	asrs	r0, r0, #16
 80229e4:	f53f aeac 	bmi.w	8022740 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80229e8:	3901      	subs	r1, #1
 80229ea:	4288      	cmp	r0, r1
 80229ec:	f6bf aea8 	bge.w	8022740 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80229f0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80229f2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80229f4:	fb01 0303 	mla	r3, r1, r3, r0
 80229f8:	141b      	asrs	r3, r3, #16
 80229fa:	f53f aea1 	bmi.w	8022740 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80229fe:	3a01      	subs	r2, #1
 8022a00:	4293      	cmp	r3, r2
 8022a02:	f6bf ae9d 	bge.w	8022740 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022a06:	9b06      	ldr	r3, [sp, #24]
 8022a08:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8022a0e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022a14:	2b00      	cmp	r3, #0
 8022a16:	f300 80b6 	bgt.w	8022b86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8022a1a:	9b06      	ldr	r3, [sp, #24]
 8022a1c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a20:	9b07      	ldr	r3, [sp, #28]
 8022a22:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022a26:	9307      	str	r3, [sp, #28]
 8022a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	f340 8218 	ble.w	8022e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022a30:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a42:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a4a:	eef0 6a62 	vmov.f32	s13, s5
 8022a4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a56:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a5a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022a5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a62:	eef0 6a43 	vmov.f32	s13, s6
 8022a66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a6a:	ee12 2a90 	vmov	r2, s5
 8022a6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a76:	ee13 2a10 	vmov	r2, s6
 8022a7a:	931f      	str	r3, [sp, #124]	; 0x7c
 8022a7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a82:	9320      	str	r3, [sp, #128]	; 0x80
 8022a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a88:	3b01      	subs	r3, #1
 8022a8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a8e:	930e      	str	r3, [sp, #56]	; 0x38
 8022a90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a92:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8022a96:	bf08      	it	eq
 8022a98:	4613      	moveq	r3, r2
 8022a9a:	9306      	str	r3, [sp, #24]
 8022a9c:	eeb0 3a67 	vmov.f32	s6, s15
 8022aa0:	eef0 2a47 	vmov.f32	s5, s14
 8022aa4:	e621      	b.n	80226ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022aa6:	fb08 f505 	mul.w	r5, r8, r5
 8022aaa:	fb09 5303 	mla	r3, r9, r3, r5
 8022aae:	e6a1      	b.n	80227f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022ab0:	4681      	mov	r9, r0
 8022ab2:	e6c8      	b.n	8022846 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022ab4:	f1c1 0210 	rsb	r2, r1, #16
 8022ab8:	4341      	muls	r1, r0
 8022aba:	fb09 1902 	mla	r9, r9, r2, r1
 8022abe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022ac2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8022ac6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022aca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022ace:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022ad2:	ea42 0909 	orr.w	r9, r2, r9
 8022ad6:	fa1f f289 	uxth.w	r2, r9
 8022ada:	e75b      	b.n	8022994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022adc:	f8b7 c000 	ldrh.w	ip, [r7]
 8022ae0:	43db      	mvns	r3, r3
 8022ae2:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022ae6:	fa5f fe83 	uxtb.w	lr, r3
 8022aea:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022aee:	fb00 f00e 	mul.w	r0, r0, lr
 8022af2:	1c41      	adds	r1, r0, #1
 8022af4:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022af8:	1211      	asrs	r1, r2, #8
 8022afa:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022afe:	f021 0107 	bic.w	r1, r1, #7
 8022b02:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022b06:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022b0a:	48d7      	ldr	r0, [pc, #860]	; (8022e68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022b0c:	fb05 f50e 	mul.w	r5, r5, lr
 8022b10:	b2c9      	uxtb	r1, r1
 8022b12:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8022b16:	1c69      	adds	r1, r5, #1
 8022b18:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022b1c:	10d1      	asrs	r1, r2, #3
 8022b1e:	f021 0103 	bic.w	r1, r1, #3
 8022b22:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022b26:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022b2a:	b2db      	uxtb	r3, r3
 8022b2c:	00c9      	lsls	r1, r1, #3
 8022b2e:	fb03 f30e 	mul.w	r3, r3, lr
 8022b32:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022b36:	4301      	orrs	r1, r0
 8022b38:	1c58      	adds	r0, r3, #1
 8022b3a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022b3e:	00d2      	lsls	r2, r2, #3
 8022b40:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022b44:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022b48:	430a      	orrs	r2, r1
 8022b4a:	e726      	b.n	802299a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8022b4c:	f115 0e01 	adds.w	lr, r5, #1
 8022b50:	f53f af24 	bmi.w	802299c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b54:	4572      	cmp	r2, lr
 8022b56:	f6ff af21 	blt.w	802299c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b5a:	f110 0e01 	adds.w	lr, r0, #1
 8022b5e:	f53f af1d 	bmi.w	802299c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b62:	4573      	cmp	r3, lr
 8022b64:	f6ff af1a 	blt.w	802299c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b68:	b21b      	sxth	r3, r3
 8022b6a:	b212      	sxth	r2, r2
 8022b6c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022b70:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8022b74:	9301      	str	r3, [sp, #4]
 8022b76:	9200      	str	r2, [sp, #0]
 8022b78:	4639      	mov	r1, r7
 8022b7a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8022b7e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022b80:	f7ff fc24 	bl	80223cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022b84:	e70a      	b.n	802299c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022b88:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022b8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022b8e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022b92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022b94:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022b9a:	141f      	asrs	r7, r3, #16
 8022b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022b9e:	141b      	asrs	r3, r3, #16
 8022ba0:	fb01 3707 	mla	r7, r1, r7, r3
 8022ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ba6:	fa1f fc82 	uxth.w	ip, r2
 8022baa:	eb03 0a07 	add.w	sl, r3, r7
 8022bae:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022bb2:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022bb6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022bba:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022bbe:	b29b      	uxth	r3, r3
 8022bc0:	2d00      	cmp	r5, #0
 8022bc2:	f000 80fe 	beq.w	8022dc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022bc6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8022bca:	940c      	str	r4, [sp, #48]	; 0x30
 8022bcc:	eb0a 0b01 	add.w	fp, sl, r1
 8022bd0:	fa1f fa85 	uxth.w	sl, r5
 8022bd4:	fb0a fc0c 	mul.w	ip, sl, ip
 8022bd8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022bdc:	fa1f fa8a 	uxth.w	sl, sl
 8022be0:	eba0 000c 	sub.w	r0, r0, ip
 8022be4:	eba3 030a 	sub.w	r3, r3, sl
 8022be8:	b280      	uxth	r0, r0
 8022bea:	fb08 f000 	mul.w	r0, r8, r0
 8022bee:	b29b      	uxth	r3, r3
 8022bf0:	fb09 0303 	mla	r3, r9, r3, r0
 8022bf4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022bf6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022bfa:	940d      	str	r4, [sp, #52]	; 0x34
 8022bfc:	fb0a 3300 	mla	r3, sl, r0, r3
 8022c00:	fb0c 3304 	mla	r3, ip, r4, r3
 8022c04:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022c08:	2b00      	cmp	r3, #0
 8022c0a:	f000 80cc 	beq.w	8022da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022c0e:	9808      	ldr	r0, [sp, #32]
 8022c10:	9c08      	ldr	r4, [sp, #32]
 8022c12:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022c16:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022c1a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022c1e:	f000 80d5 	beq.w	8022dcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022c22:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022c26:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022c2a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022c2e:	fb09 f707 	mul.w	r7, r9, r7
 8022c32:	fb0a fc0c 	mul.w	ip, sl, ip
 8022c36:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022c3a:	f107 0b20 	add.w	fp, r7, #32
 8022c3e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022c42:	44cc      	add	ip, r9
 8022c44:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022c48:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022c4c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022c50:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022c54:	ea4c 0909 	orr.w	r9, ip, r9
 8022c58:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022c5c:	8847      	ldrh	r7, [r0, #2]
 8022c5e:	d019      	beq.n	8022c94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8022c60:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022c64:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022c68:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022c6c:	fb08 f807 	mul.w	r8, r8, r7
 8022c70:	fb0a fc0c 	mul.w	ip, sl, ip
 8022c74:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022c78:	f108 0b20 	add.w	fp, r8, #32
 8022c7c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022c80:	44bc      	add	ip, r7
 8022c82:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022c86:	0a3f      	lsrs	r7, r7, #8
 8022c88:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022c8c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022c90:	ea4c 0707 	orr.w	r7, ip, r7
 8022c94:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022c98:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022c9c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022ca0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022ca4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022ca8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022cac:	ea4c 0909 	orr.w	r9, ip, r9
 8022cb0:	ea4a 0707 	orr.w	r7, sl, r7
 8022cb4:	2d00      	cmp	r5, #0
 8022cb6:	f000 808b 	beq.w	8022dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8022cba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022cbe:	3901      	subs	r1, #1
 8022cc0:	0049      	lsls	r1, r1, #1
 8022cc2:	3102      	adds	r1, #2
 8022cc4:	eb00 0c01 	add.w	ip, r0, r1
 8022cc8:	5a41      	ldrh	r1, [r0, r1]
 8022cca:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022ccc:	28ff      	cmp	r0, #255	; 0xff
 8022cce:	d019      	beq.n	8022d04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8022cd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022cd2:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022cd6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022cda:	fb04 fa01 	mul.w	sl, r4, r1
 8022cde:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022ce2:	fb08 f800 	mul.w	r8, r8, r0
 8022ce6:	f10a 0020 	add.w	r0, sl, #32
 8022cea:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022cee:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022cf2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022cf6:	4441      	add	r1, r8
 8022cf8:	0a00      	lsrs	r0, r0, #8
 8022cfa:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022cfe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022d02:	4301      	orrs	r1, r0
 8022d04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022d06:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022d0a:	2cff      	cmp	r4, #255	; 0xff
 8022d0c:	d01a      	beq.n	8022d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8022d0e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022d12:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022d16:	fb04 fa00 	mul.w	sl, r4, r0
 8022d1a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022d1e:	fb08 f80c 	mul.w	r8, r8, ip
 8022d22:	f10a 0c20 	add.w	ip, sl, #32
 8022d26:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022d2a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022d2e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022d32:	4440      	add	r0, r8
 8022d34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d38:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022d3c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022d40:	ea40 000c 	orr.w	r0, r0, ip
 8022d44:	fb15 fc02 	smulbb	ip, r5, r2
 8022d48:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022d4c:	f1c5 0810 	rsb	r8, r5, #16
 8022d50:	eba8 0802 	sub.w	r8, r8, r2
 8022d54:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022d58:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022d5c:	437a      	muls	r2, r7
 8022d5e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022d62:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022d66:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022d6a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022d6e:	fb09 2208 	mla	r2, r9, r8, r2
 8022d72:	ea4a 0101 	orr.w	r1, sl, r1
 8022d76:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022d7a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022d7e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022d82:	fb05 2201 	mla	r2, r5, r1, r2
 8022d86:	ea4b 0000 	orr.w	r0, fp, r0
 8022d8a:	fb0c 2200 	mla	r2, ip, r0, r2
 8022d8e:	0d57      	lsrs	r7, r2, #21
 8022d90:	0952      	lsrs	r2, r2, #5
 8022d92:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022d96:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022d9a:	433a      	orrs	r2, r7
 8022d9c:	2bff      	cmp	r3, #255	; 0xff
 8022d9e:	b292      	uxth	r2, r2
 8022da0:	d127      	bne.n	8022df2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8022da2:	f8ae 2000 	strh.w	r2, [lr]
 8022da6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022da8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022daa:	4413      	add	r3, r2
 8022dac:	931d      	str	r3, [sp, #116]	; 0x74
 8022dae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022db0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022db2:	441a      	add	r2, r3
 8022db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022db6:	921e      	str	r2, [sp, #120]	; 0x78
 8022db8:	3b01      	subs	r3, #1
 8022dba:	f10e 0e02 	add.w	lr, lr, #2
 8022dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8022dc0:	e627      	b.n	8022a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022dc2:	fb08 f000 	mul.w	r0, r8, r0
 8022dc6:	fb09 0303 	mla	r3, r9, r3, r0
 8022dca:	e71b      	b.n	8022c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8022dcc:	46b9      	mov	r9, r7
 8022dce:	e743      	b.n	8022c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8022dd0:	f1c2 0110 	rsb	r1, r2, #16
 8022dd4:	437a      	muls	r2, r7
 8022dd6:	fb09 2901 	mla	r9, r9, r1, r2
 8022dda:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022dde:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022de2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022de6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022dea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022dee:	4302      	orrs	r2, r0
 8022df0:	e7d4      	b.n	8022d9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8022df2:	f8be 7000 	ldrh.w	r7, [lr]
 8022df6:	4c1c      	ldr	r4, [pc, #112]	; (8022e68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022df8:	43db      	mvns	r3, r3
 8022dfa:	1238      	asrs	r0, r7, #8
 8022dfc:	fa5f fc83 	uxtb.w	ip, r3
 8022e00:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022e04:	10fd      	asrs	r5, r7, #3
 8022e06:	fb00 f00c 	mul.w	r0, r0, ip
 8022e0a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022e0e:	fb05 f10c 	mul.w	r1, r5, ip
 8022e12:	1c45      	adds	r5, r0, #1
 8022e14:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022e18:	1215      	asrs	r5, r2, #8
 8022e1a:	f025 0507 	bic.w	r5, r5, #7
 8022e1e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022e22:	1c4d      	adds	r5, r1, #1
 8022e24:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022e28:	10d1      	asrs	r1, r2, #3
 8022e2a:	f021 0103 	bic.w	r1, r1, #3
 8022e2e:	00fb      	lsls	r3, r7, #3
 8022e30:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022e34:	b2db      	uxtb	r3, r3
 8022e36:	b2c0      	uxtb	r0, r0
 8022e38:	00c9      	lsls	r1, r1, #3
 8022e3a:	fb03 f30c 	mul.w	r3, r3, ip
 8022e3e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022e42:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8022e46:	4308      	orrs	r0, r1
 8022e48:	1c59      	adds	r1, r3, #1
 8022e4a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022e4e:	00d2      	lsls	r2, r2, #3
 8022e50:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022e54:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8022e58:	4318      	orrs	r0, r3
 8022e5a:	f8ae 0000 	strh.w	r0, [lr]
 8022e5e:	e7a2      	b.n	8022da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022e60:	b013      	add	sp, #76	; 0x4c
 8022e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e66:	bf00      	nop
 8022e68:	fffff800 	.word	0xfffff800

08022e6c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e70:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8022e74:	fb05 4c03 	mla	ip, r5, r3, r4
 8022e78:	2d00      	cmp	r5, #0
 8022e7a:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8022e7e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8022e82:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8022e86:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022e8a:	8808      	ldrh	r0, [r1, #0]
 8022e8c:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022e90:	f2c0 80a7 	blt.w	8022fe2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022e94:	45aa      	cmp	sl, r5
 8022e96:	f340 80a4 	ble.w	8022fe2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022e9a:	2c00      	cmp	r4, #0
 8022e9c:	f2c0 809f 	blt.w	8022fde <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022ea0:	42a3      	cmp	r3, r4
 8022ea2:	f340 809c 	ble.w	8022fde <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022ea6:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8022eaa:	1c62      	adds	r2, r4, #1
 8022eac:	f100 809c 	bmi.w	8022fe8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022eb0:	4293      	cmp	r3, r2
 8022eb2:	f340 8099 	ble.w	8022fe8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022eb6:	f1b9 0f00 	cmp.w	r9, #0
 8022eba:	f000 8095 	beq.w	8022fe8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022ebe:	f8be c002 	ldrh.w	ip, [lr, #2]
 8022ec2:	3501      	adds	r5, #1
 8022ec4:	f100 8094 	bmi.w	8022ff0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022ec8:	45aa      	cmp	sl, r5
 8022eca:	f340 8091 	ble.w	8022ff0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022ece:	2f00      	cmp	r7, #0
 8022ed0:	f000 808e 	beq.w	8022ff0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022ed4:	2c00      	cmp	r4, #0
 8022ed6:	f2c0 8089 	blt.w	8022fec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022eda:	42a3      	cmp	r3, r4
 8022edc:	f340 8086 	ble.w	8022fec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022ee0:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8022ee4:	3401      	adds	r4, #1
 8022ee6:	f100 8086 	bmi.w	8022ff6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022eea:	42a3      	cmp	r3, r4
 8022eec:	f340 8083 	ble.w	8022ff6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022ef0:	f1b9 0f00 	cmp.w	r9, #0
 8022ef4:	d07f      	beq.n	8022ff6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022ef6:	3301      	adds	r3, #1
 8022ef8:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8022efc:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022f00:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022f04:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022f08:	fb19 fe07 	smulbb	lr, r9, r7
 8022f0c:	ea44 0808 	orr.w	r8, r4, r8
 8022f10:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022f14:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022f18:	f1c7 0210 	rsb	r2, r7, #16
 8022f1c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022f20:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022f24:	ea44 0c0c 	orr.w	ip, r4, ip
 8022f28:	eba2 0209 	sub.w	r2, r2, r9
 8022f2c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022f30:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022f34:	fb04 f40c 	mul.w	r4, r4, ip
 8022f38:	fb02 4808 	mla	r8, r2, r8, r4
 8022f3c:	041a      	lsls	r2, r3, #16
 8022f3e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022f42:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022f46:	4313      	orrs	r3, r2
 8022f48:	042a      	lsls	r2, r5, #16
 8022f4a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022f4e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022f52:	fb0e 8303 	mla	r3, lr, r3, r8
 8022f56:	432a      	orrs	r2, r5
 8022f58:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022f5c:	fb07 3202 	mla	r2, r7, r2, r3
 8022f60:	0d53      	lsrs	r3, r2, #21
 8022f62:	0952      	lsrs	r2, r2, #5
 8022f64:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022f68:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022f6c:	431a      	orrs	r2, r3
 8022f6e:	b293      	uxth	r3, r2
 8022f70:	b2b4      	uxth	r4, r6
 8022f72:	1202      	asrs	r2, r0, #8
 8022f74:	43f6      	mvns	r6, r6
 8022f76:	b2f6      	uxtb	r6, r6
 8022f78:	121d      	asrs	r5, r3, #8
 8022f7a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022f7e:	fb12 f206 	smulbb	r2, r2, r6
 8022f82:	10c7      	asrs	r7, r0, #3
 8022f84:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022f88:	00c0      	lsls	r0, r0, #3
 8022f8a:	fb05 2504 	mla	r5, r5, r4, r2
 8022f8e:	b2c0      	uxtb	r0, r0
 8022f90:	10da      	asrs	r2, r3, #3
 8022f92:	00db      	lsls	r3, r3, #3
 8022f94:	b2db      	uxtb	r3, r3
 8022f96:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022f9a:	fb10 f006 	smulbb	r0, r0, r6
 8022f9e:	b2ad      	uxth	r5, r5
 8022fa0:	fb03 0004 	mla	r0, r3, r4, r0
 8022fa4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022fa8:	fb17 f706 	smulbb	r7, r7, r6
 8022fac:	b280      	uxth	r0, r0
 8022fae:	1c6b      	adds	r3, r5, #1
 8022fb0:	fb02 7204 	mla	r2, r2, r4, r7
 8022fb4:	b292      	uxth	r2, r2
 8022fb6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022fba:	1c43      	adds	r3, r0, #1
 8022fbc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022fc0:	1c50      	adds	r0, r2, #1
 8022fc2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022fc6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022fca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022fce:	0952      	lsrs	r2, r2, #5
 8022fd0:	432b      	orrs	r3, r5
 8022fd2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022fd6:	4313      	orrs	r3, r2
 8022fd8:	800b      	strh	r3, [r1, #0]
 8022fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022fde:	4680      	mov	r8, r0
 8022fe0:	e763      	b.n	8022eaa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8022fe2:	4684      	mov	ip, r0
 8022fe4:	4680      	mov	r8, r0
 8022fe6:	e76c      	b.n	8022ec2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022fe8:	4684      	mov	ip, r0
 8022fea:	e76a      	b.n	8022ec2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022fec:	4605      	mov	r5, r0
 8022fee:	e779      	b.n	8022ee4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8022ff0:	4603      	mov	r3, r0
 8022ff2:	4605      	mov	r5, r0
 8022ff4:	e782      	b.n	8022efc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8022ff6:	4603      	mov	r3, r0
 8022ff8:	e780      	b.n	8022efc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08022ffa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ffa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ffe:	b093      	sub	sp, #76	; 0x4c
 8023000:	461d      	mov	r5, r3
 8023002:	9210      	str	r2, [sp, #64]	; 0x40
 8023004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023006:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802300a:	920b      	str	r2, [sp, #44]	; 0x2c
 802300c:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8023010:	910a      	str	r1, [sp, #40]	; 0x28
 8023012:	6859      	ldr	r1, [r3, #4]
 8023014:	681b      	ldr	r3, [r3, #0]
 8023016:	9011      	str	r0, [sp, #68]	; 0x44
 8023018:	fb01 2707 	mla	r7, r1, r7, r2
 802301c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8023020:	9307      	str	r3, [sp, #28]
 8023022:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023024:	681b      	ldr	r3, [r3, #0]
 8023026:	9309      	str	r3, [sp, #36]	; 0x24
 8023028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802302a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802302e:	43db      	mvns	r3, r3
 8023030:	b2db      	uxtb	r3, r3
 8023032:	9308      	str	r3, [sp, #32]
 8023034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023036:	2b00      	cmp	r3, #0
 8023038:	dc03      	bgt.n	8023042 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802303a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802303c:	2b00      	cmp	r3, #0
 802303e:	f340 8203 	ble.w	8023448 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023042:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023044:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023048:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802304c:	1e48      	subs	r0, r1, #1
 802304e:	f102 3cff 	add.w	ip, r2, #4294967295
 8023052:	2d00      	cmp	r5, #0
 8023054:	f340 80da 	ble.w	802320c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023058:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802305c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023060:	d406      	bmi.n	8023070 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023062:	4586      	cmp	lr, r0
 8023064:	da04      	bge.n	8023070 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023066:	2b00      	cmp	r3, #0
 8023068:	db02      	blt.n	8023070 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802306a:	4563      	cmp	r3, ip
 802306c:	f2c0 80cf 	blt.w	802320e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023070:	f11e 0e01 	adds.w	lr, lr, #1
 8023074:	f100 80c1 	bmi.w	80231fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023078:	4571      	cmp	r1, lr
 802307a:	f2c0 80be 	blt.w	80231fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802307e:	3301      	adds	r3, #1
 8023080:	f100 80bb 	bmi.w	80231fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023084:	429a      	cmp	r2, r3
 8023086:	f2c0 80b8 	blt.w	80231fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802308a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802308e:	46a9      	mov	r9, r5
 8023090:	f1b9 0f00 	cmp.w	r9, #0
 8023094:	f340 80d8 	ble.w	8023248 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023098:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802309a:	1421      	asrs	r1, r4, #16
 802309c:	ea4f 4026 	mov.w	r0, r6, asr #16
 80230a0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80230a4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80230a8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80230ac:	f100 8111 	bmi.w	80232d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80230b0:	f10e 3aff 	add.w	sl, lr, #4294967295
 80230b4:	4551      	cmp	r1, sl
 80230b6:	f280 810c 	bge.w	80232d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80230ba:	2800      	cmp	r0, #0
 80230bc:	f2c0 8109 	blt.w	80232d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80230c0:	f103 3aff 	add.w	sl, r3, #4294967295
 80230c4:	4550      	cmp	r0, sl
 80230c6:	f280 8104 	bge.w	80232d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80230ca:	fa0f f38e 	sxth.w	r3, lr
 80230ce:	fb00 1103 	mla	r1, r0, r3, r1
 80230d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80230d4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80230d8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80230dc:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80230e0:	f1bc 0f00 	cmp.w	ip, #0
 80230e4:	d007      	beq.n	80230f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80230e6:	005b      	lsls	r3, r3, #1
 80230e8:	eb0a 0003 	add.w	r0, sl, r3
 80230ec:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80230f0:	930c      	str	r3, [sp, #48]	; 0x30
 80230f2:	8843      	ldrh	r3, [r0, #2]
 80230f4:	930d      	str	r3, [sp, #52]	; 0x34
 80230f6:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80230fa:	fb12 f30c 	smulbb	r3, r2, ip
 80230fe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023102:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023106:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802310a:	10db      	asrs	r3, r3, #3
 802310c:	ea40 000e 	orr.w	r0, r0, lr
 8023110:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023114:	f1cc 0e10 	rsb	lr, ip, #16
 8023118:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802311c:	ebae 0e02 	sub.w	lr, lr, r2
 8023120:	ea4a 0101 	orr.w	r1, sl, r1
 8023124:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023128:	4351      	muls	r1, r2
 802312a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802312c:	9f08      	ldr	r7, [sp, #32]
 802312e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023132:	fb0e 1e00 	mla	lr, lr, r0, r1
 8023136:	0410      	lsls	r0, r2, #16
 8023138:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802313c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023140:	4310      	orrs	r0, r2
 8023142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023144:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023146:	0412      	lsls	r2, r2, #16
 8023148:	fb03 e000 	mla	r0, r3, r0, lr
 802314c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023150:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8023154:	ea42 020e 	orr.w	r2, r2, lr
 8023158:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802315c:	fb03 0302 	mla	r3, r3, r2, r0
 8023160:	0d5a      	lsrs	r2, r3, #21
 8023162:	095b      	lsrs	r3, r3, #5
 8023164:	f8b8 0000 	ldrh.w	r0, [r8]
 8023168:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802316c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023170:	4313      	orrs	r3, r2
 8023172:	b29b      	uxth	r3, r3
 8023174:	1201      	asrs	r1, r0, #8
 8023176:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802317a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802317e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023182:	fb11 f107 	smulbb	r1, r1, r7
 8023186:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802318a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802318e:	00c0      	lsls	r0, r0, #3
 8023190:	fb0c 1c02 	mla	ip, ip, r2, r1
 8023194:	b2c0      	uxtb	r0, r0
 8023196:	10d9      	asrs	r1, r3, #3
 8023198:	00db      	lsls	r3, r3, #3
 802319a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802319e:	b2db      	uxtb	r3, r3
 80231a0:	fb10 f007 	smulbb	r0, r0, r7
 80231a4:	fa1f fc8c 	uxth.w	ip, ip
 80231a8:	fb03 0302 	mla	r3, r3, r2, r0
 80231ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80231b0:	fb1e fe07 	smulbb	lr, lr, r7
 80231b4:	fb01 e102 	mla	r1, r1, r2, lr
 80231b8:	b29a      	uxth	r2, r3
 80231ba:	f10c 0301 	add.w	r3, ip, #1
 80231be:	b289      	uxth	r1, r1
 80231c0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80231c4:	1c53      	adds	r3, r2, #1
 80231c6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80231ca:	1c4a      	adds	r2, r1, #1
 80231cc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80231d0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80231d4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80231d8:	0949      	lsrs	r1, r1, #5
 80231da:	ea43 030c 	orr.w	r3, r3, ip
 80231de:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80231e2:	430b      	orrs	r3, r1
 80231e4:	f8a8 3000 	strh.w	r3, [r8]
 80231e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80231ea:	441c      	add	r4, r3
 80231ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80231ee:	f108 0802 	add.w	r8, r8, #2
 80231f2:	441e      	add	r6, r3
 80231f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80231f8:	e74a      	b.n	8023090 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80231fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80231fc:	441c      	add	r4, r3
 80231fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023200:	441e      	add	r6, r3
 8023202:	9b07      	ldr	r3, [sp, #28]
 8023204:	3302      	adds	r3, #2
 8023206:	3d01      	subs	r5, #1
 8023208:	9307      	str	r3, [sp, #28]
 802320a:	e722      	b.n	8023052 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802320c:	d022      	beq.n	8023254 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802320e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023210:	1e6b      	subs	r3, r5, #1
 8023212:	fb00 4003 	mla	r0, r0, r3, r4
 8023216:	1400      	asrs	r0, r0, #16
 8023218:	f53f af37 	bmi.w	802308a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802321c:	3901      	subs	r1, #1
 802321e:	4288      	cmp	r0, r1
 8023220:	f6bf af33 	bge.w	802308a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023224:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023226:	fb01 6303 	mla	r3, r1, r3, r6
 802322a:	141b      	asrs	r3, r3, #16
 802322c:	f53f af2d 	bmi.w	802308a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023230:	3a01      	subs	r2, #1
 8023232:	4293      	cmp	r3, r2
 8023234:	f6bf af29 	bge.w	802308a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023238:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802323c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8023240:	46a8      	mov	r8, r5
 8023242:	f1b8 0f00 	cmp.w	r8, #0
 8023246:	dc5e      	bgt.n	8023306 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023248:	9b07      	ldr	r3, [sp, #28]
 802324a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802324e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023252:	9307      	str	r3, [sp, #28]
 8023254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023256:	2b00      	cmp	r3, #0
 8023258:	f340 80f6 	ble.w	8023448 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802325c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023264:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023268:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802326a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802326e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023272:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023276:	eef0 6a62 	vmov.f32	s13, s5
 802327a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802327e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023282:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023286:	ee16 4a90 	vmov	r4, s13
 802328a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802328e:	eef0 6a43 	vmov.f32	s13, s6
 8023292:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023296:	ee12 2a90 	vmov	r2, s5
 802329a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802329e:	fb92 f3f3 	sdiv	r3, r2, r3
 80232a2:	ee13 2a10 	vmov	r2, s6
 80232a6:	931f      	str	r3, [sp, #124]	; 0x7c
 80232a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80232aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80232ae:	9320      	str	r3, [sp, #128]	; 0x80
 80232b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80232b4:	3b01      	subs	r3, #1
 80232b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232ba:	930a      	str	r3, [sp, #40]	; 0x28
 80232bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80232be:	ee16 6a90 	vmov	r6, s13
 80232c2:	bf14      	ite	ne
 80232c4:	461d      	movne	r5, r3
 80232c6:	4615      	moveq	r5, r2
 80232c8:	eeb0 3a67 	vmov.f32	s6, s15
 80232cc:	eef0 2a47 	vmov.f32	s5, s14
 80232d0:	e6b0      	b.n	8023034 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80232d2:	f111 0a01 	adds.w	sl, r1, #1
 80232d6:	d487      	bmi.n	80231e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80232d8:	45d6      	cmp	lr, sl
 80232da:	db85      	blt.n	80231e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80232dc:	f110 0a01 	adds.w	sl, r0, #1
 80232e0:	d482      	bmi.n	80231e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80232e2:	4553      	cmp	r3, sl
 80232e4:	db80      	blt.n	80231e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80232e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80232e8:	9101      	str	r1, [sp, #4]
 80232ea:	b21b      	sxth	r3, r3
 80232ec:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80232f0:	9300      	str	r3, [sp, #0]
 80232f2:	e9cd c704 	strd	ip, r7, [sp, #16]
 80232f6:	fa0f f38e 	sxth.w	r3, lr
 80232fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80232fe:	4641      	mov	r1, r8
 8023300:	f7ff fdb4 	bl	8022e6c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8023304:	e770      	b.n	80231e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023306:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023308:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802330a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802330e:	1430      	asrs	r0, r6, #16
 8023310:	1423      	asrs	r3, r4, #16
 8023312:	fb01 3000 	mla	r0, r1, r0, r3
 8023316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023318:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802331c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8023320:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023324:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023328:	8858      	ldrh	r0, [r3, #2]
 802332a:	f1be 0f00 	cmp.w	lr, #0
 802332e:	d00b      	beq.n	8023348 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8023330:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023334:	3901      	subs	r1, #1
 8023336:	0049      	lsls	r1, r1, #1
 8023338:	3102      	adds	r1, #2
 802333a:	eb03 0b01 	add.w	fp, r3, r1
 802333e:	5a5b      	ldrh	r3, [r3, r1]
 8023340:	930e      	str	r3, [sp, #56]	; 0x38
 8023342:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023346:	930f      	str	r3, [sp, #60]	; 0x3c
 8023348:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802334c:	fb12 f30e 	smulbb	r3, r2, lr
 8023350:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023354:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023358:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802335c:	10db      	asrs	r3, r3, #3
 802335e:	ea41 010c 	orr.w	r1, r1, ip
 8023362:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023366:	f1ce 0c10 	rsb	ip, lr, #16
 802336a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802336e:	ebac 0c02 	sub.w	ip, ip, r2
 8023372:	ea4b 0000 	orr.w	r0, fp, r0
 8023376:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802337a:	4350      	muls	r0, r2
 802337c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802337e:	9f08      	ldr	r7, [sp, #32]
 8023380:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023384:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023388:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802338c:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8023390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023392:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023394:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023398:	0412      	lsls	r2, r2, #16
 802339a:	ea4b 0101 	orr.w	r1, fp, r1
 802339e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80233a2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80233a6:	fb03 c101 	mla	r1, r3, r1, ip
 80233aa:	4302      	orrs	r2, r0
 80233ac:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80233b0:	fb03 1202 	mla	r2, r3, r2, r1
 80233b4:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80233b8:	0952      	lsrs	r2, r2, #5
 80233ba:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80233be:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80233c2:	f8b9 2000 	ldrh.w	r2, [r9]
 80233c6:	ea4b 0303 	orr.w	r3, fp, r3
 80233ca:	b29b      	uxth	r3, r3
 80233cc:	1211      	asrs	r1, r2, #8
 80233ce:	1218      	asrs	r0, r3, #8
 80233d0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80233d4:	fb11 f107 	smulbb	r1, r1, r7
 80233d8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80233dc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80233e0:	00d2      	lsls	r2, r2, #3
 80233e2:	fb00 100a 	mla	r0, r0, sl, r1
 80233e6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80233ea:	10d9      	asrs	r1, r3, #3
 80233ec:	b2d2      	uxtb	r2, r2
 80233ee:	00db      	lsls	r3, r3, #3
 80233f0:	fb1c fc07 	smulbb	ip, ip, r7
 80233f4:	fb12 f207 	smulbb	r2, r2, r7
 80233f8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80233fc:	b2db      	uxtb	r3, r3
 80233fe:	b280      	uxth	r0, r0
 8023400:	fb01 c10a 	mla	r1, r1, sl, ip
 8023404:	fb03 230a 	mla	r3, r3, sl, r2
 8023408:	b29b      	uxth	r3, r3
 802340a:	b289      	uxth	r1, r1
 802340c:	1c42      	adds	r2, r0, #1
 802340e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023412:	f101 0c01 	add.w	ip, r1, #1
 8023416:	1c5a      	adds	r2, r3, #1
 8023418:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802341c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023420:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023422:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023426:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802342a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802342e:	4310      	orrs	r0, r2
 8023430:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023434:	441c      	add	r4, r3
 8023436:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023438:	ea40 000c 	orr.w	r0, r0, ip
 802343c:	f829 0b02 	strh.w	r0, [r9], #2
 8023440:	441e      	add	r6, r3
 8023442:	f108 38ff 	add.w	r8, r8, #4294967295
 8023446:	e6fc      	b.n	8023242 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023448:	b013      	add	sp, #76	; 0x4c
 802344a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802344e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802344e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023452:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8023456:	fb0e 4703 	mla	r7, lr, r3, r4
 802345a:	f1be 0f00 	cmp.w	lr, #0
 802345e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8023462:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8023466:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 802346a:	8808      	ldrh	r0, [r1, #0]
 802346c:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8023470:	db60      	blt.n	8023534 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023472:	45f1      	cmp	r9, lr
 8023474:	dd5e      	ble.n	8023534 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023476:	2c00      	cmp	r4, #0
 8023478:	db5a      	blt.n	8023530 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802347a:	42a3      	cmp	r3, r4
 802347c:	dd58      	ble.n	8023530 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802347e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8023482:	1c62      	adds	r2, r4, #1
 8023484:	d459      	bmi.n	802353a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023486:	4293      	cmp	r3, r2
 8023488:	dd57      	ble.n	802353a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802348a:	2d00      	cmp	r5, #0
 802348c:	d055      	beq.n	802353a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802348e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8023492:	f11e 0e01 	adds.w	lr, lr, #1
 8023496:	d454      	bmi.n	8023542 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023498:	45f1      	cmp	r9, lr
 802349a:	dd52      	ble.n	8023542 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802349c:	2e00      	cmp	r6, #0
 802349e:	d050      	beq.n	8023542 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80234a0:	2c00      	cmp	r4, #0
 80234a2:	db4c      	blt.n	802353e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80234a4:	42a3      	cmp	r3, r4
 80234a6:	dd4a      	ble.n	802353e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80234a8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80234ac:	3401      	adds	r4, #1
 80234ae:	d405      	bmi.n	80234bc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80234b0:	42a3      	cmp	r3, r4
 80234b2:	dd03      	ble.n	80234bc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80234b4:	b115      	cbz	r5, 80234bc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80234b6:	3301      	adds	r3, #1
 80234b8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80234bc:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80234c0:	fb15 f406 	smulbb	r4, r5, r6
 80234c4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80234c8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80234cc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80234d0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80234d4:	ea43 0c0c 	orr.w	ip, r3, ip
 80234d8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80234dc:	f1c6 0310 	rsb	r3, r6, #16
 80234e0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80234e4:	1b5b      	subs	r3, r3, r5
 80234e6:	ea4e 0707 	orr.w	r7, lr, r7
 80234ea:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80234ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80234f2:	437d      	muls	r5, r7
 80234f4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80234f8:	0403      	lsls	r3, r0, #16
 80234fa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80234fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023502:	4318      	orrs	r0, r3
 8023504:	0413      	lsls	r3, r2, #16
 8023506:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802350a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802350e:	4313      	orrs	r3, r2
 8023510:	fb04 c000 	mla	r0, r4, r0, ip
 8023514:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8023518:	fb06 0003 	mla	r0, r6, r3, r0
 802351c:	0d43      	lsrs	r3, r0, #21
 802351e:	0940      	lsrs	r0, r0, #5
 8023520:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023524:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023528:	4318      	orrs	r0, r3
 802352a:	8008      	strh	r0, [r1, #0]
 802352c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023530:	4684      	mov	ip, r0
 8023532:	e7a6      	b.n	8023482 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8023534:	4607      	mov	r7, r0
 8023536:	4684      	mov	ip, r0
 8023538:	e7ab      	b.n	8023492 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802353a:	4607      	mov	r7, r0
 802353c:	e7a9      	b.n	8023492 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802353e:	4602      	mov	r2, r0
 8023540:	e7b4      	b.n	80234ac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8023542:	4602      	mov	r2, r0
 8023544:	e7ba      	b.n	80234bc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08023546 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802354a:	b08f      	sub	sp, #60	; 0x3c
 802354c:	461d      	mov	r5, r3
 802354e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023550:	920c      	str	r2, [sp, #48]	; 0x30
 8023552:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8023556:	9107      	str	r1, [sp, #28]
 8023558:	6859      	ldr	r1, [r3, #4]
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	900d      	str	r0, [sp, #52]	; 0x34
 802355e:	fb01 2707 	mla	r7, r1, r7, r2
 8023562:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8023566:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023568:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 802356c:	f8d3 8000 	ldr.w	r8, [r3]
 8023570:	9b07      	ldr	r3, [sp, #28]
 8023572:	2b00      	cmp	r3, #0
 8023574:	dc03      	bgt.n	802357e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023578:	2b00      	cmp	r3, #0
 802357a:	f340 8181 	ble.w	8023880 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802357e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023580:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023584:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023588:	1e48      	subs	r0, r1, #1
 802358a:	f102 3cff 	add.w	ip, r2, #4294967295
 802358e:	2d00      	cmp	r5, #0
 8023590:	f340 809b 	ble.w	80236ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8023594:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023598:	ea4f 4326 	mov.w	r3, r6, asr #16
 802359c:	d406      	bmi.n	80235ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802359e:	4586      	cmp	lr, r0
 80235a0:	da04      	bge.n	80235ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	db02      	blt.n	80235ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80235a6:	4563      	cmp	r3, ip
 80235a8:	f2c0 8090 	blt.w	80236cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80235ac:	f11e 0e01 	adds.w	lr, lr, #1
 80235b0:	f100 8084 	bmi.w	80236bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80235b4:	4571      	cmp	r1, lr
 80235b6:	f2c0 8081 	blt.w	80236bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80235ba:	3301      	adds	r3, #1
 80235bc:	d47e      	bmi.n	80236bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80235be:	429a      	cmp	r2, r3
 80235c0:	db7c      	blt.n	80236bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80235c2:	46aa      	mov	sl, r5
 80235c4:	46b9      	mov	r9, r7
 80235c6:	f1ba 0f00 	cmp.w	sl, #0
 80235ca:	f340 8099 	ble.w	8023700 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80235ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235d0:	1421      	asrs	r1, r4, #16
 80235d2:	ea4f 4026 	mov.w	r0, r6, asr #16
 80235d6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80235da:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80235de:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80235e2:	f100 80d0 	bmi.w	8023786 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80235e6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80235ea:	4559      	cmp	r1, fp
 80235ec:	f280 80cb 	bge.w	8023786 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80235f0:	2800      	cmp	r0, #0
 80235f2:	f2c0 80c8 	blt.w	8023786 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80235f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80235fa:	4558      	cmp	r0, fp
 80235fc:	f280 80c3 	bge.w	8023786 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023600:	fa0f fe8e 	sxth.w	lr, lr
 8023604:	fb00 110e 	mla	r1, r0, lr, r1
 8023608:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802360c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8023610:	8841      	ldrh	r1, [r0, #2]
 8023612:	f1bc 0f00 	cmp.w	ip, #0
 8023616:	d00b      	beq.n	8023630 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8023618:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802361c:	3b01      	subs	r3, #1
 802361e:	005b      	lsls	r3, r3, #1
 8023620:	3302      	adds	r3, #2
 8023622:	eb00 0e03 	add.w	lr, r0, r3
 8023626:	5ac3      	ldrh	r3, [r0, r3]
 8023628:	9308      	str	r3, [sp, #32]
 802362a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802362e:	9309      	str	r3, [sp, #36]	; 0x24
 8023630:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8023634:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023638:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802363c:	ea40 000b 	orr.w	r0, r0, fp
 8023640:	fb12 f30c 	smulbb	r3, r2, ip
 8023644:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023648:	10db      	asrs	r3, r3, #3
 802364a:	f1cc 0e10 	rsb	lr, ip, #16
 802364e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023652:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023656:	ebae 0e02 	sub.w	lr, lr, r2
 802365a:	ea4b 0101 	orr.w	r1, fp, r1
 802365e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023662:	4351      	muls	r1, r2
 8023664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023666:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802366a:	fb0e 1e00 	mla	lr, lr, r0, r1
 802366e:	0410      	lsls	r0, r2, #16
 8023670:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023674:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023678:	4310      	orrs	r0, r2
 802367a:	9a08      	ldr	r2, [sp, #32]
 802367c:	9908      	ldr	r1, [sp, #32]
 802367e:	0412      	lsls	r2, r2, #16
 8023680:	fb03 e000 	mla	r0, r3, r0, lr
 8023684:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023688:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802368c:	ea42 020e 	orr.w	r2, r2, lr
 8023690:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023694:	fb03 0302 	mla	r3, r3, r2, r0
 8023698:	0d5a      	lsrs	r2, r3, #21
 802369a:	095b      	lsrs	r3, r3, #5
 802369c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80236a0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80236a4:	4313      	orrs	r3, r2
 80236a6:	f8a9 3000 	strh.w	r3, [r9]
 80236aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80236ac:	441c      	add	r4, r3
 80236ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80236b0:	f109 0902 	add.w	r9, r9, #2
 80236b4:	441e      	add	r6, r3
 80236b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80236ba:	e784      	b.n	80235c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80236bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80236be:	441c      	add	r4, r3
 80236c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80236c2:	3d01      	subs	r5, #1
 80236c4:	441e      	add	r6, r3
 80236c6:	3702      	adds	r7, #2
 80236c8:	e761      	b.n	802358e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80236ca:	d01d      	beq.n	8023708 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80236cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80236ce:	1e6b      	subs	r3, r5, #1
 80236d0:	fb00 4003 	mla	r0, r0, r3, r4
 80236d4:	1400      	asrs	r0, r0, #16
 80236d6:	f53f af74 	bmi.w	80235c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80236da:	3901      	subs	r1, #1
 80236dc:	4288      	cmp	r0, r1
 80236de:	f6bf af70 	bge.w	80235c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80236e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80236e4:	fb01 6303 	mla	r3, r1, r3, r6
 80236e8:	141b      	asrs	r3, r3, #16
 80236ea:	f53f af6a 	bmi.w	80235c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80236ee:	3a01      	subs	r2, #1
 80236f0:	4293      	cmp	r3, r2
 80236f2:	f6bf af66 	bge.w	80235c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80236f6:	46a9      	mov	r9, r5
 80236f8:	46ba      	mov	sl, r7
 80236fa:	f1b9 0f00 	cmp.w	r9, #0
 80236fe:	dc5a      	bgt.n	80237b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8023700:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023704:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8023708:	9b07      	ldr	r3, [sp, #28]
 802370a:	2b00      	cmp	r3, #0
 802370c:	f340 80b8 	ble.w	8023880 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023710:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023718:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802371c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802371e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023722:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023726:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802372a:	eef0 6a62 	vmov.f32	s13, s5
 802372e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023732:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023736:	ee77 2a62 	vsub.f32	s5, s14, s5
 802373a:	ee16 4a90 	vmov	r4, s13
 802373e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023742:	eef0 6a43 	vmov.f32	s13, s6
 8023746:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802374a:	ee12 2a90 	vmov	r2, s5
 802374e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023752:	fb92 f3f3 	sdiv	r3, r2, r3
 8023756:	ee13 2a10 	vmov	r2, s6
 802375a:	931b      	str	r3, [sp, #108]	; 0x6c
 802375c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802375e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023762:	931c      	str	r3, [sp, #112]	; 0x70
 8023764:	9b07      	ldr	r3, [sp, #28]
 8023766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023768:	3b01      	subs	r3, #1
 802376a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802376e:	9307      	str	r3, [sp, #28]
 8023770:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023772:	ee16 6a90 	vmov	r6, s13
 8023776:	bf14      	ite	ne
 8023778:	461d      	movne	r5, r3
 802377a:	4615      	moveq	r5, r2
 802377c:	eeb0 3a67 	vmov.f32	s6, s15
 8023780:	eef0 2a47 	vmov.f32	s5, s14
 8023784:	e6f4      	b.n	8023570 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8023786:	f111 0b01 	adds.w	fp, r1, #1
 802378a:	d48e      	bmi.n	80236aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802378c:	45de      	cmp	lr, fp
 802378e:	db8c      	blt.n	80236aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023790:	f110 0b01 	adds.w	fp, r0, #1
 8023794:	d489      	bmi.n	80236aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023796:	455b      	cmp	r3, fp
 8023798:	db87      	blt.n	80236aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802379a:	b21b      	sxth	r3, r3
 802379c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80237a0:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80237a4:	9300      	str	r3, [sp, #0]
 80237a6:	4642      	mov	r2, r8
 80237a8:	fa0f f38e 	sxth.w	r3, lr
 80237ac:	4649      	mov	r1, r9
 80237ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80237b0:	f7ff fe4d 	bl	802344e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80237b4:	e779      	b.n	80236aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80237b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80237b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80237bc:	1420      	asrs	r0, r4, #16
 80237be:	1431      	asrs	r1, r6, #16
 80237c0:	fb03 0101 	mla	r1, r3, r1, r0
 80237c4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80237c8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80237cc:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80237d0:	8841      	ldrh	r1, [r0, #2]
 80237d2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80237d6:	f1be 0f00 	cmp.w	lr, #0
 80237da:	d00b      	beq.n	80237f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80237dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80237e0:	3b01      	subs	r3, #1
 80237e2:	005b      	lsls	r3, r3, #1
 80237e4:	3302      	adds	r3, #2
 80237e6:	eb00 0b03 	add.w	fp, r0, r3
 80237ea:	5ac3      	ldrh	r3, [r0, r3]
 80237ec:	930a      	str	r3, [sp, #40]	; 0x28
 80237ee:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80237f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80237f4:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80237f8:	fb12 f30e 	smulbb	r3, r2, lr
 80237fc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023800:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023804:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023808:	10db      	asrs	r3, r3, #3
 802380a:	ea40 000c 	orr.w	r0, r0, ip
 802380e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023812:	f1ce 0c10 	rsb	ip, lr, #16
 8023816:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802381a:	ebac 0c02 	sub.w	ip, ip, r2
 802381e:	ea4b 0101 	orr.w	r1, fp, r1
 8023822:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023826:	4351      	muls	r1, r2
 8023828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802382a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802382e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8023832:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023836:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802383a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802383c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802383e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023842:	0412      	lsls	r2, r2, #16
 8023844:	ea4b 0000 	orr.w	r0, fp, r0
 8023848:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802384c:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8023850:	fb03 c000 	mla	r0, r3, r0, ip
 8023854:	ea42 0b0b 	orr.w	fp, r2, fp
 8023858:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802385c:	fb03 000b 	mla	r0, r3, fp, r0
 8023860:	0d43      	lsrs	r3, r0, #21
 8023862:	0940      	lsrs	r0, r0, #5
 8023864:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023868:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802386c:	4318      	orrs	r0, r3
 802386e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023870:	f82a 0b02 	strh.w	r0, [sl], #2
 8023874:	441c      	add	r4, r3
 8023876:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023878:	f109 39ff 	add.w	r9, r9, #4294967295
 802387c:	441e      	add	r6, r3
 802387e:	e73c      	b.n	80236fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023880:	b00f      	add	sp, #60	; 0x3c
 8023882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023886 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8023886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802388a:	b085      	sub	sp, #20
 802388c:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023890:	9102      	str	r1, [sp, #8]
 8023892:	2c00      	cmp	r4, #0
 8023894:	fb04 7103 	mla	r1, r4, r3, r7
 8023898:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802389c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80238a0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80238a4:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80238a8:	f2c0 811b 	blt.w	8023ae2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80238ac:	45a6      	cmp	lr, r4
 80238ae:	f340 8118 	ble.w	8023ae2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80238b2:	2f00      	cmp	r7, #0
 80238b4:	f2c0 8113 	blt.w	8023ade <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80238b8:	42bb      	cmp	r3, r7
 80238ba:	f340 8110 	ble.w	8023ade <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80238be:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80238c2:	1c7a      	adds	r2, r7, #1
 80238c4:	f100 8110 	bmi.w	8023ae8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80238c8:	4293      	cmp	r3, r2
 80238ca:	f340 810d 	ble.w	8023ae8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80238ce:	2e00      	cmp	r6, #0
 80238d0:	f000 810c 	beq.w	8023aec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80238d4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80238d8:	3401      	adds	r4, #1
 80238da:	f100 810b 	bmi.w	8023af4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80238de:	45a6      	cmp	lr, r4
 80238e0:	f340 8108 	ble.w	8023af4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80238e4:	2800      	cmp	r0, #0
 80238e6:	f000 8108 	beq.w	8023afa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80238ea:	2f00      	cmp	r7, #0
 80238ec:	f2c0 8100 	blt.w	8023af0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80238f0:	42bb      	cmp	r3, r7
 80238f2:	f340 80fd 	ble.w	8023af0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80238f6:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80238fa:	3701      	adds	r7, #1
 80238fc:	f100 8100 	bmi.w	8023b00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023900:	42bb      	cmp	r3, r7
 8023902:	f340 80fd 	ble.w	8023b00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023906:	2e00      	cmp	r6, #0
 8023908:	f000 80fc 	beq.w	8023b04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802390c:	3301      	adds	r3, #1
 802390e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8023912:	b2b6      	uxth	r6, r6
 8023914:	b280      	uxth	r0, r0
 8023916:	fb00 fe06 	mul.w	lr, r0, r6
 802391a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802391e:	0136      	lsls	r6, r6, #4
 8023920:	eba6 070e 	sub.w	r7, r6, lr
 8023924:	b280      	uxth	r0, r0
 8023926:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802392a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802392e:	b2bf      	uxth	r7, r7
 8023930:	1a1b      	subs	r3, r3, r0
 8023932:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023936:	b29b      	uxth	r3, r3
 8023938:	fb0a f607 	mul.w	r6, sl, r7
 802393c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023940:	fb0b 6603 	mla	r6, fp, r3, r6
 8023944:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023948:	fb00 6609 	mla	r6, r0, r9, r6
 802394c:	fb0e 6608 	mla	r6, lr, r8, r6
 8023950:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023954:	9600      	str	r6, [sp, #0]
 8023956:	2e00      	cmp	r6, #0
 8023958:	f000 80be 	beq.w	8023ad8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802395c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023960:	fb0b fc0c 	mul.w	ip, fp, ip
 8023964:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023968:	fb0b f505 	mul.w	r5, fp, r5
 802396c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023970:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023974:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023978:	44dc      	add	ip, fp
 802397a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802397e:	9501      	str	r5, [sp, #4]
 8023980:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023984:	9503      	str	r5, [sp, #12]
 8023986:	9d01      	ldr	r5, [sp, #4]
 8023988:	9e02      	ldr	r6, [sp, #8]
 802398a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802398e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023992:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023996:	fb0a fc0c 	mul.w	ip, sl, ip
 802399a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802399e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80239a2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80239a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80239aa:	4465      	add	r5, ip
 80239ac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80239b0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80239b4:	fb09 fc0c 	mul.w	ip, r9, ip
 80239b8:	fb09 f904 	mul.w	r9, r9, r4
 80239bc:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80239c0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80239c4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80239c8:	fb08 f404 	mul.w	r4, r8, r4
 80239cc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80239d0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80239d4:	fb08 f802 	mul.w	r8, r8, r2
 80239d8:	fb0a fa01 	mul.w	sl, sl, r1
 80239dc:	0a22      	lsrs	r2, r4, #8
 80239de:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80239e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80239e6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80239ea:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80239ee:	4414      	add	r4, r2
 80239f0:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80239f4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80239f8:	0a2d      	lsrs	r5, r5, #8
 80239fa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80239fe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023a02:	9a03      	ldr	r2, [sp, #12]
 8023a04:	8836      	ldrh	r6, [r6, #0]
 8023a06:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023a0a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023a0e:	437d      	muls	r5, r7
 8023a10:	4461      	add	r1, ip
 8023a12:	0a24      	lsrs	r4, r4, #8
 8023a14:	fb02 5503 	mla	r5, r2, r3, r5
 8023a18:	0a09      	lsrs	r1, r1, #8
 8023a1a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023a1e:	fb04 540e 	mla	r4, r4, lr, r5
 8023a22:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023a26:	fb01 4100 	mla	r1, r1, r0, r4
 8023a2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a2e:	0a09      	lsrs	r1, r1, #8
 8023a30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023a34:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8023a38:	fb07 f70a 	mul.w	r7, r7, sl
 8023a3c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023a40:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8023a44:	fb03 7101 	mla	r1, r3, r1, r7
 8023a48:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023a4c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023a50:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023a54:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8023a58:	fb00 e101 	mla	r1, r0, r1, lr
 8023a5c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023a60:	9a00      	ldr	r2, [sp, #0]
 8023a62:	b287      	uxth	r7, r0
 8023a64:	437a      	muls	r2, r7
 8023a66:	0a09      	lsrs	r1, r1, #8
 8023a68:	1c53      	adds	r3, r2, #1
 8023a6a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023a6e:	4321      	orrs	r1, r4
 8023a70:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023a74:	1235      	asrs	r5, r6, #8
 8023a76:	0c0a      	lsrs	r2, r1, #16
 8023a78:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023a7c:	b2db      	uxtb	r3, r3
 8023a7e:	fb12 f207 	smulbb	r2, r2, r7
 8023a82:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023a86:	fb05 2503 	mla	r5, r5, r3, r2
 8023a8a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8023a8e:	10f2      	asrs	r2, r6, #3
 8023a90:	b2c8      	uxtb	r0, r1
 8023a92:	00f6      	lsls	r6, r6, #3
 8023a94:	fb14 f407 	smulbb	r4, r4, r7
 8023a98:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023a9c:	b2f6      	uxtb	r6, r6
 8023a9e:	fb10 f007 	smulbb	r0, r0, r7
 8023aa2:	fb02 4203 	mla	r2, r2, r3, r4
 8023aa6:	b2ad      	uxth	r5, r5
 8023aa8:	fb06 0303 	mla	r3, r6, r3, r0
 8023aac:	b299      	uxth	r1, r3
 8023aae:	b294      	uxth	r4, r2
 8023ab0:	1c6b      	adds	r3, r5, #1
 8023ab2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023ab6:	1c62      	adds	r2, r4, #1
 8023ab8:	1c4b      	adds	r3, r1, #1
 8023aba:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023abe:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023ac2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023ac6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023aca:	0952      	lsrs	r2, r2, #5
 8023acc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ad0:	432b      	orrs	r3, r5
 8023ad2:	4313      	orrs	r3, r2
 8023ad4:	9a02      	ldr	r2, [sp, #8]
 8023ad6:	8013      	strh	r3, [r2, #0]
 8023ad8:	b005      	add	sp, #20
 8023ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ade:	2500      	movs	r5, #0
 8023ae0:	e6ef      	b.n	80238c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8023ae2:	2100      	movs	r1, #0
 8023ae4:	460d      	mov	r5, r1
 8023ae6:	e6f7      	b.n	80238d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023ae8:	2100      	movs	r1, #0
 8023aea:	e6f5      	b.n	80238d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023aec:	4631      	mov	r1, r6
 8023aee:	e6f3      	b.n	80238d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023af0:	2400      	movs	r4, #0
 8023af2:	e702      	b.n	80238fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8023af4:	2200      	movs	r2, #0
 8023af6:	4614      	mov	r4, r2
 8023af8:	e70b      	b.n	8023912 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023afa:	4602      	mov	r2, r0
 8023afc:	4604      	mov	r4, r0
 8023afe:	e708      	b.n	8023912 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023b00:	2200      	movs	r2, #0
 8023b02:	e706      	b.n	8023912 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023b04:	4632      	mov	r2, r6
 8023b06:	e704      	b.n	8023912 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08023b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b0c:	b09d      	sub	sp, #116	; 0x74
 8023b0e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023b12:	9219      	str	r2, [sp, #100]	; 0x64
 8023b14:	9307      	str	r3, [sp, #28]
 8023b16:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023b18:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8023b1e:	9117      	str	r1, [sp, #92]	; 0x5c
 8023b20:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023b24:	901b      	str	r0, [sp, #108]	; 0x6c
 8023b26:	6850      	ldr	r0, [r2, #4]
 8023b28:	6812      	ldr	r2, [r2, #0]
 8023b2a:	fb00 1303 	mla	r3, r0, r3, r1
 8023b2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023b32:	930a      	str	r3, [sp, #40]	; 0x28
 8023b34:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023b36:	681b      	ldr	r3, [r3, #0]
 8023b38:	9310      	str	r3, [sp, #64]	; 0x40
 8023b3a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023b42:	2b00      	cmp	r3, #0
 8023b44:	dc03      	bgt.n	8023b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8023b46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023b48:	2b00      	cmp	r3, #0
 8023b4a:	f340 8375 	ble.w	8024238 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023b4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023b50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023b58:	1e48      	subs	r0, r1, #1
 8023b5a:	1e57      	subs	r7, r2, #1
 8023b5c:	9b07      	ldr	r3, [sp, #28]
 8023b5e:	2b00      	cmp	r3, #0
 8023b60:	f340 818e 	ble.w	8023e80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023b64:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023b68:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023b6c:	d406      	bmi.n	8023b7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023b6e:	4584      	cmp	ip, r0
 8023b70:	da04      	bge.n	8023b7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023b72:	2b00      	cmp	r3, #0
 8023b74:	db02      	blt.n	8023b7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023b76:	42bb      	cmp	r3, r7
 8023b78:	f2c0 8183 	blt.w	8023e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023b7c:	f11c 0c01 	adds.w	ip, ip, #1
 8023b80:	f100 8173 	bmi.w	8023e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b84:	4561      	cmp	r1, ip
 8023b86:	f2c0 8170 	blt.w	8023e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b8a:	3301      	adds	r3, #1
 8023b8c:	f100 816d 	bmi.w	8023e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b90:	429a      	cmp	r2, r3
 8023b92:	f2c0 816a 	blt.w	8023e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b96:	9b07      	ldr	r3, [sp, #28]
 8023b98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023b9a:	9318      	str	r3, [sp, #96]	; 0x60
 8023b9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023b9e:	2b00      	cmp	r3, #0
 8023ba0:	f340 818c 	ble.w	8023ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8023ba4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023ba6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023ba8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023bac:	689b      	ldr	r3, [r3, #8]
 8023bae:	1422      	asrs	r2, r4, #16
 8023bb0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023bb4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023bb8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023bbc:	f100 81cd 	bmi.w	8023f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023bc0:	f103 38ff 	add.w	r8, r3, #4294967295
 8023bc4:	4542      	cmp	r2, r8
 8023bc6:	f280 81c8 	bge.w	8023f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023bca:	f1bc 0f00 	cmp.w	ip, #0
 8023bce:	f2c0 81c4 	blt.w	8023f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023bd2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023bd6:	45c4      	cmp	ip, r8
 8023bd8:	f280 81bf 	bge.w	8023f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023bdc:	b21b      	sxth	r3, r3
 8023bde:	fb0c 2203 	mla	r2, ip, r3, r2
 8023be2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023be4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023be8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023bec:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023bf0:	2800      	cmp	r0, #0
 8023bf2:	f000 81a9 	beq.w	8023f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8023bf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023bfa:	950c      	str	r5, [sp, #48]	; 0x30
 8023bfc:	0e2d      	lsrs	r5, r5, #24
 8023bfe:	9513      	str	r5, [sp, #76]	; 0x4c
 8023c00:	b181      	cbz	r1, 8023c24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023c02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023c06:	3b01      	subs	r3, #1
 8023c08:	009b      	lsls	r3, r3, #2
 8023c0a:	3304      	adds	r3, #4
 8023c0c:	eb08 0c03 	add.w	ip, r8, r3
 8023c10:	f858 3003 	ldr.w	r3, [r8, r3]
 8023c14:	9308      	str	r3, [sp, #32]
 8023c16:	0e1b      	lsrs	r3, r3, #24
 8023c18:	9311      	str	r3, [sp, #68]	; 0x44
 8023c1a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023c1e:	930d      	str	r3, [sp, #52]	; 0x34
 8023c20:	0e1b      	lsrs	r3, r3, #24
 8023c22:	9314      	str	r3, [sp, #80]	; 0x50
 8023c24:	b280      	uxth	r0, r0
 8023c26:	b289      	uxth	r1, r1
 8023c28:	fb00 f901 	mul.w	r9, r0, r1
 8023c2c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023c30:	0100      	lsls	r0, r0, #4
 8023c32:	eba0 0809 	sub.w	r8, r0, r9
 8023c36:	b289      	uxth	r1, r1
 8023c38:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023c3c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023c3e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c40:	fa1f f888 	uxth.w	r8, r8
 8023c44:	1a5b      	subs	r3, r3, r1
 8023c46:	b29b      	uxth	r3, r3
 8023c48:	fb08 f000 	mul.w	r0, r8, r0
 8023c4c:	fb03 000e 	mla	r0, r3, lr, r0
 8023c50:	fb01 0005 	mla	r0, r1, r5, r0
 8023c54:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c56:	fb09 0005 	mla	r0, r9, r5, r0
 8023c5a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023c5e:	2800      	cmp	r0, #0
 8023c60:	f000 80fa 	beq.w	8023e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023c64:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023c68:	d01b      	beq.n	8023ca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023c6a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023c6e:	fb0e fa0a 	mul.w	sl, lr, sl
 8023c72:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023c76:	fb0e fe02 	mul.w	lr, lr, r2
 8023c7a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023c7e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023c82:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023c86:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023c8a:	4452      	add	r2, sl
 8023c8c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023c90:	0a12      	lsrs	r2, r2, #8
 8023c92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c96:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023c9a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c9e:	ea42 020c 	orr.w	r2, r2, ip
 8023ca2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023ca4:	2dff      	cmp	r5, #255	; 0xff
 8023ca6:	d021      	beq.n	8023cec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8023ca8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023caa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023cae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cb0:	fb05 fb0b 	mul.w	fp, r5, fp
 8023cb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023cb6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023cba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cbc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023cc0:	fb05 fa0a 	mul.w	sl, r5, sl
 8023cc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cc8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023ccc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023cd0:	44de      	add	lr, fp
 8023cd2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ce2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023ce6:	ea4e 050a 	orr.w	r5, lr, sl
 8023cea:	950c      	str	r5, [sp, #48]	; 0x30
 8023cec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023cee:	2dff      	cmp	r5, #255	; 0xff
 8023cf0:	d021      	beq.n	8023d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023cf2:	9d08      	ldr	r5, [sp, #32]
 8023cf4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023cf8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023cfa:	fb05 fb0b 	mul.w	fp, r5, fp
 8023cfe:	9d08      	ldr	r5, [sp, #32]
 8023d00:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023d04:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023d06:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023d0a:	fb05 fa0a 	mul.w	sl, r5, sl
 8023d0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d12:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023d16:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023d1a:	44de      	add	lr, fp
 8023d1c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d30:	ea4e 050a 	orr.w	r5, lr, sl
 8023d34:	9508      	str	r5, [sp, #32]
 8023d36:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023d38:	2dff      	cmp	r5, #255	; 0xff
 8023d3a:	d021      	beq.n	8023d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023d3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d3e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023d42:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023d44:	fb05 fb0b 	mul.w	fp, r5, fp
 8023d48:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d4a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023d4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023d50:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023d54:	fb05 fa0a 	mul.w	sl, r5, sl
 8023d58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d5c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023d60:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023d64:	44de      	add	lr, fp
 8023d66:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d7a:	ea4e 050a 	orr.w	r5, lr, sl
 8023d7e:	950d      	str	r5, [sp, #52]	; 0x34
 8023d80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023d82:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023d86:	9d08      	ldr	r5, [sp, #32]
 8023d88:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023d8c:	fb08 fc0c 	mul.w	ip, r8, ip
 8023d90:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023d94:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023d98:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d9a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023d9e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023da4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023da8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023dac:	fb08 f80e 	mul.w	r8, r8, lr
 8023db0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023db4:	fb03 8202 	mla	r2, r3, r2, r8
 8023db8:	9b08      	ldr	r3, [sp, #32]
 8023dba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023dbc:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8023dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023dc2:	fb01 220a 	mla	r2, r1, sl, r2
 8023dc6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023dca:	fb09 2901 	mla	r9, r9, r1, r2
 8023dce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023dd0:	883b      	ldrh	r3, [r7, #0]
 8023dd2:	4342      	muls	r2, r0
 8023dd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dd8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023ddc:	1c50      	adds	r0, r2, #1
 8023dde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023de2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023de6:	ea4c 0c09 	orr.w	ip, ip, r9
 8023dea:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023dee:	1219      	asrs	r1, r3, #8
 8023df0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023df4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023df8:	b2c0      	uxtb	r0, r0
 8023dfa:	fb12 f205 	smulbb	r2, r2, r5
 8023dfe:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023e02:	fb01 2100 	mla	r1, r1, r0, r2
 8023e06:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023e0a:	10da      	asrs	r2, r3, #3
 8023e0c:	fa5f fc8c 	uxtb.w	ip, ip
 8023e10:	00db      	lsls	r3, r3, #3
 8023e12:	fb1c fc05 	smulbb	ip, ip, r5
 8023e16:	b2db      	uxtb	r3, r3
 8023e18:	b289      	uxth	r1, r1
 8023e1a:	fb03 c300 	mla	r3, r3, r0, ip
 8023e1e:	fa1f fc83 	uxth.w	ip, r3
 8023e22:	1c4b      	adds	r3, r1, #1
 8023e24:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023e28:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023e2c:	fb1e fe05 	smulbb	lr, lr, r5
 8023e30:	f10c 0301 	add.w	r3, ip, #1
 8023e34:	fb02 e200 	mla	r2, r2, r0, lr
 8023e38:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023e3c:	b292      	uxth	r2, r2
 8023e3e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023e42:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023e46:	430b      	orrs	r3, r1
 8023e48:	1c51      	adds	r1, r2, #1
 8023e4a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023e4e:	0952      	lsrs	r2, r2, #5
 8023e50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023e54:	4313      	orrs	r3, r2
 8023e56:	803b      	strh	r3, [r7, #0]
 8023e58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023e5a:	441c      	add	r4, r3
 8023e5c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023e5e:	441e      	add	r6, r3
 8023e60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023e62:	3b01      	subs	r3, #1
 8023e64:	3702      	adds	r7, #2
 8023e66:	9318      	str	r3, [sp, #96]	; 0x60
 8023e68:	e698      	b.n	8023b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023e6a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023e6c:	441c      	add	r4, r3
 8023e6e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023e70:	441e      	add	r6, r3
 8023e72:	9b07      	ldr	r3, [sp, #28]
 8023e74:	3b01      	subs	r3, #1
 8023e76:	9307      	str	r3, [sp, #28]
 8023e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e7a:	3302      	adds	r3, #2
 8023e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8023e7e:	e66d      	b.n	8023b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8023e80:	d023      	beq.n	8023eca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023e82:	9b07      	ldr	r3, [sp, #28]
 8023e84:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023e86:	3b01      	subs	r3, #1
 8023e88:	fb00 4003 	mla	r0, r0, r3, r4
 8023e8c:	1400      	asrs	r0, r0, #16
 8023e8e:	f53f ae82 	bmi.w	8023b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023e92:	3901      	subs	r1, #1
 8023e94:	4288      	cmp	r0, r1
 8023e96:	f6bf ae7e 	bge.w	8023b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023e9a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023e9c:	fb01 6303 	mla	r3, r1, r3, r6
 8023ea0:	141b      	asrs	r3, r3, #16
 8023ea2:	f53f ae78 	bmi.w	8023b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023ea6:	3a01      	subs	r2, #1
 8023ea8:	4293      	cmp	r3, r2
 8023eaa:	f6bf ae74 	bge.w	8023b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023eae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023eb2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023eb6:	f1bb 0f00 	cmp.w	fp, #0
 8023eba:	dc6c      	bgt.n	8023f96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023ebc:	9b07      	ldr	r3, [sp, #28]
 8023ebe:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ec4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8023eca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023ecc:	2b00      	cmp	r3, #0
 8023ece:	f340 81b3 	ble.w	8024238 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023ed2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023eda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023ede:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ee0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023ee4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023ee8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023eec:	eef0 6a62 	vmov.f32	s13, s5
 8023ef0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023ef4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ef8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023efc:	ee16 4a90 	vmov	r4, s13
 8023f00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023f04:	eef0 6a43 	vmov.f32	s13, s6
 8023f08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023f0c:	ee12 2a90 	vmov	r2, s5
 8023f10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023f14:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f18:	ee13 2a10 	vmov	r2, s6
 8023f1c:	9329      	str	r3, [sp, #164]	; 0xa4
 8023f1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023f20:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f24:	932a      	str	r3, [sp, #168]	; 0xa8
 8023f26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023f28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023f2a:	3b01      	subs	r3, #1
 8023f2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f30:	9317      	str	r3, [sp, #92]	; 0x5c
 8023f32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023f34:	bf08      	it	eq
 8023f36:	4613      	moveq	r3, r2
 8023f38:	ee16 6a90 	vmov	r6, s13
 8023f3c:	9307      	str	r3, [sp, #28]
 8023f3e:	eeb0 3a67 	vmov.f32	s6, s15
 8023f42:	eef0 2a47 	vmov.f32	s5, s14
 8023f46:	e5fb      	b.n	8023b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023f48:	2900      	cmp	r1, #0
 8023f4a:	f43f ae6b 	beq.w	8023c24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023f4e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023f52:	9308      	str	r3, [sp, #32]
 8023f54:	0e1b      	lsrs	r3, r3, #24
 8023f56:	9311      	str	r3, [sp, #68]	; 0x44
 8023f58:	e664      	b.n	8023c24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023f5a:	f112 0801 	adds.w	r8, r2, #1
 8023f5e:	f53f af7b 	bmi.w	8023e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f62:	4543      	cmp	r3, r8
 8023f64:	f6ff af78 	blt.w	8023e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f68:	f11c 0801 	adds.w	r8, ip, #1
 8023f6c:	f53f af74 	bmi.w	8023e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f70:	45c6      	cmp	lr, r8
 8023f72:	f6ff af71 	blt.w	8023e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f76:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023f78:	9201      	str	r2, [sp, #4]
 8023f7a:	fa0f f28e 	sxth.w	r2, lr
 8023f7e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023f82:	e9cd c002 	strd	ip, r0, [sp, #8]
 8023f86:	9200      	str	r2, [sp, #0]
 8023f88:	b21b      	sxth	r3, r3
 8023f8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023f8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023f8e:	4639      	mov	r1, r7
 8023f90:	f7ff fc79 	bl	8023886 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023f94:	e760      	b.n	8023e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f96:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023f98:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023f9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023f9e:	1427      	asrs	r7, r4, #16
 8023fa0:	1433      	asrs	r3, r6, #16
 8023fa2:	fb01 7303 	mla	r3, r1, r3, r7
 8023fa6:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8023faa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023fae:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023fb2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023fb6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023fba:	2a00      	cmp	r2, #0
 8023fbc:	f000 8133 	beq.w	8024226 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8023fc0:	687d      	ldr	r5, [r7, #4]
 8023fc2:	950e      	str	r5, [sp, #56]	; 0x38
 8023fc4:	0e2d      	lsrs	r5, r5, #24
 8023fc6:	9515      	str	r5, [sp, #84]	; 0x54
 8023fc8:	b178      	cbz	r0, 8023fea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023fca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8023fce:	3901      	subs	r1, #1
 8023fd0:	0089      	lsls	r1, r1, #2
 8023fd2:	3104      	adds	r1, #4
 8023fd4:	eb07 0e01 	add.w	lr, r7, r1
 8023fd8:	5879      	ldr	r1, [r7, r1]
 8023fda:	9109      	str	r1, [sp, #36]	; 0x24
 8023fdc:	0e09      	lsrs	r1, r1, #24
 8023fde:	9112      	str	r1, [sp, #72]	; 0x48
 8023fe0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023fe4:	910f      	str	r1, [sp, #60]	; 0x3c
 8023fe6:	0e09      	lsrs	r1, r1, #24
 8023fe8:	9116      	str	r1, [sp, #88]	; 0x58
 8023fea:	b292      	uxth	r2, r2
 8023fec:	b280      	uxth	r0, r0
 8023fee:	fb02 f800 	mul.w	r8, r2, r0
 8023ff2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023ff6:	0112      	lsls	r2, r2, #4
 8023ff8:	eba2 0e08 	sub.w	lr, r2, r8
 8023ffc:	b280      	uxth	r0, r0
 8023ffe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024002:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024004:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024006:	fa1f fe8e 	uxth.w	lr, lr
 802400a:	1a12      	subs	r2, r2, r0
 802400c:	b292      	uxth	r2, r2
 802400e:	fb0e f101 	mul.w	r1, lr, r1
 8024012:	fb02 110c 	mla	r1, r2, ip, r1
 8024016:	fb00 1105 	mla	r1, r0, r5, r1
 802401a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802401c:	fb08 1105 	mla	r1, r8, r5, r1
 8024020:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024024:	2900      	cmp	r1, #0
 8024026:	f000 80f5 	beq.w	8024214 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802402a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802402e:	d019      	beq.n	8024064 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8024030:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024034:	fb0c fa0a 	mul.w	sl, ip, sl
 8024038:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802403c:	fb0c fc03 	mul.w	ip, ip, r3
 8024040:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024044:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024048:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802404c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024050:	4453      	add	r3, sl
 8024052:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024056:	0a1b      	lsrs	r3, r3, #8
 8024058:	0a3f      	lsrs	r7, r7, #8
 802405a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802405e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024062:	433b      	orrs	r3, r7
 8024064:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024066:	2dff      	cmp	r5, #255	; 0xff
 8024068:	d020      	beq.n	80240ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802406a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802406c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024070:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024072:	436f      	muls	r7, r5
 8024074:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024076:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802407a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802407c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024080:	fb05 fa0a 	mul.w	sl, r5, sl
 8024084:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024088:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802408c:	44bc      	add	ip, r7
 802408e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024092:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024096:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802409a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802409e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240a6:	ea4c 050a 	orr.w	r5, ip, sl
 80240aa:	950e      	str	r5, [sp, #56]	; 0x38
 80240ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80240ae:	2dff      	cmp	r5, #255	; 0xff
 80240b0:	d020      	beq.n	80240f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 80240b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80240b4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80240b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80240ba:	436f      	muls	r7, r5
 80240bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80240be:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80240c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80240c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80240c8:	fb05 fa0a 	mul.w	sl, r5, sl
 80240cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80240d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240d4:	44bc      	add	ip, r7
 80240d6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80240da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80240de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240ee:	ea4c 050a 	orr.w	r5, ip, sl
 80240f2:	9509      	str	r5, [sp, #36]	; 0x24
 80240f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80240f6:	2dff      	cmp	r5, #255	; 0xff
 80240f8:	d020      	beq.n	802413c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80240fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80240fc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024100:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024102:	436f      	muls	r7, r5
 8024104:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024106:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802410a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802410c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024110:	fb05 fa0a 	mul.w	sl, r5, sl
 8024114:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024118:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802411c:	44bc      	add	ip, r7
 802411e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024122:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024126:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802412a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802412e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024132:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024136:	ea4c 050a 	orr.w	r5, ip, sl
 802413a:	950f      	str	r5, [sp, #60]	; 0x3c
 802413c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802413e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024142:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024144:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024148:	fb0e f707 	mul.w	r7, lr, r7
 802414c:	fb02 770c 	mla	r7, r2, ip, r7
 8024150:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024154:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024156:	fb00 770c 	mla	r7, r0, ip, r7
 802415a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802415e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024160:	fb08 770c 	mla	r7, r8, ip, r7
 8024164:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024168:	fb0e fe0c 	mul.w	lr, lr, ip
 802416c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024170:	fb02 e303 	mla	r3, r2, r3, lr
 8024174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024176:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024178:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802417c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802417e:	fb00 330a 	mla	r3, r0, sl, r3
 8024182:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024186:	fb08 3c0c 	mla	ip, r8, ip, r3
 802418a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802418c:	f8b9 0000 	ldrh.w	r0, [r9]
 8024190:	4359      	muls	r1, r3
 8024192:	0a3f      	lsrs	r7, r7, #8
 8024194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024198:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802419c:	1c4b      	adds	r3, r1, #1
 802419e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80241a2:	ea47 070c 	orr.w	r7, r7, ip
 80241a6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80241aa:	1202      	asrs	r2, r0, #8
 80241ac:	0c3b      	lsrs	r3, r7, #16
 80241ae:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80241b2:	b2c9      	uxtb	r1, r1
 80241b4:	fb13 f305 	smulbb	r3, r3, r5
 80241b8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80241bc:	fb02 3201 	mla	r2, r2, r1, r3
 80241c0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80241c4:	10c3      	asrs	r3, r0, #3
 80241c6:	b2ff      	uxtb	r7, r7
 80241c8:	00c0      	lsls	r0, r0, #3
 80241ca:	b2c0      	uxtb	r0, r0
 80241cc:	fb17 f705 	smulbb	r7, r7, r5
 80241d0:	fb00 7001 	mla	r0, r0, r1, r7
 80241d4:	b292      	uxth	r2, r2
 80241d6:	fb1c fc05 	smulbb	ip, ip, r5
 80241da:	b280      	uxth	r0, r0
 80241dc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80241e0:	fb03 c301 	mla	r3, r3, r1, ip
 80241e4:	1c51      	adds	r1, r2, #1
 80241e6:	f100 0c01 	add.w	ip, r0, #1
 80241ea:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80241ee:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80241f2:	b29b      	uxth	r3, r3
 80241f4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80241f8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80241fc:	ea4c 0202 	orr.w	r2, ip, r2
 8024200:	f103 0c01 	add.w	ip, r3, #1
 8024204:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024208:	095b      	lsrs	r3, r3, #5
 802420a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802420e:	431a      	orrs	r2, r3
 8024210:	f8a9 2000 	strh.w	r2, [r9]
 8024214:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024216:	441c      	add	r4, r3
 8024218:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802421a:	f109 0902 	add.w	r9, r9, #2
 802421e:	441e      	add	r6, r3
 8024220:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024224:	e647      	b.n	8023eb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024226:	2800      	cmp	r0, #0
 8024228:	f43f aedf 	beq.w	8023fea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802422c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8024230:	9109      	str	r1, [sp, #36]	; 0x24
 8024232:	0e09      	lsrs	r1, r1, #24
 8024234:	9112      	str	r1, [sp, #72]	; 0x48
 8024236:	e6d8      	b.n	8023fea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024238:	b01d      	add	sp, #116	; 0x74
 802423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802423e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802423e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024242:	b085      	sub	sp, #20
 8024244:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8024248:	9102      	str	r1, [sp, #8]
 802424a:	2c00      	cmp	r4, #0
 802424c:	fb04 7103 	mla	r1, r4, r3, r7
 8024250:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024254:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024258:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802425c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8024260:	f2c0 810c 	blt.w	802447c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024264:	45a6      	cmp	lr, r4
 8024266:	f340 8109 	ble.w	802447c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802426a:	2f00      	cmp	r7, #0
 802426c:	f2c0 8104 	blt.w	8024478 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024270:	42bb      	cmp	r3, r7
 8024272:	f340 8101 	ble.w	8024478 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024276:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802427a:	1c7a      	adds	r2, r7, #1
 802427c:	f100 8101 	bmi.w	8024482 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024280:	4293      	cmp	r3, r2
 8024282:	f340 80fe 	ble.w	8024482 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024286:	2e00      	cmp	r6, #0
 8024288:	f000 80fd 	beq.w	8024486 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 802428c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8024290:	3401      	adds	r4, #1
 8024292:	f100 80fc 	bmi.w	802448e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024296:	45a6      	cmp	lr, r4
 8024298:	f340 80f9 	ble.w	802448e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802429c:	2800      	cmp	r0, #0
 802429e:	f000 80f9 	beq.w	8024494 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 80242a2:	2f00      	cmp	r7, #0
 80242a4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80242a8:	f2c0 80ef 	blt.w	802448a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80242ac:	42bb      	cmp	r3, r7
 80242ae:	f340 80ec 	ble.w	802448a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80242b2:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80242b6:	3701      	adds	r7, #1
 80242b8:	f100 80ef 	bmi.w	802449a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80242bc:	42bb      	cmp	r3, r7
 80242be:	f340 80ec 	ble.w	802449a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80242c2:	2e00      	cmp	r6, #0
 80242c4:	f000 80eb 	beq.w	802449e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80242c8:	6852      	ldr	r2, [r2, #4]
 80242ca:	b2b6      	uxth	r6, r6
 80242cc:	b280      	uxth	r0, r0
 80242ce:	fb00 fe06 	mul.w	lr, r0, r6
 80242d2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80242d6:	0136      	lsls	r6, r6, #4
 80242d8:	eba6 070e 	sub.w	r7, r6, lr
 80242dc:	b280      	uxth	r0, r0
 80242de:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80242e2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80242e6:	b2bf      	uxth	r7, r7
 80242e8:	1a1b      	subs	r3, r3, r0
 80242ea:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80242ee:	b29b      	uxth	r3, r3
 80242f0:	fb07 f60a 	mul.w	r6, r7, sl
 80242f4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80242f8:	fb0b 6603 	mla	r6, fp, r3, r6
 80242fc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024300:	fb00 6609 	mla	r6, r0, r9, r6
 8024304:	fb0e 6608 	mla	r6, lr, r8, r6
 8024308:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802430c:	9600      	str	r6, [sp, #0]
 802430e:	2e00      	cmp	r6, #0
 8024310:	f000 80af 	beq.w	8024472 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8024314:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024318:	fb0b fc0c 	mul.w	ip, fp, ip
 802431c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024320:	fb0b f505 	mul.w	r5, fp, r5
 8024324:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024328:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802432c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024330:	44dc      	add	ip, fp
 8024332:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024336:	9501      	str	r5, [sp, #4]
 8024338:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802433c:	9503      	str	r5, [sp, #12]
 802433e:	9d01      	ldr	r5, [sp, #4]
 8024340:	9e02      	ldr	r6, [sp, #8]
 8024342:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024346:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802434a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802434e:	fb0a fc0c 	mul.w	ip, sl, ip
 8024352:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8024356:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802435a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802435e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024362:	4465      	add	r5, ip
 8024364:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024368:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802436c:	fb09 fc0c 	mul.w	ip, r9, ip
 8024370:	fb09 f904 	mul.w	r9, r9, r4
 8024374:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8024378:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802437c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8024380:	fb08 f404 	mul.w	r4, r8, r4
 8024384:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024388:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802438c:	fb08 f802 	mul.w	r8, r8, r2
 8024390:	fb0a fa01 	mul.w	sl, sl, r1
 8024394:	0a22      	lsrs	r2, r4, #8
 8024396:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802439a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802439e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80243a2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80243a6:	4414      	add	r4, r2
 80243a8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80243ac:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80243b0:	0a2d      	lsrs	r5, r5, #8
 80243b2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80243b6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80243ba:	9a03      	ldr	r2, [sp, #12]
 80243bc:	8836      	ldrh	r6, [r6, #0]
 80243be:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80243c2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80243c6:	437d      	muls	r5, r7
 80243c8:	4461      	add	r1, ip
 80243ca:	0a24      	lsrs	r4, r4, #8
 80243cc:	fb02 5503 	mla	r5, r2, r3, r5
 80243d0:	0a09      	lsrs	r1, r1, #8
 80243d2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80243d6:	fb04 540e 	mla	r4, r4, lr, r5
 80243da:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80243de:	fb01 4100 	mla	r1, r1, r0, r4
 80243e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80243e6:	0a09      	lsrs	r1, r1, #8
 80243e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80243ec:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80243f0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80243f4:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80243f8:	fb07 f70a 	mul.w	r7, r7, sl
 80243fc:	fb03 7101 	mla	r1, r3, r1, r7
 8024400:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024404:	9b00      	ldr	r3, [sp, #0]
 8024406:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802440a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802440e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8024412:	fb00 e101 	mla	r1, r0, r1, lr
 8024416:	43da      	mvns	r2, r3
 8024418:	1233      	asrs	r3, r6, #8
 802441a:	b2d2      	uxtb	r2, r2
 802441c:	10f0      	asrs	r0, r6, #3
 802441e:	0a09      	lsrs	r1, r1, #8
 8024420:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024424:	00f6      	lsls	r6, r6, #3
 8024426:	4353      	muls	r3, r2
 8024428:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802442c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024430:	b2f6      	uxtb	r6, r6
 8024432:	4321      	orrs	r1, r4
 8024434:	4350      	muls	r0, r2
 8024436:	4356      	muls	r6, r2
 8024438:	1c5a      	adds	r2, r3, #1
 802443a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802443e:	0c0b      	lsrs	r3, r1, #16
 8024440:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024444:	1c42      	adds	r2, r0, #1
 8024446:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802444a:	0a0a      	lsrs	r2, r1, #8
 802444c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024450:	021b      	lsls	r3, r3, #8
 8024452:	00d2      	lsls	r2, r2, #3
 8024454:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024458:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802445c:	4313      	orrs	r3, r2
 802445e:	1c72      	adds	r2, r6, #1
 8024460:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8024464:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024468:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802446c:	4319      	orrs	r1, r3
 802446e:	9b02      	ldr	r3, [sp, #8]
 8024470:	8019      	strh	r1, [r3, #0]
 8024472:	b005      	add	sp, #20
 8024474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024478:	2500      	movs	r5, #0
 802447a:	e6fe      	b.n	802427a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802447c:	2100      	movs	r1, #0
 802447e:	460d      	mov	r5, r1
 8024480:	e706      	b.n	8024290 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024482:	2100      	movs	r1, #0
 8024484:	e704      	b.n	8024290 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024486:	4631      	mov	r1, r6
 8024488:	e702      	b.n	8024290 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802448a:	2400      	movs	r4, #0
 802448c:	e713      	b.n	80242b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802448e:	2200      	movs	r2, #0
 8024490:	4614      	mov	r4, r2
 8024492:	e71a      	b.n	80242ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024494:	4602      	mov	r2, r0
 8024496:	4604      	mov	r4, r0
 8024498:	e717      	b.n	80242ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802449a:	2200      	movs	r2, #0
 802449c:	e715      	b.n	80242ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802449e:	4632      	mov	r2, r6
 80244a0:	e713      	b.n	80242ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

080244a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80244a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244a8:	b09b      	sub	sp, #108	; 0x6c
 80244aa:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80244ae:	9218      	str	r2, [sp, #96]	; 0x60
 80244b0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80244b2:	9116      	str	r1, [sp, #88]	; 0x58
 80244b4:	9307      	str	r3, [sp, #28]
 80244b6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80244ba:	9019      	str	r0, [sp, #100]	; 0x64
 80244bc:	6850      	ldr	r0, [r2, #4]
 80244be:	6812      	ldr	r2, [r2, #0]
 80244c0:	fb00 1303 	mla	r3, r0, r3, r1
 80244c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80244c8:	930a      	str	r3, [sp, #40]	; 0x28
 80244ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80244cc:	681b      	ldr	r3, [r3, #0]
 80244ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80244d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	dc03      	bgt.n	80244de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80244d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80244d8:	2b00      	cmp	r3, #0
 80244da:	f340 8386 	ble.w	8024bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 80244de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80244e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80244e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80244e8:	1e48      	subs	r0, r1, #1
 80244ea:	1e57      	subs	r7, r2, #1
 80244ec:	9b07      	ldr	r3, [sp, #28]
 80244ee:	2b00      	cmp	r3, #0
 80244f0:	f340 8166 	ble.w	80247c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80244f4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80244f8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80244fc:	d406      	bmi.n	802450c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80244fe:	4584      	cmp	ip, r0
 8024500:	da04      	bge.n	802450c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024502:	2b00      	cmp	r3, #0
 8024504:	db02      	blt.n	802450c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024506:	42bb      	cmp	r3, r7
 8024508:	f2c0 815b 	blt.w	80247c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802450c:	f11c 0c01 	adds.w	ip, ip, #1
 8024510:	f100 814b 	bmi.w	80247aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024514:	4561      	cmp	r1, ip
 8024516:	f2c0 8148 	blt.w	80247aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802451a:	3301      	adds	r3, #1
 802451c:	f100 8145 	bmi.w	80247aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024520:	429a      	cmp	r2, r3
 8024522:	f2c0 8142 	blt.w	80247aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024526:	9b07      	ldr	r3, [sp, #28]
 8024528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802452a:	9317      	str	r3, [sp, #92]	; 0x5c
 802452c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802452e:	2b00      	cmp	r3, #0
 8024530:	f340 8165 	ble.w	80247fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024534:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024536:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024538:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802453c:	689b      	ldr	r3, [r3, #8]
 802453e:	1422      	asrs	r2, r4, #16
 8024540:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024544:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024548:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802454c:	f100 81d5 	bmi.w	80248fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024550:	f103 38ff 	add.w	r8, r3, #4294967295
 8024554:	4542      	cmp	r2, r8
 8024556:	f280 81d0 	bge.w	80248fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802455a:	f1bc 0f00 	cmp.w	ip, #0
 802455e:	f2c0 81cc 	blt.w	80248fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024562:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024566:	45c4      	cmp	ip, r8
 8024568:	f280 81c7 	bge.w	80248fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802456c:	b21b      	sxth	r3, r3
 802456e:	fb0c 2203 	mla	r2, ip, r3, r2
 8024572:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024574:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8024578:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802457c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024580:	2900      	cmp	r1, #0
 8024582:	f000 8182 	beq.w	802488a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8024586:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802458a:	950b      	str	r5, [sp, #44]	; 0x2c
 802458c:	0e2d      	lsrs	r5, r5, #24
 802458e:	9512      	str	r5, [sp, #72]	; 0x48
 8024590:	b180      	cbz	r0, 80245b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024592:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8024596:	3b01      	subs	r3, #1
 8024598:	009b      	lsls	r3, r3, #2
 802459a:	3304      	adds	r3, #4
 802459c:	eb08 0c03 	add.w	ip, r8, r3
 80245a0:	f858 3003 	ldr.w	r3, [r8, r3]
 80245a4:	9308      	str	r3, [sp, #32]
 80245a6:	0e1b      	lsrs	r3, r3, #24
 80245a8:	9310      	str	r3, [sp, #64]	; 0x40
 80245aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80245ae:	930c      	str	r3, [sp, #48]	; 0x30
 80245b0:	0e1b      	lsrs	r3, r3, #24
 80245b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80245b4:	b289      	uxth	r1, r1
 80245b6:	b280      	uxth	r0, r0
 80245b8:	fb01 f900 	mul.w	r9, r1, r0
 80245bc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80245c0:	0109      	lsls	r1, r1, #4
 80245c2:	eba1 0809 	sub.w	r8, r1, r9
 80245c6:	b280      	uxth	r0, r0
 80245c8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80245cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80245ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80245d0:	fa1f f888 	uxth.w	r8, r8
 80245d4:	1a09      	subs	r1, r1, r0
 80245d6:	b289      	uxth	r1, r1
 80245d8:	fb08 f303 	mul.w	r3, r8, r3
 80245dc:	fb01 330e 	mla	r3, r1, lr, r3
 80245e0:	fb00 3305 	mla	r3, r0, r5, r3
 80245e4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80245e6:	fb09 3305 	mla	r3, r9, r5, r3
 80245ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80245ee:	2b00      	cmp	r3, #0
 80245f0:	f000 80d2 	beq.w	8024798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80245f4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80245f8:	d01b      	beq.n	8024632 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80245fa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80245fe:	fb0e fa0a 	mul.w	sl, lr, sl
 8024602:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024606:	fb0e fe02 	mul.w	lr, lr, r2
 802460a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802460e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024612:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024616:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802461a:	4452      	add	r2, sl
 802461c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024620:	0a12      	lsrs	r2, r2, #8
 8024622:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024626:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802462a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802462e:	ea42 020c 	orr.w	r2, r2, ip
 8024632:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024634:	2dff      	cmp	r5, #255	; 0xff
 8024636:	d021      	beq.n	802467c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8024638:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802463a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802463e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024640:	fb05 fb0b 	mul.w	fp, r5, fp
 8024644:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024646:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802464a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802464c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024650:	fb05 fa0a 	mul.w	sl, r5, sl
 8024654:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024658:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802465c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024660:	44de      	add	lr, fp
 8024662:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024666:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802466a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802466e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024672:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024676:	ea4e 050a 	orr.w	r5, lr, sl
 802467a:	950b      	str	r5, [sp, #44]	; 0x2c
 802467c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802467e:	2dff      	cmp	r5, #255	; 0xff
 8024680:	d021      	beq.n	80246c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8024682:	9d08      	ldr	r5, [sp, #32]
 8024684:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024688:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802468a:	fb05 fb0b 	mul.w	fp, r5, fp
 802468e:	9d08      	ldr	r5, [sp, #32]
 8024690:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024694:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024696:	fb05 fa0e 	mul.w	sl, r5, lr
 802469a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802469e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80246a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80246aa:	44de      	add	lr, fp
 80246ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246c0:	ea4e 050a 	orr.w	r5, lr, sl
 80246c4:	9508      	str	r5, [sp, #32]
 80246c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80246c8:	2dff      	cmp	r5, #255	; 0xff
 80246ca:	d021      	beq.n	8024710 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80246cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80246ce:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80246d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80246d4:	fb05 fb0b 	mul.w	fp, r5, fp
 80246d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80246da:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80246de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80246e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80246e4:	fb05 fa0a 	mul.w	sl, r5, sl
 80246e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80246f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80246f4:	44de      	add	lr, fp
 80246f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024702:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024706:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802470a:	ea4e 050a 	orr.w	r5, lr, sl
 802470e:	950c      	str	r5, [sp, #48]	; 0x30
 8024710:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024712:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024716:	9d08      	ldr	r5, [sp, #32]
 8024718:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802471c:	fb08 fc0c 	mul.w	ip, r8, ip
 8024720:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024724:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024728:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802472a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802472e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024732:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024734:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024738:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802473c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024740:	fb08 f80e 	mul.w	r8, r8, lr
 8024744:	fb01 8202 	mla	r2, r1, r2, r8
 8024748:	9908      	ldr	r1, [sp, #32]
 802474a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802474e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024750:	fb00 220a 	mla	r2, r0, sl, r2
 8024754:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8024758:	fb09 2900 	mla	r9, r9, r0, r2
 802475c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024760:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024764:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024768:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802476c:	ea4c 0c09 	orr.w	ip, ip, r9
 8024770:	2bff      	cmp	r3, #255	; 0xff
 8024772:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8024776:	f040 8091 	bne.w	802489c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802477a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802477e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8024782:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024786:	f022 0207 	bic.w	r2, r2, #7
 802478a:	431a      	orrs	r2, r3
 802478c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8024790:	ea4c 0c02 	orr.w	ip, ip, r2
 8024794:	f8a7 c000 	strh.w	ip, [r7]
 8024798:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802479a:	441c      	add	r4, r3
 802479c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802479e:	441e      	add	r6, r3
 80247a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80247a2:	3b01      	subs	r3, #1
 80247a4:	3702      	adds	r7, #2
 80247a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80247a8:	e6c0      	b.n	802452c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80247aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80247ac:	441c      	add	r4, r3
 80247ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247b0:	441e      	add	r6, r3
 80247b2:	9b07      	ldr	r3, [sp, #28]
 80247b4:	3b01      	subs	r3, #1
 80247b6:	9307      	str	r3, [sp, #28]
 80247b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247ba:	3302      	adds	r3, #2
 80247bc:	930a      	str	r3, [sp, #40]	; 0x28
 80247be:	e695      	b.n	80244ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80247c0:	d024      	beq.n	802480c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80247c2:	9b07      	ldr	r3, [sp, #28]
 80247c4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80247c6:	3b01      	subs	r3, #1
 80247c8:	fb00 4003 	mla	r0, r0, r3, r4
 80247cc:	1400      	asrs	r0, r0, #16
 80247ce:	f53f aeaa 	bmi.w	8024526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80247d2:	3901      	subs	r1, #1
 80247d4:	4288      	cmp	r0, r1
 80247d6:	f6bf aea6 	bge.w	8024526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80247da:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80247dc:	fb01 6303 	mla	r3, r1, r3, r6
 80247e0:	141b      	asrs	r3, r3, #16
 80247e2:	f53f aea0 	bmi.w	8024526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80247e6:	3a01      	subs	r2, #1
 80247e8:	4293      	cmp	r3, r2
 80247ea:	f6bf ae9c 	bge.w	8024526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80247ee:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80247f2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80247f6:	f1bb 0f00 	cmp.w	fp, #0
 80247fa:	f300 809a 	bgt.w	8024932 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80247fe:	9b07      	ldr	r3, [sp, #28]
 8024800:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024806:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802480a:	930a      	str	r3, [sp, #40]	; 0x28
 802480c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802480e:	2b00      	cmp	r3, #0
 8024810:	f340 81eb 	ble.w	8024bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8024814:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802481c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024820:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024822:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024826:	ee31 1a05 	vadd.f32	s2, s2, s10
 802482a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802482e:	eef0 6a62 	vmov.f32	s13, s5
 8024832:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024836:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802483a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802483e:	ee16 4a90 	vmov	r4, s13
 8024842:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024846:	eef0 6a43 	vmov.f32	s13, s6
 802484a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802484e:	ee12 2a90 	vmov	r2, s5
 8024852:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024856:	fb92 f3f3 	sdiv	r3, r2, r3
 802485a:	ee13 2a10 	vmov	r2, s6
 802485e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024860:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024862:	fb92 f3f3 	sdiv	r3, r2, r3
 8024866:	9328      	str	r3, [sp, #160]	; 0xa0
 8024868:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802486a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802486c:	3b01      	subs	r3, #1
 802486e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024872:	9316      	str	r3, [sp, #88]	; 0x58
 8024874:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024876:	bf08      	it	eq
 8024878:	4613      	moveq	r3, r2
 802487a:	ee16 6a90 	vmov	r6, s13
 802487e:	9307      	str	r3, [sp, #28]
 8024880:	eeb0 3a67 	vmov.f32	s6, s15
 8024884:	eef0 2a47 	vmov.f32	s5, s14
 8024888:	e622      	b.n	80244d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802488a:	2800      	cmp	r0, #0
 802488c:	f43f ae92 	beq.w	80245b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024890:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024894:	9308      	str	r3, [sp, #32]
 8024896:	0e1b      	lsrs	r3, r3, #24
 8024898:	9310      	str	r3, [sp, #64]	; 0x40
 802489a:	e68b      	b.n	80245b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802489c:	8839      	ldrh	r1, [r7, #0]
 802489e:	4dd4      	ldr	r5, [pc, #848]	; (8024bf0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 80248a0:	43db      	mvns	r3, r3
 80248a2:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80248a6:	fa5f f883 	uxtb.w	r8, r3
 80248aa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80248ae:	fb0e fe08 	mul.w	lr, lr, r8
 80248b2:	10c8      	asrs	r0, r1, #3
 80248b4:	00cb      	lsls	r3, r1, #3
 80248b6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80248ba:	f10e 0101 	add.w	r1, lr, #1
 80248be:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80248c2:	fb00 f008 	mul.w	r0, r0, r8
 80248c6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80248ca:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80248ce:	f100 0e01 	add.w	lr, r0, #1
 80248d2:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80248d6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80248da:	b2db      	uxtb	r3, r3
 80248dc:	b2c9      	uxtb	r1, r1
 80248de:	00d2      	lsls	r2, r2, #3
 80248e0:	fb03 f308 	mul.w	r3, r3, r8
 80248e4:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80248e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80248ec:	430a      	orrs	r2, r1
 80248ee:	1c59      	adds	r1, r3, #1
 80248f0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80248f4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80248f8:	e748      	b.n	802478c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80248fa:	f112 0801 	adds.w	r8, r2, #1
 80248fe:	f53f af4b 	bmi.w	8024798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024902:	4543      	cmp	r3, r8
 8024904:	f6ff af48 	blt.w	8024798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024908:	f11c 0801 	adds.w	r8, ip, #1
 802490c:	f53f af44 	bmi.w	8024798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024910:	45c6      	cmp	lr, r8
 8024912:	f6ff af41 	blt.w	8024798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024916:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802491a:	fa0f f28e 	sxth.w	r2, lr
 802491e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024922:	9200      	str	r2, [sp, #0]
 8024924:	b21b      	sxth	r3, r3
 8024926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024928:	9819      	ldr	r0, [sp, #100]	; 0x64
 802492a:	4639      	mov	r1, r7
 802492c:	f7ff fc87 	bl	802423e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8024930:	e732      	b.n	8024798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024932:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024934:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024936:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802493a:	1421      	asrs	r1, r4, #16
 802493c:	1433      	asrs	r3, r6, #16
 802493e:	fb07 1303 	mla	r3, r7, r3, r1
 8024942:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024944:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8024948:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802494c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024950:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024954:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024958:	2a00      	cmp	r2, #0
 802495a:	f000 8107 	beq.w	8024b6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 802495e:	684d      	ldr	r5, [r1, #4]
 8024960:	950d      	str	r5, [sp, #52]	; 0x34
 8024962:	0e2d      	lsrs	r5, r5, #24
 8024964:	9514      	str	r5, [sp, #80]	; 0x50
 8024966:	b178      	cbz	r0, 8024988 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024968:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802496c:	3f01      	subs	r7, #1
 802496e:	00bf      	lsls	r7, r7, #2
 8024970:	3704      	adds	r7, #4
 8024972:	eb01 0e07 	add.w	lr, r1, r7
 8024976:	59c9      	ldr	r1, [r1, r7]
 8024978:	9109      	str	r1, [sp, #36]	; 0x24
 802497a:	0e09      	lsrs	r1, r1, #24
 802497c:	9111      	str	r1, [sp, #68]	; 0x44
 802497e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024982:	910e      	str	r1, [sp, #56]	; 0x38
 8024984:	0e09      	lsrs	r1, r1, #24
 8024986:	9115      	str	r1, [sp, #84]	; 0x54
 8024988:	b292      	uxth	r2, r2
 802498a:	b280      	uxth	r0, r0
 802498c:	fb02 f900 	mul.w	r9, r2, r0
 8024990:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024994:	0112      	lsls	r2, r2, #4
 8024996:	eba2 0e09 	sub.w	lr, r2, r9
 802499a:	b280      	uxth	r0, r0
 802499c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80249a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80249a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80249a4:	fa1f fe8e 	uxth.w	lr, lr
 80249a8:	1a09      	subs	r1, r1, r0
 80249aa:	b289      	uxth	r1, r1
 80249ac:	fb0e f202 	mul.w	r2, lr, r2
 80249b0:	fb01 220c 	mla	r2, r1, ip, r2
 80249b4:	fb00 2205 	mla	r2, r0, r5, r2
 80249b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80249ba:	fb09 2205 	mla	r2, r9, r5, r2
 80249be:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80249c2:	2a00      	cmp	r2, #0
 80249c4:	f000 80c9 	beq.w	8024b5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 80249c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80249cc:	d019      	beq.n	8024a02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80249ce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80249d2:	fb0c fa0a 	mul.w	sl, ip, sl
 80249d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249da:	fb0c fc03 	mul.w	ip, ip, r3
 80249de:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80249e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80249ea:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80249ee:	4453      	add	r3, sl
 80249f0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80249f4:	0a1b      	lsrs	r3, r3, #8
 80249f6:	0a3f      	lsrs	r7, r7, #8
 80249f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024a00:	433b      	orrs	r3, r7
 8024a02:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024a04:	2dff      	cmp	r5, #255	; 0xff
 8024a06:	d020      	beq.n	8024a4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8024a08:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024a0a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024a0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024a10:	436f      	muls	r7, r5
 8024a12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024a14:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024a18:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024a1a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a1e:	fb05 fa0a 	mul.w	sl, r5, sl
 8024a22:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a2a:	44bc      	add	ip, r7
 8024a2c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a44:	ea4c 050a 	orr.w	r5, ip, sl
 8024a48:	950d      	str	r5, [sp, #52]	; 0x34
 8024a4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a4c:	2dff      	cmp	r5, #255	; 0xff
 8024a4e:	d020      	beq.n	8024a92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8024a50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a52:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024a56:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a58:	436f      	muls	r7, r5
 8024a5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a5c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024a60:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a62:	fb05 fa0c 	mul.w	sl, r5, ip
 8024a66:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a6e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a72:	44bc      	add	ip, r7
 8024a74:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a8c:	ea4c 050a 	orr.w	r5, ip, sl
 8024a90:	9509      	str	r5, [sp, #36]	; 0x24
 8024a92:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024a94:	2dff      	cmp	r5, #255	; 0xff
 8024a96:	d020      	beq.n	8024ada <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8024a98:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024a9a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024a9e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024aa0:	436f      	muls	r7, r5
 8024aa2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024aa4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024aa8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024aaa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024aae:	fb05 fa0a 	mul.w	sl, r5, sl
 8024ab2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024ab6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024aba:	44bc      	add	ip, r7
 8024abc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024ac0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ac4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ac8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024acc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ad0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ad4:	ea4c 050a 	orr.w	r5, ip, sl
 8024ad8:	950e      	str	r5, [sp, #56]	; 0x38
 8024ada:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024adc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024ae0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024ae2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024ae6:	fb0e f707 	mul.w	r7, lr, r7
 8024aea:	fb01 770c 	mla	r7, r1, ip, r7
 8024aee:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024af2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024af4:	fb00 770c 	mla	r7, r0, ip, r7
 8024af8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024afc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024afe:	fb09 770c 	mla	r7, r9, ip, r7
 8024b02:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024b06:	fb0e fe0c 	mul.w	lr, lr, ip
 8024b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b0e:	fb01 e303 	mla	r3, r1, r3, lr
 8024b12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024b14:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024b18:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024b1a:	fb00 330a 	mla	r3, r0, sl, r3
 8024b1e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024b22:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024b26:	0a3f      	lsrs	r7, r7, #8
 8024b28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b2c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024b30:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024b34:	ea47 070c 	orr.w	r7, r7, ip
 8024b38:	2aff      	cmp	r2, #255	; 0xff
 8024b3a:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024b3e:	d11e      	bne.n	8024b7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 8024b40:	097a      	lsrs	r2, r7, #5
 8024b42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8024b46:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024b4a:	f023 0307 	bic.w	r3, r3, #7
 8024b4e:	4313      	orrs	r3, r2
 8024b50:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024b54:	431f      	orrs	r7, r3
 8024b56:	f8a8 7000 	strh.w	r7, [r8]
 8024b5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024b5c:	441c      	add	r4, r3
 8024b5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b60:	f108 0802 	add.w	r8, r8, #2
 8024b64:	441e      	add	r6, r3
 8024b66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024b6a:	e644      	b.n	80247f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024b6c:	2800      	cmp	r0, #0
 8024b6e:	f43f af0b 	beq.w	8024988 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024b72:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024b76:	9109      	str	r1, [sp, #36]	; 0x24
 8024b78:	0e09      	lsrs	r1, r1, #24
 8024b7a:	9111      	str	r1, [sp, #68]	; 0x44
 8024b7c:	e704      	b.n	8024988 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024b7e:	f8b8 1000 	ldrh.w	r1, [r8]
 8024b82:	43d2      	mvns	r2, r2
 8024b84:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024b88:	fa5f fe82 	uxtb.w	lr, r2
 8024b8c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024b90:	fb0c fc0e 	mul.w	ip, ip, lr
 8024b94:	10c8      	asrs	r0, r1, #3
 8024b96:	00ca      	lsls	r2, r1, #3
 8024b98:	f10c 0101 	add.w	r1, ip, #1
 8024b9c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024ba0:	0c39      	lsrs	r1, r7, #16
 8024ba2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024ba6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024baa:	4911      	ldr	r1, [pc, #68]	; (8024bf0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024bac:	fb00 f00e 	mul.w	r0, r0, lr
 8024bb0:	fa5f fc8c 	uxtb.w	ip, ip
 8024bb4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8024bb8:	b2d2      	uxtb	r2, r2
 8024bba:	1c41      	adds	r1, r0, #1
 8024bbc:	fb02 f20e 	mul.w	r2, r2, lr
 8024bc0:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024bc4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024bc8:	1c51      	adds	r1, r2, #1
 8024bca:	00c0      	lsls	r0, r0, #3
 8024bcc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024bd0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024bd4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024bd8:	ea4c 0c00 	orr.w	ip, ip, r0
 8024bdc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024be0:	ea47 0c0c 	orr.w	ip, r7, ip
 8024be4:	f8a8 c000 	strh.w	ip, [r8]
 8024be8:	e7b7      	b.n	8024b5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8024bea:	b01b      	add	sp, #108	; 0x6c
 8024bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bf0:	fffff800 	.word	0xfffff800

08024bf4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024bf8:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024bfc:	2d00      	cmp	r5, #0
 8024bfe:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024c02:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024c06:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024c0a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024c0e:	fb05 0e03 	mla	lr, r5, r3, r0
 8024c12:	f2c0 808c 	blt.w	8024d2e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024c16:	45a9      	cmp	r9, r5
 8024c18:	f340 8089 	ble.w	8024d2e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024c1c:	2800      	cmp	r0, #0
 8024c1e:	f2c0 8084 	blt.w	8024d2a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024c22:	4580      	cmp	r8, r0
 8024c24:	f340 8081 	ble.w	8024d2a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024c28:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024c2c:	f01e 0f01 	tst.w	lr, #1
 8024c30:	5d16      	ldrb	r6, [r2, r4]
 8024c32:	bf0c      	ite	eq
 8024c34:	f006 060f 	andeq.w	r6, r6, #15
 8024c38:	1136      	asrne	r6, r6, #4
 8024c3a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024c3e:	b2f6      	uxtb	r6, r6
 8024c40:	1c44      	adds	r4, r0, #1
 8024c42:	d477      	bmi.n	8024d34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024c44:	45a0      	cmp	r8, r4
 8024c46:	dd75      	ble.n	8024d34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024c48:	2f00      	cmp	r7, #0
 8024c4a:	d075      	beq.n	8024d38 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8024c4c:	f10e 0a01 	add.w	sl, lr, #1
 8024c50:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024c54:	f01a 0f01 	tst.w	sl, #1
 8024c58:	5d14      	ldrb	r4, [r2, r4]
 8024c5a:	bf0c      	ite	eq
 8024c5c:	f004 040f 	andeq.w	r4, r4, #15
 8024c60:	1124      	asrne	r4, r4, #4
 8024c62:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024c66:	b2e4      	uxtb	r4, r4
 8024c68:	3501      	adds	r5, #1
 8024c6a:	d469      	bmi.n	8024d40 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024c6c:	45a9      	cmp	r9, r5
 8024c6e:	dd67      	ble.n	8024d40 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024c70:	f1bc 0f00 	cmp.w	ip, #0
 8024c74:	d067      	beq.n	8024d46 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8024c76:	2800      	cmp	r0, #0
 8024c78:	db60      	blt.n	8024d3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024c7a:	4580      	cmp	r8, r0
 8024c7c:	dd5e      	ble.n	8024d3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024c7e:	eb03 090e 	add.w	r9, r3, lr
 8024c82:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024c86:	f019 0f01 	tst.w	r9, #1
 8024c8a:	5d55      	ldrb	r5, [r2, r5]
 8024c8c:	bf0c      	ite	eq
 8024c8e:	f005 050f 	andeq.w	r5, r5, #15
 8024c92:	112d      	asrne	r5, r5, #4
 8024c94:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024c98:	b2ed      	uxtb	r5, r5
 8024c9a:	3001      	adds	r0, #1
 8024c9c:	d456      	bmi.n	8024d4c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024c9e:	4580      	cmp	r8, r0
 8024ca0:	dd54      	ble.n	8024d4c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024ca2:	2f00      	cmp	r7, #0
 8024ca4:	d054      	beq.n	8024d50 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8024ca6:	3301      	adds	r3, #1
 8024ca8:	449e      	add	lr, r3
 8024caa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024cae:	f01e 0f01 	tst.w	lr, #1
 8024cb2:	5cd0      	ldrb	r0, [r2, r3]
 8024cb4:	bf0c      	ite	eq
 8024cb6:	f000 000f 	andeq.w	r0, r0, #15
 8024cba:	1100      	asrne	r0, r0, #4
 8024cbc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024cc0:	b2c3      	uxtb	r3, r0
 8024cc2:	b2ba      	uxth	r2, r7
 8024cc4:	fa1f fc8c 	uxth.w	ip, ip
 8024cc8:	fb02 f00c 	mul.w	r0, r2, ip
 8024ccc:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024cd0:	0112      	lsls	r2, r2, #4
 8024cd2:	fa1f fc8c 	uxth.w	ip, ip
 8024cd6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024cda:	1a12      	subs	r2, r2, r0
 8024cdc:	eba7 070c 	sub.w	r7, r7, ip
 8024ce0:	b292      	uxth	r2, r2
 8024ce2:	b2bf      	uxth	r7, r7
 8024ce4:	4362      	muls	r2, r4
 8024ce6:	fb06 2207 	mla	r2, r6, r7, r2
 8024cea:	fb0c 2505 	mla	r5, ip, r5, r2
 8024cee:	fb00 5303 	mla	r3, r0, r3, r5
 8024cf2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024cf6:	b1b3      	cbz	r3, 8024d26 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024cf8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024cfc:	435a      	muls	r2, r3
 8024cfe:	1c53      	adds	r3, r2, #1
 8024d00:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024d04:	4a2d      	ldr	r2, [pc, #180]	; (8024dbc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8024d06:	121b      	asrs	r3, r3, #8
 8024d08:	6812      	ldr	r2, [r2, #0]
 8024d0a:	2bff      	cmp	r3, #255	; 0xff
 8024d0c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024d10:	d120      	bne.n	8024d54 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8024d12:	4b2b      	ldr	r3, [pc, #172]	; (8024dc0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8024d14:	0950      	lsrs	r0, r2, #5
 8024d16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d1a:	4033      	ands	r3, r6
 8024d1c:	4318      	orrs	r0, r3
 8024d1e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024d22:	4302      	orrs	r2, r0
 8024d24:	800a      	strh	r2, [r1, #0]
 8024d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024d2a:	2600      	movs	r6, #0
 8024d2c:	e788      	b.n	8024c40 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8024d2e:	2400      	movs	r4, #0
 8024d30:	4626      	mov	r6, r4
 8024d32:	e799      	b.n	8024c68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024d34:	2400      	movs	r4, #0
 8024d36:	e797      	b.n	8024c68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024d38:	463c      	mov	r4, r7
 8024d3a:	e795      	b.n	8024c68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024d3c:	2500      	movs	r5, #0
 8024d3e:	e7ac      	b.n	8024c9a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8024d40:	2300      	movs	r3, #0
 8024d42:	461d      	mov	r5, r3
 8024d44:	e7bd      	b.n	8024cc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024d46:	4663      	mov	r3, ip
 8024d48:	4665      	mov	r5, ip
 8024d4a:	e7ba      	b.n	8024cc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024d4c:	2300      	movs	r3, #0
 8024d4e:	e7b8      	b.n	8024cc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024d50:	463b      	mov	r3, r7
 8024d52:	e7b6      	b.n	8024cc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024d54:	880d      	ldrh	r5, [r1, #0]
 8024d56:	b29f      	uxth	r7, r3
 8024d58:	122c      	asrs	r4, r5, #8
 8024d5a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024d5e:	43db      	mvns	r3, r3
 8024d60:	b2db      	uxtb	r3, r3
 8024d62:	fb10 f007 	smulbb	r0, r0, r7
 8024d66:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024d6a:	fb04 0403 	mla	r4, r4, r3, r0
 8024d6e:	b2f6      	uxtb	r6, r6
 8024d70:	10e8      	asrs	r0, r5, #3
 8024d72:	b2d2      	uxtb	r2, r2
 8024d74:	00ed      	lsls	r5, r5, #3
 8024d76:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024d7a:	fb12 f207 	smulbb	r2, r2, r7
 8024d7e:	fb16 f607 	smulbb	r6, r6, r7
 8024d82:	b2ed      	uxtb	r5, r5
 8024d84:	b2a4      	uxth	r4, r4
 8024d86:	fb00 6603 	mla	r6, r0, r3, r6
 8024d8a:	fb05 2303 	mla	r3, r5, r3, r2
 8024d8e:	b29a      	uxth	r2, r3
 8024d90:	1c63      	adds	r3, r4, #1
 8024d92:	b2b0      	uxth	r0, r6
 8024d94:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024d98:	1c53      	adds	r3, r2, #1
 8024d9a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024d9e:	1c42      	adds	r2, r0, #1
 8024da0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024da4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024da8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024dac:	0940      	lsrs	r0, r0, #5
 8024dae:	4323      	orrs	r3, r4
 8024db0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024db4:	4303      	orrs	r3, r0
 8024db6:	800b      	strh	r3, [r1, #0]
 8024db8:	e7b5      	b.n	8024d26 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024dba:	bf00      	nop
 8024dbc:	20025838 	.word	0x20025838
 8024dc0:	00fff800 	.word	0x00fff800

08024dc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dc8:	b097      	sub	sp, #92	; 0x5c
 8024dca:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024dce:	9214      	str	r2, [sp, #80]	; 0x50
 8024dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8024dd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024dd4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024dd8:	910d      	str	r1, [sp, #52]	; 0x34
 8024dda:	930f      	str	r3, [sp, #60]	; 0x3c
 8024ddc:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024de0:	9015      	str	r0, [sp, #84]	; 0x54
 8024de2:	6850      	ldr	r0, [r2, #4]
 8024de4:	6812      	ldr	r2, [r2, #0]
 8024de6:	fb00 1303 	mla	r3, r0, r3, r1
 8024dea:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024dee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024df0:	689b      	ldr	r3, [r3, #8]
 8024df2:	3301      	adds	r3, #1
 8024df4:	f023 0301 	bic.w	r3, r3, #1
 8024df8:	930a      	str	r3, [sp, #40]	; 0x28
 8024dfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024dfc:	681f      	ldr	r7, [r3, #0]
 8024dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024e00:	2b00      	cmp	r3, #0
 8024e02:	dc03      	bgt.n	8024e0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024e04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024e06:	2b00      	cmp	r3, #0
 8024e08:	f340 8287 	ble.w	802531a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024e0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024e0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024e12:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024e16:	1e48      	subs	r0, r1, #1
 8024e18:	f102 3cff 	add.w	ip, r2, #4294967295
 8024e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e1e:	2b00      	cmp	r3, #0
 8024e20:	f340 80c4 	ble.w	8024fac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024e24:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024e28:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024e2c:	d406      	bmi.n	8024e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024e2e:	4586      	cmp	lr, r0
 8024e30:	da04      	bge.n	8024e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024e32:	2b00      	cmp	r3, #0
 8024e34:	db02      	blt.n	8024e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024e36:	4563      	cmp	r3, ip
 8024e38:	f2c0 80b9 	blt.w	8024fae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024e3c:	f11e 0e01 	adds.w	lr, lr, #1
 8024e40:	f100 80aa 	bmi.w	8024f98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024e44:	4571      	cmp	r1, lr
 8024e46:	f2c0 80a7 	blt.w	8024f98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024e4a:	3301      	adds	r3, #1
 8024e4c:	f100 80a4 	bmi.w	8024f98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024e50:	429a      	cmp	r2, r3
 8024e52:	f2c0 80a1 	blt.w	8024f98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e58:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8024e5c:	930e      	str	r3, [sp, #56]	; 0x38
 8024e5e:	46c8      	mov	r8, r9
 8024e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024e62:	2b00      	cmp	r3, #0
 8024e64:	f340 80c3 	ble.w	8024fee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024e68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024e6a:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024e6e:	1423      	asrs	r3, r4, #16
 8024e70:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024e74:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024e78:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024e7c:	f100 814d 	bmi.w	802511a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024e80:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024e84:	455b      	cmp	r3, fp
 8024e86:	f280 8148 	bge.w	802511a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024e8a:	2800      	cmp	r0, #0
 8024e8c:	f2c0 8145 	blt.w	802511a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024e90:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024e94:	4558      	cmp	r0, fp
 8024e96:	f280 8140 	bge.w	802511a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024e9a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024e9c:	fb00 3305 	mla	r3, r0, r5, r3
 8024ea0:	0858      	lsrs	r0, r3, #1
 8024ea2:	07dd      	lsls	r5, r3, #31
 8024ea4:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024ea8:	bf54      	ite	pl
 8024eaa:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024eae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024eb2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024eb6:	fa5f fc8c 	uxtb.w	ip, ip
 8024eba:	2a00      	cmp	r2, #0
 8024ebc:	f000 80db 	beq.w	8025076 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8024ec0:	1c58      	adds	r0, r3, #1
 8024ec2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024ec6:	07c0      	lsls	r0, r0, #31
 8024ec8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024ecc:	bf54      	ite	pl
 8024ece:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024ed2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024ed6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024eda:	fa5f f08e 	uxtb.w	r0, lr
 8024ede:	9010      	str	r0, [sp, #64]	; 0x40
 8024ee0:	b1c9      	cbz	r1, 8024f16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8024ee2:	4453      	add	r3, sl
 8024ee4:	0858      	lsrs	r0, r3, #1
 8024ee6:	07dd      	lsls	r5, r3, #31
 8024ee8:	5c38      	ldrb	r0, [r7, r0]
 8024eea:	bf54      	ite	pl
 8024eec:	f000 000f 	andpl.w	r0, r0, #15
 8024ef0:	1100      	asrmi	r0, r0, #4
 8024ef2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024ef6:	3301      	adds	r3, #1
 8024ef8:	b2c0      	uxtb	r0, r0
 8024efa:	900b      	str	r0, [sp, #44]	; 0x2c
 8024efc:	0858      	lsrs	r0, r3, #1
 8024efe:	07dd      	lsls	r5, r3, #31
 8024f00:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024f04:	bf54      	ite	pl
 8024f06:	f00e 030f 	andpl.w	r3, lr, #15
 8024f0a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024f0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024f12:	b2db      	uxtb	r3, r3
 8024f14:	9311      	str	r3, [sp, #68]	; 0x44
 8024f16:	b292      	uxth	r2, r2
 8024f18:	b289      	uxth	r1, r1
 8024f1a:	fb02 f301 	mul.w	r3, r2, r1
 8024f1e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024f22:	0112      	lsls	r2, r2, #4
 8024f24:	b289      	uxth	r1, r1
 8024f26:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024f2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024f2c:	1ad2      	subs	r2, r2, r3
 8024f2e:	1a40      	subs	r0, r0, r1
 8024f30:	b292      	uxth	r2, r2
 8024f32:	436a      	muls	r2, r5
 8024f34:	b280      	uxth	r0, r0
 8024f36:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024f3c:	fb01 c102 	mla	r1, r1, r2, ip
 8024f40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024f42:	fb03 1302 	mla	r3, r3, r2, r1
 8024f46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024f4a:	b1db      	cbz	r3, 8024f84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8024f4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024f4e:	4353      	muls	r3, r2
 8024f50:	1c5a      	adds	r2, r3, #1
 8024f52:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024f56:	4ac6      	ldr	r2, [pc, #792]	; (8025270 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8024f58:	121b      	asrs	r3, r3, #8
 8024f5a:	6812      	ldr	r2, [r2, #0]
 8024f5c:	2bff      	cmp	r3, #255	; 0xff
 8024f5e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024f62:	f040 8099 	bne.w	8025098 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8024f66:	0953      	lsrs	r3, r2, #5
 8024f68:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024f6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024f70:	f02c 0c07 	bic.w	ip, ip, #7
 8024f74:	ea43 0c0c 	orr.w	ip, r3, ip
 8024f78:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024f7c:	ea4c 0202 	orr.w	r2, ip, r2
 8024f80:	f8a8 2000 	strh.w	r2, [r8]
 8024f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024f86:	441c      	add	r4, r3
 8024f88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f8a:	441e      	add	r6, r3
 8024f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f8e:	3b01      	subs	r3, #1
 8024f90:	f108 0802 	add.w	r8, r8, #2
 8024f94:	930e      	str	r3, [sp, #56]	; 0x38
 8024f96:	e763      	b.n	8024e60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024f98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024f9a:	441c      	add	r4, r3
 8024f9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f9e:	441e      	add	r6, r3
 8024fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fa2:	3b01      	subs	r3, #1
 8024fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8024fa6:	f109 0902 	add.w	r9, r9, #2
 8024faa:	e737      	b.n	8024e1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024fac:	d024      	beq.n	8024ff8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fb0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024fb2:	3b01      	subs	r3, #1
 8024fb4:	fb00 4003 	mla	r0, r0, r3, r4
 8024fb8:	1400      	asrs	r0, r0, #16
 8024fba:	f53f af4c 	bmi.w	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024fbe:	3901      	subs	r1, #1
 8024fc0:	4288      	cmp	r0, r1
 8024fc2:	f6bf af48 	bge.w	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024fc6:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024fc8:	fb01 6303 	mla	r3, r1, r3, r6
 8024fcc:	141b      	asrs	r3, r3, #16
 8024fce:	f53f af42 	bmi.w	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024fd2:	3a01      	subs	r2, #1
 8024fd4:	4293      	cmp	r3, r2
 8024fd6:	f6bf af3e 	bge.w	8024e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024fda:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8024fde:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8024fe4:	46c8      	mov	r8, r9
 8024fe6:	f1bb 0f00 	cmp.w	fp, #0
 8024fea:	f300 80b7 	bgt.w	802515c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8024fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ff0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024ff4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	f340 818d 	ble.w	802531a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8025000:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025008:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802500c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802500e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025012:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025016:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802501a:	eef0 6a62 	vmov.f32	s13, s5
 802501e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025022:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025026:	ee77 2a62 	vsub.f32	s5, s14, s5
 802502a:	ee16 4a90 	vmov	r4, s13
 802502e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025032:	eef0 6a43 	vmov.f32	s13, s6
 8025036:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802503a:	ee12 2a90 	vmov	r2, s5
 802503e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025042:	fb92 f3f3 	sdiv	r3, r2, r3
 8025046:	ee13 2a10 	vmov	r2, s6
 802504a:	9323      	str	r3, [sp, #140]	; 0x8c
 802504c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802504e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025052:	9324      	str	r3, [sp, #144]	; 0x90
 8025054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025056:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025058:	3b01      	subs	r3, #1
 802505a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802505e:	930d      	str	r3, [sp, #52]	; 0x34
 8025060:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025062:	bf08      	it	eq
 8025064:	4613      	moveq	r3, r2
 8025066:	ee16 6a90 	vmov	r6, s13
 802506a:	9309      	str	r3, [sp, #36]	; 0x24
 802506c:	eeb0 3a67 	vmov.f32	s6, s15
 8025070:	eef0 2a47 	vmov.f32	s5, s14
 8025074:	e6c3      	b.n	8024dfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025076:	2900      	cmp	r1, #0
 8025078:	f43f af4d 	beq.w	8024f16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802507c:	eb0a 0003 	add.w	r0, sl, r3
 8025080:	0843      	lsrs	r3, r0, #1
 8025082:	07c0      	lsls	r0, r0, #31
 8025084:	5cfb      	ldrb	r3, [r7, r3]
 8025086:	bf54      	ite	pl
 8025088:	f003 030f 	andpl.w	r3, r3, #15
 802508c:	111b      	asrmi	r3, r3, #4
 802508e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025092:	b2db      	uxtb	r3, r3
 8025094:	930b      	str	r3, [sp, #44]	; 0x2c
 8025096:	e73e      	b.n	8024f16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8025098:	f8b8 e000 	ldrh.w	lr, [r8]
 802509c:	fa1f fb83 	uxth.w	fp, r3
 80250a0:	ea4f 202e 	mov.w	r0, lr, asr #8
 80250a4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80250a8:	43db      	mvns	r3, r3
 80250aa:	b2db      	uxtb	r3, r3
 80250ac:	fb11 f10b 	smulbb	r1, r1, fp
 80250b0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80250b4:	fb00 1003 	mla	r0, r0, r3, r1
 80250b8:	fa5f fc8c 	uxtb.w	ip, ip
 80250bc:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80250c0:	b2d2      	uxtb	r2, r2
 80250c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80250c6:	b280      	uxth	r0, r0
 80250c8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80250cc:	fb1c fc0b 	smulbb	ip, ip, fp
 80250d0:	fa5f fe8e 	uxtb.w	lr, lr
 80250d4:	fb12 fb0b 	smulbb	fp, r2, fp
 80250d8:	fb01 cc03 	mla	ip, r1, r3, ip
 80250dc:	fb0e bb03 	mla	fp, lr, r3, fp
 80250e0:	1c43      	adds	r3, r0, #1
 80250e2:	fa1f fc8c 	uxth.w	ip, ip
 80250e6:	fa1f fb8b 	uxth.w	fp, fp
 80250ea:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80250ee:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80250f2:	f10c 0101 	add.w	r1, ip, #1
 80250f6:	f10b 0001 	add.w	r0, fp, #1
 80250fa:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80250fe:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025102:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025106:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802510a:	4318      	orrs	r0, r3
 802510c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025110:	ea40 000c 	orr.w	r0, r0, ip
 8025114:	f8a8 0000 	strh.w	r0, [r8]
 8025118:	e734      	b.n	8024f84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802511a:	f113 0b01 	adds.w	fp, r3, #1
 802511e:	f53f af31 	bmi.w	8024f84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025122:	45dc      	cmp	ip, fp
 8025124:	f6ff af2e 	blt.w	8024f84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025128:	f110 0b01 	adds.w	fp, r0, #1
 802512c:	f53f af2a 	bmi.w	8024f84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025130:	45de      	cmp	lr, fp
 8025132:	f6ff af27 	blt.w	8024f84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025136:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025138:	9302      	str	r3, [sp, #8]
 802513a:	fa0f f38e 	sxth.w	r3, lr
 802513e:	9301      	str	r3, [sp, #4]
 8025140:	fa0f f38c 	sxth.w	r3, ip
 8025144:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025148:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802514c:	9300      	str	r3, [sp, #0]
 802514e:	463a      	mov	r2, r7
 8025150:	4653      	mov	r3, sl
 8025152:	4641      	mov	r1, r8
 8025154:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025156:	f7ff fd4d 	bl	8024bf4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802515a:	e713      	b.n	8024f84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802515c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802515e:	1422      	asrs	r2, r4, #16
 8025160:	1433      	asrs	r3, r6, #16
 8025162:	fb05 2303 	mla	r3, r5, r3, r2
 8025166:	085a      	lsrs	r2, r3, #1
 8025168:	07dd      	lsls	r5, r3, #31
 802516a:	5cba      	ldrb	r2, [r7, r2]
 802516c:	bf54      	ite	pl
 802516e:	f002 020f 	andpl.w	r2, r2, #15
 8025172:	1112      	asrmi	r2, r2, #4
 8025174:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025178:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802517c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025180:	b2d2      	uxtb	r2, r2
 8025182:	2900      	cmp	r1, #0
 8025184:	d076      	beq.n	8025274 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025186:	f103 0e01 	add.w	lr, r3, #1
 802518a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802518e:	f01e 0f01 	tst.w	lr, #1
 8025192:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025196:	bf0c      	ite	eq
 8025198:	f00c 0c0f 	andeq.w	ip, ip, #15
 802519c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80251a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80251a4:	fa5f f58c 	uxtb.w	r5, ip
 80251a8:	9512      	str	r5, [sp, #72]	; 0x48
 80251aa:	b300      	cbz	r0, 80251ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80251ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80251ae:	442b      	add	r3, r5
 80251b0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80251b4:	07dd      	lsls	r5, r3, #31
 80251b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80251ba:	bf54      	ite	pl
 80251bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80251c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80251c4:	3301      	adds	r3, #1
 80251c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80251ca:	fa5f f58c 	uxtb.w	r5, ip
 80251ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80251d2:	950c      	str	r5, [sp, #48]	; 0x30
 80251d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80251d8:	07dd      	lsls	r5, r3, #31
 80251da:	bf54      	ite	pl
 80251dc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80251e0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80251e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80251e8:	fa5f f38c 	uxtb.w	r3, ip
 80251ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80251ee:	b289      	uxth	r1, r1
 80251f0:	b280      	uxth	r0, r0
 80251f2:	fb01 f300 	mul.w	r3, r1, r0
 80251f6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80251fa:	0109      	lsls	r1, r1, #4
 80251fc:	b280      	uxth	r0, r0
 80251fe:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8025202:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025204:	1ac9      	subs	r1, r1, r3
 8025206:	ebac 0c00 	sub.w	ip, ip, r0
 802520a:	b289      	uxth	r1, r1
 802520c:	4369      	muls	r1, r5
 802520e:	fa1f fc8c 	uxth.w	ip, ip
 8025212:	fb02 120c 	mla	r2, r2, ip, r1
 8025216:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025218:	fb00 2001 	mla	r0, r0, r1, r2
 802521c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802521e:	fb03 0302 	mla	r3, r3, r2, r0
 8025222:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025226:	b1d3      	cbz	r3, 802525e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8025228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802522a:	4353      	muls	r3, r2
 802522c:	1c5a      	adds	r2, r3, #1
 802522e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025232:	4a0f      	ldr	r2, [pc, #60]	; (8025270 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8025234:	121b      	asrs	r3, r3, #8
 8025236:	6812      	ldr	r2, [r2, #0]
 8025238:	2bff      	cmp	r3, #255	; 0xff
 802523a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802523e:	d12d      	bne.n	802529c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025240:	0953      	lsrs	r3, r2, #5
 8025242:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8025246:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802524a:	f02c 0c07 	bic.w	ip, ip, #7
 802524e:	ea43 0c0c 	orr.w	ip, r3, ip
 8025252:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025256:	ea4c 0202 	orr.w	r2, ip, r2
 802525a:	f8a8 2000 	strh.w	r2, [r8]
 802525e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025260:	441c      	add	r4, r3
 8025262:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025264:	f108 0802 	add.w	r8, r8, #2
 8025268:	441e      	add	r6, r3
 802526a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802526e:	e6ba      	b.n	8024fe6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8025270:	20025838 	.word	0x20025838
 8025274:	2800      	cmp	r0, #0
 8025276:	d0ba      	beq.n	80251ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025278:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802527a:	442b      	add	r3, r5
 802527c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025280:	07db      	lsls	r3, r3, #31
 8025282:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025286:	bf54      	ite	pl
 8025288:	f00c 0c0f 	andpl.w	ip, ip, #15
 802528c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025290:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025294:	fa5f f38c 	uxtb.w	r3, ip
 8025298:	930c      	str	r3, [sp, #48]	; 0x30
 802529a:	e7a8      	b.n	80251ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802529c:	f8b8 e000 	ldrh.w	lr, [r8]
 80252a0:	fa1f fa83 	uxth.w	sl, r3
 80252a4:	ea4f 202e 	mov.w	r0, lr, asr #8
 80252a8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80252ac:	43db      	mvns	r3, r3
 80252ae:	b2db      	uxtb	r3, r3
 80252b0:	fb11 f10a 	smulbb	r1, r1, sl
 80252b4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80252b8:	fb00 1003 	mla	r0, r0, r3, r1
 80252bc:	b2d2      	uxtb	r2, r2
 80252be:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80252c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80252c6:	fa5f fe8e 	uxtb.w	lr, lr
 80252ca:	fb12 f20a 	smulbb	r2, r2, sl
 80252ce:	fb0e 2203 	mla	r2, lr, r3, r2
 80252d2:	fa5f fc8c 	uxtb.w	ip, ip
 80252d6:	b280      	uxth	r0, r0
 80252d8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80252dc:	b292      	uxth	r2, r2
 80252de:	fb1c fc0a 	smulbb	ip, ip, sl
 80252e2:	fb01 cc03 	mla	ip, r1, r3, ip
 80252e6:	1c43      	adds	r3, r0, #1
 80252e8:	1c51      	adds	r1, r2, #1
 80252ea:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80252ee:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80252f2:	fa1f fc8c 	uxth.w	ip, ip
 80252f6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80252fa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80252fe:	4308      	orrs	r0, r1
 8025300:	f10c 0101 	add.w	r1, ip, #1
 8025304:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025308:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802530c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025310:	ea40 000c 	orr.w	r0, r0, ip
 8025314:	f8a8 0000 	strh.w	r0, [r8]
 8025318:	e7a1      	b.n	802525e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802531a:	b017      	add	sp, #92	; 0x5c
 802531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025320 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8025320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025324:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8025328:	2d00      	cmp	r5, #0
 802532a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802532e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025332:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8025336:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802533a:	fb05 0e03 	mla	lr, r5, r3, r0
 802533e:	f2c0 80b0 	blt.w	80254a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025342:	45a9      	cmp	r9, r5
 8025344:	f340 80ad 	ble.w	80254a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025348:	2800      	cmp	r0, #0
 802534a:	f2c0 80a8 	blt.w	802549e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802534e:	4580      	cmp	r8, r0
 8025350:	f340 80a5 	ble.w	802549e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025354:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025358:	f01e 0f01 	tst.w	lr, #1
 802535c:	5d16      	ldrb	r6, [r2, r4]
 802535e:	bf0c      	ite	eq
 8025360:	f006 060f 	andeq.w	r6, r6, #15
 8025364:	1136      	asrne	r6, r6, #4
 8025366:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802536a:	b2f6      	uxtb	r6, r6
 802536c:	1c44      	adds	r4, r0, #1
 802536e:	f100 809b 	bmi.w	80254a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025372:	45a0      	cmp	r8, r4
 8025374:	f340 8098 	ble.w	80254a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025378:	2f00      	cmp	r7, #0
 802537a:	f000 8097 	beq.w	80254ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802537e:	f10e 0a01 	add.w	sl, lr, #1
 8025382:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8025386:	f01a 0f01 	tst.w	sl, #1
 802538a:	5d14      	ldrb	r4, [r2, r4]
 802538c:	bf0c      	ite	eq
 802538e:	f004 040f 	andeq.w	r4, r4, #15
 8025392:	1124      	asrne	r4, r4, #4
 8025394:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025398:	b2e4      	uxtb	r4, r4
 802539a:	3501      	adds	r5, #1
 802539c:	f100 808a 	bmi.w	80254b4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80253a0:	45a9      	cmp	r9, r5
 80253a2:	f340 8087 	ble.w	80254b4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80253a6:	f1bc 0f00 	cmp.w	ip, #0
 80253aa:	f000 8086 	beq.w	80254ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 80253ae:	2800      	cmp	r0, #0
 80253b0:	db7e      	blt.n	80254b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80253b2:	4580      	cmp	r8, r0
 80253b4:	dd7c      	ble.n	80254b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80253b6:	eb03 090e 	add.w	r9, r3, lr
 80253ba:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80253be:	f019 0f01 	tst.w	r9, #1
 80253c2:	5d55      	ldrb	r5, [r2, r5]
 80253c4:	bf0c      	ite	eq
 80253c6:	f005 050f 	andeq.w	r5, r5, #15
 80253ca:	112d      	asrne	r5, r5, #4
 80253cc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80253d0:	b2ed      	uxtb	r5, r5
 80253d2:	3001      	adds	r0, #1
 80253d4:	d474      	bmi.n	80254c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80253d6:	4580      	cmp	r8, r0
 80253d8:	dd72      	ble.n	80254c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80253da:	2f00      	cmp	r7, #0
 80253dc:	d072      	beq.n	80254c4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80253de:	3301      	adds	r3, #1
 80253e0:	449e      	add	lr, r3
 80253e2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80253e6:	f01e 0f01 	tst.w	lr, #1
 80253ea:	5cd0      	ldrb	r0, [r2, r3]
 80253ec:	bf0c      	ite	eq
 80253ee:	f000 000f 	andeq.w	r0, r0, #15
 80253f2:	1100      	asrne	r0, r0, #4
 80253f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80253f8:	b2c3      	uxtb	r3, r0
 80253fa:	b2ba      	uxth	r2, r7
 80253fc:	fa1f fc8c 	uxth.w	ip, ip
 8025400:	fb02 f00c 	mul.w	r0, r2, ip
 8025404:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8025408:	0112      	lsls	r2, r2, #4
 802540a:	fa1f fc8c 	uxth.w	ip, ip
 802540e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025412:	1a12      	subs	r2, r2, r0
 8025414:	eba7 070c 	sub.w	r7, r7, ip
 8025418:	b292      	uxth	r2, r2
 802541a:	b2bf      	uxth	r7, r7
 802541c:	4362      	muls	r2, r4
 802541e:	fb06 2207 	mla	r2, r6, r7, r2
 8025422:	fb0c 2505 	mla	r5, ip, r5, r2
 8025426:	fb00 5303 	mla	r3, r0, r3, r5
 802542a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802542e:	b3a3      	cbz	r3, 802549a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8025430:	4a25      	ldr	r2, [pc, #148]	; (80254c8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8025432:	880e      	ldrh	r6, [r1, #0]
 8025434:	6815      	ldr	r5, [r2, #0]
 8025436:	1234      	asrs	r4, r6, #8
 8025438:	b29a      	uxth	r2, r3
 802543a:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802543e:	43db      	mvns	r3, r3
 8025440:	b2db      	uxtb	r3, r3
 8025442:	fb10 f002 	smulbb	r0, r0, r2
 8025446:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802544a:	fb04 0403 	mla	r4, r4, r3, r0
 802544e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8025452:	10f0      	asrs	r0, r6, #3
 8025454:	b2ed      	uxtb	r5, r5
 8025456:	00f6      	lsls	r6, r6, #3
 8025458:	fb17 f702 	smulbb	r7, r7, r2
 802545c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025460:	fb15 f202 	smulbb	r2, r5, r2
 8025464:	b2f6      	uxtb	r6, r6
 8025466:	b2a4      	uxth	r4, r4
 8025468:	fb00 7003 	mla	r0, r0, r3, r7
 802546c:	fb06 2303 	mla	r3, r6, r3, r2
 8025470:	b29a      	uxth	r2, r3
 8025472:	1c63      	adds	r3, r4, #1
 8025474:	b280      	uxth	r0, r0
 8025476:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802547a:	1c53      	adds	r3, r2, #1
 802547c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025480:	1c42      	adds	r2, r0, #1
 8025482:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025486:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802548a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802548e:	0940      	lsrs	r0, r0, #5
 8025490:	4323      	orrs	r3, r4
 8025492:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025496:	4303      	orrs	r3, r0
 8025498:	800b      	strh	r3, [r1, #0]
 802549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802549e:	2600      	movs	r6, #0
 80254a0:	e764      	b.n	802536c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 80254a2:	2400      	movs	r4, #0
 80254a4:	4626      	mov	r6, r4
 80254a6:	e778      	b.n	802539a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80254a8:	2400      	movs	r4, #0
 80254aa:	e776      	b.n	802539a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80254ac:	463c      	mov	r4, r7
 80254ae:	e774      	b.n	802539a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80254b0:	2500      	movs	r5, #0
 80254b2:	e78e      	b.n	80253d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 80254b4:	2300      	movs	r3, #0
 80254b6:	461d      	mov	r5, r3
 80254b8:	e79f      	b.n	80253fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80254ba:	4663      	mov	r3, ip
 80254bc:	4665      	mov	r5, ip
 80254be:	e79c      	b.n	80253fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80254c0:	2300      	movs	r3, #0
 80254c2:	e79a      	b.n	80253fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80254c4:	463b      	mov	r3, r7
 80254c6:	e798      	b.n	80253fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80254c8:	20025838 	.word	0x20025838

080254cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80254cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254d0:	b093      	sub	sp, #76	; 0x4c
 80254d2:	461d      	mov	r5, r3
 80254d4:	920c      	str	r2, [sp, #48]	; 0x30
 80254d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80254d8:	9107      	str	r1, [sp, #28]
 80254da:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80254de:	9011      	str	r0, [sp, #68]	; 0x44
 80254e0:	6850      	ldr	r0, [r2, #4]
 80254e2:	6812      	ldr	r2, [r2, #0]
 80254e4:	fb00 1303 	mla	r3, r0, r3, r1
 80254e8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80254ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254ee:	689b      	ldr	r3, [r3, #8]
 80254f0:	3301      	adds	r3, #1
 80254f2:	f023 0301 	bic.w	r3, r3, #1
 80254f6:	9306      	str	r3, [sp, #24]
 80254f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254fa:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80254fe:	681f      	ldr	r7, [r3, #0]
 8025500:	9b07      	ldr	r3, [sp, #28]
 8025502:	2b00      	cmp	r3, #0
 8025504:	dc03      	bgt.n	802550e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8025506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025508:	2b00      	cmp	r3, #0
 802550a:	f340 8267 	ble.w	80259dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802550e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025510:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025514:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025518:	1e48      	subs	r0, r1, #1
 802551a:	f102 3cff 	add.w	ip, r2, #4294967295
 802551e:	2d00      	cmp	r5, #0
 8025520:	f340 80b8 	ble.w	8025694 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8025524:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025528:	ea4f 4326 	mov.w	r3, r6, asr #16
 802552c:	d406      	bmi.n	802553c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802552e:	4586      	cmp	lr, r0
 8025530:	da04      	bge.n	802553c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025532:	2b00      	cmp	r3, #0
 8025534:	db02      	blt.n	802553c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025536:	4563      	cmp	r3, ip
 8025538:	f2c0 80ad 	blt.w	8025696 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802553c:	f11e 0e01 	adds.w	lr, lr, #1
 8025540:	f100 80a0 	bmi.w	8025684 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025544:	4571      	cmp	r1, lr
 8025546:	f2c0 809d 	blt.w	8025684 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802554a:	3301      	adds	r3, #1
 802554c:	f100 809a 	bmi.w	8025684 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025550:	429a      	cmp	r2, r3
 8025552:	f2c0 8097 	blt.w	8025684 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025556:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802555a:	9509      	str	r5, [sp, #36]	; 0x24
 802555c:	46c8      	mov	r8, r9
 802555e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025560:	2b00      	cmp	r3, #0
 8025562:	f340 80b6 	ble.w	80256d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8025566:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802556a:	9308      	str	r3, [sp, #32]
 802556c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802556e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025572:	1423      	asrs	r3, r4, #16
 8025574:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025578:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802557c:	f100 813e 	bmi.w	80257fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025580:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025584:	455b      	cmp	r3, fp
 8025586:	f280 8139 	bge.w	80257fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802558a:	2800      	cmp	r0, #0
 802558c:	f2c0 8136 	blt.w	80257fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025590:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025594:	4558      	cmp	r0, fp
 8025596:	f280 8131 	bge.w	80257fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802559a:	9a06      	ldr	r2, [sp, #24]
 802559c:	fb00 3302 	mla	r3, r0, r2, r3
 80255a0:	0858      	lsrs	r0, r3, #1
 80255a2:	07da      	lsls	r2, r3, #31
 80255a4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80255a8:	9a08      	ldr	r2, [sp, #32]
 80255aa:	bf54      	ite	pl
 80255ac:	f00c 0c0f 	andpl.w	ip, ip, #15
 80255b0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80255b4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80255b8:	fa5f fc8c 	uxtb.w	ip, ip
 80255bc:	2a00      	cmp	r2, #0
 80255be:	f000 80cb 	beq.w	8025758 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80255c2:	1c58      	adds	r0, r3, #1
 80255c4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80255c8:	07c0      	lsls	r0, r0, #31
 80255ca:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80255ce:	bf54      	ite	pl
 80255d0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80255d4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80255d8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80255dc:	fa5f fe8e 	uxtb.w	lr, lr
 80255e0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80255e4:	b1b9      	cbz	r1, 8025616 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80255e6:	4453      	add	r3, sl
 80255e8:	0858      	lsrs	r0, r3, #1
 80255ea:	07da      	lsls	r2, r3, #31
 80255ec:	5c38      	ldrb	r0, [r7, r0]
 80255ee:	bf54      	ite	pl
 80255f0:	f000 000f 	andpl.w	r0, r0, #15
 80255f4:	1100      	asrmi	r0, r0, #4
 80255f6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80255fa:	b2c0      	uxtb	r0, r0
 80255fc:	900a      	str	r0, [sp, #40]	; 0x28
 80255fe:	1c58      	adds	r0, r3, #1
 8025600:	0843      	lsrs	r3, r0, #1
 8025602:	07c2      	lsls	r2, r0, #31
 8025604:	5cfb      	ldrb	r3, [r7, r3]
 8025606:	bf54      	ite	pl
 8025608:	f003 030f 	andpl.w	r3, r3, #15
 802560c:	111b      	asrmi	r3, r3, #4
 802560e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025612:	b2db      	uxtb	r3, r3
 8025614:	930e      	str	r3, [sp, #56]	; 0x38
 8025616:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802561a:	b289      	uxth	r1, r1
 802561c:	fb02 f301 	mul.w	r3, r2, r1
 8025620:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025624:	0112      	lsls	r2, r2, #4
 8025626:	b289      	uxth	r1, r1
 8025628:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802562c:	1a40      	subs	r0, r0, r1
 802562e:	fa1f fe80 	uxth.w	lr, r0
 8025632:	1ad2      	subs	r2, r2, r3
 8025634:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025636:	b292      	uxth	r2, r2
 8025638:	4342      	muls	r2, r0
 802563a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802563e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025640:	fb01 c102 	mla	r1, r1, r2, ip
 8025644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025646:	fb03 1302 	mla	r3, r3, r2, r1
 802564a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802564e:	2bff      	cmp	r3, #255	; 0xff
 8025650:	f040 8093 	bne.w	802577a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8025654:	4bbe      	ldr	r3, [pc, #760]	; (8025950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025656:	681a      	ldr	r2, [r3, #0]
 8025658:	4bbe      	ldr	r3, [pc, #760]	; (8025954 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802565a:	0951      	lsrs	r1, r2, #5
 802565c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025660:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025664:	430b      	orrs	r3, r1
 8025666:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802566a:	4313      	orrs	r3, r2
 802566c:	f8a8 3000 	strh.w	r3, [r8]
 8025670:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025672:	441c      	add	r4, r3
 8025674:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025676:	441e      	add	r6, r3
 8025678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802567a:	3b01      	subs	r3, #1
 802567c:	f108 0802 	add.w	r8, r8, #2
 8025680:	9309      	str	r3, [sp, #36]	; 0x24
 8025682:	e76c      	b.n	802555e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025684:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025686:	441c      	add	r4, r3
 8025688:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802568a:	3d01      	subs	r5, #1
 802568c:	441e      	add	r6, r3
 802568e:	f109 0902 	add.w	r9, r9, #2
 8025692:	e744      	b.n	802551e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025694:	d021      	beq.n	80256da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025696:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025698:	1e6b      	subs	r3, r5, #1
 802569a:	fb00 4003 	mla	r0, r0, r3, r4
 802569e:	1400      	asrs	r0, r0, #16
 80256a0:	f53f af59 	bmi.w	8025556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80256a4:	3901      	subs	r1, #1
 80256a6:	4288      	cmp	r0, r1
 80256a8:	f6bf af55 	bge.w	8025556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80256ac:	9920      	ldr	r1, [sp, #128]	; 0x80
 80256ae:	fb01 6303 	mla	r3, r1, r3, r6
 80256b2:	141b      	asrs	r3, r3, #16
 80256b4:	f53f af4f 	bmi.w	8025556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80256b8:	3a01      	subs	r2, #1
 80256ba:	4293      	cmp	r3, r2
 80256bc:	f6bf af4b 	bge.w	8025556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80256c0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80256c4:	9308      	str	r3, [sp, #32]
 80256c6:	46a8      	mov	r8, r5
 80256c8:	46ce      	mov	lr, r9
 80256ca:	f1b8 0f00 	cmp.w	r8, #0
 80256ce:	f300 80b5 	bgt.w	802583c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80256d2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80256d6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80256da:	9b07      	ldr	r3, [sp, #28]
 80256dc:	2b00      	cmp	r3, #0
 80256de:	f340 817d 	ble.w	80259dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80256e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80256e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80256ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80256ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80256f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80256f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80256f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80256fc:	eef0 6a62 	vmov.f32	s13, s5
 8025700:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025704:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025708:	ee77 2a62 	vsub.f32	s5, s14, s5
 802570c:	ee16 4a90 	vmov	r4, s13
 8025710:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025714:	eef0 6a43 	vmov.f32	s13, s6
 8025718:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802571c:	ee12 2a90 	vmov	r2, s5
 8025720:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025724:	fb92 f3f3 	sdiv	r3, r2, r3
 8025728:	ee13 2a10 	vmov	r2, s6
 802572c:	931f      	str	r3, [sp, #124]	; 0x7c
 802572e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025730:	fb92 f3f3 	sdiv	r3, r2, r3
 8025734:	9320      	str	r3, [sp, #128]	; 0x80
 8025736:	9b07      	ldr	r3, [sp, #28]
 8025738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802573a:	3b01      	subs	r3, #1
 802573c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025740:	9307      	str	r3, [sp, #28]
 8025742:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025744:	ee16 6a90 	vmov	r6, s13
 8025748:	bf14      	ite	ne
 802574a:	461d      	movne	r5, r3
 802574c:	4615      	moveq	r5, r2
 802574e:	eeb0 3a67 	vmov.f32	s6, s15
 8025752:	eef0 2a47 	vmov.f32	s5, s14
 8025756:	e6d3      	b.n	8025500 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8025758:	2900      	cmp	r1, #0
 802575a:	f43f af5c 	beq.w	8025616 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802575e:	eb0a 0003 	add.w	r0, sl, r3
 8025762:	0843      	lsrs	r3, r0, #1
 8025764:	07c0      	lsls	r0, r0, #31
 8025766:	5cfb      	ldrb	r3, [r7, r3]
 8025768:	bf54      	ite	pl
 802576a:	f003 030f 	andpl.w	r3, r3, #15
 802576e:	111b      	asrmi	r3, r3, #4
 8025770:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025774:	b2db      	uxtb	r3, r3
 8025776:	930a      	str	r3, [sp, #40]	; 0x28
 8025778:	e74d      	b.n	8025616 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802577a:	2b00      	cmp	r3, #0
 802577c:	f43f af78 	beq.w	8025670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025780:	4a73      	ldr	r2, [pc, #460]	; (8025950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025782:	f8b8 c000 	ldrh.w	ip, [r8]
 8025786:	6810      	ldr	r0, [r2, #0]
 8025788:	fa1f fe83 	uxth.w	lr, r3
 802578c:	ea4f 212c 	mov.w	r1, ip, asr #8
 8025790:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025794:	43db      	mvns	r3, r3
 8025796:	b2db      	uxtb	r3, r3
 8025798:	fb12 f20e 	smulbb	r2, r2, lr
 802579c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80257a0:	fb01 2103 	mla	r1, r1, r3, r2
 80257a4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80257a8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80257ac:	b2c0      	uxtb	r0, r0
 80257ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80257b2:	fb1b fb0e 	smulbb	fp, fp, lr
 80257b6:	b289      	uxth	r1, r1
 80257b8:	fb10 fe0e 	smulbb	lr, r0, lr
 80257bc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80257c0:	fa5f fc8c 	uxtb.w	ip, ip
 80257c4:	fb02 b203 	mla	r2, r2, r3, fp
 80257c8:	1c48      	adds	r0, r1, #1
 80257ca:	fb0c e303 	mla	r3, ip, r3, lr
 80257ce:	b292      	uxth	r2, r2
 80257d0:	b29b      	uxth	r3, r3
 80257d2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80257d6:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80257da:	f102 0b01 	add.w	fp, r2, #1
 80257de:	1c59      	adds	r1, r3, #1
 80257e0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80257e4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80257e8:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80257ec:	0952      	lsrs	r2, r2, #5
 80257ee:	4301      	orrs	r1, r0
 80257f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80257f4:	4311      	orrs	r1, r2
 80257f6:	f8a8 1000 	strh.w	r1, [r8]
 80257fa:	e739      	b.n	8025670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80257fc:	f113 0b01 	adds.w	fp, r3, #1
 8025800:	f53f af36 	bmi.w	8025670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025804:	45dc      	cmp	ip, fp
 8025806:	f6ff af33 	blt.w	8025670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802580a:	f110 0b01 	adds.w	fp, r0, #1
 802580e:	f53f af2f 	bmi.w	8025670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025812:	45de      	cmp	lr, fp
 8025814:	f6ff af2c 	blt.w	8025670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025818:	9a08      	ldr	r2, [sp, #32]
 802581a:	9302      	str	r3, [sp, #8]
 802581c:	fa0f f38e 	sxth.w	r3, lr
 8025820:	9301      	str	r3, [sp, #4]
 8025822:	fa0f f38c 	sxth.w	r3, ip
 8025826:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802582a:	9105      	str	r1, [sp, #20]
 802582c:	9300      	str	r3, [sp, #0]
 802582e:	463a      	mov	r2, r7
 8025830:	4653      	mov	r3, sl
 8025832:	4641      	mov	r1, r8
 8025834:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025836:	f7ff fd73 	bl	8025320 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802583a:	e719      	b.n	8025670 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802583c:	9906      	ldr	r1, [sp, #24]
 802583e:	1422      	asrs	r2, r4, #16
 8025840:	1433      	asrs	r3, r6, #16
 8025842:	fb01 2303 	mla	r3, r1, r3, r2
 8025846:	085a      	lsrs	r2, r3, #1
 8025848:	07d9      	lsls	r1, r3, #31
 802584a:	5cba      	ldrb	r2, [r7, r2]
 802584c:	bf54      	ite	pl
 802584e:	f002 020f 	andpl.w	r2, r2, #15
 8025852:	1112      	asrmi	r2, r2, #4
 8025854:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025858:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802585c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025860:	b2d2      	uxtb	r2, r2
 8025862:	2800      	cmp	r0, #0
 8025864:	d062      	beq.n	802592c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8025866:	f103 0a01 	add.w	sl, r3, #1
 802586a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802586e:	f01a 0f01 	tst.w	sl, #1
 8025872:	5c79      	ldrb	r1, [r7, r1]
 8025874:	bf0c      	ite	eq
 8025876:	f001 010f 	andeq.w	r1, r1, #15
 802587a:	1109      	asrne	r1, r1, #4
 802587c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025880:	b2c9      	uxtb	r1, r1
 8025882:	910f      	str	r1, [sp, #60]	; 0x3c
 8025884:	f1bc 0f00 	cmp.w	ip, #0
 8025888:	d019      	beq.n	80258be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802588a:	9908      	ldr	r1, [sp, #32]
 802588c:	440b      	add	r3, r1
 802588e:	0859      	lsrs	r1, r3, #1
 8025890:	f013 0f01 	tst.w	r3, #1
 8025894:	5c79      	ldrb	r1, [r7, r1]
 8025896:	bf0c      	ite	eq
 8025898:	f001 010f 	andeq.w	r1, r1, #15
 802589c:	1109      	asrne	r1, r1, #4
 802589e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80258a2:	b2c9      	uxtb	r1, r1
 80258a4:	3301      	adds	r3, #1
 80258a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80258a8:	0859      	lsrs	r1, r3, #1
 80258aa:	07db      	lsls	r3, r3, #31
 80258ac:	5c79      	ldrb	r1, [r7, r1]
 80258ae:	bf54      	ite	pl
 80258b0:	f001 010f 	andpl.w	r1, r1, #15
 80258b4:	1109      	asrmi	r1, r1, #4
 80258b6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80258ba:	b2c9      	uxtb	r1, r1
 80258bc:	9110      	str	r1, [sp, #64]	; 0x40
 80258be:	b280      	uxth	r0, r0
 80258c0:	fa1f fc8c 	uxth.w	ip, ip
 80258c4:	fb00 f30c 	mul.w	r3, r0, ip
 80258c8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80258cc:	0100      	lsls	r0, r0, #4
 80258ce:	fa1f fc8c 	uxth.w	ip, ip
 80258d2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80258d6:	eba1 010c 	sub.w	r1, r1, ip
 80258da:	fa1f fa81 	uxth.w	sl, r1
 80258de:	1ac0      	subs	r0, r0, r3
 80258e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80258e2:	b280      	uxth	r0, r0
 80258e4:	4348      	muls	r0, r1
 80258e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80258e8:	fb02 020a 	mla	r2, r2, sl, r0
 80258ec:	fb0c 2c01 	mla	ip, ip, r1, r2
 80258f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80258f2:	fb03 c302 	mla	r3, r3, r2, ip
 80258f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80258fa:	2bff      	cmp	r3, #255	; 0xff
 80258fc:	d12c      	bne.n	8025958 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80258fe:	4b14      	ldr	r3, [pc, #80]	; (8025950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025900:	681a      	ldr	r2, [r3, #0]
 8025902:	4b14      	ldr	r3, [pc, #80]	; (8025954 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8025904:	0951      	lsrs	r1, r2, #5
 8025906:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802590a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802590e:	430b      	orrs	r3, r1
 8025910:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025914:	4313      	orrs	r3, r2
 8025916:	f8ae 3000 	strh.w	r3, [lr]
 802591a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802591c:	441c      	add	r4, r3
 802591e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025920:	f10e 0e02 	add.w	lr, lr, #2
 8025924:	441e      	add	r6, r3
 8025926:	f108 38ff 	add.w	r8, r8, #4294967295
 802592a:	e6ce      	b.n	80256ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802592c:	f1bc 0f00 	cmp.w	ip, #0
 8025930:	d0c5      	beq.n	80258be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8025932:	9908      	ldr	r1, [sp, #32]
 8025934:	440b      	add	r3, r1
 8025936:	0859      	lsrs	r1, r3, #1
 8025938:	07db      	lsls	r3, r3, #31
 802593a:	5c79      	ldrb	r1, [r7, r1]
 802593c:	bf54      	ite	pl
 802593e:	f001 010f 	andpl.w	r1, r1, #15
 8025942:	1109      	asrmi	r1, r1, #4
 8025944:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025948:	b2c9      	uxtb	r1, r1
 802594a:	910b      	str	r1, [sp, #44]	; 0x2c
 802594c:	e7b7      	b.n	80258be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802594e:	bf00      	nop
 8025950:	20025838 	.word	0x20025838
 8025954:	fffff800 	.word	0xfffff800
 8025958:	2b00      	cmp	r3, #0
 802595a:	d0de      	beq.n	802591a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802595c:	4a21      	ldr	r2, [pc, #132]	; (80259e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802595e:	f8be c000 	ldrh.w	ip, [lr]
 8025962:	6810      	ldr	r0, [r2, #0]
 8025964:	fa1f fa83 	uxth.w	sl, r3
 8025968:	ea4f 212c 	mov.w	r1, ip, asr #8
 802596c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025970:	43db      	mvns	r3, r3
 8025972:	b2db      	uxtb	r3, r3
 8025974:	fb12 f20a 	smulbb	r2, r2, sl
 8025978:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802597c:	fb01 2103 	mla	r1, r1, r3, r2
 8025980:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8025984:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025988:	b2c0      	uxtb	r0, r0
 802598a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802598e:	fa5f fc8c 	uxtb.w	ip, ip
 8025992:	fb10 f00a 	smulbb	r0, r0, sl
 8025996:	fb0c 0003 	mla	r0, ip, r3, r0
 802599a:	b289      	uxth	r1, r1
 802599c:	fb1b fb0a 	smulbb	fp, fp, sl
 80259a0:	b280      	uxth	r0, r0
 80259a2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80259a6:	fb02 b203 	mla	r2, r2, r3, fp
 80259aa:	1c4b      	adds	r3, r1, #1
 80259ac:	f100 0b01 	add.w	fp, r0, #1
 80259b0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80259b4:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80259b8:	b292      	uxth	r2, r2
 80259ba:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80259be:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80259c2:	ea4b 0101 	orr.w	r1, fp, r1
 80259c6:	f102 0b01 	add.w	fp, r2, #1
 80259ca:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80259ce:	0952      	lsrs	r2, r2, #5
 80259d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80259d4:	4311      	orrs	r1, r2
 80259d6:	f8ae 1000 	strh.w	r1, [lr]
 80259da:	e79e      	b.n	802591a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80259dc:	b013      	add	sp, #76	; 0x4c
 80259de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259e2:	bf00      	nop
 80259e4:	20025838 	.word	0x20025838

080259e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 80259e8:	b570      	push	{r4, r5, r6, lr}
 80259ea:	1208      	asrs	r0, r1, #8
 80259ec:	b29e      	uxth	r6, r3
 80259ee:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80259f2:	1213      	asrs	r3, r2, #8
 80259f4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80259f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80259fc:	fb13 f305 	smulbb	r3, r3, r5
 8025a00:	fb10 f006 	smulbb	r0, r0, r6
 8025a04:	4418      	add	r0, r3
 8025a06:	10cc      	asrs	r4, r1, #3
 8025a08:	10d3      	asrs	r3, r2, #3
 8025a0a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8025a0e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025a12:	fb13 f305 	smulbb	r3, r3, r5
 8025a16:	fb14 f406 	smulbb	r4, r4, r6
 8025a1a:	00c9      	lsls	r1, r1, #3
 8025a1c:	00d2      	lsls	r2, r2, #3
 8025a1e:	441c      	add	r4, r3
 8025a20:	b2d2      	uxtb	r2, r2
 8025a22:	b2cb      	uxtb	r3, r1
 8025a24:	fb12 f205 	smulbb	r2, r2, r5
 8025a28:	b280      	uxth	r0, r0
 8025a2a:	fb13 f306 	smulbb	r3, r3, r6
 8025a2e:	4413      	add	r3, r2
 8025a30:	1c42      	adds	r2, r0, #1
 8025a32:	b29b      	uxth	r3, r3
 8025a34:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025a38:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 8025a3c:	1c58      	adds	r0, r3, #1
 8025a3e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025a42:	b2a4      	uxth	r4, r4
 8025a44:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025a48:	4310      	orrs	r0, r2
 8025a4a:	1c62      	adds	r2, r4, #1
 8025a4c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025a50:	0964      	lsrs	r4, r4, #5
 8025a52:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025a56:	4320      	orrs	r0, r4
 8025a58:	bd70      	pop	{r4, r5, r6, pc}
	...

08025a5c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8025a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a60:	b08f      	sub	sp, #60	; 0x3c
 8025a62:	461c      	mov	r4, r3
 8025a64:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8025a68:	9004      	str	r0, [sp, #16]
 8025a6a:	460d      	mov	r5, r1
 8025a6c:	4616      	mov	r6, r2
 8025a6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025a70:	2f00      	cmp	r7, #0
 8025a72:	f000 80f6 	beq.w	8025c62 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8025a76:	6820      	ldr	r0, [r4, #0]
 8025a78:	6861      	ldr	r1, [r4, #4]
 8025a7a:	aa0a      	add	r2, sp, #40	; 0x28
 8025a7c:	c203      	stmia	r2!, {r0, r1}
 8025a7e:	6818      	ldr	r0, [r3, #0]
 8025a80:	6859      	ldr	r1, [r3, #4]
 8025a82:	aa0c      	add	r2, sp, #48	; 0x30
 8025a84:	c203      	stmia	r2!, {r0, r1}
 8025a86:	a80a      	add	r0, sp, #40	; 0x28
 8025a88:	f7ef fdde 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025a8c:	4621      	mov	r1, r4
 8025a8e:	a80c      	add	r0, sp, #48	; 0x30
 8025a90:	f7ef fe02 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025a94:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8025a98:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8025a9c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8025aa0:	f002 0301 	and.w	r3, r2, #1
 8025aa4:	9306      	str	r3, [sp, #24]
 8025aa6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025aaa:	f003 0101 	and.w	r1, r3, #1
 8025aae:	9105      	str	r1, [sp, #20]
 8025ab0:	9805      	ldr	r0, [sp, #20]
 8025ab2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8025ab6:	4403      	add	r3, r0
 8025ab8:	fb01 2303 	mla	r3, r1, r3, r2
 8025abc:	f04f 0802 	mov.w	r8, #2
 8025ac0:	fb93 f3f8 	sdiv	r3, r3, r8
 8025ac4:	441d      	add	r5, r3
 8025ac6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8025aca:	441a      	add	r2, r3
 8025acc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8025ad0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8025ad4:	4419      	add	r1, r3
 8025ad6:	4b64      	ldr	r3, [pc, #400]	; (8025c68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8025ad8:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8025adc:	6818      	ldr	r0, [r3, #0]
 8025ade:	6803      	ldr	r3, [r0, #0]
 8025ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025ae2:	4798      	blx	r3
 8025ae4:	4a61      	ldr	r2, [pc, #388]	; (8025c6c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8025ae6:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8025aea:	8813      	ldrh	r3, [r2, #0]
 8025aec:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 8025af0:	2fff      	cmp	r7, #255	; 0xff
 8025af2:	fb03 a404 	mla	r4, r3, r4, sl
 8025af6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8025afa:	f106 0604 	add.w	r6, r6, #4
 8025afe:	4611      	mov	r1, r2
 8025b00:	fb03 fb0b 	mul.w	fp, r3, fp
 8025b04:	d06b      	beq.n	8025bde <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 8025b06:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8025b0a:	9303      	str	r3, [sp, #12]
 8025b0c:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8025b10:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8025b14:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8025b18:	9b07      	ldr	r3, [sp, #28]
 8025b1a:	42a3      	cmp	r3, r4
 8025b1c:	f240 809c 	bls.w	8025c58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8025b20:	9b06      	ldr	r3, [sp, #24]
 8025b22:	2b00      	cmp	r3, #0
 8025b24:	d039      	beq.n	8025b9a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8025b26:	782b      	ldrb	r3, [r5, #0]
 8025b28:	8822      	ldrh	r2, [r4, #0]
 8025b2a:	9804      	ldr	r0, [sp, #16]
 8025b2c:	f003 030f 	and.w	r3, r3, #15
 8025b30:	f105 0801 	add.w	r8, r5, #1
 8025b34:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025b38:	9b03      	ldr	r3, [sp, #12]
 8025b3a:	9300      	str	r3, [sp, #0]
 8025b3c:	463b      	mov	r3, r7
 8025b3e:	f7ff ff53 	bl	80259e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025b42:	f824 0b02 	strh.w	r0, [r4], #2
 8025b46:	f109 3bff 	add.w	fp, r9, #4294967295
 8025b4a:	f1bb 0f01 	cmp.w	fp, #1
 8025b4e:	46a2      	mov	sl, r4
 8025b50:	f104 0404 	add.w	r4, r4, #4
 8025b54:	dd24      	ble.n	8025ba0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 8025b56:	f898 3000 	ldrb.w	r3, [r8]
 8025b5a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8025b5e:	9804      	ldr	r0, [sp, #16]
 8025b60:	091b      	lsrs	r3, r3, #4
 8025b62:	f1ab 0b02 	sub.w	fp, fp, #2
 8025b66:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025b6a:	9b03      	ldr	r3, [sp, #12]
 8025b6c:	9300      	str	r3, [sp, #0]
 8025b6e:	463b      	mov	r3, r7
 8025b70:	f7ff ff3a 	bl	80259e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025b74:	f824 0c04 	strh.w	r0, [r4, #-4]
 8025b78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8025b7c:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8025b80:	9804      	ldr	r0, [sp, #16]
 8025b82:	f003 030f 	and.w	r3, r3, #15
 8025b86:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025b8a:	9b03      	ldr	r3, [sp, #12]
 8025b8c:	9300      	str	r3, [sp, #0]
 8025b8e:	463b      	mov	r3, r7
 8025b90:	f7ff ff2a 	bl	80259e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025b94:	f824 0c02 	strh.w	r0, [r4, #-2]
 8025b98:	e7d7      	b.n	8025b4a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8025b9a:	46a8      	mov	r8, r5
 8025b9c:	46cb      	mov	fp, r9
 8025b9e:	e7d4      	b.n	8025b4a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8025ba0:	d10e      	bne.n	8025bc0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8025ba2:	f898 3000 	ldrb.w	r3, [r8]
 8025ba6:	f8ba 2000 	ldrh.w	r2, [sl]
 8025baa:	9804      	ldr	r0, [sp, #16]
 8025bac:	091b      	lsrs	r3, r3, #4
 8025bae:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025bb2:	9b03      	ldr	r3, [sp, #12]
 8025bb4:	9300      	str	r3, [sp, #0]
 8025bb6:	463b      	mov	r3, r7
 8025bb8:	f7ff ff16 	bl	80259e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025bbc:	f82a 0b02 	strh.w	r0, [sl], #2
 8025bc0:	9b08      	ldr	r3, [sp, #32]
 8025bc2:	9a05      	ldr	r2, [sp, #20]
 8025bc4:	881c      	ldrh	r4, [r3, #0]
 8025bc6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025bca:	eba4 0409 	sub.w	r4, r4, r9
 8025bce:	4413      	add	r3, r2
 8025bd0:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8025bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025bd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8025bda:	441d      	add	r5, r3
 8025bdc:	e79c      	b.n	8025b18 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8025bde:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8025be2:	45a3      	cmp	fp, r4
 8025be4:	d938      	bls.n	8025c58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8025be6:	9b06      	ldr	r3, [sp, #24]
 8025be8:	b1f3      	cbz	r3, 8025c28 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8025bea:	782b      	ldrb	r3, [r5, #0]
 8025bec:	f003 030f 	and.w	r3, r3, #15
 8025bf0:	1c6a      	adds	r2, r5, #1
 8025bf2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025bf6:	8023      	strh	r3, [r4, #0]
 8025bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8025bfc:	3402      	adds	r4, #2
 8025bfe:	2801      	cmp	r0, #1
 8025c00:	4623      	mov	r3, r4
 8025c02:	f104 0404 	add.w	r4, r4, #4
 8025c06:	dd12      	ble.n	8025c2e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8025c08:	7813      	ldrb	r3, [r2, #0]
 8025c0a:	091b      	lsrs	r3, r3, #4
 8025c0c:	3802      	subs	r0, #2
 8025c0e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025c12:	f824 3c04 	strh.w	r3, [r4, #-4]
 8025c16:	f812 3b01 	ldrb.w	r3, [r2], #1
 8025c1a:	f003 030f 	and.w	r3, r3, #15
 8025c1e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025c22:	f824 3c02 	strh.w	r3, [r4, #-2]
 8025c26:	e7ea      	b.n	8025bfe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8025c28:	462a      	mov	r2, r5
 8025c2a:	4648      	mov	r0, r9
 8025c2c:	e7e7      	b.n	8025bfe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8025c2e:	d106      	bne.n	8025c3e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8025c30:	7812      	ldrb	r2, [r2, #0]
 8025c32:	0912      	lsrs	r2, r2, #4
 8025c34:	3302      	adds	r3, #2
 8025c36:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8025c3a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8025c3e:	880c      	ldrh	r4, [r1, #0]
 8025c40:	9a05      	ldr	r2, [sp, #20]
 8025c42:	eba4 0409 	sub.w	r4, r4, r9
 8025c46:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8025c4a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025c4e:	4413      	add	r3, r2
 8025c50:	fb93 f3f8 	sdiv	r3, r3, r8
 8025c54:	441d      	add	r5, r3
 8025c56:	e7c4      	b.n	8025be2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 8025c58:	4b03      	ldr	r3, [pc, #12]	; (8025c68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8025c5a:	6818      	ldr	r0, [r3, #0]
 8025c5c:	6803      	ldr	r3, [r0, #0]
 8025c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c60:	4798      	blx	r3
 8025c62:	b00f      	add	sp, #60	; 0x3c
 8025c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c68:	20025830 	.word	0x20025830
 8025c6c:	2002582a 	.word	0x2002582a

08025c70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8025c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c72:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8025c76:	2dff      	cmp	r5, #255	; 0xff
 8025c78:	ea4f 2711 	mov.w	r7, r1, lsr #8
 8025c7c:	d10c      	bne.n	8025c98 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8025c7e:	2bff      	cmp	r3, #255	; 0xff
 8025c80:	d10a      	bne.n	8025c98 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8025c82:	4b25      	ldr	r3, [pc, #148]	; (8025d18 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8025c84:	0948      	lsrs	r0, r1, #5
 8025c86:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025c8a:	403b      	ands	r3, r7
 8025c8c:	4318      	orrs	r0, r3
 8025c8e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8025c92:	4308      	orrs	r0, r1
 8025c94:	b280      	uxth	r0, r0
 8025c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025c98:	fb15 f503 	smulbb	r5, r5, r3
 8025c9c:	b2ab      	uxth	r3, r5
 8025c9e:	1c5d      	adds	r5, r3, #1
 8025ca0:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8025ca4:	1214      	asrs	r4, r2, #8
 8025ca6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025caa:	fa1f fc85 	uxth.w	ip, r5
 8025cae:	10d6      	asrs	r6, r2, #3
 8025cb0:	00d0      	lsls	r0, r2, #3
 8025cb2:	43ed      	mvns	r5, r5
 8025cb4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025cb8:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8025cbc:	b2eb      	uxtb	r3, r5
 8025cbe:	b2c0      	uxtb	r0, r0
 8025cc0:	fb12 f20c 	smulbb	r2, r2, ip
 8025cc4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8025cc8:	fb04 2403 	mla	r4, r4, r3, r2
 8025ccc:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8025cd0:	b2c8      	uxtb	r0, r1
 8025cd2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8025cd6:	b2fd      	uxtb	r5, r7
 8025cd8:	fb10 f00c 	smulbb	r0, r0, ip
 8025cdc:	b2a4      	uxth	r4, r4
 8025cde:	fb02 0003 	mla	r0, r2, r3, r0
 8025ce2:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8025ce6:	fb15 f50c 	smulbb	r5, r5, ip
 8025cea:	fb06 5503 	mla	r5, r6, r3, r5
 8025cee:	b283      	uxth	r3, r0
 8025cf0:	1c60      	adds	r0, r4, #1
 8025cf2:	b2ad      	uxth	r5, r5
 8025cf4:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025cf8:	1c58      	adds	r0, r3, #1
 8025cfa:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025cfe:	1c6b      	adds	r3, r5, #1
 8025d00:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025d04:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025d08:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025d0c:	096d      	lsrs	r5, r5, #5
 8025d0e:	4320      	orrs	r0, r4
 8025d10:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025d14:	4328      	orrs	r0, r5
 8025d16:	e7be      	b.n	8025c96 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8025d18:	00fff800 	.word	0x00fff800

08025d1c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8025d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d20:	461c      	mov	r4, r3
 8025d22:	b08d      	sub	sp, #52	; 0x34
 8025d24:	460d      	mov	r5, r1
 8025d26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025d28:	6861      	ldr	r1, [r4, #4]
 8025d2a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8025d2e:	4680      	mov	r8, r0
 8025d30:	6820      	ldr	r0, [r4, #0]
 8025d32:	4616      	mov	r6, r2
 8025d34:	aa08      	add	r2, sp, #32
 8025d36:	c203      	stmia	r2!, {r0, r1}
 8025d38:	6818      	ldr	r0, [r3, #0]
 8025d3a:	6859      	ldr	r1, [r3, #4]
 8025d3c:	aa0a      	add	r2, sp, #40	; 0x28
 8025d3e:	c203      	stmia	r2!, {r0, r1}
 8025d40:	a808      	add	r0, sp, #32
 8025d42:	f7ef fc81 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025d46:	4621      	mov	r1, r4
 8025d48:	a80a      	add	r0, sp, #40	; 0x28
 8025d4a:	f7ef fca5 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025d4e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8025d52:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8025d56:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8025d5a:	f002 0301 	and.w	r3, r2, #1
 8025d5e:	9303      	str	r3, [sp, #12]
 8025d60:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8025d64:	f003 0101 	and.w	r1, r3, #1
 8025d68:	9102      	str	r1, [sp, #8]
 8025d6a:	9802      	ldr	r0, [sp, #8]
 8025d6c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8025d70:	4403      	add	r3, r0
 8025d72:	fb01 2303 	mla	r3, r1, r3, r2
 8025d76:	f04f 0a02 	mov.w	sl, #2
 8025d7a:	fb93 f3fa 	sdiv	r3, r3, sl
 8025d7e:	441d      	add	r5, r3
 8025d80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8025d84:	441a      	add	r2, r3
 8025d86:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8025d8a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8025d8e:	4a3f      	ldr	r2, [pc, #252]	; (8025e8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8025d90:	9205      	str	r2, [sp, #20]
 8025d92:	4419      	add	r1, r3
 8025d94:	6810      	ldr	r0, [r2, #0]
 8025d96:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8025d9a:	6803      	ldr	r3, [r0, #0]
 8025d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025d9e:	4798      	blx	r3
 8025da0:	4b3b      	ldr	r3, [pc, #236]	; (8025e90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8025da2:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8025da6:	8819      	ldrh	r1, [r3, #0]
 8025da8:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8025dac:	fb01 c404 	mla	r4, r1, r4, ip
 8025db0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8025db4:	434f      	muls	r7, r1
 8025db6:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8025dba:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8025dbe:	3604      	adds	r6, #4
 8025dc0:	9204      	str	r2, [sp, #16]
 8025dc2:	9b04      	ldr	r3, [sp, #16]
 8025dc4:	429c      	cmp	r4, r3
 8025dc6:	d258      	bcs.n	8025e7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8025dc8:	9b03      	ldr	r3, [sp, #12]
 8025dca:	2b00      	cmp	r3, #0
 8025dcc:	d034      	beq.n	8025e38 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8025dce:	782b      	ldrb	r3, [r5, #0]
 8025dd0:	f003 030f 	and.w	r3, r3, #15
 8025dd4:	1c6f      	adds	r7, r5, #1
 8025dd6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025dda:	0e0b      	lsrs	r3, r1, #24
 8025ddc:	d006      	beq.n	8025dec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8025dde:	8822      	ldrh	r2, [r4, #0]
 8025de0:	9300      	str	r3, [sp, #0]
 8025de2:	4640      	mov	r0, r8
 8025de4:	464b      	mov	r3, r9
 8025de6:	f7ff ff43 	bl	8025c70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8025dea:	8020      	strh	r0, [r4, #0]
 8025dec:	3402      	adds	r4, #2
 8025dee:	f10b 3aff 	add.w	sl, fp, #4294967295
 8025df2:	f1ba 0f01 	cmp.w	sl, #1
 8025df6:	dd22      	ble.n	8025e3e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8025df8:	783b      	ldrb	r3, [r7, #0]
 8025dfa:	091b      	lsrs	r3, r3, #4
 8025dfc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025e00:	0e0b      	lsrs	r3, r1, #24
 8025e02:	d006      	beq.n	8025e12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8025e04:	8822      	ldrh	r2, [r4, #0]
 8025e06:	9300      	str	r3, [sp, #0]
 8025e08:	4640      	mov	r0, r8
 8025e0a:	464b      	mov	r3, r9
 8025e0c:	f7ff ff30 	bl	8025c70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8025e10:	8020      	strh	r0, [r4, #0]
 8025e12:	f817 3b01 	ldrb.w	r3, [r7], #1
 8025e16:	f003 030f 	and.w	r3, r3, #15
 8025e1a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025e1e:	0e0b      	lsrs	r3, r1, #24
 8025e20:	d006      	beq.n	8025e30 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8025e22:	8862      	ldrh	r2, [r4, #2]
 8025e24:	9300      	str	r3, [sp, #0]
 8025e26:	4640      	mov	r0, r8
 8025e28:	464b      	mov	r3, r9
 8025e2a:	f7ff ff21 	bl	8025c70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8025e2e:	8060      	strh	r0, [r4, #2]
 8025e30:	3404      	adds	r4, #4
 8025e32:	f1aa 0a02 	sub.w	sl, sl, #2
 8025e36:	e7dc      	b.n	8025df2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8025e38:	462f      	mov	r7, r5
 8025e3a:	46da      	mov	sl, fp
 8025e3c:	e7d9      	b.n	8025df2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8025e3e:	d10d      	bne.n	8025e5c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8025e40:	783b      	ldrb	r3, [r7, #0]
 8025e42:	091b      	lsrs	r3, r3, #4
 8025e44:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025e48:	0e0b      	lsrs	r3, r1, #24
 8025e4a:	d006      	beq.n	8025e5a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8025e4c:	8822      	ldrh	r2, [r4, #0]
 8025e4e:	9300      	str	r3, [sp, #0]
 8025e50:	4640      	mov	r0, r8
 8025e52:	464b      	mov	r3, r9
 8025e54:	f7ff ff0c 	bl	8025c70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8025e58:	8020      	strh	r0, [r4, #0]
 8025e5a:	3402      	adds	r4, #2
 8025e5c:	9b06      	ldr	r3, [sp, #24]
 8025e5e:	9a02      	ldr	r2, [sp, #8]
 8025e60:	881b      	ldrh	r3, [r3, #0]
 8025e62:	eba3 030b 	sub.w	r3, r3, fp
 8025e66:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8025e6a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8025e6e:	4413      	add	r3, r2
 8025e70:	9a07      	ldr	r2, [sp, #28]
 8025e72:	fb93 f3f2 	sdiv	r3, r3, r2
 8025e76:	441d      	add	r5, r3
 8025e78:	e7a3      	b.n	8025dc2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8025e7a:	9b05      	ldr	r3, [sp, #20]
 8025e7c:	6818      	ldr	r0, [r3, #0]
 8025e7e:	6803      	ldr	r3, [r0, #0]
 8025e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025e82:	4798      	blx	r3
 8025e84:	b00d      	add	sp, #52	; 0x34
 8025e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e8a:	bf00      	nop
 8025e8c:	20025830 	.word	0x20025830
 8025e90:	2002582a 	.word	0x2002582a

08025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8025e94:	b570      	push	{r4, r5, r6, lr}
 8025e96:	1214      	asrs	r4, r2, #8
 8025e98:	788d      	ldrb	r5, [r1, #2]
 8025e9a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8025e9e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025ea2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8025ea6:	fb15 f503 	smulbb	r5, r5, r3
 8025eaa:	fb04 5506 	mla	r5, r4, r6, r5
 8025eae:	10d0      	asrs	r0, r2, #3
 8025eb0:	784c      	ldrb	r4, [r1, #1]
 8025eb2:	7809      	ldrb	r1, [r1, #0]
 8025eb4:	00d2      	lsls	r2, r2, #3
 8025eb6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025eba:	b2d2      	uxtb	r2, r2
 8025ebc:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025ec0:	fb14 f403 	smulbb	r4, r4, r3
 8025ec4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025ec8:	fb11 f303 	smulbb	r3, r1, r3
 8025ecc:	fb00 4406 	mla	r4, r0, r6, r4
 8025ed0:	fb02 3306 	mla	r3, r2, r6, r3
 8025ed4:	b2ad      	uxth	r5, r5
 8025ed6:	b29b      	uxth	r3, r3
 8025ed8:	b2a4      	uxth	r4, r4
 8025eda:	1c68      	adds	r0, r5, #1
 8025edc:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8025ee0:	1c62      	adds	r2, r4, #1
 8025ee2:	1c58      	adds	r0, r3, #1
 8025ee4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025ee8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025eec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025ef0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025ef4:	0964      	lsrs	r4, r4, #5
 8025ef6:	4328      	orrs	r0, r5
 8025ef8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025efc:	4320      	orrs	r0, r4
 8025efe:	bd70      	pop	{r4, r5, r6, pc}

08025f00 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8025f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f04:	b08f      	sub	sp, #60	; 0x3c
 8025f06:	461c      	mov	r4, r3
 8025f08:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8025f0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025f0e:	4682      	mov	sl, r0
 8025f10:	460e      	mov	r6, r1
 8025f12:	4615      	mov	r5, r2
 8025f14:	2f00      	cmp	r7, #0
 8025f16:	f000 8142 	beq.w	802619e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 8025f1a:	6820      	ldr	r0, [r4, #0]
 8025f1c:	6861      	ldr	r1, [r4, #4]
 8025f1e:	aa0a      	add	r2, sp, #40	; 0x28
 8025f20:	c203      	stmia	r2!, {r0, r1}
 8025f22:	6818      	ldr	r0, [r3, #0]
 8025f24:	6859      	ldr	r1, [r3, #4]
 8025f26:	aa0c      	add	r2, sp, #48	; 0x30
 8025f28:	c203      	stmia	r2!, {r0, r1}
 8025f2a:	a80a      	add	r0, sp, #40	; 0x28
 8025f2c:	f7ef fb8c 	bl	8015648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025f30:	4621      	mov	r1, r4
 8025f32:	a80c      	add	r0, sp, #48	; 0x30
 8025f34:	f7ef fbb0 	bl	8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025f38:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8025f3c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8025f40:	f002 0301 	and.w	r3, r2, #1
 8025f44:	9306      	str	r3, [sp, #24]
 8025f46:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025f4a:	f003 0101 	and.w	r1, r3, #1
 8025f4e:	9105      	str	r1, [sp, #20]
 8025f50:	9805      	ldr	r0, [sp, #20]
 8025f52:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8025f56:	4403      	add	r3, r0
 8025f58:	fb01 2303 	mla	r3, r1, r3, r2
 8025f5c:	f04f 0802 	mov.w	r8, #2
 8025f60:	fb93 f3f8 	sdiv	r3, r3, r8
 8025f64:	441e      	add	r6, r3
 8025f66:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8025f6a:	441a      	add	r2, r3
 8025f6c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8025f70:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8025f74:	4419      	add	r1, r3
 8025f76:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8025f7a:	9303      	str	r3, [sp, #12]
 8025f7c:	4b89      	ldr	r3, [pc, #548]	; (80261a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8025f7e:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8025f82:	6818      	ldr	r0, [r3, #0]
 8025f84:	6803      	ldr	r3, [r0, #0]
 8025f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025f88:	4798      	blx	r3
 8025f8a:	4a87      	ldr	r2, [pc, #540]	; (80261a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8025f8c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8025f90:	8813      	ldrh	r3, [r2, #0]
 8025f92:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 8025f96:	2fff      	cmp	r7, #255	; 0xff
 8025f98:	fb03 9404 	mla	r4, r3, r4, r9
 8025f9c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8025fa0:	f105 0504 	add.w	r5, r5, #4
 8025fa4:	4694      	mov	ip, r2
 8025fa6:	fb03 f30b 	mul.w	r3, r3, fp
 8025faa:	d071      	beq.n	8026090 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8025fac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8025fb0:	43f9      	mvns	r1, r7
 8025fb2:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8025fb6:	b2c9      	uxtb	r1, r1
 8025fb8:	9104      	str	r1, [sp, #16]
 8025fba:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8025fbe:	9b07      	ldr	r3, [sp, #28]
 8025fc0:	42a3      	cmp	r3, r4
 8025fc2:	f240 80e7 	bls.w	8026194 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8025fc6:	9b06      	ldr	r3, [sp, #24]
 8025fc8:	2b00      	cmp	r3, #0
 8025fca:	d03d      	beq.n	8026048 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 8025fcc:	7831      	ldrb	r1, [r6, #0]
 8025fce:	9b04      	ldr	r3, [sp, #16]
 8025fd0:	8822      	ldrh	r2, [r4, #0]
 8025fd2:	9300      	str	r3, [sp, #0]
 8025fd4:	f001 010f 	and.w	r1, r1, #15
 8025fd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025fdc:	463b      	mov	r3, r7
 8025fde:	4429      	add	r1, r5
 8025fe0:	4650      	mov	r0, sl
 8025fe2:	f7ff ff57 	bl	8025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8025fe6:	9b03      	ldr	r3, [sp, #12]
 8025fe8:	f824 0b02 	strh.w	r0, [r4], #2
 8025fec:	f106 0801 	add.w	r8, r6, #1
 8025ff0:	f103 3bff 	add.w	fp, r3, #4294967295
 8025ff4:	f1bb 0f01 	cmp.w	fp, #1
 8025ff8:	46a1      	mov	r9, r4
 8025ffa:	f104 0404 	add.w	r4, r4, #4
 8025ffe:	dd27      	ble.n	8026050 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8026000:	f898 1000 	ldrb.w	r1, [r8]
 8026004:	9b04      	ldr	r3, [sp, #16]
 8026006:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802600a:	9300      	str	r3, [sp, #0]
 802600c:	0909      	lsrs	r1, r1, #4
 802600e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026012:	463b      	mov	r3, r7
 8026014:	4429      	add	r1, r5
 8026016:	4650      	mov	r0, sl
 8026018:	f7ff ff3c 	bl	8025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802601c:	f824 0c04 	strh.w	r0, [r4, #-4]
 8026020:	f818 1b01 	ldrb.w	r1, [r8], #1
 8026024:	9b04      	ldr	r3, [sp, #16]
 8026026:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802602a:	9300      	str	r3, [sp, #0]
 802602c:	f001 010f 	and.w	r1, r1, #15
 8026030:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026034:	463b      	mov	r3, r7
 8026036:	4429      	add	r1, r5
 8026038:	4650      	mov	r0, sl
 802603a:	f7ff ff2b 	bl	8025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802603e:	f1ab 0b02 	sub.w	fp, fp, #2
 8026042:	f824 0c02 	strh.w	r0, [r4, #-2]
 8026046:	e7d5      	b.n	8025ff4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8026048:	46b0      	mov	r8, r6
 802604a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802604e:	e7d1      	b.n	8025ff4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8026050:	d10f      	bne.n	8026072 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8026052:	f898 1000 	ldrb.w	r1, [r8]
 8026056:	9b04      	ldr	r3, [sp, #16]
 8026058:	f8b9 2000 	ldrh.w	r2, [r9]
 802605c:	9300      	str	r3, [sp, #0]
 802605e:	0909      	lsrs	r1, r1, #4
 8026060:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026064:	463b      	mov	r3, r7
 8026066:	4429      	add	r1, r5
 8026068:	4650      	mov	r0, sl
 802606a:	f7ff ff13 	bl	8025e94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802606e:	f829 0b02 	strh.w	r0, [r9], #2
 8026072:	9b08      	ldr	r3, [sp, #32]
 8026074:	9a05      	ldr	r2, [sp, #20]
 8026076:	881c      	ldrh	r4, [r3, #0]
 8026078:	9b03      	ldr	r3, [sp, #12]
 802607a:	1ae4      	subs	r4, r4, r3
 802607c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8026080:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026084:	4413      	add	r3, r2
 8026086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026088:	fb93 f3f2 	sdiv	r3, r3, r2
 802608c:	441e      	add	r6, r3
 802608e:	e796      	b.n	8025fbe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8026090:	4f46      	ldr	r7, [pc, #280]	; (80261ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8026092:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026096:	42a3      	cmp	r3, r4
 8026098:	d97c      	bls.n	8026194 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 802609a:	9a06      	ldr	r2, [sp, #24]
 802609c:	2a00      	cmp	r2, #0
 802609e:	d054      	beq.n	802614a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 80260a0:	7830      	ldrb	r0, [r6, #0]
 80260a2:	f000 000f 	and.w	r0, r0, #15
 80260a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80260aa:	eb05 0e00 	add.w	lr, r5, r0
 80260ae:	5c28      	ldrb	r0, [r5, r0]
 80260b0:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80260b4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80260b8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80260bc:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80260c0:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 80260c4:	ea42 020e 	orr.w	r2, r2, lr
 80260c8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80260cc:	f824 2b02 	strh.w	r2, [r4], #2
 80260d0:	9a03      	ldr	r2, [sp, #12]
 80260d2:	1c71      	adds	r1, r6, #1
 80260d4:	f102 3eff 	add.w	lr, r2, #4294967295
 80260d8:	f1be 0f01 	cmp.w	lr, #1
 80260dc:	4620      	mov	r0, r4
 80260de:	f104 0404 	add.w	r4, r4, #4
 80260e2:	dd36      	ble.n	8026152 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 80260e4:	7808      	ldrb	r0, [r1, #0]
 80260e6:	0900      	lsrs	r0, r0, #4
 80260e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80260ec:	eb05 0a00 	add.w	sl, r5, r0
 80260f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80260f4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80260f8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80260fc:	00d2      	lsls	r2, r2, #3
 80260fe:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8026102:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026106:	ea49 0202 	orr.w	r2, r9, r2
 802610a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802610e:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8026112:	f824 2c04 	strh.w	r2, [r4, #-4]
 8026116:	f811 0b01 	ldrb.w	r0, [r1], #1
 802611a:	f000 000f 	and.w	r0, r0, #15
 802611e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026122:	eb05 0a00 	add.w	sl, r5, r0
 8026126:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802612a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802612e:	00d2      	lsls	r2, r2, #3
 8026130:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8026134:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026138:	ea49 0202 	orr.w	r2, r9, r2
 802613c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8026140:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8026144:	f824 2c02 	strh.w	r2, [r4, #-2]
 8026148:	e7c6      	b.n	80260d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 802614a:	4631      	mov	r1, r6
 802614c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8026150:	e7c2      	b.n	80260d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8026152:	d111      	bne.n	8026178 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8026154:	7809      	ldrb	r1, [r1, #0]
 8026156:	0909      	lsrs	r1, r1, #4
 8026158:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802615c:	186c      	adds	r4, r5, r1
 802615e:	5c69      	ldrb	r1, [r5, r1]
 8026160:	78a2      	ldrb	r2, [r4, #2]
 8026162:	7864      	ldrb	r4, [r4, #1]
 8026164:	00e4      	lsls	r4, r4, #3
 8026166:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802616a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802616e:	4322      	orrs	r2, r4
 8026170:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8026174:	f820 2b02 	strh.w	r2, [r0], #2
 8026178:	9a03      	ldr	r2, [sp, #12]
 802617a:	f8bc 4000 	ldrh.w	r4, [ip]
 802617e:	9905      	ldr	r1, [sp, #20]
 8026180:	1aa4      	subs	r4, r4, r2
 8026182:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8026186:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802618a:	440a      	add	r2, r1
 802618c:	fb92 f2f8 	sdiv	r2, r2, r8
 8026190:	4416      	add	r6, r2
 8026192:	e780      	b.n	8026096 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8026194:	4b03      	ldr	r3, [pc, #12]	; (80261a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8026196:	6818      	ldr	r0, [r3, #0]
 8026198:	6803      	ldr	r3, [r0, #0]
 802619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802619c:	4798      	blx	r3
 802619e:	b00f      	add	sp, #60	; 0x3c
 80261a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261a4:	20025830 	.word	0x20025830
 80261a8:	2002582a 	.word	0x2002582a
 80261ac:	fffff800 	.word	0xfffff800

080261b0 <CRC_Lock>:
 80261b0:	b530      	push	{r4, r5, lr}
 80261b2:	4a20      	ldr	r2, [pc, #128]	; (8026234 <CRC_Lock+0x84>)
 80261b4:	6813      	ldr	r3, [r2, #0]
 80261b6:	f023 0301 	bic.w	r3, r3, #1
 80261ba:	6013      	str	r3, [r2, #0]
 80261bc:	4b1e      	ldr	r3, [pc, #120]	; (8026238 <CRC_Lock+0x88>)
 80261be:	681a      	ldr	r2, [r3, #0]
 80261c0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80261c4:	4022      	ands	r2, r4
 80261c6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80261ca:	42aa      	cmp	r2, r5
 80261cc:	d005      	beq.n	80261da <CRC_Lock+0x2a>
 80261ce:	681b      	ldr	r3, [r3, #0]
 80261d0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80261d4:	4023      	ands	r3, r4
 80261d6:	4293      	cmp	r3, r2
 80261d8:	d124      	bne.n	8026224 <CRC_Lock+0x74>
 80261da:	4b18      	ldr	r3, [pc, #96]	; (802623c <CRC_Lock+0x8c>)
 80261dc:	681b      	ldr	r3, [r3, #0]
 80261de:	bb0b      	cbnz	r3, 8026224 <CRC_Lock+0x74>
 80261e0:	4b17      	ldr	r3, [pc, #92]	; (8026240 <CRC_Lock+0x90>)
 80261e2:	681a      	ldr	r2, [r3, #0]
 80261e4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80261e8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80261ec:	d00d      	beq.n	802620a <CRC_Lock+0x5a>
 80261ee:	681a      	ldr	r2, [r3, #0]
 80261f0:	f240 4483 	movw	r4, #1155	; 0x483
 80261f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80261f8:	42a2      	cmp	r2, r4
 80261fa:	d006      	beq.n	802620a <CRC_Lock+0x5a>
 80261fc:	681b      	ldr	r3, [r3, #0]
 80261fe:	f240 4285 	movw	r2, #1157	; 0x485
 8026202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026206:	4293      	cmp	r3, r2
 8026208:	d10c      	bne.n	8026224 <CRC_Lock+0x74>
 802620a:	4b0e      	ldr	r3, [pc, #56]	; (8026244 <CRC_Lock+0x94>)
 802620c:	2201      	movs	r2, #1
 802620e:	601a      	str	r2, [r3, #0]
 8026210:	681a      	ldr	r2, [r3, #0]
 8026212:	2a00      	cmp	r2, #0
 8026214:	d1fc      	bne.n	8026210 <CRC_Lock+0x60>
 8026216:	4b0c      	ldr	r3, [pc, #48]	; (8026248 <CRC_Lock+0x98>)
 8026218:	6018      	str	r0, [r3, #0]
 802621a:	6818      	ldr	r0, [r3, #0]
 802621c:	1a43      	subs	r3, r0, r1
 802621e:	4258      	negs	r0, r3
 8026220:	4158      	adcs	r0, r3
 8026222:	bd30      	pop	{r4, r5, pc}
 8026224:	4b09      	ldr	r3, [pc, #36]	; (802624c <CRC_Lock+0x9c>)
 8026226:	2201      	movs	r2, #1
 8026228:	601a      	str	r2, [r3, #0]
 802622a:	681a      	ldr	r2, [r3, #0]
 802622c:	2a00      	cmp	r2, #0
 802622e:	d1fc      	bne.n	802622a <CRC_Lock+0x7a>
 8026230:	4b07      	ldr	r3, [pc, #28]	; (8026250 <CRC_Lock+0xa0>)
 8026232:	e7f1      	b.n	8026218 <CRC_Lock+0x68>
 8026234:	e0002000 	.word	0xe0002000
 8026238:	e000ed00 	.word	0xe000ed00
 802623c:	e0042000 	.word	0xe0042000
 8026240:	5c001000 	.word	0x5c001000
 8026244:	58024c08 	.word	0x58024c08
 8026248:	58024c00 	.word	0x58024c00
 802624c:	40023008 	.word	0x40023008
 8026250:	40023000 	.word	0x40023000

08026254 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026254:	6101      	str	r1, [r0, #16]
 8026256:	4770      	bx	lr

08026258 <_ZN8touchgfx8Gestures4tickEv>:
 8026258:	7b83      	ldrb	r3, [r0, #14]
 802625a:	b14b      	cbz	r3, 8026270 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802625c:	8903      	ldrh	r3, [r0, #8]
 802625e:	3301      	adds	r3, #1
 8026260:	b29b      	uxth	r3, r3
 8026262:	2b07      	cmp	r3, #7
 8026264:	8103      	strh	r3, [r0, #8]
 8026266:	bf81      	itttt	hi
 8026268:	2300      	movhi	r3, #0
 802626a:	8143      	strhhi	r3, [r0, #10]
 802626c:	8183      	strhhi	r3, [r0, #12]
 802626e:	7383      	strbhi	r3, [r0, #14]
 8026270:	4770      	bx	lr
	...

08026274 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026274:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8026278:	4698      	mov	r8, r3
 802627a:	8883      	ldrh	r3, [r0, #4]
 802627c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8026280:	eba8 0303 	sub.w	r3, r8, r3
 8026284:	b21b      	sxth	r3, r3
 8026286:	4604      	mov	r4, r0
 8026288:	2b00      	cmp	r3, #0
 802628a:	4617      	mov	r7, r2
 802628c:	4a18      	ldr	r2, [pc, #96]	; (80262f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802628e:	9200      	str	r2, [sp, #0]
 8026290:	bfb8      	it	lt
 8026292:	425b      	neglt	r3, r3
 8026294:	8aa2      	ldrh	r2, [r4, #20]
 8026296:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802629a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802629e:	b21b      	sxth	r3, r3
 80262a0:	460e      	mov	r6, r1
 80262a2:	4293      	cmp	r3, r2
 80262a4:	88c1      	ldrh	r1, [r0, #6]
 80262a6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80262aa:	f04f 0000 	mov.w	r0, #0
 80262ae:	f88d 0004 	strb.w	r0, [sp, #4]
 80262b2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80262b6:	dc07      	bgt.n	80262c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 80262b8:	1a69      	subs	r1, r5, r1
 80262ba:	b209      	sxth	r1, r1
 80262bc:	2900      	cmp	r1, #0
 80262be:	bfb8      	it	lt
 80262c0:	4249      	neglt	r1, r1
 80262c2:	b209      	sxth	r1, r1
 80262c4:	428a      	cmp	r2, r1
 80262c6:	da10      	bge.n	80262ea <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 80262c8:	6920      	ldr	r0, [r4, #16]
 80262ca:	6803      	ldr	r3, [r0, #0]
 80262cc:	4669      	mov	r1, sp
 80262ce:	685b      	ldr	r3, [r3, #4]
 80262d0:	4798      	blx	r3
 80262d2:	eba8 0606 	sub.w	r6, r8, r6
 80262d6:	2300      	movs	r3, #0
 80262d8:	1bef      	subs	r7, r5, r7
 80262da:	2001      	movs	r0, #1
 80262dc:	8123      	strh	r3, [r4, #8]
 80262de:	8166      	strh	r6, [r4, #10]
 80262e0:	81a7      	strh	r7, [r4, #12]
 80262e2:	f8a4 8004 	strh.w	r8, [r4, #4]
 80262e6:	80e5      	strh	r5, [r4, #6]
 80262e8:	73a0      	strb	r0, [r4, #14]
 80262ea:	b004      	add	sp, #16
 80262ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80262f0:	080296f8 	.word	0x080296f8

080262f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80262f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80262f6:	461e      	mov	r6, r3
 80262f8:	1e4b      	subs	r3, r1, #1
 80262fa:	2b01      	cmp	r3, #1
 80262fc:	b085      	sub	sp, #20
 80262fe:	4604      	mov	r4, r0
 8026300:	460d      	mov	r5, r1
 8026302:	4617      	mov	r7, r2
 8026304:	d84b      	bhi.n	802639e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8026306:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802630a:	1cd3      	adds	r3, r2, #3
 802630c:	b29b      	uxth	r3, r3
 802630e:	2b06      	cmp	r3, #6
 8026310:	d916      	bls.n	8026340 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8026312:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80263b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026316:	f8cd c004 	str.w	ip, [sp, #4]
 802631a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802631e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026322:	6900      	ldr	r0, [r0, #16]
 8026324:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026328:	f04f 0c00 	mov.w	ip, #0
 802632c:	f88d c008 	strb.w	ip, [sp, #8]
 8026330:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026334:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026338:	6803      	ldr	r3, [r0, #0]
 802633a:	a901      	add	r1, sp, #4
 802633c:	689b      	ldr	r3, [r3, #8]
 802633e:	4798      	blx	r3
 8026340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026344:	1cd3      	adds	r3, r2, #3
 8026346:	b29b      	uxth	r3, r3
 8026348:	2b06      	cmp	r3, #6
 802634a:	d916      	bls.n	802637a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802634c:	f8df c064 	ldr.w	ip, [pc, #100]	; 80263b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026350:	f8cd c004 	str.w	ip, [sp, #4]
 8026354:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026358:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802635c:	6920      	ldr	r0, [r4, #16]
 802635e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026362:	f04f 0c01 	mov.w	ip, #1
 8026366:	f88d c008 	strb.w	ip, [sp, #8]
 802636a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802636e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026372:	6803      	ldr	r3, [r0, #0]
 8026374:	a901      	add	r1, sp, #4
 8026376:	689b      	ldr	r3, [r3, #8]
 8026378:	4798      	blx	r3
 802637a:	4b0d      	ldr	r3, [pc, #52]	; (80263b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802637c:	9301      	str	r3, [sp, #4]
 802637e:	6920      	ldr	r0, [r4, #16]
 8026380:	f88d 5008 	strb.w	r5, [sp, #8]
 8026384:	2300      	movs	r3, #0
 8026386:	f8ad 700a 	strh.w	r7, [sp, #10]
 802638a:	f8ad 600c 	strh.w	r6, [sp, #12]
 802638e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026392:	6803      	ldr	r3, [r0, #0]
 8026394:	a901      	add	r1, sp, #4
 8026396:	681b      	ldr	r3, [r3, #0]
 8026398:	4798      	blx	r3
 802639a:	b005      	add	sp, #20
 802639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802639e:	2900      	cmp	r1, #0
 80263a0:	d1eb      	bne.n	802637a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80263a2:	80a2      	strh	r2, [r4, #4]
 80263a4:	80c6      	strh	r6, [r0, #6]
 80263a6:	60a1      	str	r1, [r4, #8]
 80263a8:	81a1      	strh	r1, [r4, #12]
 80263aa:	73a1      	strb	r1, [r4, #14]
 80263ac:	e7e5      	b.n	802637a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80263ae:	bf00      	nop
 80263b0:	080296e4 	.word	0x080296e4
 80263b4:	0802970c 	.word	0x0802970c

080263b8 <__aeabi_atexit>:
 80263b8:	460b      	mov	r3, r1
 80263ba:	4601      	mov	r1, r0
 80263bc:	4618      	mov	r0, r3
 80263be:	f000 b90f 	b.w	80265e0 <__cxa_atexit>

080263c2 <_ZdlPvj>:
 80263c2:	f000 b812 	b.w	80263ea <_ZdlPv>

080263c6 <__cxa_guard_acquire>:
 80263c6:	6803      	ldr	r3, [r0, #0]
 80263c8:	07db      	lsls	r3, r3, #31
 80263ca:	d406      	bmi.n	80263da <__cxa_guard_acquire+0x14>
 80263cc:	7843      	ldrb	r3, [r0, #1]
 80263ce:	b103      	cbz	r3, 80263d2 <__cxa_guard_acquire+0xc>
 80263d0:	deff      	udf	#255	; 0xff
 80263d2:	2301      	movs	r3, #1
 80263d4:	7043      	strb	r3, [r0, #1]
 80263d6:	4618      	mov	r0, r3
 80263d8:	4770      	bx	lr
 80263da:	2000      	movs	r0, #0
 80263dc:	4770      	bx	lr

080263de <__cxa_guard_release>:
 80263de:	2301      	movs	r3, #1
 80263e0:	6003      	str	r3, [r0, #0]
 80263e2:	4770      	bx	lr

080263e4 <__cxa_pure_virtual>:
 80263e4:	b508      	push	{r3, lr}
 80263e6:	f000 f80f 	bl	8026408 <_ZSt9terminatev>

080263ea <_ZdlPv>:
 80263ea:	f000 b845 	b.w	8026478 <free>

080263ee <_ZN10__cxxabiv111__terminateEPFvvE>:
 80263ee:	b508      	push	{r3, lr}
 80263f0:	4780      	blx	r0
 80263f2:	f000 f80e 	bl	8026412 <abort>
	...

080263f8 <_ZSt13get_terminatev>:
 80263f8:	4b02      	ldr	r3, [pc, #8]	; (8026404 <_ZSt13get_terminatev+0xc>)
 80263fa:	6818      	ldr	r0, [r3, #0]
 80263fc:	f3bf 8f5b 	dmb	ish
 8026400:	4770      	bx	lr
 8026402:	bf00      	nop
 8026404:	200002ec 	.word	0x200002ec

08026408 <_ZSt9terminatev>:
 8026408:	b508      	push	{r3, lr}
 802640a:	f7ff fff5 	bl	80263f8 <_ZSt13get_terminatev>
 802640e:	f7ff ffee 	bl	80263ee <_ZN10__cxxabiv111__terminateEPFvvE>

08026412 <abort>:
 8026412:	b508      	push	{r3, lr}
 8026414:	2006      	movs	r0, #6
 8026416:	f000 fa39 	bl	802688c <raise>
 802641a:	2001      	movs	r0, #1
 802641c:	f7de faaa 	bl	8004974 <_exit>

08026420 <__assert_func>:
 8026420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026422:	4614      	mov	r4, r2
 8026424:	461a      	mov	r2, r3
 8026426:	4b09      	ldr	r3, [pc, #36]	; (802644c <__assert_func+0x2c>)
 8026428:	681b      	ldr	r3, [r3, #0]
 802642a:	4605      	mov	r5, r0
 802642c:	68d8      	ldr	r0, [r3, #12]
 802642e:	b14c      	cbz	r4, 8026444 <__assert_func+0x24>
 8026430:	4b07      	ldr	r3, [pc, #28]	; (8026450 <__assert_func+0x30>)
 8026432:	9100      	str	r1, [sp, #0]
 8026434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026438:	4906      	ldr	r1, [pc, #24]	; (8026454 <__assert_func+0x34>)
 802643a:	462b      	mov	r3, r5
 802643c:	f000 f982 	bl	8026744 <fiprintf>
 8026440:	f7ff ffe7 	bl	8026412 <abort>
 8026444:	4b04      	ldr	r3, [pc, #16]	; (8026458 <__assert_func+0x38>)
 8026446:	461c      	mov	r4, r3
 8026448:	e7f3      	b.n	8026432 <__assert_func+0x12>
 802644a:	bf00      	nop
 802644c:	20000348 	.word	0x20000348
 8026450:	08029a28 	.word	0x08029a28
 8026454:	08029a35 	.word	0x08029a35
 8026458:	08029a63 	.word	0x08029a63

0802645c <atexit>:
 802645c:	2300      	movs	r3, #0
 802645e:	4601      	mov	r1, r0
 8026460:	461a      	mov	r2, r3
 8026462:	4618      	mov	r0, r3
 8026464:	f000 bac0 	b.w	80269e8 <__register_exitproc>

08026468 <malloc>:
 8026468:	4b02      	ldr	r3, [pc, #8]	; (8026474 <malloc+0xc>)
 802646a:	4601      	mov	r1, r0
 802646c:	6818      	ldr	r0, [r3, #0]
 802646e:	f000 b82b 	b.w	80264c8 <_malloc_r>
 8026472:	bf00      	nop
 8026474:	20000348 	.word	0x20000348

08026478 <free>:
 8026478:	4b02      	ldr	r3, [pc, #8]	; (8026484 <free+0xc>)
 802647a:	4601      	mov	r1, r0
 802647c:	6818      	ldr	r0, [r3, #0]
 802647e:	f000 bb11 	b.w	8026aa4 <_free_r>
 8026482:	bf00      	nop
 8026484:	20000348 	.word	0x20000348

08026488 <sbrk_aligned>:
 8026488:	b570      	push	{r4, r5, r6, lr}
 802648a:	4e0e      	ldr	r6, [pc, #56]	; (80264c4 <sbrk_aligned+0x3c>)
 802648c:	460c      	mov	r4, r1
 802648e:	6831      	ldr	r1, [r6, #0]
 8026490:	4605      	mov	r5, r0
 8026492:	b911      	cbnz	r1, 802649a <sbrk_aligned+0x12>
 8026494:	f000 fa4a 	bl	802692c <_sbrk_r>
 8026498:	6030      	str	r0, [r6, #0]
 802649a:	4621      	mov	r1, r4
 802649c:	4628      	mov	r0, r5
 802649e:	f000 fa45 	bl	802692c <_sbrk_r>
 80264a2:	1c43      	adds	r3, r0, #1
 80264a4:	d00a      	beq.n	80264bc <sbrk_aligned+0x34>
 80264a6:	1cc4      	adds	r4, r0, #3
 80264a8:	f024 0403 	bic.w	r4, r4, #3
 80264ac:	42a0      	cmp	r0, r4
 80264ae:	d007      	beq.n	80264c0 <sbrk_aligned+0x38>
 80264b0:	1a21      	subs	r1, r4, r0
 80264b2:	4628      	mov	r0, r5
 80264b4:	f000 fa3a 	bl	802692c <_sbrk_r>
 80264b8:	3001      	adds	r0, #1
 80264ba:	d101      	bne.n	80264c0 <sbrk_aligned+0x38>
 80264bc:	f04f 34ff 	mov.w	r4, #4294967295
 80264c0:	4620      	mov	r0, r4
 80264c2:	bd70      	pop	{r4, r5, r6, pc}
 80264c4:	20026180 	.word	0x20026180

080264c8 <_malloc_r>:
 80264c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80264cc:	1ccd      	adds	r5, r1, #3
 80264ce:	f025 0503 	bic.w	r5, r5, #3
 80264d2:	3508      	adds	r5, #8
 80264d4:	2d0c      	cmp	r5, #12
 80264d6:	bf38      	it	cc
 80264d8:	250c      	movcc	r5, #12
 80264da:	2d00      	cmp	r5, #0
 80264dc:	4607      	mov	r7, r0
 80264de:	db01      	blt.n	80264e4 <_malloc_r+0x1c>
 80264e0:	42a9      	cmp	r1, r5
 80264e2:	d905      	bls.n	80264f0 <_malloc_r+0x28>
 80264e4:	230c      	movs	r3, #12
 80264e6:	603b      	str	r3, [r7, #0]
 80264e8:	2600      	movs	r6, #0
 80264ea:	4630      	mov	r0, r6
 80264ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80264f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80265c4 <_malloc_r+0xfc>
 80264f4:	f000 f868 	bl	80265c8 <__malloc_lock>
 80264f8:	f8d8 3000 	ldr.w	r3, [r8]
 80264fc:	461c      	mov	r4, r3
 80264fe:	bb5c      	cbnz	r4, 8026558 <_malloc_r+0x90>
 8026500:	4629      	mov	r1, r5
 8026502:	4638      	mov	r0, r7
 8026504:	f7ff ffc0 	bl	8026488 <sbrk_aligned>
 8026508:	1c43      	adds	r3, r0, #1
 802650a:	4604      	mov	r4, r0
 802650c:	d155      	bne.n	80265ba <_malloc_r+0xf2>
 802650e:	f8d8 4000 	ldr.w	r4, [r8]
 8026512:	4626      	mov	r6, r4
 8026514:	2e00      	cmp	r6, #0
 8026516:	d145      	bne.n	80265a4 <_malloc_r+0xdc>
 8026518:	2c00      	cmp	r4, #0
 802651a:	d048      	beq.n	80265ae <_malloc_r+0xe6>
 802651c:	6823      	ldr	r3, [r4, #0]
 802651e:	4631      	mov	r1, r6
 8026520:	4638      	mov	r0, r7
 8026522:	eb04 0903 	add.w	r9, r4, r3
 8026526:	f000 fa01 	bl	802692c <_sbrk_r>
 802652a:	4581      	cmp	r9, r0
 802652c:	d13f      	bne.n	80265ae <_malloc_r+0xe6>
 802652e:	6821      	ldr	r1, [r4, #0]
 8026530:	1a6d      	subs	r5, r5, r1
 8026532:	4629      	mov	r1, r5
 8026534:	4638      	mov	r0, r7
 8026536:	f7ff ffa7 	bl	8026488 <sbrk_aligned>
 802653a:	3001      	adds	r0, #1
 802653c:	d037      	beq.n	80265ae <_malloc_r+0xe6>
 802653e:	6823      	ldr	r3, [r4, #0]
 8026540:	442b      	add	r3, r5
 8026542:	6023      	str	r3, [r4, #0]
 8026544:	f8d8 3000 	ldr.w	r3, [r8]
 8026548:	2b00      	cmp	r3, #0
 802654a:	d038      	beq.n	80265be <_malloc_r+0xf6>
 802654c:	685a      	ldr	r2, [r3, #4]
 802654e:	42a2      	cmp	r2, r4
 8026550:	d12b      	bne.n	80265aa <_malloc_r+0xe2>
 8026552:	2200      	movs	r2, #0
 8026554:	605a      	str	r2, [r3, #4]
 8026556:	e00f      	b.n	8026578 <_malloc_r+0xb0>
 8026558:	6822      	ldr	r2, [r4, #0]
 802655a:	1b52      	subs	r2, r2, r5
 802655c:	d41f      	bmi.n	802659e <_malloc_r+0xd6>
 802655e:	2a0b      	cmp	r2, #11
 8026560:	d917      	bls.n	8026592 <_malloc_r+0xca>
 8026562:	1961      	adds	r1, r4, r5
 8026564:	42a3      	cmp	r3, r4
 8026566:	6025      	str	r5, [r4, #0]
 8026568:	bf18      	it	ne
 802656a:	6059      	strne	r1, [r3, #4]
 802656c:	6863      	ldr	r3, [r4, #4]
 802656e:	bf08      	it	eq
 8026570:	f8c8 1000 	streq.w	r1, [r8]
 8026574:	5162      	str	r2, [r4, r5]
 8026576:	604b      	str	r3, [r1, #4]
 8026578:	4638      	mov	r0, r7
 802657a:	f104 060b 	add.w	r6, r4, #11
 802657e:	f000 f829 	bl	80265d4 <__malloc_unlock>
 8026582:	f026 0607 	bic.w	r6, r6, #7
 8026586:	1d23      	adds	r3, r4, #4
 8026588:	1af2      	subs	r2, r6, r3
 802658a:	d0ae      	beq.n	80264ea <_malloc_r+0x22>
 802658c:	1b9b      	subs	r3, r3, r6
 802658e:	50a3      	str	r3, [r4, r2]
 8026590:	e7ab      	b.n	80264ea <_malloc_r+0x22>
 8026592:	42a3      	cmp	r3, r4
 8026594:	6862      	ldr	r2, [r4, #4]
 8026596:	d1dd      	bne.n	8026554 <_malloc_r+0x8c>
 8026598:	f8c8 2000 	str.w	r2, [r8]
 802659c:	e7ec      	b.n	8026578 <_malloc_r+0xb0>
 802659e:	4623      	mov	r3, r4
 80265a0:	6864      	ldr	r4, [r4, #4]
 80265a2:	e7ac      	b.n	80264fe <_malloc_r+0x36>
 80265a4:	4634      	mov	r4, r6
 80265a6:	6876      	ldr	r6, [r6, #4]
 80265a8:	e7b4      	b.n	8026514 <_malloc_r+0x4c>
 80265aa:	4613      	mov	r3, r2
 80265ac:	e7cc      	b.n	8026548 <_malloc_r+0x80>
 80265ae:	230c      	movs	r3, #12
 80265b0:	603b      	str	r3, [r7, #0]
 80265b2:	4638      	mov	r0, r7
 80265b4:	f000 f80e 	bl	80265d4 <__malloc_unlock>
 80265b8:	e797      	b.n	80264ea <_malloc_r+0x22>
 80265ba:	6025      	str	r5, [r4, #0]
 80265bc:	e7dc      	b.n	8026578 <_malloc_r+0xb0>
 80265be:	605b      	str	r3, [r3, #4]
 80265c0:	deff      	udf	#255	; 0xff
 80265c2:	bf00      	nop
 80265c4:	2002617c 	.word	0x2002617c

080265c8 <__malloc_lock>:
 80265c8:	4801      	ldr	r0, [pc, #4]	; (80265d0 <__malloc_lock+0x8>)
 80265ca:	f000 b9fc 	b.w	80269c6 <__retarget_lock_acquire_recursive>
 80265ce:	bf00      	nop
 80265d0:	200262c5 	.word	0x200262c5

080265d4 <__malloc_unlock>:
 80265d4:	4801      	ldr	r0, [pc, #4]	; (80265dc <__malloc_unlock+0x8>)
 80265d6:	f000 b9f7 	b.w	80269c8 <__retarget_lock_release_recursive>
 80265da:	bf00      	nop
 80265dc:	200262c5 	.word	0x200262c5

080265e0 <__cxa_atexit>:
 80265e0:	b510      	push	{r4, lr}
 80265e2:	4c05      	ldr	r4, [pc, #20]	; (80265f8 <__cxa_atexit+0x18>)
 80265e4:	4613      	mov	r3, r2
 80265e6:	b12c      	cbz	r4, 80265f4 <__cxa_atexit+0x14>
 80265e8:	460a      	mov	r2, r1
 80265ea:	4601      	mov	r1, r0
 80265ec:	2002      	movs	r0, #2
 80265ee:	f000 f9fb 	bl	80269e8 <__register_exitproc>
 80265f2:	bd10      	pop	{r4, pc}
 80265f4:	4620      	mov	r0, r4
 80265f6:	e7fc      	b.n	80265f2 <__cxa_atexit+0x12>
 80265f8:	080269e9 	.word	0x080269e9

080265fc <std>:
 80265fc:	2300      	movs	r3, #0
 80265fe:	b510      	push	{r4, lr}
 8026600:	4604      	mov	r4, r0
 8026602:	e9c0 3300 	strd	r3, r3, [r0]
 8026606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802660a:	6083      	str	r3, [r0, #8]
 802660c:	8181      	strh	r1, [r0, #12]
 802660e:	6643      	str	r3, [r0, #100]	; 0x64
 8026610:	81c2      	strh	r2, [r0, #14]
 8026612:	6183      	str	r3, [r0, #24]
 8026614:	4619      	mov	r1, r3
 8026616:	2208      	movs	r2, #8
 8026618:	305c      	adds	r0, #92	; 0x5c
 802661a:	f000 f906 	bl	802682a <memset>
 802661e:	4b0d      	ldr	r3, [pc, #52]	; (8026654 <std+0x58>)
 8026620:	6263      	str	r3, [r4, #36]	; 0x24
 8026622:	4b0d      	ldr	r3, [pc, #52]	; (8026658 <std+0x5c>)
 8026624:	62a3      	str	r3, [r4, #40]	; 0x28
 8026626:	4b0d      	ldr	r3, [pc, #52]	; (802665c <std+0x60>)
 8026628:	62e3      	str	r3, [r4, #44]	; 0x2c
 802662a:	4b0d      	ldr	r3, [pc, #52]	; (8026660 <std+0x64>)
 802662c:	6323      	str	r3, [r4, #48]	; 0x30
 802662e:	4b0d      	ldr	r3, [pc, #52]	; (8026664 <std+0x68>)
 8026630:	6224      	str	r4, [r4, #32]
 8026632:	429c      	cmp	r4, r3
 8026634:	d006      	beq.n	8026644 <std+0x48>
 8026636:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802663a:	4294      	cmp	r4, r2
 802663c:	d002      	beq.n	8026644 <std+0x48>
 802663e:	33d0      	adds	r3, #208	; 0xd0
 8026640:	429c      	cmp	r4, r3
 8026642:	d105      	bne.n	8026650 <std+0x54>
 8026644:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802664c:	f000 b9ba 	b.w	80269c4 <__retarget_lock_init_recursive>
 8026650:	bd10      	pop	{r4, pc}
 8026652:	bf00      	nop
 8026654:	080267a5 	.word	0x080267a5
 8026658:	080267c7 	.word	0x080267c7
 802665c:	080267ff 	.word	0x080267ff
 8026660:	08026823 	.word	0x08026823
 8026664:	20026184 	.word	0x20026184

08026668 <stdio_exit_handler>:
 8026668:	4a02      	ldr	r2, [pc, #8]	; (8026674 <stdio_exit_handler+0xc>)
 802666a:	4903      	ldr	r1, [pc, #12]	; (8026678 <stdio_exit_handler+0x10>)
 802666c:	4803      	ldr	r0, [pc, #12]	; (802667c <stdio_exit_handler+0x14>)
 802666e:	f000 b87b 	b.w	8026768 <_fwalk_sglue>
 8026672:	bf00      	nop
 8026674:	200002f0 	.word	0x200002f0
 8026678:	080271f1 	.word	0x080271f1
 802667c:	200002fc 	.word	0x200002fc

08026680 <cleanup_stdio>:
 8026680:	6841      	ldr	r1, [r0, #4]
 8026682:	4b0c      	ldr	r3, [pc, #48]	; (80266b4 <cleanup_stdio+0x34>)
 8026684:	4299      	cmp	r1, r3
 8026686:	b510      	push	{r4, lr}
 8026688:	4604      	mov	r4, r0
 802668a:	d001      	beq.n	8026690 <cleanup_stdio+0x10>
 802668c:	f000 fdb0 	bl	80271f0 <_fflush_r>
 8026690:	68a1      	ldr	r1, [r4, #8]
 8026692:	4b09      	ldr	r3, [pc, #36]	; (80266b8 <cleanup_stdio+0x38>)
 8026694:	4299      	cmp	r1, r3
 8026696:	d002      	beq.n	802669e <cleanup_stdio+0x1e>
 8026698:	4620      	mov	r0, r4
 802669a:	f000 fda9 	bl	80271f0 <_fflush_r>
 802669e:	68e1      	ldr	r1, [r4, #12]
 80266a0:	4b06      	ldr	r3, [pc, #24]	; (80266bc <cleanup_stdio+0x3c>)
 80266a2:	4299      	cmp	r1, r3
 80266a4:	d004      	beq.n	80266b0 <cleanup_stdio+0x30>
 80266a6:	4620      	mov	r0, r4
 80266a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80266ac:	f000 bda0 	b.w	80271f0 <_fflush_r>
 80266b0:	bd10      	pop	{r4, pc}
 80266b2:	bf00      	nop
 80266b4:	20026184 	.word	0x20026184
 80266b8:	200261ec 	.word	0x200261ec
 80266bc:	20026254 	.word	0x20026254

080266c0 <global_stdio_init.part.0>:
 80266c0:	b510      	push	{r4, lr}
 80266c2:	4b0b      	ldr	r3, [pc, #44]	; (80266f0 <global_stdio_init.part.0+0x30>)
 80266c4:	4c0b      	ldr	r4, [pc, #44]	; (80266f4 <global_stdio_init.part.0+0x34>)
 80266c6:	4a0c      	ldr	r2, [pc, #48]	; (80266f8 <global_stdio_init.part.0+0x38>)
 80266c8:	601a      	str	r2, [r3, #0]
 80266ca:	4620      	mov	r0, r4
 80266cc:	2200      	movs	r2, #0
 80266ce:	2104      	movs	r1, #4
 80266d0:	f7ff ff94 	bl	80265fc <std>
 80266d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80266d8:	2201      	movs	r2, #1
 80266da:	2109      	movs	r1, #9
 80266dc:	f7ff ff8e 	bl	80265fc <std>
 80266e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80266e4:	2202      	movs	r2, #2
 80266e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80266ea:	2112      	movs	r1, #18
 80266ec:	f7ff bf86 	b.w	80265fc <std>
 80266f0:	200262bc 	.word	0x200262bc
 80266f4:	20026184 	.word	0x20026184
 80266f8:	08026669 	.word	0x08026669

080266fc <__sfp_lock_acquire>:
 80266fc:	4801      	ldr	r0, [pc, #4]	; (8026704 <__sfp_lock_acquire+0x8>)
 80266fe:	f000 b962 	b.w	80269c6 <__retarget_lock_acquire_recursive>
 8026702:	bf00      	nop
 8026704:	200262c6 	.word	0x200262c6

08026708 <__sfp_lock_release>:
 8026708:	4801      	ldr	r0, [pc, #4]	; (8026710 <__sfp_lock_release+0x8>)
 802670a:	f000 b95d 	b.w	80269c8 <__retarget_lock_release_recursive>
 802670e:	bf00      	nop
 8026710:	200262c6 	.word	0x200262c6

08026714 <__sinit>:
 8026714:	b510      	push	{r4, lr}
 8026716:	4604      	mov	r4, r0
 8026718:	f7ff fff0 	bl	80266fc <__sfp_lock_acquire>
 802671c:	6a23      	ldr	r3, [r4, #32]
 802671e:	b11b      	cbz	r3, 8026728 <__sinit+0x14>
 8026720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026724:	f7ff bff0 	b.w	8026708 <__sfp_lock_release>
 8026728:	4b04      	ldr	r3, [pc, #16]	; (802673c <__sinit+0x28>)
 802672a:	6223      	str	r3, [r4, #32]
 802672c:	4b04      	ldr	r3, [pc, #16]	; (8026740 <__sinit+0x2c>)
 802672e:	681b      	ldr	r3, [r3, #0]
 8026730:	2b00      	cmp	r3, #0
 8026732:	d1f5      	bne.n	8026720 <__sinit+0xc>
 8026734:	f7ff ffc4 	bl	80266c0 <global_stdio_init.part.0>
 8026738:	e7f2      	b.n	8026720 <__sinit+0xc>
 802673a:	bf00      	nop
 802673c:	08026681 	.word	0x08026681
 8026740:	200262bc 	.word	0x200262bc

08026744 <fiprintf>:
 8026744:	b40e      	push	{r1, r2, r3}
 8026746:	b503      	push	{r0, r1, lr}
 8026748:	4601      	mov	r1, r0
 802674a:	ab03      	add	r3, sp, #12
 802674c:	4805      	ldr	r0, [pc, #20]	; (8026764 <fiprintf+0x20>)
 802674e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026752:	6800      	ldr	r0, [r0, #0]
 8026754:	9301      	str	r3, [sp, #4]
 8026756:	f000 fa1b 	bl	8026b90 <_vfiprintf_r>
 802675a:	b002      	add	sp, #8
 802675c:	f85d eb04 	ldr.w	lr, [sp], #4
 8026760:	b003      	add	sp, #12
 8026762:	4770      	bx	lr
 8026764:	20000348 	.word	0x20000348

08026768 <_fwalk_sglue>:
 8026768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802676c:	4607      	mov	r7, r0
 802676e:	4688      	mov	r8, r1
 8026770:	4614      	mov	r4, r2
 8026772:	2600      	movs	r6, #0
 8026774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026778:	f1b9 0901 	subs.w	r9, r9, #1
 802677c:	d505      	bpl.n	802678a <_fwalk_sglue+0x22>
 802677e:	6824      	ldr	r4, [r4, #0]
 8026780:	2c00      	cmp	r4, #0
 8026782:	d1f7      	bne.n	8026774 <_fwalk_sglue+0xc>
 8026784:	4630      	mov	r0, r6
 8026786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802678a:	89ab      	ldrh	r3, [r5, #12]
 802678c:	2b01      	cmp	r3, #1
 802678e:	d907      	bls.n	80267a0 <_fwalk_sglue+0x38>
 8026790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026794:	3301      	adds	r3, #1
 8026796:	d003      	beq.n	80267a0 <_fwalk_sglue+0x38>
 8026798:	4629      	mov	r1, r5
 802679a:	4638      	mov	r0, r7
 802679c:	47c0      	blx	r8
 802679e:	4306      	orrs	r6, r0
 80267a0:	3568      	adds	r5, #104	; 0x68
 80267a2:	e7e9      	b.n	8026778 <_fwalk_sglue+0x10>

080267a4 <__sread>:
 80267a4:	b510      	push	{r4, lr}
 80267a6:	460c      	mov	r4, r1
 80267a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267ac:	f000 f898 	bl	80268e0 <_read_r>
 80267b0:	2800      	cmp	r0, #0
 80267b2:	bfab      	itete	ge
 80267b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80267b6:	89a3      	ldrhlt	r3, [r4, #12]
 80267b8:	181b      	addge	r3, r3, r0
 80267ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80267be:	bfac      	ite	ge
 80267c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80267c2:	81a3      	strhlt	r3, [r4, #12]
 80267c4:	bd10      	pop	{r4, pc}

080267c6 <__swrite>:
 80267c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80267ca:	461f      	mov	r7, r3
 80267cc:	898b      	ldrh	r3, [r1, #12]
 80267ce:	05db      	lsls	r3, r3, #23
 80267d0:	4605      	mov	r5, r0
 80267d2:	460c      	mov	r4, r1
 80267d4:	4616      	mov	r6, r2
 80267d6:	d505      	bpl.n	80267e4 <__swrite+0x1e>
 80267d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267dc:	2302      	movs	r3, #2
 80267de:	2200      	movs	r2, #0
 80267e0:	f000 f86c 	bl	80268bc <_lseek_r>
 80267e4:	89a3      	ldrh	r3, [r4, #12]
 80267e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80267ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80267ee:	81a3      	strh	r3, [r4, #12]
 80267f0:	4632      	mov	r2, r6
 80267f2:	463b      	mov	r3, r7
 80267f4:	4628      	mov	r0, r5
 80267f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80267fa:	f000 b8a7 	b.w	802694c <_write_r>

080267fe <__sseek>:
 80267fe:	b510      	push	{r4, lr}
 8026800:	460c      	mov	r4, r1
 8026802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026806:	f000 f859 	bl	80268bc <_lseek_r>
 802680a:	1c43      	adds	r3, r0, #1
 802680c:	89a3      	ldrh	r3, [r4, #12]
 802680e:	bf15      	itete	ne
 8026810:	6560      	strne	r0, [r4, #84]	; 0x54
 8026812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802681a:	81a3      	strheq	r3, [r4, #12]
 802681c:	bf18      	it	ne
 802681e:	81a3      	strhne	r3, [r4, #12]
 8026820:	bd10      	pop	{r4, pc}

08026822 <__sclose>:
 8026822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026826:	f000 b839 	b.w	802689c <_close_r>

0802682a <memset>:
 802682a:	4402      	add	r2, r0
 802682c:	4603      	mov	r3, r0
 802682e:	4293      	cmp	r3, r2
 8026830:	d100      	bne.n	8026834 <memset+0xa>
 8026832:	4770      	bx	lr
 8026834:	f803 1b01 	strb.w	r1, [r3], #1
 8026838:	e7f9      	b.n	802682e <memset+0x4>

0802683a <_raise_r>:
 802683a:	291f      	cmp	r1, #31
 802683c:	b538      	push	{r3, r4, r5, lr}
 802683e:	4604      	mov	r4, r0
 8026840:	460d      	mov	r5, r1
 8026842:	d904      	bls.n	802684e <_raise_r+0x14>
 8026844:	2316      	movs	r3, #22
 8026846:	6003      	str	r3, [r0, #0]
 8026848:	f04f 30ff 	mov.w	r0, #4294967295
 802684c:	bd38      	pop	{r3, r4, r5, pc}
 802684e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8026850:	b112      	cbz	r2, 8026858 <_raise_r+0x1e>
 8026852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026856:	b94b      	cbnz	r3, 802686c <_raise_r+0x32>
 8026858:	4620      	mov	r0, r4
 802685a:	f000 f865 	bl	8026928 <_getpid_r>
 802685e:	462a      	mov	r2, r5
 8026860:	4601      	mov	r1, r0
 8026862:	4620      	mov	r0, r4
 8026864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026868:	f000 b84c 	b.w	8026904 <_kill_r>
 802686c:	2b01      	cmp	r3, #1
 802686e:	d00a      	beq.n	8026886 <_raise_r+0x4c>
 8026870:	1c59      	adds	r1, r3, #1
 8026872:	d103      	bne.n	802687c <_raise_r+0x42>
 8026874:	2316      	movs	r3, #22
 8026876:	6003      	str	r3, [r0, #0]
 8026878:	2001      	movs	r0, #1
 802687a:	e7e7      	b.n	802684c <_raise_r+0x12>
 802687c:	2400      	movs	r4, #0
 802687e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026882:	4628      	mov	r0, r5
 8026884:	4798      	blx	r3
 8026886:	2000      	movs	r0, #0
 8026888:	e7e0      	b.n	802684c <_raise_r+0x12>
	...

0802688c <raise>:
 802688c:	4b02      	ldr	r3, [pc, #8]	; (8026898 <raise+0xc>)
 802688e:	4601      	mov	r1, r0
 8026890:	6818      	ldr	r0, [r3, #0]
 8026892:	f7ff bfd2 	b.w	802683a <_raise_r>
 8026896:	bf00      	nop
 8026898:	20000348 	.word	0x20000348

0802689c <_close_r>:
 802689c:	b538      	push	{r3, r4, r5, lr}
 802689e:	4d06      	ldr	r5, [pc, #24]	; (80268b8 <_close_r+0x1c>)
 80268a0:	2300      	movs	r3, #0
 80268a2:	4604      	mov	r4, r0
 80268a4:	4608      	mov	r0, r1
 80268a6:	602b      	str	r3, [r5, #0]
 80268a8:	f7de f8a7 	bl	80049fa <_close>
 80268ac:	1c43      	adds	r3, r0, #1
 80268ae:	d102      	bne.n	80268b6 <_close_r+0x1a>
 80268b0:	682b      	ldr	r3, [r5, #0]
 80268b2:	b103      	cbz	r3, 80268b6 <_close_r+0x1a>
 80268b4:	6023      	str	r3, [r4, #0]
 80268b6:	bd38      	pop	{r3, r4, r5, pc}
 80268b8:	200262c0 	.word	0x200262c0

080268bc <_lseek_r>:
 80268bc:	b538      	push	{r3, r4, r5, lr}
 80268be:	4d07      	ldr	r5, [pc, #28]	; (80268dc <_lseek_r+0x20>)
 80268c0:	4604      	mov	r4, r0
 80268c2:	4608      	mov	r0, r1
 80268c4:	4611      	mov	r1, r2
 80268c6:	2200      	movs	r2, #0
 80268c8:	602a      	str	r2, [r5, #0]
 80268ca:	461a      	mov	r2, r3
 80268cc:	f7de f8bc 	bl	8004a48 <_lseek>
 80268d0:	1c43      	adds	r3, r0, #1
 80268d2:	d102      	bne.n	80268da <_lseek_r+0x1e>
 80268d4:	682b      	ldr	r3, [r5, #0]
 80268d6:	b103      	cbz	r3, 80268da <_lseek_r+0x1e>
 80268d8:	6023      	str	r3, [r4, #0]
 80268da:	bd38      	pop	{r3, r4, r5, pc}
 80268dc:	200262c0 	.word	0x200262c0

080268e0 <_read_r>:
 80268e0:	b538      	push	{r3, r4, r5, lr}
 80268e2:	4d07      	ldr	r5, [pc, #28]	; (8026900 <_read_r+0x20>)
 80268e4:	4604      	mov	r4, r0
 80268e6:	4608      	mov	r0, r1
 80268e8:	4611      	mov	r1, r2
 80268ea:	2200      	movs	r2, #0
 80268ec:	602a      	str	r2, [r5, #0]
 80268ee:	461a      	mov	r2, r3
 80268f0:	f7de f84a 	bl	8004988 <_read>
 80268f4:	1c43      	adds	r3, r0, #1
 80268f6:	d102      	bne.n	80268fe <_read_r+0x1e>
 80268f8:	682b      	ldr	r3, [r5, #0]
 80268fa:	b103      	cbz	r3, 80268fe <_read_r+0x1e>
 80268fc:	6023      	str	r3, [r4, #0]
 80268fe:	bd38      	pop	{r3, r4, r5, pc}
 8026900:	200262c0 	.word	0x200262c0

08026904 <_kill_r>:
 8026904:	b538      	push	{r3, r4, r5, lr}
 8026906:	4d07      	ldr	r5, [pc, #28]	; (8026924 <_kill_r+0x20>)
 8026908:	2300      	movs	r3, #0
 802690a:	4604      	mov	r4, r0
 802690c:	4608      	mov	r0, r1
 802690e:	4611      	mov	r1, r2
 8026910:	602b      	str	r3, [r5, #0]
 8026912:	f7de f81f 	bl	8004954 <_kill>
 8026916:	1c43      	adds	r3, r0, #1
 8026918:	d102      	bne.n	8026920 <_kill_r+0x1c>
 802691a:	682b      	ldr	r3, [r5, #0]
 802691c:	b103      	cbz	r3, 8026920 <_kill_r+0x1c>
 802691e:	6023      	str	r3, [r4, #0]
 8026920:	bd38      	pop	{r3, r4, r5, pc}
 8026922:	bf00      	nop
 8026924:	200262c0 	.word	0x200262c0

08026928 <_getpid_r>:
 8026928:	f7de b80c 	b.w	8004944 <_getpid>

0802692c <_sbrk_r>:
 802692c:	b538      	push	{r3, r4, r5, lr}
 802692e:	4d06      	ldr	r5, [pc, #24]	; (8026948 <_sbrk_r+0x1c>)
 8026930:	2300      	movs	r3, #0
 8026932:	4604      	mov	r4, r0
 8026934:	4608      	mov	r0, r1
 8026936:	602b      	str	r3, [r5, #0]
 8026938:	f7de f894 	bl	8004a64 <_sbrk>
 802693c:	1c43      	adds	r3, r0, #1
 802693e:	d102      	bne.n	8026946 <_sbrk_r+0x1a>
 8026940:	682b      	ldr	r3, [r5, #0]
 8026942:	b103      	cbz	r3, 8026946 <_sbrk_r+0x1a>
 8026944:	6023      	str	r3, [r4, #0]
 8026946:	bd38      	pop	{r3, r4, r5, pc}
 8026948:	200262c0 	.word	0x200262c0

0802694c <_write_r>:
 802694c:	b538      	push	{r3, r4, r5, lr}
 802694e:	4d07      	ldr	r5, [pc, #28]	; (802696c <_write_r+0x20>)
 8026950:	4604      	mov	r4, r0
 8026952:	4608      	mov	r0, r1
 8026954:	4611      	mov	r1, r2
 8026956:	2200      	movs	r2, #0
 8026958:	602a      	str	r2, [r5, #0]
 802695a:	461a      	mov	r2, r3
 802695c:	f7de f831 	bl	80049c2 <_write>
 8026960:	1c43      	adds	r3, r0, #1
 8026962:	d102      	bne.n	802696a <_write_r+0x1e>
 8026964:	682b      	ldr	r3, [r5, #0]
 8026966:	b103      	cbz	r3, 802696a <_write_r+0x1e>
 8026968:	6023      	str	r3, [r4, #0]
 802696a:	bd38      	pop	{r3, r4, r5, pc}
 802696c:	200262c0 	.word	0x200262c0

08026970 <__errno>:
 8026970:	4b01      	ldr	r3, [pc, #4]	; (8026978 <__errno+0x8>)
 8026972:	6818      	ldr	r0, [r3, #0]
 8026974:	4770      	bx	lr
 8026976:	bf00      	nop
 8026978:	20000348 	.word	0x20000348

0802697c <__libc_init_array>:
 802697c:	b570      	push	{r4, r5, r6, lr}
 802697e:	4d0d      	ldr	r5, [pc, #52]	; (80269b4 <__libc_init_array+0x38>)
 8026980:	4c0d      	ldr	r4, [pc, #52]	; (80269b8 <__libc_init_array+0x3c>)
 8026982:	1b64      	subs	r4, r4, r5
 8026984:	10a4      	asrs	r4, r4, #2
 8026986:	2600      	movs	r6, #0
 8026988:	42a6      	cmp	r6, r4
 802698a:	d109      	bne.n	80269a0 <__libc_init_array+0x24>
 802698c:	4d0b      	ldr	r5, [pc, #44]	; (80269bc <__libc_init_array+0x40>)
 802698e:	4c0c      	ldr	r4, [pc, #48]	; (80269c0 <__libc_init_array+0x44>)
 8026990:	f000 fd70 	bl	8027474 <_init>
 8026994:	1b64      	subs	r4, r4, r5
 8026996:	10a4      	asrs	r4, r4, #2
 8026998:	2600      	movs	r6, #0
 802699a:	42a6      	cmp	r6, r4
 802699c:	d105      	bne.n	80269aa <__libc_init_array+0x2e>
 802699e:	bd70      	pop	{r4, r5, r6, pc}
 80269a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80269a4:	4798      	blx	r3
 80269a6:	3601      	adds	r6, #1
 80269a8:	e7ee      	b.n	8026988 <__libc_init_array+0xc>
 80269aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80269ae:	4798      	blx	r3
 80269b0:	3601      	adds	r6, #1
 80269b2:	e7f2      	b.n	802699a <__libc_init_array+0x1e>
 80269b4:	0805cea8 	.word	0x0805cea8
 80269b8:	0805cea8 	.word	0x0805cea8
 80269bc:	0805cea8 	.word	0x0805cea8
 80269c0:	0805cec0 	.word	0x0805cec0

080269c4 <__retarget_lock_init_recursive>:
 80269c4:	4770      	bx	lr

080269c6 <__retarget_lock_acquire_recursive>:
 80269c6:	4770      	bx	lr

080269c8 <__retarget_lock_release_recursive>:
 80269c8:	4770      	bx	lr

080269ca <memcpy>:
 80269ca:	440a      	add	r2, r1
 80269cc:	4291      	cmp	r1, r2
 80269ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80269d2:	d100      	bne.n	80269d6 <memcpy+0xc>
 80269d4:	4770      	bx	lr
 80269d6:	b510      	push	{r4, lr}
 80269d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80269dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80269e0:	4291      	cmp	r1, r2
 80269e2:	d1f9      	bne.n	80269d8 <memcpy+0xe>
 80269e4:	bd10      	pop	{r4, pc}
	...

080269e8 <__register_exitproc>:
 80269e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80269ec:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8026aa0 <__register_exitproc+0xb8>
 80269f0:	4606      	mov	r6, r0
 80269f2:	f8d8 0000 	ldr.w	r0, [r8]
 80269f6:	461f      	mov	r7, r3
 80269f8:	460d      	mov	r5, r1
 80269fa:	4691      	mov	r9, r2
 80269fc:	f7ff ffe3 	bl	80269c6 <__retarget_lock_acquire_recursive>
 8026a00:	4b23      	ldr	r3, [pc, #140]	; (8026a90 <__register_exitproc+0xa8>)
 8026a02:	681c      	ldr	r4, [r3, #0]
 8026a04:	b934      	cbnz	r4, 8026a14 <__register_exitproc+0x2c>
 8026a06:	4c23      	ldr	r4, [pc, #140]	; (8026a94 <__register_exitproc+0xac>)
 8026a08:	601c      	str	r4, [r3, #0]
 8026a0a:	4b23      	ldr	r3, [pc, #140]	; (8026a98 <__register_exitproc+0xb0>)
 8026a0c:	b113      	cbz	r3, 8026a14 <__register_exitproc+0x2c>
 8026a0e:	681b      	ldr	r3, [r3, #0]
 8026a10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026a14:	6863      	ldr	r3, [r4, #4]
 8026a16:	2b1f      	cmp	r3, #31
 8026a18:	dd07      	ble.n	8026a2a <__register_exitproc+0x42>
 8026a1a:	f8d8 0000 	ldr.w	r0, [r8]
 8026a1e:	f7ff ffd3 	bl	80269c8 <__retarget_lock_release_recursive>
 8026a22:	f04f 30ff 	mov.w	r0, #4294967295
 8026a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a2a:	b32e      	cbz	r6, 8026a78 <__register_exitproc+0x90>
 8026a2c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026a30:	b968      	cbnz	r0, 8026a4e <__register_exitproc+0x66>
 8026a32:	4b1a      	ldr	r3, [pc, #104]	; (8026a9c <__register_exitproc+0xb4>)
 8026a34:	2b00      	cmp	r3, #0
 8026a36:	d0f0      	beq.n	8026a1a <__register_exitproc+0x32>
 8026a38:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026a3c:	f7ff fd14 	bl	8026468 <malloc>
 8026a40:	2800      	cmp	r0, #0
 8026a42:	d0ea      	beq.n	8026a1a <__register_exitproc+0x32>
 8026a44:	2300      	movs	r3, #0
 8026a46:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026a4a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026a4e:	6863      	ldr	r3, [r4, #4]
 8026a50:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026a54:	2201      	movs	r2, #1
 8026a56:	409a      	lsls	r2, r3
 8026a58:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026a5c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026a60:	4313      	orrs	r3, r2
 8026a62:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026a66:	2e02      	cmp	r6, #2
 8026a68:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026a6c:	bf02      	ittt	eq
 8026a6e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026a72:	4313      	orreq	r3, r2
 8026a74:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026a78:	6863      	ldr	r3, [r4, #4]
 8026a7a:	f8d8 0000 	ldr.w	r0, [r8]
 8026a7e:	1c5a      	adds	r2, r3, #1
 8026a80:	3302      	adds	r3, #2
 8026a82:	6062      	str	r2, [r4, #4]
 8026a84:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026a88:	f7ff ff9e 	bl	80269c8 <__retarget_lock_release_recursive>
 8026a8c:	2000      	movs	r0, #0
 8026a8e:	e7ca      	b.n	8026a26 <__register_exitproc+0x3e>
 8026a90:	20026354 	.word	0x20026354
 8026a94:	200262c8 	.word	0x200262c8
 8026a98:	08029a64 	.word	0x08029a64
 8026a9c:	08026469 	.word	0x08026469
 8026aa0:	2000034c 	.word	0x2000034c

08026aa4 <_free_r>:
 8026aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026aa6:	2900      	cmp	r1, #0
 8026aa8:	d044      	beq.n	8026b34 <_free_r+0x90>
 8026aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026aae:	9001      	str	r0, [sp, #4]
 8026ab0:	2b00      	cmp	r3, #0
 8026ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8026ab6:	bfb8      	it	lt
 8026ab8:	18e4      	addlt	r4, r4, r3
 8026aba:	f7ff fd85 	bl	80265c8 <__malloc_lock>
 8026abe:	4a1e      	ldr	r2, [pc, #120]	; (8026b38 <_free_r+0x94>)
 8026ac0:	9801      	ldr	r0, [sp, #4]
 8026ac2:	6813      	ldr	r3, [r2, #0]
 8026ac4:	b933      	cbnz	r3, 8026ad4 <_free_r+0x30>
 8026ac6:	6063      	str	r3, [r4, #4]
 8026ac8:	6014      	str	r4, [r2, #0]
 8026aca:	b003      	add	sp, #12
 8026acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026ad0:	f7ff bd80 	b.w	80265d4 <__malloc_unlock>
 8026ad4:	42a3      	cmp	r3, r4
 8026ad6:	d908      	bls.n	8026aea <_free_r+0x46>
 8026ad8:	6825      	ldr	r5, [r4, #0]
 8026ada:	1961      	adds	r1, r4, r5
 8026adc:	428b      	cmp	r3, r1
 8026ade:	bf01      	itttt	eq
 8026ae0:	6819      	ldreq	r1, [r3, #0]
 8026ae2:	685b      	ldreq	r3, [r3, #4]
 8026ae4:	1949      	addeq	r1, r1, r5
 8026ae6:	6021      	streq	r1, [r4, #0]
 8026ae8:	e7ed      	b.n	8026ac6 <_free_r+0x22>
 8026aea:	461a      	mov	r2, r3
 8026aec:	685b      	ldr	r3, [r3, #4]
 8026aee:	b10b      	cbz	r3, 8026af4 <_free_r+0x50>
 8026af0:	42a3      	cmp	r3, r4
 8026af2:	d9fa      	bls.n	8026aea <_free_r+0x46>
 8026af4:	6811      	ldr	r1, [r2, #0]
 8026af6:	1855      	adds	r5, r2, r1
 8026af8:	42a5      	cmp	r5, r4
 8026afa:	d10b      	bne.n	8026b14 <_free_r+0x70>
 8026afc:	6824      	ldr	r4, [r4, #0]
 8026afe:	4421      	add	r1, r4
 8026b00:	1854      	adds	r4, r2, r1
 8026b02:	42a3      	cmp	r3, r4
 8026b04:	6011      	str	r1, [r2, #0]
 8026b06:	d1e0      	bne.n	8026aca <_free_r+0x26>
 8026b08:	681c      	ldr	r4, [r3, #0]
 8026b0a:	685b      	ldr	r3, [r3, #4]
 8026b0c:	6053      	str	r3, [r2, #4]
 8026b0e:	440c      	add	r4, r1
 8026b10:	6014      	str	r4, [r2, #0]
 8026b12:	e7da      	b.n	8026aca <_free_r+0x26>
 8026b14:	d902      	bls.n	8026b1c <_free_r+0x78>
 8026b16:	230c      	movs	r3, #12
 8026b18:	6003      	str	r3, [r0, #0]
 8026b1a:	e7d6      	b.n	8026aca <_free_r+0x26>
 8026b1c:	6825      	ldr	r5, [r4, #0]
 8026b1e:	1961      	adds	r1, r4, r5
 8026b20:	428b      	cmp	r3, r1
 8026b22:	bf04      	itt	eq
 8026b24:	6819      	ldreq	r1, [r3, #0]
 8026b26:	685b      	ldreq	r3, [r3, #4]
 8026b28:	6063      	str	r3, [r4, #4]
 8026b2a:	bf04      	itt	eq
 8026b2c:	1949      	addeq	r1, r1, r5
 8026b2e:	6021      	streq	r1, [r4, #0]
 8026b30:	6054      	str	r4, [r2, #4]
 8026b32:	e7ca      	b.n	8026aca <_free_r+0x26>
 8026b34:	b003      	add	sp, #12
 8026b36:	bd30      	pop	{r4, r5, pc}
 8026b38:	2002617c 	.word	0x2002617c

08026b3c <__sfputc_r>:
 8026b3c:	6893      	ldr	r3, [r2, #8]
 8026b3e:	3b01      	subs	r3, #1
 8026b40:	2b00      	cmp	r3, #0
 8026b42:	b410      	push	{r4}
 8026b44:	6093      	str	r3, [r2, #8]
 8026b46:	da08      	bge.n	8026b5a <__sfputc_r+0x1e>
 8026b48:	6994      	ldr	r4, [r2, #24]
 8026b4a:	42a3      	cmp	r3, r4
 8026b4c:	db01      	blt.n	8026b52 <__sfputc_r+0x16>
 8026b4e:	290a      	cmp	r1, #10
 8026b50:	d103      	bne.n	8026b5a <__sfputc_r+0x1e>
 8026b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026b56:	f000 bb73 	b.w	8027240 <__swbuf_r>
 8026b5a:	6813      	ldr	r3, [r2, #0]
 8026b5c:	1c58      	adds	r0, r3, #1
 8026b5e:	6010      	str	r0, [r2, #0]
 8026b60:	7019      	strb	r1, [r3, #0]
 8026b62:	4608      	mov	r0, r1
 8026b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026b68:	4770      	bx	lr

08026b6a <__sfputs_r>:
 8026b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026b6c:	4606      	mov	r6, r0
 8026b6e:	460f      	mov	r7, r1
 8026b70:	4614      	mov	r4, r2
 8026b72:	18d5      	adds	r5, r2, r3
 8026b74:	42ac      	cmp	r4, r5
 8026b76:	d101      	bne.n	8026b7c <__sfputs_r+0x12>
 8026b78:	2000      	movs	r0, #0
 8026b7a:	e007      	b.n	8026b8c <__sfputs_r+0x22>
 8026b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026b80:	463a      	mov	r2, r7
 8026b82:	4630      	mov	r0, r6
 8026b84:	f7ff ffda 	bl	8026b3c <__sfputc_r>
 8026b88:	1c43      	adds	r3, r0, #1
 8026b8a:	d1f3      	bne.n	8026b74 <__sfputs_r+0xa>
 8026b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026b90 <_vfiprintf_r>:
 8026b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b94:	460d      	mov	r5, r1
 8026b96:	b09d      	sub	sp, #116	; 0x74
 8026b98:	4614      	mov	r4, r2
 8026b9a:	4698      	mov	r8, r3
 8026b9c:	4606      	mov	r6, r0
 8026b9e:	b118      	cbz	r0, 8026ba8 <_vfiprintf_r+0x18>
 8026ba0:	6a03      	ldr	r3, [r0, #32]
 8026ba2:	b90b      	cbnz	r3, 8026ba8 <_vfiprintf_r+0x18>
 8026ba4:	f7ff fdb6 	bl	8026714 <__sinit>
 8026ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026baa:	07d9      	lsls	r1, r3, #31
 8026bac:	d405      	bmi.n	8026bba <_vfiprintf_r+0x2a>
 8026bae:	89ab      	ldrh	r3, [r5, #12]
 8026bb0:	059a      	lsls	r2, r3, #22
 8026bb2:	d402      	bmi.n	8026bba <_vfiprintf_r+0x2a>
 8026bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026bb6:	f7ff ff06 	bl	80269c6 <__retarget_lock_acquire_recursive>
 8026bba:	89ab      	ldrh	r3, [r5, #12]
 8026bbc:	071b      	lsls	r3, r3, #28
 8026bbe:	d501      	bpl.n	8026bc4 <_vfiprintf_r+0x34>
 8026bc0:	692b      	ldr	r3, [r5, #16]
 8026bc2:	b99b      	cbnz	r3, 8026bec <_vfiprintf_r+0x5c>
 8026bc4:	4629      	mov	r1, r5
 8026bc6:	4630      	mov	r0, r6
 8026bc8:	f000 fb78 	bl	80272bc <__swsetup_r>
 8026bcc:	b170      	cbz	r0, 8026bec <_vfiprintf_r+0x5c>
 8026bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026bd0:	07dc      	lsls	r4, r3, #31
 8026bd2:	d504      	bpl.n	8026bde <_vfiprintf_r+0x4e>
 8026bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8026bd8:	b01d      	add	sp, #116	; 0x74
 8026bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bde:	89ab      	ldrh	r3, [r5, #12]
 8026be0:	0598      	lsls	r0, r3, #22
 8026be2:	d4f7      	bmi.n	8026bd4 <_vfiprintf_r+0x44>
 8026be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026be6:	f7ff feef 	bl	80269c8 <__retarget_lock_release_recursive>
 8026bea:	e7f3      	b.n	8026bd4 <_vfiprintf_r+0x44>
 8026bec:	2300      	movs	r3, #0
 8026bee:	9309      	str	r3, [sp, #36]	; 0x24
 8026bf0:	2320      	movs	r3, #32
 8026bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8026bfa:	2330      	movs	r3, #48	; 0x30
 8026bfc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8026db0 <_vfiprintf_r+0x220>
 8026c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026c04:	f04f 0901 	mov.w	r9, #1
 8026c08:	4623      	mov	r3, r4
 8026c0a:	469a      	mov	sl, r3
 8026c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026c10:	b10a      	cbz	r2, 8026c16 <_vfiprintf_r+0x86>
 8026c12:	2a25      	cmp	r2, #37	; 0x25
 8026c14:	d1f9      	bne.n	8026c0a <_vfiprintf_r+0x7a>
 8026c16:	ebba 0b04 	subs.w	fp, sl, r4
 8026c1a:	d00b      	beq.n	8026c34 <_vfiprintf_r+0xa4>
 8026c1c:	465b      	mov	r3, fp
 8026c1e:	4622      	mov	r2, r4
 8026c20:	4629      	mov	r1, r5
 8026c22:	4630      	mov	r0, r6
 8026c24:	f7ff ffa1 	bl	8026b6a <__sfputs_r>
 8026c28:	3001      	adds	r0, #1
 8026c2a:	f000 80a9 	beq.w	8026d80 <_vfiprintf_r+0x1f0>
 8026c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026c30:	445a      	add	r2, fp
 8026c32:	9209      	str	r2, [sp, #36]	; 0x24
 8026c34:	f89a 3000 	ldrb.w	r3, [sl]
 8026c38:	2b00      	cmp	r3, #0
 8026c3a:	f000 80a1 	beq.w	8026d80 <_vfiprintf_r+0x1f0>
 8026c3e:	2300      	movs	r3, #0
 8026c40:	f04f 32ff 	mov.w	r2, #4294967295
 8026c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026c48:	f10a 0a01 	add.w	sl, sl, #1
 8026c4c:	9304      	str	r3, [sp, #16]
 8026c4e:	9307      	str	r3, [sp, #28]
 8026c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026c54:	931a      	str	r3, [sp, #104]	; 0x68
 8026c56:	4654      	mov	r4, sl
 8026c58:	2205      	movs	r2, #5
 8026c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026c5e:	4854      	ldr	r0, [pc, #336]	; (8026db0 <_vfiprintf_r+0x220>)
 8026c60:	f7d9 face 	bl	8000200 <memchr>
 8026c64:	9a04      	ldr	r2, [sp, #16]
 8026c66:	b9d8      	cbnz	r0, 8026ca0 <_vfiprintf_r+0x110>
 8026c68:	06d1      	lsls	r1, r2, #27
 8026c6a:	bf44      	itt	mi
 8026c6c:	2320      	movmi	r3, #32
 8026c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026c72:	0713      	lsls	r3, r2, #28
 8026c74:	bf44      	itt	mi
 8026c76:	232b      	movmi	r3, #43	; 0x2b
 8026c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8026c80:	2b2a      	cmp	r3, #42	; 0x2a
 8026c82:	d015      	beq.n	8026cb0 <_vfiprintf_r+0x120>
 8026c84:	9a07      	ldr	r2, [sp, #28]
 8026c86:	4654      	mov	r4, sl
 8026c88:	2000      	movs	r0, #0
 8026c8a:	f04f 0c0a 	mov.w	ip, #10
 8026c8e:	4621      	mov	r1, r4
 8026c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026c94:	3b30      	subs	r3, #48	; 0x30
 8026c96:	2b09      	cmp	r3, #9
 8026c98:	d94d      	bls.n	8026d36 <_vfiprintf_r+0x1a6>
 8026c9a:	b1b0      	cbz	r0, 8026cca <_vfiprintf_r+0x13a>
 8026c9c:	9207      	str	r2, [sp, #28]
 8026c9e:	e014      	b.n	8026cca <_vfiprintf_r+0x13a>
 8026ca0:	eba0 0308 	sub.w	r3, r0, r8
 8026ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8026ca8:	4313      	orrs	r3, r2
 8026caa:	9304      	str	r3, [sp, #16]
 8026cac:	46a2      	mov	sl, r4
 8026cae:	e7d2      	b.n	8026c56 <_vfiprintf_r+0xc6>
 8026cb0:	9b03      	ldr	r3, [sp, #12]
 8026cb2:	1d19      	adds	r1, r3, #4
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	9103      	str	r1, [sp, #12]
 8026cb8:	2b00      	cmp	r3, #0
 8026cba:	bfbb      	ittet	lt
 8026cbc:	425b      	neglt	r3, r3
 8026cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8026cc2:	9307      	strge	r3, [sp, #28]
 8026cc4:	9307      	strlt	r3, [sp, #28]
 8026cc6:	bfb8      	it	lt
 8026cc8:	9204      	strlt	r2, [sp, #16]
 8026cca:	7823      	ldrb	r3, [r4, #0]
 8026ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8026cce:	d10c      	bne.n	8026cea <_vfiprintf_r+0x15a>
 8026cd0:	7863      	ldrb	r3, [r4, #1]
 8026cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8026cd4:	d134      	bne.n	8026d40 <_vfiprintf_r+0x1b0>
 8026cd6:	9b03      	ldr	r3, [sp, #12]
 8026cd8:	1d1a      	adds	r2, r3, #4
 8026cda:	681b      	ldr	r3, [r3, #0]
 8026cdc:	9203      	str	r2, [sp, #12]
 8026cde:	2b00      	cmp	r3, #0
 8026ce0:	bfb8      	it	lt
 8026ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8026ce6:	3402      	adds	r4, #2
 8026ce8:	9305      	str	r3, [sp, #20]
 8026cea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8026dc0 <_vfiprintf_r+0x230>
 8026cee:	7821      	ldrb	r1, [r4, #0]
 8026cf0:	2203      	movs	r2, #3
 8026cf2:	4650      	mov	r0, sl
 8026cf4:	f7d9 fa84 	bl	8000200 <memchr>
 8026cf8:	b138      	cbz	r0, 8026d0a <_vfiprintf_r+0x17a>
 8026cfa:	9b04      	ldr	r3, [sp, #16]
 8026cfc:	eba0 000a 	sub.w	r0, r0, sl
 8026d00:	2240      	movs	r2, #64	; 0x40
 8026d02:	4082      	lsls	r2, r0
 8026d04:	4313      	orrs	r3, r2
 8026d06:	3401      	adds	r4, #1
 8026d08:	9304      	str	r3, [sp, #16]
 8026d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026d0e:	4829      	ldr	r0, [pc, #164]	; (8026db4 <_vfiprintf_r+0x224>)
 8026d10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026d14:	2206      	movs	r2, #6
 8026d16:	f7d9 fa73 	bl	8000200 <memchr>
 8026d1a:	2800      	cmp	r0, #0
 8026d1c:	d03f      	beq.n	8026d9e <_vfiprintf_r+0x20e>
 8026d1e:	4b26      	ldr	r3, [pc, #152]	; (8026db8 <_vfiprintf_r+0x228>)
 8026d20:	bb1b      	cbnz	r3, 8026d6a <_vfiprintf_r+0x1da>
 8026d22:	9b03      	ldr	r3, [sp, #12]
 8026d24:	3307      	adds	r3, #7
 8026d26:	f023 0307 	bic.w	r3, r3, #7
 8026d2a:	3308      	adds	r3, #8
 8026d2c:	9303      	str	r3, [sp, #12]
 8026d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d30:	443b      	add	r3, r7
 8026d32:	9309      	str	r3, [sp, #36]	; 0x24
 8026d34:	e768      	b.n	8026c08 <_vfiprintf_r+0x78>
 8026d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8026d3a:	460c      	mov	r4, r1
 8026d3c:	2001      	movs	r0, #1
 8026d3e:	e7a6      	b.n	8026c8e <_vfiprintf_r+0xfe>
 8026d40:	2300      	movs	r3, #0
 8026d42:	3401      	adds	r4, #1
 8026d44:	9305      	str	r3, [sp, #20]
 8026d46:	4619      	mov	r1, r3
 8026d48:	f04f 0c0a 	mov.w	ip, #10
 8026d4c:	4620      	mov	r0, r4
 8026d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026d52:	3a30      	subs	r2, #48	; 0x30
 8026d54:	2a09      	cmp	r2, #9
 8026d56:	d903      	bls.n	8026d60 <_vfiprintf_r+0x1d0>
 8026d58:	2b00      	cmp	r3, #0
 8026d5a:	d0c6      	beq.n	8026cea <_vfiprintf_r+0x15a>
 8026d5c:	9105      	str	r1, [sp, #20]
 8026d5e:	e7c4      	b.n	8026cea <_vfiprintf_r+0x15a>
 8026d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8026d64:	4604      	mov	r4, r0
 8026d66:	2301      	movs	r3, #1
 8026d68:	e7f0      	b.n	8026d4c <_vfiprintf_r+0x1bc>
 8026d6a:	ab03      	add	r3, sp, #12
 8026d6c:	9300      	str	r3, [sp, #0]
 8026d6e:	462a      	mov	r2, r5
 8026d70:	4b12      	ldr	r3, [pc, #72]	; (8026dbc <_vfiprintf_r+0x22c>)
 8026d72:	a904      	add	r1, sp, #16
 8026d74:	4630      	mov	r0, r6
 8026d76:	f3af 8000 	nop.w
 8026d7a:	4607      	mov	r7, r0
 8026d7c:	1c78      	adds	r0, r7, #1
 8026d7e:	d1d6      	bne.n	8026d2e <_vfiprintf_r+0x19e>
 8026d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026d82:	07d9      	lsls	r1, r3, #31
 8026d84:	d405      	bmi.n	8026d92 <_vfiprintf_r+0x202>
 8026d86:	89ab      	ldrh	r3, [r5, #12]
 8026d88:	059a      	lsls	r2, r3, #22
 8026d8a:	d402      	bmi.n	8026d92 <_vfiprintf_r+0x202>
 8026d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026d8e:	f7ff fe1b 	bl	80269c8 <__retarget_lock_release_recursive>
 8026d92:	89ab      	ldrh	r3, [r5, #12]
 8026d94:	065b      	lsls	r3, r3, #25
 8026d96:	f53f af1d 	bmi.w	8026bd4 <_vfiprintf_r+0x44>
 8026d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026d9c:	e71c      	b.n	8026bd8 <_vfiprintf_r+0x48>
 8026d9e:	ab03      	add	r3, sp, #12
 8026da0:	9300      	str	r3, [sp, #0]
 8026da2:	462a      	mov	r2, r5
 8026da4:	4b05      	ldr	r3, [pc, #20]	; (8026dbc <_vfiprintf_r+0x22c>)
 8026da6:	a904      	add	r1, sp, #16
 8026da8:	4630      	mov	r0, r6
 8026daa:	f000 f879 	bl	8026ea0 <_printf_i>
 8026dae:	e7e4      	b.n	8026d7a <_vfiprintf_r+0x1ea>
 8026db0:	08029a68 	.word	0x08029a68
 8026db4:	08029a72 	.word	0x08029a72
 8026db8:	00000000 	.word	0x00000000
 8026dbc:	08026b6b 	.word	0x08026b6b
 8026dc0:	08029a6e 	.word	0x08029a6e

08026dc4 <_printf_common>:
 8026dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026dc8:	4616      	mov	r6, r2
 8026dca:	4699      	mov	r9, r3
 8026dcc:	688a      	ldr	r2, [r1, #8]
 8026dce:	690b      	ldr	r3, [r1, #16]
 8026dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026dd4:	4293      	cmp	r3, r2
 8026dd6:	bfb8      	it	lt
 8026dd8:	4613      	movlt	r3, r2
 8026dda:	6033      	str	r3, [r6, #0]
 8026ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026de0:	4607      	mov	r7, r0
 8026de2:	460c      	mov	r4, r1
 8026de4:	b10a      	cbz	r2, 8026dea <_printf_common+0x26>
 8026de6:	3301      	adds	r3, #1
 8026de8:	6033      	str	r3, [r6, #0]
 8026dea:	6823      	ldr	r3, [r4, #0]
 8026dec:	0699      	lsls	r1, r3, #26
 8026dee:	bf42      	ittt	mi
 8026df0:	6833      	ldrmi	r3, [r6, #0]
 8026df2:	3302      	addmi	r3, #2
 8026df4:	6033      	strmi	r3, [r6, #0]
 8026df6:	6825      	ldr	r5, [r4, #0]
 8026df8:	f015 0506 	ands.w	r5, r5, #6
 8026dfc:	d106      	bne.n	8026e0c <_printf_common+0x48>
 8026dfe:	f104 0a19 	add.w	sl, r4, #25
 8026e02:	68e3      	ldr	r3, [r4, #12]
 8026e04:	6832      	ldr	r2, [r6, #0]
 8026e06:	1a9b      	subs	r3, r3, r2
 8026e08:	42ab      	cmp	r3, r5
 8026e0a:	dc26      	bgt.n	8026e5a <_printf_common+0x96>
 8026e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026e10:	1e13      	subs	r3, r2, #0
 8026e12:	6822      	ldr	r2, [r4, #0]
 8026e14:	bf18      	it	ne
 8026e16:	2301      	movne	r3, #1
 8026e18:	0692      	lsls	r2, r2, #26
 8026e1a:	d42b      	bmi.n	8026e74 <_printf_common+0xb0>
 8026e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026e20:	4649      	mov	r1, r9
 8026e22:	4638      	mov	r0, r7
 8026e24:	47c0      	blx	r8
 8026e26:	3001      	adds	r0, #1
 8026e28:	d01e      	beq.n	8026e68 <_printf_common+0xa4>
 8026e2a:	6823      	ldr	r3, [r4, #0]
 8026e2c:	6922      	ldr	r2, [r4, #16]
 8026e2e:	f003 0306 	and.w	r3, r3, #6
 8026e32:	2b04      	cmp	r3, #4
 8026e34:	bf02      	ittt	eq
 8026e36:	68e5      	ldreq	r5, [r4, #12]
 8026e38:	6833      	ldreq	r3, [r6, #0]
 8026e3a:	1aed      	subeq	r5, r5, r3
 8026e3c:	68a3      	ldr	r3, [r4, #8]
 8026e3e:	bf0c      	ite	eq
 8026e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026e44:	2500      	movne	r5, #0
 8026e46:	4293      	cmp	r3, r2
 8026e48:	bfc4      	itt	gt
 8026e4a:	1a9b      	subgt	r3, r3, r2
 8026e4c:	18ed      	addgt	r5, r5, r3
 8026e4e:	2600      	movs	r6, #0
 8026e50:	341a      	adds	r4, #26
 8026e52:	42b5      	cmp	r5, r6
 8026e54:	d11a      	bne.n	8026e8c <_printf_common+0xc8>
 8026e56:	2000      	movs	r0, #0
 8026e58:	e008      	b.n	8026e6c <_printf_common+0xa8>
 8026e5a:	2301      	movs	r3, #1
 8026e5c:	4652      	mov	r2, sl
 8026e5e:	4649      	mov	r1, r9
 8026e60:	4638      	mov	r0, r7
 8026e62:	47c0      	blx	r8
 8026e64:	3001      	adds	r0, #1
 8026e66:	d103      	bne.n	8026e70 <_printf_common+0xac>
 8026e68:	f04f 30ff 	mov.w	r0, #4294967295
 8026e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026e70:	3501      	adds	r5, #1
 8026e72:	e7c6      	b.n	8026e02 <_printf_common+0x3e>
 8026e74:	18e1      	adds	r1, r4, r3
 8026e76:	1c5a      	adds	r2, r3, #1
 8026e78:	2030      	movs	r0, #48	; 0x30
 8026e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026e7e:	4422      	add	r2, r4
 8026e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026e88:	3302      	adds	r3, #2
 8026e8a:	e7c7      	b.n	8026e1c <_printf_common+0x58>
 8026e8c:	2301      	movs	r3, #1
 8026e8e:	4622      	mov	r2, r4
 8026e90:	4649      	mov	r1, r9
 8026e92:	4638      	mov	r0, r7
 8026e94:	47c0      	blx	r8
 8026e96:	3001      	adds	r0, #1
 8026e98:	d0e6      	beq.n	8026e68 <_printf_common+0xa4>
 8026e9a:	3601      	adds	r6, #1
 8026e9c:	e7d9      	b.n	8026e52 <_printf_common+0x8e>
	...

08026ea0 <_printf_i>:
 8026ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026ea4:	7e0f      	ldrb	r7, [r1, #24]
 8026ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026ea8:	2f78      	cmp	r7, #120	; 0x78
 8026eaa:	4691      	mov	r9, r2
 8026eac:	4680      	mov	r8, r0
 8026eae:	460c      	mov	r4, r1
 8026eb0:	469a      	mov	sl, r3
 8026eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8026eb6:	d807      	bhi.n	8026ec8 <_printf_i+0x28>
 8026eb8:	2f62      	cmp	r7, #98	; 0x62
 8026eba:	d80a      	bhi.n	8026ed2 <_printf_i+0x32>
 8026ebc:	2f00      	cmp	r7, #0
 8026ebe:	f000 80d4 	beq.w	802706a <_printf_i+0x1ca>
 8026ec2:	2f58      	cmp	r7, #88	; 0x58
 8026ec4:	f000 80c0 	beq.w	8027048 <_printf_i+0x1a8>
 8026ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026ed0:	e03a      	b.n	8026f48 <_printf_i+0xa8>
 8026ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026ed6:	2b15      	cmp	r3, #21
 8026ed8:	d8f6      	bhi.n	8026ec8 <_printf_i+0x28>
 8026eda:	a101      	add	r1, pc, #4	; (adr r1, 8026ee0 <_printf_i+0x40>)
 8026edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026ee0:	08026f39 	.word	0x08026f39
 8026ee4:	08026f4d 	.word	0x08026f4d
 8026ee8:	08026ec9 	.word	0x08026ec9
 8026eec:	08026ec9 	.word	0x08026ec9
 8026ef0:	08026ec9 	.word	0x08026ec9
 8026ef4:	08026ec9 	.word	0x08026ec9
 8026ef8:	08026f4d 	.word	0x08026f4d
 8026efc:	08026ec9 	.word	0x08026ec9
 8026f00:	08026ec9 	.word	0x08026ec9
 8026f04:	08026ec9 	.word	0x08026ec9
 8026f08:	08026ec9 	.word	0x08026ec9
 8026f0c:	08027051 	.word	0x08027051
 8026f10:	08026f79 	.word	0x08026f79
 8026f14:	0802700b 	.word	0x0802700b
 8026f18:	08026ec9 	.word	0x08026ec9
 8026f1c:	08026ec9 	.word	0x08026ec9
 8026f20:	08027073 	.word	0x08027073
 8026f24:	08026ec9 	.word	0x08026ec9
 8026f28:	08026f79 	.word	0x08026f79
 8026f2c:	08026ec9 	.word	0x08026ec9
 8026f30:	08026ec9 	.word	0x08026ec9
 8026f34:	08027013 	.word	0x08027013
 8026f38:	682b      	ldr	r3, [r5, #0]
 8026f3a:	1d1a      	adds	r2, r3, #4
 8026f3c:	681b      	ldr	r3, [r3, #0]
 8026f3e:	602a      	str	r2, [r5, #0]
 8026f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026f48:	2301      	movs	r3, #1
 8026f4a:	e09f      	b.n	802708c <_printf_i+0x1ec>
 8026f4c:	6820      	ldr	r0, [r4, #0]
 8026f4e:	682b      	ldr	r3, [r5, #0]
 8026f50:	0607      	lsls	r7, r0, #24
 8026f52:	f103 0104 	add.w	r1, r3, #4
 8026f56:	6029      	str	r1, [r5, #0]
 8026f58:	d501      	bpl.n	8026f5e <_printf_i+0xbe>
 8026f5a:	681e      	ldr	r6, [r3, #0]
 8026f5c:	e003      	b.n	8026f66 <_printf_i+0xc6>
 8026f5e:	0646      	lsls	r6, r0, #25
 8026f60:	d5fb      	bpl.n	8026f5a <_printf_i+0xba>
 8026f62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8026f66:	2e00      	cmp	r6, #0
 8026f68:	da03      	bge.n	8026f72 <_printf_i+0xd2>
 8026f6a:	232d      	movs	r3, #45	; 0x2d
 8026f6c:	4276      	negs	r6, r6
 8026f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026f72:	485a      	ldr	r0, [pc, #360]	; (80270dc <_printf_i+0x23c>)
 8026f74:	230a      	movs	r3, #10
 8026f76:	e012      	b.n	8026f9e <_printf_i+0xfe>
 8026f78:	682b      	ldr	r3, [r5, #0]
 8026f7a:	6820      	ldr	r0, [r4, #0]
 8026f7c:	1d19      	adds	r1, r3, #4
 8026f7e:	6029      	str	r1, [r5, #0]
 8026f80:	0605      	lsls	r5, r0, #24
 8026f82:	d501      	bpl.n	8026f88 <_printf_i+0xe8>
 8026f84:	681e      	ldr	r6, [r3, #0]
 8026f86:	e002      	b.n	8026f8e <_printf_i+0xee>
 8026f88:	0641      	lsls	r1, r0, #25
 8026f8a:	d5fb      	bpl.n	8026f84 <_printf_i+0xe4>
 8026f8c:	881e      	ldrh	r6, [r3, #0]
 8026f8e:	4853      	ldr	r0, [pc, #332]	; (80270dc <_printf_i+0x23c>)
 8026f90:	2f6f      	cmp	r7, #111	; 0x6f
 8026f92:	bf0c      	ite	eq
 8026f94:	2308      	moveq	r3, #8
 8026f96:	230a      	movne	r3, #10
 8026f98:	2100      	movs	r1, #0
 8026f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026f9e:	6865      	ldr	r5, [r4, #4]
 8026fa0:	60a5      	str	r5, [r4, #8]
 8026fa2:	2d00      	cmp	r5, #0
 8026fa4:	bfa2      	ittt	ge
 8026fa6:	6821      	ldrge	r1, [r4, #0]
 8026fa8:	f021 0104 	bicge.w	r1, r1, #4
 8026fac:	6021      	strge	r1, [r4, #0]
 8026fae:	b90e      	cbnz	r6, 8026fb4 <_printf_i+0x114>
 8026fb0:	2d00      	cmp	r5, #0
 8026fb2:	d04b      	beq.n	802704c <_printf_i+0x1ac>
 8026fb4:	4615      	mov	r5, r2
 8026fb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8026fba:	fb03 6711 	mls	r7, r3, r1, r6
 8026fbe:	5dc7      	ldrb	r7, [r0, r7]
 8026fc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026fc4:	4637      	mov	r7, r6
 8026fc6:	42bb      	cmp	r3, r7
 8026fc8:	460e      	mov	r6, r1
 8026fca:	d9f4      	bls.n	8026fb6 <_printf_i+0x116>
 8026fcc:	2b08      	cmp	r3, #8
 8026fce:	d10b      	bne.n	8026fe8 <_printf_i+0x148>
 8026fd0:	6823      	ldr	r3, [r4, #0]
 8026fd2:	07de      	lsls	r6, r3, #31
 8026fd4:	d508      	bpl.n	8026fe8 <_printf_i+0x148>
 8026fd6:	6923      	ldr	r3, [r4, #16]
 8026fd8:	6861      	ldr	r1, [r4, #4]
 8026fda:	4299      	cmp	r1, r3
 8026fdc:	bfde      	ittt	le
 8026fde:	2330      	movle	r3, #48	; 0x30
 8026fe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026fe4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026fe8:	1b52      	subs	r2, r2, r5
 8026fea:	6122      	str	r2, [r4, #16]
 8026fec:	f8cd a000 	str.w	sl, [sp]
 8026ff0:	464b      	mov	r3, r9
 8026ff2:	aa03      	add	r2, sp, #12
 8026ff4:	4621      	mov	r1, r4
 8026ff6:	4640      	mov	r0, r8
 8026ff8:	f7ff fee4 	bl	8026dc4 <_printf_common>
 8026ffc:	3001      	adds	r0, #1
 8026ffe:	d14a      	bne.n	8027096 <_printf_i+0x1f6>
 8027000:	f04f 30ff 	mov.w	r0, #4294967295
 8027004:	b004      	add	sp, #16
 8027006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802700a:	6823      	ldr	r3, [r4, #0]
 802700c:	f043 0320 	orr.w	r3, r3, #32
 8027010:	6023      	str	r3, [r4, #0]
 8027012:	4833      	ldr	r0, [pc, #204]	; (80270e0 <_printf_i+0x240>)
 8027014:	2778      	movs	r7, #120	; 0x78
 8027016:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802701a:	6823      	ldr	r3, [r4, #0]
 802701c:	6829      	ldr	r1, [r5, #0]
 802701e:	061f      	lsls	r7, r3, #24
 8027020:	f851 6b04 	ldr.w	r6, [r1], #4
 8027024:	d402      	bmi.n	802702c <_printf_i+0x18c>
 8027026:	065f      	lsls	r7, r3, #25
 8027028:	bf48      	it	mi
 802702a:	b2b6      	uxthmi	r6, r6
 802702c:	07df      	lsls	r7, r3, #31
 802702e:	bf48      	it	mi
 8027030:	f043 0320 	orrmi.w	r3, r3, #32
 8027034:	6029      	str	r1, [r5, #0]
 8027036:	bf48      	it	mi
 8027038:	6023      	strmi	r3, [r4, #0]
 802703a:	b91e      	cbnz	r6, 8027044 <_printf_i+0x1a4>
 802703c:	6823      	ldr	r3, [r4, #0]
 802703e:	f023 0320 	bic.w	r3, r3, #32
 8027042:	6023      	str	r3, [r4, #0]
 8027044:	2310      	movs	r3, #16
 8027046:	e7a7      	b.n	8026f98 <_printf_i+0xf8>
 8027048:	4824      	ldr	r0, [pc, #144]	; (80270dc <_printf_i+0x23c>)
 802704a:	e7e4      	b.n	8027016 <_printf_i+0x176>
 802704c:	4615      	mov	r5, r2
 802704e:	e7bd      	b.n	8026fcc <_printf_i+0x12c>
 8027050:	682b      	ldr	r3, [r5, #0]
 8027052:	6826      	ldr	r6, [r4, #0]
 8027054:	6961      	ldr	r1, [r4, #20]
 8027056:	1d18      	adds	r0, r3, #4
 8027058:	6028      	str	r0, [r5, #0]
 802705a:	0635      	lsls	r5, r6, #24
 802705c:	681b      	ldr	r3, [r3, #0]
 802705e:	d501      	bpl.n	8027064 <_printf_i+0x1c4>
 8027060:	6019      	str	r1, [r3, #0]
 8027062:	e002      	b.n	802706a <_printf_i+0x1ca>
 8027064:	0670      	lsls	r0, r6, #25
 8027066:	d5fb      	bpl.n	8027060 <_printf_i+0x1c0>
 8027068:	8019      	strh	r1, [r3, #0]
 802706a:	2300      	movs	r3, #0
 802706c:	6123      	str	r3, [r4, #16]
 802706e:	4615      	mov	r5, r2
 8027070:	e7bc      	b.n	8026fec <_printf_i+0x14c>
 8027072:	682b      	ldr	r3, [r5, #0]
 8027074:	1d1a      	adds	r2, r3, #4
 8027076:	602a      	str	r2, [r5, #0]
 8027078:	681d      	ldr	r5, [r3, #0]
 802707a:	6862      	ldr	r2, [r4, #4]
 802707c:	2100      	movs	r1, #0
 802707e:	4628      	mov	r0, r5
 8027080:	f7d9 f8be 	bl	8000200 <memchr>
 8027084:	b108      	cbz	r0, 802708a <_printf_i+0x1ea>
 8027086:	1b40      	subs	r0, r0, r5
 8027088:	6060      	str	r0, [r4, #4]
 802708a:	6863      	ldr	r3, [r4, #4]
 802708c:	6123      	str	r3, [r4, #16]
 802708e:	2300      	movs	r3, #0
 8027090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027094:	e7aa      	b.n	8026fec <_printf_i+0x14c>
 8027096:	6923      	ldr	r3, [r4, #16]
 8027098:	462a      	mov	r2, r5
 802709a:	4649      	mov	r1, r9
 802709c:	4640      	mov	r0, r8
 802709e:	47d0      	blx	sl
 80270a0:	3001      	adds	r0, #1
 80270a2:	d0ad      	beq.n	8027000 <_printf_i+0x160>
 80270a4:	6823      	ldr	r3, [r4, #0]
 80270a6:	079b      	lsls	r3, r3, #30
 80270a8:	d413      	bmi.n	80270d2 <_printf_i+0x232>
 80270aa:	68e0      	ldr	r0, [r4, #12]
 80270ac:	9b03      	ldr	r3, [sp, #12]
 80270ae:	4298      	cmp	r0, r3
 80270b0:	bfb8      	it	lt
 80270b2:	4618      	movlt	r0, r3
 80270b4:	e7a6      	b.n	8027004 <_printf_i+0x164>
 80270b6:	2301      	movs	r3, #1
 80270b8:	4632      	mov	r2, r6
 80270ba:	4649      	mov	r1, r9
 80270bc:	4640      	mov	r0, r8
 80270be:	47d0      	blx	sl
 80270c0:	3001      	adds	r0, #1
 80270c2:	d09d      	beq.n	8027000 <_printf_i+0x160>
 80270c4:	3501      	adds	r5, #1
 80270c6:	68e3      	ldr	r3, [r4, #12]
 80270c8:	9903      	ldr	r1, [sp, #12]
 80270ca:	1a5b      	subs	r3, r3, r1
 80270cc:	42ab      	cmp	r3, r5
 80270ce:	dcf2      	bgt.n	80270b6 <_printf_i+0x216>
 80270d0:	e7eb      	b.n	80270aa <_printf_i+0x20a>
 80270d2:	2500      	movs	r5, #0
 80270d4:	f104 0619 	add.w	r6, r4, #25
 80270d8:	e7f5      	b.n	80270c6 <_printf_i+0x226>
 80270da:	bf00      	nop
 80270dc:	08029a79 	.word	0x08029a79
 80270e0:	08029a8a 	.word	0x08029a8a

080270e4 <__sflush_r>:
 80270e4:	898a      	ldrh	r2, [r1, #12]
 80270e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80270ea:	4605      	mov	r5, r0
 80270ec:	0710      	lsls	r0, r2, #28
 80270ee:	460c      	mov	r4, r1
 80270f0:	d458      	bmi.n	80271a4 <__sflush_r+0xc0>
 80270f2:	684b      	ldr	r3, [r1, #4]
 80270f4:	2b00      	cmp	r3, #0
 80270f6:	dc05      	bgt.n	8027104 <__sflush_r+0x20>
 80270f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80270fa:	2b00      	cmp	r3, #0
 80270fc:	dc02      	bgt.n	8027104 <__sflush_r+0x20>
 80270fe:	2000      	movs	r0, #0
 8027100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027106:	2e00      	cmp	r6, #0
 8027108:	d0f9      	beq.n	80270fe <__sflush_r+0x1a>
 802710a:	2300      	movs	r3, #0
 802710c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027110:	682f      	ldr	r7, [r5, #0]
 8027112:	6a21      	ldr	r1, [r4, #32]
 8027114:	602b      	str	r3, [r5, #0]
 8027116:	d032      	beq.n	802717e <__sflush_r+0x9a>
 8027118:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802711a:	89a3      	ldrh	r3, [r4, #12]
 802711c:	075a      	lsls	r2, r3, #29
 802711e:	d505      	bpl.n	802712c <__sflush_r+0x48>
 8027120:	6863      	ldr	r3, [r4, #4]
 8027122:	1ac0      	subs	r0, r0, r3
 8027124:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027126:	b10b      	cbz	r3, 802712c <__sflush_r+0x48>
 8027128:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802712a:	1ac0      	subs	r0, r0, r3
 802712c:	2300      	movs	r3, #0
 802712e:	4602      	mov	r2, r0
 8027130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027132:	6a21      	ldr	r1, [r4, #32]
 8027134:	4628      	mov	r0, r5
 8027136:	47b0      	blx	r6
 8027138:	1c43      	adds	r3, r0, #1
 802713a:	89a3      	ldrh	r3, [r4, #12]
 802713c:	d106      	bne.n	802714c <__sflush_r+0x68>
 802713e:	6829      	ldr	r1, [r5, #0]
 8027140:	291d      	cmp	r1, #29
 8027142:	d82b      	bhi.n	802719c <__sflush_r+0xb8>
 8027144:	4a29      	ldr	r2, [pc, #164]	; (80271ec <__sflush_r+0x108>)
 8027146:	410a      	asrs	r2, r1
 8027148:	07d6      	lsls	r6, r2, #31
 802714a:	d427      	bmi.n	802719c <__sflush_r+0xb8>
 802714c:	2200      	movs	r2, #0
 802714e:	6062      	str	r2, [r4, #4]
 8027150:	04d9      	lsls	r1, r3, #19
 8027152:	6922      	ldr	r2, [r4, #16]
 8027154:	6022      	str	r2, [r4, #0]
 8027156:	d504      	bpl.n	8027162 <__sflush_r+0x7e>
 8027158:	1c42      	adds	r2, r0, #1
 802715a:	d101      	bne.n	8027160 <__sflush_r+0x7c>
 802715c:	682b      	ldr	r3, [r5, #0]
 802715e:	b903      	cbnz	r3, 8027162 <__sflush_r+0x7e>
 8027160:	6560      	str	r0, [r4, #84]	; 0x54
 8027162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027164:	602f      	str	r7, [r5, #0]
 8027166:	2900      	cmp	r1, #0
 8027168:	d0c9      	beq.n	80270fe <__sflush_r+0x1a>
 802716a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802716e:	4299      	cmp	r1, r3
 8027170:	d002      	beq.n	8027178 <__sflush_r+0x94>
 8027172:	4628      	mov	r0, r5
 8027174:	f7ff fc96 	bl	8026aa4 <_free_r>
 8027178:	2000      	movs	r0, #0
 802717a:	6360      	str	r0, [r4, #52]	; 0x34
 802717c:	e7c0      	b.n	8027100 <__sflush_r+0x1c>
 802717e:	2301      	movs	r3, #1
 8027180:	4628      	mov	r0, r5
 8027182:	47b0      	blx	r6
 8027184:	1c41      	adds	r1, r0, #1
 8027186:	d1c8      	bne.n	802711a <__sflush_r+0x36>
 8027188:	682b      	ldr	r3, [r5, #0]
 802718a:	2b00      	cmp	r3, #0
 802718c:	d0c5      	beq.n	802711a <__sflush_r+0x36>
 802718e:	2b1d      	cmp	r3, #29
 8027190:	d001      	beq.n	8027196 <__sflush_r+0xb2>
 8027192:	2b16      	cmp	r3, #22
 8027194:	d101      	bne.n	802719a <__sflush_r+0xb6>
 8027196:	602f      	str	r7, [r5, #0]
 8027198:	e7b1      	b.n	80270fe <__sflush_r+0x1a>
 802719a:	89a3      	ldrh	r3, [r4, #12]
 802719c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80271a0:	81a3      	strh	r3, [r4, #12]
 80271a2:	e7ad      	b.n	8027100 <__sflush_r+0x1c>
 80271a4:	690f      	ldr	r7, [r1, #16]
 80271a6:	2f00      	cmp	r7, #0
 80271a8:	d0a9      	beq.n	80270fe <__sflush_r+0x1a>
 80271aa:	0793      	lsls	r3, r2, #30
 80271ac:	680e      	ldr	r6, [r1, #0]
 80271ae:	bf08      	it	eq
 80271b0:	694b      	ldreq	r3, [r1, #20]
 80271b2:	600f      	str	r7, [r1, #0]
 80271b4:	bf18      	it	ne
 80271b6:	2300      	movne	r3, #0
 80271b8:	eba6 0807 	sub.w	r8, r6, r7
 80271bc:	608b      	str	r3, [r1, #8]
 80271be:	f1b8 0f00 	cmp.w	r8, #0
 80271c2:	dd9c      	ble.n	80270fe <__sflush_r+0x1a>
 80271c4:	6a21      	ldr	r1, [r4, #32]
 80271c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80271c8:	4643      	mov	r3, r8
 80271ca:	463a      	mov	r2, r7
 80271cc:	4628      	mov	r0, r5
 80271ce:	47b0      	blx	r6
 80271d0:	2800      	cmp	r0, #0
 80271d2:	dc06      	bgt.n	80271e2 <__sflush_r+0xfe>
 80271d4:	89a3      	ldrh	r3, [r4, #12]
 80271d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80271da:	81a3      	strh	r3, [r4, #12]
 80271dc:	f04f 30ff 	mov.w	r0, #4294967295
 80271e0:	e78e      	b.n	8027100 <__sflush_r+0x1c>
 80271e2:	4407      	add	r7, r0
 80271e4:	eba8 0800 	sub.w	r8, r8, r0
 80271e8:	e7e9      	b.n	80271be <__sflush_r+0xda>
 80271ea:	bf00      	nop
 80271ec:	dfbffffe 	.word	0xdfbffffe

080271f0 <_fflush_r>:
 80271f0:	b538      	push	{r3, r4, r5, lr}
 80271f2:	690b      	ldr	r3, [r1, #16]
 80271f4:	4605      	mov	r5, r0
 80271f6:	460c      	mov	r4, r1
 80271f8:	b913      	cbnz	r3, 8027200 <_fflush_r+0x10>
 80271fa:	2500      	movs	r5, #0
 80271fc:	4628      	mov	r0, r5
 80271fe:	bd38      	pop	{r3, r4, r5, pc}
 8027200:	b118      	cbz	r0, 802720a <_fflush_r+0x1a>
 8027202:	6a03      	ldr	r3, [r0, #32]
 8027204:	b90b      	cbnz	r3, 802720a <_fflush_r+0x1a>
 8027206:	f7ff fa85 	bl	8026714 <__sinit>
 802720a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802720e:	2b00      	cmp	r3, #0
 8027210:	d0f3      	beq.n	80271fa <_fflush_r+0xa>
 8027212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027214:	07d0      	lsls	r0, r2, #31
 8027216:	d404      	bmi.n	8027222 <_fflush_r+0x32>
 8027218:	0599      	lsls	r1, r3, #22
 802721a:	d402      	bmi.n	8027222 <_fflush_r+0x32>
 802721c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802721e:	f7ff fbd2 	bl	80269c6 <__retarget_lock_acquire_recursive>
 8027222:	4628      	mov	r0, r5
 8027224:	4621      	mov	r1, r4
 8027226:	f7ff ff5d 	bl	80270e4 <__sflush_r>
 802722a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802722c:	07da      	lsls	r2, r3, #31
 802722e:	4605      	mov	r5, r0
 8027230:	d4e4      	bmi.n	80271fc <_fflush_r+0xc>
 8027232:	89a3      	ldrh	r3, [r4, #12]
 8027234:	059b      	lsls	r3, r3, #22
 8027236:	d4e1      	bmi.n	80271fc <_fflush_r+0xc>
 8027238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802723a:	f7ff fbc5 	bl	80269c8 <__retarget_lock_release_recursive>
 802723e:	e7dd      	b.n	80271fc <_fflush_r+0xc>

08027240 <__swbuf_r>:
 8027240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027242:	460e      	mov	r6, r1
 8027244:	4614      	mov	r4, r2
 8027246:	4605      	mov	r5, r0
 8027248:	b118      	cbz	r0, 8027252 <__swbuf_r+0x12>
 802724a:	6a03      	ldr	r3, [r0, #32]
 802724c:	b90b      	cbnz	r3, 8027252 <__swbuf_r+0x12>
 802724e:	f7ff fa61 	bl	8026714 <__sinit>
 8027252:	69a3      	ldr	r3, [r4, #24]
 8027254:	60a3      	str	r3, [r4, #8]
 8027256:	89a3      	ldrh	r3, [r4, #12]
 8027258:	071a      	lsls	r2, r3, #28
 802725a:	d525      	bpl.n	80272a8 <__swbuf_r+0x68>
 802725c:	6923      	ldr	r3, [r4, #16]
 802725e:	b31b      	cbz	r3, 80272a8 <__swbuf_r+0x68>
 8027260:	6823      	ldr	r3, [r4, #0]
 8027262:	6922      	ldr	r2, [r4, #16]
 8027264:	1a98      	subs	r0, r3, r2
 8027266:	6963      	ldr	r3, [r4, #20]
 8027268:	b2f6      	uxtb	r6, r6
 802726a:	4283      	cmp	r3, r0
 802726c:	4637      	mov	r7, r6
 802726e:	dc04      	bgt.n	802727a <__swbuf_r+0x3a>
 8027270:	4621      	mov	r1, r4
 8027272:	4628      	mov	r0, r5
 8027274:	f7ff ffbc 	bl	80271f0 <_fflush_r>
 8027278:	b9e0      	cbnz	r0, 80272b4 <__swbuf_r+0x74>
 802727a:	68a3      	ldr	r3, [r4, #8]
 802727c:	3b01      	subs	r3, #1
 802727e:	60a3      	str	r3, [r4, #8]
 8027280:	6823      	ldr	r3, [r4, #0]
 8027282:	1c5a      	adds	r2, r3, #1
 8027284:	6022      	str	r2, [r4, #0]
 8027286:	701e      	strb	r6, [r3, #0]
 8027288:	6962      	ldr	r2, [r4, #20]
 802728a:	1c43      	adds	r3, r0, #1
 802728c:	429a      	cmp	r2, r3
 802728e:	d004      	beq.n	802729a <__swbuf_r+0x5a>
 8027290:	89a3      	ldrh	r3, [r4, #12]
 8027292:	07db      	lsls	r3, r3, #31
 8027294:	d506      	bpl.n	80272a4 <__swbuf_r+0x64>
 8027296:	2e0a      	cmp	r6, #10
 8027298:	d104      	bne.n	80272a4 <__swbuf_r+0x64>
 802729a:	4621      	mov	r1, r4
 802729c:	4628      	mov	r0, r5
 802729e:	f7ff ffa7 	bl	80271f0 <_fflush_r>
 80272a2:	b938      	cbnz	r0, 80272b4 <__swbuf_r+0x74>
 80272a4:	4638      	mov	r0, r7
 80272a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80272a8:	4621      	mov	r1, r4
 80272aa:	4628      	mov	r0, r5
 80272ac:	f000 f806 	bl	80272bc <__swsetup_r>
 80272b0:	2800      	cmp	r0, #0
 80272b2:	d0d5      	beq.n	8027260 <__swbuf_r+0x20>
 80272b4:	f04f 37ff 	mov.w	r7, #4294967295
 80272b8:	e7f4      	b.n	80272a4 <__swbuf_r+0x64>
	...

080272bc <__swsetup_r>:
 80272bc:	b538      	push	{r3, r4, r5, lr}
 80272be:	4b2a      	ldr	r3, [pc, #168]	; (8027368 <__swsetup_r+0xac>)
 80272c0:	4605      	mov	r5, r0
 80272c2:	6818      	ldr	r0, [r3, #0]
 80272c4:	460c      	mov	r4, r1
 80272c6:	b118      	cbz	r0, 80272d0 <__swsetup_r+0x14>
 80272c8:	6a03      	ldr	r3, [r0, #32]
 80272ca:	b90b      	cbnz	r3, 80272d0 <__swsetup_r+0x14>
 80272cc:	f7ff fa22 	bl	8026714 <__sinit>
 80272d0:	89a3      	ldrh	r3, [r4, #12]
 80272d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80272d6:	0718      	lsls	r0, r3, #28
 80272d8:	d422      	bmi.n	8027320 <__swsetup_r+0x64>
 80272da:	06d9      	lsls	r1, r3, #27
 80272dc:	d407      	bmi.n	80272ee <__swsetup_r+0x32>
 80272de:	2309      	movs	r3, #9
 80272e0:	602b      	str	r3, [r5, #0]
 80272e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80272e6:	81a3      	strh	r3, [r4, #12]
 80272e8:	f04f 30ff 	mov.w	r0, #4294967295
 80272ec:	e034      	b.n	8027358 <__swsetup_r+0x9c>
 80272ee:	0758      	lsls	r0, r3, #29
 80272f0:	d512      	bpl.n	8027318 <__swsetup_r+0x5c>
 80272f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80272f4:	b141      	cbz	r1, 8027308 <__swsetup_r+0x4c>
 80272f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80272fa:	4299      	cmp	r1, r3
 80272fc:	d002      	beq.n	8027304 <__swsetup_r+0x48>
 80272fe:	4628      	mov	r0, r5
 8027300:	f7ff fbd0 	bl	8026aa4 <_free_r>
 8027304:	2300      	movs	r3, #0
 8027306:	6363      	str	r3, [r4, #52]	; 0x34
 8027308:	89a3      	ldrh	r3, [r4, #12]
 802730a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802730e:	81a3      	strh	r3, [r4, #12]
 8027310:	2300      	movs	r3, #0
 8027312:	6063      	str	r3, [r4, #4]
 8027314:	6923      	ldr	r3, [r4, #16]
 8027316:	6023      	str	r3, [r4, #0]
 8027318:	89a3      	ldrh	r3, [r4, #12]
 802731a:	f043 0308 	orr.w	r3, r3, #8
 802731e:	81a3      	strh	r3, [r4, #12]
 8027320:	6923      	ldr	r3, [r4, #16]
 8027322:	b94b      	cbnz	r3, 8027338 <__swsetup_r+0x7c>
 8027324:	89a3      	ldrh	r3, [r4, #12]
 8027326:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802732a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802732e:	d003      	beq.n	8027338 <__swsetup_r+0x7c>
 8027330:	4621      	mov	r1, r4
 8027332:	4628      	mov	r0, r5
 8027334:	f000 f840 	bl	80273b8 <__smakebuf_r>
 8027338:	89a0      	ldrh	r0, [r4, #12]
 802733a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802733e:	f010 0301 	ands.w	r3, r0, #1
 8027342:	d00a      	beq.n	802735a <__swsetup_r+0x9e>
 8027344:	2300      	movs	r3, #0
 8027346:	60a3      	str	r3, [r4, #8]
 8027348:	6963      	ldr	r3, [r4, #20]
 802734a:	425b      	negs	r3, r3
 802734c:	61a3      	str	r3, [r4, #24]
 802734e:	6923      	ldr	r3, [r4, #16]
 8027350:	b943      	cbnz	r3, 8027364 <__swsetup_r+0xa8>
 8027352:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027356:	d1c4      	bne.n	80272e2 <__swsetup_r+0x26>
 8027358:	bd38      	pop	{r3, r4, r5, pc}
 802735a:	0781      	lsls	r1, r0, #30
 802735c:	bf58      	it	pl
 802735e:	6963      	ldrpl	r3, [r4, #20]
 8027360:	60a3      	str	r3, [r4, #8]
 8027362:	e7f4      	b.n	802734e <__swsetup_r+0x92>
 8027364:	2000      	movs	r0, #0
 8027366:	e7f7      	b.n	8027358 <__swsetup_r+0x9c>
 8027368:	20000348 	.word	0x20000348

0802736c <__swhatbuf_r>:
 802736c:	b570      	push	{r4, r5, r6, lr}
 802736e:	460c      	mov	r4, r1
 8027370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027374:	2900      	cmp	r1, #0
 8027376:	b096      	sub	sp, #88	; 0x58
 8027378:	4615      	mov	r5, r2
 802737a:	461e      	mov	r6, r3
 802737c:	da0d      	bge.n	802739a <__swhatbuf_r+0x2e>
 802737e:	89a3      	ldrh	r3, [r4, #12]
 8027380:	f013 0f80 	tst.w	r3, #128	; 0x80
 8027384:	f04f 0100 	mov.w	r1, #0
 8027388:	bf0c      	ite	eq
 802738a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802738e:	2340      	movne	r3, #64	; 0x40
 8027390:	2000      	movs	r0, #0
 8027392:	6031      	str	r1, [r6, #0]
 8027394:	602b      	str	r3, [r5, #0]
 8027396:	b016      	add	sp, #88	; 0x58
 8027398:	bd70      	pop	{r4, r5, r6, pc}
 802739a:	466a      	mov	r2, sp
 802739c:	f000 f848 	bl	8027430 <_fstat_r>
 80273a0:	2800      	cmp	r0, #0
 80273a2:	dbec      	blt.n	802737e <__swhatbuf_r+0x12>
 80273a4:	9901      	ldr	r1, [sp, #4]
 80273a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80273aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80273ae:	4259      	negs	r1, r3
 80273b0:	4159      	adcs	r1, r3
 80273b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80273b6:	e7eb      	b.n	8027390 <__swhatbuf_r+0x24>

080273b8 <__smakebuf_r>:
 80273b8:	898b      	ldrh	r3, [r1, #12]
 80273ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80273bc:	079d      	lsls	r5, r3, #30
 80273be:	4606      	mov	r6, r0
 80273c0:	460c      	mov	r4, r1
 80273c2:	d507      	bpl.n	80273d4 <__smakebuf_r+0x1c>
 80273c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80273c8:	6023      	str	r3, [r4, #0]
 80273ca:	6123      	str	r3, [r4, #16]
 80273cc:	2301      	movs	r3, #1
 80273ce:	6163      	str	r3, [r4, #20]
 80273d0:	b002      	add	sp, #8
 80273d2:	bd70      	pop	{r4, r5, r6, pc}
 80273d4:	ab01      	add	r3, sp, #4
 80273d6:	466a      	mov	r2, sp
 80273d8:	f7ff ffc8 	bl	802736c <__swhatbuf_r>
 80273dc:	9900      	ldr	r1, [sp, #0]
 80273de:	4605      	mov	r5, r0
 80273e0:	4630      	mov	r0, r6
 80273e2:	f7ff f871 	bl	80264c8 <_malloc_r>
 80273e6:	b948      	cbnz	r0, 80273fc <__smakebuf_r+0x44>
 80273e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80273ec:	059a      	lsls	r2, r3, #22
 80273ee:	d4ef      	bmi.n	80273d0 <__smakebuf_r+0x18>
 80273f0:	f023 0303 	bic.w	r3, r3, #3
 80273f4:	f043 0302 	orr.w	r3, r3, #2
 80273f8:	81a3      	strh	r3, [r4, #12]
 80273fa:	e7e3      	b.n	80273c4 <__smakebuf_r+0xc>
 80273fc:	89a3      	ldrh	r3, [r4, #12]
 80273fe:	6020      	str	r0, [r4, #0]
 8027400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027404:	81a3      	strh	r3, [r4, #12]
 8027406:	9b00      	ldr	r3, [sp, #0]
 8027408:	6163      	str	r3, [r4, #20]
 802740a:	9b01      	ldr	r3, [sp, #4]
 802740c:	6120      	str	r0, [r4, #16]
 802740e:	b15b      	cbz	r3, 8027428 <__smakebuf_r+0x70>
 8027410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027414:	4630      	mov	r0, r6
 8027416:	f000 f81d 	bl	8027454 <_isatty_r>
 802741a:	b128      	cbz	r0, 8027428 <__smakebuf_r+0x70>
 802741c:	89a3      	ldrh	r3, [r4, #12]
 802741e:	f023 0303 	bic.w	r3, r3, #3
 8027422:	f043 0301 	orr.w	r3, r3, #1
 8027426:	81a3      	strh	r3, [r4, #12]
 8027428:	89a3      	ldrh	r3, [r4, #12]
 802742a:	431d      	orrs	r5, r3
 802742c:	81a5      	strh	r5, [r4, #12]
 802742e:	e7cf      	b.n	80273d0 <__smakebuf_r+0x18>

08027430 <_fstat_r>:
 8027430:	b538      	push	{r3, r4, r5, lr}
 8027432:	4d07      	ldr	r5, [pc, #28]	; (8027450 <_fstat_r+0x20>)
 8027434:	2300      	movs	r3, #0
 8027436:	4604      	mov	r4, r0
 8027438:	4608      	mov	r0, r1
 802743a:	4611      	mov	r1, r2
 802743c:	602b      	str	r3, [r5, #0]
 802743e:	f7dd fae8 	bl	8004a12 <_fstat>
 8027442:	1c43      	adds	r3, r0, #1
 8027444:	d102      	bne.n	802744c <_fstat_r+0x1c>
 8027446:	682b      	ldr	r3, [r5, #0]
 8027448:	b103      	cbz	r3, 802744c <_fstat_r+0x1c>
 802744a:	6023      	str	r3, [r4, #0]
 802744c:	bd38      	pop	{r3, r4, r5, pc}
 802744e:	bf00      	nop
 8027450:	200262c0 	.word	0x200262c0

08027454 <_isatty_r>:
 8027454:	b538      	push	{r3, r4, r5, lr}
 8027456:	4d06      	ldr	r5, [pc, #24]	; (8027470 <_isatty_r+0x1c>)
 8027458:	2300      	movs	r3, #0
 802745a:	4604      	mov	r4, r0
 802745c:	4608      	mov	r0, r1
 802745e:	602b      	str	r3, [r5, #0]
 8027460:	f7dd fae7 	bl	8004a32 <_isatty>
 8027464:	1c43      	adds	r3, r0, #1
 8027466:	d102      	bne.n	802746e <_isatty_r+0x1a>
 8027468:	682b      	ldr	r3, [r5, #0]
 802746a:	b103      	cbz	r3, 802746e <_isatty_r+0x1a>
 802746c:	6023      	str	r3, [r4, #0]
 802746e:	bd38      	pop	{r3, r4, r5, pc}
 8027470:	200262c0 	.word	0x200262c0

08027474 <_init>:
 8027474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027476:	bf00      	nop
 8027478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802747a:	bc08      	pop	{r3}
 802747c:	469e      	mov	lr, r3
 802747e:	4770      	bx	lr

08027480 <_fini>:
 8027480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027482:	bf00      	nop
 8027484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027486:	bc08      	pop	{r3}
 8027488:	469e      	mov	lr, r3
 802748a:	4770      	bx	lr
