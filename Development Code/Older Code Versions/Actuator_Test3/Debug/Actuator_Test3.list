
Actuator_Test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dcc  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08008f90  08008f90  00018f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009100  08009100  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009108  08009108  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800910c  0800910c  0001910c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08009110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000235d8  20000260  0800936c  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20023838  0800936c  00023838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016cef  00000000  00000000  000202cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028da  00000000  00000000  00036fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  00039898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fed  00000000  00000000  0003ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002abb5  00000000  00000000  0003bc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001868e  00000000  00000000  00066832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ae8b  00000000  00000000  0007eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057b0  00000000  00000000  00189d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0018f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000260 	.word	0x20000260
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008f74 	.word	0x08008f74

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000264 	.word	0x20000264
 80001fc:	08008f74 	.word	0x08008f74

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <formGroups>:
int nearestMaxWhite(int noteNum);
int isBlackKey(int noteNum);
int setNextLinActuatorTime(int current_time);
void actuatorMoveDistLoop(double dist, int dir);

int formGroups(int noteArr[][noteColNum], int len){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	movementOps(noteArr, len);
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f97f 	bl	8001108 <movementOps>
	int num_groups = noteArr[len - 1][3];
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	3b14      	subs	r3, #20
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < num_groups; i++){
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	e01d      	b.n	8000e60 <formGroups+0x68>
		if(groupRange(noteArr, len, i, i + 1) <= 11){
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	3301      	adds	r3, #1
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f820 	bl	8000e72 <groupRange>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b0b      	cmp	r3, #11
 8000e36:	dc10      	bgt.n	8000e5a <formGroups+0x62>
			groupMerge(noteArr, len, i, i + 1);
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f8cb 	bl	8000fdc <groupMerge>
			num_groups--;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
			groupContinuity(noteArr, len);
 8000e4c:	6839      	ldr	r1, [r7, #0]
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f8f2 	bl	8001038 <groupContinuity>
			i--;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < num_groups; i++){
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	dbdd      	blt.n	8000e24 <formGroups+0x2c>
		}
	}
	return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <groupRange>:

// Given two group numbers, return the collective range
int groupRange(int noteArr[][noteColNum], int len, int group1, int group2){
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b08a      	sub	sp, #40	; 0x28
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	603b      	str	r3, [r7, #0]
	int minNote = 100;
 8000e80:	2364      	movs	r3, #100	; 0x64
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
	int maxNote = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < len; i++){
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	e04b      	b.n	8000f26 <groupRange+0xb4>
		if(noteArr[i][3] == group1 || noteArr[i][3] == group2){
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	461a      	mov	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d00b      	beq.n	8000ebe <groupRange+0x4c>
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d130      	bne.n	8000f20 <groupRange+0xae>
			if(noteArr[i][4] == 0){
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d125      	bne.n	8000f20 <groupRange+0xae>
				int min = nearestMinWhite(noteArr[i][0]);
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f828 	bl	8000f3c <nearestMinWhite>
 8000eec:	61b8      	str	r0, [r7, #24]
				int max = nearestMaxWhite(noteArr[i][0]);
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4413      	add	r3, r2
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f82d 	bl	8000f60 <nearestMaxWhite>
 8000f06:	6178      	str	r0, [r7, #20]
				if(min < minNote){
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	da01      	bge.n	8000f14 <groupRange+0xa2>
					minNote = min;
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if(max > maxNote){
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dd01      	ble.n	8000f20 <groupRange+0xae>
					maxNote = max;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < len; i++){
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	3301      	adds	r3, #1
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dbaf      	blt.n	8000e8e <groupRange+0x1c>
				}
			}
		}
	}
	return maxNote - minNote;
 8000f2e:	6a3a      	ldr	r2, [r7, #32]
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	1ad3      	subs	r3, r2, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <nearestMinWhite>:

// Identify the nearest white note under the argument note number
int nearestMinWhite(int noteNum){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	if(isBlackKey(noteNum)){
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f81d 	bl	8000f84 <isBlackKey>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <nearestMinWhite+0x1a>
		return noteNum - 1;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	e000      	b.n	8000f58 <nearestMinWhite+0x1c>
	}
	return noteNum;
 8000f56:	687b      	ldr	r3, [r7, #4]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <nearestMaxWhite>:

// Identify the nearest white note above the argument note number
int nearestMaxWhite(int noteNum){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if(isBlackKey(noteNum)){
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 f80b 	bl	8000f84 <isBlackKey>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <nearestMaxWhite+0x1a>
			return noteNum + 1;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3301      	adds	r3, #1
 8000f78:	e000      	b.n	8000f7c <nearestMaxWhite+0x1c>
		}
		return noteNum;
 8000f7a:	687b      	ldr	r3, [r7, #4]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <isBlackKey>:


// Identify if a note is a black key
int isBlackKey(int noteNum){
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	int isBlack = noteNum % 12;
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <isBlackKey+0x54>)
 8000f90:	fb83 1302 	smull	r1, r3, r3, r2
 8000f94:	1059      	asrs	r1, r3, #1
 8000f96:	17d3      	asrs	r3, r2, #31
 8000f98:	1ac9      	subs	r1, r1, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	440b      	add	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	60fb      	str	r3, [r7, #12]
	if(isBlack == 1 || isBlack == 3 || isBlack == 6 || isBlack == 8 || isBlack == 10){
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d00b      	beq.n	8000fc4 <isBlackKey+0x40>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d008      	beq.n	8000fc4 <isBlackKey+0x40>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	d005      	beq.n	8000fc4 <isBlackKey+0x40>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d002      	beq.n	8000fc4 <isBlackKey+0x40>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	d101      	bne.n	8000fc8 <isBlackKey+0x44>
		return 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <isBlackKey+0x46>
	}
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2aaaaaab 	.word	0x2aaaaaab

08000fdc <groupMerge>:
// Given two consecutive groups, combine them into one group using the lower group number; assumes group1 < group2
void groupMerge(int noteArr[][noteColNum], int len, int group1, int group2){
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len; i++){
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e018      	b.n	8001022 <groupMerge+0x46>
		if(noteArr[i][3] == group2){
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d109      	bne.n	800101c <groupMerge+0x40>
			noteArr[i][3] = group1;
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	60da      	str	r2, [r3, #12]
	for(int i = 0; i < len; i++){
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbe2      	blt.n	8000ff0 <groupMerge+0x14>
		}
	}
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	371c      	adds	r7, #28
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <groupContinuity>:

// Reassign group numbers so they are sequential in value
void groupContinuity(int noteArr[][noteColNum], int len){
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	int prevGroupNum = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
	int replaceGroup = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
	int newGroupNum = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
	int diff = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < len; i++){
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	e04c      	b.n	80010f2 <groupContinuity+0xba>
		diff = noteArr[i][3] - prevGroupNum;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	461a      	mov	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	60fb      	str	r3, [r7, #12]
		if(diff > 1 || diff < 0){
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b01      	cmp	r3, #1
 8001074:	dc02      	bgt.n	800107c <groupContinuity+0x44>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da2d      	bge.n	80010d8 <groupContinuity+0xa0>
			replaceGroup = noteArr[i][3];
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	461a      	mov	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	617b      	str	r3, [r7, #20]
			newGroupNum = prevGroupNum + 1;
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	3301      	adds	r3, #1
 8001094:	613b      	str	r3, [r7, #16]
			while(noteArr[i][3] == replaceGroup && (i < len)){
 8001096:	e00c      	b.n	80010b2 <groupContinuity+0x7a>
				noteArr[i][3] = newGroupNum;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	461a      	mov	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	60da      	str	r2, [r3, #12]
				i++;
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	3301      	adds	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
			while(noteArr[i][3] == replaceGroup && (i < len)){
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d103      	bne.n	80010d2 <groupContinuity+0x9a>
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dbe2      	blt.n	8001098 <groupContinuity+0x60>
			}
			i--;
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
		}
		prevGroupNum = noteArr[i][3];
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < len; i++){
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	3301      	adds	r3, #1
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbae      	blt.n	8001058 <groupContinuity+0x20>
	}
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3724      	adds	r7, #36	; 0x24
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <movementOps>:

// Search for all movement opportunities and use them as divisions between groups
void movementOps(int noteArr[][noteColNum], int len){
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	int current_group = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
	int time_max = noteArr[0][2];
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	613b      	str	r3, [r7, #16]
	noteArr[0][3] = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
	for(int i = 1; i < len; i++){
 8001122:	2301      	movs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e051      	b.n	80011cc <movementOps+0xc4>
		if(noteArr[i][1] >= time_max){
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	461a      	mov	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	dc17      	bgt.n	8001170 <movementOps+0x68>
			current_group++;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
			noteArr[i][3] = current_group;
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	60da      	str	r2, [r3, #12]
			time_max = noteArr[i][2];
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	461a      	mov	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	e02a      	b.n	80011c6 <movementOps+0xbe>
		}
		else if(noteArr[i][2] > time_max){
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	461a      	mov	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	da14      	bge.n	80011b2 <movementOps+0xaa>
			time_max = noteArr[i][2];
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	461a      	mov	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	613b      	str	r3, [r7, #16]
			noteArr[i][3] = current_group;
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	461a      	mov	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	e009      	b.n	80011c6 <movementOps+0xbe>
		}
		else{
			noteArr[i][3] = current_group;
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	461a      	mov	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	60da      	str	r2, [r3, #12]
	for(int i = 1; i < len; i++){
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dba9      	blt.n	8001128 <movementOps+0x20>
		}
	}
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <assignActuatorPos>:

// Assign actuator positions using a note data array
int assignActuatorPos(int actuatorPos[][2], int noteArr[][noteColNum], int note_len, int hand){
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b088      	sub	sp, #32
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	603b      	str	r3, [r7, #0]
	if(note_len < 1){
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dc01      	bgt.n	80011fa <assignActuatorPos+0x18>
		return 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e0ba      	b.n	8001370 <assignActuatorPos+0x18e>
	}
	int current_group = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
	int group_min_note = noteArr[0][0];
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	61bb      	str	r3, [r7, #24]
	int group_min_time = noteArr[0][1];
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < note_len; i++){
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	e085      	b.n	800131c <assignActuatorPos+0x13a>
		if(noteArr[i][3] != current_group){
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	461a      	mov	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4413      	add	r3, r2
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	429a      	cmp	r2, r3
 8001226:	d052      	beq.n	80012ce <assignActuatorPos+0xec>
			if(group_min_note > highestNote || group_min_note < lowestNote){
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b60      	cmp	r3, #96	; 0x60
 800122c:	dc02      	bgt.n	8001234 <assignActuatorPos+0x52>
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b23      	cmp	r3, #35	; 0x23
 8001232:	dc10      	bgt.n	8001256 <assignActuatorPos+0x74>
				if(hand){
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <assignActuatorPos+0x66>
					actuatorPos[current_group][0] = defaultLeft;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	4413      	add	r3, r2
 8001242:	222b      	movs	r2, #43	; 0x2b
 8001244:	601a      	str	r2, [r3, #0]
				if(hand){
 8001246:	e00c      	b.n	8001262 <assignActuatorPos+0x80>
				}
				else{
					actuatorPos[current_group][0] = defaultRight;
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	223c      	movs	r2, #60	; 0x3c
 8001252:	601a      	str	r2, [r3, #0]
				if(hand){
 8001254:	e005      	b.n	8001262 <assignActuatorPos+0x80>
				}
			}
			else{
				actuatorPos[current_group][0] = group_min_note;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	601a      	str	r2, [r3, #0]
			}
			actuatorPos[current_group][1] = group_min_time;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	605a      	str	r2, [r3, #4]
			if(!noteArr[i][4]){
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	461a      	mov	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4413      	add	r3, r2
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10d      	bne.n	80012a0 <assignActuatorPos+0xbe>
				group_min_note = nearestMinWhite(noteArr[i][0]);
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	461a      	mov	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4413      	add	r3, r2
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe50 	bl	8000f3c <nearestMinWhite>
 800129c:	61b8      	str	r0, [r7, #24]
 800129e:	e001      	b.n	80012a4 <assignActuatorPos+0xc2>
			}
			else{
				group_min_note = 100;
 80012a0:	2364      	movs	r3, #100	; 0x64
 80012a2:	61bb      	str	r3, [r7, #24]
			}
			group_min_time = noteArr[i][1];
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	461a      	mov	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4413      	add	r3, r2
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	617b      	str	r3, [r7, #20]
			current_group = noteArr[i][3];
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	e023      	b.n	8001316 <assignActuatorPos+0x134>
		}
		else if(noteArr[i][0] < group_min_note && !noteArr[i][4]){
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	461a      	mov	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dd17      	ble.n	8001316 <assignActuatorPos+0x134>
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	461a      	mov	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4413      	add	r3, r2
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10c      	bne.n	8001316 <assignActuatorPos+0x134>
				group_min_note = nearestMinWhite(noteArr[i][0]);
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	461a      	mov	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe14 	bl	8000f3c <nearestMinWhite>
 8001314:	61b8      	str	r0, [r7, #24]
	for(int i = 0; i < note_len; i++){
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	3301      	adds	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	f6ff af75 	blt.w	8001210 <assignActuatorPos+0x2e>
		}
	}
	if(group_min_note > highestNote || group_min_note < lowestNote){
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b60      	cmp	r3, #96	; 0x60
 800132a:	dc02      	bgt.n	8001332 <assignActuatorPos+0x150>
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b23      	cmp	r3, #35	; 0x23
 8001330:	dc10      	bgt.n	8001354 <assignActuatorPos+0x172>
		if(hand){
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <assignActuatorPos+0x164>
			actuatorPos[current_group][0] = defaultLeft;
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	222b      	movs	r2, #43	; 0x2b
 8001342:	601a      	str	r2, [r3, #0]
		if(hand){
 8001344:	e00c      	b.n	8001360 <assignActuatorPos+0x17e>
		}
		else{
			actuatorPos[current_group][0] = defaultRight;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4413      	add	r3, r2
 800134e:	223c      	movs	r2, #60	; 0x3c
 8001350:	601a      	str	r2, [r3, #0]
		if(hand){
 8001352:	e005      	b.n	8001360 <assignActuatorPos+0x17e>
		}
	}
	else{
		actuatorPos[current_group][0] = group_min_note;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]
	}
	actuatorPos[current_group][1] = group_min_time;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	605a      	str	r2, [r3, #4]

	return current_group + 1;
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	3301      	adds	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <splitStartStop>:

// Split start and stop times for notes
void splitStartStop(int noteArr[][noteColNum], int note_len, int noteArrStop[][2]){
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < note_len; i++){
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	e01e      	b.n	80013c8 <splitStartStop+0x50>
		noteArrStop[i][0] = noteArr[i][0];
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	461a      	mov	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	441a      	add	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	440b      	add	r3, r1
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	601a      	str	r2, [r3, #0]
		noteArrStop[i][1] = noteArr[i][2];
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	441a      	add	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	440b      	add	r3, r1
 80013be:	6892      	ldr	r2, [r2, #8]
 80013c0:	605a      	str	r2, [r3, #4]
	for(int i = 0; i < note_len; i++){
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbdc      	blt.n	800138a <splitStartStop+0x12>
	}
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <sortStop>:

// Sort stop array
void sortStop(int noteArr[][2], int note_len){
 80013de:	b480      	push	{r7}
 80013e0:	b087      	sub	sp, #28
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	int key_note, key_time, j;
	for(int i = 1; i < note_len; i++){
 80013e8:	2301      	movs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	e044      	b.n	8001478 <sortStop+0x9a>
		key_note = noteArr[i][0];
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
		key_time = noteArr[i][1];
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	60bb      	str	r3, [r7, #8]
		j = i - 1;
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3b01      	subs	r3, #1
 800140a:	617b      	str	r3, [r7, #20]

		while(j >= 0 && noteArr[j][1] > key_time){
 800140c:	e018      	b.n	8001440 <sortStop+0x62>
			noteArr[j + 1][0] = noteArr[j][0];
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	441a      	add	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	440b      	add	r3, r1
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	601a      	str	r2, [r3, #0]
			noteArr[j + 1][1] = noteArr[j][1];
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	441a      	add	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	440b      	add	r3, r1
 8001436:	6852      	ldr	r2, [r2, #4]
 8001438:	605a      	str	r2, [r3, #4]
			j--;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3b01      	subs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
		while(j >= 0 && noteArr[j][1] > key_time){
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db07      	blt.n	8001456 <sortStop+0x78>
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	429a      	cmp	r2, r3
 8001454:	dbdb      	blt.n	800140e <sortStop+0x30>
		}
		noteArr[j + 1][0] = key_note;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3301      	adds	r3, #1
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	601a      	str	r2, [r3, #0]
		noteArr[j + 1][1] = key_time;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	605a      	str	r2, [r3, #4]
	for(int i = 1; i < note_len; i++){
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	3301      	adds	r3, #1
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbb6      	blt.n	80013ee <sortStop+0x10>
	}
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <assignDCAct>:
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{2, 3, 4, 12, 5, 7, 8, 9, 10, 11, 12, 0},
};

// Assign DC actuator activations
void assignDCAct(int actuatorPos[][2], int actuator_len, int noteArr[][noteColNum], int note_len){
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
	int DCNum = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < note_len; i++){
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e04f      	b.n	8001548 <assignDCAct+0xb8>
		if(!noteArr[i][4]){
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d141      	bne.n	8001542 <assignDCAct+0xb2>
			DCNum = DCLookup[actuatorPos[(noteArr[i][3])][0] % 12][noteArr[i][0] % 12];
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4413      	add	r3, r2
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <assignDCAct+0xd0>)
 80014da:	fb83 2301 	smull	r2, r3, r3, r1
 80014de:	105a      	asrs	r2, r3, #1
 80014e0:	17cb      	asrs	r3, r1, #31
 80014e2:	1ad2      	subs	r2, r2, r3
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	1aca      	subs	r2, r1, r3
 80014ee:	6979      	ldr	r1, [r7, #20]
 80014f0:	460b      	mov	r3, r1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4619      	mov	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	440b      	add	r3, r1
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <assignDCAct+0xd0>)
 8001502:	fb83 1300 	smull	r1, r3, r3, r0
 8001506:	1059      	asrs	r1, r3, #1
 8001508:	17c3      	asrs	r3, r0, #31
 800150a:	1ac9      	subs	r1, r1, r3
 800150c:	460b      	mov	r3, r1
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	440b      	add	r3, r1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	1ac1      	subs	r1, r0, r3
 8001516:	4813      	ldr	r0, [pc, #76]	; (8001564 <assignDCAct+0xd4>)
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001526:	613b      	str	r3, [r7, #16]
			if(DCNum < 12){
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b0b      	cmp	r3, #11
 800152c:	dc09      	bgt.n	8001542 <assignDCAct+0xb2>
				noteArr[i][0] = DCNum;
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < note_len; i++){
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbab      	blt.n	80014a8 <assignDCAct+0x18>
			}
		}

	}
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	2aaaaaab 	.word	0x2aaaaaab
 8001564:	20000010 	.word	0x20000010

08001568 <setNextLinActuatorTime>:

// Sets TIM2 ARR so that it triggers for the next linear actuator movement
// Returns 0 if there is no next linear actuator movement
int setNextLinActuatorTime(int current_time){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	if(actuatorL >= actuatorPosL_len){
 8001570:	4b31      	ldr	r3, [pc, #196]	; (8001638 <setNextLinActuatorTime+0xd0>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <setNextLinActuatorTime+0xd4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	db16      	blt.n	80015aa <setNextLinActuatorTime+0x42>
		if(actuatorR >= actuatorPosR_len){
 800157c:	4b30      	ldr	r3, [pc, #192]	; (8001640 <setNextLinActuatorTime+0xd8>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <setNextLinActuatorTime+0xdc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	db04      	blt.n	8001592 <setNextLinActuatorTime+0x2a>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001588:	482f      	ldr	r0, [pc, #188]	; (8001648 <setNextLinActuatorTime+0xe0>)
 800158a:	f004 f885 	bl	8005698 <HAL_TIM_Base_Stop_IT>
			return 0;
 800158e:	2300      	movs	r3, #0
 8001590:	e04e      	b.n	8001630 <setNextLinActuatorTime+0xc8>
		}
		else{
			TIM2->ARR = actuatorPosR[actuatorR][1] - current_time;
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <setNextLinActuatorTime+0xd8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a2d      	ldr	r2, [pc, #180]	; (800164c <setNextLinActuatorTime+0xe4>)
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	1ad2      	subs	r2, r2, r3
 80015a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80015a8:	e041      	b.n	800162e <setNextLinActuatorTime+0xc6>
		}
	}
	else if(actuatorR >= actuatorPosR_len){
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <setNextLinActuatorTime+0xd8>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <setNextLinActuatorTime+0xdc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	db16      	blt.n	80015e4 <setNextLinActuatorTime+0x7c>
		if(actuatorL >= actuatorPosL_len){
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <setNextLinActuatorTime+0xd0>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <setNextLinActuatorTime+0xd4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	db04      	blt.n	80015cc <setNextLinActuatorTime+0x64>
			HAL_TIM_Base_Stop_IT(&htim2);
 80015c2:	4821      	ldr	r0, [pc, #132]	; (8001648 <setNextLinActuatorTime+0xe0>)
 80015c4:	f004 f868 	bl	8005698 <HAL_TIM_Base_Stop_IT>
			return 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e031      	b.n	8001630 <setNextLinActuatorTime+0xc8>
		}
		else{
			TIM2->ARR = actuatorPosL[actuatorL][1] - current_time;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <setNextLinActuatorTime+0xd0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <setNextLinActuatorTime+0xe8>)
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1ad2      	subs	r2, r2, r3
 80015dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80015e2:	e024      	b.n	800162e <setNextLinActuatorTime+0xc6>
		}
	}
	else if(actuatorPosL[actuatorL][1] < actuatorPosR[actuatorR][1]){
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <setNextLinActuatorTime+0xd0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <setNextLinActuatorTime+0xe8>)
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <setNextLinActuatorTime+0xd8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4915      	ldr	r1, [pc, #84]	; (800164c <setNextLinActuatorTime+0xe4>)
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	da0b      	bge.n	8001618 <setNextLinActuatorTime+0xb0>
		TIM2->ARR = actuatorPosL[actuatorL][1] - current_time;
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <setNextLinActuatorTime+0xd0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <setNextLinActuatorTime+0xe8>)
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad2      	subs	r2, r2, r3
 8001610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
 8001616:	e00a      	b.n	800162e <setNextLinActuatorTime+0xc6>
	}
	else{
		TIM2->ARR = actuatorPosR[actuatorR][1] - current_time;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <setNextLinActuatorTime+0xd8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <setNextLinActuatorTime+0xe4>)
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4413      	add	r3, r2
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	1ad2      	subs	r2, r2, r3
 8001628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000827c 	.word	0x2000827c
 800163c:	200043b0 	.word	0x200043b0
 8001640:	20008280 	.word	0x20008280
 8001644:	20008234 	.word	0x20008234
 8001648:	200002d0 	.word	0x200002d0
 800164c:	200043b4 	.word	0x200043b4
 8001650:	20000530 	.word	0x20000530

08001654 <HAL_TIM_PeriodElapsedCallback>:

int movements = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	// Move actuator
	if(htim == &htim2){
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a9a      	ldr	r2, [pc, #616]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001660:	4293      	cmp	r3, r2
 8001662:	f040 80bf 	bne.w	80017e4 <HAL_TIM_PeriodElapsedCallback+0x190>
		movements++;
 8001666:	4b99      	ldr	r3, [pc, #612]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a97      	ldr	r2, [pc, #604]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800166e:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001670:	4895      	ldr	r0, [pc, #596]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001672:	f004 f811 	bl	8005698 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001676:	4896      	ldr	r0, [pc, #600]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001678:	f004 f80e 	bl	8005698 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 800167c:	4895      	ldr	r0, [pc, #596]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800167e:	f004 f80b 	bl	8005698 <HAL_TIM_Base_Stop_IT>
		int current_time = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
		if(actuatorL >= actuatorPosL_len){
 8001686:	4b94      	ldr	r3, [pc, #592]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b94      	ldr	r3, [pc, #592]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x288>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	db14      	blt.n	80016bc <HAL_TIM_PeriodElapsedCallback+0x68>
			moveActuatorRight(actuatorPosR[actuatorR][0]);
 8001692:	4b93      	ldr	r3, [pc, #588]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a93      	ldr	r2, [pc, #588]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 facd 	bl	8001c3c <moveActuatorRight>
			current_time = actuatorPosR[actuatorR][1];
 80016a2:	4b8f      	ldr	r3, [pc, #572]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a8f      	ldr	r2, [pc, #572]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	617b      	str	r3, [r7, #20]
			actuatorR++;
 80016b0:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4a8a      	ldr	r2, [pc, #552]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e081      	b.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x16c>
		}
		else if(actuatorR >= actuatorPosR_len){
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b89      	ldr	r3, [pc, #548]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	db14      	blt.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x9e>
			moveActuatorLeft(actuatorPosL[actuatorL][0]);
 80016c8:	4b83      	ldr	r3, [pc, #524]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a87      	ldr	r2, [pc, #540]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fa70 	bl	8001bb8 <moveActuatorLeft>
			current_time = actuatorPosL[actuatorL][1];
 80016d8:	4b7f      	ldr	r3, [pc, #508]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a83      	ldr	r2, [pc, #524]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	617b      	str	r3, [r7, #20]
			actuatorL++;
 80016e6:	4b7c      	ldr	r3, [pc, #496]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a7a      	ldr	r2, [pc, #488]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e066      	b.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x16c>
		}
		else if(actuatorPosL[actuatorL][1] == actuatorPosR[actuatorR][1]){
 80016f2:	4b79      	ldr	r3, [pc, #484]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7d      	ldr	r2, [pc, #500]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4b78      	ldr	r3, [pc, #480]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4978      	ldr	r1, [pc, #480]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d121      	bne.n	8001752 <HAL_TIM_PeriodElapsedCallback+0xfe>
		    moveActuatorRight(actuatorPosR[actuatorR][0]);
 800170e:	4b74      	ldr	r3, [pc, #464]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a74      	ldr	r2, [pc, #464]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001714:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fa8f 	bl	8001c3c <moveActuatorRight>
		    moveActuatorLeft(actuatorPosL[actuatorL][0]);
 800171e:	4b6e      	ldr	r3, [pc, #440]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a72      	ldr	r2, [pc, #456]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fa45 	bl	8001bb8 <moveActuatorLeft>
		    current_time = actuatorPosR[actuatorR][1];
 800172e:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6c      	ldr	r2, [pc, #432]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	617b      	str	r3, [r7, #20]
		    actuatorR++;
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	4a67      	ldr	r2, [pc, #412]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001744:	6013      	str	r3, [r2, #0]
		    actuatorL++;
 8001746:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	4a62      	ldr	r2, [pc, #392]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e036      	b.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x16c>
		}
		else if(actuatorPosL[actuatorL][1] < actuatorPosR[actuatorR][1]){
 8001752:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a65      	ldr	r2, [pc, #404]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4b60      	ldr	r3, [pc, #384]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4960      	ldr	r1, [pc, #384]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	da14      	bge.n	8001798 <HAL_TIM_PeriodElapsedCallback+0x144>
		    moveActuatorLeft(actuatorPosL[actuatorL][0]);
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a5e      	ldr	r2, [pc, #376]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001774:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fa1d 	bl	8001bb8 <moveActuatorLeft>
		    current_time = actuatorPosL[actuatorL][1];
 800177e:	4b56      	ldr	r3, [pc, #344]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5a      	ldr	r2, [pc, #360]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	617b      	str	r3, [r7, #20]
		    actuatorL++;
 800178c:	4b52      	ldr	r3, [pc, #328]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a51      	ldr	r2, [pc, #324]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e013      	b.n	80017c0 <HAL_TIM_PeriodElapsedCallback+0x16c>
		}
		else{
		    moveActuatorRight(actuatorPosR[actuatorR][0]);
 8001798:	4b51      	ldr	r3, [pc, #324]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800179e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fa4a 	bl	8001c3c <moveActuatorRight>
		    current_time = actuatorPosR[actuatorR][1];
 80017a8:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a4d      	ldr	r2, [pc, #308]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	617b      	str	r3, [r7, #20]
		    actuatorR++;
 80017b6:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80017be:	6013      	str	r3, [r2, #0]
		}
		HAL_TIM_Base_Start_IT(&htim2);
 80017c0:	4841      	ldr	r0, [pc, #260]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80017c2:	f003 fef9 	bl	80055b8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 80017c6:	4842      	ldr	r0, [pc, #264]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80017c8:	f003 fef6 	bl	80055b8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 80017cc:	4841      	ldr	r0, [pc, #260]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017ce:	f003 fef3 	bl	80055b8 <HAL_TIM_Base_Start_IT>
		setNextLinActuatorTime(current_time);
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff fec8 	bl	8001568 <setNextLinActuatorTime>
		movements++;
 80017d8:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a3b      	ldr	r2, [pc, #236]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80017e0:	6013      	str	r3, [r2, #0]
		}
		else{
			TIM4->ARR = note_dataR_stop[DCRightStop][1] - current_time;
		}
	}
}
 80017e2:	e18b      	b.n	8001afc <HAL_TIM_PeriodElapsedCallback+0x4a8>
	else if(htim == &htim3){
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3a      	ldr	r2, [pc, #232]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	f040 80ee 	bne.w	80019ca <HAL_TIM_PeriodElapsedCallback+0x376>
		int current_time = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
		if(note_dataR[DCRightStart][1] == note_dataL[DCLeftStart][1]){
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	493f      	ldr	r1, [pc, #252]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	3304      	adds	r3, #4
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	483c      	ldr	r0, [pc, #240]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4403      	add	r3, r0
 8001816:	3304      	adds	r3, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4299      	cmp	r1, r3
 800181c:	d131      	bne.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x22e>
			current_time = note_dataR[DCRightStart][1];
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4934      	ldr	r1, [pc, #208]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3304      	adds	r3, #4
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	613b      	str	r3, [r7, #16]
			while(note_dataR[DCRightStart][1] == current_time){
 8001834:	e004      	b.n	8001840 <HAL_TIM_PeriodElapsedCallback+0x1ec>
				DCRightStart++;
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	4a2c      	ldr	r2, [pc, #176]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800183e:	6013      	str	r3, [r2, #0]
			while(note_dataR[DCRightStart][1] == current_time){
 8001840:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	492b      	ldr	r1, [pc, #172]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	3304      	adds	r3, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	429a      	cmp	r2, r3
 8001858:	d0ed      	beq.n	8001836 <HAL_TIM_PeriodElapsedCallback+0x1e2>
			while(note_dataL[DCLeftStart][1] == current_time){
 800185a:	e004      	b.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x212>
				DCLeftStart++;
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001864:	6013      	str	r3, [r2, #0]
			while(note_dataL[DCLeftStart][1] == current_time){
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4924      	ldr	r1, [pc, #144]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	3304      	adds	r3, #4
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d0ed      	beq.n	800185c <HAL_TIM_PeriodElapsedCallback+0x208>
 8001880:	e06f      	b.n	8001962 <HAL_TIM_PeriodElapsedCallback+0x30e>
		else if(note_dataR[DCRightStart][1] > note_dataL[DCLeftStart][1]){
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	491b      	ldr	r1, [pc, #108]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3304      	adds	r3, #4
 8001894:	6819      	ldr	r1, [r3, #0]
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4818      	ldr	r0, [pc, #96]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4403      	add	r3, r0
 80018a6:	3304      	adds	r3, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4299      	cmp	r1, r3
 80018ac:	dd3b      	ble.n	8001926 <HAL_TIM_PeriodElapsedCallback+0x2d2>
			current_time = note_dataL[DCLeftStart][1];
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4912      	ldr	r1, [pc, #72]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3304      	adds	r3, #4
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	613b      	str	r3, [r7, #16]
			while(note_dataL[DCLeftStart][1] == current_time){
 80018c4:	e021      	b.n	800190a <HAL_TIM_PeriodElapsedCallback+0x2b6>
 80018c6:	bf00      	nop
 80018c8:	200002d0 	.word	0x200002d0
 80018cc:	20023830 	.word	0x20023830
 80018d0:	2000031c 	.word	0x2000031c
 80018d4:	20000368 	.word	0x20000368
 80018d8:	2000827c 	.word	0x2000827c
 80018dc:	200043b0 	.word	0x200043b0
 80018e0:	20008280 	.word	0x20008280
 80018e4:	200043b4 	.word	0x200043b4
 80018e8:	20008234 	.word	0x20008234
 80018ec:	20000530 	.word	0x20000530
 80018f0:	2000828c 	.word	0x2000828c
 80018f4:	20011ed8 	.word	0x20011ed8
 80018f8:	20008284 	.word	0x20008284
 80018fc:	20008294 	.word	0x20008294
				DCLeftStart++;
 8001900:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001908:	6013      	str	r3, [r2, #0]
			while(note_dataL[DCLeftStart][1] == current_time){
 800190a:	4b7e      	ldr	r3, [pc, #504]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	497e      	ldr	r1, [pc, #504]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	3304      	adds	r3, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d0ed      	beq.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8001924:	e01d      	b.n	8001962 <HAL_TIM_PeriodElapsedCallback+0x30e>
			current_time = note_dataR[DCRightStart][1];
 8001926:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4979      	ldr	r1, [pc, #484]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	3304      	adds	r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	613b      	str	r3, [r7, #16]
			while(note_dataR[DCRightStart][1] == current_time){
 800193c:	e004      	b.n	8001948 <HAL_TIM_PeriodElapsedCallback+0x2f4>
				DCRightStart++;
 800193e:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a71      	ldr	r2, [pc, #452]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001946:	6013      	str	r3, [r2, #0]
			while(note_dataR[DCRightStart][1] == current_time){
 8001948:	4b70      	ldr	r3, [pc, #448]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4970      	ldr	r1, [pc, #448]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	3304      	adds	r3, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	429a      	cmp	r2, r3
 8001960:	d0ed      	beq.n	800193e <HAL_TIM_PeriodElapsedCallback+0x2ea>
		if(note_dataR[DCRightStart][1] > note_dataL[DCLeftStart][1]){
 8001962:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	496a      	ldr	r1, [pc, #424]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	3304      	adds	r3, #4
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4863      	ldr	r0, [pc, #396]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4403      	add	r3, r0
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4299      	cmp	r1, r3
 800198c:	dd0e      	ble.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x358>
			TIM3->ARR = note_dataL[DCLeftStart][1] - current_time;
 800198e:	4b5d      	ldr	r3, [pc, #372]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	495d      	ldr	r1, [pc, #372]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3304      	adds	r3, #4
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019aa:	e0a7      	b.n	8001afc <HAL_TIM_PeriodElapsedCallback+0x4a8>
			TIM3->ARR = note_dataR[DCRightStart][1] - current_time;
 80019ac:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4957      	ldr	r1, [pc, #348]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	3304      	adds	r3, #4
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad2      	subs	r2, r2, r3
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019c8:	e098      	b.n	8001afc <HAL_TIM_PeriodElapsedCallback+0x4a8>
	else if(htim == &htim4){
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a52      	ldr	r2, [pc, #328]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	f040 8094 	bne.w	8001afc <HAL_TIM_PeriodElapsedCallback+0x4a8>
		int current_time = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
		if(note_dataR_stop[DCRightStop][1] == note_dataL_stop[DCLeftStop][1]){
 80019d8:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a50      	ldr	r2, [pc, #320]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	494f      	ldr	r1, [pc, #316]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d125      	bne.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x3ec>
			current_time = note_dataR_stop[DCRightStop][1];
 80019f4:	4b49      	ldr	r3, [pc, #292]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	60fb      	str	r3, [r7, #12]
			while(note_dataR_stop[DCRightStop][1] == current_time){
 8001a02:	e004      	b.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x3ba>
				DCRightStop++;
 8001a04:	4b45      	ldr	r3, [pc, #276]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a44      	ldr	r2, [pc, #272]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a0c:	6013      	str	r3, [r2, #0]
			while(note_dataR_stop[DCRightStop][1] == current_time){
 8001a0e:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a43      	ldr	r2, [pc, #268]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d0f1      	beq.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x3b0>
			while(note_dataL_stop[DCLeftStop][1] == current_time){
 8001a20:	e004      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0x3d8>
				DCLeftStop++;
 8001a22:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a3e      	ldr	r2, [pc, #248]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001a2a:	6013      	str	r3, [r2, #0]
			while(note_dataL_stop[DCLeftStop][1] == current_time){
 8001a2c:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4413      	add	r3, r2
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d0f1      	beq.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0x3ce>
 8001a3e:	e03a      	b.n	8001ab6 <HAL_TIM_PeriodElapsedCallback+0x462>
		else if(note_dataR_stop[DCRightStop][1] > note_dataL_stop[DCLeftStop][1]){
 8001a40:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a36      	ldr	r2, [pc, #216]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4935      	ldr	r1, [pc, #212]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dd16      	ble.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0x436>
			current_time = note_dataL_stop[DCLeftStop][1];
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a31      	ldr	r2, [pc, #196]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	60fb      	str	r3, [r7, #12]
			while(note_dataL_stop[DCLeftStop][1] == current_time){
 8001a6a:	e004      	b.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0x422>
				DCLeftStop++;
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a2c      	ldr	r2, [pc, #176]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001a74:	6013      	str	r3, [r2, #0]
			while(note_dataL_stop[DCLeftStop][1] == current_time){
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a2b      	ldr	r2, [pc, #172]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d0f1      	beq.n	8001a6c <HAL_TIM_PeriodElapsedCallback+0x418>
 8001a88:	e015      	b.n	8001ab6 <HAL_TIM_PeriodElapsedCallback+0x462>
			current_time = note_dataR_stop[DCRightStop][1];
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a24      	ldr	r2, [pc, #144]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
			while(note_dataR_stop[DCRightStop][1] == current_time){
 8001a98:	e004      	b.n	8001aa4 <HAL_TIM_PeriodElapsedCallback+0x450>
				DCRightStop++;
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001aa2:	6013      	str	r3, [r2, #0]
			while(note_dataR_stop[DCRightStop][1] == current_time){
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1d      	ldr	r2, [pc, #116]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d0f1      	beq.n	8001a9a <HAL_TIM_PeriodElapsedCallback+0x446>
		if(note_dataR_stop[DCRightStop][1] > note_dataL_stop[DCLeftStop][1]){
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4918      	ldr	r1, [pc, #96]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dd0a      	ble.n	8001ae8 <HAL_TIM_PeriodElapsedCallback+0x494>
			TIM4->ARR = note_dataL_stop[DCLeftStop][1] - current_time;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad2      	subs	r2, r2, r3
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ae6:	e009      	b.n	8001afc <HAL_TIM_PeriodElapsedCallback+0x4a8>
			TIM4->ARR = note_dataR_stop[DCRightStop][1] - current_time;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad2      	subs	r2, r2, r3
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20008284 	.word	0x20008284
 8001b08:	20008294 	.word	0x20008294
 8001b0c:	2000828c 	.word	0x2000828c
 8001b10:	20011ed8 	.word	0x20011ed8
 8001b14:	40000400 	.word	0x40000400
 8001b18:	20000368 	.word	0x20000368
 8001b1c:	20008290 	.word	0x20008290
 8001b20:	2001bb1c 	.word	0x2001bb1c
 8001b24:	20008288 	.word	0x20008288
 8001b28:	2001f99c 	.word	0x2001f99c
 8001b2c:	40000800 	.word	0x40000800

08001b30 <moveActuatorDistLeft>:
	, rightMin + whiteNoteDist * 9.0, rightMin + whiteNoteDist * 10.0, 0, rightMin + whiteNoteDist * 11.0, 0, rightMin + whiteNoteDist * 12.0, 0
	, rightMin + whiteNoteDist * 13.0, rightMin + whiteNoteDist * 14.0, 0, rightMin + whiteNoteDist * 15.0
};

// Move actuator a given distance in a given direction, takes in distance d argument in inches
void moveActuatorDistLeft(double d, int dir){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b3a:	6078      	str	r0, [r7, #4]
	int on_time = (int) ((d / inPerSec) * 1000);
 8001b3c:	a31c      	add	r3, pc, #112	; (adr r3, 8001bb0 <moveActuatorDistLeft+0x80>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b46:	f7fe fe41 	bl	80007cc <__aeabi_ddiv>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <moveActuatorDistLeft+0x78>)
 8001b58:	f7fe fd0e 	bl	8000578 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7fe ffa2 	bl	8000aac <__aeabi_d2iz>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, dir);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <moveActuatorDistLeft+0x7c>)
 8001b76:	f001 feb9 	bl	80038ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <moveActuatorDistLeft+0x7c>)
 8001b82:	f001 feb3 	bl	80038ec <HAL_GPIO_WritePin>

    if(on_time){
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <moveActuatorDistLeft+0x64>
        HAL_Delay(on_time);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 fb2a 	bl	80031e8 <HAL_Delay>
    }


    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b9a:	4804      	ldr	r0, [pc, #16]	; (8001bac <moveActuatorDistLeft+0x7c>)
 8001b9c:	f001 fea6 	bl	80038ec <HAL_GPIO_WritePin>
}
 8001ba0:	bf00      	nop
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	408f4000 	.word	0x408f4000
 8001bac:	48001400 	.word	0x48001400
 8001bb0:	cccccccd 	.word	0xcccccccd
 8001bb4:	403c4ccc 	.word	0x403c4ccc

08001bb8 <moveActuatorLeft>:

    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
}

// Move the left linear actuator to the correct position for the current note number
void moveActuatorLeft(int note_num){
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	double d = numToDistLeft[abs((note_num - defaultLeft))];
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b2b      	subs	r3, #43	; 0x2b
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bfb8      	it	lt
 8001bc8:	425b      	neglt	r3, r3
 8001bca:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <moveActuatorLeft+0x7c>)
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double delta_x = current_pos_left - d;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <moveActuatorLeft+0x80>)
 8001bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001be2:	f7fe fb11 	bl	8000208 <__aeabi_dsub>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(delta_x > 0){
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bfa:	f7fe ff4d 	bl	8000a98 <__aeabi_dcmpgt>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <moveActuatorLeft+0x58>
		// Set stepper direction appropriately
		moveActuatorDistLeft(delta_x, 1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c0a:	f7ff ff91 	bl	8001b30 <moveActuatorDistLeft>
 8001c0e:	e008      	b.n	8001c22 <moveActuatorLeft+0x6a>
	}
	else{
		// Set stepper direction appropriately
		moveActuatorDistLeft(delta_x * -1, 0);
 8001c10:	68bc      	ldr	r4, [r7, #8]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c18:	2000      	movs	r0, #0
 8001c1a:	ec45 4b10 	vmov	d0, r4, r5
 8001c1e:	f7ff ff87 	bl	8001b30 <moveActuatorDistLeft>
	}

	current_pos_left = d;
 8001c22:	4905      	ldr	r1, [pc, #20]	; (8001c38 <moveActuatorLeft+0x80>)
 8001c24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bdb0      	pop	{r4, r5, r7, pc}
 8001c34:	08008f90 	.word	0x08008f90
 8001c38:	20023820 	.word	0x20023820

08001c3c <moveActuatorRight>:

// Move the right linear actuator to the correct position for the current note number
void moveActuatorRight(int note_num){
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	double d = numToDistRight[note_num - defaultRight];
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b3c      	subs	r3, #60	; 0x3c
 8001c48:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <moveActuatorRight+0x78>)
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double delta_x = d - current_pos_right;
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <moveActuatorRight+0x7c>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c60:	f7fe fad2 	bl	8000208 <__aeabi_dsub>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(delta_x > 0){
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c78:	f7fe ff0e 	bl	8000a98 <__aeabi_dcmpgt>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <moveActuatorRight+0x52>
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x, 1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c88:	f000 f88e 	bl	8001da8 <actuatorMoveDistLoop>
 8001c8c:	e008      	b.n	8001ca0 <moveActuatorRight+0x64>
		//moveActuatorDistRight(delta_x, 1);
	}
	else{
		// Set stepper direction appropriately
		actuatorMoveDistLoop(delta_x * -1, 0);
 8001c8e:	68bc      	ldr	r4, [r7, #8]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c96:	2000      	movs	r0, #0
 8001c98:	ec45 4b10 	vmov	d0, r4, r5
 8001c9c:	f000 f884 	bl	8001da8 <actuatorMoveDistLoop>
		//moveActuatorDistRight(delta_x * -1, 0);
	}

	current_pos_right = d;
 8001ca0:	4905      	ldr	r1, [pc, #20]	; (8001cb8 <moveActuatorRight+0x7c>)
 8001ca2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ca6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08008fb8 	.word	0x08008fb8
 8001cb8:	20023828 	.word	0x20023828

08001cbc <play_notes>:

void play_notes() {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	formGroups(note_dataR, note_dataR_len);
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <play_notes+0xb8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	482c      	ldr	r0, [pc, #176]	; (8001d78 <play_notes+0xbc>)
 8001cc8:	f7ff f896 	bl	8000df8 <formGroups>
	formGroups(note_dataL, note_dataL_len);
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <play_notes+0xc0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	482b      	ldr	r0, [pc, #172]	; (8001d80 <play_notes+0xc4>)
 8001cd4:	f7ff f890 	bl	8000df8 <formGroups>

	actuatorPosR_len = assignActuatorPos(actuatorPosR, note_dataR, note_dataR_len, 0);
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <play_notes+0xb8>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4926      	ldr	r1, [pc, #152]	; (8001d78 <play_notes+0xbc>)
 8001ce0:	4828      	ldr	r0, [pc, #160]	; (8001d84 <play_notes+0xc8>)
 8001ce2:	f7ff fa7e 	bl	80011e2 <assignActuatorPos>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <play_notes+0xcc>)
 8001cea:	6013      	str	r3, [r2, #0]
	actuatorPosL_len = assignActuatorPos(actuatorPosL, note_dataL, note_dataL_len, 1);
 8001cec:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <play_notes+0xc0>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	4923      	ldr	r1, [pc, #140]	; (8001d80 <play_notes+0xc4>)
 8001cf4:	4825      	ldr	r0, [pc, #148]	; (8001d8c <play_notes+0xd0>)
 8001cf6:	f7ff fa74 	bl	80011e2 <assignActuatorPos>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <play_notes+0xd4>)
 8001cfe:	6013      	str	r3, [r2, #0]

	assignDCAct(actuatorPosR, actuatorPosR_len, note_dataR, note_dataR_len);
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <play_notes+0xcc>)
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <play_notes+0xb8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <play_notes+0xbc>)
 8001d0a:	481e      	ldr	r0, [pc, #120]	; (8001d84 <play_notes+0xc8>)
 8001d0c:	f7ff fbc0 	bl	8001490 <assignDCAct>
	assignDCAct(actuatorPosL, actuatorPosL_len, note_dataL, note_dataL_len);
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <play_notes+0xd4>)
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <play_notes+0xc0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <play_notes+0xc4>)
 8001d1a:	481c      	ldr	r0, [pc, #112]	; (8001d8c <play_notes+0xd0>)
 8001d1c:	f7ff fbb8 	bl	8001490 <assignDCAct>
	splitStartStop(note_dataR, note_dataR_len, note_dataR_stop);
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <play_notes+0xb8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <play_notes+0xd8>)
 8001d26:	4619      	mov	r1, r3
 8001d28:	4813      	ldr	r0, [pc, #76]	; (8001d78 <play_notes+0xbc>)
 8001d2a:	f7ff fb25 	bl	8001378 <splitStartStop>
	splitStartStop(note_dataL, note_dataL_len, note_dataL_stop);
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <play_notes+0xc0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <play_notes+0xdc>)
 8001d34:	4619      	mov	r1, r3
 8001d36:	4812      	ldr	r0, [pc, #72]	; (8001d80 <play_notes+0xc4>)
 8001d38:	f7ff fb1e 	bl	8001378 <splitStartStop>
	sortStop(note_dataR_stop, note_dataR_len);
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <play_notes+0xb8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	4814      	ldr	r0, [pc, #80]	; (8001d94 <play_notes+0xd8>)
 8001d44:	f7ff fb4b 	bl	80013de <sortStop>
	sortStop(note_dataL_stop, note_dataL_len);
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <play_notes+0xc0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4812      	ldr	r0, [pc, #72]	; (8001d98 <play_notes+0xdc>)
 8001d50:	f7ff fb45 	bl	80013de <sortStop>

	TIM2->ARR = 0;
 8001d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d58:	2200      	movs	r2, #0
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim2);
 8001d5c:	480f      	ldr	r0, [pc, #60]	; (8001d9c <play_notes+0xe0>)
 8001d5e:	f003 fc2b 	bl	80055b8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 8001d62:	480f      	ldr	r0, [pc, #60]	; (8001da0 <play_notes+0xe4>)
 8001d64:	f003 fc28 	bl	80055b8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 8001d68:	480e      	ldr	r0, [pc, #56]	; (8001da4 <play_notes+0xe8>)
 8001d6a:	f003 fc25 	bl	80055b8 <HAL_TIM_Base_Start_IT>
	// Might need to set initial timer ARR values

	//********************************************************************
	// IMPORTANT: Set TIM2 interrupt as higher priority than TIM3 and TIM4
	//********************************************************************
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2001bb18 	.word	0x2001bb18
 8001d78:	20011ed8 	.word	0x20011ed8
 8001d7c:	20011ed4 	.word	0x20011ed4
 8001d80:	20008294 	.word	0x20008294
 8001d84:	200043b4 	.word	0x200043b4
 8001d88:	20008234 	.word	0x20008234
 8001d8c:	20000530 	.word	0x20000530
 8001d90:	200043b0 	.word	0x200043b0
 8001d94:	2001bb1c 	.word	0x2001bb1c
 8001d98:	2001f99c 	.word	0x2001f99c
 8001d9c:	200002d0 	.word	0x200002d0
 8001da0:	2000031c 	.word	0x2000031c
 8001da4:	20000368 	.word	0x20000368

08001da8 <actuatorMoveDistLoop>:

void actuatorMoveDistLoop(double dist, int dir){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	ed87 0b02 	vstr	d0, [r7, #8]
 8001db2:	6078      	str	r0, [r7, #4]
	int steps = (int) ((dist / inPerRot) * stepPerRot);
 8001db4:	a32b      	add	r3, pc, #172	; (adr r3, 8001e64 <actuatorMoveDistLoop+0xbc>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dbe:	f7fe fd05 	bl	80007cc <__aeabi_ddiv>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <actuatorMoveDistLoop+0xb0>)
 8001dd0:	f7fe fbd2 	bl	8000578 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe fe66 	bl	8000aac <__aeabi_d2iz>
 8001de0:	4603      	mov	r3, r0
 8001de2:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, dir);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	481b      	ldr	r0, [pc, #108]	; (8001e5c <actuatorMoveDistLoop+0xb4>)
 8001dee:	f001 fd7d 	bl	80038ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df8:	4818      	ldr	r0, [pc, #96]	; (8001e5c <actuatorMoveDistLoop+0xb4>)
 8001dfa:	f001 fd77 	bl	80038ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2101      	movs	r1, #1
 8001e02:	4817      	ldr	r0, [pc, #92]	; (8001e60 <actuatorMoveDistLoop+0xb8>)
 8001e04:	f001 fd72 	bl	80038ec <HAL_GPIO_WritePin>

	if(steps){
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d019      	beq.n	8001e42 <actuatorMoveDistLoop+0x9a>
		for(int i = 0; i < steps; i++){
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e012      	b.n	8001e3a <actuatorMoveDistLoop+0x92>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 8001e14:	2201      	movs	r2, #1
 8001e16:	2101      	movs	r1, #1
 8001e18:	4811      	ldr	r0, [pc, #68]	; (8001e60 <actuatorMoveDistLoop+0xb8>)
 8001e1a:	f001 fd67 	bl	80038ec <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f001 f9e2 	bl	80031e8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2101      	movs	r1, #1
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <actuatorMoveDistLoop+0xb8>)
 8001e2a:	f001 fd5f 	bl	80038ec <HAL_GPIO_WritePin>
			//********************************************
			// CHANGE SPEED BY CHANGING HAL_Delay BELOW
			//********************************************
			HAL_Delay(1);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f001 f9da 	bl	80031e8 <HAL_Delay>
		for(int i = 0; i < steps; i++){
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	dbe8      	blt.n	8001e14 <actuatorMoveDistLoop+0x6c>
		}
	}

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8001e42:	2201      	movs	r2, #1
 8001e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <actuatorMoveDistLoop+0xb4>)
 8001e4a:	f001 fd4f 	bl	80038ec <HAL_GPIO_WritePin>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40690000 	.word	0x40690000
 8001e5c:	48001400 	.word	0x48001400
 8001e60:	48001800 	.word	0x48001800
 8001e64:	0a3d70a4 	.word	0x0a3d70a4
 8001e68:	4006a3d7 	.word	0x4006a3d7
 8001e6c:	00000000 	.word	0x00000000

08001e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e76:	f001 f942 	bl	80030fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e7a:	f000 f855 	bl	8001f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e7e:	f000 fab5 	bl	80023ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e82:	f000 fa1b 	bl	80022bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001e86:	f000 fa65 	bl	8002354 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8001e8a:	f000 f9bd 	bl	8002208 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001e8e:	f000 f8cf 	bl	8002030 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e92:	f000 f91b 	bl	80020cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e96:	f000 f969 	bl	800216c <MX_TIM4_Init>
  MX_I2C1_Init();
 8001e9a:	f000 f88b 	bl	8001fb4 <MX_I2C1_Init>

  //********************************************************
  // Might need to move this to where ever we start the song
  //********************************************************

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001e9e:	210c      	movs	r1, #12
 8001ea0:	481b      	ldr	r0, [pc, #108]	; (8001f10 <main+0xa0>)
 8001ea2:	f003 fc7f 	bl	80057a4 <HAL_TIM_PWM_Start>
  TIM5->CCR4 = 25;
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <main+0xa4>)
 8001ea8:	2219      	movs	r2, #25
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
  uint8_t data_write2[1] = {0x00};
 8001eac:	2300      	movs	r3, #0
 8001eae:	713b      	strb	r3, [r7, #4]
  uint8_t data_write3[1] = {0x02};
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	703b      	strb	r3, [r7, #0]

  HAL_UART_Receive_IT(&huart3, RX_Buffer, sizeof(RX_Buffer));
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	4918      	ldr	r1, [pc, #96]	; (8001f18 <main+0xa8>)
 8001eb8:	4818      	ldr	r0, [pc, #96]	; (8001f1c <main+0xac>)
 8001eba:	f004 fe3b 	bl	8006b34 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart3, TX_Buffer, sizeof(TX_Buffer));
 8001ebe:	220e      	movs	r2, #14
 8001ec0:	4917      	ldr	r1, [pc, #92]	; (8001f20 <main+0xb0>)
 8001ec2:	4816      	ldr	r0, [pc, #88]	; (8001f1c <main+0xac>)
 8001ec4:	f004 fda2 	bl	8006a0c <HAL_UART_Transmit_IT>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ece:	4815      	ldr	r0, [pc, #84]	; (8001f24 <main+0xb4>)
 8001ed0:	f001 fd0c 	bl	80038ec <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, 1);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eda:	4812      	ldr	r0, [pc, #72]	; (8001f24 <main+0xb4>)
 8001edc:	f001 fd06 	bl	80038ec <HAL_GPIO_WritePin>
	  /*moveActuatorDistLeft(5, 1);
	  HAL_Delay(1000);
	  moveActuatorDistLeft(5, 0);
	  HAL_Delay(1000);*/

	  actuatorMoveDistLoop(10, 1);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001f08 <main+0x98>
 8001ee6:	f7ff ff5f 	bl	8001da8 <actuatorMoveDistLoop>
	  HAL_Delay(1000);
 8001eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eee:	f001 f97b 	bl	80031e8 <HAL_Delay>
	  actuatorMoveDistLoop(10, 0);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001f08 <main+0x98>
 8001ef8:	f7ff ff56 	bl	8001da8 <actuatorMoveDistLoop>
	  HAL_Delay(1000);
 8001efc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f00:	f001 f972 	bl	80031e8 <HAL_Delay>
	  actuatorMoveDistLoop(10, 1);
 8001f04:	e7ec      	b.n	8001ee0 <main+0x70>
 8001f06:	bf00      	nop
 8001f08:	00000000 	.word	0x00000000
 8001f0c:	40240000 	.word	0x40240000
 8001f10:	200003b4 	.word	0x200003b4
 8001f14:	40000c00 	.word	0x40000c00
 8001f18:	20000528 	.word	0x20000528
 8001f1c:	20000494 	.word	0x20000494
 8001f20:	20000000 	.word	0x20000000
 8001f24:	48001400 	.word	0x48001400

08001f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b096      	sub	sp, #88	; 0x58
 8001f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2244      	movs	r2, #68	; 0x44
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f006 fff0 	bl	8008f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f4e:	f001 fe37 	bl	8003bc0 <HAL_PWREx_ControlVoltageScaling>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f58:	f000 fdae 	bl	8002ab8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f60:	2301      	movs	r3, #1
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f68:	2360      	movs	r3, #96	; 0x60
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 fed7 	bl	8003d28 <HAL_RCC_OscConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001f80:	f000 fd9a 	bl	8002ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f84:	230f      	movs	r3, #15
 8001f86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f98:	463b      	mov	r3, r7
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fadd 	bl	800455c <HAL_RCC_ClockConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001fa8:	f000 fd86 	bl	8002ab8 <Error_Handler>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3758      	adds	r7, #88	; 0x58
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <MX_I2C1_Init+0x74>)
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <MX_I2C1_Init+0x78>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_I2C1_Init+0x74>)
 8001fc0:	f640 6214 	movw	r2, #3604	; 0xe14
 8001fc4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <MX_I2C1_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <MX_I2C1_Init+0x74>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <MX_I2C1_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <MX_I2C1_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <MX_I2C1_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe4:	4b10      	ldr	r3, [pc, #64]	; (8002028 <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <MX_I2C1_Init+0x74>)
 8001ff2:	f001 fc93 	bl	800391c <HAL_I2C_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ffc:	f000 fd5c 	bl	8002ab8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002000:	2100      	movs	r1, #0
 8002002:	4809      	ldr	r0, [pc, #36]	; (8002028 <MX_I2C1_Init+0x74>)
 8002004:	f001 fd25 	bl	8003a52 <HAL_I2CEx_ConfigAnalogFilter>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800200e:	f000 fd53 	bl	8002ab8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002012:	2100      	movs	r1, #0
 8002014:	4804      	ldr	r0, [pc, #16]	; (8002028 <MX_I2C1_Init+0x74>)
 8002016:	f001 fd67 	bl	8003ae8 <HAL_I2CEx_ConfigDigitalFilter>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002020:	f000 fd4a 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000027c 	.word	0x2000027c
 800202c:	40005400 	.word	0x40005400

08002030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002054:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002058:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800205c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002066:	f04f 32ff 	mov.w	r2, #4294967295
 800206a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <MX_TIM2_Init+0x98>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002078:	4813      	ldr	r0, [pc, #76]	; (80020c8 <MX_TIM2_Init+0x98>)
 800207a:	f003 fa45 	bl	8005508 <HAL_TIM_Base_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002084:	f000 fd18 	bl	8002ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800208e:	f107 0310 	add.w	r3, r7, #16
 8002092:	4619      	mov	r1, r3
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002096:	f003 fea1 	bl	8005ddc <HAL_TIM_ConfigClockSource>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80020a0:	f000 fd0a 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_TIM2_Init+0x98>)
 80020b2:	f004 fbb5 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80020bc:	f000 fcfc 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200002d0 	.word	0x200002d0

080020cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <MX_TIM3_Init+0x98>)
 80020ec:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <MX_TIM3_Init+0x9c>)
 80020ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <MX_TIM3_Init+0x98>)
 80020f2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80020f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <MX_TIM3_Init+0x98>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_TIM3_Init+0x98>)
 8002100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002104:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <MX_TIM3_Init+0x98>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <MX_TIM3_Init+0x98>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002112:	4814      	ldr	r0, [pc, #80]	; (8002164 <MX_TIM3_Init+0x98>)
 8002114:	f003 f9f8 	bl	8005508 <HAL_TIM_Base_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800211e:	f000 fccb 	bl	8002ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002126:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4619      	mov	r1, r3
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <MX_TIM3_Init+0x98>)
 8002130:	f003 fe54 	bl	8005ddc <HAL_TIM_ConfigClockSource>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800213a:	f000 fcbd 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <MX_TIM3_Init+0x98>)
 800214c:	f004 fb68 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002156:	f000 fcaf 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2000031c 	.word	0x2000031c
 8002168:	40000400 	.word	0x40000400

0800216c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_TIM4_Init+0x94>)
 800218c:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <MX_TIM4_Init+0x98>)
 800218e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_TIM4_Init+0x94>)
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_TIM4_Init+0x94>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_TIM4_Init+0x94>)
 800219e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_TIM4_Init+0x94>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <MX_TIM4_Init+0x94>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021b0:	4813      	ldr	r0, [pc, #76]	; (8002200 <MX_TIM4_Init+0x94>)
 80021b2:	f003 f9a9 	bl	8005508 <HAL_TIM_Base_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80021bc:	f000 fc7c 	bl	8002ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4619      	mov	r1, r3
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <MX_TIM4_Init+0x94>)
 80021ce:	f003 fe05 	bl	8005ddc <HAL_TIM_ConfigClockSource>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80021d8:	f000 fc6e 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_TIM4_Init+0x94>)
 80021ea:	f004 fb19 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80021f4:	f000 fc60 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000368 	.word	0x20000368
 8002204:	40000800 	.word	0x40000800

08002208 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221a:	463b      	mov	r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
 8002228:	615a      	str	r2, [r3, #20]
 800222a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800222c:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <MX_TIM5_Init+0xac>)
 800222e:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <MX_TIM5_Init+0xb0>)
 8002230:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 39;
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <MX_TIM5_Init+0xac>)
 8002234:	2227      	movs	r2, #39	; 0x27
 8002236:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <MX_TIM5_Init+0xac>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49;
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <MX_TIM5_Init+0xac>)
 8002240:	2231      	movs	r2, #49	; 0x31
 8002242:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <MX_TIM5_Init+0xac>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <MX_TIM5_Init+0xac>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002250:	4818      	ldr	r0, [pc, #96]	; (80022b4 <MX_TIM5_Init+0xac>)
 8002252:	f003 fa50 	bl	80056f6 <HAL_TIM_PWM_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800225c:	f000 fc2c 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	4811      	ldr	r0, [pc, #68]	; (80022b4 <MX_TIM5_Init+0xac>)
 8002270:	f004 fad6 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800227a:	f000 fc1d 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800227e:	2360      	movs	r3, #96	; 0x60
 8002280:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800228e:	463b      	mov	r3, r7
 8002290:	220c      	movs	r2, #12
 8002292:	4619      	mov	r1, r3
 8002294:	4807      	ldr	r0, [pc, #28]	; (80022b4 <MX_TIM5_Init+0xac>)
 8002296:	f003 fc8d 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80022a0:	f000 fc0a 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022a4:	4803      	ldr	r0, [pc, #12]	; (80022b4 <MX_TIM5_Init+0xac>)
 80022a6:	f000 fda9 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	; 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200003b4 	.word	0x200003b4
 80022b8:	40000c00 	.word	0x40000c00

080022bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022c2:	4a23      	ldr	r2, [pc, #140]	; (8002350 <MX_USART2_UART_Init+0x94>)
 80022c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022e2:	220c      	movs	r2, #12
 80022e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_USART2_UART_Init+0x90>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <MX_USART2_UART_Init+0x90>)
 8002300:	2200      	movs	r2, #0
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002304:	4811      	ldr	r0, [pc, #68]	; (800234c <MX_USART2_UART_Init+0x90>)
 8002306:	f004 fb31 	bl	800696c <HAL_UART_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002310:	f000 fbd2 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002314:	2100      	movs	r1, #0
 8002316:	480d      	ldr	r0, [pc, #52]	; (800234c <MX_USART2_UART_Init+0x90>)
 8002318:	f006 fd35 	bl	8008d86 <HAL_UARTEx_SetTxFifoThreshold>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002322:	f000 fbc9 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002326:	2100      	movs	r1, #0
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <MX_USART2_UART_Init+0x90>)
 800232a:	f006 fd6a 	bl	8008e02 <HAL_UARTEx_SetRxFifoThreshold>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002334:	f000 fbc0 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_USART2_UART_Init+0x90>)
 800233a:	f006 fceb 	bl	8008d14 <HAL_UARTEx_DisableFifoMode>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002344:	f000 fbb8 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000400 	.word	0x20000400
 8002350:	40004400 	.word	0x40004400

08002354 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 800235a:	4a23      	ldr	r2, [pc, #140]	; (80023e8 <MX_USART3_UART_Init+0x94>)
 800235c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800235e:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 8002360:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002366:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 800237a:	220c      	movs	r2, #12
 800237c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 8002398:	2200      	movs	r2, #0
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800239c:	4811      	ldr	r0, [pc, #68]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 800239e:	f004 fae5 	bl	800696c <HAL_UART_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80023a8:	f000 fb86 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ac:	2100      	movs	r1, #0
 80023ae:	480d      	ldr	r0, [pc, #52]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 80023b0:	f006 fce9 	bl	8008d86 <HAL_UARTEx_SetTxFifoThreshold>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80023ba:	f000 fb7d 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023be:	2100      	movs	r1, #0
 80023c0:	4808      	ldr	r0, [pc, #32]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 80023c2:	f006 fd1e 	bl	8008e02 <HAL_UARTEx_SetRxFifoThreshold>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80023cc:	f000 fb74 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023d0:	4804      	ldr	r0, [pc, #16]	; (80023e4 <MX_USART3_UART_Init+0x90>)
 80023d2:	f006 fc9f 	bl	8008d14 <HAL_UARTEx_DisableFifoMode>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80023dc:	f000 fb6c 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000494 	.word	0x20000494
 80023e8:	40004800 	.word	0x40004800

080023ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
 8002400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002402:	4bb4      	ldr	r3, [pc, #720]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	4ab3      	ldr	r2, [pc, #716]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002408:	f043 0310 	orr.w	r3, r3, #16
 800240c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240e:	4bb1      	ldr	r3, [pc, #708]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	4bae      	ldr	r3, [pc, #696]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4aad      	ldr	r2, [pc, #692]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002426:	4bab      	ldr	r3, [pc, #684]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002432:	4ba8      	ldr	r3, [pc, #672]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	4aa7      	ldr	r2, [pc, #668]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002438:	f043 0320 	orr.w	r3, r3, #32
 800243c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243e:	4ba5      	ldr	r3, [pc, #660]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800244a:	4ba2      	ldr	r3, [pc, #648]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 800244c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244e:	4aa1      	ldr	r2, [pc, #644]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002456:	4b9f      	ldr	r3, [pc, #636]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b9c      	ldr	r3, [pc, #624]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	4a9b      	ldr	r2, [pc, #620]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246e:	4b99      	ldr	r3, [pc, #612]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	4b96      	ldr	r3, [pc, #600]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	4a95      	ldr	r2, [pc, #596]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002486:	4b93      	ldr	r3, [pc, #588]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002492:	4b90      	ldr	r3, [pc, #576]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	4a8f      	ldr	r2, [pc, #572]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 8002498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800249c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800249e:	4b8d      	ldr	r3, [pc, #564]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024aa:	4b8a      	ldr	r3, [pc, #552]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a89      	ldr	r2, [pc, #548]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 80024b0:	f043 0308 	orr.w	r3, r3, #8
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	4b87      	ldr	r3, [pc, #540]	; (80026d4 <MX_GPIO_Init+0x2e8>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80024c2:	f001 fc21 	bl	8003d08 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80024c6:	2200      	movs	r2, #0
 80024c8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80024cc:	4882      	ldr	r0, [pc, #520]	; (80026d8 <MX_GPIO_Init+0x2ec>)
 80024ce:	f001 fa0d 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	210f      	movs	r1, #15
 80024d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024da:	f001 fa07 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 80024e4:	487d      	ldr	r0, [pc, #500]	; (80026dc <MX_GPIO_Init+0x2f0>)
 80024e6:	f001 fa01 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2143      	movs	r1, #67	; 0x43
 80024ee:	487c      	ldr	r0, [pc, #496]	; (80026e0 <MX_GPIO_Init+0x2f4>)
 80024f0:	f001 f9fc 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024f4:	230c      	movs	r3, #12
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002504:	230d      	movs	r3, #13
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	4619      	mov	r1, r3
 800250e:	4875      	ldr	r0, [pc, #468]	; (80026e4 <MX_GPIO_Init+0x2f8>)
 8002510:	f001 f85a 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002514:	2307      	movs	r3, #7
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002518:	2312      	movs	r3, #18
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002524:	2304      	movs	r3, #4
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252c:	4619      	mov	r1, r3
 800252e:	486a      	ldr	r0, [pc, #424]	; (80026d8 <MX_GPIO_Init+0x2ec>)
 8002530:	f001 f84a 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002534:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253a:	2301      	movs	r3, #1
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254a:	4619      	mov	r1, r3
 800254c:	4862      	ldr	r0, [pc, #392]	; (80026d8 <MX_GPIO_Init+0x2ec>)
 800254e:	f001 f83b 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002552:	230f      	movs	r3, #15
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002556:	230b      	movs	r3, #11
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002562:	4619      	mov	r1, r3
 8002564:	485d      	ldr	r0, [pc, #372]	; (80026dc <MX_GPIO_Init+0x2f0>)
 8002566:	f001 f82f 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800256a:	230f      	movs	r3, #15
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256e:	2301      	movs	r3, #1
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257e:	4619      	mov	r1, r3
 8002580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002584:	f001 f820 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002588:	23c0      	movs	r3, #192	; 0xc0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002598:	2305      	movs	r3, #5
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a0:	4619      	mov	r1, r3
 80025a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a6:	f001 f80f 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11;
 80025aa:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b0:	2301      	movs	r3, #1
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c0:	4619      	mov	r1, r3
 80025c2:	4846      	ldr	r0, [pc, #280]	; (80026dc <MX_GPIO_Init+0x2f0>)
 80025c4:	f001 f800 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025c8:	2302      	movs	r3, #2
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025cc:	230b      	movs	r3, #11
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	4619      	mov	r1, r3
 80025da:	4843      	ldr	r0, [pc, #268]	; (80026e8 <MX_GPIO_Init+0x2fc>)
 80025dc:	f000 fff4 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80025e0:	2344      	movs	r3, #68	; 0x44
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e4:	2303      	movs	r3, #3
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f0:	4619      	mov	r1, r3
 80025f2:	483d      	ldr	r0, [pc, #244]	; (80026e8 <MX_GPIO_Init+0x2fc>)
 80025f4:	f000 ffe8 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 80025f8:	2343      	movs	r3, #67	; 0x43
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260c:	4619      	mov	r1, r3
 800260e:	4834      	ldr	r0, [pc, #208]	; (80026e0 <MX_GPIO_Init+0x2f4>)
 8002610:	f000 ffda 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002614:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002626:	2301      	movs	r3, #1
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800262a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262e:	4619      	mov	r1, r3
 8002630:	482c      	ldr	r0, [pc, #176]	; (80026e4 <MX_GPIO_Init+0x2f8>)
 8002632:	f000 ffc9 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002636:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002648:	2303      	movs	r3, #3
 800264a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800264c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002650:	4619      	mov	r1, r3
 8002652:	4824      	ldr	r0, [pc, #144]	; (80026e4 <MX_GPIO_Init+0x2f8>)
 8002654:	f000 ffb8 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002658:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800266a:	230d      	movs	r3, #13
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002672:	4619      	mov	r1, r3
 8002674:	481c      	ldr	r0, [pc, #112]	; (80026e8 <MX_GPIO_Init+0x2fc>)
 8002676:	f000 ffa7 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800267a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800268c:	230e      	movs	r3, #14
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	4814      	ldr	r0, [pc, #80]	; (80026e8 <MX_GPIO_Init+0x2fc>)
 8002698:	f000 ff96 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800269c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80026ae:	2308      	movs	r3, #8
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b6:	4619      	mov	r1, r3
 80026b8:	4809      	ldr	r0, [pc, #36]	; (80026e0 <MX_GPIO_Init+0x2f4>)
 80026ba:	f000 ff85 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026be:	2340      	movs	r3, #64	; 0x40
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80026ce:	230d      	movs	r3, #13
 80026d0:	e00c      	b.n	80026ec <MX_GPIO_Init+0x300>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	48001400 	.word	0x48001400
 80026dc:	48000800 	.word	0x48000800
 80026e0:	48001800 	.word	0x48001800
 80026e4:	48001000 	.word	0x48001000
 80026e8:	48000400 	.word	0x48000400
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f2:	4619      	mov	r1, r3
 80026f4:	483c      	ldr	r0, [pc, #240]	; (80027e8 <MX_GPIO_Init+0x3fc>)
 80026f6:	f000 ff67 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 80026fa:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800270c:	230c      	movs	r3, #12
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002714:	4619      	mov	r1, r3
 8002716:	4834      	ldr	r0, [pc, #208]	; (80027e8 <MX_GPIO_Init+0x3fc>)
 8002718:	f000 ff56 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800271c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800272e:	230a      	movs	r3, #10
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f000 ff44 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002746:	2300      	movs	r3, #0
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002752:	4619      	mov	r1, r3
 8002754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002758:	f000 ff36 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800275c:	2301      	movs	r3, #1
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800276c:	2309      	movs	r3, #9
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002774:	4619      	mov	r1, r3
 8002776:	481d      	ldr	r0, [pc, #116]	; (80027ec <MX_GPIO_Init+0x400>)
 8002778:	f000 ff26 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800277c:	2304      	movs	r3, #4
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800278c:	230c      	movs	r3, #12
 800278e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002794:	4619      	mov	r1, r3
 8002796:	4815      	ldr	r0, [pc, #84]	; (80027ec <MX_GPIO_Init+0x400>)
 8002798:	f000 ff16 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800279c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ae:	2307      	movs	r3, #7
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b6:	4619      	mov	r1, r3
 80027b8:	480d      	ldr	r0, [pc, #52]	; (80027f0 <MX_GPIO_Init+0x404>)
 80027ba:	f000 ff05 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027be:	2338      	movs	r3, #56	; 0x38
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ca:	2303      	movs	r3, #3
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ce:	2306      	movs	r3, #6
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d6:	4619      	mov	r1, r3
 80027d8:	4806      	ldr	r0, [pc, #24]	; (80027f4 <MX_GPIO_Init+0x408>)
 80027da:	f000 fef5 	bl	80035c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027de:	bf00      	nop
 80027e0:	3738      	adds	r7, #56	; 0x38
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	48000800 	.word	0x48000800
 80027ec:	48000c00 	.word	0x48000c00
 80027f0:	48001800 	.word	0x48001800
 80027f4:	48000400 	.word	0x48000400

080027f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	//__NOP(); // for debugging
	//Commented out ->Instance
		if (huart->Instance == USART3)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4aa0      	ldr	r2, [pc, #640]	; (8002a88 <HAL_UART_RxCpltCallback+0x290>)
 8002806:	4293      	cmp	r3, r2
 8002808:	f040 813a 	bne.w	8002a80 <HAL_UART_RxCpltCallback+0x288>


	        // RX_Buffer[0] = note number
	        // RX_Buffer[1] = start time upper half, RX_Buffer[2] = start time lower half
	        // RX_Buffer[3] = end time upper half, RX_Buffer[4] = end time lower half
	        int noteNum = RX_Buffer[0];
 800280c:	4b9f      	ldr	r3, [pc, #636]	; (8002a8c <HAL_UART_RxCpltCallback+0x294>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]
	        int start_Time = (RX_Buffer[1] << 8) + RX_Buffer[2];
 8002812:	4b9e      	ldr	r3, [pc, #632]	; (8002a8c <HAL_UART_RxCpltCallback+0x294>)
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	4a9c      	ldr	r2, [pc, #624]	; (8002a8c <HAL_UART_RxCpltCallback+0x294>)
 800281a:	7892      	ldrb	r2, [r2, #2]
 800281c:	4413      	add	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
	        int end_Time = (RX_Buffer[3] << 8) + RX_Buffer[4];
 8002820:	4b9a      	ldr	r3, [pc, #616]	; (8002a8c <HAL_UART_RxCpltCallback+0x294>)
 8002822:	78db      	ldrb	r3, [r3, #3]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	4a99      	ldr	r2, [pc, #612]	; (8002a8c <HAL_UART_RxCpltCallback+0x294>)
 8002828:	7912      	ldrb	r2, [r2, #4]
 800282a:	4413      	add	r3, r2
 800282c:	60bb      	str	r3, [r7, #8]
	        if(noteNum == 1 && start_Time == end_Time){
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10a      	bne.n	800284a <HAL_UART_RxCpltCallback+0x52>
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	d106      	bne.n	800284a <HAL_UART_RxCpltCallback+0x52>
	        	// Starting to send title
	        	reading_title = 1;
 800283c:	4b94      	ldr	r3, [pc, #592]	; (8002a90 <HAL_UART_RxCpltCallback+0x298>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]
	        	title_index = 0;
 8002842:	4b94      	ldr	r3, [pc, #592]	; (8002a94 <HAL_UART_RxCpltCallback+0x29c>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	e026      	b.n	8002898 <HAL_UART_RxCpltCallback+0xa0>
	        }
	        else if(noteNum == 2 && start_Time == end_Time){
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d107      	bne.n	8002860 <HAL_UART_RxCpltCallback+0x68>
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	429a      	cmp	r2, r3
 8002856:	d103      	bne.n	8002860 <HAL_UART_RxCpltCallback+0x68>
	        	// Title done, do other stuff
	        	reading_title = 0;
 8002858:	4b8d      	ldr	r3, [pc, #564]	; (8002a90 <HAL_UART_RxCpltCallback+0x298>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e01b      	b.n	8002898 <HAL_UART_RxCpltCallback+0xa0>
	        }
	        else if(reading_title){
 8002860:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <HAL_UART_RxCpltCallback+0x298>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <HAL_UART_RxCpltCallback+0xa0>
	        	for(int i = 0; i < 5; i++){
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e00c      	b.n	8002888 <HAL_UART_RxCpltCallback+0x90>
	        		title_data[title_index + i] = RX_Buffer[i];
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <HAL_UART_RxCpltCallback+0x29c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	4413      	add	r3, r2
 8002876:	4985      	ldr	r1, [pc, #532]	; (8002a8c <HAL_UART_RxCpltCallback+0x294>)
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	440a      	add	r2, r1
 800287c:	7811      	ldrb	r1, [r2, #0]
 800287e:	4a86      	ldr	r2, [pc, #536]	; (8002a98 <HAL_UART_RxCpltCallback+0x2a0>)
 8002880:	54d1      	strb	r1, [r2, r3]
	        	for(int i = 0; i < 5; i++){
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b04      	cmp	r3, #4
 800288c:	ddef      	ble.n	800286e <HAL_UART_RxCpltCallback+0x76>
	        	}
	        	title_index += 5;
 800288e:	4b81      	ldr	r3, [pc, #516]	; (8002a94 <HAL_UART_RxCpltCallback+0x29c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3305      	adds	r3, #5
 8002894:	4a7f      	ldr	r2, [pc, #508]	; (8002a94 <HAL_UART_RxCpltCallback+0x29c>)
 8002896:	6013      	str	r3, [r2, #0]
	        }
	        // noteNum = 0 and start_Time = end_Time indicates the beginning of a song
	        // noteNum = 255 and start_time = end_Time indicates the end of a song
	        if(noteNum == 3 && start_Time == end_Time){
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d110      	bne.n	80028c0 <HAL_UART_RxCpltCallback+0xc8>
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10c      	bne.n	80028c0 <HAL_UART_RxCpltCallback+0xc8>
	        	song_length = 0;
 80028a6:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <HAL_UART_RxCpltCallback+0x2a4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
	        	note_dataR_len = 0;
 80028ac:	4b7c      	ldr	r3, [pc, #496]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
	        	note_dataL_len = 0;
 80028b2:	4b7c      	ldr	r3, [pc, #496]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
	        	read_notes = 1;
 80028b8:	4b7b      	ldr	r3, [pc, #492]	; (8002aa8 <HAL_UART_RxCpltCallback+0x2b0>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e0da      	b.n	8002a76 <HAL_UART_RxCpltCallback+0x27e>
	        }
	        else if (noteNum == 4 && start_Time == end_Time){
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d150      	bne.n	8002968 <HAL_UART_RxCpltCallback+0x170>
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d14c      	bne.n	8002968 <HAL_UART_RxCpltCallback+0x170>
	        	note_dataR[note_dataR_len][0] = 0;
 80028ce:	4b74      	ldr	r3, [pc, #464]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4976      	ldr	r1, [pc, #472]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
	            note_dataR[note_dataR_len][1] = 0;
 80028e2:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4971      	ldr	r1, [pc, #452]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3304      	adds	r3, #4
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
	            note_dataR[note_dataR_len][2] = 0;
 80028f8:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	496b      	ldr	r1, [pc, #428]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3308      	adds	r3, #8
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
	            note_dataL[note_dataL_len][0] = 0;
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4967      	ldr	r1, [pc, #412]	; (8002ab0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
	            note_dataL[note_dataL_len][1] = 0;
 8002922:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4962      	ldr	r1, [pc, #392]	; (8002ab0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3304      	adds	r3, #4
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
	            note_dataL[note_dataL_len][2] = 0;
 8002938:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	495c      	ldr	r1, [pc, #368]	; (8002ab0 <HAL_UART_RxCpltCallback+0x2b8>)
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	3308      	adds	r3, #8
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
	        	song_length = note_dataR_len + note_dataL_len;
 800294e:	4b54      	ldr	r3, [pc, #336]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4413      	add	r3, r2
 8002958:	4a50      	ldr	r2, [pc, #320]	; (8002a9c <HAL_UART_RxCpltCallback+0x2a4>)
 800295a:	6013      	str	r3, [r2, #0]
	            read_notes = 0;
 800295c:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_UART_RxCpltCallback+0x2b0>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
	            play_notes();
 8002962:	f7ff f9ab 	bl	8001cbc <play_notes>
 8002966:	e086      	b.n	8002a76 <HAL_UART_RxCpltCallback+0x27e>
	        }
	        else if(read_notes){
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <HAL_UART_RxCpltCallback+0x2b0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8082 	beq.w	8002a76 <HAL_UART_RxCpltCallback+0x27e>
	        	if(noteNum >= 60){
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b3b      	cmp	r3, #59	; 0x3b
 8002976:	dd3f      	ble.n	80029f8 <HAL_UART_RxCpltCallback+0x200>
	        		note_dataR[note_dataR_len][0] = noteNum;
 8002978:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	494b      	ldr	r1, [pc, #300]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	601a      	str	r2, [r3, #0]
	        		note_dataR[note_dataR_len][1] = start_Time;
 800298c:	4b44      	ldr	r3, [pc, #272]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4946      	ldr	r1, [pc, #280]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3304      	adds	r3, #4
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]
	        		note_dataR[note_dataR_len][2] = end_Time;
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4941      	ldr	r1, [pc, #260]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3308      	adds	r3, #8
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	601a      	str	r2, [r3, #0]
	        		if(noteNum > highestNote){
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b60      	cmp	r3, #96	; 0x60
 80029bc:	dd0b      	ble.n	80029d6 <HAL_UART_RxCpltCallback+0x1de>
	        			note_dataR[note_dataR_len][4] = 1;
 80029be:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	493a      	ldr	r1, [pc, #232]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3310      	adds	r3, #16
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e00a      	b.n	80029ec <HAL_UART_RxCpltCallback+0x1f4>
	        		}
	        		else{
	        			note_dataR[note_dataR_len][4] = 0;
 80029d6:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4934      	ldr	r1, [pc, #208]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3310      	adds	r3, #16
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
	        		}
	        		note_dataR_len++;
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	4a2b      	ldr	r2, [pc, #172]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e03e      	b.n	8002a76 <HAL_UART_RxCpltCallback+0x27e>
	        	}
	        	else{
	        		note_dataL[note_dataL_len][0] = noteNum;
 80029f8:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	492c      	ldr	r1, [pc, #176]	; (8002ab0 <HAL_UART_RxCpltCallback+0x2b8>)
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	601a      	str	r2, [r3, #0]
	        		note_dataL[note_dataL_len][1] = start_Time;
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4927      	ldr	r1, [pc, #156]	; (8002ab0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	601a      	str	r2, [r3, #0]
	        		note_dataL[note_dataL_len][2] = end_Time;
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4922      	ldr	r1, [pc, #136]	; (8002ab0 <HAL_UART_RxCpltCallback+0x2b8>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3308      	adds	r3, #8
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	601a      	str	r2, [r3, #0]
	        		if(noteNum < lowestNote){
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b23      	cmp	r3, #35	; 0x23
 8002a3c:	dc0b      	bgt.n	8002a56 <HAL_UART_RxCpltCallback+0x25e>
	        			note_dataR[note_dataR_len][4] = 1;
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	491a      	ldr	r1, [pc, #104]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3310      	adds	r3, #16
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	e00a      	b.n	8002a6c <HAL_UART_RxCpltCallback+0x274>
	        		}
	        		else{
	        			note_dataR[note_dataR_len][4] = 0;
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_UART_RxCpltCallback+0x2a8>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4914      	ldr	r1, [pc, #80]	; (8002aac <HAL_UART_RxCpltCallback+0x2b4>)
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	3310      	adds	r3, #16
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
	        		}
	        		note_dataL_len++;
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_UART_RxCpltCallback+0x2ac>)
 8002a74:	6013      	str	r3, [r2, #0]



	         // Similar logic for the last 2 motors using ReceivedData[2] and ReceivedData[3]
	        //memset(RX_Buffer, 0, sizeof(RX_Buffer));
	        HAL_UART_Receive_IT(&huart3, RX_Buffer, sizeof(RX_Buffer));
 8002a76:	2205      	movs	r2, #5
 8002a78:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_UART_RxCpltCallback+0x294>)
 8002a7a:	480e      	ldr	r0, [pc, #56]	; (8002ab4 <HAL_UART_RxCpltCallback+0x2bc>)
 8002a7c:	f004 f85a 	bl	8006b34 <HAL_UART_Receive_IT>
	    }

}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40004800 	.word	0x40004800
 8002a8c:	20000528 	.word	0x20000528
 8002a90:	20008240 	.word	0x20008240
 8002a94:	20008278 	.word	0x20008278
 8002a98:	20008244 	.word	0x20008244
 8002a9c:	20008238 	.word	0x20008238
 8002aa0:	2001bb18 	.word	0x2001bb18
 8002aa4:	20011ed4 	.word	0x20011ed4
 8002aa8:	2000823c 	.word	0x2000823c
 8002aac:	20011ed8 	.word	0x20011ed8
 8002ab0:	20008294 	.word	0x20008294
 8002ab4:	20000494 	.word	0x20000494

08002ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <Error_Handler+0x8>
	...

08002ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <HAL_MspInit+0x44>)
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <HAL_MspInit+0x44>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <HAL_MspInit+0x44>)
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_MspInit+0x44>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_MspInit+0x44>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6593      	str	r3, [r2, #88]	; 0x58
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_MspInit+0x44>)
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000

08002b0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0ae      	sub	sp, #184	; 0xb8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	2294      	movs	r2, #148	; 0x94
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f006 f9f5 	bl	8008f1c <memset>
  if(hi2c->Instance==I2C1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <HAL_I2C_MspInit+0xb0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d13b      	bne.n	8002bb4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b3c:	2340      	movs	r3, #64	; 0x40
 8002b3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 ffc5 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002b54:	f7ff ffb0 	bl	8002ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_I2C_MspInit+0xb4>)
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_I2C_MspInit+0xb4>)
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_I2C_MspInit+0xb4>)
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b78:	2312      	movs	r3, #18
 8002b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b94:	4619      	mov	r1, r3
 8002b96:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <HAL_I2C_MspInit+0xb8>)
 8002b98:	f000 fd16 	bl	80035c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_I2C_MspInit+0xb4>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_I2C_MspInit+0xb4>)
 8002ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_I2C_MspInit+0xb4>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bb4:	bf00      	nop
 8002bb6:	37b8      	adds	r7, #184	; 0xb8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40005400 	.word	0x40005400
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	48000400 	.word	0x48000400

08002bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b090      	sub	sp, #64	; 0x40
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d131      	bne.n	8002c4e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bea:	4b6d      	ldr	r3, [pc, #436]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	4a6c      	ldr	r2, [pc, #432]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c02:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	4a66      	ldr	r2, [pc, #408]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c0e:	4b64      	ldr	r3, [pc, #400]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c34:	4619      	mov	r1, r3
 8002c36:	485b      	ldr	r0, [pc, #364]	; (8002da4 <HAL_TIM_Base_MspInit+0x1dc>)
 8002c38:	f000 fcc6 	bl	80035c8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2104      	movs	r1, #4
 8002c40:	201c      	movs	r0, #28
 8002c42:	f000 fbd0 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c46:	201c      	movs	r0, #28
 8002c48:	f000 fbe9 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c4c:	e0a3      	b.n	8002d96 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM3)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a55      	ldr	r2, [pc, #340]	; (8002da8 <HAL_TIM_Base_MspInit+0x1e0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d14c      	bne.n	8002cf2 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c58:	4b51      	ldr	r3, [pc, #324]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	4a50      	ldr	r2, [pc, #320]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	6593      	str	r3, [r2, #88]	; 0x58
 8002c64:	4b4e      	ldr	r3, [pc, #312]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	623b      	str	r3, [r7, #32]
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c70:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	4a4a      	ldr	r2, [pc, #296]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c76:	f043 0302 	orr.w	r3, r3, #2
 8002c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7c:	4b48      	ldr	r3, [pc, #288]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c88:	4b45      	ldr	r3, [pc, #276]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	4a44      	ldr	r2, [pc, #272]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c94:	4b42      	ldr	r3, [pc, #264]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb8:	4619      	mov	r1, r3
 8002cba:	483a      	ldr	r0, [pc, #232]	; (8002da4 <HAL_TIM_Base_MspInit+0x1dc>)
 8002cbc:	f000 fc84 	bl	80035c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4834      	ldr	r0, [pc, #208]	; (8002dac <HAL_TIM_Base_MspInit+0x1e4>)
 8002cdc:	f000 fc74 	bl	80035c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2105      	movs	r1, #5
 8002ce4:	201d      	movs	r0, #29
 8002ce6:	f000 fb7e 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cea:	201d      	movs	r0, #29
 8002cec:	f000 fb97 	bl	800341e <HAL_NVIC_EnableIRQ>
}
 8002cf0:	e051      	b.n	8002d96 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM4)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2e      	ldr	r2, [pc, #184]	; (8002db0 <HAL_TIM_Base_MspInit+0x1e8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d14c      	bne.n	8002d96 <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	6593      	str	r3, [r2, #88]	; 0x58
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002d32:	f043 0310 	orr.w	r3, r3, #16
 8002d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d56:	2302      	movs	r3, #2
 8002d58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4814      	ldr	r0, [pc, #80]	; (8002db4 <HAL_TIM_Base_MspInit+0x1ec>)
 8002d62:	f000 fc31 	bl	80035c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d66:	2301      	movs	r3, #1
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d76:	2302      	movs	r3, #2
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480d      	ldr	r0, [pc, #52]	; (8002db8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002d82:	f000 fc21 	bl	80035c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2103      	movs	r1, #3
 8002d8a:	201e      	movs	r0, #30
 8002d8c:	f000 fb2b 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d90:	201e      	movs	r0, #30
 8002d92:	f000 fb44 	bl	800341e <HAL_NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3740      	adds	r7, #64	; 0x40
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	48000400 	.word	0x48000400
 8002da8:	40000400 	.word	0x40000400
 8002dac:	48000800 	.word	0x48000800
 8002db0:	40000800 	.word	0x40000800
 8002db4:	48000c00 	.word	0x48000c00
 8002db8:	48001000 	.word	0x48001000

08002dbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_TIM_PWM_MspInit+0x38>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10b      	bne.n	8002de6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dd4:	f043 0308 	orr.w	r3, r3, #8
 8002dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <HAL_TIM_MspPostInit+0x64>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d11c      	bne.n	8002e58 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_TIM_MspPostInit+0x68>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <HAL_TIM_MspPostInit+0x68>)
 8002e24:	f043 0320 	orr.w	r3, r3, #32
 8002e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_TIM_MspPostInit+0x68>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4619      	mov	r1, r3
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <HAL_TIM_MspPostInit+0x6c>)
 8002e54:	f000 fbb8 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002e58:	bf00      	nop
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40021000 	.word	0x40021000
 8002e68:	48001400 	.word	0x48001400

08002e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0b0      	sub	sp, #192	; 0xc0
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e84:	f107 0318 	add.w	r3, r7, #24
 8002e88:	2294      	movs	r2, #148	; 0x94
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f006 f845 	bl	8008f1c <memset>
  if(huart->Instance==USART2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4a      	ldr	r2, [pc, #296]	; (8002fc0 <HAL_UART_MspInit+0x154>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d143      	bne.n	8002f24 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ea4:	f107 0318 	add.w	r3, r7, #24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fe15 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002eb4:	f7ff fe00 	bl	8002ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eb8:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4a41      	ldr	r2, [pc, #260]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed0:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002ed6:	f043 0308 	orr.w	r3, r3, #8
 8002eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002ee8:	2360      	movs	r3, #96	; 0x60
 8002eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f00:	2307      	movs	r3, #7
 8002f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	482e      	ldr	r0, [pc, #184]	; (8002fc8 <HAL_UART_MspInit+0x15c>)
 8002f0e:	f000 fb5b 	bl	80035c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	2026      	movs	r0, #38	; 0x26
 8002f18:	f000 fa65 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f1c:	2026      	movs	r0, #38	; 0x26
 8002f1e:	f000 fa7e 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f22:	e048      	b.n	8002fb6 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_UART_MspInit+0x160>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d143      	bne.n	8002fb6 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f32:	2300      	movs	r3, #0
 8002f34:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f36:	f107 0318 	add.w	r3, r7, #24
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 fdcc 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002f46:	f7ff fdb7 	bl	8002ab8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	6593      	str	r3, [r2, #88]	; 0x58
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002f68:	f043 0308 	orr.w	r3, r3, #8
 8002f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_UART_MspInit+0x158>)
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f94:	2307      	movs	r3, #7
 8002f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <HAL_UART_MspInit+0x15c>)
 8002fa2:	f000 fb11 	bl	80035c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2100      	movs	r1, #0
 8002faa:	2027      	movs	r0, #39	; 0x27
 8002fac:	f000 fa1b 	bl	80033e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fb0:	2027      	movs	r0, #39	; 0x27
 8002fb2:	f000 fa34 	bl	800341e <HAL_NVIC_EnableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	37c0      	adds	r7, #192	; 0xc0
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	48000c00 	.word	0x48000c00
 8002fcc:	40004800 	.word	0x40004800

08002fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <NMI_Handler+0x4>

08002fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fda:	e7fe      	b.n	8002fda <HardFault_Handler+0x4>

08002fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe0:	e7fe      	b.n	8002fe0 <MemManage_Handler+0x4>

08002fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fe6:	e7fe      	b.n	8002fe6 <BusFault_Handler+0x4>

08002fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fec:	e7fe      	b.n	8002fec <UsageFault_Handler+0x4>

08002fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800301c:	f000 f8c4 	bl	80031a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}

08003024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <TIM2_IRQHandler+0x10>)
 800302a:	f002 fcc1 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200002d0 	.word	0x200002d0

08003038 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <TIM3_IRQHandler+0x10>)
 800303e:	f002 fcb7 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	2000031c 	.word	0x2000031c

0800304c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <TIM4_IRQHandler+0x10>)
 8003052:	f002 fcad 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000368 	.word	0x20000368

08003060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <USART2_IRQHandler+0x10>)
 8003066:	f003 fdb1 	bl	8006bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000400 	.word	0x20000400

08003074 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <USART3_IRQHandler+0x10>)
 800307a:	f003 fda7 	bl	8006bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000494 	.word	0x20000494

08003088 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <SystemInit+0x20>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <SystemInit+0x20>)
 8003094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030b0:	f7ff ffea 	bl	8003088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b4:	480c      	ldr	r0, [pc, #48]	; (80030e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80030b6:	490d      	ldr	r1, [pc, #52]	; (80030ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <LoopForever+0xe>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030bc:	e002      	b.n	80030c4 <LoopCopyDataInit>

080030be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c2:	3304      	adds	r3, #4

080030c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c8:	d3f9      	bcc.n	80030be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030cc:	4c0a      	ldr	r4, [pc, #40]	; (80030f8 <LoopForever+0x16>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d0:	e001      	b.n	80030d6 <LoopFillZerobss>

080030d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d4:	3204      	adds	r2, #4

080030d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d8:	d3fb      	bcc.n	80030d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030da:	f005 ff27 	bl	8008f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030de:	f7fe fec7 	bl	8001e70 <main>

080030e2 <LoopForever>:

LoopForever:
    b LoopForever
 80030e2:	e7fe      	b.n	80030e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80030e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ec:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80030f0:	08009110 	.word	0x08009110
  ldr r2, =_sbss
 80030f4:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80030f8:	20023838 	.word	0x20023838

080030fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030fc:	e7fe      	b.n	80030fc <ADC1_IRQHandler>

080030fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003108:	2003      	movs	r0, #3
 800310a:	f000 f961 	bl	80033d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800310e:	2000      	movs	r0, #0
 8003110:	f000 f80e 	bl	8003130 <HAL_InitTick>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	71fb      	strb	r3, [r7, #7]
 800311e:	e001      	b.n	8003124 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003120:	f7ff fcd0 	bl	8002ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003124:	79fb      	ldrb	r3, [r7, #7]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <HAL_InitTick+0x6c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d023      	beq.n	800318c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003144:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <HAL_InitTick+0x70>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b14      	ldr	r3, [pc, #80]	; (800319c <HAL_InitTick+0x6c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003152:	fbb3 f3f1 	udiv	r3, r3, r1
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f96d 	bl	800343a <HAL_SYSTICK_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d809      	bhi.n	8003180 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800316c:	2200      	movs	r2, #0
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f000 f937 	bl	80033e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003178:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <HAL_InitTick+0x74>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e007      	b.n	8003190 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	e004      	b.n	8003190 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	e001      	b.n	8003190 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000258 	.word	0x20000258
 80031a0:	20000250 	.word	0x20000250
 80031a4:	20000254 	.word	0x20000254

080031a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_IncTick+0x20>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_IncTick+0x24>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_IncTick+0x24>)
 80031ba:	6013      	str	r3, [r2, #0]
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000258 	.word	0x20000258
 80031cc:	20023834 	.word	0x20023834

080031d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_GetTick+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20023834 	.word	0x20023834

080031e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f0:	f7ff ffee 	bl	80031d0 <HAL_GetTick>
 80031f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d005      	beq.n	800320e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_Delay+0x44>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800320e:	bf00      	nop
 8003210:	f7ff ffde 	bl	80031d0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d8f7      	bhi.n	8003210 <HAL_Delay+0x28>
  {
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000258 	.word	0x20000258

08003230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800325c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003262:	4a04      	ldr	r2, [pc, #16]	; (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	60d3      	str	r3, [r2, #12]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db0b      	blt.n	80032be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4907      	ldr	r1, [pc, #28]	; (80032cc <__NVIC_EnableIRQ+0x38>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	db0a      	blt.n	80032fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	490c      	ldr	r1, [pc, #48]	; (800331c <__NVIC_SetPriority+0x4c>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	0112      	lsls	r2, r2, #4
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	440b      	add	r3, r1
 80032f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f8:	e00a      	b.n	8003310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4908      	ldr	r1, [pc, #32]	; (8003320 <__NVIC_SetPriority+0x50>)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3b04      	subs	r3, #4
 8003308:	0112      	lsls	r2, r2, #4
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	440b      	add	r3, r1
 800330e:	761a      	strb	r2, [r3, #24]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000e100 	.word	0xe000e100
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f1c3 0307 	rsb	r3, r3, #7
 800333e:	2b04      	cmp	r3, #4
 8003340:	bf28      	it	cs
 8003342:	2304      	movcs	r3, #4
 8003344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3304      	adds	r3, #4
 800334a:	2b06      	cmp	r3, #6
 800334c:	d902      	bls.n	8003354 <NVIC_EncodePriority+0x30>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3b03      	subs	r3, #3
 8003352:	e000      	b.n	8003356 <NVIC_EncodePriority+0x32>
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	401a      	ands	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800336c:	f04f 31ff 	mov.w	r1, #4294967295
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43d9      	mvns	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	4313      	orrs	r3, r2
         );
}
 800337e:	4618      	mov	r0, r3
 8003380:	3724      	adds	r7, #36	; 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800339c:	d301      	bcc.n	80033a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339e:	2301      	movs	r3, #1
 80033a0:	e00f      	b.n	80033c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <SysTick_Config+0x40>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033aa:	210f      	movs	r1, #15
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	f7ff ff8e 	bl	80032d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <SysTick_Config+0x40>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ba:	4b04      	ldr	r3, [pc, #16]	; (80033cc <SysTick_Config+0x40>)
 80033bc:	2207      	movs	r2, #7
 80033be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	e000e010 	.word	0xe000e010

080033d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ff29 	bl	8003230 <__NVIC_SetPriorityGrouping>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033f8:	f7ff ff3e 	bl	8003278 <__NVIC_GetPriorityGrouping>
 80033fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	f7ff ff8e 	bl	8003324 <NVIC_EncodePriority>
 8003408:	4602      	mov	r2, r0
 800340a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff5d 	bl	80032d0 <__NVIC_SetPriority>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff31 	bl	8003294 <__NVIC_EnableIRQ>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffa2 	bl	800338c <SysTick_Config>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d008      	beq.n	800347c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2204      	movs	r2, #4
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e040      	b.n	80034fe <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 020e 	bic.w	r2, r2, #14
 800348a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003496:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800349a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f003 021c 	and.w	r2, r3, #28
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00c      	beq.n	80034ec <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034ea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d005      	beq.n	800352e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2204      	movs	r2, #4
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e047      	b.n	80035be <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 020e 	bic.w	r2, r2, #14
 800353c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800355c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f003 021c 	and.w	r2, r3, #28
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2101      	movs	r1, #1
 800356c:	fa01 f202 	lsl.w	r2, r1, r2
 8003570:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800357a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00c      	beq.n	800359e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003592:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800359c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
    }
  }
  return status;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d6:	e166      	b.n	80038a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8158 	beq.w	80038a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d005      	beq.n	8003608 <HAL_GPIO_Init+0x40>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d130      	bne.n	800366a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800363e:	2201      	movs	r2, #1
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	f003 0201 	and.w	r2, r3, #1
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b03      	cmp	r3, #3
 8003674:	d017      	beq.n	80036a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d123      	bne.n	80036fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	08da      	lsrs	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3208      	adds	r2, #8
 80036f4:	6939      	ldr	r1, [r7, #16]
 80036f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	2203      	movs	r2, #3
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0203 	and.w	r2, r3, #3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80b2 	beq.w	80038a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373c:	4b61      	ldr	r3, [pc, #388]	; (80038c4 <HAL_GPIO_Init+0x2fc>)
 800373e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003740:	4a60      	ldr	r2, [pc, #384]	; (80038c4 <HAL_GPIO_Init+0x2fc>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6613      	str	r3, [r2, #96]	; 0x60
 8003748:	4b5e      	ldr	r3, [pc, #376]	; (80038c4 <HAL_GPIO_Init+0x2fc>)
 800374a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003754:	4a5c      	ldr	r2, [pc, #368]	; (80038c8 <HAL_GPIO_Init+0x300>)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	220f      	movs	r2, #15
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800377e:	d02b      	beq.n	80037d8 <HAL_GPIO_Init+0x210>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a52      	ldr	r2, [pc, #328]	; (80038cc <HAL_GPIO_Init+0x304>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d025      	beq.n	80037d4 <HAL_GPIO_Init+0x20c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a51      	ldr	r2, [pc, #324]	; (80038d0 <HAL_GPIO_Init+0x308>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d01f      	beq.n	80037d0 <HAL_GPIO_Init+0x208>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a50      	ldr	r2, [pc, #320]	; (80038d4 <HAL_GPIO_Init+0x30c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d019      	beq.n	80037cc <HAL_GPIO_Init+0x204>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a4f      	ldr	r2, [pc, #316]	; (80038d8 <HAL_GPIO_Init+0x310>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_GPIO_Init+0x200>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a4e      	ldr	r2, [pc, #312]	; (80038dc <HAL_GPIO_Init+0x314>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00d      	beq.n	80037c4 <HAL_GPIO_Init+0x1fc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a4d      	ldr	r2, [pc, #308]	; (80038e0 <HAL_GPIO_Init+0x318>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <HAL_GPIO_Init+0x1f8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a4c      	ldr	r2, [pc, #304]	; (80038e4 <HAL_GPIO_Init+0x31c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_GPIO_Init+0x1f4>
 80037b8:	2307      	movs	r3, #7
 80037ba:	e00e      	b.n	80037da <HAL_GPIO_Init+0x212>
 80037bc:	2308      	movs	r3, #8
 80037be:	e00c      	b.n	80037da <HAL_GPIO_Init+0x212>
 80037c0:	2306      	movs	r3, #6
 80037c2:	e00a      	b.n	80037da <HAL_GPIO_Init+0x212>
 80037c4:	2305      	movs	r3, #5
 80037c6:	e008      	b.n	80037da <HAL_GPIO_Init+0x212>
 80037c8:	2304      	movs	r3, #4
 80037ca:	e006      	b.n	80037da <HAL_GPIO_Init+0x212>
 80037cc:	2303      	movs	r3, #3
 80037ce:	e004      	b.n	80037da <HAL_GPIO_Init+0x212>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e002      	b.n	80037da <HAL_GPIO_Init+0x212>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_GPIO_Init+0x212>
 80037d8:	2300      	movs	r3, #0
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	f002 0203 	and.w	r2, r2, #3
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	4093      	lsls	r3, r2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ea:	4937      	ldr	r1, [pc, #220]	; (80038c8 <HAL_GPIO_Init+0x300>)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037f8:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_GPIO_Init+0x320>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800381c:	4a32      	ldr	r2, [pc, #200]	; (80038e8 <HAL_GPIO_Init+0x320>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003822:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_GPIO_Init+0x320>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003846:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <HAL_GPIO_Init+0x320>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800384c:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_GPIO_Init+0x320>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_GPIO_Init+0x320>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <HAL_GPIO_Init+0x320>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800389a:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <HAL_GPIO_Init+0x320>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3301      	adds	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f ae91 	bne.w	80035d8 <HAL_GPIO_Init+0x10>
  }
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010000 	.word	0x40010000
 80038cc:	48000400 	.word	0x48000400
 80038d0:	48000800 	.word	0x48000800
 80038d4:	48000c00 	.word	0x48000c00
 80038d8:	48001000 	.word	0x48001000
 80038dc:	48001400 	.word	0x48001400
 80038e0:	48001800 	.word	0x48001800
 80038e4:	48001c00 	.word	0x48001c00
 80038e8:	40010400 	.word	0x40010400

080038ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
 80038f8:	4613      	mov	r3, r2
 80038fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038fc:	787b      	ldrb	r3, [r7, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003908:	e002      	b.n	8003910 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e08d      	b.n	8003a4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff f8e2 	bl	8002b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800396c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800397c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	e006      	b.n	80039a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d108      	bne.n	80039be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	e007      	b.n	80039ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69d9      	ldr	r1, [r3, #28]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d138      	bne.n	8003ada <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e032      	b.n	8003adc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2224      	movs	r2, #36	; 0x24
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aa4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6819      	ldr	r1, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d139      	bne.n	8003b72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e033      	b.n	8003b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2224      	movs	r2, #36	; 0x24
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b90:	d102      	bne.n	8003b98 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b96:	e00b      	b.n	8003bb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba6:	d102      	bne.n	8003bae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bac:	e000      	b.n	8003bb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003bae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40007000 	.word	0x40007000

08003bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d141      	bne.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bce:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d131      	bne.n	8003c40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bdc:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be2:	4a46      	ldr	r2, [pc, #280]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bec:	4b43      	ldr	r3, [pc, #268]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bf4:	4a41      	ldr	r2, [pc, #260]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003bfc:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2232      	movs	r2, #50	; 0x32
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	4a3f      	ldr	r2, [pc, #252]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	0c9b      	lsrs	r3, r3, #18
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c12:	e002      	b.n	8003c1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c26:	d102      	bne.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f2      	bne.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c2e:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d158      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e057      	b.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c40:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c46:	4a2d      	ldr	r2, [pc, #180]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c50:	e04d      	b.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c58:	d141      	bne.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c5a:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c66:	d131      	bne.n	8003ccc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6e:	4a23      	ldr	r2, [pc, #140]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c80:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2232      	movs	r2, #50	; 0x32
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	0c9b      	lsrs	r3, r3, #18
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c9e:	e002      	b.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb2:	d102      	bne.n	8003cba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f2      	bne.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc6:	d112      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e011      	b.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cdc:	e007      	b.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cde:	4b07      	ldr	r3, [pc, #28]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	20000250 	.word	0x20000250
 8003d04:	431bde83 	.word	0x431bde83

08003d08 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d16:	6053      	str	r3, [r2, #4]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40007000 	.word	0x40007000

08003d28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f000 bc08 	b.w	800454c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3c:	4b96      	ldr	r3, [pc, #600]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d46:	4b94      	ldr	r3, [pc, #592]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80e4 	beq.w	8003f26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4c>
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	f040 808b 	bne.w	8003e82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	f040 8087 	bne.w	8003e82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d74:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_OscConfig+0x64>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e3df      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	4b81      	ldr	r3, [pc, #516]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_RCC_OscConfig+0x7e>
 8003d9c:	4b7e      	ldr	r3, [pc, #504]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da4:	e005      	b.n	8003db2 <HAL_RCC_OscConfig+0x8a>
 8003da6:	4b7c      	ldr	r3, [pc, #496]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d223      	bcs.n	8003dfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fdcc 	bl	8004958 <RCC_SetFlashLatencyFromMSIRange>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e3c0      	b.n	800454c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dca:	4b73      	ldr	r3, [pc, #460]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a72      	ldr	r2, [pc, #456]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b70      	ldr	r3, [pc, #448]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	496d      	ldr	r1, [pc, #436]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de8:	4b6b      	ldr	r3, [pc, #428]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	4968      	ldr	r1, [pc, #416]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]
 8003dfc:	e025      	b.n	8003e4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dfe:	4b66      	ldr	r3, [pc, #408]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a65      	ldr	r2, [pc, #404]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4960      	ldr	r1, [pc, #384]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1c:	4b5e      	ldr	r3, [pc, #376]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	495b      	ldr	r1, [pc, #364]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fd8c 	bl	8004958 <RCC_SetFlashLatencyFromMSIRange>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e380      	b.n	800454c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e4a:	f000 fcc1 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b51      	ldr	r3, [pc, #324]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	4950      	ldr	r1, [pc, #320]	; (8003f9c <HAL_RCC_OscConfig+0x274>)
 8003e5c:	5ccb      	ldrb	r3, [r1, r3]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	4a4e      	ldr	r2, [pc, #312]	; (8003fa0 <HAL_RCC_OscConfig+0x278>)
 8003e68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e6a:	4b4e      	ldr	r3, [pc, #312]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff f95e 	bl	8003130 <HAL_InitTick>
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d052      	beq.n	8003f24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	e364      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d032      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e8a:	4b43      	ldr	r3, [pc, #268]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e96:	f7ff f99b 	bl	80031d0 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e9e:	f7ff f997 	bl	80031d0 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e34d      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb0:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a35      	ldr	r2, [pc, #212]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	f043 0308 	orr.w	r3, r3, #8
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4930      	ldr	r1, [pc, #192]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	492b      	ldr	r1, [pc, #172]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
 8003eee:	e01a      	b.n	8003f26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003efc:	f7ff f968 	bl	80031d0 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f04:	f7ff f964 	bl	80031d0 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e31a      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1dc>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d073      	beq.n	800401a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_OscConfig+0x21c>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d10e      	bne.n	8003f5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d10b      	bne.n	8003f5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d063      	beq.n	8004018 <HAL_RCC_OscConfig+0x2f0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d15f      	bne.n	8004018 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e2f7      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x24c>
 8003f66:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e025      	b.n	8003fc0 <HAL_RCC_OscConfig+0x298>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f7c:	d114      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x280>
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a02      	ldr	r2, [pc, #8]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e013      	b.n	8003fc0 <HAL_RCC_OscConfig+0x298>
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	08009090 	.word	0x08009090
 8003fa0:	20000250 	.word	0x20000250
 8003fa4:	20000254 	.word	0x20000254
 8003fa8:	4ba0      	ldr	r3, [pc, #640]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a9f      	ldr	r2, [pc, #636]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b9d      	ldr	r3, [pc, #628]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a9c      	ldr	r2, [pc, #624]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d013      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7ff f902 	bl	80031d0 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7ff f8fe 	bl	80031d0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e2b4      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe2:	4b92      	ldr	r3, [pc, #584]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x2a8>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7ff f8ee 	bl	80031d0 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7ff f8ea 	bl	80031d0 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e2a0      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800400a:	4b88      	ldr	r3, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x2d0>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d060      	beq.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b04      	cmp	r3, #4
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x310>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d119      	bne.n	8004066 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d116      	bne.n	8004066 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004038:	4b7c      	ldr	r3, [pc, #496]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x328>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e27d      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004050:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	4973      	ldr	r1, [pc, #460]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004064:	e040      	b.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d023      	beq.n	80040b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406e:	4b6f      	ldr	r3, [pc, #444]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6e      	ldr	r2, [pc, #440]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7ff f8a9 	bl	80031d0 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004082:	f7ff f8a5 	bl	80031d0 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e25b      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004094:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a0:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	061b      	lsls	r3, r3, #24
 80040ae:	495f      	ldr	r1, [pc, #380]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
 80040b4:	e018      	b.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b6:	4b5d      	ldr	r3, [pc, #372]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a5c      	ldr	r2, [pc, #368]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7ff f885 	bl	80031d0 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ca:	f7ff f881 	bl	80031d0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e237      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040dc:	4b53      	ldr	r3, [pc, #332]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d03c      	beq.n	800416e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01c      	beq.n	8004136 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fc:	4b4b      	ldr	r3, [pc, #300]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004102:	4a4a      	ldr	r2, [pc, #296]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7ff f860 	bl	80031d0 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004114:	f7ff f85c 	bl	80031d0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e212      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ef      	beq.n	8004114 <HAL_RCC_OscConfig+0x3ec>
 8004134:	e01b      	b.n	800416e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	4a3b      	ldr	r2, [pc, #236]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7ff f843 	bl	80031d0 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414e:	f7ff f83f 	bl	80031d0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1f5      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ef      	bne.n	800414e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 80a6 	beq.w	80042c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417c:	2300      	movs	r3, #0
 800417e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004180:	4b2a      	ldr	r3, [pc, #168]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a26      	ldr	r2, [pc, #152]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a8:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_RCC_OscConfig+0x508>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d118      	bne.n	80041e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <HAL_RCC_OscConfig+0x508>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_RCC_OscConfig+0x508>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c0:	f7ff f806 	bl	80031d0 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7ff f802 	bl	80031d0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e1b8      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <HAL_RCC_OscConfig+0x508>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d108      	bne.n	8004200 <HAL_RCC_OscConfig+0x4d8>
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	4a0d      	ldr	r2, [pc, #52]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041fe:	e029      	b.n	8004254 <HAL_RCC_OscConfig+0x52c>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b05      	cmp	r3, #5
 8004206:	d115      	bne.n	8004234 <HAL_RCC_OscConfig+0x50c>
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	4a07      	ldr	r2, [pc, #28]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	4a03      	ldr	r2, [pc, #12]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004228:	e014      	b.n	8004254 <HAL_RCC_OscConfig+0x52c>
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
 8004230:	40007000 	.word	0x40007000
 8004234:	4b9d      	ldr	r3, [pc, #628]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	4a9c      	ldr	r2, [pc, #624]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004244:	4b99      	ldr	r3, [pc, #612]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	4a98      	ldr	r2, [pc, #608]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800424c:	f023 0304 	bic.w	r3, r3, #4
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d016      	beq.n	800428a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fe ffb8 	bl	80031d0 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fe ffb4 	bl	80031d0 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e168      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427a:	4b8c      	ldr	r3, [pc, #560]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ed      	beq.n	8004264 <HAL_RCC_OscConfig+0x53c>
 8004288:	e015      	b.n	80042b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fe ffa1 	bl	80031d0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fe ff9d 	bl	80031d0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e151      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a8:	4b80      	ldr	r3, [pc, #512]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ed      	bne.n	8004292 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b6:	7ffb      	ldrb	r3, [r7, #31]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042bc:	4b7b      	ldr	r3, [pc, #492]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	4a7a      	ldr	r2, [pc, #488]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d03c      	beq.n	800434e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01c      	beq.n	8004316 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042dc:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e2:	4a72      	ldr	r2, [pc, #456]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fe ff70 	bl	80031d0 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042f4:	f7fe ff6c 	bl	80031d0 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e122      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004306:	4b69      	ldr	r3, [pc, #420]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ef      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5cc>
 8004314:	e01b      	b.n	800434e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004316:	4b65      	ldr	r3, [pc, #404]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004318:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800431c:	4a63      	ldr	r2, [pc, #396]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004326:	f7fe ff53 	bl	80031d0 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800432e:	f7fe ff4f 	bl	80031d0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e105      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004340:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1ef      	bne.n	800432e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80f9 	beq.w	800454a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	2b02      	cmp	r3, #2
 800435e:	f040 80cf 	bne.w	8004500 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004362:	4b52      	ldr	r3, [pc, #328]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f003 0203 	and.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	429a      	cmp	r2, r3
 8004374:	d12c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	3b01      	subs	r3, #1
 8004382:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d123      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d11b      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d113      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	3b01      	subs	r3, #1
 80043b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d109      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	3b01      	subs	r3, #1
 80043ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d071      	beq.n	80044b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d068      	beq.n	80044a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043d6:	4b35      	ldr	r3, [pc, #212]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043e2:	4b32      	ldr	r3, [pc, #200]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e0ac      	b.n	800454c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2d      	ldr	r2, [pc, #180]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80043f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043fe:	f7fe fee7 	bl	80031d0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004406:	f7fe fee3 	bl	80031d0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e099      	b.n	800454c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004418:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_RCC_OscConfig+0x788>)
 800442a:	4013      	ands	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004434:	3a01      	subs	r2, #1
 8004436:	0112      	lsls	r2, r2, #4
 8004438:	4311      	orrs	r1, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800443e:	0212      	lsls	r2, r2, #8
 8004440:	4311      	orrs	r1, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004446:	0852      	lsrs	r2, r2, #1
 8004448:	3a01      	subs	r2, #1
 800444a:	0552      	lsls	r2, r2, #21
 800444c:	4311      	orrs	r1, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004452:	0852      	lsrs	r2, r2, #1
 8004454:	3a01      	subs	r2, #1
 8004456:	0652      	lsls	r2, r2, #25
 8004458:	4311      	orrs	r1, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800445e:	06d2      	lsls	r2, r2, #27
 8004460:	430a      	orrs	r2, r1
 8004462:	4912      	ldr	r1, [pc, #72]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004464:	4313      	orrs	r3, r2
 8004466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004468:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0f      	ldr	r2, [pc, #60]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800446e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004474:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004480:	f7fe fea6 	bl	80031d0 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fe fea2 	bl	80031d0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e058      	b.n	800454c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	4b04      	ldr	r3, [pc, #16]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a6:	e050      	b.n	800454a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e04f      	b.n	800454c <HAL_RCC_OscConfig+0x824>
 80044ac:	40021000 	.word	0x40021000
 80044b0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b4:	4b27      	ldr	r3, [pc, #156]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d144      	bne.n	800454a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044c0:	4b24      	ldr	r3, [pc, #144]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044cc:	4b21      	ldr	r3, [pc, #132]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a20      	ldr	r2, [pc, #128]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044d8:	f7fe fe7a 	bl	80031d0 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fe fe76 	bl	80031d0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e02c      	b.n	800454c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x7b8>
 80044fe:	e024      	b.n	800454a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d01f      	beq.n	8004546 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 800450c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fe fe5d 	bl	80031d0 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451a:	f7fe fe59 	bl	80031d0 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e00f      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f0      	bne.n	800451a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	4905      	ldr	r1, [pc, #20]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCC_OscConfig+0x830>)
 8004540:	4013      	ands	r3, r2
 8004542:	60cb      	str	r3, [r1, #12]
 8004544:	e001      	b.n	800454a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	feeefffc 	.word	0xfeeefffc

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e11d      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004574:	4b90      	ldr	r3, [pc, #576]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d910      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b8d      	ldr	r3, [pc, #564]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 020f 	bic.w	r2, r3, #15
 800458a:	498b      	ldr	r1, [pc, #556]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b89      	ldr	r3, [pc, #548]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e105      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d010      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	4b81      	ldr	r3, [pc, #516]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045bc:	429a      	cmp	r2, r3
 80045be:	d908      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4b7e      	ldr	r3, [pc, #504]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	497b      	ldr	r1, [pc, #492]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d079      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d11e      	bne.n	8004624 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e6:	4b75      	ldr	r3, [pc, #468]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e0dc      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80045f6:	f000 fa09 	bl	8004a0c <RCC_GetSysClockFreqFromPLLSource>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4a70      	ldr	r2, [pc, #448]	; (80047c0 <HAL_RCC_ClockConfig+0x264>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d946      	bls.n	8004690 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004602:	4b6e      	ldr	r3, [pc, #440]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d140      	bne.n	8004690 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800460e:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004616:	4a69      	ldr	r2, [pc, #420]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e035      	b.n	8004690 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d107      	bne.n	800463c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462c:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d115      	bne.n	8004664 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0b9      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004644:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0ad      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0a5      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004664:	f000 f8b4 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8004668:	4603      	mov	r3, r0
 800466a:	4a55      	ldr	r2, [pc, #340]	; (80047c0 <HAL_RCC_ClockConfig+0x264>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d90f      	bls.n	8004690 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004670:	4b52      	ldr	r3, [pc, #328]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800467c:	4b4f      	ldr	r3, [pc, #316]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004684:	4a4d      	ldr	r2, [pc, #308]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004690:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 0203 	bic.w	r2, r3, #3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4947      	ldr	r1, [pc, #284]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a2:	f7fe fd95 	bl	80031d0 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046aa:	f7fe fd91 	bl	80031d0 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e077      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c0:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 020c 	and.w	r2, r3, #12
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d1eb      	bne.n	80046aa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b80      	cmp	r3, #128	; 0x80
 80046d6:	d105      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046d8:	4b38      	ldr	r3, [pc, #224]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a37      	ldr	r2, [pc, #220]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d208      	bcs.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b2e      	ldr	r3, [pc, #184]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	492b      	ldr	r1, [pc, #172]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004712:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d210      	bcs.n	8004742 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 020f 	bic.w	r2, r3, #15
 8004728:	4923      	ldr	r1, [pc, #140]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	4313      	orrs	r3, r2
 800472e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004730:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d001      	beq.n	8004742 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e036      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800474e:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	4918      	ldr	r1, [pc, #96]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800476c:	4b13      	ldr	r3, [pc, #76]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4910      	ldr	r1, [pc, #64]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004780:	f000 f826 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	490c      	ldr	r1, [pc, #48]	; (80047c4 <HAL_RCC_ClockConfig+0x268>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <HAL_RCC_ClockConfig+0x26c>)
 800479e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <HAL_RCC_ClockConfig+0x270>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fcc3 	bl	8003130 <HAL_InitTick>
 80047aa:	4603      	mov	r3, r0
 80047ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40022000 	.word	0x40022000
 80047bc:	40021000 	.word	0x40021000
 80047c0:	04c4b400 	.word	0x04c4b400
 80047c4:	08009090 	.word	0x08009090
 80047c8:	20000250 	.word	0x20000250
 80047cc:	20000254 	.word	0x20000254

080047d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	; 0x24
 80047d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047de:	4b3e      	ldr	r3, [pc, #248]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e8:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x34>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d121      	bne.n	8004842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d11e      	bne.n	8004842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004804:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004810:	4b31      	ldr	r3, [pc, #196]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	e005      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004820:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800482c:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004840:	e00a      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d102      	bne.n	800484e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004848:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e004      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d101      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004854:	4b23      	ldr	r3, [pc, #140]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d134      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800485e:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d003      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0xa6>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d003      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0xac>
 8004874:	e005      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004878:	617b      	str	r3, [r7, #20]
      break;
 800487a:	e005      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800487e:	617b      	str	r3, [r7, #20]
      break;
 8004880:	e002      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	617b      	str	r3, [r7, #20]
      break;
 8004886:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004888:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	3301      	adds	r3, #1
 8004894:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	fb03 f202 	mul.w	r2, r3, r2
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	0e5b      	lsrs	r3, r3, #25
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	3301      	adds	r3, #1
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048c8:	69bb      	ldr	r3, [r7, #24]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3724      	adds	r7, #36	; 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
 80048dc:	080090a8 	.word	0x080090a8
 80048e0:	00f42400 	.word	0x00f42400
 80048e4:	007a1200 	.word	0x007a1200

080048e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000250 	.word	0x20000250

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004904:	f7ff fff0 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4904      	ldr	r1, [pc, #16]	; (8004928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000
 8004928:	080090a0 	.word	0x080090a0

0800492c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004930:	f7ff ffda 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	0adb      	lsrs	r3, r3, #11
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	4904      	ldr	r1, [pc, #16]	; (8004954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	080090a0 	.word	0x080090a0

08004958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004964:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004970:	f7ff f906 	bl	8003b80 <HAL_PWREx_GetVoltageRange>
 8004974:	6178      	str	r0, [r7, #20]
 8004976:	e014      	b.n	80049a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004978:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800497e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004982:	6593      	str	r3, [r2, #88]	; 0x58
 8004984:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004990:	f7ff f8f6 	bl	8003b80 <HAL_PWREx_GetVoltageRange>
 8004994:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004996:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499a:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800499c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d10b      	bne.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d913      	bls.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2ba0      	cmp	r3, #160	; 0xa0
 80049b4:	d902      	bls.n	80049bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049b6:	2302      	movs	r3, #2
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e00d      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049bc:	2301      	movs	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e00a      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b7f      	cmp	r3, #127	; 0x7f
 80049c6:	d902      	bls.n	80049ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80049c8:	2302      	movs	r3, #2
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e004      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b70      	cmp	r3, #112	; 0x70
 80049d2:	d101      	bne.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049d4:	2301      	movs	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 020f 	bic.w	r2, r3, #15
 80049e0:	4909      	ldr	r1, [pc, #36]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d001      	beq.n	80049fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40022000 	.word	0x40022000

08004a0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d00b      	beq.n	8004a3a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d825      	bhi.n	8004a74 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d008      	beq.n	8004a40 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d11f      	bne.n	8004a74 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a36:	613b      	str	r3, [r7, #16]
    break;
 8004a38:	e01f      	b.n	8004a7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004a3a:	4b25      	ldr	r3, [pc, #148]	; (8004ad0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004a3c:	613b      	str	r3, [r7, #16]
    break;
 8004a3e:	e01c      	b.n	8004a7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a40:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e005      	b.n	8004a68 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004a68:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a70:	613b      	str	r3, [r7, #16]
    break;
 8004a72:	e002      	b.n	8004a7a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
    break;
 8004a78:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	091b      	lsrs	r3, r3, #4
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	3301      	adds	r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	fb03 f202 	mul.w	r2, r3, r2
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0e5b      	lsrs	r3, r3, #25
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004aba:	683b      	ldr	r3, [r7, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	007a1200 	.word	0x007a1200
 8004ad4:	080090a8 	.word	0x080090a8

08004ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d040      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af8:	2b80      	cmp	r3, #128	; 0x80
 8004afa:	d02a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004afc:	2b80      	cmp	r3, #128	; 0x80
 8004afe:	d825      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d026      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b04:	2b60      	cmp	r3, #96	; 0x60
 8004b06:	d821      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d006      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d81d      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d009      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d010      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004b18:	e018      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b1a:	4b89      	ldr	r3, [pc, #548]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	4a88      	ldr	r2, [pc, #544]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b24:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b26:	e015      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb02 	bl	8005138 <RCCEx_PLLSAI1_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b38:	e00c      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3320      	adds	r3, #32
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fbed 	bl	8005320 <RCCEx_PLLSAI2_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b4a:	e003      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	74fb      	strb	r3, [r7, #19]
      break;
 8004b50:	e000      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b5a:	4b79      	ldr	r3, [pc, #484]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b60:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b68:	4975      	ldr	r1, [pc, #468]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b70:	e001      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d047      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8a:	d030      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b90:	d82a      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b96:	d02a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9c:	d824      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d81e      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb2:	d010      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004bb4:	e018      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bb6:	4b62      	ldr	r3, [pc, #392]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4a61      	ldr	r2, [pc, #388]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bc2:	e015      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fab4 	bl	8005138 <RCCEx_PLLSAI1_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bd4:	e00c      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3320      	adds	r3, #32
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fb9f 	bl	8005320 <RCCEx_PLLSAI2_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004be6:	e003      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	74fb      	strb	r3, [r7, #19]
      break;
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bf6:	4b52      	ldr	r3, [pc, #328]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	494e      	ldr	r1, [pc, #312]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c0c:	e001      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	7cfb      	ldrb	r3, [r7, #19]
 8004c10:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 809f 	beq.w	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c20:	2300      	movs	r3, #0
 8004c22:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c24:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00d      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3a:	4b41      	ldr	r3, [pc, #260]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	4a40      	ldr	r2, [pc, #256]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6593      	str	r3, [r2, #88]	; 0x58
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c52:	2301      	movs	r3, #1
 8004c54:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c56:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c62:	f7fe fab5 	bl	80031d0 <HAL_GetTick>
 8004c66:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c68:	e009      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6a:	f7fe fab1 	bl	80031d0 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d902      	bls.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c7c:	e005      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0ef      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004c8a:	7cfb      	ldrb	r3, [r7, #19]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d15b      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c90:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01f      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d019      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cba:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cca:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cda:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d016      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fe fa70 	bl	80031d0 <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fe fa6c 	bl	80031d0 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d902      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	74fb      	strb	r3, [r7, #19]
            break;
 8004d0a:	e006      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0ec      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004d1a:	7cfb      	ldrb	r3, [r7, #19]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10c      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	4903      	ldr	r1, [pc, #12]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d38:	e008      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	74bb      	strb	r3, [r7, #18]
 8004d3e:	e005      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d4c:	7c7b      	ldrb	r3, [r7, #17]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d52:	4ba0      	ldr	r3, [pc, #640]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	4a9f      	ldr	r2, [pc, #636]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d6a:	4b9a      	ldr	r3, [pc, #616]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f023 0203 	bic.w	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	4996      	ldr	r1, [pc, #600]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d8c:	4b91      	ldr	r3, [pc, #580]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f023 020c 	bic.w	r2, r3, #12
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	498e      	ldr	r1, [pc, #568]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dae:	4b89      	ldr	r3, [pc, #548]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	4985      	ldr	r1, [pc, #532]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dd0:	4b80      	ldr	r3, [pc, #512]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dde:	497d      	ldr	r1, [pc, #500]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004df2:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e00:	4974      	ldr	r1, [pc, #464]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e14:	4b6f      	ldr	r3, [pc, #444]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e22:	496c      	ldr	r1, [pc, #432]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e36:	4b67      	ldr	r3, [pc, #412]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e44:	4963      	ldr	r1, [pc, #396]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e58:	4b5e      	ldr	r3, [pc, #376]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e66:	495b      	ldr	r1, [pc, #364]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e7a:	4b56      	ldr	r3, [pc, #344]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e88:	4952      	ldr	r1, [pc, #328]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e9c:	4b4d      	ldr	r3, [pc, #308]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eaa:	494a      	ldr	r1, [pc, #296]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ebe:	4b45      	ldr	r3, [pc, #276]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	4941      	ldr	r1, [pc, #260]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ee0:	4b3c      	ldr	r3, [pc, #240]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ee6:	f023 0203 	bic.w	r2, r3, #3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eee:	4939      	ldr	r1, [pc, #228]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d028      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f02:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f10:	4930      	ldr	r1, [pc, #192]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f20:	d106      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f22:	4b2c      	ldr	r3, [pc, #176]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2c:	60d3      	str	r3, [r2, #12]
 8004f2e:	e011      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2101      	movs	r1, #1
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f8f9 	bl	8005138 <RCCEx_PLLSAI1_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d04d      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f68:	d108      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f7a:	e012      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f82:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f88:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9a:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004faa:	d106      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
 8004fb8:	e020      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fc2:	d109      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4a02      	ldr	r2, [pc, #8]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fce:	60d3      	str	r3, [r2, #12]
 8004fd0:	e014      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 f8a5 	bl	8005138 <RCCEx_PLLSAI1_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ff2:	7cfb      	ldrb	r3, [r7, #19]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d028      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005008:	4b4a      	ldr	r3, [pc, #296]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005016:	4947      	ldr	r1, [pc, #284]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005026:	d106      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005028:	4b42      	ldr	r3, [pc, #264]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a41      	ldr	r2, [pc, #260]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005032:	60d3      	str	r3, [r2, #12]
 8005034:	e011      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800503a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800503e:	d10c      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	2101      	movs	r1, #1
 8005046:	4618      	mov	r0, r3
 8005048:	f000 f876 	bl	8005138 <RCCEx_PLLSAI1_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005050:	7cfb      	ldrb	r3, [r7, #19]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005056:	7cfb      	ldrb	r3, [r7, #19]
 8005058:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01e      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005066:	4b33      	ldr	r3, [pc, #204]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005076:	492f      	ldr	r1, [pc, #188]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005088:	d10c      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	2102      	movs	r1, #2
 8005090:	4618      	mov	r0, r3
 8005092:	f000 f851 	bl	8005138 <RCCEx_PLLSAI1_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800509a:	7cfb      	ldrb	r3, [r7, #19]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80050a0:	7cfb      	ldrb	r3, [r7, #19]
 80050a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050b0:	4b20      	ldr	r3, [pc, #128]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050b6:	f023 0204 	bic.w	r2, r3, #4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c0:	491c      	ldr	r1, [pc, #112]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00b      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050d4:	4b17      	ldr	r3, [pc, #92]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050da:	f023 0218 	bic.w	r2, r3, #24
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	4913      	ldr	r1, [pc, #76]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80050f8:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005108:	490a      	ldr	r1, [pc, #40]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800511a:	d105      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4a04      	ldr	r2, [pc, #16]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005126:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005128:	7cbb      	ldrb	r3, [r7, #18]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000

08005138 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005146:	4b72      	ldr	r3, [pc, #456]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00e      	beq.n	8005170 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005152:	4b6f      	ldr	r3, [pc, #444]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0203 	and.w	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d103      	bne.n	800516a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
       ||
 8005166:	2b00      	cmp	r3, #0
 8005168:	d142      	bne.n	80051f0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
 800516e:	e03f      	b.n	80051f0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d018      	beq.n	80051aa <RCCEx_PLLSAI1_Config+0x72>
 8005178:	2b03      	cmp	r3, #3
 800517a:	d825      	bhi.n	80051c8 <RCCEx_PLLSAI1_Config+0x90>
 800517c:	2b01      	cmp	r3, #1
 800517e:	d002      	beq.n	8005186 <RCCEx_PLLSAI1_Config+0x4e>
 8005180:	2b02      	cmp	r3, #2
 8005182:	d009      	beq.n	8005198 <RCCEx_PLLSAI1_Config+0x60>
 8005184:	e020      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005186:	4b62      	ldr	r3, [pc, #392]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d11d      	bne.n	80051ce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005196:	e01a      	b.n	80051ce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005198:	4b5d      	ldr	r3, [pc, #372]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d116      	bne.n	80051d2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a8:	e013      	b.n	80051d2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051aa:	4b59      	ldr	r3, [pc, #356]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051b6:	4b56      	ldr	r3, [pc, #344]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051c6:	e006      	b.n	80051d6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
      break;
 80051cc:	e004      	b.n	80051d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051ce:	bf00      	nop
 80051d0:	e002      	b.n	80051d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051d2:	bf00      	nop
 80051d4:	e000      	b.n	80051d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d108      	bne.n	80051f0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80051de:	4b4c      	ldr	r3, [pc, #304]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f023 0203 	bic.w	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4949      	ldr	r1, [pc, #292]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 8086 	bne.w	8005304 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051f8:	4b45      	ldr	r3, [pc, #276]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a44      	ldr	r2, [pc, #272]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005204:	f7fd ffe4 	bl	80031d0 <HAL_GetTick>
 8005208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800520a:	e009      	b.n	8005220 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800520c:	f7fd ffe0 	bl	80031d0 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d902      	bls.n	8005220 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	73fb      	strb	r3, [r7, #15]
        break;
 800521e:	e005      	b.n	800522c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005220:	4b3b      	ldr	r3, [pc, #236]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ef      	bne.n	800520c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d168      	bne.n	8005304 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d113      	bne.n	8005260 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005238:	4b35      	ldr	r3, [pc, #212]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	4b35      	ldr	r3, [pc, #212]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 800523e:	4013      	ands	r3, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6892      	ldr	r2, [r2, #8]
 8005244:	0211      	lsls	r1, r2, #8
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68d2      	ldr	r2, [r2, #12]
 800524a:	06d2      	lsls	r2, r2, #27
 800524c:	4311      	orrs	r1, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6852      	ldr	r2, [r2, #4]
 8005252:	3a01      	subs	r2, #1
 8005254:	0112      	lsls	r2, r2, #4
 8005256:	430a      	orrs	r2, r1
 8005258:	492d      	ldr	r1, [pc, #180]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 800525a:	4313      	orrs	r3, r2
 800525c:	610b      	str	r3, [r1, #16]
 800525e:	e02d      	b.n	80052bc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d115      	bne.n	8005292 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005266:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <RCCEx_PLLSAI1_Config+0x1e0>)
 800526c:	4013      	ands	r3, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6892      	ldr	r2, [r2, #8]
 8005272:	0211      	lsls	r1, r2, #8
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6912      	ldr	r2, [r2, #16]
 8005278:	0852      	lsrs	r2, r2, #1
 800527a:	3a01      	subs	r2, #1
 800527c:	0552      	lsls	r2, r2, #21
 800527e:	4311      	orrs	r1, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6852      	ldr	r2, [r2, #4]
 8005284:	3a01      	subs	r2, #1
 8005286:	0112      	lsls	r2, r2, #4
 8005288:	430a      	orrs	r2, r1
 800528a:	4921      	ldr	r1, [pc, #132]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 800528c:	4313      	orrs	r3, r2
 800528e:	610b      	str	r3, [r1, #16]
 8005290:	e014      	b.n	80052bc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005292:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	4b21      	ldr	r3, [pc, #132]	; (800531c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005298:	4013      	ands	r3, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6892      	ldr	r2, [r2, #8]
 800529e:	0211      	lsls	r1, r2, #8
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6952      	ldr	r2, [r2, #20]
 80052a4:	0852      	lsrs	r2, r2, #1
 80052a6:	3a01      	subs	r2, #1
 80052a8:	0652      	lsls	r2, r2, #25
 80052aa:	4311      	orrs	r1, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6852      	ldr	r2, [r2, #4]
 80052b0:	3a01      	subs	r2, #1
 80052b2:	0112      	lsls	r2, r2, #4
 80052b4:	430a      	orrs	r2, r1
 80052b6:	4916      	ldr	r1, [pc, #88]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052bc:	4b14      	ldr	r3, [pc, #80]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a13      	ldr	r2, [pc, #76]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c8:	f7fd ff82 	bl	80031d0 <HAL_GetTick>
 80052cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052ce:	e009      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d0:	f7fd ff7e 	bl	80031d0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d902      	bls.n	80052e4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	73fb      	strb	r3, [r7, #15]
          break;
 80052e2:	e005      	b.n	80052f0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ef      	beq.n	80052d0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	4904      	ldr	r1, [pc, #16]	; (8005310 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005300:	4313      	orrs	r3, r2
 8005302:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000
 8005314:	07ff800f 	.word	0x07ff800f
 8005318:	ff9f800f 	.word	0xff9f800f
 800531c:	f9ff800f 	.word	0xf9ff800f

08005320 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800532e:	4b72      	ldr	r3, [pc, #456]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00e      	beq.n	8005358 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800533a:	4b6f      	ldr	r3, [pc, #444]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f003 0203 	and.w	r2, r3, #3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d103      	bne.n	8005352 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
       ||
 800534e:	2b00      	cmp	r3, #0
 8005350:	d142      	bne.n	80053d8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
 8005356:	e03f      	b.n	80053d8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d018      	beq.n	8005392 <RCCEx_PLLSAI2_Config+0x72>
 8005360:	2b03      	cmp	r3, #3
 8005362:	d825      	bhi.n	80053b0 <RCCEx_PLLSAI2_Config+0x90>
 8005364:	2b01      	cmp	r3, #1
 8005366:	d002      	beq.n	800536e <RCCEx_PLLSAI2_Config+0x4e>
 8005368:	2b02      	cmp	r3, #2
 800536a:	d009      	beq.n	8005380 <RCCEx_PLLSAI2_Config+0x60>
 800536c:	e020      	b.n	80053b0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800536e:	4b62      	ldr	r3, [pc, #392]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d11d      	bne.n	80053b6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800537e:	e01a      	b.n	80053b6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005380:	4b5d      	ldr	r3, [pc, #372]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005388:	2b00      	cmp	r3, #0
 800538a:	d116      	bne.n	80053ba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005390:	e013      	b.n	80053ba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005392:	4b59      	ldr	r3, [pc, #356]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10f      	bne.n	80053be <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800539e:	4b56      	ldr	r3, [pc, #344]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053ae:	e006      	b.n	80053be <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
      break;
 80053b4:	e004      	b.n	80053c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053b6:	bf00      	nop
 80053b8:	e002      	b.n	80053c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053ba:	bf00      	nop
 80053bc:	e000      	b.n	80053c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053be:	bf00      	nop
    }

    if(status == HAL_OK)
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d108      	bne.n	80053d8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80053c6:	4b4c      	ldr	r3, [pc, #304]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f023 0203 	bic.w	r2, r3, #3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4949      	ldr	r1, [pc, #292]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 8086 	bne.w	80054ec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053e0:	4b45      	ldr	r3, [pc, #276]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a44      	ldr	r2, [pc, #272]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ec:	f7fd fef0 	bl	80031d0 <HAL_GetTick>
 80053f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053f2:	e009      	b.n	8005408 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053f4:	f7fd feec 	bl	80031d0 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d902      	bls.n	8005408 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	73fb      	strb	r3, [r7, #15]
        break;
 8005406:	e005      	b.n	8005414 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005408:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ef      	bne.n	80053f4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d168      	bne.n	80054ec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d113      	bne.n	8005448 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005420:	4b35      	ldr	r3, [pc, #212]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	4b35      	ldr	r3, [pc, #212]	; (80054fc <RCCEx_PLLSAI2_Config+0x1dc>)
 8005426:	4013      	ands	r3, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	0211      	lsls	r1, r2, #8
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	06d2      	lsls	r2, r2, #27
 8005434:	4311      	orrs	r1, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6852      	ldr	r2, [r2, #4]
 800543a:	3a01      	subs	r2, #1
 800543c:	0112      	lsls	r2, r2, #4
 800543e:	430a      	orrs	r2, r1
 8005440:	492d      	ldr	r1, [pc, #180]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005442:	4313      	orrs	r3, r2
 8005444:	614b      	str	r3, [r1, #20]
 8005446:	e02d      	b.n	80054a4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d115      	bne.n	800547a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800544e:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005450:	695a      	ldr	r2, [r3, #20]
 8005452:	4b2b      	ldr	r3, [pc, #172]	; (8005500 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6892      	ldr	r2, [r2, #8]
 800545a:	0211      	lsls	r1, r2, #8
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6912      	ldr	r2, [r2, #16]
 8005460:	0852      	lsrs	r2, r2, #1
 8005462:	3a01      	subs	r2, #1
 8005464:	0552      	lsls	r2, r2, #21
 8005466:	4311      	orrs	r1, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6852      	ldr	r2, [r2, #4]
 800546c:	3a01      	subs	r2, #1
 800546e:	0112      	lsls	r2, r2, #4
 8005470:	430a      	orrs	r2, r1
 8005472:	4921      	ldr	r1, [pc, #132]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005474:	4313      	orrs	r3, r2
 8005476:	614b      	str	r3, [r1, #20]
 8005478:	e014      	b.n	80054a4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800547a:	4b1f      	ldr	r3, [pc, #124]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	4b21      	ldr	r3, [pc, #132]	; (8005504 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005480:	4013      	ands	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6892      	ldr	r2, [r2, #8]
 8005486:	0211      	lsls	r1, r2, #8
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6952      	ldr	r2, [r2, #20]
 800548c:	0852      	lsrs	r2, r2, #1
 800548e:	3a01      	subs	r2, #1
 8005490:	0652      	lsls	r2, r2, #25
 8005492:	4311      	orrs	r1, r2
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6852      	ldr	r2, [r2, #4]
 8005498:	3a01      	subs	r2, #1
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	430a      	orrs	r2, r1
 800549e:	4916      	ldr	r1, [pc, #88]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fd fe8e 	bl	80031d0 <HAL_GetTick>
 80054b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054b6:	e009      	b.n	80054cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054b8:	f7fd fe8a 	bl	80031d0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d902      	bls.n	80054cc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	73fb      	strb	r3, [r7, #15]
          break;
 80054ca:	e005      	b.n	80054d8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0ef      	beq.n	80054b8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	4904      	ldr	r1, [pc, #16]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
 80054fc:	07ff800f 	.word	0x07ff800f
 8005500:	ff9f800f 	.word	0xff9f800f
 8005504:	f9ff800f 	.word	0xf9ff800f

08005508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e049      	b.n	80055ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fd fb4a 	bl	8002bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3304      	adds	r3, #4
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f000 fd3a 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d001      	beq.n	80055d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e04f      	b.n	8005670 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a23      	ldr	r2, [pc, #140]	; (800567c <HAL_TIM_Base_Start_IT+0xc4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d01d      	beq.n	800562e <HAL_TIM_Base_Start_IT+0x76>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fa:	d018      	beq.n	800562e <HAL_TIM_Base_Start_IT+0x76>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <HAL_TIM_Base_Start_IT+0xc8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d013      	beq.n	800562e <HAL_TIM_Base_Start_IT+0x76>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <HAL_TIM_Base_Start_IT+0xcc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00e      	beq.n	800562e <HAL_TIM_Base_Start_IT+0x76>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <HAL_TIM_Base_Start_IT+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d009      	beq.n	800562e <HAL_TIM_Base_Start_IT+0x76>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1b      	ldr	r2, [pc, #108]	; (800568c <HAL_TIM_Base_Start_IT+0xd4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d004      	beq.n	800562e <HAL_TIM_Base_Start_IT+0x76>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a19      	ldr	r2, [pc, #100]	; (8005690 <HAL_TIM_Base_Start_IT+0xd8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d115      	bne.n	800565a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	4b17      	ldr	r3, [pc, #92]	; (8005694 <HAL_TIM_Base_Start_IT+0xdc>)
 8005636:	4013      	ands	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b06      	cmp	r3, #6
 800563e:	d015      	beq.n	800566c <HAL_TIM_Base_Start_IT+0xb4>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005646:	d011      	beq.n	800566c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005658:	e008      	b.n	800566c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	e000      	b.n	800566e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40000c00 	.word	0x40000c00
 800568c:	40013400 	.word	0x40013400
 8005690:	40014000 	.word	0x40014000
 8005694:	00010007 	.word	0x00010007

08005698 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0201 	bic.w	r2, r2, #1
 80056ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10f      	bne.n	80056e0 <HAL_TIM_Base_Stop_IT+0x48>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6a1a      	ldr	r2, [r3, #32]
 80056c6:	f240 4344 	movw	r3, #1092	; 0x444
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d107      	bne.n	80056e0 <HAL_TIM_Base_Stop_IT+0x48>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e049      	b.n	800579c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fd fb4d 	bl	8002dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f000 fc43 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_TIM_PWM_Start+0x24>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	e03c      	b.n	8005842 <HAL_TIM_PWM_Start+0x9e>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d109      	bne.n	80057e2 <HAL_TIM_PWM_Start+0x3e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	e02f      	b.n	8005842 <HAL_TIM_PWM_Start+0x9e>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d109      	bne.n	80057fc <HAL_TIM_PWM_Start+0x58>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e022      	b.n	8005842 <HAL_TIM_PWM_Start+0x9e>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d109      	bne.n	8005816 <HAL_TIM_PWM_Start+0x72>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b01      	cmp	r3, #1
 800580c:	bf14      	ite	ne
 800580e:	2301      	movne	r3, #1
 8005810:	2300      	moveq	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	e015      	b.n	8005842 <HAL_TIM_PWM_Start+0x9e>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b10      	cmp	r3, #16
 800581a:	d109      	bne.n	8005830 <HAL_TIM_PWM_Start+0x8c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	e008      	b.n	8005842 <HAL_TIM_PWM_Start+0x9e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	bf14      	ite	ne
 800583c:	2301      	movne	r3, #1
 800583e:	2300      	moveq	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e09c      	b.n	8005984 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d104      	bne.n	800585a <HAL_TIM_PWM_Start+0xb6>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005858:	e023      	b.n	80058a2 <HAL_TIM_PWM_Start+0xfe>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b04      	cmp	r3, #4
 800585e:	d104      	bne.n	800586a <HAL_TIM_PWM_Start+0xc6>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005868:	e01b      	b.n	80058a2 <HAL_TIM_PWM_Start+0xfe>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b08      	cmp	r3, #8
 800586e:	d104      	bne.n	800587a <HAL_TIM_PWM_Start+0xd6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005878:	e013      	b.n	80058a2 <HAL_TIM_PWM_Start+0xfe>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d104      	bne.n	800588a <HAL_TIM_PWM_Start+0xe6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005888:	e00b      	b.n	80058a2 <HAL_TIM_PWM_Start+0xfe>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b10      	cmp	r3, #16
 800588e:	d104      	bne.n	800589a <HAL_TIM_PWM_Start+0xf6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005898:	e003      	b.n	80058a2 <HAL_TIM_PWM_Start+0xfe>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2201      	movs	r2, #1
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 ff92 	bl	80067d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a35      	ldr	r2, [pc, #212]	; (800598c <HAL_TIM_PWM_Start+0x1e8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x13e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a34      	ldr	r2, [pc, #208]	; (8005990 <HAL_TIM_PWM_Start+0x1ec>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00e      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x13e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a32      	ldr	r2, [pc, #200]	; (8005994 <HAL_TIM_PWM_Start+0x1f0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x13e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a31      	ldr	r2, [pc, #196]	; (8005998 <HAL_TIM_PWM_Start+0x1f4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x13e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a2f      	ldr	r2, [pc, #188]	; (800599c <HAL_TIM_PWM_Start+0x1f8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <HAL_TIM_PWM_Start+0x142>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <HAL_TIM_PWM_Start+0x144>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a22      	ldr	r2, [pc, #136]	; (800598c <HAL_TIM_PWM_Start+0x1e8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01d      	beq.n	8005942 <HAL_TIM_PWM_Start+0x19e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590e:	d018      	beq.n	8005942 <HAL_TIM_PWM_Start+0x19e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <HAL_TIM_PWM_Start+0x1fc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <HAL_TIM_PWM_Start+0x19e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a21      	ldr	r2, [pc, #132]	; (80059a4 <HAL_TIM_PWM_Start+0x200>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00e      	beq.n	8005942 <HAL_TIM_PWM_Start+0x19e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <HAL_TIM_PWM_Start+0x204>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_TIM_PWM_Start+0x19e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a17      	ldr	r2, [pc, #92]	; (8005990 <HAL_TIM_PWM_Start+0x1ec>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_TIM_PWM_Start+0x19e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a15      	ldr	r2, [pc, #84]	; (8005994 <HAL_TIM_PWM_Start+0x1f0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d115      	bne.n	800596e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	4b18      	ldr	r3, [pc, #96]	; (80059ac <HAL_TIM_PWM_Start+0x208>)
 800594a:	4013      	ands	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b06      	cmp	r3, #6
 8005952:	d015      	beq.n	8005980 <HAL_TIM_PWM_Start+0x1dc>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595a:	d011      	beq.n	8005980 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	e008      	b.n	8005980 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	e000      	b.n	8005982 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40013400 	.word	0x40013400
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40000800 	.word	0x40000800
 80059a8:	40000c00 	.word	0x40000c00
 80059ac:	00010007 	.word	0x00010007

080059b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d020      	beq.n	8005a14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01b      	beq.n	8005a14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0202 	mvn.w	r2, #2
 80059e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fac1 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fab3 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fac4 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d020      	beq.n	8005a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01b      	beq.n	8005a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0204 	mvn.w	r2, #4
 8005a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fa9b 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa8d 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fa9e 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d020      	beq.n	8005aac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01b      	beq.n	8005aac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0208 	mvn.w	r2, #8
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2204      	movs	r2, #4
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa75 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fa67 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fa78 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d020      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0210 	mvn.w	r2, #16
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2208      	movs	r2, #8
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa4f 	bl	8005f82 <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa41 	bl	8005f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fa52 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00c      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0201 	mvn.w	r2, #1
 8005b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb fd9c 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00c      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 ff02 	bl	8006944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fefa 	bl	8006958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00c      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa11 	bl	8005faa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00c      	beq.n	8005bac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0220 	mvn.w	r2, #32
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fec2 	bl	8006930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0ff      	b.n	8005dd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b14      	cmp	r3, #20
 8005bde:	f200 80f0 	bhi.w	8005dc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005dc3 	.word	0x08005dc3
 8005bf0:	08005dc3 	.word	0x08005dc3
 8005bf4:	08005dc3 	.word	0x08005dc3
 8005bf8:	08005c7d 	.word	0x08005c7d
 8005bfc:	08005dc3 	.word	0x08005dc3
 8005c00:	08005dc3 	.word	0x08005dc3
 8005c04:	08005dc3 	.word	0x08005dc3
 8005c08:	08005cbf 	.word	0x08005cbf
 8005c0c:	08005dc3 	.word	0x08005dc3
 8005c10:	08005dc3 	.word	0x08005dc3
 8005c14:	08005dc3 	.word	0x08005dc3
 8005c18:	08005cff 	.word	0x08005cff
 8005c1c:	08005dc3 	.word	0x08005dc3
 8005c20:	08005dc3 	.word	0x08005dc3
 8005c24:	08005dc3 	.word	0x08005dc3
 8005c28:	08005d41 	.word	0x08005d41
 8005c2c:	08005dc3 	.word	0x08005dc3
 8005c30:	08005dc3 	.word	0x08005dc3
 8005c34:	08005dc3 	.word	0x08005dc3
 8005c38:	08005d81 	.word	0x08005d81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fa56 	bl	80060f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0208 	orr.w	r2, r2, #8
 8005c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0204 	bic.w	r2, r2, #4
 8005c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6999      	ldr	r1, [r3, #24]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	619a      	str	r2, [r3, #24]
      break;
 8005c7a:	e0a5      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fac6 	bl	8006214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6999      	ldr	r1, [r3, #24]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	619a      	str	r2, [r3, #24]
      break;
 8005cbc:	e084      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fb2f 	bl	8006328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0208 	orr.w	r2, r2, #8
 8005cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0204 	bic.w	r2, r2, #4
 8005ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69d9      	ldr	r1, [r3, #28]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	61da      	str	r2, [r3, #28]
      break;
 8005cfc:	e064      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fb97 	bl	8006438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69d9      	ldr	r1, [r3, #28]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	021a      	lsls	r2, r3, #8
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	61da      	str	r2, [r3, #28]
      break;
 8005d3e:	e043      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fbe0 	bl	800650c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0208 	orr.w	r2, r2, #8
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0204 	bic.w	r2, r2, #4
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d7e:	e023      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fc24 	bl	80065d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	021a      	lsls	r2, r3, #8
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dc0:	e002      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop

08005ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_TIM_ConfigClockSource+0x1c>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e0b6      	b.n	8005f66 <HAL_TIM_ConfigClockSource+0x18a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e34:	d03e      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0xd8>
 8005e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3a:	f200 8087 	bhi.w	8005f4c <HAL_TIM_ConfigClockSource+0x170>
 8005e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e42:	f000 8086 	beq.w	8005f52 <HAL_TIM_ConfigClockSource+0x176>
 8005e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4a:	d87f      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x170>
 8005e4c:	2b70      	cmp	r3, #112	; 0x70
 8005e4e:	d01a      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0xaa>
 8005e50:	2b70      	cmp	r3, #112	; 0x70
 8005e52:	d87b      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x170>
 8005e54:	2b60      	cmp	r3, #96	; 0x60
 8005e56:	d050      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x11e>
 8005e58:	2b60      	cmp	r3, #96	; 0x60
 8005e5a:	d877      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x170>
 8005e5c:	2b50      	cmp	r3, #80	; 0x50
 8005e5e:	d03c      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0xfe>
 8005e60:	2b50      	cmp	r3, #80	; 0x50
 8005e62:	d873      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x170>
 8005e64:	2b40      	cmp	r3, #64	; 0x40
 8005e66:	d058      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x13e>
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d86f      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x170>
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	d064      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x15e>
 8005e70:	2b30      	cmp	r3, #48	; 0x30
 8005e72:	d86b      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x170>
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d060      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x15e>
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d867      	bhi.n	8005f4c <HAL_TIM_ConfigClockSource+0x170>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d05c      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x15e>
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d05a      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x15e>
 8005e84:	e062      	b.n	8005f4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e96:	f000 fc7d 	bl	8006794 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ea8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	609a      	str	r2, [r3, #8]
      break;
 8005eb2:	e04f      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ec4:	f000 fc66 	bl	8006794 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ed6:	609a      	str	r2, [r3, #8]
      break;
 8005ed8:	e03c      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f000 fbda 	bl	80066a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2150      	movs	r1, #80	; 0x50
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fc33 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005ef8:	e02c      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f06:	461a      	mov	r2, r3
 8005f08:	f000 fbf9 	bl	80066fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2160      	movs	r1, #96	; 0x60
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fc23 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005f18:	e01c      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f26:	461a      	mov	r2, r3
 8005f28:	f000 fbba 	bl	80066a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2140      	movs	r1, #64	; 0x40
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fc13 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005f38:	e00c      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f000 fc0a 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005f4a:	e003      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f50:	e000      	b.n	8005f54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a40      	ldr	r2, [pc, #256]	; (80060d4 <TIM_Base_SetConfig+0x114>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d00f      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a3d      	ldr	r2, [pc, #244]	; (80060d8 <TIM_Base_SetConfig+0x118>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <TIM_Base_SetConfig+0x11c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3b      	ldr	r2, [pc, #236]	; (80060e0 <TIM_Base_SetConfig+0x120>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3a      	ldr	r2, [pc, #232]	; (80060e4 <TIM_Base_SetConfig+0x124>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d108      	bne.n	8006012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2f      	ldr	r2, [pc, #188]	; (80060d4 <TIM_Base_SetConfig+0x114>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01f      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006020:	d01b      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2c      	ldr	r2, [pc, #176]	; (80060d8 <TIM_Base_SetConfig+0x118>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d017      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2b      	ldr	r2, [pc, #172]	; (80060dc <TIM_Base_SetConfig+0x11c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <TIM_Base_SetConfig+0x120>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00f      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <TIM_Base_SetConfig+0x124>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00b      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <TIM_Base_SetConfig+0x128>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d007      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a27      	ldr	r2, [pc, #156]	; (80060ec <TIM_Base_SetConfig+0x12c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_Base_SetConfig+0x9a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <TIM_Base_SetConfig+0x130>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d108      	bne.n	800606c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a10      	ldr	r2, [pc, #64]	; (80060d4 <TIM_Base_SetConfig+0x114>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00f      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a12      	ldr	r2, [pc, #72]	; (80060e4 <TIM_Base_SetConfig+0x124>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00b      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a11      	ldr	r2, [pc, #68]	; (80060e8 <TIM_Base_SetConfig+0x128>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d007      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a10      	ldr	r2, [pc, #64]	; (80060ec <TIM_Base_SetConfig+0x12c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <TIM_Base_SetConfig+0x130>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d103      	bne.n	80060c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	615a      	str	r2, [r3, #20]
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40012c00 	.word	0x40012c00
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40000c00 	.word	0x40000c00
 80060e4:	40013400 	.word	0x40013400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800

080060f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f023 0201 	bic.w	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f023 0302 	bic.w	r3, r3, #2
 8006140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a2c      	ldr	r2, [pc, #176]	; (8006200 <TIM_OC1_SetConfig+0x10c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00f      	beq.n	8006174 <TIM_OC1_SetConfig+0x80>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a2b      	ldr	r2, [pc, #172]	; (8006204 <TIM_OC1_SetConfig+0x110>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00b      	beq.n	8006174 <TIM_OC1_SetConfig+0x80>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <TIM_OC1_SetConfig+0x114>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_OC1_SetConfig+0x80>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a29      	ldr	r2, [pc, #164]	; (800620c <TIM_OC1_SetConfig+0x118>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC1_SetConfig+0x80>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a28      	ldr	r2, [pc, #160]	; (8006210 <TIM_OC1_SetConfig+0x11c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10c      	bne.n	800618e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0308 	bic.w	r3, r3, #8
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1b      	ldr	r2, [pc, #108]	; (8006200 <TIM_OC1_SetConfig+0x10c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00f      	beq.n	80061b6 <TIM_OC1_SetConfig+0xc2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a1a      	ldr	r2, [pc, #104]	; (8006204 <TIM_OC1_SetConfig+0x110>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00b      	beq.n	80061b6 <TIM_OC1_SetConfig+0xc2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a19      	ldr	r2, [pc, #100]	; (8006208 <TIM_OC1_SetConfig+0x114>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d007      	beq.n	80061b6 <TIM_OC1_SetConfig+0xc2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a18      	ldr	r2, [pc, #96]	; (800620c <TIM_OC1_SetConfig+0x118>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d003      	beq.n	80061b6 <TIM_OC1_SetConfig+0xc2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a17      	ldr	r2, [pc, #92]	; (8006210 <TIM_OC1_SetConfig+0x11c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d111      	bne.n	80061da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	621a      	str	r2, [r3, #32]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40013400 	.word	0x40013400
 8006208:	40014000 	.word	0x40014000
 800620c:	40014400 	.word	0x40014400
 8006210:	40014800 	.word	0x40014800

08006214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f023 0210 	bic.w	r2, r3, #16
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0320 	bic.w	r3, r3, #32
 8006262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a28      	ldr	r2, [pc, #160]	; (8006314 <TIM_OC2_SetConfig+0x100>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC2_SetConfig+0x6c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a27      	ldr	r2, [pc, #156]	; (8006318 <TIM_OC2_SetConfig+0x104>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10d      	bne.n	800629c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a1d      	ldr	r2, [pc, #116]	; (8006314 <TIM_OC2_SetConfig+0x100>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00f      	beq.n	80062c4 <TIM_OC2_SetConfig+0xb0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <TIM_OC2_SetConfig+0x104>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00b      	beq.n	80062c4 <TIM_OC2_SetConfig+0xb0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a1b      	ldr	r2, [pc, #108]	; (800631c <TIM_OC2_SetConfig+0x108>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d007      	beq.n	80062c4 <TIM_OC2_SetConfig+0xb0>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a1a      	ldr	r2, [pc, #104]	; (8006320 <TIM_OC2_SetConfig+0x10c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_OC2_SetConfig+0xb0>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a19      	ldr	r2, [pc, #100]	; (8006324 <TIM_OC2_SetConfig+0x110>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d113      	bne.n	80062ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	621a      	str	r2, [r3, #32]
}
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40013400 	.word	0x40013400
 800631c:	40014000 	.word	0x40014000
 8006320:	40014400 	.word	0x40014400
 8006324:	40014800 	.word	0x40014800

08006328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a27      	ldr	r2, [pc, #156]	; (8006424 <TIM_OC3_SetConfig+0xfc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_OC3_SetConfig+0x6a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a26      	ldr	r2, [pc, #152]	; (8006428 <TIM_OC3_SetConfig+0x100>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10d      	bne.n	80063ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1c      	ldr	r2, [pc, #112]	; (8006424 <TIM_OC3_SetConfig+0xfc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00f      	beq.n	80063d6 <TIM_OC3_SetConfig+0xae>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a1b      	ldr	r2, [pc, #108]	; (8006428 <TIM_OC3_SetConfig+0x100>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00b      	beq.n	80063d6 <TIM_OC3_SetConfig+0xae>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a1a      	ldr	r2, [pc, #104]	; (800642c <TIM_OC3_SetConfig+0x104>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d007      	beq.n	80063d6 <TIM_OC3_SetConfig+0xae>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a19      	ldr	r2, [pc, #100]	; (8006430 <TIM_OC3_SetConfig+0x108>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_OC3_SetConfig+0xae>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a18      	ldr	r2, [pc, #96]	; (8006434 <TIM_OC3_SetConfig+0x10c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d113      	bne.n	80063fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40013400 	.word	0x40013400
 800642c:	40014000 	.word	0x40014000
 8006430:	40014400 	.word	0x40014400
 8006434:	40014800 	.word	0x40014800

08006438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	031b      	lsls	r3, r3, #12
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <TIM_OC4_SetConfig+0xc0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00f      	beq.n	80064bc <TIM_OC4_SetConfig+0x84>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a17      	ldr	r2, [pc, #92]	; (80064fc <TIM_OC4_SetConfig+0xc4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_OC4_SetConfig+0x84>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a16      	ldr	r2, [pc, #88]	; (8006500 <TIM_OC4_SetConfig+0xc8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_OC4_SetConfig+0x84>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a15      	ldr	r2, [pc, #84]	; (8006504 <TIM_OC4_SetConfig+0xcc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC4_SetConfig+0x84>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a14      	ldr	r2, [pc, #80]	; (8006508 <TIM_OC4_SetConfig+0xd0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d109      	bne.n	80064d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	019b      	lsls	r3, r3, #6
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40013400 	.word	0x40013400
 8006500:	40014000 	.word	0x40014000
 8006504:	40014400 	.word	0x40014400
 8006508:	40014800 	.word	0x40014800

0800650c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	041b      	lsls	r3, r3, #16
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a17      	ldr	r2, [pc, #92]	; (80065c0 <TIM_OC5_SetConfig+0xb4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00f      	beq.n	8006586 <TIM_OC5_SetConfig+0x7a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a16      	ldr	r2, [pc, #88]	; (80065c4 <TIM_OC5_SetConfig+0xb8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00b      	beq.n	8006586 <TIM_OC5_SetConfig+0x7a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <TIM_OC5_SetConfig+0xbc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <TIM_OC5_SetConfig+0x7a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a14      	ldr	r2, [pc, #80]	; (80065cc <TIM_OC5_SetConfig+0xc0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_OC5_SetConfig+0x7a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a13      	ldr	r2, [pc, #76]	; (80065d0 <TIM_OC5_SetConfig+0xc4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d109      	bne.n	800659a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800658c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	621a      	str	r2, [r3, #32]
}
 80065b4:	bf00      	nop
 80065b6:	371c      	adds	r7, #28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	40012c00 	.word	0x40012c00
 80065c4:	40013400 	.word	0x40013400
 80065c8:	40014000 	.word	0x40014000
 80065cc:	40014400 	.word	0x40014400
 80065d0:	40014800 	.word	0x40014800

080065d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800661a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	051b      	lsls	r3, r3, #20
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a18      	ldr	r2, [pc, #96]	; (800668c <TIM_OC6_SetConfig+0xb8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00f      	beq.n	8006650 <TIM_OC6_SetConfig+0x7c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a17      	ldr	r2, [pc, #92]	; (8006690 <TIM_OC6_SetConfig+0xbc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00b      	beq.n	8006650 <TIM_OC6_SetConfig+0x7c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a16      	ldr	r2, [pc, #88]	; (8006694 <TIM_OC6_SetConfig+0xc0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d007      	beq.n	8006650 <TIM_OC6_SetConfig+0x7c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a15      	ldr	r2, [pc, #84]	; (8006698 <TIM_OC6_SetConfig+0xc4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC6_SetConfig+0x7c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a14      	ldr	r2, [pc, #80]	; (800669c <TIM_OC6_SetConfig+0xc8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d109      	bne.n	8006664 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	029b      	lsls	r3, r3, #10
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40012c00 	.word	0x40012c00
 8006690:	40013400 	.word	0x40013400
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400
 800669c:	40014800 	.word	0x40014800

080066a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f023 030a 	bic.w	r3, r3, #10
 80066dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066fe:	b480      	push	{r7}
 8006700:	b087      	sub	sp, #28
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f023 0210 	bic.w	r2, r3, #16
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	031b      	lsls	r3, r3, #12
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800673a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	f043 0307 	orr.w	r3, r3, #7
 8006780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	609a      	str	r2, [r3, #8]
}
 8006788:	bf00      	nop
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	021a      	lsls	r2, r3, #8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	609a      	str	r2, [r3, #8]
}
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2201      	movs	r2, #1
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	43db      	mvns	r3, r3
 80067f6:	401a      	ands	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	fa01 f303 	lsl.w	r3, r1, r3
 800680c:	431a      	orrs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006834:	2302      	movs	r3, #2
 8006836:	e068      	b.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a2e      	ldr	r2, [pc, #184]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2d      	ldr	r2, [pc, #180]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d108      	bne.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006872:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006884:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1e      	ldr	r2, [pc, #120]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01d      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068aa:	d018      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1b      	ldr	r2, [pc, #108]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1a      	ldr	r2, [pc, #104]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a18      	ldr	r2, [pc, #96]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a13      	ldr	r2, [pc, #76]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a14      	ldr	r2, [pc, #80]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d10c      	bne.n	80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40013400 	.word	0x40013400
 8006920:	40000400 	.word	0x40000400
 8006924:	40000800 	.word	0x40000800
 8006928:	40000c00 	.word	0x40000c00
 800692c:	40014000 	.word	0x40014000

08006930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e042      	b.n	8006a04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fc fa6b 	bl	8002e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2224      	movs	r2, #36	; 0x24
 800699a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0201 	bic.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 ff48 	bl	800784c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fc49 	bl	8007254 <UART_SetConfig>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e01b      	b.n	8006a04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 ffc7 	bl	8007990 <UART_CheckIdleState>
 8006a02:	4603      	mov	r3, r0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b091      	sub	sp, #68	; 0x44
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	4613      	mov	r3, r2
 8006a18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d178      	bne.n	8006b16 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_UART_Transmit_IT+0x24>
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e071      	b.n	8006b18 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	88fa      	ldrh	r2, [r7, #6]
 8006a3e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	88fa      	ldrh	r2, [r7, #6]
 8006a46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2221      	movs	r2, #33	; 0x21
 8006a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a68:	d12a      	bne.n	8006ac0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a72:	d107      	bne.n	8006a84 <HAL_UART_Transmit_IT+0x78>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <HAL_UART_Transmit_IT+0x118>)
 8006a80:	679a      	str	r2, [r3, #120]	; 0x78
 8006a82:	e002      	b.n	8006a8a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a28      	ldr	r2, [pc, #160]	; (8006b28 <HAL_UART_Transmit_IT+0x11c>)
 8006a88:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3308      	adds	r3, #8
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aaa:	637a      	str	r2, [r7, #52]	; 0x34
 8006aac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e5      	bne.n	8006a8a <HAL_UART_Transmit_IT+0x7e>
 8006abe:	e028      	b.n	8006b12 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac8:	d107      	bne.n	8006ada <HAL_UART_Transmit_IT+0xce>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d103      	bne.n	8006ada <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4a15      	ldr	r2, [pc, #84]	; (8006b2c <HAL_UART_Transmit_IT+0x120>)
 8006ad6:	679a      	str	r2, [r3, #120]	; 0x78
 8006ad8:	e002      	b.n	8006ae0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a14      	ldr	r2, [pc, #80]	; (8006b30 <HAL_UART_Transmit_IT+0x124>)
 8006ade:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	613b      	str	r3, [r7, #16]
   return(result);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afe:	623b      	str	r3, [r7, #32]
 8006b00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	69f9      	ldr	r1, [r7, #28]
 8006b04:	6a3a      	ldr	r2, [r7, #32]
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e6      	bne.n	8006ae0 <HAL_UART_Transmit_IT+0xd4>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e000      	b.n	8006b18 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006b16:	2302      	movs	r3, #2
  }
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3744      	adds	r7, #68	; 0x44
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	0800814f 	.word	0x0800814f
 8006b28:	0800806d 	.word	0x0800806d
 8006b2c:	08007fab 	.word	0x08007fab
 8006b30:	08007ef1 	.word	0x08007ef1

08006b34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08a      	sub	sp, #40	; 0x28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d137      	bne.n	8006bbc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_UART_Receive_IT+0x24>
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e030      	b.n	8006bbe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a18      	ldr	r2, [pc, #96]	; (8006bc8 <HAL_UART_Receive_IT+0x94>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d01f      	beq.n	8006bac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d018      	beq.n	8006bac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	613b      	str	r3, [r7, #16]
   return(result);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	623b      	str	r3, [r7, #32]
 8006b9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	69f9      	ldr	r1, [r7, #28]
 8006b9e:	6a3a      	ldr	r2, [r7, #32]
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e6      	bne.n	8006b7a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bac:	88fb      	ldrh	r3, [r7, #6]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fffe 	bl	8007bb4 <UART_Start_Receive_IT>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	e000      	b.n	8006bbe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3728      	adds	r7, #40	; 0x28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40008000 	.word	0x40008000

08006bcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b0ba      	sub	sp, #232	; 0xe8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bf6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d11b      	bne.n	8006c40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d015      	beq.n	8006c40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d105      	bne.n	8006c2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 82e3 	beq.w	80071fc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	4798      	blx	r3
      }
      return;
 8006c3e:	e2dd      	b.n	80071fc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8123 	beq.w	8006e90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c4e:	4b8d      	ldr	r3, [pc, #564]	; (8006e84 <HAL_UART_IRQHandler+0x2b8>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c5a:	4b8b      	ldr	r3, [pc, #556]	; (8006e88 <HAL_UART_IRQHandler+0x2bc>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8116 	beq.w	8006e90 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d011      	beq.n	8006c94 <HAL_UART_IRQHandler+0xc8>
 8006c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2201      	movs	r2, #1
 8006c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8a:	f043 0201 	orr.w	r2, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d011      	beq.n	8006cc4 <HAL_UART_IRQHandler+0xf8>
 8006ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cba:	f043 0204 	orr.w	r2, r3, #4
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d011      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x128>
 8006cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00b      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cea:	f043 0202 	orr.w	r2, r3, #2
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d017      	beq.n	8006d30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d105      	bne.n	8006d18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d10:	4b5c      	ldr	r3, [pc, #368]	; (8006e84 <HAL_UART_IRQHandler+0x2b8>)
 8006d12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	f043 0208 	orr.w	r2, r3, #8
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d012      	beq.n	8006d62 <HAL_UART_IRQHandler+0x196>
 8006d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00c      	beq.n	8006d62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d58:	f043 0220 	orr.w	r2, r3, #32
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8249 	beq.w	8007200 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d013      	beq.n	8006da2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d005      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d054      	beq.n	8006e70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 f816 	bl	8007df8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d146      	bne.n	8006e68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3308      	adds	r3, #8
 8006e02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1d9      	bne.n	8006dda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d017      	beq.n	8006e60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e36:	4a15      	ldr	r2, [pc, #84]	; (8006e8c <HAL_UART_IRQHandler+0x2c0>)
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fc fb62 	bl	800350a <HAL_DMA_Abort_IT>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d019      	beq.n	8006e80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5e:	e00f      	b.n	8006e80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f9e1 	bl	8007228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e66:	e00b      	b.n	8006e80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f9dd 	bl	8007228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6e:	e007      	b.n	8006e80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f9d9 	bl	8007228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006e7e:	e1bf      	b.n	8007200 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e80:	bf00      	nop
    return;
 8006e82:	e1bd      	b.n	8007200 <HAL_UART_IRQHandler+0x634>
 8006e84:	10000001 	.word	0x10000001
 8006e88:	04000120 	.word	0x04000120
 8006e8c:	08007ec5 	.word	0x08007ec5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	f040 8153 	bne.w	8007140 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 814c 	beq.w	8007140 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 8145 	beq.w	8007140 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2210      	movs	r2, #16
 8006ebc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b40      	cmp	r3, #64	; 0x40
 8006eca:	f040 80bb 	bne.w	8007044 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006edc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 818f 	beq.w	8007204 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	f080 8187 	bcs.w	8007204 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f040 8087 	bne.w	8007022 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1da      	bne.n	8006f14 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3308      	adds	r3, #8
 8006f64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e1      	bne.n	8006f5e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3308      	adds	r3, #8
 8006fba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e3      	bne.n	8006f9a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ff0:	f023 0310 	bic.w	r3, r3, #16
 8006ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007002:	65bb      	str	r3, [r7, #88]	; 0x58
 8007004:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007008:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e4      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800701c:	4618      	mov	r0, r3
 800701e:	f7fc fa18 	bl	8003452 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2202      	movs	r2, #2
 8007026:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007034:	b29b      	uxth	r3, r3
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	b29b      	uxth	r3, r3
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f8fd 	bl	800723c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007042:	e0df      	b.n	8007204 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007050:	b29b      	uxth	r3, r3
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 80d1 	beq.w	8007208 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007066:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80cc 	beq.w	8007208 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007084:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007092:	647b      	str	r3, [r7, #68]	; 0x44
 8007094:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007098:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e4      	bne.n	8007070 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	623b      	str	r3, [r7, #32]
   return(result);
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3308      	adds	r3, #8
 80070ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070ce:	633a      	str	r2, [r7, #48]	; 0x30
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e1      	bne.n	80070a6 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	60fb      	str	r3, [r7, #12]
   return(result);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0310 	bic.w	r3, r3, #16
 800710a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	69b9      	ldr	r1, [r7, #24]
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	617b      	str	r3, [r7, #20]
   return(result);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e4      	bne.n	80070f6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007132:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f87f 	bl	800723c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800713e:	e063      	b.n	8007208 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00e      	beq.n	800716a <HAL_UART_IRQHandler+0x59e>
 800714c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d008      	beq.n	800716a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007160:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fdb8 	bl	8008cd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007168:	e051      	b.n	800720e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007172:	2b00      	cmp	r3, #0
 8007174:	d014      	beq.n	80071a0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d105      	bne.n	800718e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d008      	beq.n	80071a0 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007192:	2b00      	cmp	r3, #0
 8007194:	d03a      	beq.n	800720c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
    }
    return;
 800719e:	e035      	b.n	800720c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d009      	beq.n	80071c0 <HAL_UART_IRQHandler+0x5f4>
 80071ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 f83d 	bl	8008238 <UART_EndTransmit_IT>
    return;
 80071be:	e026      	b.n	800720e <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d009      	beq.n	80071e0 <HAL_UART_IRQHandler+0x614>
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 fd91 	bl	8008d00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071de:	e016      	b.n	800720e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d010      	beq.n	800720e <HAL_UART_IRQHandler+0x642>
 80071ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da0c      	bge.n	800720e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fd79 	bl	8008cec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071fa:	e008      	b.n	800720e <HAL_UART_IRQHandler+0x642>
      return;
 80071fc:	bf00      	nop
 80071fe:	e006      	b.n	800720e <HAL_UART_IRQHandler+0x642>
    return;
 8007200:	bf00      	nop
 8007202:	e004      	b.n	800720e <HAL_UART_IRQHandler+0x642>
      return;
 8007204:	bf00      	nop
 8007206:	e002      	b.n	800720e <HAL_UART_IRQHandler+0x642>
      return;
 8007208:	bf00      	nop
 800720a:	e000      	b.n	800720e <HAL_UART_IRQHandler+0x642>
    return;
 800720c:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800720e:	37e8      	adds	r7, #232	; 0xe8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007258:	b08c      	sub	sp, #48	; 0x30
 800725a:	af00      	add	r7, sp, #0
 800725c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	431a      	orrs	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	431a      	orrs	r2, r3
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	4313      	orrs	r3, r2
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4baa      	ldr	r3, [pc, #680]	; (800752c <UART_SetConfig+0x2d8>)
 8007284:	4013      	ands	r3, r2
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800728c:	430b      	orrs	r3, r1
 800728e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a9f      	ldr	r2, [pc, #636]	; (8007530 <UART_SetConfig+0x2dc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d004      	beq.n	80072c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072bc:	4313      	orrs	r3, r2
 80072be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80072ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	6812      	ldr	r2, [r2, #0]
 80072d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072d4:	430b      	orrs	r3, r1
 80072d6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	f023 010f 	bic.w	r1, r3, #15
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a90      	ldr	r2, [pc, #576]	; (8007534 <UART_SetConfig+0x2e0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d125      	bne.n	8007344 <UART_SetConfig+0xf0>
 80072f8:	4b8f      	ldr	r3, [pc, #572]	; (8007538 <UART_SetConfig+0x2e4>)
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	2b03      	cmp	r3, #3
 8007304:	d81a      	bhi.n	800733c <UART_SetConfig+0xe8>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0xb8>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	0800731d 	.word	0x0800731d
 8007310:	0800732d 	.word	0x0800732d
 8007314:	08007325 	.word	0x08007325
 8007318:	08007335 	.word	0x08007335
 800731c:	2301      	movs	r3, #1
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007322:	e116      	b.n	8007552 <UART_SetConfig+0x2fe>
 8007324:	2302      	movs	r3, #2
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732a:	e112      	b.n	8007552 <UART_SetConfig+0x2fe>
 800732c:	2304      	movs	r3, #4
 800732e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007332:	e10e      	b.n	8007552 <UART_SetConfig+0x2fe>
 8007334:	2308      	movs	r3, #8
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733a:	e10a      	b.n	8007552 <UART_SetConfig+0x2fe>
 800733c:	2310      	movs	r3, #16
 800733e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007342:	e106      	b.n	8007552 <UART_SetConfig+0x2fe>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a7c      	ldr	r2, [pc, #496]	; (800753c <UART_SetConfig+0x2e8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d138      	bne.n	80073c0 <UART_SetConfig+0x16c>
 800734e:	4b7a      	ldr	r3, [pc, #488]	; (8007538 <UART_SetConfig+0x2e4>)
 8007350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007354:	f003 030c 	and.w	r3, r3, #12
 8007358:	2b0c      	cmp	r3, #12
 800735a:	d82d      	bhi.n	80073b8 <UART_SetConfig+0x164>
 800735c:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <UART_SetConfig+0x110>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007399 	.word	0x08007399
 8007368:	080073b9 	.word	0x080073b9
 800736c:	080073b9 	.word	0x080073b9
 8007370:	080073b9 	.word	0x080073b9
 8007374:	080073a9 	.word	0x080073a9
 8007378:	080073b9 	.word	0x080073b9
 800737c:	080073b9 	.word	0x080073b9
 8007380:	080073b9 	.word	0x080073b9
 8007384:	080073a1 	.word	0x080073a1
 8007388:	080073b9 	.word	0x080073b9
 800738c:	080073b9 	.word	0x080073b9
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073b1 	.word	0x080073b1
 8007398:	2300      	movs	r3, #0
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739e:	e0d8      	b.n	8007552 <UART_SetConfig+0x2fe>
 80073a0:	2302      	movs	r3, #2
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a6:	e0d4      	b.n	8007552 <UART_SetConfig+0x2fe>
 80073a8:	2304      	movs	r3, #4
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ae:	e0d0      	b.n	8007552 <UART_SetConfig+0x2fe>
 80073b0:	2308      	movs	r3, #8
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b6:	e0cc      	b.n	8007552 <UART_SetConfig+0x2fe>
 80073b8:	2310      	movs	r3, #16
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073be:	e0c8      	b.n	8007552 <UART_SetConfig+0x2fe>
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a5e      	ldr	r2, [pc, #376]	; (8007540 <UART_SetConfig+0x2ec>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d125      	bne.n	8007416 <UART_SetConfig+0x1c2>
 80073ca:	4b5b      	ldr	r3, [pc, #364]	; (8007538 <UART_SetConfig+0x2e4>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073d4:	2b30      	cmp	r3, #48	; 0x30
 80073d6:	d016      	beq.n	8007406 <UART_SetConfig+0x1b2>
 80073d8:	2b30      	cmp	r3, #48	; 0x30
 80073da:	d818      	bhi.n	800740e <UART_SetConfig+0x1ba>
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d00a      	beq.n	80073f6 <UART_SetConfig+0x1a2>
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d814      	bhi.n	800740e <UART_SetConfig+0x1ba>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <UART_SetConfig+0x19a>
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d008      	beq.n	80073fe <UART_SetConfig+0x1aa>
 80073ec:	e00f      	b.n	800740e <UART_SetConfig+0x1ba>
 80073ee:	2300      	movs	r3, #0
 80073f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f4:	e0ad      	b.n	8007552 <UART_SetConfig+0x2fe>
 80073f6:	2302      	movs	r3, #2
 80073f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fc:	e0a9      	b.n	8007552 <UART_SetConfig+0x2fe>
 80073fe:	2304      	movs	r3, #4
 8007400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007404:	e0a5      	b.n	8007552 <UART_SetConfig+0x2fe>
 8007406:	2308      	movs	r3, #8
 8007408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740c:	e0a1      	b.n	8007552 <UART_SetConfig+0x2fe>
 800740e:	2310      	movs	r3, #16
 8007410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007414:	e09d      	b.n	8007552 <UART_SetConfig+0x2fe>
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a4a      	ldr	r2, [pc, #296]	; (8007544 <UART_SetConfig+0x2f0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d125      	bne.n	800746c <UART_SetConfig+0x218>
 8007420:	4b45      	ldr	r3, [pc, #276]	; (8007538 <UART_SetConfig+0x2e4>)
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800742a:	2bc0      	cmp	r3, #192	; 0xc0
 800742c:	d016      	beq.n	800745c <UART_SetConfig+0x208>
 800742e:	2bc0      	cmp	r3, #192	; 0xc0
 8007430:	d818      	bhi.n	8007464 <UART_SetConfig+0x210>
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d00a      	beq.n	800744c <UART_SetConfig+0x1f8>
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d814      	bhi.n	8007464 <UART_SetConfig+0x210>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <UART_SetConfig+0x1f0>
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d008      	beq.n	8007454 <UART_SetConfig+0x200>
 8007442:	e00f      	b.n	8007464 <UART_SetConfig+0x210>
 8007444:	2300      	movs	r3, #0
 8007446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744a:	e082      	b.n	8007552 <UART_SetConfig+0x2fe>
 800744c:	2302      	movs	r3, #2
 800744e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007452:	e07e      	b.n	8007552 <UART_SetConfig+0x2fe>
 8007454:	2304      	movs	r3, #4
 8007456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745a:	e07a      	b.n	8007552 <UART_SetConfig+0x2fe>
 800745c:	2308      	movs	r3, #8
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007462:	e076      	b.n	8007552 <UART_SetConfig+0x2fe>
 8007464:	2310      	movs	r3, #16
 8007466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746a:	e072      	b.n	8007552 <UART_SetConfig+0x2fe>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a35      	ldr	r2, [pc, #212]	; (8007548 <UART_SetConfig+0x2f4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d12a      	bne.n	80074cc <UART_SetConfig+0x278>
 8007476:	4b30      	ldr	r3, [pc, #192]	; (8007538 <UART_SetConfig+0x2e4>)
 8007478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007484:	d01a      	beq.n	80074bc <UART_SetConfig+0x268>
 8007486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800748a:	d81b      	bhi.n	80074c4 <UART_SetConfig+0x270>
 800748c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007490:	d00c      	beq.n	80074ac <UART_SetConfig+0x258>
 8007492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007496:	d815      	bhi.n	80074c4 <UART_SetConfig+0x270>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <UART_SetConfig+0x250>
 800749c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a0:	d008      	beq.n	80074b4 <UART_SetConfig+0x260>
 80074a2:	e00f      	b.n	80074c4 <UART_SetConfig+0x270>
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074aa:	e052      	b.n	8007552 <UART_SetConfig+0x2fe>
 80074ac:	2302      	movs	r3, #2
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b2:	e04e      	b.n	8007552 <UART_SetConfig+0x2fe>
 80074b4:	2304      	movs	r3, #4
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ba:	e04a      	b.n	8007552 <UART_SetConfig+0x2fe>
 80074bc:	2308      	movs	r3, #8
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c2:	e046      	b.n	8007552 <UART_SetConfig+0x2fe>
 80074c4:	2310      	movs	r3, #16
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ca:	e042      	b.n	8007552 <UART_SetConfig+0x2fe>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a17      	ldr	r2, [pc, #92]	; (8007530 <UART_SetConfig+0x2dc>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d13a      	bne.n	800754c <UART_SetConfig+0x2f8>
 80074d6:	4b18      	ldr	r3, [pc, #96]	; (8007538 <UART_SetConfig+0x2e4>)
 80074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074e4:	d01a      	beq.n	800751c <UART_SetConfig+0x2c8>
 80074e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074ea:	d81b      	bhi.n	8007524 <UART_SetConfig+0x2d0>
 80074ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074f0:	d00c      	beq.n	800750c <UART_SetConfig+0x2b8>
 80074f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074f6:	d815      	bhi.n	8007524 <UART_SetConfig+0x2d0>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <UART_SetConfig+0x2b0>
 80074fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007500:	d008      	beq.n	8007514 <UART_SetConfig+0x2c0>
 8007502:	e00f      	b.n	8007524 <UART_SetConfig+0x2d0>
 8007504:	2300      	movs	r3, #0
 8007506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800750a:	e022      	b.n	8007552 <UART_SetConfig+0x2fe>
 800750c:	2302      	movs	r3, #2
 800750e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007512:	e01e      	b.n	8007552 <UART_SetConfig+0x2fe>
 8007514:	2304      	movs	r3, #4
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800751a:	e01a      	b.n	8007552 <UART_SetConfig+0x2fe>
 800751c:	2308      	movs	r3, #8
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007522:	e016      	b.n	8007552 <UART_SetConfig+0x2fe>
 8007524:	2310      	movs	r3, #16
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752a:	e012      	b.n	8007552 <UART_SetConfig+0x2fe>
 800752c:	cfff69f3 	.word	0xcfff69f3
 8007530:	40008000 	.word	0x40008000
 8007534:	40013800 	.word	0x40013800
 8007538:	40021000 	.word	0x40021000
 800753c:	40004400 	.word	0x40004400
 8007540:	40004800 	.word	0x40004800
 8007544:	40004c00 	.word	0x40004c00
 8007548:	40005000 	.word	0x40005000
 800754c:	2310      	movs	r3, #16
 800754e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4aae      	ldr	r2, [pc, #696]	; (8007810 <UART_SetConfig+0x5bc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	f040 8097 	bne.w	800768c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800755e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007562:	2b08      	cmp	r3, #8
 8007564:	d823      	bhi.n	80075ae <UART_SetConfig+0x35a>
 8007566:	a201      	add	r2, pc, #4	; (adr r2, 800756c <UART_SetConfig+0x318>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	08007591 	.word	0x08007591
 8007570:	080075af 	.word	0x080075af
 8007574:	08007599 	.word	0x08007599
 8007578:	080075af 	.word	0x080075af
 800757c:	0800759f 	.word	0x0800759f
 8007580:	080075af 	.word	0x080075af
 8007584:	080075af 	.word	0x080075af
 8007588:	080075af 	.word	0x080075af
 800758c:	080075a7 	.word	0x080075a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007590:	f7fd f9b6 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8007594:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007596:	e010      	b.n	80075ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007598:	4b9e      	ldr	r3, [pc, #632]	; (8007814 <UART_SetConfig+0x5c0>)
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800759c:	e00d      	b.n	80075ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759e:	f7fd f917 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 80075a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075a4:	e009      	b.n	80075ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075ac:	e005      	b.n	80075ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8130 	beq.w	8007822 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	4a94      	ldr	r2, [pc, #592]	; (8007818 <UART_SetConfig+0x5c4>)
 80075c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	4413      	add	r3, r2
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d305      	bcc.n	80075f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d903      	bls.n	80075fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075f8:	e113      	b.n	8007822 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	2200      	movs	r2, #0
 80075fe:	60bb      	str	r3, [r7, #8]
 8007600:	60fa      	str	r2, [r7, #12]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	4a84      	ldr	r2, [pc, #528]	; (8007818 <UART_SetConfig+0x5c4>)
 8007608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800760c:	b29b      	uxth	r3, r3
 800760e:	2200      	movs	r2, #0
 8007610:	603b      	str	r3, [r7, #0]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800761c:	f7f9 fa6e 	bl	8000afc <__aeabi_uldivmod>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4610      	mov	r0, r2
 8007626:	4619      	mov	r1, r3
 8007628:	f04f 0200 	mov.w	r2, #0
 800762c:	f04f 0300 	mov.w	r3, #0
 8007630:	020b      	lsls	r3, r1, #8
 8007632:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007636:	0202      	lsls	r2, r0, #8
 8007638:	6979      	ldr	r1, [r7, #20]
 800763a:	6849      	ldr	r1, [r1, #4]
 800763c:	0849      	lsrs	r1, r1, #1
 800763e:	2000      	movs	r0, #0
 8007640:	460c      	mov	r4, r1
 8007642:	4605      	mov	r5, r0
 8007644:	eb12 0804 	adds.w	r8, r2, r4
 8007648:	eb43 0905 	adc.w	r9, r3, r5
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	469a      	mov	sl, r3
 8007654:	4693      	mov	fp, r2
 8007656:	4652      	mov	r2, sl
 8007658:	465b      	mov	r3, fp
 800765a:	4640      	mov	r0, r8
 800765c:	4649      	mov	r1, r9
 800765e:	f7f9 fa4d 	bl	8000afc <__aeabi_uldivmod>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4613      	mov	r3, r2
 8007668:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007670:	d308      	bcc.n	8007684 <UART_SetConfig+0x430>
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007678:	d204      	bcs.n	8007684 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6a3a      	ldr	r2, [r7, #32]
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	e0ce      	b.n	8007822 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800768a:	e0ca      	b.n	8007822 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007694:	d166      	bne.n	8007764 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800769a:	2b08      	cmp	r3, #8
 800769c:	d827      	bhi.n	80076ee <UART_SetConfig+0x49a>
 800769e:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <UART_SetConfig+0x450>)
 80076a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a4:	080076c9 	.word	0x080076c9
 80076a8:	080076d1 	.word	0x080076d1
 80076ac:	080076d9 	.word	0x080076d9
 80076b0:	080076ef 	.word	0x080076ef
 80076b4:	080076df 	.word	0x080076df
 80076b8:	080076ef 	.word	0x080076ef
 80076bc:	080076ef 	.word	0x080076ef
 80076c0:	080076ef 	.word	0x080076ef
 80076c4:	080076e7 	.word	0x080076e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c8:	f7fd f91a 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 80076cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076ce:	e014      	b.n	80076fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d0:	f7fd f92c 	bl	800492c <HAL_RCC_GetPCLK2Freq>
 80076d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076d6:	e010      	b.n	80076fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076d8:	4b4e      	ldr	r3, [pc, #312]	; (8007814 <UART_SetConfig+0x5c0>)
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076dc:	e00d      	b.n	80076fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076de:	f7fd f877 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 80076e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076e4:	e009      	b.n	80076fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076ec:	e005      	b.n	80076fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 8090 	beq.w	8007822 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	4a44      	ldr	r2, [pc, #272]	; (8007818 <UART_SetConfig+0x5c4>)
 8007708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800770c:	461a      	mov	r2, r3
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	fbb3 f3f2 	udiv	r3, r3, r2
 8007714:	005a      	lsls	r2, r3, #1
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	441a      	add	r2, r3
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	fbb2 f3f3 	udiv	r3, r2, r3
 8007726:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	2b0f      	cmp	r3, #15
 800772c:	d916      	bls.n	800775c <UART_SetConfig+0x508>
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007734:	d212      	bcs.n	800775c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	b29b      	uxth	r3, r3
 800773a:	f023 030f 	bic.w	r3, r3, #15
 800773e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	085b      	lsrs	r3, r3, #1
 8007744:	b29b      	uxth	r3, r3
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	b29a      	uxth	r2, r3
 800774c:	8bfb      	ldrh	r3, [r7, #30]
 800774e:	4313      	orrs	r3, r2
 8007750:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	8bfa      	ldrh	r2, [r7, #30]
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	e062      	b.n	8007822 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007762:	e05e      	b.n	8007822 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007764:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007768:	2b08      	cmp	r3, #8
 800776a:	d828      	bhi.n	80077be <UART_SetConfig+0x56a>
 800776c:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <UART_SetConfig+0x520>)
 800776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007772:	bf00      	nop
 8007774:	08007799 	.word	0x08007799
 8007778:	080077a1 	.word	0x080077a1
 800777c:	080077a9 	.word	0x080077a9
 8007780:	080077bf 	.word	0x080077bf
 8007784:	080077af 	.word	0x080077af
 8007788:	080077bf 	.word	0x080077bf
 800778c:	080077bf 	.word	0x080077bf
 8007790:	080077bf 	.word	0x080077bf
 8007794:	080077b7 	.word	0x080077b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007798:	f7fd f8b2 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 800779c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800779e:	e014      	b.n	80077ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a0:	f7fd f8c4 	bl	800492c <HAL_RCC_GetPCLK2Freq>
 80077a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077a6:	e010      	b.n	80077ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077a8:	4b1a      	ldr	r3, [pc, #104]	; (8007814 <UART_SetConfig+0x5c0>)
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077ac:	e00d      	b.n	80077ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ae:	f7fd f80f 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 80077b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077b4:	e009      	b.n	80077ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077bc:	e005      	b.n	80077ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80077c8:	bf00      	nop
    }

    if (pclk != 0U)
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d028      	beq.n	8007822 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	4a10      	ldr	r2, [pc, #64]	; (8007818 <UART_SetConfig+0x5c4>)
 80077d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077da:	461a      	mov	r2, r3
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	fbb3 f2f2 	udiv	r2, r3, r2
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	085b      	lsrs	r3, r3, #1
 80077e8:	441a      	add	r2, r3
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	2b0f      	cmp	r3, #15
 80077f8:	d910      	bls.n	800781c <UART_SetConfig+0x5c8>
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007800:	d20c      	bcs.n	800781c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	b29a      	uxth	r2, r3
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60da      	str	r2, [r3, #12]
 800780c:	e009      	b.n	8007822 <UART_SetConfig+0x5ce>
 800780e:	bf00      	nop
 8007810:	40008000 	.word	0x40008000
 8007814:	00f42400 	.word	0x00f42400
 8007818:	080090d8 	.word	0x080090d8
      }
      else
      {
        ret = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2201      	movs	r2, #1
 8007826:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2201      	movs	r2, #1
 800782e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2200      	movs	r2, #0
 8007836:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2200      	movs	r2, #0
 800783c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800783e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007842:	4618      	mov	r0, r3
 8007844:	3730      	adds	r7, #48	; 0x30
 8007846:	46bd      	mov	sp, r7
 8007848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800784c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01a      	beq.n	8007962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800794a:	d10a      	bne.n	8007962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	605a      	str	r2, [r3, #4]
  }
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b098      	sub	sp, #96	; 0x60
 8007994:	af02      	add	r7, sp, #8
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079a0:	f7fb fc16 	bl	80031d0 <HAL_GetTick>
 80079a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d12f      	bne.n	8007a14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079bc:	2200      	movs	r2, #0
 80079be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f88e 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d022      	beq.n	8007a14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e2:	653b      	str	r3, [r7, #80]	; 0x50
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ec:	647b      	str	r3, [r7, #68]	; 0x44
 80079ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e6      	bne.n	80079ce <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e063      	b.n	8007adc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d149      	bne.n	8007ab6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f857 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d03c      	beq.n	8007ab6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	623b      	str	r3, [r7, #32]
   return(result);
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e6      	bne.n	8007a3c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3308      	adds	r3, #8
 8007a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f023 0301 	bic.w	r3, r3, #1
 8007a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a8e:	61fa      	str	r2, [r7, #28]
 8007a90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	69b9      	ldr	r1, [r7, #24]
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e5      	bne.n	8007a6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e012      	b.n	8007adc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3758      	adds	r7, #88	; 0x58
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	4613      	mov	r3, r2
 8007af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af4:	e049      	b.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d045      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afe:	f7fb fb67 	bl	80031d0 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d302      	bcc.n	8007b14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e048      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d031      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d110      	bne.n	8007b56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2208      	movs	r2, #8
 8007b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f95b 	bl	8007df8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2208      	movs	r2, #8
 8007b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e029      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b64:	d111      	bne.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f941 	bl	8007df8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e00f      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69da      	ldr	r2, [r3, #28]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4013      	ands	r3, r2
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	bf0c      	ite	eq
 8007b9a:	2301      	moveq	r3, #1
 8007b9c:	2300      	movne	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d0a6      	beq.n	8007af6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b0a3      	sub	sp, #140	; 0x8c
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	88fa      	ldrh	r2, [r7, #6]
 8007bcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	88fa      	ldrh	r2, [r7, #6]
 8007bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be6:	d10e      	bne.n	8007c06 <UART_Start_Receive_IT+0x52>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d105      	bne.n	8007bfc <UART_Start_Receive_IT+0x48>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007bf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bfa:	e02d      	b.n	8007c58 <UART_Start_Receive_IT+0xa4>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	22ff      	movs	r2, #255	; 0xff
 8007c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c04:	e028      	b.n	8007c58 <UART_Start_Receive_IT+0xa4>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10d      	bne.n	8007c2a <UART_Start_Receive_IT+0x76>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d104      	bne.n	8007c20 <UART_Start_Receive_IT+0x6c>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	22ff      	movs	r2, #255	; 0xff
 8007c1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c1e:	e01b      	b.n	8007c58 <UART_Start_Receive_IT+0xa4>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	227f      	movs	r2, #127	; 0x7f
 8007c24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c28:	e016      	b.n	8007c58 <UART_Start_Receive_IT+0xa4>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c32:	d10d      	bne.n	8007c50 <UART_Start_Receive_IT+0x9c>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d104      	bne.n	8007c46 <UART_Start_Receive_IT+0x92>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	227f      	movs	r2, #127	; 0x7f
 8007c40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c44:	e008      	b.n	8007c58 <UART_Start_Receive_IT+0xa4>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	223f      	movs	r2, #63	; 0x3f
 8007c4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c4e:	e003      	b.n	8007c58 <UART_Start_Receive_IT+0xa4>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2222      	movs	r2, #34	; 0x22
 8007c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c7a:	f043 0301 	orr.w	r3, r3, #1
 8007c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c8c:	673a      	str	r2, [r7, #112]	; 0x70
 8007c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007c92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e3      	bne.n	8007c68 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca8:	d14f      	bne.n	8007d4a <UART_Start_Receive_IT+0x196>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cb0:	88fa      	ldrh	r2, [r7, #6]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d349      	bcc.n	8007d4a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cbe:	d107      	bne.n	8007cd0 <UART_Start_Receive_IT+0x11c>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d103      	bne.n	8007cd0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4a47      	ldr	r2, [pc, #284]	; (8007de8 <UART_Start_Receive_IT+0x234>)
 8007ccc:	675a      	str	r2, [r3, #116]	; 0x74
 8007cce:	e002      	b.n	8007cd6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4a46      	ldr	r2, [pc, #280]	; (8007dec <UART_Start_Receive_IT+0x238>)
 8007cd4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01a      	beq.n	8007d14 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d02:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e4      	bne.n	8007cde <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3308      	adds	r3, #8
 8007d32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d34:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e5      	bne.n	8007d14 <UART_Start_Receive_IT+0x160>
 8007d48:	e046      	b.n	8007dd8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d52:	d107      	bne.n	8007d64 <UART_Start_Receive_IT+0x1b0>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4a24      	ldr	r2, [pc, #144]	; (8007df0 <UART_Start_Receive_IT+0x23c>)
 8007d60:	675a      	str	r2, [r3, #116]	; 0x74
 8007d62:	e002      	b.n	8007d6a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a23      	ldr	r2, [pc, #140]	; (8007df4 <UART_Start_Receive_IT+0x240>)
 8007d68:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d019      	beq.n	8007da6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d86:	677b      	str	r3, [r7, #116]	; 0x74
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
 8007d92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e6      	bne.n	8007d72 <UART_Start_Receive_IT+0x1be>
 8007da4:	e018      	b.n	8007dd8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	613b      	str	r3, [r7, #16]
   return(result);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f043 0320 	orr.w	r3, r3, #32
 8007dba:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc4:	623b      	str	r3, [r7, #32]
 8007dc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	69f9      	ldr	r1, [r7, #28]
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e6      	bne.n	8007da6 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	378c      	adds	r7, #140	; 0x8c
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	0800896d 	.word	0x0800896d
 8007dec:	08008609 	.word	0x08008609
 8007df0:	0800844d 	.word	0x0800844d
 8007df4:	08008291 	.word	0x08008291

08007df8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b095      	sub	sp, #84	; 0x54
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e1e:	643b      	str	r3, [r7, #64]	; 0x40
 8007e20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e6      	bne.n	8007e00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3308      	adds	r3, #8
 8007e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e48:	f023 0301 	bic.w	r3, r3, #1
 8007e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3308      	adds	r3, #8
 8007e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e3      	bne.n	8007e32 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d118      	bne.n	8007ea4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f023 0310 	bic.w	r3, r3, #16
 8007e86:	647b      	str	r3, [r7, #68]	; 0x44
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e90:	61bb      	str	r3, [r7, #24]
 8007e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	6979      	ldr	r1, [r7, #20]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e6      	bne.n	8007e72 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007eb8:	bf00      	nop
 8007eba:	3754      	adds	r7, #84	; 0x54
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff f9a0 	bl	8007228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ee8:	bf00      	nop
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b08f      	sub	sp, #60	; 0x3c
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efe:	2b21      	cmp	r3, #33	; 0x21
 8007f00:	d14d      	bne.n	8007f9e <UART_TxISR_8BIT+0xae>
  {
    if (huart->TxXferCount == 0U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d132      	bne.n	8007f74 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f22:	637b      	str	r3, [r7, #52]	; 0x34
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f2e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e6      	bne.n	8007f0e <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f54:	633b      	str	r3, [r7, #48]	; 0x30
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	61bb      	str	r3, [r7, #24]
 8007f60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6979      	ldr	r1, [r7, #20]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e6      	bne.n	8007f40 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007f72:	e014      	b.n	8007f9e <UART_TxISR_8BIT+0xae>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007f9e:	bf00      	nop
 8007fa0:	373c      	adds	r7, #60	; 0x3c
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b091      	sub	sp, #68	; 0x44
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb8:	2b21      	cmp	r3, #33	; 0x21
 8007fba:	d151      	bne.n	8008060 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d132      	bne.n	800802e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8007fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e6      	bne.n	8007fc8 <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	60fb      	str	r3, [r7, #12]
   return(result);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800e:	637b      	str	r3, [r7, #52]	; 0x34
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	69b9      	ldr	r1, [r7, #24]
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	617b      	str	r3, [r7, #20]
   return(result);
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e6      	bne.n	8007ffa <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800802c:	e018      	b.n	8008060 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008032:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008036:	881a      	ldrh	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008040:	b292      	uxth	r2, r2
 8008042:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008048:	1c9a      	adds	r2, r3, #2
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008060:	bf00      	nop
 8008062:	3744      	adds	r7, #68	; 0x44
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b091      	sub	sp, #68	; 0x44
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807a:	2b21      	cmp	r3, #33	; 0x21
 800807c:	d161      	bne.n	8008142 <UART_TxISR_8BIT_FIFOEN+0xd6>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008084:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008086:	e058      	b.n	800813a <UART_TxISR_8BIT_FIFOEN+0xce>
    {
      if (huart->TxXferCount == 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800808e:	b29b      	uxth	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d133      	bne.n	80080fc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3308      	adds	r3, #8
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	623b      	str	r3, [r7, #32]
   return(result);
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80080aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3308      	adds	r3, #8
 80080b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080b4:	633a      	str	r2, [r7, #48]	; 0x30
 80080b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080bc:	e841 2300 	strex	r3, r2, [r1]
 80080c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e5      	bne.n	8008094 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080dc:	637b      	str	r3, [r7, #52]	; 0x34
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	69b9      	ldr	r1, [r7, #24]
 80080ec:	69fa      	ldr	r2, [r7, #28]
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	617b      	str	r3, [r7, #20]
   return(result);
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e6      	bne.n	80080c8 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80080fa:	e022      	b.n	8008142 <UART_TxISR_8BIT_FIFOEN+0xd6>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008106:	2b00      	cmp	r3, #0
 8008108:	d014      	beq.n	8008134 <UART_TxISR_8BIT_FIFOEN+0xc8>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	b292      	uxth	r2, r2
 8008116:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008134:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008136:	3b01      	subs	r3, #1
 8008138:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800813a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1a3      	bne.n	8008088 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008140:	e7ff      	b.n	8008142 <UART_TxISR_8BIT_FIFOEN+0xd6>
 8008142:	bf00      	nop
 8008144:	3744      	adds	r7, #68	; 0x44
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800814e:	b480      	push	{r7}
 8008150:	b091      	sub	sp, #68	; 0x44
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	2b21      	cmp	r3, #33	; 0x21
 800815e:	d165      	bne.n	800822c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008166:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008168:	e05c      	b.n	8008224 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d133      	bne.n	80081de <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3308      	adds	r3, #8
 800817c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	61fb      	str	r3, [r7, #28]
   return(result);
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800819c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e5      	bne.n	8008176 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	e853 3f00 	ldrex	r3, [r3]
 80081b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081be:	633b      	str	r3, [r7, #48]	; 0x30
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	61bb      	str	r3, [r7, #24]
 80081ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6979      	ldr	r1, [r7, #20]
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	613b      	str	r3, [r7, #16]
   return(result);
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e6      	bne.n	80081aa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80081dc:	e026      	b.n	800822c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d018      	beq.n	800821e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	881a      	ldrh	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081fe:	b292      	uxth	r2, r2
 8008200:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008206:	1c9a      	adds	r2, r3, #2
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008212:	b29b      	uxth	r3, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	b29a      	uxth	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800821e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008220:	3b01      	subs	r3, #1
 8008222:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008224:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008226:	2b00      	cmp	r3, #0
 8008228:	d19f      	bne.n	800816a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800822a:	e7ff      	b.n	800822c <UART_TxISR_16BIT_FIFOEN+0xde>
 800822c:	bf00      	nop
 800822e:	3744      	adds	r7, #68	; 0x44
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b088      	sub	sp, #32
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	60bb      	str	r3, [r7, #8]
   return(result);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008254:	61fb      	str	r3, [r7, #28]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	6979      	ldr	r1, [r7, #20]
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	613b      	str	r3, [r7, #16]
   return(result);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e6      	bne.n	8008240 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2220      	movs	r2, #32
 8008276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7fe ffc7 	bl	8007214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008286:	bf00      	nop
 8008288:	3720      	adds	r7, #32
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b09c      	sub	sp, #112	; 0x70
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800829e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a8:	2b22      	cmp	r3, #34	; 0x22
 80082aa:	f040 80be 	bne.w	800842a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082bc:	b2d9      	uxtb	r1, r3
 80082be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c8:	400a      	ands	r2, r1
 80082ca:	b2d2      	uxtb	r2, r2
 80082cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 80a3 	bne.w	800843e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800830c:	66bb      	str	r3, [r7, #104]	; 0x68
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008316:	65bb      	str	r3, [r7, #88]	; 0x58
 8008318:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800831c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e6      	bne.n	80082f8 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800833a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833c:	f023 0301 	bic.w	r3, r3, #1
 8008340:	667b      	str	r3, [r7, #100]	; 0x64
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800834a:	647a      	str	r2, [r7, #68]	; 0x44
 800834c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e5      	bne.n	800832a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2220      	movs	r2, #32
 8008362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a34      	ldr	r2, [pc, #208]	; (8008448 <UART_RxISR_8BIT+0x1b8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d01f      	beq.n	80083bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d018      	beq.n	80083bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	623b      	str	r3, [r7, #32]
   return(result);
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800839e:	663b      	str	r3, [r7, #96]	; 0x60
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083a8:	633b      	str	r3, [r7, #48]	; 0x30
 80083aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e6      	bne.n	800838a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d12e      	bne.n	8008422 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0310 	bic.w	r3, r3, #16
 80083de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e8:	61fb      	str	r3, [r7, #28]
 80083ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	69b9      	ldr	r1, [r7, #24]
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	617b      	str	r3, [r7, #20]
   return(result);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e6      	bne.n	80083ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	f003 0310 	and.w	r3, r3, #16
 8008406:	2b10      	cmp	r3, #16
 8008408:	d103      	bne.n	8008412 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2210      	movs	r2, #16
 8008410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7fe ff0e 	bl	800723c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008420:	e00d      	b.n	800843e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fa f9e8 	bl	80027f8 <HAL_UART_RxCpltCallback>
}
 8008428:	e009      	b.n	800843e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	8b1b      	ldrh	r3, [r3, #24]
 8008430:	b29a      	uxth	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0208 	orr.w	r2, r2, #8
 800843a:	b292      	uxth	r2, r2
 800843c:	831a      	strh	r2, [r3, #24]
}
 800843e:	bf00      	nop
 8008440:	3770      	adds	r7, #112	; 0x70
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	40008000 	.word	0x40008000

0800844c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b09c      	sub	sp, #112	; 0x70
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800845a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008464:	2b22      	cmp	r3, #34	; 0x22
 8008466:	f040 80be 	bne.w	80085e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008470:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008478:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800847a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800847e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008482:	4013      	ands	r3, r2
 8008484:	b29a      	uxth	r2, r3
 8008486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008488:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848e:	1c9a      	adds	r2, r3, #2
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f040 80a3 	bne.w	80085fa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80084c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084c8:	667b      	str	r3, [r7, #100]	; 0x64
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084d2:	657b      	str	r3, [r7, #84]	; 0x54
 80084d4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e6      	bne.n	80084b4 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3308      	adds	r3, #8
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	663b      	str	r3, [r7, #96]	; 0x60
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3308      	adds	r3, #8
 8008504:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008506:	643a      	str	r2, [r7, #64]	; 0x40
 8008508:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800850c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e5      	bne.n	80084e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a34      	ldr	r2, [pc, #208]	; (8008604 <UART_RxISR_16BIT+0x1b8>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d01f      	beq.n	8008578 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d018      	beq.n	8008578 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	61fb      	str	r3, [r7, #28]
   return(result);
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800855a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008566:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800856a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e6      	bne.n	8008546 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800857c:	2b01      	cmp	r3, #1
 800857e:	d12e      	bne.n	80085de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	60bb      	str	r3, [r7, #8]
   return(result);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f023 0310 	bic.w	r3, r3, #16
 800859a:	65bb      	str	r3, [r7, #88]	; 0x58
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085a4:	61bb      	str	r3, [r7, #24]
 80085a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6979      	ldr	r1, [r7, #20]
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	613b      	str	r3, [r7, #16]
   return(result);
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e6      	bne.n	8008586 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	f003 0310 	and.w	r3, r3, #16
 80085c2:	2b10      	cmp	r3, #16
 80085c4:	d103      	bne.n	80085ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2210      	movs	r2, #16
 80085cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fe fe30 	bl	800723c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085dc:	e00d      	b.n	80085fa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fa f90a 	bl	80027f8 <HAL_UART_RxCpltCallback>
}
 80085e4:	e009      	b.n	80085fa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	8b1b      	ldrh	r3, [r3, #24]
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0208 	orr.w	r2, r2, #8
 80085f6:	b292      	uxth	r2, r2
 80085f8:	831a      	strh	r2, [r3, #24]
}
 80085fa:	bf00      	nop
 80085fc:	3770      	adds	r7, #112	; 0x70
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	40008000 	.word	0x40008000

08008608 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b0ac      	sub	sp, #176	; 0xb0
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008616:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800863e:	2b22      	cmp	r3, #34	; 0x22
 8008640:	f040 8182 	bne.w	8008948 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800864a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800864e:	e125      	b.n	800889c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008656:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800865a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800865e:	b2d9      	uxtb	r1, r3
 8008660:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008664:	b2da      	uxtb	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866a:	400a      	ands	r2, r1
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008680:	b29b      	uxth	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d053      	beq.n	800874a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d011      	beq.n	80086d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80086ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00b      	beq.n	80086d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2201      	movs	r2, #1
 80086c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c8:	f043 0201 	orr.w	r2, r3, #1
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d011      	beq.n	8008702 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80086de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00b      	beq.n	8008702 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2202      	movs	r2, #2
 80086f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f8:	f043 0204 	orr.w	r2, r3, #4
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d011      	beq.n	8008732 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800870e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2204      	movs	r2, #4
 8008720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008728:	f043 0202 	orr.w	r2, r3, #2
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008738:	2b00      	cmp	r3, #0
 800873a:	d006      	beq.n	800874a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7fe fd73 	bl	8007228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	f040 80a2 	bne.w	800889c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800876c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800877a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800877c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008780:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e4      	bne.n	8008758 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800879e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087a4:	f023 0301 	bic.w	r3, r3, #1
 80087a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3308      	adds	r3, #8
 80087b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80087b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80087bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80087c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1e1      	bne.n	800878e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2220      	movs	r2, #32
 80087ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a60      	ldr	r2, [pc, #384]	; (8008964 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d021      	beq.n	800882c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d01a      	beq.n	800882c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008806:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800880a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008818:	657b      	str	r3, [r7, #84]	; 0x54
 800881a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800881e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e4      	bne.n	80087f6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008830:	2b01      	cmp	r3, #1
 8008832:	d130      	bne.n	8008896 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	f023 0310 	bic.w	r3, r3, #16
 800884e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800885c:	643b      	str	r3, [r7, #64]	; 0x40
 800885e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008860:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008864:	e841 2300 	strex	r3, r2, [r1]
 8008868:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e4      	bne.n	800883a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	f003 0310 	and.w	r3, r3, #16
 800887a:	2b10      	cmp	r3, #16
 800887c:	d103      	bne.n	8008886 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2210      	movs	r2, #16
 8008884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7fe fcd4 	bl	800723c <HAL_UARTEx_RxEventCallback>
 8008894:	e002      	b.n	800889c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7f9 ffae 	bl	80027f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800889c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d006      	beq.n	80088b2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80088a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f47f aecf 	bne.w	8008650 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d04b      	beq.n	800895c <UART_RxISR_8BIT_FIFOEN+0x354>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d244      	bcs.n	800895c <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3308      	adds	r3, #8
 80088d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3308      	adds	r3, #8
 80088f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80088f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e3      	bne.n	80088d2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a16      	ldr	r2, [pc, #88]	; (8008968 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800890e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	60bb      	str	r3, [r7, #8]
   return(result);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f043 0320 	orr.w	r3, r3, #32
 8008924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	461a      	mov	r2, r3
 800892e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008932:	61bb      	str	r3, [r7, #24]
 8008934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	6979      	ldr	r1, [r7, #20]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	613b      	str	r3, [r7, #16]
   return(result);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e4      	bne.n	8008910 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008946:	e009      	b.n	800895c <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	8b1b      	ldrh	r3, [r3, #24]
 800894e:	b29a      	uxth	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0208 	orr.w	r2, r2, #8
 8008958:	b292      	uxth	r2, r2
 800895a:	831a      	strh	r2, [r3, #24]
}
 800895c:	bf00      	nop
 800895e:	37b0      	adds	r7, #176	; 0xb0
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40008000 	.word	0x40008000
 8008968:	08008291 	.word	0x08008291

0800896c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b0ae      	sub	sp, #184	; 0xb8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800897a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69db      	ldr	r3, [r3, #28]
 8008984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089a2:	2b22      	cmp	r3, #34	; 0x22
 80089a4:	f040 8186 	bne.w	8008cb4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089ae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089b2:	e129      	b.n	8008c08 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089ba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80089c6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80089ca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80089ce:	4013      	ands	r3, r2
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089dc:	1c9a      	adds	r2, r3, #2
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80089fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a02:	f003 0307 	and.w	r3, r3, #7
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d053      	beq.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d011      	beq.n	8008a3a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00b      	beq.n	8008a3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2201      	movs	r2, #1
 8008a28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a30:	f043 0201 	orr.w	r2, r3, #1
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d011      	beq.n	8008a6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00b      	beq.n	8008a6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2202      	movs	r2, #2
 8008a58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a60:	f043 0204 	orr.w	r2, r3, #4
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d011      	beq.n	8008a9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008a76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00b      	beq.n	8008a9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2204      	movs	r2, #4
 8008a88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a90:	f043 0202 	orr.w	r2, r3, #2
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d006      	beq.n	8008ab2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7fe fbbf 	bl	8007228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 80a4 	bne.w	8008c08 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	461a      	mov	r2, r3
 8008ade:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ae6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008aea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1e2      	bne.n	8008ac0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3308      	adds	r3, #8
 8008b00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b10:	f023 0301 	bic.w	r3, r3, #1
 8008b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008b22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e1      	bne.n	8008afa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a60      	ldr	r2, [pc, #384]	; (8008cd0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d021      	beq.n	8008b98 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d01a      	beq.n	8008b98 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b86:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b8c:	e841 2300 	strex	r3, r2, [r1]
 8008b90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1e4      	bne.n	8008b62 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d130      	bne.n	8008c02 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb6:	f023 0310 	bic.w	r3, r3, #16
 8008bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e4      	bne.n	8008ba6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	f003 0310 	and.w	r3, r3, #16
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d103      	bne.n	8008bf2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2210      	movs	r2, #16
 8008bf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fe fb1e 	bl	800723c <HAL_UARTEx_RxEventCallback>
 8008c00:	e002      	b.n	8008c08 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7f9 fdf8 	bl	80027f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c08:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d006      	beq.n	8008c1e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008c10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f47f aecb 	bne.w	80089b4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c24:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c28:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d04b      	beq.n	8008cc8 <UART_RxISR_16BIT_FIFOEN+0x35c>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c36:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d244      	bcs.n	8008cc8 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3308      	adds	r3, #8
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c62:	633a      	str	r2, [r7, #48]	; 0x30
 8008c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e3      	bne.n	8008c3e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a16      	ldr	r2, [pc, #88]	; (8008cd4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008c7a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f043 0320 	orr.w	r3, r3, #32
 8008c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c9e:	61fb      	str	r3, [r7, #28]
 8008ca0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	69b9      	ldr	r1, [r7, #24]
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	617b      	str	r3, [r7, #20]
   return(result);
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e4      	bne.n	8008c7c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cb2:	e009      	b.n	8008cc8 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	8b1b      	ldrh	r3, [r3, #24]
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0208 	orr.w	r2, r2, #8
 8008cc4:	b292      	uxth	r2, r2
 8008cc6:	831a      	strh	r2, [r3, #24]
}
 8008cc8:	bf00      	nop
 8008cca:	37b8      	adds	r7, #184	; 0xb8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	40008000 	.word	0x40008000
 8008cd4:	0800844d 	.word	0x0800844d

08008cd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_UARTEx_DisableFifoMode+0x16>
 8008d26:	2302      	movs	r3, #2
 8008d28:	e027      	b.n	8008d7a <HAL_UARTEx_DisableFifoMode+0x66>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2224      	movs	r2, #36	; 0x24
 8008d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f022 0201 	bic.w	r2, r2, #1
 8008d50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d101      	bne.n	8008d9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e02d      	b.n	8008dfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2224      	movs	r2, #36	; 0x24
 8008daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0201 	bic.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f850 	bl	8008e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d101      	bne.n	8008e1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e02d      	b.n	8008e76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2224      	movs	r2, #36	; 0x24
 8008e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0201 	bic.w	r2, r2, #1
 8008e40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f812 	bl	8008e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d108      	bne.n	8008ea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ea0:	e031      	b.n	8008f06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ea2:	2308      	movs	r3, #8
 8008ea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ea6:	2308      	movs	r3, #8
 8008ea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	0e5b      	lsrs	r3, r3, #25
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 0307 	and.w	r3, r3, #7
 8008eb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	0f5b      	lsrs	r3, r3, #29
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	7b3a      	ldrb	r2, [r7, #12]
 8008ece:	4911      	ldr	r1, [pc, #68]	; (8008f14 <UARTEx_SetNbDataToProcess+0x94>)
 8008ed0:	5c8a      	ldrb	r2, [r1, r2]
 8008ed2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ed6:	7b3a      	ldrb	r2, [r7, #12]
 8008ed8:	490f      	ldr	r1, [pc, #60]	; (8008f18 <UARTEx_SetNbDataToProcess+0x98>)
 8008eda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	7b7a      	ldrb	r2, [r7, #13]
 8008eec:	4909      	ldr	r1, [pc, #36]	; (8008f14 <UARTEx_SetNbDataToProcess+0x94>)
 8008eee:	5c8a      	ldrb	r2, [r1, r2]
 8008ef0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ef4:	7b7a      	ldrb	r2, [r7, #13]
 8008ef6:	4908      	ldr	r1, [pc, #32]	; (8008f18 <UARTEx_SetNbDataToProcess+0x98>)
 8008ef8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008efa:	fb93 f3f2 	sdiv	r3, r3, r2
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f06:	bf00      	nop
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	080090f0 	.word	0x080090f0
 8008f18:	080090f8 	.word	0x080090f8

08008f1c <memset>:
 8008f1c:	4402      	add	r2, r0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d100      	bne.n	8008f26 <memset+0xa>
 8008f24:	4770      	bx	lr
 8008f26:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2a:	e7f9      	b.n	8008f20 <memset+0x4>

08008f2c <__libc_init_array>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	4d0d      	ldr	r5, [pc, #52]	; (8008f64 <__libc_init_array+0x38>)
 8008f30:	4c0d      	ldr	r4, [pc, #52]	; (8008f68 <__libc_init_array+0x3c>)
 8008f32:	1b64      	subs	r4, r4, r5
 8008f34:	10a4      	asrs	r4, r4, #2
 8008f36:	2600      	movs	r6, #0
 8008f38:	42a6      	cmp	r6, r4
 8008f3a:	d109      	bne.n	8008f50 <__libc_init_array+0x24>
 8008f3c:	4d0b      	ldr	r5, [pc, #44]	; (8008f6c <__libc_init_array+0x40>)
 8008f3e:	4c0c      	ldr	r4, [pc, #48]	; (8008f70 <__libc_init_array+0x44>)
 8008f40:	f000 f818 	bl	8008f74 <_init>
 8008f44:	1b64      	subs	r4, r4, r5
 8008f46:	10a4      	asrs	r4, r4, #2
 8008f48:	2600      	movs	r6, #0
 8008f4a:	42a6      	cmp	r6, r4
 8008f4c:	d105      	bne.n	8008f5a <__libc_init_array+0x2e>
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f54:	4798      	blx	r3
 8008f56:	3601      	adds	r6, #1
 8008f58:	e7ee      	b.n	8008f38 <__libc_init_array+0xc>
 8008f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f5e:	4798      	blx	r3
 8008f60:	3601      	adds	r6, #1
 8008f62:	e7f2      	b.n	8008f4a <__libc_init_array+0x1e>
 8008f64:	08009108 	.word	0x08009108
 8008f68:	08009108 	.word	0x08009108
 8008f6c:	08009108 	.word	0x08009108
 8008f70:	0800910c 	.word	0x0800910c

08008f74 <_init>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	bf00      	nop
 8008f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7a:	bc08      	pop	{r3}
 8008f7c:	469e      	mov	lr, r3
 8008f7e:	4770      	bx	lr

08008f80 <_fini>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	bf00      	nop
 8008f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f86:	bc08      	pop	{r3}
 8008f88:	469e      	mov	lr, r3
 8008f8a:	4770      	bx	lr
